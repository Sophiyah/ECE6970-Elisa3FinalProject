
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  0000b8f2  0000b986  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b8f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000963  0080021a  0080021a  0000b9a0  2**0
                  ALLOC
  3 .debug_aranges 00000200  00000000  00000000  0000b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000026a3  00000000  00000000  0000bba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004f71  00000000  00000000  0000e243  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001182  00000000  00000000  000131b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007c19  00000000  00000000  00014336  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008c0  00000000  00000000  0001bf50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001d37  00000000  00000000  0001c810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000133d  00000000  00000000  0001e547  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  0001f884  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      14:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      1c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      20:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      24:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      28:	0c 94 96 14 	jmp	0x292c	; 0x292c <__vector_10>
      2c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      30:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      34:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__vector_13>
      38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      3c:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__vector_15>
      40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      44:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      48:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      4c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      50:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      54:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      58:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      5c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      60:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      64:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__vector_25>
      68:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      6c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      70:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      74:	0c 94 3e 1e 	jmp	0x3c7c	; 0x3c7c <__vector_29>
      78:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      7c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      80:	0c 94 84 30 	jmp	0x6108	; 0x6108 <__vector_32>
      84:	0c 94 9a 30 	jmp	0x6134	; 0x6134 <__vector_33>
      88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      8c:	0c 94 ed 2f 	jmp	0x5fda	; 0x5fda <__vector_35>
      90:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      94:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      98:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      9c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a8:	0c 94 c1 2f 	jmp	0x5f82	; 0x5f82 <__vector_42>
      ac:	0c 94 d7 2f 	jmp	0x5fae	; 0x5fae <__vector_43>
      b0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      b4:	0c 94 20 2f 	jmp	0x5e40	; 0x5e40 <__vector_45>
      b8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      bc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      cc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      dc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      e0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      e4:	bc 17       	cp	r27, r28
      e6:	a7 17       	cp	r26, r23
      e8:	7e 17       	cp	r23, r30
      ea:	63 17       	cp	r22, r19
      ec:	3e 17       	cp	r19, r30
      ee:	08 17       	cp	r16, r24
      f0:	da 16       	cp	r13, r26
      f2:	1e 17       	cp	r17, r30
      f4:	a7 16       	cp	r10, r23
      f6:	8b 16       	cp	r8, r27
      f8:	2b 16       	cp	r2, r27
      fa:	2b 16       	cp	r2, r27
      fc:	2b 16       	cp	r2, r27
      fe:	2b 16       	cp	r2, r27
     100:	2b 16       	cp	r2, r27
     102:	2b 16       	cp	r2, r27
     104:	7f 16       	cp	r7, r31
     106:	74 16       	cp	r7, r20
     108:	2b 16       	cp	r2, r27
     10a:	2b 16       	cp	r2, r27
     10c:	2b 16       	cp	r2, r27
     10e:	2b 16       	cp	r2, r27
     110:	2b 16       	cp	r2, r27
     112:	2b 16       	cp	r2, r27
     114:	2b 16       	cp	r2, r27
     116:	2b 16       	cp	r2, r27
     118:	2b 16       	cp	r2, r27
     11a:	2b 16       	cp	r2, r27
     11c:	2b 16       	cp	r2, r27
     11e:	2b 16       	cp	r2, r27
     120:	a7 16       	cp	r10, r23
     122:	7e 17       	cp	r23, r30
     124:	68 16       	cp	r6, r24
     126:	5b 16       	cp	r5, r27
     128:	2b 16       	cp	r2, r27
     12a:	2b 16       	cp	r2, r27
     12c:	2b 16       	cp	r2, r27
     12e:	2b 16       	cp	r2, r27
     130:	2b 16       	cp	r2, r27
     132:	2b 16       	cp	r2, r27
     134:	2b 16       	cp	r2, r27
     136:	2b 16       	cp	r2, r27
     138:	2b 16       	cp	r2, r27
     13a:	2b 16       	cp	r2, r27
     13c:	2b 16       	cp	r2, r27
     13e:	2b 16       	cp	r2, r27
     140:	3e 17       	cp	r19, r30
     142:	da 16       	cp	r13, r26
     144:	2b 16       	cp	r2, r27
     146:	2b 16       	cp	r2, r27
     148:	bc 17       	cp	r27, r28
     14a:	08 17       	cp	r16, r24
     14c:	4b 16       	cp	r4, r27
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e2 ef       	ldi	r30, 0xF2	; 242
     1b2:	f8 eb       	ldi	r31, 0xB8	; 184
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	aa 31       	cpi	r26, 0x1A	; 26
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	1b e0       	ldi	r17, 0x0B	; 11
     1c6:	aa e1       	ldi	r26, 0x1A	; 26
     1c8:	b2 e0       	ldi	r27, 0x02	; 2
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	ad 37       	cpi	r26, 0x7D	; 125
     1d0:	b1 07       	cpc	r27, r17
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
     1d8:	0c 94 77 5c 	jmp	0xb8ee	; 0xb8ee <_exit>

000001dc <__bad_interrupt>:
     1dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e0 <main>:
#include "behaviors.h"
#include "sensors.h"
#include "irCommunication.h"
#include "motors.h"

int main(void) {
     1e0:	2f 92       	push	r2
     1e2:	3f 92       	push	r3
     1e4:	4f 92       	push	r4
     1e6:	5f 92       	push	r5
     1e8:	6f 92       	push	r6
     1ea:	7f 92       	push	r7
     1ec:	8f 92       	push	r8
     1ee:	9f 92       	push	r9
     1f0:	af 92       	push	r10
     1f2:	bf 92       	push	r11
     1f4:	cf 92       	push	r12
     1f6:	df 92       	push	r13
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	df 93       	push	r29
     202:	cf 93       	push	r28
     204:	00 d0       	rcall	.+0      	; 0x206 <main+0x26>
     206:	00 d0       	rcall	.+0      	; 0x208 <main+0x28>
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	float targetAngle=0;

	initPeripherals();
     20c:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <initPeripherals>

	initBehaviors();
     210:	0e 94 df 42 	call	0x85be	; 0x85be <initBehaviors>

	speedStepCounter = getTime100MicroSec();
     214:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     218:	9b 01       	movw	r18, r22
     21a:	ac 01       	movw	r20, r24
     21c:	60 93 64 04 	sts	0x0464, r22
     220:	30 93 65 04 	sts	0x0465, r19
     224:	40 93 66 04 	sts	0x0466, r20
     228:	50 93 67 04 	sts	0x0467, r21
     22c:	10 92 68 04 	sts	0x0468, r1
     230:	10 92 69 04 	sts	0x0469, r1
     234:	10 92 6a 04 	sts	0x046A, r1
     238:	10 92 6b 04 	sts	0x046B, r1
	
	// I noticed that I have to wait a little before calibrating in order to have the sensors to be 
	// well calibrated (sensors noise eliminated). Don't sure why, maybe due to the sensitivity of the 
	// sensor that stabilizes...
	startTime = getTime100MicroSec();
     23c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     240:	7b 01       	movw	r14, r22
     242:	8c 01       	movw	r16, r24
	while((getTime100MicroSec() - startTime) < PAUSE_300_MSEC);
     244:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     248:	6e 19       	sub	r22, r14
     24a:	7f 09       	sbc	r23, r15
     24c:	80 0b       	sbc	r24, r16
     24e:	91 0b       	sbc	r25, r17
     250:	65 54       	subi	r22, 0x45	; 69
     252:	7b 40       	sbci	r23, 0x0B	; 11
     254:	80 40       	sbci	r24, 0x00	; 0
     256:	90 40       	sbci	r25, 0x00	; 0
     258:	a8 f3       	brcs	.-22     	; 0x244 <main+0x64>
	calibrateSensors();
     25a:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <calibrateSensors>

	startTime = getTime100MicroSec();
     25e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     262:	7b 01       	movw	r14, r22
     264:	8c 01       	movw	r16, r24
     266:	44 24       	eor	r4, r4
     268:	55 24       	eor	r5, r5
     26a:	32 01       	movw	r6, r4
     26c:	cc 24       	eor	r12, r12
     26e:	88 24       	eor	r8, r8
     270:	99 24       	eor	r9, r9
     272:	1e 82       	std	Y+6, r1	; 0x06
     274:	1d 82       	std	Y+5, r1	; 0x05
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	89 83       	std	Y+1, r24	; 0x01
     280:	9a 83       	std	Y+2, r25	; 0x02
     282:	ab 83       	std	Y+3, r26	; 0x03
     284:	bc 83       	std	Y+4, r27	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     286:	dd 24       	eor	r13, r13
     288:	da 94       	dec	r13
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
						pwm_red = 255;
						pwm_green = 255;
						pwm_blue = 254;
     28a:	be ef       	ldi	r27, 0xFE	; 254
     28c:	2b 2e       	mov	r2, r27
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     28e:	33 24       	eor	r3, r3
     290:	33 94       	inc	r3
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     292:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <getSelector>
     296:	80 93 50 04 	sts	0x0450, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     29a:	0e 94 c7 45 	call	0x8b8e	; 0x8b8e <readAccelXYZ>

		computeAngle();
     29e:	0e 94 34 44 	call	0x8868	; 0x8868 <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     2a2:	80 91 50 04 	lds	r24, 0x0450
     2a6:	87 30       	cpi	r24, 0x07	; 7
     2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0xcc>
     2aa:	5b c1       	rjmp	.+694    	; 0x562 <main+0x382>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     2ac:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     2b0:	6e 19       	sub	r22, r14
     2b2:	7f 09       	sbc	r23, r15
     2b4:	80 0b       	sbc	r24, r16
     2b6:	91 0b       	sbc	r25, r17
     2b8:	6e 51       	subi	r22, 0x1E	; 30
     2ba:	7b 44       	sbci	r23, 0x4B	; 75
     2bc:	80 40       	sbci	r24, 0x00	; 0
     2be:	90 40       	sbci	r25, 0x00	; 0
     2c0:	08 f0       	brcs	.+2      	; 0x2c4 <main+0xe4>
     2c2:	f7 c0       	rjmp	.+494    	; 0x4b2 <main+0x2d2>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     2c4:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     2c8:	0e 94 45 10 	call	0x208a	; 0x208a <handleRFCommands>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     2cc:	90 91 50 04 	lds	r25, 0x0450
     2d0:	97 30       	cpi	r25, 0x07	; 7
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <main+0xf6>
     2d4:	0a c1       	rjmp	.+532    	; 0x4ea <main+0x30a>
     2d6:	98 30       	cpi	r25, 0x08	; 8
     2d8:	08 f0       	brcs	.+2      	; 0x2dc <main+0xfc>
     2da:	61 c0       	rjmp	.+194    	; 0x39e <main+0x1be>
     2dc:	93 30       	cpi	r25, 0x03	; 3
     2de:	09 f4       	brne	.+2      	; 0x2e2 <main+0x102>
     2e0:	98 c1       	rjmp	.+816    	; 0x612 <main+0x432>
     2e2:	94 30       	cpi	r25, 0x04	; 4
     2e4:	08 f0       	brcs	.+2      	; 0x2e8 <main+0x108>
     2e6:	69 c1       	rjmp	.+722    	; 0x5ba <main+0x3da>
     2e8:	91 30       	cpi	r25, 0x01	; 1
     2ea:	09 f4       	brne	.+2      	; 0x2ee <main+0x10e>
     2ec:	c8 c1       	rjmp	.+912    	; 0x67e <main+0x49e>
     2ee:	92 30       	cpi	r25, 0x02	; 2
     2f0:	08 f0       	brcs	.+2      	; 0x2f4 <main+0x114>
     2f2:	91 c1       	rjmp	.+802    	; 0x616 <main+0x436>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     2f4:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <handleMotorsWithNoController>
     2f8:	90 91 50 04 	lds	r25, 0x0450
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     2fc:	99 23       	and	r25, r25
     2fe:	09 f0       	breq	.+2      	; 0x302 <main+0x122>
     300:	d3 c0       	rjmp	.+422    	; 0x4a8 <main+0x2c8>
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     302:	c9 16       	cp	r12, r25
     304:	09 f4       	brne	.+2      	; 0x308 <main+0x128>
     306:	49 c0       	rjmp	.+146    	; 0x39a <main+0x1ba>
			disableObstacleAvoidance();
     308:	0e 94 d0 40 	call	0x81a0	; 0x81a0 <disableObstacleAvoidance>
			disableCliffAvoidance();
     30c:	0e 94 d7 40 	call	0x81ae	; 0x81ae <disableCliffAvoidance>
			GREEN_LED0_OFF;
     310:	80 91 0b 01 	lds	r24, 0x010B
     314:	81 60       	ori	r24, 0x01	; 1
     316:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     31a:	80 91 0b 01 	lds	r24, 0x010B
     31e:	82 60       	ori	r24, 0x02	; 2
     320:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     324:	80 91 0b 01 	lds	r24, 0x010B
     328:	84 60       	ori	r24, 0x04	; 4
     32a:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     32e:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     330:	80 91 0b 01 	lds	r24, 0x010B
     334:	80 61       	ori	r24, 0x10	; 16
     336:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     33a:	80 91 0b 01 	lds	r24, 0x010B
     33e:	80 62       	ori	r24, 0x20	; 32
     340:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     344:	80 91 0b 01 	lds	r24, 0x010B
     348:	80 64       	ori	r24, 0x40	; 64
     34a:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     34e:	80 91 0b 01 	lds	r24, 0x010B
     352:	80 68       	ori	r24, 0x80	; 128
     354:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     358:	d0 92 08 02 	sts	0x0208, r13
			pwm_green = 255;
     35c:	d0 92 09 02 	sts	0x0209, r13
			pwm_blue = 255;
     360:	d0 92 0a 02 	sts	0x020A, r13
			updateRedLed(pwm_red);
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
			updateGreenLed(pwm_green);
     36a:	80 91 09 02 	lds	r24, 0x0209
     36e:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
			updateBlueLed(pwm_blue);
     372:	80 91 0a 02 	lds	r24, 0x020A
     376:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
			setRightSpeed(0);
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
			setLeftSpeed(0);
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
			rgbState = 0;
     386:	10 92 18 03 	sts	0x0318, r1
			calibrationWritten = 0;
     38a:	10 92 6d 04 	sts	0x046D, r1
			demoState = 0;
     38e:	10 92 54 04 	sts	0x0454, r1

			irCommState = 0;
     392:	10 92 d5 04 	sts	0x04D5, r1
     396:	90 91 50 04 	lds	r25, 0x0450
		}
		prevSelector = currentSelector;
     39a:	c9 2e       	mov	r12, r25
     39c:	7a cf       	rjmp	.-268    	; 0x292 <main+0xb2>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     39e:	9b 30       	cpi	r25, 0x0B	; 11
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <main+0x1c4>
     3a2:	8b c1       	rjmp	.+790    	; 0x6ba <main+0x4da>
     3a4:	9c 30       	cpi	r25, 0x0C	; 12
     3a6:	08 f0       	brcs	.+2      	; 0x3aa <main+0x1ca>
     3a8:	ef c0       	rjmp	.+478    	; 0x588 <main+0x3a8>
     3aa:	99 30       	cpi	r25, 0x09	; 9
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <main+0x1d0>
     3ae:	b7 c1       	rjmp	.+878    	; 0x71e <main+0x53e>
     3b0:	9a 30       	cpi	r25, 0x0A	; 10
     3b2:	08 f4       	brcc	.+2      	; 0x3b6 <main+0x1d6>
     3b4:	a8 c1       	rjmp	.+848    	; 0x706 <main+0x526>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     3b6:	80 91 54 04 	lds	r24, 0x0454
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <main+0x1e0>
     3be:	62 c4       	rjmp	.+2244   	; 0xc84 <main+0xaa4>
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	08 f0       	brcs	.+2      	; 0x3c6 <main+0x1e6>
     3c4:	5f c3       	rjmp	.+1726   	; 0xa84 <main+0x8a4>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     3c6:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     3ca:	60 93 58 04 	sts	0x0458, r22
     3ce:	70 93 59 04 	sts	0x0459, r23
     3d2:	80 93 5a 04 	sts	0x045A, r24
     3d6:	90 93 5b 04 	sts	0x045B, r25
							demoEndTime = getTime100MicroSec();							
     3da:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     3de:	60 93 60 04 	sts	0x0460, r22
     3e2:	70 93 61 04 	sts	0x0461, r23
     3e6:	80 93 62 04 	sts	0x0462, r24
     3ea:	90 93 63 04 	sts	0x0463, r25
							demoStartTime2 = getTime100MicroSec();
     3ee:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     3f2:	60 93 5c 04 	sts	0x045C, r22
     3f6:	70 93 5d 04 	sts	0x045D, r23
     3fa:	80 93 5e 04 	sts	0x045E, r24
     3fe:	90 93 5f 04 	sts	0x045F, r25
							enableObstacleAvoidance();
     402:	0e 94 cc 40 	call	0x8198	; 0x8198 <enableObstacleAvoidance>
							setLeftSpeed(20);
     406:	84 e1       	ldi	r24, 0x14	; 20
     408:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
							setRightSpeed(20);
     40c:	84 e1       	ldi	r24, 0x14	; 20
     40e:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
							demoState = 1;
     412:	30 92 54 04 	sts	0x0454, r3
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     416:	80 91 6f 04 	lds	r24, 0x046F
     41a:	81 30       	cpi	r24, 0x01	; 1
     41c:	09 f4       	brne	.+2      	; 0x420 <main+0x240>
     41e:	60 c3       	rjmp	.+1728   	; 0xae0 <main+0x900>
     420:	81 30       	cpi	r24, 0x01	; 1
     422:	08 f0       	brcs	.+2      	; 0x426 <main+0x246>
     424:	f9 c2       	rjmp	.+1522   	; 0xa18 <main+0x838>
						case 0:							
							pwm_red = 255;
     426:	d0 92 08 02 	sts	0x0208, r13
							pwm_green = 255;
     42a:	d0 92 09 02 	sts	0x0209, r13
							pwm_blue = 255;
     42e:	d0 92 0a 02 	sts	0x020A, r13
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     432:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     436:	20 91 60 04 	lds	r18, 0x0460
     43a:	30 91 61 04 	lds	r19, 0x0461
     43e:	40 91 62 04 	lds	r20, 0x0462
     442:	50 91 63 04 	lds	r21, 0x0463
     446:	62 1b       	sub	r22, r18
     448:	73 0b       	sbc	r23, r19
     44a:	84 0b       	sbc	r24, r20
     44c:	95 0b       	sbc	r25, r21
     44e:	61 5c       	subi	r22, 0xC1	; 193
     450:	73 40       	sbci	r23, 0x03	; 3
     452:	80 40       	sbci	r24, 0x00	; 0
     454:	90 40       	sbci	r25, 0x00	; 0
     456:	10 f0       	brcs	.+4      	; 0x45c <main+0x27c>
     458:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <main+0x14ba>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     45c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     460:	20 91 5c 04 	lds	r18, 0x045C
     464:	30 91 5d 04 	lds	r19, 0x045D
     468:	40 91 5e 04 	lds	r20, 0x045E
     46c:	50 91 5f 04 	lds	r21, 0x045F
     470:	62 1b       	sub	r22, r18
     472:	73 0b       	sbc	r23, r19
     474:	84 0b       	sbc	r24, r20
     476:	95 0b       	sbc	r25, r21
     478:	6e 51       	subi	r22, 0x1E	; 30
     47a:	7b 44       	sbci	r23, 0x4B	; 75
     47c:	80 40       	sbci	r24, 0x00	; 0
     47e:	90 40       	sbci	r25, 0x00	; 0
     480:	10 f0       	brcs	.+4      	; 0x486 <main+0x2a6>
     482:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <main+0x149e>
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     486:	80 91 08 02 	lds	r24, 0x0208
     48a:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
							updateGreenLed(pwm_green);
     48e:	80 91 09 02 	lds	r24, 0x0209
     492:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
							updateBlueLed(pwm_blue);
     496:	80 91 0a 02 	lds	r24, 0x020A
     49a:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
     49e:	90 91 50 04 	lds	r25, 0x0450
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     4a2:	99 23       	and	r25, r25
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <main+0x2c8>
     4a6:	2d cf       	rjmp	.-422    	; 0x302 <main+0x122>
			handleMotorsWithSpeedController();  
     4a8:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <handleMotorsWithSpeedController>
     4ac:	90 91 50 04 	lds	r25, 0x0450
     4b0:	28 cf       	rjmp	.-432    	; 0x302 <main+0x122>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     4b2:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     4b6:	90 91 50 04 	lds	r25, 0x0450
     4ba:	89 2f       	mov	r24, r25
     4bc:	84 50       	subi	r24, 0x04	; 4
     4be:	82 30       	cpi	r24, 0x02	; 2
     4c0:	08 f4       	brcc	.+2      	; 0x4c4 <main+0x2e4>
     4c2:	80 c1       	rjmp	.+768    	; 0x7c4 <main+0x5e4>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     4c4:	97 30       	cpi	r25, 0x07	; 7
     4c6:	09 f4       	brne	.+2      	; 0x4ca <main+0x2ea>
     4c8:	ac c1       	rjmp	.+856    	; 0x822 <main+0x642>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     4ca:	96 30       	cpi	r25, 0x06	; 6
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <main+0x2f0>
     4ce:	a8 c0       	rjmp	.+336    	; 0x620 <main+0x440>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     4d0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     4d4:	7b 01       	movw	r14, r22
     4d6:	8c 01       	movw	r16, r24
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     4d8:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     4dc:	0e 94 45 10 	call	0x208a	; 0x208a <handleRFCommands>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     4e0:	90 91 50 04 	lds	r25, 0x0450
     4e4:	97 30       	cpi	r25, 0x07	; 7
     4e6:	09 f0       	breq	.+2      	; 0x4ea <main+0x30a>
     4e8:	f6 ce       	rjmp	.-532    	; 0x2d6 <main+0xf6>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     4ea:	80 91 54 04 	lds	r24, 0x0454
     4ee:	82 30       	cpi	r24, 0x02	; 2
     4f0:	11 f4       	brne	.+4      	; 0x4f6 <main+0x316>
     4f2:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <main+0x1362>
     4f6:	83 30       	cpi	r24, 0x03	; 3
     4f8:	08 f0       	brcs	.+2      	; 0x4fc <main+0x31c>
     4fa:	38 c3       	rjmp	.+1648   	; 0xb6c <main+0x98c>
     4fc:	88 23       	and	r24, r24
     4fe:	09 f0       	breq	.+2      	; 0x502 <main+0x322>
     500:	1f c7       	rjmp	.+3646   	; 0x1340 <main+0x1160>
						case 0:	// move around
							turnOffGreenLeds();
     502:	0e 94 02 44 	call	0x8804	; 0x8804 <turnOffGreenLeds>
							GREEN_LED0_ON;
     506:	80 91 0b 01 	lds	r24, 0x010B
     50a:	8e 7f       	andi	r24, 0xFE	; 254
     50c:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     510:	10 92 55 04 	sts	0x0455, r1
							enableObstacleAvoidance();
     514:	0e 94 cc 40 	call	0x8198	; 0x8198 <enableObstacleAvoidance>
							setRightSpeed(20);
     518:	84 e1       	ldi	r24, 0x14	; 20
     51a:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
							setLeftSpeed(20);
     51e:	84 e1       	ldi	r24, 0x14	; 20
     520:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     524:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     528:	60 93 60 04 	sts	0x0460, r22
     52c:	70 93 61 04 	sts	0x0461, r23
     530:	80 93 62 04 	sts	0x0462, r24
     534:	90 93 63 04 	sts	0x0463, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     538:	20 91 58 04 	lds	r18, 0x0458
     53c:	30 91 59 04 	lds	r19, 0x0459
     540:	40 91 5a 04 	lds	r20, 0x045A
     544:	50 91 5b 04 	lds	r21, 0x045B
     548:	62 1b       	sub	r22, r18
     54a:	73 0b       	sbc	r23, r19
     54c:	84 0b       	sbc	r24, r20
     54e:	95 0b       	sbc	r25, r21
     550:	63 53       	subi	r22, 0x33	; 51
     552:	7f 4e       	sbci	r23, 0xEF	; 239
     554:	82 40       	sbci	r24, 0x02	; 2
     556:	90 40       	sbci	r25, 0x00	; 0
     558:	08 f4       	brcc	.+2      	; 0x55c <main+0x37c>
     55a:	95 cf       	rjmp	.-214    	; 0x486 <main+0x2a6>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     55c:	30 92 54 04 	sts	0x0454, r3
     560:	92 cf       	rjmp	.-220    	; 0x486 <main+0x2a6>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     562:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     566:	64 19       	sub	r22, r4
     568:	75 09       	sbc	r23, r5
     56a:	86 09       	sbc	r24, r6
     56c:	97 09       	sbc	r25, r7
     56e:	68 5c       	subi	r22, 0xC8	; 200
     570:	72 41       	sbci	r23, 0x12	; 18
     572:	80 40       	sbci	r24, 0x00	; 0
     574:	90 40       	sbci	r25, 0x00	; 0
     576:	08 f4       	brcc	.+2      	; 0x57a <main+0x39a>
     578:	99 ce       	rjmp	.-718    	; 0x2ac <main+0xcc>
				pwm_red = 255;
     57a:	d0 92 08 02 	sts	0x0208, r13
				pwm_green = 255;
     57e:	d0 92 09 02 	sts	0x0209, r13
				pwm_blue = 255;			
     582:	d0 92 0a 02 	sts	0x020A, r13
     586:	92 ce       	rjmp	.-732    	; 0x2ac <main+0xcc>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     588:	9d 30       	cpi	r25, 0x0D	; 13
     58a:	09 f4       	brne	.+2      	; 0x58e <main+0x3ae>
     58c:	7d c0       	rjmp	.+250    	; 0x688 <main+0x4a8>
     58e:	9d 30       	cpi	r25, 0x0D	; 13
     590:	08 f4       	brcc	.+2      	; 0x594 <main+0x3b4>
     592:	5f c0       	rjmp	.+190    	; 0x652 <main+0x472>
     594:	9e 30       	cpi	r25, 0x0E	; 14
     596:	09 f0       	breq	.+2      	; 0x59a <main+0x3ba>
     598:	b1 ce       	rjmp	.-670    	; 0x2fc <main+0x11c>
						break;
				}
				break;
			
			case 14: // Multirobots communication: continuously change current color and make it change also for other robots
				switch(demoState) {
     59a:	80 91 54 04 	lds	r24, 0x0454
     59e:	88 23       	and	r24, r24
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <main+0x3c4>
     5a2:	96 c1       	rjmp	.+812    	; 0x8d0 <main+0x6f0>
					case 0:
						irCommInit();
     5a4:	0e 94 e3 57 	call	0xafc6	; 0xafc6 <irCommInit>
						demoState = 1;
     5a8:	30 92 54 04 	sts	0x0454, r3
						irCommRxByteExpected = 1;
     5ac:	30 92 17 05 	sts	0x0517, r3
						irCommMsgCount = 0;
     5b0:	10 92 ec 04 	sts	0x04EC, r1
     5b4:	90 91 50 04 	lds	r25, 0x0450
     5b8:	a1 ce       	rjmp	.-702    	; 0x2fc <main+0x11c>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     5ba:	95 30       	cpi	r25, 0x05	; 5
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <main+0x3e0>
     5be:	eb c0       	rjmp	.+470    	; 0x796 <main+0x5b6>
     5c0:	96 30       	cpi	r25, 0x06	; 6
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <main+0x3e6>
     5c4:	c3 c0       	rjmp	.+390    	; 0x74c <main+0x56c>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     5c6:	80 91 1f 04 	lds	r24, 0x041F
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <main+0x3f0>
     5ce:	9c c3       	rjmp	.+1848   	; 0xd08 <main+0xb28>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	08 f0       	brcs	.+2      	; 0x5d6 <main+0x3f6>
     5d4:	c4 c1       	rjmp	.+904    	; 0x95e <main+0x77e>
						case 0:
							setRightSpeed(0);
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
							setLeftSpeed(0);
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
							turnOffGreenLeds();
     5e2:	0e 94 02 44 	call	0x8804	; 0x8804 <turnOffGreenLeds>
							pwm_red=255;
     5e6:	d0 92 08 02 	sts	0x0208, r13
							pwm_green=255;
     5ea:	d0 92 09 02 	sts	0x0209, r13
							pwm_blue=255;
     5ee:	d0 92 0a 02 	sts	0x020A, r13
							updateRedLed(pwm_red);
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
							updateGreenLed(pwm_green);
     5f8:	80 91 09 02 	lds	r24, 0x0209
     5fc:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
							updateBlueLed(pwm_blue);
     600:	80 91 0a 02 	lds	r24, 0x020A
     604:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
							LED_IR1_HIGH;
     608:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     60a:	45 9a       	sbi	0x08, 5	; 8
     60c:	90 91 50 04 	lds	r25, 0x0450
     610:	75 ce       	rjmp	.-790    	; 0x2fc <main+0x11c>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     612:	0e 94 cc 40 	call	0x8198	; 0x8198 <enableObstacleAvoidance>
					enableCliffAvoidance();
     616:	0e 94 d3 40 	call	0x81a6	; 0x81a6 <enableCliffAvoidance>
     61a:	90 91 50 04 	lds	r25, 0x0450
     61e:	6e ce       	rjmp	.-804    	; 0x2fc <main+0x11c>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     620:	90 91 1f 04 	lds	r25, 0x041F
     624:	91 30       	cpi	r25, 0x01	; 1
     626:	09 f0       	breq	.+2      	; 0x62a <main+0x44a>
     628:	53 cf       	rjmp	.-346    	; 0x4d0 <main+0x2f0>
     62a:	80 91 13 03 	lds	r24, 0x0313
     62e:	82 30       	cpi	r24, 0x02	; 2
     630:	08 f0       	brcs	.+2      	; 0x634 <main+0x454>
     632:	4e cf       	rjmp	.-356    	; 0x4d0 <main+0x2f0>
					if(rgbState == 0) {
     634:	80 91 18 03 	lds	r24, 0x0318
     638:	88 23       	and	r24, r24
     63a:	11 f0       	breq	.+4      	; 0x640 <main+0x460>
     63c:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <main+0x1618>
						pwm_red = 254;
     640:	20 92 08 02 	sts	0x0208, r2
						pwm_green = 255;
     644:	d0 92 09 02 	sts	0x0209, r13
						pwm_blue = 255;
     648:	d0 92 0a 02 	sts	0x020A, r13
						rgbState = 1;
     64c:	90 93 18 03 	sts	0x0318, r25
     650:	3f cf       	rjmp	.-386    	; 0x4d0 <main+0x2f0>
						break;
				}
				break;

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
     652:	80 91 54 04 	lds	r24, 0x0454
     656:	81 30       	cpi	r24, 0x01	; 1
     658:	09 f4       	brne	.+2      	; 0x65c <main+0x47c>
     65a:	0c c6       	rjmp	.+3096   	; 0x1274 <main+0x1094>
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	08 f0       	brcs	.+2      	; 0x662 <main+0x482>
     660:	c3 c2       	rjmp	.+1414   	; 0xbe8 <main+0xa08>
					case 0:
						irCommInit();
     662:	0e 94 e3 57 	call	0xafc6	; 0xafc6 <irCommInit>
						irCommRobotsNum = 4;	// total number of robots that exchange data
     666:	f4 e0       	ldi	r31, 0x04	; 4
     668:	f0 93 ea 04 	sts	0x04EA, r31
						irCommRobotId = 3;		// choose the id of the robot (a different id for each robot), from 0 to 254 (255 is reserved)
     66c:	23 e0       	ldi	r18, 0x03	; 3
     66e:	20 93 e9 04 	sts	0x04E9, r18
							updateBlueLed(255);
							updateRedLed(255);
							updateGreenLed(128);
							demoState = 1;
						} else {
							demoState = 2;
     672:	32 e0       	ldi	r19, 0x02	; 2
     674:	30 93 54 04 	sts	0x0454, r19
     678:	90 91 50 04 	lds	r25, 0x0450
     67c:	3f ce       	rjmp	.-898    	; 0x2fc <main+0x11c>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     67e:	0e 94 cc 40 	call	0x8198	; 0x8198 <enableObstacleAvoidance>
     682:	90 91 50 04 	lds	r25, 0x0450
     686:	3a ce       	rjmp	.-908    	; 0x2fc <main+0x11c>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
     688:	80 91 54 04 	lds	r24, 0x0454
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	09 f4       	brne	.+2      	; 0x692 <main+0x4b2>
     690:	d6 c5       	rjmp	.+2988   	; 0x123e <main+0x105e>
     692:	81 30       	cpi	r24, 0x01	; 1
     694:	08 f0       	brcs	.+2      	; 0x698 <main+0x4b8>
     696:	3f c1       	rjmp	.+638    	; 0x916 <main+0x736>
					case 0:
						irCommInit();
     698:	0e 94 e3 57 	call	0xafc6	; 0xafc6 <irCommInit>
						enableObstacleAvoidance();
     69c:	0e 94 cc 40 	call	0x8198	; 0x8198 <enableObstacleAvoidance>
						setLeftSpeed(10);
     6a0:	8a e0       	ldi	r24, 0x0A	; 10
     6a2:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
						setRightSpeed(10);
     6a6:	8a e0       	ldi	r24, 0x0A	; 10
     6a8:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
						demoState = 1;
     6ac:	30 92 54 04 	sts	0x0454, r3
     6b0:	88 24       	eor	r8, r8
     6b2:	99 24       	eor	r9, r9
     6b4:	90 91 50 04 	lds	r25, 0x0450
     6b8:	21 ce       	rjmp	.-958    	; 0x2fc <main+0x11c>

					break;

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
     6ba:	80 91 54 04 	lds	r24, 0x0454
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <main+0x4e4>
     6c2:	7c c6       	rjmp	.+3320   	; 0x13bc <main+0x11dc>
     6c4:	83 30       	cpi	r24, 0x03	; 3
     6c6:	08 f0       	brcs	.+2      	; 0x6ca <main+0x4ea>
     6c8:	78 c1       	rjmp	.+752    	; 0x9ba <main+0x7da>
     6ca:	88 23       	and	r24, r24
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <main+0x4f0>
     6ce:	b3 c6       	rjmp	.+3430   	; 0x1436 <main+0x1256>
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <main+0x4f6>
     6d4:	e9 ce       	rjmp	.-558    	; 0x4a8 <main+0x2c8>
						irCommInit();
						demoState = 1;
						break;

					case 1:						
						enableObstacleAvoidance();
     6d6:	0e 94 cc 40 	call	0x8198	; 0x8198 <enableObstacleAvoidance>
						setLeftSpeed(10);
     6da:	8a e0       	ldi	r24, 0x0A	; 10
     6dc:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
						setRightSpeed(10);
     6e0:	8a e0       	ldi	r24, 0x0A	; 10

					case 3:	// rotate right
						irCommTasks();
						if(theta <= targetAngle) {
							setLeftSpeed(0);
							setRightSpeed(0);
     6e2:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
							demoState = 2;
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	b0 93 54 04 	sts	0x0454, r27
							demoStartTime = getTime100MicroSec();
     6ec:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     6f0:	60 93 58 04 	sts	0x0458, r22
     6f4:	70 93 59 04 	sts	0x0459, r23
     6f8:	80 93 5a 04 	sts	0x045A, r24
     6fc:	90 93 5b 04 	sts	0x045B, r25
     700:	90 91 50 04 	lds	r25, 0x0450
     704:	fb cd       	rjmp	.-1034   	; 0x2fc <main+0x11c>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     706:	30 92 0e 02 	sts	0x020E, r3
					if(calibrateOdomFlag==1) {
     70a:	80 91 6e 05 	lds	r24, 0x056E
     70e:	81 30       	cpi	r24, 0x01	; 1
     710:	09 f0       	breq	.+2      	; 0x714 <main+0x534>
     712:	f4 cd       	rjmp	.-1048   	; 0x2fc <main+0x11c>
						handleCalibration();
     714:	0e 94 1a 34 	call	0x6834	; 0x6834 <handleCalibration>
     718:	90 91 50 04 	lds	r25, 0x0450
     71c:	ef cd       	rjmp	.-1058   	; 0x2fc <main+0x11c>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     71e:	80 91 54 04 	lds	r24, 0x0454
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	09 f4       	brne	.+2      	; 0x728 <main+0x548>
     726:	d6 c2       	rjmp	.+1452   	; 0xcd4 <main+0xaf4>
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	08 f0       	brcs	.+2      	; 0x72e <main+0x54e>
     72c:	37 c1       	rjmp	.+622    	; 0x99c <main+0x7bc>
						case 0:
							demoStartTime = getTime100MicroSec();
     72e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     732:	60 93 58 04 	sts	0x0458, r22
     736:	70 93 59 04 	sts	0x0459, r23
     73a:	80 93 5a 04 	sts	0x045A, r24
     73e:	90 93 5b 04 	sts	0x045B, r25
							demoState = 1;
     742:	30 92 54 04 	sts	0x0454, r3
     746:	90 91 50 04 	lds	r25, 0x0450
     74a:	d8 cd       	rjmp	.-1104   	; 0x2fc <main+0x11c>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     74c:	80 91 0b 01 	lds	r24, 0x010B
     750:	8e 7f       	andi	r24, 0xFE	; 254
     752:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     756:	80 91 0b 01 	lds	r24, 0x010B
     75a:	8d 7f       	andi	r24, 0xFD	; 253
     75c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     760:	80 91 0b 01 	lds	r24, 0x010B
     764:	8b 7f       	andi	r24, 0xFB	; 251
     766:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     76a:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     76c:	80 91 0b 01 	lds	r24, 0x010B
     770:	8f 7e       	andi	r24, 0xEF	; 239
     772:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     776:	80 91 0b 01 	lds	r24, 0x010B
     77a:	8f 7d       	andi	r24, 0xDF	; 223
     77c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     780:	80 91 0b 01 	lds	r24, 0x010B
     784:	8f 7b       	andi	r24, 0xBF	; 191
     786:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     78a:	80 91 0b 01 	lds	r24, 0x010B
     78e:	8f 77       	andi	r24, 0x7F	; 127
     790:	80 93 0b 01 	sts	0x010B, r24
     794:	78 ce       	rjmp	.-784    	; 0x486 <main+0x2a6>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     796:	80 91 08 02 	lds	r24, 0x0208
     79a:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
					updateGreenLed(pwm_green);
     79e:	80 91 09 02 	lds	r24, 0x0209
     7a2:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
					updateBlueLed(pwm_blue);
     7a6:	80 91 0a 02 	lds	r24, 0x020A
     7aa:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
					enableObstacleAvoidance();
     7ae:	0e 94 cc 40 	call	0x8198	; 0x8198 <enableObstacleAvoidance>
					setLeftSpeed(25);
     7b2:	89 e1       	ldi	r24, 0x19	; 25
     7b4:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
					setRightSpeed(25);
     7b8:	89 e1       	ldi	r24, 0x19	; 25
     7ba:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
     7be:	90 91 50 04 	lds	r25, 0x0450
     7c2:	9c cd       	rjmp	.-1224   	; 0x2fc <main+0x11c>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     7c4:	0e 94 07 5c 	call	0xb80e	; 0xb80e <rand>
     7c8:	6e e1       	ldi	r22, 0x1E	; 30
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
     7d0:	ed 81       	ldd	r30, Y+5	; 0x05
     7d2:	fe 81       	ldd	r31, Y+6	; 0x06
     7d4:	e8 0f       	add	r30, r24
     7d6:	f9 1f       	adc	r31, r25
     7d8:	ef 77       	andi	r30, 0x7F	; 127
     7da:	f0 70       	andi	r31, 0x00	; 0
     7dc:	fe 83       	std	Y+6, r31	; 0x06
     7de:	ed 83       	std	Y+5, r30	; 0x05

				switch(rgbState) {
     7e0:	80 91 18 03 	lds	r24, 0x0318
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	09 f4       	brne	.+2      	; 0x7ea <main+0x60a>
     7e8:	7b c5       	rjmp	.+2806   	; 0x12e0 <main+0x1100>
     7ea:	81 30       	cpi	r24, 0x01	; 1
     7ec:	08 f0       	brcs	.+2      	; 0x7f0 <main+0x610>
     7ee:	40 c2       	rjmp	.+1152   	; 0xc70 <main+0xa90>
					case 0:
						pwm_red = 255 - currRand;	
     7f0:	8d 81       	ldd	r24, Y+5	; 0x05
     7f2:	80 95       	com	r24
     7f4:	80 93 08 02 	sts	0x0208, r24
						rgbState = 1;
     7f8:	30 92 18 03 	sts	0x0318, r3
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     7fc:	2d 81       	ldd	r18, Y+5	; 0x05
     7fe:	3e 81       	ldd	r19, Y+6	; 0x06
     800:	20 32       	cpi	r18, 0x20	; 32
     802:	31 05       	cpc	r19, r1
     804:	08 f0       	brcs	.+2      	; 0x808 <main+0x628>
     806:	76 c0       	rjmp	.+236    	; 0x8f4 <main+0x714>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     808:	80 91 09 02 	lds	r24, 0x0209
     80c:	8f 3f       	cpi	r24, 0xFF	; 255
     80e:	09 f4       	brne	.+2      	; 0x812 <main+0x632>
     810:	5f ce       	rjmp	.-834    	; 0x4d0 <main+0x2f0>
     812:	80 91 0a 02 	lds	r24, 0x020A
     816:	8f 3f       	cpi	r24, 0xFF	; 255
     818:	09 f4       	brne	.+2      	; 0x81c <main+0x63c>
     81a:	5a ce       	rjmp	.-844    	; 0x4d0 <main+0x2f0>
						pwm_red = 255;
     81c:	d0 92 08 02 	sts	0x0208, r13
     820:	57 ce       	rjmp	.-850    	; 0x4d0 <main+0x2f0>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     822:	80 91 94 00 	lds	r24, 0x0094
     826:	90 91 95 00 	lds	r25, 0x0095
     82a:	0e 94 0c 5c 	call	0xb818	; 0xb818 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     82e:	0e 94 07 5c 	call	0xb80e	; 0xb80e <rand>
     832:	6e e1       	ldi	r22, 0x1E	; 30
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
     83a:	0d 81       	ldd	r16, Y+5	; 0x05
     83c:	1e 81       	ldd	r17, Y+6	; 0x06
     83e:	08 0f       	add	r16, r24
     840:	19 1f       	adc	r17, r25
     842:	0f 77       	andi	r16, 0x7F	; 127
     844:	10 70       	andi	r17, 0x00	; 0

				pwm_red = 255 - currRand;
     846:	80 2f       	mov	r24, r16
     848:	80 95       	com	r24
     84a:	80 93 08 02 	sts	0x0208, r24
				
				srand(TCNT3);
     84e:	80 91 94 00 	lds	r24, 0x0094
     852:	90 91 95 00 	lds	r25, 0x0095
     856:	0e 94 0c 5c 	call	0xb818	; 0xb818 <srand>
				currRand = (currRand + rand()%30) % 128;	
     85a:	0e 94 07 5c 	call	0xb80e	; 0xb80e <rand>
     85e:	6e e1       	ldi	r22, 0x1E	; 30
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
     866:	08 0f       	add	r16, r24
     868:	19 1f       	adc	r17, r25
     86a:	0f 77       	andi	r16, 0x7F	; 127
     86c:	10 70       	andi	r17, 0x00	; 0
				pwm_green = 255 - currRand;
     86e:	80 2f       	mov	r24, r16
     870:	80 95       	com	r24
     872:	80 93 09 02 	sts	0x0209, r24

				srand(TCNT3);
     876:	80 91 94 00 	lds	r24, 0x0094
     87a:	90 91 95 00 	lds	r25, 0x0095
     87e:	0e 94 0c 5c 	call	0xb818	; 0xb818 <srand>
				currRand = (currRand + rand()%30) % 128;
     882:	0e 94 07 5c 	call	0xb80e	; 0xb80e <rand>
     886:	6e e1       	ldi	r22, 0x1E	; 30
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
     88e:	80 0f       	add	r24, r16
     890:	91 1f       	adc	r25, r17
     892:	8f 77       	andi	r24, 0x7F	; 127
     894:	90 70       	andi	r25, 0x00	; 0
     896:	9e 83       	std	Y+6, r25	; 0x06
     898:	8d 83       	std	Y+5, r24	; 0x05
				pwm_blue = 255 - currRand;
     89a:	8d 81       	ldd	r24, Y+5	; 0x05
     89c:	80 95       	com	r24
     89e:	80 93 0a 02 	sts	0x020A, r24

			
				srand(TCNT3);
     8a2:	80 91 94 00 	lds	r24, 0x0094
     8a6:	90 91 95 00 	lds	r25, 0x0095
     8aa:	0e 94 0c 5c 	call	0xb818	; 0xb818 <srand>
				currRand2 = rand()%128;
     8ae:	0e 94 07 5c 	call	0xb80e	; 0xb80e <rand>
     8b2:	60 e8       	ldi	r22, 0x80	; 128
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
				if(currRand2<32) {
     8ba:	80 32       	cpi	r24, 0x20	; 32
     8bc:	91 05       	cpc	r25, r1
     8be:	08 f0       	brcs	.+2      	; 0x8c2 <main+0x6e2>
     8c0:	d0 c1       	rjmp	.+928    	; 0xc62 <main+0xa82>
					pwm_red = 255;
     8c2:	d0 92 08 02 	sts	0x0208, r13
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     8c6:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     8ca:	2b 01       	movw	r4, r22
     8cc:	3c 01       	movw	r6, r24
     8ce:	00 ce       	rjmp	.-1024   	; 0x4d0 <main+0x2f0>
						break;
				}
				break;
			
			case 14: // Multirobots communication: continuously change current color and make it change also for other robots
				switch(demoState) {
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <main+0x6f6>
     8d4:	e9 cd       	rjmp	.-1070   	; 0x4a8 <main+0x2c8>
						irCommRxByteExpected = 1;
						irCommMsgCount = 0;
						break;

					case 1:	
						irCommTasks();
     8d6:	0e 94 2b 4d 	call	0x9a56	; 0x9a56 <irCommTasks>
						if(irCommDataSent()==1) {	
     8da:	0e 94 3b 4c 	call	0x9876	; 0x9876 <irCommDataSent>
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <main+0x704>
     8e2:	85 c7       	rjmp	.+3850   	; 0x17ee <main+0x160e>
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
     8e4:	0e 94 43 4c 	call	0x9886	; 0x9886 <irCommDataAvailable>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	09 f4       	brne	.+2      	; 0x8ee <main+0x70e>
     8ec:	51 c7       	rjmp	.+3746   	; 0x1790 <main+0x15b0>
     8ee:	90 91 50 04 	lds	r25, 0x0450
     8f2:	04 cd       	rjmp	.-1528   	; 0x2fc <main+0x11c>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     8f4:	20 34       	cpi	r18, 0x40	; 64
     8f6:	31 05       	cpc	r19, r1
     8f8:	08 f0       	brcs	.+2      	; 0x8fc <main+0x71c>
     8fa:	ab c4       	rjmp	.+2390   	; 0x1252 <main+0x1072>
					if(pwm_red!=255 && pwm_blue!=255) {
     8fc:	80 91 08 02 	lds	r24, 0x0208
     900:	8f 3f       	cpi	r24, 0xFF	; 255
     902:	09 f4       	brne	.+2      	; 0x906 <main+0x726>
     904:	e5 cd       	rjmp	.-1078   	; 0x4d0 <main+0x2f0>
     906:	80 91 0a 02 	lds	r24, 0x020A
     90a:	8f 3f       	cpi	r24, 0xFF	; 255
     90c:	09 f4       	brne	.+2      	; 0x910 <main+0x730>
     90e:	e0 cd       	rjmp	.-1088   	; 0x4d0 <main+0x2f0>
						pwm_green = 255;
     910:	d0 92 09 02 	sts	0x0209, r13
     914:	dd cd       	rjmp	.-1094   	; 0x4d0 <main+0x2f0>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	09 f0       	breq	.+2      	; 0x91c <main+0x73c>
     91a:	c6 cd       	rjmp	.-1140   	; 0x4a8 <main+0x2c8>
						irCommSendData(irCommRxByteExpected);													
						demoState = 2;
						break;

					case 2:
						irCommTasks();
     91c:	0e 94 2b 4d 	call	0x9a56	; 0x9a56 <irCommTasks>
						if(irCommDataSent()==1) {							
     920:	0e 94 3b 4c 	call	0x9876	; 0x9876 <irCommDataSent>
     924:	81 30       	cpi	r24, 0x01	; 1
     926:	09 f4       	brne	.+2      	; 0x92a <main+0x74a>
     928:	d7 c6       	rjmp	.+3502   	; 0x16d8 <main+0x14f8>
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
							}
						}
						if(irCommDataAvailable()==1) {
     92a:	0e 94 43 4c 	call	0x9886	; 0x9886 <irCommDataAvailable>
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	f1 f6       	brne	.-68     	; 0x8ee <main+0x70e>
							irCommReadData();
     932:	0e 94 46 4c 	call	0x988c	; 0x988c <irCommReadData>
							if(i<7) {
     936:	b7 e0       	ldi	r27, 0x07	; 7
     938:	8b 16       	cp	r8, r27
     93a:	91 04       	cpc	r9, r1
     93c:	10 f4       	brcc	.+4      	; 0x942 <main+0x762>
     93e:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <main+0x17e4>
							} else {
								i = 0;
							}
							switch(i) {
								case 0: 
									updateRedLed(255);
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
									updateGreenLed(255);
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
									updateBlueLed(255);
     94e:	8f ef       	ldi	r24, 0xFF	; 255
     950:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
     954:	88 24       	eor	r8, r8
     956:	99 24       	eor	r9, r9
     958:	90 91 50 04 	lds	r25, 0x0450
     95c:	cf cc       	rjmp	.-1634   	; 0x2fc <main+0x11c>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	09 f0       	breq	.+2      	; 0x964 <main+0x784>
     962:	cc cc       	rjmp	.-1640   	; 0x2fc <main+0x11c>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     964:	80 91 20 04 	lds	r24, 0x0420
     968:	88 23       	and	r24, r24
     96a:	09 f4       	brne	.+2      	; 0x96e <main+0x78e>
     96c:	c7 cc       	rjmp	.-1650   	; 0x2fc <main+0x11c>
								turnOnGreenLeds();
     96e:	0e 94 1b 44 	call	0x8836	; 0x8836 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     972:	60 91 11 03 	lds	r22, 0x0311
     976:	70 91 12 03 	lds	r23, 0x0312
     97a:	8e ef       	ldi	r24, 0xFE	; 254
     97c:	9f e0       	ldi	r25, 0x0F	; 15
     97e:	0e 94 72 5c 	call	0xb8e4	; 0xb8e4 <__eewr_word_m2560>
								turnOffGreenLeds();
     982:	0e 94 02 44 	call	0x8804	; 0x8804 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     986:	8a ea       	ldi	r24, 0xAA	; 170
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								addressReceived = 0;
     98e:	10 92 20 04 	sts	0x0420, r1
								menuChoice = 0;
     992:	10 92 1f 04 	sts	0x041F, r1
     996:	90 91 50 04 	lds	r25, 0x0450
     99a:	b0 cc       	rjmp	.-1696   	; 0x2fc <main+0x11c>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     99c:	82 30       	cpi	r24, 0x02	; 2
     99e:	09 f0       	breq	.+2      	; 0x9a2 <main+0x7c2>
     9a0:	83 cd       	rjmp	.-1274   	; 0x4a8 <main+0x2c8>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
     9a2:	80 91 6d 04 	lds	r24, 0x046D
     9a6:	88 23       	and	r24, r24
     9a8:	09 f0       	breq	.+2      	; 0x9ac <main+0x7cc>
     9aa:	7e cd       	rjmp	.-1284   	; 0x4a8 <main+0x2c8>
								calibrationWritten = 1;
     9ac:	30 92 6d 04 	sts	0x046D, r3
								writeDefaultCalibration();
     9b0:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <writeDefaultCalibration>
     9b4:	90 91 50 04 	lds	r25, 0x0450
     9b8:	a1 cc       	rjmp	.-1726   	; 0x2fc <main+0x11c>

					break;

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
     9ba:	83 30       	cpi	r24, 0x03	; 3
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <main+0x7e0>
     9be:	24 c5       	rjmp	.+2632   	; 0x1408 <main+0x1228>
     9c0:	84 30       	cpi	r24, 0x04	; 4
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <main+0x7e6>
     9c4:	71 cd       	rjmp	.-1310   	; 0x4a8 <main+0x2c8>
							demoStartTime = getTime100MicroSec();
						}
						break;

					case 4:	// rotate left
						irCommTasks();
     9c6:	0e 94 2b 4d 	call	0x9a56	; 0x9a56 <irCommTasks>
						if(theta >= targetAngle) {
     9ca:	69 81       	ldd	r22, Y+1	; 0x01
     9cc:	7a 81       	ldd	r23, Y+2	; 0x02
     9ce:	8b 81       	ldd	r24, Y+3	; 0x03
     9d0:	9c 81       	ldd	r25, Y+4	; 0x04
     9d2:	20 91 77 04 	lds	r18, 0x0477
     9d6:	30 91 78 04 	lds	r19, 0x0478
     9da:	40 91 79 04 	lds	r20, 0x0479
     9de:	50 91 7a 04 	lds	r21, 0x047A
     9e2:	0e 94 e3 58 	call	0xb1c6	; 0xb1c6 <__cmpsf2>
     9e6:	18 16       	cp	r1, r24
     9e8:	0c f4       	brge	.+2      	; 0x9ec <main+0x80c>
     9ea:	81 cf       	rjmp	.-254    	; 0x8ee <main+0x70e>
							setLeftSpeed(0);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
							setRightSpeed(0);
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
							demoState = 2;
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	e0 93 54 04 	sts	0x0454, r30
							demoStartTime = getTime100MicroSec();
     9fe:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     a02:	60 93 58 04 	sts	0x0458, r22
     a06:	70 93 59 04 	sts	0x0459, r23
     a0a:	80 93 5a 04 	sts	0x045A, r24
     a0e:	90 93 5b 04 	sts	0x045B, r25
     a12:	90 91 50 04 	lds	r25, 0x0450
     a16:	72 cc       	rjmp	.-1820   	; 0x2fc <main+0x11c>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	09 f0       	breq	.+2      	; 0xa1e <main+0x83e>
     a1c:	68 cf       	rjmp	.-304    	; 0x8ee <main+0x70e>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
     a1e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     a22:	20 91 5c 04 	lds	r18, 0x045C
     a26:	30 91 5d 04 	lds	r19, 0x045D
     a2a:	40 91 5e 04 	lds	r20, 0x045E
     a2e:	50 91 5f 04 	lds	r21, 0x045F
     a32:	62 1b       	sub	r22, r18
     a34:	73 0b       	sbc	r23, r19
     a36:	84 0b       	sbc	r24, r20
     a38:	95 0b       	sbc	r25, r21
     a3a:	67 5c       	subi	r22, 0xC7	; 199
     a3c:	72 41       	sbci	r23, 0x12	; 18
     a3e:	80 40       	sbci	r24, 0x00	; 0
     a40:	90 40       	sbci	r25, 0x00	; 0
     a42:	08 f4       	brcc	.+2      	; 0xa46 <main+0x866>
     a44:	54 cf       	rjmp	.-344    	; 0x8ee <main+0x70e>
								rgbLedState = 0;
     a46:	10 92 6f 04 	sts	0x046F, r1
								demoStartTime2 = getTime100MicroSec();
     a4a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     a4e:	60 93 5c 04 	sts	0x045C, r22
     a52:	70 93 5d 04 	sts	0x045D, r23
     a56:	80 93 5e 04 	sts	0x045E, r24
     a5a:	90 93 5f 04 	sts	0x045F, r25
								demoEndTime = getTime100MicroSec();
     a5e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     a62:	60 93 60 04 	sts	0x0460, r22
     a66:	70 93 61 04 	sts	0x0461, r23
     a6a:	80 93 62 04 	sts	0x0462, r24
     a6e:	90 93 63 04 	sts	0x0463, r25
								greenLedState = 0;
     a72:	10 92 6e 04 	sts	0x046E, r1
								setGreenLed(greenLedState, 1);
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	0e 94 65 43 	call	0x86ca	; 0x86ca <setGreenLed>
     a7e:	90 91 50 04 	lds	r25, 0x0450
     a82:	3c cc       	rjmp	.-1928   	; 0x2fc <main+0x11c>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	09 f0       	breq	.+2      	; 0xa8a <main+0x8aa>
     a88:	c6 cc       	rjmp	.-1652   	; 0x416 <main+0x236>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
     a8a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     a8e:	20 91 58 04 	lds	r18, 0x0458
     a92:	30 91 59 04 	lds	r19, 0x0459
     a96:	40 91 5a 04 	lds	r20, 0x045A
     a9a:	50 91 5b 04 	lds	r21, 0x045B
     a9e:	62 1b       	sub	r22, r18
     aa0:	73 0b       	sbc	r23, r19
     aa2:	84 0b       	sbc	r24, r20
     aa4:	95 0b       	sbc	r25, r21
     aa6:	6a 59       	subi	r22, 0x9A	; 154
     aa8:	77 47       	sbci	r23, 0x77	; 119
     aaa:	81 40       	sbci	r24, 0x01	; 1
     aac:	90 40       	sbci	r25, 0x00	; 0
     aae:	08 f4       	brcc	.+2      	; 0xab2 <main+0x8d2>
     ab0:	b2 cc       	rjmp	.-1692   	; 0x416 <main+0x236>
								setRightSpeed(20);
     ab2:	84 e1       	ldi	r24, 0x14	; 20
     ab4:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
								setLeftSpeed(20);								
     ab8:	84 e1       	ldi	r24, 0x14	; 20
     aba:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
     abe:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     ac2:	60 93 58 04 	sts	0x0458, r22
     ac6:	70 93 59 04 	sts	0x0459, r23
     aca:	80 93 5a 04 	sts	0x045A, r24
     ace:	90 93 5b 04 	sts	0x045B, r25
								demoState = 1;							
     ad2:	30 92 54 04 	sts	0x0454, r3
							}
							break;
					}	
					
					switch(rgbLedState) {
     ad6:	80 91 6f 04 	lds	r24, 0x046F
     ada:	81 30       	cpi	r24, 0x01	; 1
     adc:	09 f0       	breq	.+2      	; 0xae0 <main+0x900>
     ade:	a0 cc       	rjmp	.-1728   	; 0x420 <main+0x240>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
     ae0:	0e 94 02 44 	call	0x8804	; 0x8804 <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
     ae4:	0e 94 07 5c 	call	0xb80e	; 0xb80e <rand>
     ae8:	60 e8       	ldi	r22, 0x80	; 128
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
							if(currRand > 95) {
     af0:	80 36       	cpi	r24, 0x60	; 96
     af2:	91 05       	cpc	r25, r1
     af4:	08 f4       	brcc	.+2      	; 0xaf8 <main+0x918>
     af6:	c0 c5       	rjmp	.+2944   	; 0x1678 <main+0x1498>
								pwm_red = 255;
     af8:	d0 92 08 02 	sts	0x0208, r13
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
     afc:	0e 94 07 5c 	call	0xb80e	; 0xb80e <rand>
     b00:	60 e8       	ldi	r22, 0x80	; 128
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
							if(currRand > 95) {
     b08:	80 36       	cpi	r24, 0x60	; 96
     b0a:	91 05       	cpc	r25, r1
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <main+0x930>
     b0e:	b1 c5       	rjmp	.+2914   	; 0x1672 <main+0x1492>
								pwm_green = 255;
     b10:	d0 92 09 02 	sts	0x0209, r13
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
     b14:	0e 94 07 5c 	call	0xb80e	; 0xb80e <rand>
     b18:	60 e8       	ldi	r22, 0x80	; 128
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
							if(currRand > 95) {
     b20:	80 36       	cpi	r24, 0x60	; 96
     b22:	91 05       	cpc	r25, r1
     b24:	08 f4       	brcc	.+2      	; 0xb28 <main+0x948>
     b26:	a2 c5       	rjmp	.+2884   	; 0x166c <main+0x148c>
								pwm_blue = 255;
     b28:	d0 92 0a 02 	sts	0x020A, r13
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     b2c:	0e 94 07 5c 	call	0xb80e	; 0xb80e <rand>
     b30:	68 ec       	ldi	r22, 0xC8	; 200
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
     b38:	9e 83       	std	Y+6, r25	; 0x06
     b3a:	8d 83       	std	Y+5, r24	; 0x05
							if(currRand<50) {
     b3c:	82 33       	cpi	r24, 0x32	; 50
     b3e:	91 05       	cpc	r25, r1
     b40:	08 f0       	brcs	.+2      	; 0xb44 <main+0x964>
     b42:	8d c5       	rjmp	.+2842   	; 0x165e <main+0x147e>
								pwm_red = 255;
     b44:	d0 92 08 02 	sts	0x0208, r13
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
     b48:	80 91 08 02 	lds	r24, 0x0208
     b4c:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
							updateGreenLed(pwm_green);
     b50:	80 91 09 02 	lds	r24, 0x0209
     b54:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
							updateBlueLed(pwm_blue);
     b58:	80 91 0a 02 	lds	r24, 0x020A
     b5c:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
							rgbLedState = 2;
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	90 93 6f 04 	sts	0x046F, r25
     b66:	90 91 50 04 	lds	r25, 0x0450
     b6a:	c8 cb       	rjmp	.-2160   	; 0x2fc <main+0x11c>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	09 f4       	brne	.+2      	; 0xb72 <main+0x992>
     b70:	aa c4       	rjmp	.+2388   	; 0x14c6 <main+0x12e6>
     b72:	84 30       	cpi	r24, 0x04	; 4
     b74:	08 f4       	brcc	.+2      	; 0xb78 <main+0x998>
     b76:	67 c4       	rjmp	.+2254   	; 0x1446 <main+0x1266>
     b78:	85 30       	cpi	r24, 0x05	; 5
     b7a:	09 f0       	breq	.+2      	; 0xb7e <main+0x99e>
     b7c:	84 cc       	rjmp	.-1784   	; 0x486 <main+0x2a6>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     b7e:	0e 94 02 44 	call	0x8804	; 0x8804 <turnOffGreenLeds>
							GREEN_LED6_ON;
     b82:	80 91 0b 01 	lds	r24, 0x010B
     b86:	8f 7b       	andi	r24, 0xBF	; 191
     b88:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     b8c:	80 91 0b 01 	lds	r24, 0x010B
     b90:	8f 77       	andi	r24, 0x7F	; 127
     b92:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     b96:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     b9a:	60 93 60 04 	sts	0x0460, r22
     b9e:	70 93 61 04 	sts	0x0461, r23
     ba2:	80 93 62 04 	sts	0x0462, r24
     ba6:	90 93 63 04 	sts	0x0463, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     baa:	20 91 58 04 	lds	r18, 0x0458
     bae:	30 91 59 04 	lds	r19, 0x0459
     bb2:	40 91 5a 04 	lds	r20, 0x045A
     bb6:	50 91 5b 04 	lds	r21, 0x045B
     bba:	62 1b       	sub	r22, r18
     bbc:	73 0b       	sbc	r23, r19
     bbe:	84 0b       	sbc	r24, r20
     bc0:	95 0b       	sbc	r25, r21
     bc2:	6b 52       	subi	r22, 0x2B	; 43
     bc4:	7c 41       	sbci	r23, 0x1C	; 28
     bc6:	80 40       	sbci	r24, 0x00	; 0
     bc8:	90 40       	sbci	r25, 0x00	; 0
     bca:	08 f4       	brcc	.+2      	; 0xbce <main+0x9ee>
     bcc:	5c cc       	rjmp	.-1864   	; 0x486 <main+0x2a6>
								demoStartTime = getTime100MicroSec();
     bce:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     bd2:	60 93 58 04 	sts	0x0458, r22
     bd6:	70 93 59 04 	sts	0x0459, r23
     bda:	80 93 5a 04 	sts	0x045A, r24
     bde:	90 93 5b 04 	sts	0x045B, r25
								demoState = 0;							
     be2:	10 92 54 04 	sts	0x0454, r1
     be6:	4f cc       	rjmp	.-1890   	; 0x486 <main+0x2a6>
						break;
				}
				break;

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
     be8:	82 30       	cpi	r24, 0x02	; 2
     bea:	09 f4       	brne	.+2      	; 0xbee <main+0xa0e>
     bec:	81 c3       	rjmp	.+1794   	; 0x12f0 <main+0x1110>
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <main+0xa14>
     bf2:	84 cb       	rjmp	.-2296   	; 0x2fc <main+0x11c>
						break;

					case 3:	// led is on
							// transmission: send 0xFF untill the previous robot is turned off
							// reception: I know that it is turned off when I receive the previous robot id 
						irCommTasks();
     bf4:	0e 94 2b 4d 	call	0x9a56	; 0x9a56 <irCommTasks>
						if(irCommDataSent()==1) {
     bf8:	0e 94 3b 4c 	call	0x9876	; 0x9876 <irCommDataSent>
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	09 f0       	breq	.+2      	; 0xc02 <main+0xa22>
     c00:	76 ce       	rjmp	.-788    	; 0x8ee <main+0x70e>
							if(irCommDataAvailable()==1) {
     c02:	0e 94 43 4c 	call	0x9886	; 0x9886 <irCommDataAvailable>
     c06:	98 2f       	mov	r25, r24
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	09 f0       	breq	.+2      	; 0xc0e <main+0xa2e>
     c0c:	70 ce       	rjmp	.-800    	; 0x8ee <main+0x70e>
								if(irCommLedToggle==0) {
     c0e:	80 91 eb 04 	lds	r24, 0x04EB
     c12:	88 23       	and	r24, r24
     c14:	09 f0       	breq	.+2      	; 0xc18 <main+0xa38>
     c16:	d3 c7       	rjmp	.+4006   	; 0x1bbe <main+0x19de>
									irCommLedToggle = 1;
     c18:	90 93 eb 04 	sts	0x04EB, r25
									updateBlueLed(255);
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
									updateRedLed(255);
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
									updateGreenLed(128);
     c28:	80 e8       	ldi	r24, 0x80	; 128
     c2a:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
									irCommLedToggle = 0;
									updateBlueLed(255);
									updateRedLed(255);
									updateGreenLed(235);
								}
								i = irCommReadData();
     c2e:	0e 94 46 4c 	call	0x988c	; 0x988c <irCommReadData>
     c32:	a8 2e       	mov	r10, r24
     c34:	bb 24       	eor	r11, r11
								if(irCommRobotId == 0) {
     c36:	80 91 e9 04 	lds	r24, 0x04E9
     c3a:	88 23       	and	r24, r24
     c3c:	11 f4       	brne	.+4      	; 0xc42 <main+0xa62>
									if(i == (unsigned int)(irCommRobotsNum-1)) {
     c3e:	80 91 ea 04 	lds	r24, 0x04EA
										demoState = 1;
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
     c42:	88 2e       	mov	r8, r24
     c44:	99 24       	eor	r9, r9
     c46:	08 94       	sec
     c48:	81 08       	sbc	r8, r1
     c4a:	91 08       	sbc	r9, r1
     c4c:	8a 14       	cp	r8, r10
     c4e:	9b 04       	cpc	r9, r11
     c50:	09 f4       	brne	.+2      	; 0xc54 <main+0xa74>
     c52:	d4 c3       	rjmp	.+1960   	; 0x13fc <main+0x121c>
										demoState = 1;
									} else {
										irCommSendData(0xFF);
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	0e 94 32 4c 	call	0x9864	; 0x9864 <irCommSendData>
     c5a:	45 01       	movw	r8, r10
     c5c:	90 91 50 04 	lds	r25, 0x0450
     c60:	4d cb       	rjmp	.-2406   	; 0x2fc <main+0x11c>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     c62:	80 34       	cpi	r24, 0x40	; 64
     c64:	91 05       	cpc	r25, r1
     c66:	08 f0       	brcs	.+2      	; 0xc6a <main+0xa8a>
     c68:	a2 c3       	rjmp	.+1860   	; 0x13ae <main+0x11ce>
					pwm_green = 255;
     c6a:	d0 92 09 02 	sts	0x0209, r13
     c6e:	2b ce       	rjmp	.-938    	; 0x8c6 <main+0x6e6>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	09 f0       	breq	.+2      	; 0xc76 <main+0xa96>
     c74:	c3 cd       	rjmp	.-1146   	; 0x7fc <main+0x61c>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	80 95       	com	r24
     c7a:	80 93 0a 02 	sts	0x020A, r24
						rgbState = 0;
     c7e:	10 92 18 03 	sts	0x0318, r1
     c82:	bc cd       	rjmp	.-1160   	; 0x7fc <main+0x61c>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
     c84:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     c88:	20 91 58 04 	lds	r18, 0x0458
     c8c:	30 91 59 04 	lds	r19, 0x0459
     c90:	40 91 5a 04 	lds	r20, 0x045A
     c94:	50 91 5b 04 	lds	r21, 0x045B
     c98:	62 1b       	sub	r22, r18
     c9a:	73 0b       	sbc	r23, r19
     c9c:	84 0b       	sbc	r24, r20
     c9e:	95 0b       	sbc	r25, r21
     ca0:	6e 53       	subi	r22, 0x3E	; 62
     ca2:	76 49       	sbci	r23, 0x96	; 150
     ca4:	80 40       	sbci	r24, 0x00	; 0
     ca6:	90 40       	sbci	r25, 0x00	; 0
     ca8:	08 f4       	brcc	.+2      	; 0xcac <main+0xacc>
     caa:	b5 cb       	rjmp	.-2198   	; 0x416 <main+0x236>
								setRightSpeed(0);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
								setLeftSpeed(0);								
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
     cb8:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     cbc:	60 93 58 04 	sts	0x0458, r22
     cc0:	70 93 59 04 	sts	0x0459, r23
     cc4:	80 93 5a 04 	sts	0x045A, r24
     cc8:	90 93 5b 04 	sts	0x045B, r25
								demoState = 2;							
     ccc:	62 e0       	ldi	r22, 0x02	; 2
     cce:	60 93 54 04 	sts	0x0454, r22
     cd2:	a1 cb       	rjmp	.-2238   	; 0x416 <main+0x236>
							demoStartTime = getTime100MicroSec();
							demoState = 1;
							break;

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
     cd4:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
     cd8:	20 91 58 04 	lds	r18, 0x0458
     cdc:	30 91 59 04 	lds	r19, 0x0459
     ce0:	40 91 5a 04 	lds	r20, 0x045A
     ce4:	50 91 5b 04 	lds	r21, 0x045B
     ce8:	62 1b       	sub	r22, r18
     cea:	73 0b       	sbc	r23, r19
     cec:	84 0b       	sbc	r24, r20
     cee:	95 0b       	sbc	r25, r21
     cf0:	6e 51       	subi	r22, 0x1E	; 30
     cf2:	7b 44       	sbci	r23, 0x4B	; 75
     cf4:	80 40       	sbci	r24, 0x00	; 0
     cf6:	90 40       	sbci	r25, 0x00	; 0
     cf8:	08 f4       	brcc	.+2      	; 0xcfc <main+0xb1c>
     cfa:	f9 cd       	rjmp	.-1038   	; 0x8ee <main+0x70e>
								demoState = 2;
     cfc:	22 e0       	ldi	r18, 0x02	; 2
     cfe:	20 93 54 04 	sts	0x0454, r18
     d02:	90 91 50 04 	lds	r25, 0x0450
     d06:	fa ca       	rjmp	.-2572   	; 0x2fc <main+0x11c>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     d08:	0e 94 1b 44 	call	0x8836	; 0x8836 <turnOnGreenLeds>
							updateRedLed(pwm_red);
     d0c:	80 91 08 02 	lds	r24, 0x0208
     d10:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
							updateGreenLed(pwm_green);
     d14:	80 91 09 02 	lds	r24, 0x0209
     d18:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
							updateBlueLed(pwm_blue);
     d1c:	80 91 0a 02 	lds	r24, 0x020A
     d20:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
							LED_IR1_LOW;
     d24:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     d26:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     d28:	80 91 22 04 	lds	r24, 0x0422
     d2c:	88 23       	and	r24, r24
     d2e:	09 f4       	brne	.+2      	; 0xd32 <main+0xb52>
     d30:	de cd       	rjmp	.-1092   	; 0x8ee <main+0x70e>
								getDataNow = 0;	
     d32:	10 92 22 04 	sts	0x0422, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d36:	80 91 55 02 	lds	r24, 0x0255
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d40:	80 91 56 02 	lds	r24, 0x0256
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d4a:	80 91 25 02 	lds	r24, 0x0225
     d4e:	90 91 26 02 	lds	r25, 0x0226
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d58:	80 91 25 02 	lds	r24, 0x0225
     d5c:	90 91 26 02 	lds	r25, 0x0226
     d60:	89 2f       	mov	r24, r25
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d68:	80 91 57 02 	lds	r24, 0x0257
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d72:	80 91 58 02 	lds	r24, 0x0258
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d7c:	80 91 29 02 	lds	r24, 0x0229
     d80:	90 91 2a 02 	lds	r25, 0x022A
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d8a:	80 91 29 02 	lds	r24, 0x0229
     d8e:	90 91 2a 02 	lds	r25, 0x022A
     d92:	89 2f       	mov	r24, r25
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d9a:	80 91 59 02 	lds	r24, 0x0259
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     da4:	80 91 5a 02 	lds	r24, 0x025A
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     dae:	80 91 2d 02 	lds	r24, 0x022D
     db2:	90 91 2e 02 	lds	r25, 0x022E
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     dbc:	80 91 2d 02 	lds	r24, 0x022D
     dc0:	90 91 2e 02 	lds	r25, 0x022E
     dc4:	89 2f       	mov	r24, r25
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     dcc:	80 91 5b 02 	lds	r24, 0x025B
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     dd6:	80 91 5c 02 	lds	r24, 0x025C
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     de0:	80 91 31 02 	lds	r24, 0x0231
     de4:	90 91 32 02 	lds	r25, 0x0232
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     dee:	80 91 31 02 	lds	r24, 0x0231
     df2:	90 91 32 02 	lds	r25, 0x0232
     df6:	89 2f       	mov	r24, r25
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     dfe:	80 91 5d 02 	lds	r24, 0x025D
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e08:	80 91 5e 02 	lds	r24, 0x025E
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e12:	80 91 35 02 	lds	r24, 0x0235
     e16:	90 91 36 02 	lds	r25, 0x0236
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e20:	80 91 35 02 	lds	r24, 0x0235
     e24:	90 91 36 02 	lds	r25, 0x0236
     e28:	89 2f       	mov	r24, r25
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e30:	80 91 5f 02 	lds	r24, 0x025F
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e3a:	80 91 60 02 	lds	r24, 0x0260
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e44:	80 91 39 02 	lds	r24, 0x0239
     e48:	90 91 3a 02 	lds	r25, 0x023A
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e52:	80 91 39 02 	lds	r24, 0x0239
     e56:	90 91 3a 02 	lds	r25, 0x023A
     e5a:	89 2f       	mov	r24, r25
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e62:	80 91 61 02 	lds	r24, 0x0261
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e6c:	80 91 62 02 	lds	r24, 0x0262
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e76:	80 91 3d 02 	lds	r24, 0x023D
     e7a:	90 91 3e 02 	lds	r25, 0x023E
     e7e:	61 e0       	ldi	r22, 0x01	; 1
     e80:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e84:	80 91 3d 02 	lds	r24, 0x023D
     e88:	90 91 3e 02 	lds	r25, 0x023E
     e8c:	89 2f       	mov	r24, r25
     e8e:	61 e0       	ldi	r22, 0x01	; 1
     e90:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e94:	80 91 63 02 	lds	r24, 0x0263
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e9e:	80 91 64 02 	lds	r24, 0x0264
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ea8:	80 91 41 02 	lds	r24, 0x0241
     eac:	90 91 42 02 	lds	r25, 0x0242
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     eb6:	80 91 41 02 	lds	r24, 0x0241
     eba:	90 91 42 02 	lds	r25, 0x0242
     ebe:	89 2f       	mov	r24, r25
     ec0:	61 e0       	ldi	r22, 0x01	; 1
     ec2:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ec6:	80 91 65 02 	lds	r24, 0x0265
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ed0:	80 91 66 02 	lds	r24, 0x0266
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     eda:	80 91 45 02 	lds	r24, 0x0245
     ede:	90 91 46 02 	lds	r25, 0x0246
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ee8:	80 91 45 02 	lds	r24, 0x0245
     eec:	90 91 46 02 	lds	r25, 0x0246
     ef0:	89 2f       	mov	r24, r25
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ef8:	80 91 67 02 	lds	r24, 0x0267
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f02:	80 91 68 02 	lds	r24, 0x0268
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f0c:	80 91 49 02 	lds	r24, 0x0249
     f10:	90 91 4a 02 	lds	r25, 0x024A
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f1a:	80 91 49 02 	lds	r24, 0x0249
     f1e:	90 91 4a 02 	lds	r25, 0x024A
     f22:	89 2f       	mov	r24, r25
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f2a:	80 91 69 02 	lds	r24, 0x0269
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f34:	80 91 6a 02 	lds	r24, 0x026A
     f38:	61 e0       	ldi	r22, 0x01	; 1
     f3a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f3e:	80 91 4d 02 	lds	r24, 0x024D
     f42:	90 91 4e 02 	lds	r25, 0x024E
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f4c:	80 91 4d 02 	lds	r24, 0x024D
     f50:	90 91 4e 02 	lds	r25, 0x024E
     f54:	89 2f       	mov	r24, r25
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f5c:	80 91 6b 02 	lds	r24, 0x026B
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f66:	80 91 6c 02 	lds	r24, 0x026C
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f70:	80 91 51 02 	lds	r24, 0x0251
     f74:	90 91 52 02 	lds	r25, 0x0252
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f7e:	80 91 51 02 	lds	r24, 0x0251
     f82:	90 91 52 02 	lds	r25, 0x0252
     f86:	89 2f       	mov	r24, r25
     f88:	61 e0       	ldi	r22, 0x01	; 1
     f8a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     f8e:	80 91 2c 04 	lds	r24, 0x042C
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(accX>>8,1);
     f98:	80 91 2d 04 	lds	r24, 0x042D
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     fa2:	80 91 2e 04 	lds	r24, 0x042E
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(accY>>8,1);
     fac:	80 91 2f 04 	lds	r24, 0x042F
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     fb6:	80 91 30 04 	lds	r24, 0x0430
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     fc0:	80 91 31 04 	lds	r24, 0x0431
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(irCommand,1);
     fca:	80 91 23 04 	lds	r24, 0x0423
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(currentSelector,1);
     fd4:	80 91 50 04 	lds	r24, 0x0450
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     fde:	80 91 03 01 	lds	r24, 0x0103
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	80 72       	andi	r24, 0x20	; 32
     fe6:	90 70       	andi	r25, 0x00	; 0
     fe8:	95 95       	asr	r25
     fea:	87 95       	ror	r24
     fec:	95 95       	asr	r25
     fee:	87 95       	ror	r24
     ff0:	95 95       	asr	r25
     ff2:	87 95       	ror	r24
     ff4:	95 95       	asr	r25
     ff6:	87 95       	ror	r24
     ff8:	95 95       	asr	r25
     ffa:	87 95       	ror	r24
     ffc:	61 e0       	ldi	r22, 0x01	; 1
     ffe:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(rfFlags,1);
    1002:	80 91 13 03 	lds	r24, 0x0313
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
    100c:	60 91 77 04 	lds	r22, 0x0477
    1010:	70 91 78 04 	lds	r23, 0x0478
    1014:	80 91 79 04 	lds	r24, 0x0479
    1018:	90 91 7a 04 	lds	r25, 0x047A
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e4       	ldi	r19, 0x40	; 64
    1020:	4f e0       	ldi	r20, 0x0F	; 15
    1022:	54 e4       	ldi	r21, 0x44	; 68
    1024:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    1028:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    1036:	60 91 77 04 	lds	r22, 0x0477
    103a:	70 91 78 04 	lds	r23, 0x0478
    103e:	80 91 79 04 	lds	r24, 0x0479
    1042:	90 91 7a 04 	lds	r25, 0x047A
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e4       	ldi	r19, 0x40	; 64
    104a:	4f e0       	ldi	r20, 0x0F	; 15
    104c:	54 e4       	ldi	r21, 0x44	; 68
    104e:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    1052:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <__fixunssfsi>
    1056:	87 2f       	mov	r24, r23
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    105e:	60 91 7f 04 	lds	r22, 0x047F
    1062:	70 91 80 04 	lds	r23, 0x0480
    1066:	80 91 81 04 	lds	r24, 0x0481
    106a:	90 91 82 04 	lds	r25, 0x0482
    106e:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    107c:	60 91 7f 04 	lds	r22, 0x047F
    1080:	70 91 80 04 	lds	r23, 0x0480
    1084:	80 91 81 04 	lds	r24, 0x0481
    1088:	90 91 82 04 	lds	r25, 0x0482
    108c:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <__fixunssfsi>
    1090:	87 2f       	mov	r24, r23
    1092:	61 e0       	ldi	r22, 0x01	; 1
    1094:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    1098:	60 91 83 04 	lds	r22, 0x0483
    109c:	70 91 84 04 	lds	r23, 0x0484
    10a0:	80 91 85 04 	lds	r24, 0x0485
    10a4:	90 91 86 04 	lds	r25, 0x0486
    10a8:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    10b6:	60 91 83 04 	lds	r22, 0x0483
    10ba:	70 91 84 04 	lds	r23, 0x0484
    10be:	80 91 85 04 	lds	r24, 0x0485
    10c2:	90 91 86 04 	lds	r25, 0x0486
    10c6:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <__fixunssfsi>
    10ca:	87 2f       	mov	r24, r23
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    10d2:	60 91 d1 02 	lds	r22, 0x02D1
    10d6:	70 91 d2 02 	lds	r23, 0x02D2
    10da:	80 91 d3 02 	lds	r24, 0x02D3
    10de:	90 91 d4 02 	lds	r25, 0x02D4
    10e2:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	61 e0       	ldi	r22, 0x01	; 1
    10ec:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    10f0:	60 91 d1 02 	lds	r22, 0x02D1
    10f4:	70 91 d2 02 	lds	r23, 0x02D2
    10f8:	80 91 d3 02 	lds	r24, 0x02D3
    10fc:	90 91 d4 02 	lds	r25, 0x02D4
    1100:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	89 2f       	mov	r24, r25
    110a:	9a 2f       	mov	r25, r26
    110c:	ab 2f       	mov	r26, r27
    110e:	bb 27       	eor	r27, r27
    1110:	a7 fd       	sbrc	r26, 7
    1112:	ba 95       	dec	r27
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    111a:	60 91 d1 02 	lds	r22, 0x02D1
    111e:	70 91 d2 02 	lds	r23, 0x02D2
    1122:	80 91 d3 02 	lds	r24, 0x02D3
    1126:	90 91 d4 02 	lds	r25, 0x02D4
    112a:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	cd 01       	movw	r24, r26
    1134:	bb 27       	eor	r27, r27
    1136:	97 fd       	sbrc	r25, 7
    1138:	b0 95       	com	r27
    113a:	ab 2f       	mov	r26, r27
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    1142:	60 91 d1 02 	lds	r22, 0x02D1
    1146:	70 91 d2 02 	lds	r23, 0x02D2
    114a:	80 91 d3 02 	lds	r24, 0x02D3
    114e:	90 91 d4 02 	lds	r25, 0x02D4
    1152:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	8b 2f       	mov	r24, r27
    115c:	bb 27       	eor	r27, r27
    115e:	87 fd       	sbrc	r24, 7
    1160:	b0 95       	com	r27
    1162:	9b 2f       	mov	r25, r27
    1164:	ab 2f       	mov	r26, r27
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    116c:	60 91 cd 02 	lds	r22, 0x02CD
    1170:	70 91 ce 02 	lds	r23, 0x02CE
    1174:	80 91 cf 02 	lds	r24, 0x02CF
    1178:	90 91 d0 02 	lds	r25, 0x02D0
    117c:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    118a:	60 91 cd 02 	lds	r22, 0x02CD
    118e:	70 91 ce 02 	lds	r23, 0x02CE
    1192:	80 91 cf 02 	lds	r24, 0x02CF
    1196:	90 91 d0 02 	lds	r25, 0x02D0
    119a:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	89 2f       	mov	r24, r25
    11a4:	9a 2f       	mov	r25, r26
    11a6:	ab 2f       	mov	r26, r27
    11a8:	bb 27       	eor	r27, r27
    11aa:	a7 fd       	sbrc	r26, 7
    11ac:	ba 95       	dec	r27
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    11b4:	60 91 cd 02 	lds	r22, 0x02CD
    11b8:	70 91 ce 02 	lds	r23, 0x02CE
    11bc:	80 91 cf 02 	lds	r24, 0x02CF
    11c0:	90 91 d0 02 	lds	r25, 0x02D0
    11c4:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	cd 01       	movw	r24, r26
    11ce:	bb 27       	eor	r27, r27
    11d0:	97 fd       	sbrc	r25, 7
    11d2:	b0 95       	com	r27
    11d4:	ab 2f       	mov	r26, r27
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    11dc:	60 91 cd 02 	lds	r22, 0x02CD
    11e0:	70 91 ce 02 	lds	r23, 0x02CE
    11e4:	80 91 cf 02 	lds	r24, 0x02CF
    11e8:	90 91 d0 02 	lds	r25, 0x02D0
    11ec:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	8b 2f       	mov	r24, r27
    11f6:	bb 27       	eor	r27, r27
    11f8:	87 fd       	sbrc	r24, 7
    11fa:	b0 95       	com	r27
    11fc:	9b 2f       	mov	r25, r27
    11fe:	ab 2f       	mov	r26, r27
    1200:	61 e0       	ldi	r22, 0x01	; 1
    1202:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    1206:	80 91 f7 02 	lds	r24, 0x02F7
    120a:	90 91 f8 02 	lds	r25, 0x02F8
    120e:	95 95       	asr	r25
    1210:	87 95       	ror	r24
    1212:	95 95       	asr	r25
    1214:	87 95       	ror	r24
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    121c:	80 91 f5 02 	lds	r24, 0x02F5
    1220:	90 91 f6 02 	lds	r25, 0x02F6
    1224:	95 95       	asr	r25
    1226:	87 95       	ror	r24
    1228:	95 95       	asr	r25
    122a:	87 95       	ror	r24
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    1232:	8c e0       	ldi	r24, 0x0C	; 12
    1234:	88 2e       	mov	r8, r24
    1236:	91 2c       	mov	r9, r1
    1238:	90 91 50 04 	lds	r25, 0x0450
    123c:	5f c8       	rjmp	.-3906   	; 0x2fc <main+0x11c>
						demoState = 1;
						i = 0;
						break;

					case 1:						
						irCommSendData(irCommRxByteExpected);													
    123e:	80 91 17 05 	lds	r24, 0x0517
    1242:	0e 94 32 4c 	call	0x9864	; 0x9864 <irCommSendData>
						demoState = 2;
    1246:	a2 e0       	ldi	r26, 0x02	; 2
    1248:	a0 93 54 04 	sts	0x0454, r26
    124c:	90 91 50 04 	lds	r25, 0x0450
    1250:	55 c8       	rjmp	.-3926   	; 0x2fc <main+0x11c>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    1252:	20 36       	cpi	r18, 0x60	; 96
    1254:	31 05       	cpc	r19, r1
    1256:	08 f0       	brcs	.+2      	; 0x125a <main+0x107a>
    1258:	3b c9       	rjmp	.-3466   	; 0x4d0 <main+0x2f0>
					if(pwm_red!=255 && pwm_green!=255) {
    125a:	80 91 08 02 	lds	r24, 0x0208
    125e:	8f 3f       	cpi	r24, 0xFF	; 255
    1260:	09 f4       	brne	.+2      	; 0x1264 <main+0x1084>
    1262:	36 c9       	rjmp	.-3476   	; 0x4d0 <main+0x2f0>
    1264:	80 91 09 02 	lds	r24, 0x0209
    1268:	8f 3f       	cpi	r24, 0xFF	; 255
    126a:	09 f4       	brne	.+2      	; 0x126e <main+0x108e>
    126c:	31 c9       	rjmp	.-3486   	; 0x4d0 <main+0x2f0>
						pwm_blue = 255;
    126e:	d0 92 0a 02 	sts	0x020A, r13
    1272:	2e c9       	rjmp	.-3492   	; 0x4d0 <main+0x2f0>

					case 1: // led is on
							// transmission: continuously send the next robot id to tell him to turn on the led
							// reception: listen for 0xFF and then turn off the led; when I receive 0xFF it means the next robot has
							// received its id, thus it has turned on its led
						irCommTasks();
    1274:	0e 94 2b 4d 	call	0x9a56	; 0x9a56 <irCommTasks>
						if(irCommDataSent()==1) {
    1278:	0e 94 3b 4c 	call	0x9876	; 0x9876 <irCommDataSent>
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	09 f4       	brne	.+2      	; 0x1282 <main+0x10a2>
    1280:	6f c2       	rjmp	.+1246   	; 0x1760 <main+0x1580>
								irCommSendData(irCommRobotId+1);
							} else {
								irCommSendData(0x00);
							}							
						}
						if(irCommDataAvailable()==1) {
    1282:	0e 94 43 4c 	call	0x9886	; 0x9886 <irCommDataAvailable>
    1286:	98 2f       	mov	r25, r24
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	09 f0       	breq	.+2      	; 0x128e <main+0x10ae>
    128c:	30 cb       	rjmp	.-2464   	; 0x8ee <main+0x70e>
							if(irCommLedToggle==0) {
    128e:	80 91 eb 04 	lds	r24, 0x04EB
    1292:	88 23       	and	r24, r24
    1294:	09 f0       	breq	.+2      	; 0x1298 <main+0x10b8>
    1296:	f8 c2       	rjmp	.+1520   	; 0x1888 <main+0x16a8>
								irCommLedToggle = 1;
    1298:	90 93 eb 04 	sts	0x04EB, r25
								updateBlueLed(255);
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
								updateRedLed(255);
    12a2:	8f ef       	ldi	r24, 0xFF	; 255
    12a4:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
								updateGreenLed(128);
    12a8:	80 e8       	ldi	r24, 0x80	; 128
    12aa:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
								irCommLedToggle = 0;
								updateBlueLed(255);
								updateRedLed(255);
								updateGreenLed(235);
							}
							i = irCommReadData();
    12ae:	0e 94 46 4c 	call	0x988c	; 0x988c <irCommReadData>
    12b2:	88 2e       	mov	r8, r24
    12b4:	99 24       	eor	r9, r9
							if(i == 0xFF) {
    12b6:	6f ef       	ldi	r22, 0xFF	; 255
    12b8:	86 16       	cp	r8, r22
    12ba:	91 04       	cpc	r9, r1
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <main+0x10e0>
    12be:	17 cb       	rjmp	.-2514   	; 0x8ee <main+0x70e>
								demoState = 2;
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	80 93 54 04 	sts	0x0454, r24
								updateBlueLed(255);		
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
								updateRedLed(255);
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
								updateGreenLed(255);		
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
    12d8:	90 91 50 04 	lds	r25, 0x0450
    12dc:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <main+0x11c>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	80 95       	com	r24
    12e4:	80 93 09 02 	sts	0x0209, r24
						rgbState = 2;
    12e8:	f2 e0       	ldi	r31, 0x02	; 2
    12ea:	f0 93 18 03 	sts	0x0318, r31
    12ee:	86 ca       	rjmp	.-2804   	; 0x7fc <main+0x61c>
						break;

					case 2: // led is off
							// transmission: continuously send my robot id to tell the next robot I turned off the led
							// reception: listen for my robot id and then turn on the led				
						irCommTasks();
    12f0:	0e 94 2b 4d 	call	0x9a56	; 0x9a56 <irCommTasks>
						if(irCommDataSent()==1) {
    12f4:	0e 94 3b 4c 	call	0x9876	; 0x9876 <irCommDataSent>
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	09 f4       	brne	.+2      	; 0x12fe <main+0x111e>
    12fc:	c0 c2       	rjmp	.+1408   	; 0x187e <main+0x169e>
							irCommSendData(irCommRobotId);							
						}
						if(irCommDataAvailable()==1) {
    12fe:	0e 94 43 4c 	call	0x9886	; 0x9886 <irCommDataAvailable>
    1302:	98 2f       	mov	r25, r24
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	09 f0       	breq	.+2      	; 0x130a <main+0x112a>
    1308:	f2 ca       	rjmp	.-2588   	; 0x8ee <main+0x70e>
							if(irCommLedToggle==0) {
    130a:	80 91 eb 04 	lds	r24, 0x04EB
    130e:	88 23       	and	r24, r24
    1310:	09 f0       	breq	.+2      	; 0x1314 <main+0x1134>
    1312:	ca c2       	rjmp	.+1428   	; 0x18a8 <main+0x16c8>
								irCommLedToggle = 1;
    1314:	90 93 eb 04 	sts	0x04EB, r25
								updateRedLed(255);
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
							} else {
								irCommLedToggle = 0;
								updateRedLed(235);
							}
							i = irCommReadData();
    131e:	0e 94 46 4c 	call	0x988c	; 0x988c <irCommReadData>
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
							if(i == irCommRobotId) {
    1326:	80 91 e9 04 	lds	r24, 0x04E9
    132a:	88 2e       	mov	r8, r24
    132c:	99 24       	eor	r9, r9
    132e:	82 16       	cp	r8, r18
    1330:	93 06       	cpc	r9, r19
    1332:	09 f4       	brne	.+2      	; 0x1336 <main+0x1156>
    1334:	e2 c3       	rjmp	.+1988   	; 0x1afa <main+0x191a>
    1336:	49 01       	movw	r8, r18
    1338:	90 91 50 04 	lds	r25, 0x0450
    133c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <main+0x11c>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	09 f0       	breq	.+2      	; 0x1346 <main+0x1166>
    1344:	a0 c8       	rjmp	.-3776   	; 0x486 <main+0x2a6>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    1346:	0e 94 02 44 	call	0x8804	; 0x8804 <turnOffGreenLeds>
							GREEN_LED2_ON;
    134a:	80 91 0b 01 	lds	r24, 0x010B
    134e:	8b 7f       	andi	r24, 0xFB	; 251
    1350:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    1354:	10 92 56 04 	sts	0x0456, r1
							enableObstacleAvoidance();
    1358:	0e 94 cc 40 	call	0x8198	; 0x8198 <enableObstacleAvoidance>
							setRightSpeed(15);
    135c:	8f e0       	ldi	r24, 0x0F	; 15
    135e:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
							setLeftSpeed(15);
    1362:	8f e0       	ldi	r24, 0x0F	; 15
    1364:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    1368:	80 91 67 02 	lds	r24, 0x0267
    136c:	90 91 68 02 	lds	r25, 0x0268
    1370:	80 59       	subi	r24, 0x90	; 144
    1372:	91 40       	sbci	r25, 0x01	; 1
    1374:	0c f4       	brge	.+2      	; 0x1378 <main+0x1198>
    1376:	57 c1       	rjmp	.+686    	; 0x1626 <main+0x1446>
    1378:	80 91 69 02 	lds	r24, 0x0269
    137c:	90 91 6a 02 	lds	r25, 0x026A
    1380:	80 59       	subi	r24, 0x90	; 144
    1382:	91 40       	sbci	r25, 0x01	; 1
    1384:	0c f4       	brge	.+2      	; 0x1388 <main+0x11a8>
    1386:	4f c1       	rjmp	.+670    	; 0x1626 <main+0x1446>
    1388:	80 91 65 02 	lds	r24, 0x0265
    138c:	90 91 66 02 	lds	r25, 0x0266
    1390:	80 59       	subi	r24, 0x90	; 144
    1392:	91 40       	sbci	r25, 0x01	; 1
    1394:	0c f4       	brge	.+2      	; 0x1398 <main+0x11b8>
    1396:	47 c1       	rjmp	.+654    	; 0x1626 <main+0x1446>
    1398:	80 91 6b 02 	lds	r24, 0x026B
    139c:	90 91 6c 02 	lds	r25, 0x026C
    13a0:	80 59       	subi	r24, 0x90	; 144
    13a2:	91 40       	sbci	r25, 0x01	; 1
    13a4:	0c f4       	brge	.+2      	; 0x13a8 <main+0x11c8>
    13a6:	3f c1       	rjmp	.+638    	; 0x1626 <main+0x1446>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    13a8:	10 92 55 04 	sts	0x0455, r1
    13ac:	6c c8       	rjmp	.-3880   	; 0x486 <main+0x2a6>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    13ae:	80 36       	cpi	r24, 0x60	; 96
    13b0:	91 05       	cpc	r25, r1
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <main+0x11d6>
    13b4:	88 ca       	rjmp	.-2800   	; 0x8c6 <main+0x6e6>
					pwm_blue = 255;
    13b6:	d0 92 0a 02 	sts	0x020A, r13
    13ba:	85 ca       	rjmp	.-2806   	; 0x8c6 <main+0x6e6>
						demoState = 2;
						demoStartTime = getTime100MicroSec();
						break;

					case 2:
						irCommTasks();
    13bc:	0e 94 2b 4d 	call	0x9a56	; 0x9a56 <irCommTasks>
						if(irCommDataSent()==1) {
    13c0:	0e 94 3b 4c 	call	0x9876	; 0x9876 <irCommDataSent>
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	09 f4       	brne	.+2      	; 0x13ca <main+0x11ea>
    13c8:	d8 c2       	rjmp	.+1456   	; 0x197a <main+0x179a>
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
    13ca:	0e 94 43 4c 	call	0x9886	; 0x9886 <irCommDataAvailable>
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <main+0x11f4>
    13d2:	70 c2       	rjmp	.+1248   	; 0x18b4 <main+0x16d4>
									demoState = 3;
								}								
							}

						}
						if((getTime100MicroSec()-demoStartTime) >= (PAUSE_5_SEC)) {
    13d4:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    13d8:	20 91 58 04 	lds	r18, 0x0458
    13dc:	30 91 59 04 	lds	r19, 0x0459
    13e0:	40 91 5a 04 	lds	r20, 0x045A
    13e4:	50 91 5b 04 	lds	r21, 0x045B
    13e8:	62 1b       	sub	r22, r18
    13ea:	73 0b       	sbc	r23, r19
    13ec:	84 0b       	sbc	r24, r20
    13ee:	95 0b       	sbc	r25, r21
    13f0:	6d 5c       	subi	r22, 0xCD	; 205
    13f2:	7b 4b       	sbci	r23, 0xBB	; 187
    13f4:	80 40       	sbci	r24, 0x00	; 0
    13f6:	90 40       	sbci	r25, 0x00	; 0
    13f8:	08 f4       	brcc	.+2      	; 0x13fc <main+0x121c>
    13fa:	79 ca       	rjmp	.-2830   	; 0x8ee <main+0x70e>
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
										demoState = 1;
    13fc:	30 92 54 04 	sts	0x0454, r3
    1400:	90 91 50 04 	lds	r25, 0x0450
    1404:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <main+0x11c>
							demoState = 1;
						}
						break;

					case 3:	// rotate right
						irCommTasks();
    1408:	0e 94 2b 4d 	call	0x9a56	; 0x9a56 <irCommTasks>
						if(theta <= targetAngle) {
    140c:	69 81       	ldd	r22, Y+1	; 0x01
    140e:	7a 81       	ldd	r23, Y+2	; 0x02
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	20 91 77 04 	lds	r18, 0x0477
    1418:	30 91 78 04 	lds	r19, 0x0478
    141c:	40 91 79 04 	lds	r20, 0x0479
    1420:	50 91 7a 04 	lds	r21, 0x047A
    1424:	0e 94 93 5a 	call	0xb526	; 0xb526 <__gesf2>
    1428:	87 fd       	sbrc	r24, 7
    142a:	61 ca       	rjmp	.-2878   	; 0x8ee <main+0x70e>
							setLeftSpeed(0);
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
							setRightSpeed(0);
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	56 c9       	rjmp	.-3412   	; 0x6e2 <main+0x502>

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
					case 0:
						irCommInit();
    1436:	0e 94 e3 57 	call	0xafc6	; 0xafc6 <irCommInit>
						demoState = 1;
    143a:	30 92 54 04 	sts	0x0454, r3
    143e:	90 91 50 04 	lds	r25, 0x0450
    1442:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <main+0x11c>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    1446:	0e 94 02 44 	call	0x8804	; 0x8804 <turnOffGreenLeds>
							GREEN_LED6_ON;
    144a:	80 91 0b 01 	lds	r24, 0x010B
    144e:	8f 7b       	andi	r24, 0xBF	; 191
    1450:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    1454:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    1458:	60 93 60 04 	sts	0x0460, r22
    145c:	70 93 61 04 	sts	0x0461, r23
    1460:	80 93 62 04 	sts	0x0462, r24
    1464:	90 93 63 04 	sts	0x0463, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    1468:	20 91 58 04 	lds	r18, 0x0458
    146c:	30 91 59 04 	lds	r19, 0x0459
    1470:	40 91 5a 04 	lds	r20, 0x045A
    1474:	50 91 5b 04 	lds	r21, 0x045B
    1478:	62 1b       	sub	r22, r18
    147a:	73 0b       	sbc	r23, r19
    147c:	84 0b       	sbc	r24, r20
    147e:	95 0b       	sbc	r25, r21
    1480:	6d 5c       	subi	r22, 0xCD	; 205
    1482:	76 46       	sbci	r23, 0x66	; 102
    1484:	84 40       	sbci	r24, 0x04	; 4
    1486:	90 40       	sbci	r25, 0x00	; 0
    1488:	08 f4       	brcc	.+2      	; 0x148c <main+0x12ac>
    148a:	31 c1       	rjmp	.+610    	; 0x16ee <main+0x150e>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    148c:	80 91 b9 02 	lds	r24, 0x02B9
    1490:	90 91 ba 02 	lds	r25, 0x02BA
    1494:	8a 57       	subi	r24, 0x7A	; 122
    1496:	93 40       	sbci	r25, 0x03	; 3
    1498:	08 f4       	brcc	.+2      	; 0x149c <main+0x12bc>
    149a:	36 c1       	rjmp	.+620    	; 0x1708 <main+0x1528>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    149c:	83 ef       	ldi	r24, 0xF3	; 243
    149e:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
									setLeftSpeed(-13);
    14a2:	83 ef       	ldi	r24, 0xF3	; 243
    14a4:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    14a8:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    14ac:	60 93 58 04 	sts	0x0458, r22
    14b0:	70 93 59 04 	sts	0x0459, r23
    14b4:	80 93 5a 04 	sts	0x045A, r24
    14b8:	90 93 5b 04 	sts	0x045B, r25
									demoState = 4;
    14bc:	34 e0       	ldi	r19, 0x04	; 4
    14be:	30 93 54 04 	sts	0x0454, r19
    14c2:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    14c6:	0e 94 02 44 	call	0x8804	; 0x8804 <turnOffGreenLeds>
							GREEN_LED6_ON;
    14ca:	80 91 0b 01 	lds	r24, 0x010B
    14ce:	8f 7b       	andi	r24, 0xBF	; 191
    14d0:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    14d4:	80 91 0b 01 	lds	r24, 0x010B
    14d8:	8f 77       	andi	r24, 0x7F	; 127
    14da:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    14de:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    14e2:	60 93 60 04 	sts	0x0460, r22
    14e6:	70 93 61 04 	sts	0x0461, r23
    14ea:	80 93 62 04 	sts	0x0462, r24
    14ee:	90 93 63 04 	sts	0x0463, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    14f2:	20 91 58 04 	lds	r18, 0x0458
    14f6:	30 91 59 04 	lds	r19, 0x0459
    14fa:	40 91 5a 04 	lds	r20, 0x045A
    14fe:	50 91 5b 04 	lds	r21, 0x045B
    1502:	62 1b       	sub	r22, r18
    1504:	73 0b       	sbc	r23, r19
    1506:	84 0b       	sbc	r24, r20
    1508:	95 0b       	sbc	r25, r21
    150a:	6f 58       	subi	r22, 0x8F	; 143
    150c:	75 42       	sbci	r23, 0x25	; 37
    150e:	80 40       	sbci	r24, 0x00	; 0
    1510:	90 40       	sbci	r25, 0x00	; 0
    1512:	10 f4       	brcc	.+4      	; 0x1518 <main+0x1338>
    1514:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
								setRightSpeed(20);
    1518:	84 e1       	ldi	r24, 0x14	; 20
    151a:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
								setLeftSpeed(-20);								
    151e:	8c ee       	ldi	r24, 0xEC	; 236
    1520:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1524:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    1528:	60 93 58 04 	sts	0x0458, r22
    152c:	70 93 59 04 	sts	0x0459, r23
    1530:	80 93 5a 04 	sts	0x045A, r24
    1534:	90 93 5b 04 	sts	0x045B, r25
								demoState = 5;							
    1538:	b5 e0       	ldi	r27, 0x05	; 5
    153a:	b0 93 54 04 	sts	0x0454, r27
    153e:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    1542:	0e 94 02 44 	call	0x8804	; 0x8804 <turnOffGreenLeds>
							GREEN_LED4_ON;
    1546:	80 91 0b 01 	lds	r24, 0x010B
    154a:	8f 7e       	andi	r24, 0xEF	; 239
    154c:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    1550:	0e 94 d0 40 	call	0x81a0	; 0x81a0 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    1554:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    1558:	60 93 60 04 	sts	0x0460, r22
    155c:	70 93 61 04 	sts	0x0461, r23
    1560:	80 93 62 04 	sts	0x0462, r24
    1564:	90 93 63 04 	sts	0x0463, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    1568:	20 91 58 04 	lds	r18, 0x0458
    156c:	30 91 59 04 	lds	r19, 0x0459
    1570:	40 91 5a 04 	lds	r20, 0x045A
    1574:	50 91 5b 04 	lds	r21, 0x045B
    1578:	62 1b       	sub	r22, r18
    157a:	73 0b       	sbc	r23, r19
    157c:	84 0b       	sbc	r24, r20
    157e:	95 0b       	sbc	r25, r21
    1580:	63 53       	subi	r22, 0x33	; 51
    1582:	7f 4e       	sbci	r23, 0xEF	; 239
    1584:	82 40       	sbci	r24, 0x02	; 2
    1586:	90 40       	sbci	r25, 0x00	; 0
    1588:	08 f0       	brcs	.+2      	; 0x158c <main+0x13ac>
    158a:	61 c1       	rjmp	.+706    	; 0x184e <main+0x166e>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    158c:	80 91 03 01 	lds	r24, 0x0103
    1590:	84 ff       	sbrs	r24, 4
    1592:	43 c1       	rjmp	.+646    	; 0x181a <main+0x163a>
								outOfLine = 0;
    1594:	10 92 56 04 	sts	0x0456, r1
								chargeContact++;
    1598:	80 91 57 04 	lds	r24, 0x0457
    159c:	8f 5f       	subi	r24, 0xFF	; 255
    159e:	80 93 57 04 	sts	0x0457, r24
								if(chargeContact > 20) {
    15a2:	85 31       	cpi	r24, 0x15	; 21
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <main+0x13c8>
    15a6:	55 c2       	rjmp	.+1194   	; 0x1a52 <main+0x1872>
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    15a8:	40 91 65 02 	lds	r20, 0x0265
    15ac:	50 91 66 02 	lds	r21, 0x0266
    15b0:	31 e0       	ldi	r19, 0x01	; 1
    15b2:	42 3c       	cpi	r20, 0xC2	; 194
    15b4:	53 07       	cpc	r21, r19
    15b6:	0c f0       	brlt	.+2      	; 0x15ba <main+0x13da>
    15b8:	b3 c0       	rjmp	.+358    	; 0x1720 <main+0x1540>
    15ba:	20 91 67 02 	lds	r18, 0x0267
    15be:	30 91 68 02 	lds	r19, 0x0268
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	23 3c       	cpi	r18, 0xC3	; 195
    15c6:	36 07       	cpc	r19, r22
    15c8:	0c f4       	brge	.+2      	; 0x15cc <main+0x13ec>
    15ca:	ae c0       	rjmp	.+348    	; 0x1728 <main+0x1548>
    15cc:	80 91 69 02 	lds	r24, 0x0269
    15d0:	90 91 6a 02 	lds	r25, 0x026A
    15d4:	83 5c       	subi	r24, 0xC3	; 195
    15d6:	91 40       	sbci	r25, 0x01	; 1
    15d8:	0c f4       	brge	.+2      	; 0x15dc <main+0x13fc>
    15da:	a6 c0       	rjmp	.+332    	; 0x1728 <main+0x1548>
    15dc:	80 91 6b 02 	lds	r24, 0x026B
    15e0:	90 91 6c 02 	lds	r25, 0x026C
    15e4:	b1 e0       	ldi	r27, 0x01	; 1
    15e6:	83 3c       	cpi	r24, 0xC3	; 195
    15e8:	9b 07       	cpc	r25, r27
    15ea:	0c f0       	brlt	.+2      	; 0x15ee <main+0x140e>
    15ec:	23 c3       	rjmp	.+1606   	; 0x1c34 <main+0x1a54>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    15ee:	82 5c       	subi	r24, 0xC2	; 194
    15f0:	91 40       	sbci	r25, 0x01	; 1
    15f2:	0c f0       	brlt	.+2      	; 0x15f6 <main+0x1416>
    15f4:	a1 c0       	rjmp	.+322    	; 0x1738 <main+0x1558>
    15f6:	43 5c       	subi	r20, 0xC3	; 195
    15f8:	51 40       	sbci	r21, 0x01	; 1
    15fa:	0c f4       	brge	.+2      	; 0x15fe <main+0x141e>
    15fc:	9d c0       	rjmp	.+314    	; 0x1738 <main+0x1558>
    15fe:	23 5c       	subi	r18, 0xC3	; 195
    1600:	31 40       	sbci	r19, 0x01	; 1
    1602:	0c f4       	brge	.+2      	; 0x1606 <main+0x1426>
    1604:	9d c0       	rjmp	.+314    	; 0x1740 <main+0x1560>
    1606:	80 91 69 02 	lds	r24, 0x0269
    160a:	90 91 6a 02 	lds	r25, 0x026A
    160e:	83 5c       	subi	r24, 0xC3	; 195
    1610:	91 40       	sbci	r25, 0x01	; 1
    1612:	0c f0       	brlt	.+2      	; 0x1616 <main+0x1436>
    1614:	07 c3       	rjmp	.+1550   	; 0x1c24 <main+0x1a44>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    1616:	8f e0       	ldi	r24, 0x0F	; 15
    1618:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
								setRightSpeed(-5);
    161c:	8b ef       	ldi	r24, 0xFB	; 251
    161e:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
    1622:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    1626:	80 91 55 04 	lds	r24, 0x0455
    162a:	8f 5f       	subi	r24, 0xFF	; 255
    162c:	80 93 55 04 	sts	0x0455, r24
								if(lineFound > 10) {
    1630:	8b 30       	cpi	r24, 0x0B	; 11
    1632:	10 f4       	brcc	.+4      	; 0x1638 <main+0x1458>
    1634:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
									outOfLine = 0;
    1638:	10 92 56 04 	sts	0x0456, r1
									chargeContact = 0;
    163c:	10 92 57 04 	sts	0x0457, r1
									demoStartTime = getTime100MicroSec();
    1640:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    1644:	60 93 58 04 	sts	0x0458, r22
    1648:	70 93 59 04 	sts	0x0459, r23
    164c:	80 93 5a 04 	sts	0x045A, r24
    1650:	90 93 5b 04 	sts	0x045B, r25
									demoState = 2;
    1654:	82 e0       	ldi	r24, 0x02	; 2
    1656:	80 93 54 04 	sts	0x0454, r24
    165a:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    165e:	84 36       	cpi	r24, 0x64	; 100
    1660:	91 05       	cpc	r25, r1
    1662:	08 f0       	brcs	.+2      	; 0x1666 <main+0x1486>
    1664:	8e c0       	rjmp	.+284    	; 0x1782 <main+0x15a2>
								pwm_green = 255;
    1666:	d0 92 09 02 	sts	0x0209, r13
    166a:	6e ca       	rjmp	.-2852   	; 0xb48 <main+0x968>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    166c:	80 93 0a 02 	sts	0x020A, r24
    1670:	5d ca       	rjmp	.-2886   	; 0xb2c <main+0x94c>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    1672:	80 93 09 02 	sts	0x0209, r24
    1676:	4e ca       	rjmp	.-2916   	; 0xb14 <main+0x934>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    1678:	80 93 08 02 	sts	0x0208, r24
    167c:	3f ca       	rjmp	.-2946   	; 0xafc <main+0x91c>
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
    167e:	30 92 6f 04 	sts	0x046F, r3
								demoStartTime2 = getTime100MicroSec();
    1682:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    1686:	60 93 5c 04 	sts	0x045C, r22
    168a:	70 93 5d 04 	sts	0x045D, r23
    168e:	80 93 5e 04 	sts	0x045E, r24
    1692:	90 93 5f 04 	sts	0x045F, r25
    1696:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    169a:	80 91 6e 04 	lds	r24, 0x046E
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	0e 94 65 43 	call	0x86ca	; 0x86ca <setGreenLed>
								greenLedState++;
    16a4:	80 91 6e 04 	lds	r24, 0x046E
    16a8:	8f 5f       	subi	r24, 0xFF	; 255
    16aa:	80 93 6e 04 	sts	0x046E, r24
								if(greenLedState > 7) {
    16ae:	88 30       	cpi	r24, 0x08	; 8
    16b0:	20 f0       	brcs	.+8      	; 0x16ba <main+0x14da>
									greenLedState = 0;
    16b2:	10 92 6e 04 	sts	0x046E, r1
    16b6:	80 91 6e 04 	lds	r24, 0x046E
								}
								setGreenLed(greenLedState, 1);
    16ba:	61 e0       	ldi	r22, 0x01	; 1
    16bc:	0e 94 65 43 	call	0x86ca	; 0x86ca <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    16c0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    16c4:	60 93 60 04 	sts	0x0460, r22
    16c8:	70 93 61 04 	sts	0x0461, r23
    16cc:	80 93 62 04 	sts	0x0462, r24
    16d0:	90 93 63 04 	sts	0x0463, r25
    16d4:	0c 94 2e 02 	jmp	0x45c	; 0x45c <main+0x27c>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {							
							demoState = 1;
    16d8:	80 93 54 04 	sts	0x0454, r24
							if(irCommRxByteExpected<255) {
    16dc:	80 91 17 05 	lds	r24, 0x0517
    16e0:	8f 3f       	cpi	r24, 0xFF	; 255
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <main+0x1506>
    16e4:	63 c1       	rjmp	.+710    	; 0x19ac <main+0x17cc>
								irCommRxByteExpected++;
    16e6:	8f 5f       	subi	r24, 0xFF	; 255
    16e8:	80 93 17 05 	sts	0x0517, r24
    16ec:	1e c9       	rjmp	.-3524   	; 0x92a <main+0x74a>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    16ee:	80 91 03 01 	lds	r24, 0x0103
    16f2:	84 ff       	sbrs	r24, 4
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <main+0x151a>
    16f6:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
								chargeContact = 0;
    16fa:	10 92 57 04 	sts	0x0457, r1
								outOfLine = 0;
    16fe:	10 92 56 04 	sts	0x0456, r1
								demoState = 2;
    1702:	62 e0       	ldi	r22, 0x02	; 2
    1704:	60 93 54 04 	sts	0x0454, r22
								demoStartTime = getTime100MicroSec();
    1708:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    170c:	60 93 58 04 	sts	0x0458, r22
    1710:	70 93 59 04 	sts	0x0459, r23
    1714:	80 93 5a 04 	sts	0x045A, r24
    1718:	90 93 5b 04 	sts	0x045B, r25
    171c:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    1720:	20 91 67 02 	lds	r18, 0x0267
    1724:	30 91 68 02 	lds	r19, 0x0268
    1728:	80 91 6b 02 	lds	r24, 0x026B
    172c:	90 91 6c 02 	lds	r25, 0x026C
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    1730:	82 5c       	subi	r24, 0xC2	; 194
    1732:	91 40       	sbci	r25, 0x01	; 1
    1734:	0c f4       	brge	.+2      	; 0x1738 <main+0x1558>
    1736:	5f cf       	rjmp	.-322    	; 0x15f6 <main+0x1416>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1738:	23 5c       	subi	r18, 0xC3	; 195
    173a:	31 40       	sbci	r19, 0x01	; 1
    173c:	0c f0       	brlt	.+2      	; 0x1740 <main+0x1560>
    173e:	6b cf       	rjmp	.-298    	; 0x1616 <main+0x1436>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    1740:	80 91 69 02 	lds	r24, 0x0269
    1744:	90 91 6a 02 	lds	r25, 0x026A
    1748:	83 5c       	subi	r24, 0xC3	; 195
    174a:	91 40       	sbci	r25, 0x01	; 1
    174c:	0c f4       	brge	.+2      	; 0x1750 <main+0x1570>
    174e:	32 c1       	rjmp	.+612    	; 0x19b4 <main+0x17d4>
								setLeftSpeed(-5);
    1750:	8b ef       	ldi	r24, 0xFB	; 251
    1752:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
								setRightSpeed(15);
    1756:	8f e0       	ldi	r24, 0x0F	; 15
    1758:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
    175c:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
							// transmission: continuously send the next robot id to tell him to turn on the led
							// reception: listen for 0xFF and then turn off the led; when I receive 0xFF it means the next robot has
							// received its id, thus it has turned on its led
						irCommTasks();
						if(irCommDataSent()==1) {
							if(irCommRobotId < (irCommRobotsNum-1)) {
    1760:	40 91 e9 04 	lds	r20, 0x04E9
    1764:	24 2f       	mov	r18, r20
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	80 91 ea 04 	lds	r24, 0x04EA
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	28 17       	cp	r18, r24
    1772:	39 07       	cpc	r19, r25
    1774:	0c f0       	brlt	.+2      	; 0x1778 <main+0x1598>
    1776:	94 c0       	rjmp	.+296    	; 0x18a0 <main+0x16c0>
								irCommSendData(irCommRobotId+1);
    1778:	84 2f       	mov	r24, r20
    177a:	8f 5f       	subi	r24, 0xFF	; 255
    177c:	0e 94 32 4c 	call	0x9864	; 0x9864 <irCommSendData>
    1780:	80 cd       	rjmp	.-1280   	; 0x1282 <main+0x10a2>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    1782:	86 39       	cpi	r24, 0x96	; 150
    1784:	91 05       	cpc	r25, r1
    1786:	08 f0       	brcs	.+2      	; 0x178a <main+0x15aa>
    1788:	df c9       	rjmp	.-3138   	; 0xb48 <main+0x968>
								pwm_blue = 255;
    178a:	d0 92 0a 02 	sts	0x020A, r13
    178e:	dc c9       	rjmp	.-3144   	; 0xb48 <main+0x968>
						irCommTasks();
						if(irCommDataSent()==1) {	
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
							i = irCommReadData();
    1790:	0e 94 46 4c 	call	0x988c	; 0x988c <irCommReadData>
    1794:	58 2f       	mov	r21, r24
    1796:	88 2e       	mov	r8, r24
    1798:	99 24       	eor	r9, r9
							if(i == irCommRxByteExpected) {
    179a:	40 91 17 05 	lds	r20, 0x0517
    179e:	24 2f       	mov	r18, r20
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	28 15       	cp	r18, r8
    17a4:	39 05       	cpc	r19, r9
    17a6:	09 f4       	brne	.+2      	; 0x17aa <main+0x15ca>
    17a8:	32 c1       	rjmp	.+612    	; 0x1a0e <main+0x182e>
									} else {
										irCommRxByteExpected = 0;
									}
								}
							} else {
								if(irCommRxByteExpected==7) {
    17aa:	47 30       	cpi	r20, 0x07	; 7
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <main+0x15d0>
    17ae:	b8 c1       	rjmp	.+880    	; 0x1b20 <main+0x1940>
									if(i==0) {
										irCommRxByteExpected = 0;
										irCommMsgCount = 0;
									}
								} else {
									if(irCommRxByteExpected==(i-1)) {
    17b0:	c4 01       	movw	r24, r8
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	28 17       	cp	r18, r24
    17b6:	39 07       	cpc	r19, r25
    17b8:	09 f4       	brne	.+2      	; 0x17bc <main+0x15dc>
    17ba:	f0 c1       	rjmp	.+992    	; 0x1b9c <main+0x19bc>
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    17bc:	43 30       	cpi	r20, 0x03	; 3
    17be:	09 f4       	brne	.+2      	; 0x17c2 <main+0x15e2>
    17c0:	3b c1       	rjmp	.+630    	; 0x1a38 <main+0x1858>
    17c2:	44 30       	cpi	r20, 0x04	; 4
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <main+0x15e8>
    17c6:	5a c1       	rjmp	.+692    	; 0x1a7c <main+0x189c>
    17c8:	41 30       	cpi	r20, 0x01	; 1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <main+0x15ee>
    17cc:	ed c1       	rjmp	.+986    	; 0x1ba8 <main+0x19c8>
    17ce:	42 30       	cpi	r20, 0x02	; 2
    17d0:	08 f4       	brcc	.+2      	; 0x17d4 <main+0x15f4>
    17d2:	ae c1       	rjmp	.+860    	; 0x1b30 <main+0x1950>
									updateRedLed(235);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 4: 
									updateRedLed(235);
    17d6:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
									updateGreenLed(235);
    17da:	8b ee       	ldi	r24, 0xEB	; 235
    17dc:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
									updateBlueLed(255);
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
    17e6:	90 91 50 04 	lds	r25, 0x0450
    17ea:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <main+0x11c>
						break;

					case 1:	
						irCommTasks();
						if(irCommDataSent()==1) {	
							irCommSendData(irCommRxByteExpected);					
    17ee:	80 91 17 05 	lds	r24, 0x0517
    17f2:	0e 94 32 4c 	call	0x9864	; 0x9864 <irCommSendData>
    17f6:	76 c8       	rjmp	.-3860   	; 0x8e4 <main+0x704>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	09 f4       	brne	.+2      	; 0x17fe <main+0x161e>
    17fc:	57 c1       	rjmp	.+686    	; 0x1aac <main+0x18cc>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    17fe:	82 30       	cpi	r24, 0x02	; 2
    1800:	11 f0       	breq	.+4      	; 0x1806 <main+0x1626>
    1802:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <main+0x2f0>
						pwm_red = 255;
    1806:	d0 92 08 02 	sts	0x0208, r13
						pwm_green = 255;
    180a:	d0 92 09 02 	sts	0x0209, r13
						pwm_blue = 254;
    180e:	20 92 0a 02 	sts	0x020A, r2
						rgbState = 0;
    1812:	10 92 18 03 	sts	0x0318, r1
    1816:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <main+0x2f0>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    181a:	10 92 57 04 	sts	0x0457, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    181e:	80 91 67 02 	lds	r24, 0x0267
    1822:	90 91 68 02 	lds	r25, 0x0268
    1826:	83 5c       	subi	r24, 0xC3	; 195
    1828:	91 40       	sbci	r25, 0x01	; 1
    182a:	34 f1       	brlt	.+76     	; 0x1878 <main+0x1698>
    182c:	80 91 69 02 	lds	r24, 0x0269
    1830:	90 91 6a 02 	lds	r25, 0x026A
    1834:	83 5c       	subi	r24, 0xC3	; 195
    1836:	91 40       	sbci	r25, 0x01	; 1
    1838:	fc f0       	brlt	.+62     	; 0x1878 <main+0x1698>
									outOfLine++;
    183a:	80 91 56 04 	lds	r24, 0x0456
    183e:	8f 5f       	subi	r24, 0xFF	; 255
    1840:	80 93 56 04 	sts	0x0456, r24
									if(outOfLine > 250) {
    1844:	8b 3f       	cpi	r24, 0xFB	; 251
    1846:	08 f4       	brcc	.+2      	; 0x184a <main+0x166a>
    1848:	af ce       	rjmp	.-674    	; 0x15a8 <main+0x13c8>
    184a:	0c 94 ae 02 	jmp	0x55c	; 0x55c <main+0x37c>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    184e:	8c ee       	ldi	r24, 0xEC	; 236
    1850:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
								setLeftSpeed(-20);
    1854:	8c ee       	ldi	r24, 0xEC	; 236
    1856:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    185a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    185e:	60 93 58 04 	sts	0x0458, r22
    1862:	70 93 59 04 	sts	0x0459, r23
    1866:	80 93 5a 04 	sts	0x045A, r24
    186a:	90 93 5b 04 	sts	0x045B, r25
								demoState = 4;
    186e:	b4 e0       	ldi	r27, 0x04	; 4
    1870:	b0 93 54 04 	sts	0x0454, r27
    1874:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    1878:	10 92 56 04 	sts	0x0456, r1
    187c:	95 ce       	rjmp	.-726    	; 0x15a8 <main+0x13c8>
					case 2: // led is off
							// transmission: continuously send my robot id to tell the next robot I turned off the led
							// reception: listen for my robot id and then turn on the led				
						irCommTasks();
						if(irCommDataSent()==1) {
							irCommSendData(irCommRobotId);							
    187e:	80 91 e9 04 	lds	r24, 0x04E9
    1882:	0e 94 32 4c 	call	0x9864	; 0x9864 <irCommSendData>
    1886:	3b cd       	rjmp	.-1418   	; 0x12fe <main+0x111e>
								irCommLedToggle = 1;
								updateBlueLed(255);
								updateRedLed(255);
								updateGreenLed(128);
							} else {
								irCommLedToggle = 0;
    1888:	10 92 eb 04 	sts	0x04EB, r1
								updateBlueLed(255);
    188c:	8f ef       	ldi	r24, 0xFF	; 255
    188e:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
								updateRedLed(255);
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
								updateGreenLed(235);
    1898:	8b ee       	ldi	r24, 0xEB	; 235
    189a:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
    189e:	07 cd       	rjmp	.-1522   	; 0x12ae <main+0x10ce>
						irCommTasks();
						if(irCommDataSent()==1) {
							if(irCommRobotId < (irCommRobotsNum-1)) {
								irCommSendData(irCommRobotId+1);
							} else {
								irCommSendData(0x00);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	0e 94 32 4c 	call	0x9864	; 0x9864 <irCommSendData>
    18a6:	ed cc       	rjmp	.-1574   	; 0x1282 <main+0x10a2>
						if(irCommDataAvailable()==1) {
							if(irCommLedToggle==0) {
								irCommLedToggle = 1;
								updateRedLed(255);
							} else {
								irCommLedToggle = 0;
    18a8:	10 92 eb 04 	sts	0x04EB, r1
								updateRedLed(235);
    18ac:	8b ee       	ldi	r24, 0xEB	; 235
    18ae:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
    18b2:	35 cd       	rjmp	.-1430   	; 0x131e <main+0x113e>
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
							demoStartTime = getTime100MicroSec();
    18b4:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    18b8:	60 93 58 04 	sts	0x0458, r22
    18bc:	70 93 59 04 	sts	0x0459, r23
    18c0:	80 93 5a 04 	sts	0x045A, r24
    18c4:	90 93 5b 04 	sts	0x045B, r25
							irCommLastData = irCommReadData();
    18c8:	0e 94 46 4c 	call	0x988c	; 0x988c <irCommReadData>
							irCommLastData = (int)((float)irCommLastData*1.411);
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	aa 27       	eor	r26, r26
    18d0:	97 fd       	sbrc	r25, 7
    18d2:	a0 95       	com	r26
    18d4:	ba 2f       	mov	r27, r26
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    18de:	26 ea       	ldi	r18, 0xA6	; 166
    18e0:	3b e9       	ldi	r19, 0x9B	; 155
    18e2:	44 eb       	ldi	r20, 0xB4	; 180
    18e4:	5f e3       	ldi	r21, 0x3F	; 63
    18e6:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    18ea:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    18ee:	70 93 e3 04 	sts	0x04E3, r23
    18f2:	60 93 e2 04 	sts	0x04E2, r22
							irCommLastSensor = irCommReceivingSensor();	
    18f6:	0e 94 4b 4c 	call	0x9896	; 0x9896 <irCommReceivingSensor>
    18fa:	80 93 14 02 	sts	0x0214, r24
							disableObstacleAvoidance();										
    18fe:	0e 94 d0 40 	call	0x81a0	; 0x81a0 <disableObstacleAvoidance>
							angleDeg = getBearing(irCommLastSensor);
    1902:	80 91 14 02 	lds	r24, 0x0214
    1906:	0e 94 4e 4c 	call	0x989c	; 0x989c <getBearing>
    190a:	90 93 e5 04 	sts	0x04E5, r25
    190e:	80 93 e4 04 	sts	0x04E4, r24
							if(angleDeg < 0) {
    1912:	97 fd       	sbrc	r25, 7
    1914:	1a c1       	rjmp	.+564    	; 0x1b4a <main+0x196a>
								angleDeg += 360;
							}
							angleError = angleDeg - irCommLastData;
							angleError += 180;
    1916:	20 91 e4 04 	lds	r18, 0x04E4
    191a:	30 91 e5 04 	lds	r19, 0x04E5
    191e:	2c 54       	subi	r18, 0x4C	; 76
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
    1922:	80 91 e2 04 	lds	r24, 0x04E2
    1926:	90 91 e3 04 	lds	r25, 0x04E3
    192a:	28 1b       	sub	r18, r24
    192c:	39 0b       	sbc	r19, r25
    192e:	30 93 e7 04 	sts	0x04E7, r19
    1932:	20 93 e6 04 	sts	0x04E6, r18
							if(angleError > 180) {
    1936:	25 3b       	cpi	r18, 0xB5	; 181
    1938:	31 05       	cpc	r19, r1
    193a:	34 f0       	brlt	.+12     	; 0x1948 <main+0x1768>
								angleError -= 360;
    193c:	28 56       	subi	r18, 0x68	; 104
    193e:	31 40       	sbci	r19, 0x01	; 1
    1940:	30 93 e7 04 	sts	0x04E7, r19
    1944:	20 93 e6 04 	sts	0x04E6, r18
							}
							if(angleError < -180) {
    1948:	80 91 e6 04 	lds	r24, 0x04E6
    194c:	90 91 e7 04 	lds	r25, 0x04E7
    1950:	ef ef       	ldi	r30, 0xFF	; 255
    1952:	8c 34       	cpi	r24, 0x4C	; 76
    1954:	9e 07       	cpc	r25, r30
    1956:	34 f4       	brge	.+12     	; 0x1964 <main+0x1784>
								angleError += 360;
    1958:	88 59       	subi	r24, 0x98	; 152
    195a:	9e 4f       	sbci	r25, 0xFE	; 254
    195c:	90 93 e7 04 	sts	0x04E7, r25
    1960:	80 93 e6 04 	sts	0x04E6, r24
							}
							if(abs(angleError) < 10) {
    1964:	09 96       	adiw	r24, 0x09	; 9
    1966:	43 97       	sbiw	r24, 0x13	; 19
    1968:	08 f0       	brcs	.+2      	; 0x196c <main+0x178c>
    196a:	ab c0       	rjmp	.+342    	; 0x1ac2 <main+0x18e2>
								setLeftSpeed(0);
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
								setRightSpeed(0);
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
    1978:	2d cd       	rjmp	.-1446   	; 0x13d4 <main+0x11f4>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
    197a:	60 91 e4 04 	lds	r22, 0x04E4
    197e:	70 91 e5 04 	lds	r23, 0x04E5
    1982:	88 27       	eor	r24, r24
    1984:	77 fd       	sbrc	r23, 7
    1986:	80 95       	com	r24
    1988:	98 2f       	mov	r25, r24
    198a:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    198e:	24 eb       	ldi	r18, 0xB4	; 180
    1990:	39 e5       	ldi	r19, 0x59	; 89
    1992:	45 e3       	ldi	r20, 0x35	; 53
    1994:	5f e3       	ldi	r21, 0x3F	; 63
    1996:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    199a:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	80 93 e8 04 	sts	0x04E8, r24
							irCommSendData(angleDegEncode);
    19a6:	0e 94 32 4c 	call	0x9864	; 0x9864 <irCommSendData>
    19aa:	0f cd       	rjmp	.-1506   	; 0x13ca <main+0x11ea>
						if(irCommDataSent()==1) {							
							demoState = 1;
							if(irCommRxByteExpected<255) {
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
    19ac:	10 92 17 05 	sts	0x0517, r1
    19b0:	0c 94 95 04 	jmp	0x92a	; 0x92a <main+0x74a>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    19b4:	8f e0       	ldi	r24, 0x0F	; 15
    19b6:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
								setLeftSpeed(15);
    19ba:	8f e0       	ldi	r24, 0x0F	; 15
    19bc:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
    19c0:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
							}
						}
						if(irCommDataAvailable()==1) {
							irCommReadData();
							if(i<7) {
								i++;
    19c4:	08 94       	sec
    19c6:	81 1c       	adc	r8, r1
    19c8:	91 1c       	adc	r9, r1
							} else {
								i = 0;
							}
							switch(i) {
    19ca:	e3 e0       	ldi	r30, 0x03	; 3
    19cc:	8e 16       	cp	r8, r30
    19ce:	91 04       	cpc	r9, r1
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <main+0x17f4>
    19d2:	15 c1       	rjmp	.+554    	; 0x1bfe <main+0x1a1e>
    19d4:	f4 e0       	ldi	r31, 0x04	; 4
    19d6:	8f 16       	cp	r8, r31
    19d8:	91 04       	cpc	r9, r1
    19da:	08 f0       	brcs	.+2      	; 0x19de <main+0x17fe>
    19dc:	bd c0       	rjmp	.+378    	; 0x1b58 <main+0x1978>
    19de:	21 e0       	ldi	r18, 0x01	; 1
    19e0:	82 16       	cp	r8, r18
    19e2:	91 04       	cpc	r9, r1
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <main+0x1808>
    19e6:	f7 c0       	rjmp	.+494    	; 0x1bd6 <main+0x19f6>
    19e8:	32 e0       	ldi	r19, 0x02	; 2
    19ea:	83 16       	cp	r8, r19
    19ec:	91 04       	cpc	r9, r1
    19ee:	10 f4       	brcc	.+4      	; 0x19f4 <main+0x1814>
    19f0:	0c 94 a1 04 	jmp	0x942	; 0x942 <main+0x762>
									updateRedLed(0);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 4: 
									updateRedLed(0);
    19f6:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
									updateGreenLed(0);
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
									updateBlueLed(255);
    1a00:	8f ef       	ldi	r24, 0xFF	; 255
    1a02:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
    1a06:	90 91 50 04 	lds	r25, 0x0450
    1a0a:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <main+0x11c>
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
							i = irCommReadData();
							if(i == irCommRxByteExpected) {
								irCommMsgCount++;
    1a0e:	80 91 ec 04 	lds	r24, 0x04EC
    1a12:	8f 5f       	subi	r24, 0xFF	; 255
    1a14:	80 93 ec 04 	sts	0x04EC, r24
								if(irCommMsgCount >= 4) {
    1a18:	84 30       	cpi	r24, 0x04	; 4
    1a1a:	08 f4       	brcc	.+2      	; 0x1a1e <main+0x183e>
    1a1c:	cf ce       	rjmp	.-610    	; 0x17bc <main+0x15dc>
									irCommMsgCount = 0;
    1a1e:	10 92 ec 04 	sts	0x04EC, r1
									if(irCommRxByteExpected < 7) {
    1a22:	47 30       	cpi	r20, 0x07	; 7
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <main+0x1848>
    1a26:	c8 c0       	rjmp	.+400    	; 0x1bb8 <main+0x19d8>
										irCommRxByteExpected++;
    1a28:	84 2f       	mov	r24, r20
    1a2a:	8f 5f       	subi	r24, 0xFF	; 255
    1a2c:	80 93 17 05 	sts	0x0517, r24
    1a30:	48 2f       	mov	r20, r24
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    1a32:	43 30       	cpi	r20, 0x03	; 3
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <main+0x1858>
    1a36:	c5 ce       	rjmp	.-630    	; 0x17c2 <main+0x15e2>
									updateRedLed(255);
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    1a38:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(235);
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(235);
    1a3a:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
									updateGreenLed(255);
    1a3e:	8f ef       	ldi	r24, 0xFF	; 255
    1a40:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
									updateBlueLed(235);
    1a44:	8b ee       	ldi	r24, 0xEB	; 235
    1a46:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
    1a4a:	90 91 50 04 	lds	r25, 0x0450
    1a4e:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <main+0x11c>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
									setRightSpeed(0);
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    1a5e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    1a62:	60 93 58 04 	sts	0x0458, r22
    1a66:	70 93 59 04 	sts	0x0459, r23
    1a6a:	80 93 5a 04 	sts	0x045A, r24
    1a6e:	90 93 5b 04 	sts	0x045B, r25
									demoState = 3;
    1a72:	e3 e0       	ldi	r30, 0x03	; 3
    1a74:	e0 93 54 04 	sts	0x0454, r30
    1a78:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    1a7c:	45 30       	cpi	r20, 0x05	; 5
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <main+0x18a2>
    1a80:	97 c0       	rjmp	.+302    	; 0x1bb0 <main+0x19d0>
    1a82:	45 30       	cpi	r20, 0x05	; 5
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <main+0x18a8>
    1a86:	92 c0       	rjmp	.+292    	; 0x1bac <main+0x19cc>
    1a88:	46 30       	cpi	r20, 0x06	; 6
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <main+0x18ae>
    1a8c:	93 c0       	rjmp	.+294    	; 0x1bb4 <main+0x19d4>
    1a8e:	47 30       	cpi	r20, 0x07	; 7
    1a90:	11 f0       	breq	.+4      	; 0x1a96 <main+0x18b6>
    1a92:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <main+0x70e>
									updateRedLed(255);
									updateGreenLed(235);
									updateBlueLed(235);
									break;
								case 7: 
									updateRedLed(235);
    1a96:	8b ee       	ldi	r24, 0xEB	; 235
    1a98:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
									updateGreenLed(235);
    1a9c:	8b ee       	ldi	r24, 0xEB	; 235
    1a9e:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
									updateBlueLed(235);
    1aa2:	8b ee       	ldi	r24, 0xEB	; 235
    1aa4:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
    1aa8:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <main+0x70e>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1aac:	d0 92 08 02 	sts	0x0208, r13
						pwm_green = 254;
    1ab0:	20 92 09 02 	sts	0x0209, r2
						pwm_blue = 255;
    1ab4:	d0 92 0a 02 	sts	0x020A, r13
						rgbState = 2;
    1ab8:	b2 e0       	ldi	r27, 0x02	; 2
    1aba:	b0 93 18 03 	sts	0x0318, r27
    1abe:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <main+0x2f0>
							}
							if(abs(angleError) < 10) {
								setLeftSpeed(0);
								setRightSpeed(0);
							} else {
								resetOdometry();
    1ac2:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <resetOdometry>
								if(angleError > 0) {	// turn left
    1ac6:	80 91 e6 04 	lds	r24, 0x04E6
    1aca:	90 91 e7 04 	lds	r25, 0x04E7
    1ace:	18 16       	cp	r1, r24
    1ad0:	19 06       	cpc	r1, r25
    1ad2:	0c f0       	brlt	.+2      	; 0x1ad6 <main+0x18f6>
    1ad4:	82 c0       	rjmp	.+260    	; 0x1bda <main+0x19fa>
									setLeftSpeed(-7);
    1ad6:	89 ef       	ldi	r24, 0xF9	; 249
    1ad8:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
									setRightSpeed(7);
    1adc:	87 e0       	ldi	r24, 0x07	; 7
    1ade:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
    1ae2:	f4 e0       	ldi	r31, 0x04	; 4
    1ae4:	f0 93 54 04 	sts	0x0454, r31
    1ae8:	8c ee       	ldi	r24, 0xEC	; 236
    1aea:	91 e5       	ldi	r25, 0x51	; 81
    1aec:	a8 eb       	ldi	r26, 0xB8	; 184
    1aee:	bd e3       	ldi	r27, 0x3D	; 61
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	9a 83       	std	Y+2, r25	; 0x02
    1af4:	ab 83       	std	Y+3, r26	; 0x03
    1af6:	bc 83       	std	Y+4, r27	; 0x04
    1af8:	6d cc       	rjmp	.-1830   	; 0x13d4 <main+0x11f4>
								irCommLedToggle = 0;
								updateRedLed(235);
							}
							i = irCommReadData();
							if(i == irCommRobotId) {
								updateBlueLed(255);
    1afa:	8f ef       	ldi	r24, 0xFF	; 255
    1afc:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
								updateRedLed(255);
    1b00:	8f ef       	ldi	r24, 0xFF	; 255
    1b02:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
								updateGreenLed(128);
    1b06:	80 e8       	ldi	r24, 0x80	; 128
    1b08:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
								irCommSendData(0xFF);
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	0e 94 32 4c 	call	0x9864	; 0x9864 <irCommSendData>
								demoState = 3;					
    1b12:	93 e0       	ldi	r25, 0x03	; 3
    1b14:	90 93 54 04 	sts	0x0454, r25
    1b18:	90 91 50 04 	lds	r25, 0x0450
    1b1c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <main+0x11c>
										irCommRxByteExpected = 0;
									}
								}
							} else {
								if(irCommRxByteExpected==7) {
									if(i==0) {
    1b20:	81 14       	cp	r8, r1
    1b22:	91 04       	cpc	r9, r1
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <main+0x1948>
    1b26:	b7 cf       	rjmp	.-146    	; 0x1a96 <main+0x18b6>
										irCommRxByteExpected = 0;
    1b28:	10 92 17 05 	sts	0x0517, r1
										irCommMsgCount = 0;
    1b2c:	10 92 ec 04 	sts	0x04EC, r1
									}
								}
							}
							switch(irCommRxByteExpected) {
								case 0: 
									updateRedLed(255);
    1b30:	8f ef       	ldi	r24, 0xFF	; 255
    1b32:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
									updateGreenLed(255);
    1b36:	8f ef       	ldi	r24, 0xFF	; 255
    1b38:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
									updateBlueLed(255);
    1b3c:	8f ef       	ldi	r24, 0xFF	; 255
    1b3e:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
    1b42:	90 91 50 04 	lds	r25, 0x0450
    1b46:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <main+0x11c>
							irCommLastData = (int)((float)irCommLastData*1.411);
							irCommLastSensor = irCommReceivingSensor();	
							disableObstacleAvoidance();										
							angleDeg = getBearing(irCommLastSensor);
							if(angleDeg < 0) {
								angleDeg += 360;
    1b4a:	88 59       	subi	r24, 0x98	; 152
    1b4c:	9e 4f       	sbci	r25, 0xFE	; 254
    1b4e:	90 93 e5 04 	sts	0x04E5, r25
    1b52:	80 93 e4 04 	sts	0x04E4, r24
    1b56:	df ce       	rjmp	.-578    	; 0x1916 <main+0x1736>
							if(i<7) {
								i++;
							} else {
								i = 0;
							}
							switch(i) {
    1b58:	65 e0       	ldi	r22, 0x05	; 5
    1b5a:	86 16       	cp	r8, r22
    1b5c:	91 04       	cpc	r9, r1
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <main+0x1982>
    1b60:	5f c0       	rjmp	.+190    	; 0x1c20 <main+0x1a40>
    1b62:	85 e0       	ldi	r24, 0x05	; 5
    1b64:	88 16       	cp	r8, r24
    1b66:	91 04       	cpc	r9, r1
    1b68:	08 f4       	brcc	.+2      	; 0x1b6c <main+0x198c>
    1b6a:	58 c0       	rjmp	.+176    	; 0x1c1c <main+0x1a3c>
    1b6c:	96 e0       	ldi	r25, 0x06	; 6
    1b6e:	89 16       	cp	r8, r25
    1b70:	91 04       	cpc	r9, r1
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <main+0x1996>
    1b74:	51 c0       	rjmp	.+162    	; 0x1c18 <main+0x1a38>
    1b76:	a7 e0       	ldi	r26, 0x07	; 7
    1b78:	8a 16       	cp	r8, r26
    1b7a:	91 04       	cpc	r9, r1
    1b7c:	11 f0       	breq	.+4      	; 0x1b82 <main+0x19a2>
    1b7e:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <main+0x70e>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(0);
									break;
								case 7: 
									updateRedLed(0);
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
									updateGreenLed(0);
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
									updateBlueLed(0);
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
    1b94:	90 91 50 04 	lds	r25, 0x0450
    1b98:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <main+0x11c>
										irCommRxByteExpected = 0;
										irCommMsgCount = 0;
									}
								} else {
									if(irCommRxByteExpected==(i-1)) {
										irCommRxByteExpected = i;
    1b9c:	50 93 17 05 	sts	0x0517, r21
										irCommMsgCount = 0;
    1ba0:	10 92 ec 04 	sts	0x04EC, r1
    1ba4:	45 2f       	mov	r20, r21
    1ba6:	0a ce       	rjmp	.-1004   	; 0x17bc <main+0x15dc>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(235);
    1ba8:	8b ee       	ldi	r24, 0xEB	; 235
    1baa:	c3 cf       	rjmp	.-122    	; 0x1b32 <main+0x1952>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 4: 
									updateRedLed(235);
    1bac:	8b ee       	ldi	r24, 0xEB	; 235
    1bae:	13 ce       	rjmp	.-986    	; 0x17d6 <main+0x15f6>
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(235);
    1bb0:	8b ee       	ldi	r24, 0xEB	; 235
    1bb2:	43 cf       	rjmp	.-378    	; 0x1a3a <main+0x185a>
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 6: 
									updateRedLed(255);
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
    1bb6:	70 cf       	rjmp	.-288    	; 0x1a98 <main+0x18b8>
								if(irCommMsgCount >= 4) {
									irCommMsgCount = 0;
									if(irCommRxByteExpected < 7) {
										irCommRxByteExpected++;
									} else {
										irCommRxByteExpected = 0;
    1bb8:	10 92 17 05 	sts	0x0517, r1
    1bbc:	b9 cf       	rjmp	.-142    	; 0x1b30 <main+0x1950>
									irCommLedToggle = 1;
									updateBlueLed(255);
									updateRedLed(255);
									updateGreenLed(128);
								} else {
									irCommLedToggle = 0;
    1bbe:	10 92 eb 04 	sts	0x04EB, r1
									updateBlueLed(255);
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
									updateRedLed(255);
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
									updateGreenLed(235);
    1bce:	8b ee       	ldi	r24, 0xEB	; 235
    1bd0:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
    1bd4:	2c c8       	rjmp	.-4008   	; 0xc2e <main+0xa4e>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(0);
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	ac cf       	rjmp	.-168    	; 0x1b32 <main+0x1952>
									setLeftSpeed(-7);
									setRightSpeed(7);
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
								} else {	// turn right
									setLeftSpeed(7);
    1bda:	87 e0       	ldi	r24, 0x07	; 7
    1bdc:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
									setRightSpeed(-7);
    1be0:	89 ef       	ldi	r24, 0xF9	; 249
    1be2:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
									targetAngle = -0.09;	// about 10 degrees
									demoState = 3;
    1be6:	93 e0       	ldi	r25, 0x03	; 3
    1be8:	90 93 54 04 	sts	0x0454, r25
    1bec:	8c ee       	ldi	r24, 0xEC	; 236
    1bee:	91 e5       	ldi	r25, 0x51	; 81
    1bf0:	a8 eb       	ldi	r26, 0xB8	; 184
    1bf2:	bd eb       	ldi	r27, 0xBD	; 189
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	9a 83       	std	Y+2, r25	; 0x02
    1bf8:	ab 83       	std	Y+3, r26	; 0x03
    1bfa:	bc 83       	std	Y+4, r27	; 0x04
    1bfc:	eb cb       	rjmp	.-2090   	; 0x13d4 <main+0x11f4>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(0);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(0);
    1c00:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
									updateGreenLed(255);
    1c04:	8f ef       	ldi	r24, 0xFF	; 255
    1c06:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
									updateBlueLed(0);
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
    1c10:	90 91 50 04 	lds	r25, 0x0450
    1c14:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <main+0x11c>
									break;
								case 6: 
									updateRedLed(255);
    1c18:	8f ef       	ldi	r24, 0xFF	; 255
    1c1a:	b4 cf       	rjmp	.-152    	; 0x1b84 <main+0x19a4>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 4: 
									updateRedLed(0);
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	eb ce       	rjmp	.-554    	; 0x19f6 <main+0x1816>
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(0);
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	ee cf       	rjmp	.-36     	; 0x1c00 <main+0x1a20>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    1c24:	8f e0       	ldi	r24, 0x0F	; 15
    1c26:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
								setRightSpeed(-10);
    1c2a:	86 ef       	ldi	r24, 0xF6	; 246
    1c2c:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
    1c30:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    1c34:	86 ef       	ldi	r24, 0xF6	; 246
    1c36:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
								setRightSpeed(15);
    1c3a:	8f e0       	ldi	r24, 0x0F	; 15
    1c3c:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
    1c40:	0c 94 43 02 	jmp	0x486	; 0x486 <main+0x2a6>

00001c44 <SPI_WAIT>:
#define SPI_SCK PORTB1	// SCK pin (SPI clock)
#define SPI_SS PORTB0	// SS pin (Slave Select)

// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
    1c44:	20 91 14 03 	lds	r18, 0x0314
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1c4c:	0d b4       	in	r0, 0x2d	; 45
    1c4e:	07 fc       	sbrc	r0, 7
    1c50:	09 c0       	rjmp	.+18     	; 0x1c64 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1c52:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1c54:	37 e2       	ldi	r19, 0x27	; 39
    1c56:	80 31       	cpi	r24, 0x10	; 16
    1c58:	93 07       	cpc	r25, r19
    1c5a:	c0 f3       	brcs	.-16     	; 0x1c4c <SPI_WAIT+0x8>
    1c5c:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1c5e:	0d b4       	in	r0, 0x2d	; 45
    1c60:	07 fe       	sbrs	r0, 7
    1c62:	f7 cf       	rjmp	.-18     	; 0x1c52 <SPI_WAIT+0xe>
    1c64:	20 93 14 03 	sts	0x0314, r18
			return;
		}
	}
}
    1c68:	08 95       	ret

00001c6a <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1c6a:	84 b1       	in	r24, 0x04	; 4
    1c6c:	80 7f       	andi	r24, 0xF0	; 240
    1c6e:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1c70:	84 b1       	in	r24, 0x04	; 4
    1c72:	87 60       	ori	r24, 0x07	; 7
    1c74:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1c76:	80 e5       	ldi	r24, 0x50	; 80
    1c78:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1c7a:	8d b5       	in	r24, 0x2d	; 45
    1c7c:	81 60       	ori	r24, 0x01	; 1
    1c7e:	8d bd       	out	0x2d, r24	; 45

}
    1c80:	08 95       	ret

00001c82 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1c82:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1c84:	1d bc       	out	0x2d, r1	; 45
}
    1c86:	08 95       	ret

00001c88 <SPI_Write_Block>:
		  }
          buffer[i] = SPDR;
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    1c88:	48 2f       	mov	r20, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c8a:	66 23       	and	r22, r22
    1c8c:	e9 f0       	breq	.+58     	; 0x1cc8 <SPI_Write_Block+0x40>
    1c8e:	9c 01       	movw	r18, r24
    1c90:	f9 01       	movw	r30, r18
          SPDR = data[i];
    1c92:	80 81       	ld	r24, Z
    1c94:	8e bd       	out	0x2e, r24	; 46
    1c96:	20 91 14 03 	lds	r18, 0x0314
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1c9e:	0d b4       	in	r0, 0x2d	; 45
    1ca0:	07 fc       	sbrc	r0, 7
    1ca2:	09 c0       	rjmp	.+18     	; 0x1cb6 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1ca4:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1ca6:	37 e2       	ldi	r19, 0x27	; 39
    1ca8:	80 31       	cpi	r24, 0x10	; 16
    1caa:	93 07       	cpc	r25, r19
    1cac:	c0 f3       	brcs	.-16     	; 0x1c9e <SPI_Write_Block+0x16>
    1cae:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1cb0:	0d b4       	in	r0, 0x2d	; 45
    1cb2:	07 fe       	sbrs	r0, 7
    1cb4:	f7 cf       	rjmp	.-18     	; 0x1ca4 <SPI_Write_Block+0x1c>
    1cb6:	20 93 14 03 	sts	0x0314, r18
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1cba:	22 23       	and	r18, r18
    1cbc:	29 f4       	brne	.+10     	; 0x1cc8 <SPI_Write_Block+0x40>
			return;
    1cbe:	31 96       	adiw	r30, 0x01	; 1
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cc0:	8e 2f       	mov	r24, r30
    1cc2:	84 1b       	sub	r24, r20
    1cc4:	86 17       	cp	r24, r22
    1cc6:	28 f3       	brcs	.-54     	; 0x1c92 <SPI_Write_Block+0xa>
    1cc8:	08 95       	ret

00001cca <SPI_ReadWrite_Block>:

	SPCR = 0x00;
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	ec 01       	movw	r28, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cd0:	44 23       	and	r20, r20
    1cd2:	21 f1       	breq	.+72     	; 0x1d1c <SPI_ReadWrite_Block+0x52>
    1cd4:	a0 e0       	ldi	r26, 0x00	; 0
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
          SPDR = data[i];
    1cd8:	fe 01       	movw	r30, r28
    1cda:	ea 0f       	add	r30, r26
    1cdc:	fb 1f       	adc	r31, r27
    1cde:	80 81       	ld	r24, Z
    1ce0:	8e bd       	out	0x2e, r24	; 46
    1ce2:	80 91 14 03 	lds	r24, 0x0314
    1ce6:	21 e0       	ldi	r18, 0x01	; 1
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1cea:	0d b4       	in	r0, 0x2d	; 45
    1cec:	07 fc       	sbrc	r0, 7
    1cee:	0a c0       	rjmp	.+20     	; 0x1d04 <SPI_ReadWrite_Block+0x3a>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1cf0:	2f 5f       	subi	r18, 0xFF	; 255
    1cf2:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1cf4:	97 e2       	ldi	r25, 0x27	; 39
    1cf6:	20 31       	cpi	r18, 0x10	; 16
    1cf8:	39 07       	cpc	r19, r25
    1cfa:	b8 f3       	brcs	.-18     	; 0x1cea <SPI_ReadWrite_Block+0x20>
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1cfe:	0d b4       	in	r0, 0x2d	; 45
    1d00:	07 fe       	sbrs	r0, 7
    1d02:	f6 cf       	rjmp	.-20     	; 0x1cf0 <SPI_ReadWrite_Block+0x26>
    1d04:	80 93 14 03 	sts	0x0314, r24
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1d08:	88 23       	and	r24, r24
    1d0a:	41 f4       	brne	.+16     	; 0x1d1c <SPI_ReadWrite_Block+0x52>
			return;
		  }
          buffer[i] = SPDR;
    1d0c:	8e b5       	in	r24, 0x2e	; 46
    1d0e:	fb 01       	movw	r30, r22
    1d10:	ea 0f       	add	r30, r26
    1d12:	fb 1f       	adc	r31, r27
    1d14:	80 83       	st	Z, r24
    1d16:	11 96       	adiw	r26, 0x01	; 1
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1d18:	a4 17       	cp	r26, r20
    1d1a:	f0 f2       	brcs	.-68     	; 0x1cd8 <SPI_ReadWrite_Block+0xe>
		  if(spiCommError) {
			return;
		  }
          buffer[i] = SPDR;
    }
}
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	08 95       	ret

00001d22 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1d22:	8e bd       	out	0x2e, r24	; 46
    1d24:	20 91 14 03 	lds	r18, 0x0314
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1d2c:	0d b4       	in	r0, 0x2d	; 45
    1d2e:	07 fc       	sbrc	r0, 7
    1d30:	09 c0       	rjmp	.+18     	; 0x1d44 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1d32:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1d34:	37 e2       	ldi	r19, 0x27	; 39
    1d36:	80 31       	cpi	r24, 0x10	; 16
    1d38:	93 07       	cpc	r25, r19
    1d3a:	c0 f3       	brcs	.-16     	; 0x1d2c <SPI_Write_Byte+0xa>
    1d3c:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1d3e:	0d b4       	in	r0, 0x2d	; 45
    1d40:	07 fe       	sbrs	r0, 7
    1d42:	f7 cf       	rjmp	.-18     	; 0x1d32 <SPI_Write_Byte+0x10>
    1d44:	20 93 14 03 	sts	0x0314, r18
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    1d48:	8e b5       	in	r24, 0x2e	; 46
}
    1d4a:	08 95       	ret

00001d4c <rfEnableDebugMode>:
	}

}

void rfEnableDebugMode() {
	rfDebugMode = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	80 93 15 03 	sts	0x0315, r24
	rfDebugCounter = 3;
    1d52:	83 e0       	ldi	r24, 0x03	; 3
    1d54:	80 93 16 03 	sts	0x0316, r24
}
    1d58:	08 95       	ret

00001d5a <rfDisableDebugMode>:

void rfDisableDebugMode() {
	rfDebugMode = 0;
    1d5a:	10 92 15 03 	sts	0x0315, r1
}
    1d5e:	08 95       	ret

00001d60 <rfDebugNextPacket>:
		rfDebugCounter = 3;
	}
}

void rfDebugNextPacket() {
	rfDebugCounter = 3;
    1d60:	83 e0       	ldi	r24, 0x03	; 3
    1d62:	80 93 16 03 	sts	0x0316, r24
}
    1d66:	08 95       	ret

00001d68 <flushTxFifo>:
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1d68:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1d6a:	81 ee       	ldi	r24, 0xE1	; 225
    1d6c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d70:	28 9a       	sbi	0x05, 0	; 5

}
    1d72:	08 95       	ret

00001d74 <readPayloadWidthFromTopFifo>:
}

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    1d74:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    1d76:	80 e6       	ldi	r24, 0x60	; 96
    1d78:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    1d7c:	8f ef       	ldi	r24, 0xFF	; 255
    1d7e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    1d82:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    1d84:	08 95       	ret

00001d86 <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1d86:	1f 93       	push	r17
    1d88:	16 2f       	mov	r17, r22
    mirf_CSN_lo;
    1d8a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d8c:	8f 71       	andi	r24, 0x1F	; 31
    1d8e:	80 62       	ori	r24, 0x20	; 32
    1d90:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d94:	81 2f       	mov	r24, r17
    1d96:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d9a:	28 9a       	sbi	0x05, 0	; 5
}
    1d9c:	1f 91       	pop	r17
    1d9e:	08 95       	ret

00001da0 <flush_rx_fifo>:
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    1da0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1da2:	82 ee       	ldi	r24, 0xE2	; 226
    1da4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    1da8:	28 9a       	sbi	0x05, 0	; 5

}
    1daa:	08 95       	ret

00001dac <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1dac:	80 91 35 05 	lds	r24, 0x0535
    1db0:	88 23       	and	r24, r24
    1db2:	11 f0       	breq	.+4      	; 0x1db8 <mirf_data_ready+0xc>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	08 95       	ret
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1db8:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1dba:	8f ef       	ldi	r24, 0xFF	; 255
    1dbc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1dc0:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1dc2:	80 74       	andi	r24, 0x40	; 64

}
    1dc4:	08 95       	ret

00001dc6 <mirf_write_register>:
    mirf_CSN_hi;
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	8b 01       	movw	r16, r22
    1dce:	f4 2e       	mov	r15, r20
    mirf_CSN_lo;
    1dd0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1dd2:	8f 71       	andi	r24, 0x1F	; 31
    1dd4:	80 62       	ori	r24, 0x20	; 32
    1dd6:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1dda:	c8 01       	movw	r24, r16
    1ddc:	6f 2d       	mov	r22, r15
    1dde:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_Write_Block>
    mirf_CSN_hi;
    1de2:	28 9a       	sbi	0x05, 0	; 5
}
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	ff 90       	pop	r15
    1dea:	08 95       	ret

00001dec <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1dec:	ff 92       	push	r15
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	8b 01       	movw	r16, r22
    1df4:	f4 2e       	mov	r15, r20
    mirf_CSN_lo;
    1df6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1df8:	8f 71       	andi	r24, 0x1F	; 31
    1dfa:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1dfe:	c8 01       	movw	r24, r16
    1e00:	b8 01       	movw	r22, r16
    1e02:	4f 2d       	mov	r20, r15
    1e04:	0e 94 65 0e 	call	0x1cca	; 0x1cca <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1e08:	28 9a       	sbi	0x05, 0	; 5
}
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	ff 90       	pop	r15
    1e10:	08 95       	ret

00001e12 <writeAckPayload>:
    mirf_CSN_hi;                    // Pull up chip select
    
    mirf_CE_hi;                     // Start transmission
}

void writeAckPayload(unsigned char *data, unsigned char size) {
    1e12:	ff 92       	push	r15
    1e14:	0f 93       	push	r16
    1e16:	1f 93       	push	r17
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	08 2f       	mov	r16, r24
    1e1e:	f9 2e       	mov	r15, r25
    1e20:	16 2f       	mov	r17, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1e22:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1e24:	81 ee       	ldi	r24, 0xE1	; 225
    1e26:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    1e2a:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1e2c:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1e2e:	88 ea       	ldi	r24, 0xA8	; 168
    1e30:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1e34:	11 23       	and	r17, r17
    1e36:	59 f0       	breq	.+22     	; 0x1e4e <writeAckPayload+0x3c>
    1e38:	80 2f       	mov	r24, r16
    1e3a:	9f 2d       	mov	r25, r15
    1e3c:	9c 01       	movw	r18, r24
    1e3e:	e9 01       	movw	r28, r18
		SPI_Write_Byte(data[k]);
    1e40:	89 91       	ld	r24, Y+
    1e42:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1e46:	9e 01       	movw	r18, r28
    1e48:	20 1b       	sub	r18, r16
    1e4a:	21 17       	cp	r18, r17
    1e4c:	c8 f3       	brcs	.-14     	; 0x1e40 <writeAckPayload+0x2e>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1e4e:	28 9a       	sbi	0x05, 0	; 5


}
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	1f 91       	pop	r17
    1e56:	0f 91       	pop	r16
    1e58:	ff 90       	pop	r15
    1e5a:	08 95       	ret

00001e5c <readPayloadWidthFromPipe0>:
    mirf_CSN_hi;
	
	return pWidth;
}

uint8_t readPayloadWidthFromPipe0() {
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	0f 92       	push	r0
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    1e66:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1e68:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1e6a:	81 e1       	ldi	r24, 0x11	; 17
    1e6c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1e70:	be 01       	movw	r22, r28
    1e72:	6f 5f       	subi	r22, 0xFF	; 255
    1e74:	7f 4f       	sbci	r23, 0xFF	; 255
    1e76:	cb 01       	movw	r24, r22
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1e7e:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	0f 90       	pop	r0
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <rx_fifo_is_empty>:
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}

uint8_t rx_fifo_is_empty() {
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1e94:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1e96:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1e98:	87 e1       	ldi	r24, 0x17	; 23
    1e9a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1e9e:	be 01       	movw	r22, r28
    1ea0:	6f 5f       	subi	r22, 0xFF	; 255
    1ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	0e 94 65 0e 	call	0x1cca	; 0x1cca <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1eac:	28 9a       	sbi	0x05, 0	; 5
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
}
    1eb0:	81 70       	andi	r24, 0x01	; 1
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	8c 01       	movw	r16, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1ec0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ec2:	80 e3       	ldi	r24, 0x30	; 48
    1ec4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1ec8:	c8 01       	movw	r24, r16
    1eca:	65 e0       	ldi	r22, 0x05	; 5
    1ecc:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_Write_Block>
    mirf_CSN_hi;
    1ed0:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	08 95       	ret

00001ed8 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1ed8:	0f 93       	push	r16
    1eda:	1f 93       	push	r17
    1edc:	8c 01       	movw	r16, r24
    mirf_CE_lo;
    1ede:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1ee0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ee2:	8a e2       	ldi	r24, 0x2A	; 42
    1ee4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1ee8:	c8 01       	movw	r24, r16
    1eea:	65 e0       	ldi	r22, 0x05	; 5
    1eec:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_Write_Block>
    mirf_CSN_hi;
    1ef0:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1ef2:	2c 9a       	sbi	0x05, 4	; 5
}
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	08 95       	ret

00001efa <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1efa:	1f 93       	push	r17
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	ec 01       	movw	r28, r24
    1f02:	16 2f       	mov	r17, r22
    while (PTX) {}                  // Wait until last paket is send
    1f04:	80 91 35 05 	lds	r24, 0x0535
    1f08:	88 23       	and	r24, r24
    1f0a:	e1 f7       	brne	.-8      	; 0x1f04 <mirf_send+0xa>

    mirf_CE_lo;
    1f0c:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	80 93 35 05 	sts	0x0535, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1f14:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f16:	80 e2       	ldi	r24, 0x20	; 32
    1f18:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1f1c:	8a e4       	ldi	r24, 0x4A	; 74
    1f1e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    1f22:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1f24:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1f26:	81 ee       	ldi	r24, 0xE1	; 225
    1f28:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1f2c:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1f2e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1f30:	80 ea       	ldi	r24, 0xA0	; 160
    1f32:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1f36:	ce 01       	movw	r24, r28
    1f38:	61 2f       	mov	r22, r17
    1f3a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1f3e:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1f40:	2c 9a       	sbi	0x05, 4	; 5
}
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	1f 91       	pop	r17
    1f48:	08 95       	ret

00001f4a <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <mirf_config+0xa>
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1f58:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f5a:	80 e2       	ldi	r24, 0x20	; 32
    1f5c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1f60:	8d e0       	ldi	r24, 0x0D	; 13
    1f62:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    1f66:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1f68:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f6a:	83 e2       	ldi	r24, 0x23	; 35
    1f6c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    1f76:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    1f78:	80 91 11 03 	lds	r24, 0x0311
    1f7c:	90 91 12 03 	lds	r25, 0x0312
    1f80:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    1f82:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1f84:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1f86:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1f88:	80 e3       	ldi	r24, 0x30	; 48
    1f8a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1f8e:	8e 01       	movw	r16, r28
    1f90:	0f 5f       	subi	r16, 0xFF	; 255
    1f92:	1f 4f       	sbci	r17, 0xFF	; 255
    1f94:	c8 01       	movw	r24, r16
    1f96:	63 e0       	ldi	r22, 0x03	; 3
    1f98:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_Write_Block>
    mirf_CSN_hi;
    1f9c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1f9e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1fa0:	8a e2       	ldi	r24, 0x2A	; 42
    1fa2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1fa6:	c8 01       	movw	r24, r16
    1fa8:	63 e0       	ldi	r22, 0x03	; 3
    1faa:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_Write_Block>
    mirf_CSN_hi;
    1fae:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1fb0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1fb2:	81 e2       	ldi	r24, 0x21	; 33
    1fb4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    1fbe:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1fc0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1fc2:	82 e2       	ldi	r24, 0x22	; 34
    1fc4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    1fce:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1fd0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1fd2:	84 e2       	ldi	r24, 0x24	; 36
    1fd4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1fd8:	82 e1       	ldi	r24, 0x12	; 18
    1fda:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    1fde:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1fe0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1fe2:	85 e2       	ldi	r24, 0x25	; 37
    1fe4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1fe8:	88 e2       	ldi	r24, 0x28	; 40
    1fea:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    1fee:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1ff0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1ff2:	81 e3       	ldi	r24, 0x31	; 49
    1ff4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1ff8:	8d e0       	ldi	r24, 0x0D	; 13
    1ffa:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    1ffe:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    2000:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    2002:	80 e5       	ldi	r24, 0x50	; 80
    2004:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    2008:	83 e7       	ldi	r24, 0x73	; 115
    200a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    200e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2010:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2012:	8c e3       	ldi	r24, 0x3C	; 60
    2014:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    201e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2020:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2022:	8d e3       	ldi	r24, 0x3D	; 61
    2024:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2028:	86 e0       	ldi	r24, 0x06	; 6
    202a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    202e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2030:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2032:	80 e2       	ldi	r24, 0x20	; 32
    2034:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2038:	8f e0       	ldi	r24, 0x0F	; 15
    203a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    203e:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	08 95       	ret

00002050 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    2050:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    2052:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    2054:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <mirf_config>
}
    2058:	08 95       	ret

0000205a <mirf_get_data>:

}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	8c 01       	movw	r16, r24
    mirf_CSN_lo;                               		// Pull down chip select
    2060:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    2062:	81 e6       	ldi	r24, 0x61	; 97
    2064:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    2068:	c8 01       	movw	r24, r16
    206a:	b8 01       	movw	r22, r16
    206c:	4d e0       	ldi	r20, 0x0D	; 13
    206e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    2072:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2074:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2076:	87 e2       	ldi	r24, 0x27	; 39
    2078:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    207c:	80 e4       	ldi	r24, 0x40	; 64
    207e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    2082:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    2084:	1f 91       	pop	r17
    2086:	0f 91       	pop	r16
    2088:	08 95       	ret

0000208a <handleRFCommands>:
    SPI_Write_Byte(FLUSH_TX);
    mirf_CSN_hi;

}

void handleRFCommands() {
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	0f 92       	push	r0
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    2098:	80 91 35 05 	lds	r24, 0x0535
    209c:	88 23       	and	r24, r24
    209e:	31 f0       	breq	.+12     	; 0x20ac <handleRFCommands+0x22>

		

	}

}
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    20aa:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    20ac:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    20ae:	8f ef       	ldi	r24, 0xFF	; 255
    20b0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    20b4:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    20b6:	86 ff       	sbrs	r24, 6
    20b8:	f3 cf       	rjmp	.-26     	; 0x20a0 <handleRFCommands+0x16>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    20ba:	80 91 13 03 	lds	r24, 0x0313
    20be:	82 60       	ori	r24, 0x02	; 2
    20c0:	80 93 13 03 	sts	0x0313, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    20c4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    20c6:	87 e2       	ldi	r24, 0x27	; 39
    20c8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    20cc:	80 e7       	ldi	r24, 0x70	; 112
    20ce:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    20d2:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    20d4:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    20d6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    20d8:	87 e1       	ldi	r24, 0x17	; 23
    20da:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    20de:	be 01       	movw	r22, r28
    20e0:	6f 5f       	subi	r22, 0xFF	; 255
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	cb 01       	movw	r24, r22
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 65 0e 	call	0x1cca	; 0x1cca <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    20ec:	28 9a       	sbi	0x05, 0	; 5
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	80 fd       	sbrc	r24, 0
    20f2:	d6 cf       	rjmp	.-84     	; 0x20a0 <handleRFCommands+0x16>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    20f4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    20f6:	81 e6       	ldi	r24, 0x61	; 97
    20f8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    20fc:	8a e8       	ldi	r24, 0x8A	; 138
    20fe:	99 e0       	ldi	r25, 0x09	; 9
    2100:	bc 01       	movw	r22, r24
    2102:	4d e0       	ldi	r20, 0x0D	; 13
    2104:	0e 94 65 0e 	call	0x1cca	; 0x1cca <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    2108:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    210a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    210c:	87 e2       	ldi	r24, 0x27	; 39
    210e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2112:	80 e4       	ldi	r24, 0x40	; 64
    2114:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    2118:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    211a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    211c:	82 ee       	ldi	r24, 0xE2	; 226
    211e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    2122:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
    2124:	80 91 15 03 	lds	r24, 0x0315
    2128:	81 30       	cpi	r24, 0x01	; 1
    212a:	09 f4       	brne	.+2      	; 0x212e <handleRFCommands+0xa4>
    212c:	91 c2       	rjmp	.+1314   	; 0x2650 <__stack+0x451>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    212e:	80 91 8a 09 	lds	r24, 0x098A
    2132:	88 23       	and	r24, r24
    2134:	b9 f4       	brne	.+46     	; 0x2164 <handleRFCommands+0xda>
    2136:	80 91 8b 09 	lds	r24, 0x098B
    213a:	88 23       	and	r24, r24
    213c:	99 f4       	brne	.+38     	; 0x2164 <handleRFCommands+0xda>
    213e:	80 91 8c 09 	lds	r24, 0x098C
    2142:	88 23       	and	r24, r24
    2144:	79 f4       	brne	.+30     	; 0x2164 <handleRFCommands+0xda>
    2146:	80 91 8d 09 	lds	r24, 0x098D
    214a:	88 30       	cpi	r24, 0x08	; 8
    214c:	59 f4       	brne	.+22     	; 0x2164 <handleRFCommands+0xda>
    214e:	80 91 8e 09 	lds	r24, 0x098E
    2152:	88 23       	and	r24, r24
    2154:	39 f4       	brne	.+14     	; 0x2164 <handleRFCommands+0xda>
    2156:	80 91 8f 09 	lds	r24, 0x098F
    215a:	88 23       	and	r24, r24
    215c:	19 f4       	brne	.+6      	; 0x2164 <handleRFCommands+0xda>

				sleep(60);
    215e:	8c e3       	ldi	r24, 0x3C	; 60
    2160:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <sleep>

			}

			if(calibrateOdomFlag==0) { 
    2164:	80 91 6e 05 	lds	r24, 0x056E
    2168:	88 23       	and	r24, r24
    216a:	41 f5       	brne	.+80     	; 0x21bc <handleRFCommands+0x132>
				speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    216c:	80 91 8e 09 	lds	r24, 0x098E
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	2f 77       	andi	r18, 0x7F	; 127
    2176:	30 70       	andi	r19, 0x00	; 0
    2178:	30 93 10 03 	sts	0x0310, r19
    217c:	20 93 0f 03 	sts	0x030F, r18
				speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    2180:	60 91 8f 09 	lds	r22, 0x098F
    2184:	46 2f       	mov	r20, r22
    2186:	50 e0       	ldi	r21, 0x00	; 0
    2188:	4f 77       	andi	r20, 0x7F	; 127
    218a:	50 70       	andi	r21, 0x00	; 0
    218c:	50 93 0e 03 	sts	0x030E, r21
    2190:	40 93 0d 03 	sts	0x030D, r20
											// in the same range of the measured speed that is 0..800.
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
    2194:	87 fd       	sbrc	r24, 7
    2196:	27 c2       	rjmp	.+1102   	; 0x25e6 <__stack+0x3e7>
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
				} else {								// backward
					pwm_right_desired = -(speedr);
    2198:	88 27       	eor	r24, r24
    219a:	99 27       	eor	r25, r25
    219c:	82 1b       	sub	r24, r18
    219e:	93 0b       	sbc	r25, r19
    21a0:	90 93 f6 02 	sts	0x02F6, r25
    21a4:	80 93 f5 02 	sts	0x02F5, r24
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
    21a8:	67 fd       	sbrc	r22, 7
    21aa:	83 c3       	rjmp	.+1798   	; 0x28b2 <__stack+0x6b3>
					pwm_left_desired = speedl;
				} else {								// backward
					pwm_left_desired = -(speedl);
    21ac:	88 27       	eor	r24, r24
    21ae:	99 27       	eor	r25, r25
    21b0:	84 1b       	sub	r24, r20
    21b2:	95 0b       	sbc	r25, r21
    21b4:	90 93 f8 02 	sts	0x02F8, r25
    21b8:	80 93 f7 02 	sts	0x02F7, r24

			}


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    21bc:	20 91 8a 09 	lds	r18, 0x098A
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	30 93 73 09 	sts	0x0973, r19
    21c6:	20 93 72 09 	sts	0x0972, r18
    21ca:	e0 91 8b 09 	lds	r30, 0x098B
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	f0 93 75 09 	sts	0x0975, r31
    21d4:	e0 93 74 09 	sts	0x0974, r30
    21d8:	00 91 8c 09 	lds	r16, 0x098C
    21dc:	10 e0       	ldi	r17, 0x00	; 0
    21de:	10 93 77 09 	sts	0x0977, r17
    21e2:	00 93 76 09 	sts	0x0976, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    21e6:	92 2f       	mov	r25, r18
    21e8:	88 27       	eor	r24, r24
    21ea:	82 1b       	sub	r24, r18
    21ec:	93 0b       	sbc	r25, r19
    21ee:	64 e6       	ldi	r22, 0x64	; 100
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	0e 94 48 5b 	call	0xb690	; 0xb690 <__udivmodhi4>
    21f6:	26 2f       	mov	r18, r22
    21f8:	20 95       	com	r18
    21fa:	20 93 08 02 	sts	0x0208, r18
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    21fe:	9e 2f       	mov	r25, r30
    2200:	88 27       	eor	r24, r24
    2202:	8e 1b       	sub	r24, r30
    2204:	9f 0b       	sbc	r25, r31
    2206:	64 e6       	ldi	r22, 0x64	; 100
    2208:	70 e0       	ldi	r23, 0x00	; 0
    220a:	0e 94 48 5b 	call	0xb690	; 0xb690 <__udivmodhi4>
    220e:	60 95       	com	r22
    2210:	60 93 0a 02 	sts	0x020A, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    2214:	90 2f       	mov	r25, r16
    2216:	88 27       	eor	r24, r24
    2218:	80 1b       	sub	r24, r16
    221a:	91 0b       	sbc	r25, r17
    221c:	64 e6       	ldi	r22, 0x64	; 100
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	0e 94 48 5b 	call	0xb690	; 0xb690 <__udivmodhi4>
    2224:	60 95       	com	r22
    2226:	60 93 09 02 	sts	0x0209, r22
			updateRedLed(pwm_red);
    222a:	82 2f       	mov	r24, r18
    222c:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
			updateGreenLed(pwm_green);
    2230:	80 91 09 02 	lds	r24, 0x0209
    2234:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
			updateBlueLed(pwm_blue);
    2238:	80 91 0a 02 	lds	r24, 0x020A
    223c:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    2240:	20 91 8d 09 	lds	r18, 0x098D
    2244:	92 2f       	mov	r25, r18
    2246:	20 ff       	sbrs	r18, 0
    2248:	11 c1       	rjmp	.+546    	; 0x246c <__stack+0x26d>
				LED_IR1_LOW;
    224a:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    224c:	91 ff       	sbrs	r25, 1
    224e:	3c c1       	rjmp	.+632    	; 0x24c8 <__stack+0x2c9>
				LED_IR2_LOW;
    2250:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    2252:	92 ff       	sbrs	r25, 2
    2254:	36 c1       	rjmp	.+620    	; 0x24c2 <__stack+0x2c3>
				irEnabled = 1;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	80 93 0e 02 	sts	0x020E, r24
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    225c:	94 fd       	sbrc	r25, 4
    225e:	e6 c1       	rjmp	.+972    	; 0x262c <__stack+0x42d>
				calibrateSensors();
				resetOdometry();
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    2260:	96 ff       	sbrs	r25, 6
    2262:	2c c1       	rjmp	.+600    	; 0x24bc <__stack+0x2bd>
				obstacleAvoidanceEnabled = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	80 93 74 04 	sts	0x0474, r24
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    226a:	27 fd       	sbrc	r18, 7
    226c:	e7 c1       	rjmp	.+974    	; 0x263c <__stack+0x43d>
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
    226e:	10 92 75 04 	sts	0x0475, r1
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
    2272:	80 91 90 09 	lds	r24, 0x0990
    2276:	80 ff       	sbrs	r24, 0
    2278:	1b c1       	rjmp	.+566    	; 0x24b0 <__stack+0x2b1>
					GREEN_LED0_ON;
    227a:	80 91 0b 01 	lds	r24, 0x010B
    227e:	8e 7f       	andi	r24, 0xFE	; 254
    2280:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
    2284:	80 91 90 09 	lds	r24, 0x0990
    2288:	81 ff       	sbrs	r24, 1
    228a:	0c c1       	rjmp	.+536    	; 0x24a4 <__stack+0x2a5>
					GREEN_LED1_ON;
    228c:	80 91 0b 01 	lds	r24, 0x010B
    2290:	8d 7f       	andi	r24, 0xFD	; 253
    2292:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
    2296:	80 91 90 09 	lds	r24, 0x0990
    229a:	82 ff       	sbrs	r24, 2
    229c:	fd c0       	rjmp	.+506    	; 0x2498 <__stack+0x299>
					GREEN_LED2_ON;
    229e:	80 91 0b 01 	lds	r24, 0x010B
    22a2:	8b 7f       	andi	r24, 0xFB	; 251
    22a4:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
    22a8:	80 91 90 09 	lds	r24, 0x0990
    22ac:	83 ff       	sbrs	r24, 3
    22ae:	f2 c0       	rjmp	.+484    	; 0x2494 <__stack+0x295>
					GREEN_LED3_ON;
    22b0:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
    22b2:	80 91 90 09 	lds	r24, 0x0990
    22b6:	84 ff       	sbrs	r24, 4
    22b8:	e7 c0       	rjmp	.+462    	; 0x2488 <__stack+0x289>
					GREEN_LED4_ON;
    22ba:	80 91 0b 01 	lds	r24, 0x010B
    22be:	8f 7e       	andi	r24, 0xEF	; 239
    22c0:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
    22c4:	80 91 90 09 	lds	r24, 0x0990
    22c8:	85 ff       	sbrs	r24, 5
    22ca:	d8 c0       	rjmp	.+432    	; 0x247c <__stack+0x27d>
					GREEN_LED5_ON;
    22cc:	80 91 0b 01 	lds	r24, 0x010B
    22d0:	8f 7d       	andi	r24, 0xDF	; 223
    22d2:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
    22d6:	80 91 90 09 	lds	r24, 0x0990
    22da:	86 ff       	sbrs	r24, 6
    22dc:	c9 c0       	rjmp	.+402    	; 0x2470 <__stack+0x271>
					GREEN_LED6_ON;
    22de:	80 91 0b 01 	lds	r24, 0x010B
    22e2:	8f 7b       	andi	r24, 0xBF	; 191
    22e4:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
    22e8:	80 91 90 09 	lds	r24, 0x0990
    22ec:	87 fd       	sbrc	r24, 7
    22ee:	aa c1       	rjmp	.+852    	; 0x2644 <__stack+0x445>
					GREEN_LED7_ON;
				} else {
					GREEN_LED7_OFF;
    22f0:	80 91 0b 01 	lds	r24, 0x010B
    22f4:	80 68       	ori	r24, 0x80	; 128
    22f6:	80 93 0b 01 	sts	0x010B, r24
				}

			#endif
		
			if(currentSelector == 8) {
    22fa:	80 91 50 04 	lds	r24, 0x0450
    22fe:	88 30       	cpi	r24, 0x08	; 8
    2300:	09 f4       	brne	.+2      	; 0x2304 <__stack+0x105>
    2302:	76 c1       	rjmp	.+748    	; 0x25f0 <__stack+0x3f1>

			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
    2304:	80 91 07 02 	lds	r24, 0x0207
    2308:	80 93 c2 08 	sts	0x08C2, r24

			switch(packetId) {
    230c:	85 30       	cpi	r24, 0x05	; 5
    230e:	09 f4       	brne	.+2      	; 0x2312 <__stack+0x113>
    2310:	74 c2       	rjmp	.+1256   	; 0x27fa <__stack+0x5fb>
    2312:	86 30       	cpi	r24, 0x06	; 6
    2314:	08 f0       	brcs	.+2      	; 0x2318 <__stack+0x119>
    2316:	da c0       	rjmp	.+436    	; 0x24cc <__stack+0x2cd>
    2318:	83 30       	cpi	r24, 0x03	; 3
    231a:	09 f4       	brne	.+2      	; 0x231e <__stack+0x11f>
    231c:	f4 c1       	rjmp	.+1000   	; 0x2706 <__stack+0x507>
    231e:	84 30       	cpi	r24, 0x04	; 4
    2320:	09 f0       	breq	.+2      	; 0x2324 <__stack+0x125>
    2322:	54 c0       	rjmp	.+168    	; 0x23cc <__stack+0x1cd>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    2324:	80 91 5d 02 	lds	r24, 0x025D
    2328:	90 91 5e 02 	lds	r25, 0x025E
    232c:	80 93 c3 08 	sts	0x08C3, r24
					ackPayload[2] = proximityResult[4]>>8;
    2330:	89 2f       	mov	r24, r25
    2332:	99 0f       	add	r25, r25
    2334:	99 0b       	sbc	r25, r25
    2336:	80 93 c4 08 	sts	0x08C4, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    233a:	80 91 65 02 	lds	r24, 0x0265
    233e:	90 91 66 02 	lds	r25, 0x0266
    2342:	80 93 c5 08 	sts	0x08C5, r24
					ackPayload[4] = proximityResult[8]>>8;
    2346:	89 2f       	mov	r24, r25
    2348:	99 0f       	add	r25, r25
    234a:	99 0b       	sbc	r25, r25
    234c:	80 93 c6 08 	sts	0x08C6, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    2350:	80 91 67 02 	lds	r24, 0x0267
    2354:	90 91 68 02 	lds	r25, 0x0268
    2358:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[6] = proximityResult[9]>>8;
    235c:	89 2f       	mov	r24, r25
    235e:	99 0f       	add	r25, r25
    2360:	99 0b       	sbc	r25, r25
    2362:	80 93 c8 08 	sts	0x08C8, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    2366:	80 91 69 02 	lds	r24, 0x0269
    236a:	90 91 6a 02 	lds	r25, 0x026A
    236e:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[8] = proximityResult[10]>>8;
    2372:	89 2f       	mov	r24, r25
    2374:	99 0f       	add	r25, r25
    2376:	99 0b       	sbc	r25, r25
    2378:	80 93 ca 08 	sts	0x08CA, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    237c:	80 91 6b 02 	lds	r24, 0x026B
    2380:	90 91 6c 02 	lds	r25, 0x026C
    2384:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[10] = proximityResult[11]>>8;
    2388:	89 2f       	mov	r24, r25
    238a:	99 0f       	add	r25, r25
    238c:	99 0b       	sbc	r25, r25
    238e:	80 93 cc 08 	sts	0x08CC, r24
					ackPayload[11] = accX&0xFF;
    2392:	80 91 2c 04 	lds	r24, 0x042C
    2396:	90 91 2d 04 	lds	r25, 0x042D
    239a:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[12] = accX>>8;
    239e:	89 2f       	mov	r24, r25
    23a0:	99 0f       	add	r25, r25
    23a2:	99 0b       	sbc	r25, r25
    23a4:	80 93 ce 08 	sts	0x08CE, r24
					ackPayload[13] = accY&0xFF;
    23a8:	80 91 2e 04 	lds	r24, 0x042E
    23ac:	90 91 2f 04 	lds	r25, 0x042F
    23b0:	80 93 cf 08 	sts	0x08CF, r24
					ackPayload[14] = accY>>8;
    23b4:	89 2f       	mov	r24, r25
    23b6:	99 0f       	add	r25, r25
    23b8:	99 0b       	sbc	r25, r25
    23ba:	80 93 d0 08 	sts	0x08D0, r24
					ackPayload[15] = irCommand;
    23be:	80 91 23 04 	lds	r24, 0x0423
    23c2:	80 93 d1 08 	sts	0x08D1, r24
					packetId = 5;
    23c6:	85 e0       	ldi	r24, 0x05	; 5
    23c8:	80 93 07 02 	sts	0x0207, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    23cc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    23ce:	81 ee       	ldi	r24, 0xE1	; 225
    23d0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    mirf_CSN_hi;
    23d4:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    23d6:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    23d8:	88 ea       	ldi	r24, 0xA8	; 168
    23da:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    23de:	80 91 c2 08 	lds	r24, 0x08C2
    23e2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    23e6:	80 91 c3 08 	lds	r24, 0x08C3
    23ea:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    23ee:	80 91 c4 08 	lds	r24, 0x08C4
    23f2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    23f6:	80 91 c5 08 	lds	r24, 0x08C5
    23fa:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    23fe:	80 91 c6 08 	lds	r24, 0x08C6
    2402:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    2406:	80 91 c7 08 	lds	r24, 0x08C7
    240a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    240e:	80 91 c8 08 	lds	r24, 0x08C8
    2412:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    2416:	80 91 c9 08 	lds	r24, 0x08C9
    241a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    241e:	80 91 ca 08 	lds	r24, 0x08CA
    2422:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    2426:	80 91 cb 08 	lds	r24, 0x08CB
    242a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    242e:	80 91 cc 08 	lds	r24, 0x08CC
    2432:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    2436:	80 91 cd 08 	lds	r24, 0x08CD
    243a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    243e:	80 91 ce 08 	lds	r24, 0x08CE
    2442:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    2446:	80 91 cf 08 	lds	r24, 0x08CF
    244a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    244e:	80 91 d0 08 	lds	r24, 0x08D0
    2452:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
    2456:	80 91 d1 08 	lds	r24, 0x08D1
    245a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    245e:	28 9a       	sbi	0x05, 0	; 5

		

	}

}
    2460:	0f 90       	pop	r0
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	1f 91       	pop	r17
    2468:	0f 91       	pop	r16
    246a:	08 95       	ret


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
    246c:	44 9a       	sbi	0x08, 4	; 8
    246e:	ee ce       	rjmp	.-548    	; 0x224c <__stack+0x4d>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GREEN_LED6_ON;
				} else {
					GREEN_LED6_OFF;
    2470:	80 91 0b 01 	lds	r24, 0x010B
    2474:	80 64       	ori	r24, 0x40	; 64
    2476:	80 93 0b 01 	sts	0x010B, r24
    247a:	36 cf       	rjmp	.-404    	; 0x22e8 <__stack+0xe9>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GREEN_LED5_ON;
				} else {
					GREEN_LED5_OFF;
    247c:	80 91 0b 01 	lds	r24, 0x010B
    2480:	80 62       	ori	r24, 0x20	; 32
    2482:	80 93 0b 01 	sts	0x010B, r24
    2486:	27 cf       	rjmp	.-434    	; 0x22d6 <__stack+0xd7>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GREEN_LED4_ON;
				} else {
					GREEN_LED4_OFF;
    2488:	80 91 0b 01 	lds	r24, 0x010B
    248c:	80 61       	ori	r24, 0x10	; 16
    248e:	80 93 0b 01 	sts	0x010B, r24
    2492:	18 cf       	rjmp	.-464    	; 0x22c4 <__stack+0xc5>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GREEN_LED3_ON;
				} else {
					GREEN_LED3_OFF;
    2494:	a3 9a       	sbi	0x14, 3	; 20
    2496:	0d cf       	rjmp	.-486    	; 0x22b2 <__stack+0xb3>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GREEN_LED2_ON;
				} else {
					GREEN_LED2_OFF;
    2498:	80 91 0b 01 	lds	r24, 0x010B
    249c:	84 60       	ori	r24, 0x04	; 4
    249e:	80 93 0b 01 	sts	0x010B, r24
    24a2:	02 cf       	rjmp	.-508    	; 0x22a8 <__stack+0xa9>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GREEN_LED1_ON;
				} else {
					GREEN_LED1_OFF;
    24a4:	80 91 0b 01 	lds	r24, 0x010B
    24a8:	82 60       	ori	r24, 0x02	; 2
    24aa:	80 93 0b 01 	sts	0x010B, r24
    24ae:	f3 ce       	rjmp	.-538    	; 0x2296 <__stack+0x97>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GREEN_LED0_ON;
				} else {
					GREEN_LED0_OFF;
    24b0:	80 91 0b 01 	lds	r24, 0x010B
    24b4:	81 60       	ori	r24, 0x01	; 1
    24b6:	80 93 0b 01 	sts	0x010B, r24
    24ba:	e4 ce       	rjmp	.-568    	; 0x2284 <__stack+0x85>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    24bc:	10 92 74 04 	sts	0x0474, r1
    24c0:	d4 ce       	rjmp	.-600    	; 0x226a <__stack+0x6b>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    24c2:	10 92 0e 02 	sts	0x020E, r1
    24c6:	ca ce       	rjmp	.-620    	; 0x225c <__stack+0x5d>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    24c8:	45 9a       	sbi	0x08, 5	; 8
    24ca:	c3 ce       	rjmp	.-634    	; 0x2252 <__stack+0x53>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    24cc:	86 30       	cpi	r24, 0x06	; 6
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <__stack+0x2d3>
    24d0:	c5 c0       	rjmp	.+394    	; 0x265c <__stack+0x45d>
    24d2:	87 30       	cpi	r24, 0x07	; 7
    24d4:	09 f0       	breq	.+2      	; 0x24d8 <__stack+0x2d9>
    24d6:	7a cf       	rjmp	.-268    	; 0x23cc <__stack+0x1cd>
					packetId = 7;
					break;


				case 7:
					ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    24d8:	60 91 d1 02 	lds	r22, 0x02D1
    24dc:	70 91 d2 02 	lds	r23, 0x02D2
    24e0:	80 91 d3 02 	lds	r24, 0x02D3
    24e4:	90 91 d4 02 	lds	r25, 0x02D4
    24e8:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    24ec:	60 93 c3 08 	sts	0x08C3, r22
					ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    24f0:	27 2f       	mov	r18, r23
    24f2:	38 2f       	mov	r19, r24
    24f4:	49 2f       	mov	r20, r25
    24f6:	55 27       	eor	r21, r21
    24f8:	47 fd       	sbrc	r20, 7
    24fa:	5a 95       	dec	r21
    24fc:	20 93 c4 08 	sts	0x08C4, r18
					ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    2500:	9c 01       	movw	r18, r24
    2502:	55 27       	eor	r21, r21
    2504:	37 fd       	sbrc	r19, 7
    2506:	50 95       	com	r21
    2508:	45 2f       	mov	r20, r21
    250a:	20 93 c5 08 	sts	0x08C5, r18
					ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    250e:	69 2f       	mov	r22, r25
    2510:	99 27       	eor	r25, r25
    2512:	67 fd       	sbrc	r22, 7
    2514:	90 95       	com	r25
    2516:	79 2f       	mov	r23, r25
    2518:	89 2f       	mov	r24, r25
    251a:	60 93 c6 08 	sts	0x08C6, r22
					ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    251e:	60 91 cd 02 	lds	r22, 0x02CD
    2522:	70 91 ce 02 	lds	r23, 0x02CE
    2526:	80 91 cf 02 	lds	r24, 0x02CF
    252a:	90 91 d0 02 	lds	r25, 0x02D0
    252e:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    2532:	60 93 c7 08 	sts	0x08C7, r22
					ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    2536:	27 2f       	mov	r18, r23
    2538:	38 2f       	mov	r19, r24
    253a:	49 2f       	mov	r20, r25
    253c:	55 27       	eor	r21, r21
    253e:	47 fd       	sbrc	r20, 7
    2540:	5a 95       	dec	r21
    2542:	20 93 c8 08 	sts	0x08C8, r18
					ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    2546:	9c 01       	movw	r18, r24
    2548:	55 27       	eor	r21, r21
    254a:	37 fd       	sbrc	r19, 7
    254c:	50 95       	com	r21
    254e:	45 2f       	mov	r20, r21
    2550:	20 93 c9 08 	sts	0x08C9, r18
					ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    2554:	69 2f       	mov	r22, r25
    2556:	99 27       	eor	r25, r25
    2558:	67 fd       	sbrc	r22, 7
    255a:	90 95       	com	r25
    255c:	79 2f       	mov	r23, r25
    255e:	89 2f       	mov	r24, r25
    2560:	60 93 ca 08 	sts	0x08CA, r22
					lastTheta = theta;
    2564:	60 91 77 04 	lds	r22, 0x0477
    2568:	70 91 78 04 	lds	r23, 0x0478
    256c:	80 91 79 04 	lds	r24, 0x0479
    2570:	90 91 7a 04 	lds	r25, 0x047A
    2574:	60 93 7b 04 	sts	0x047B, r22
    2578:	70 93 7c 04 	sts	0x047C, r23
    257c:	80 93 7d 04 	sts	0x047D, r24
    2580:	90 93 7e 04 	sts	0x047E, r25
					ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e4       	ldi	r19, 0x40	; 64
    2588:	4f e0       	ldi	r20, 0x0F	; 15
    258a:	54 e4       	ldi	r21, 0x44	; 68
    258c:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    2590:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    2594:	60 93 cb 08 	sts	0x08CB, r22
					ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    2598:	67 2f       	mov	r22, r23
    259a:	77 0f       	add	r23, r23
    259c:	77 0b       	sbc	r23, r23
    259e:	60 93 cc 08 	sts	0x08CC, r22
					ackPayload[11] = ((unsigned int)xPos)&0xFF;
    25a2:	60 91 7f 04 	lds	r22, 0x047F
    25a6:	70 91 80 04 	lds	r23, 0x0480
    25aa:	80 91 81 04 	lds	r24, 0x0481
    25ae:	90 91 82 04 	lds	r25, 0x0482
    25b2:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <__fixunssfsi>
    25b6:	60 93 cd 08 	sts	0x08CD, r22
					ackPayload[12] = ((unsigned int)xPos)>>8;
    25ba:	70 93 ce 08 	sts	0x08CE, r23
					ackPayload[13] = ((unsigned int)yPos)&0xFF;
    25be:	60 91 83 04 	lds	r22, 0x0483
    25c2:	70 91 84 04 	lds	r23, 0x0484
    25c6:	80 91 85 04 	lds	r24, 0x0485
    25ca:	90 91 86 04 	lds	r25, 0x0486
    25ce:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <__fixunssfsi>
    25d2:	60 93 cf 08 	sts	0x08CF, r22
					ackPayload[14] = ((unsigned int)yPos)>>8;
    25d6:	70 93 d0 08 	sts	0x08D0, r23
					//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
					//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					ackPayload[15] = 0;
    25da:	10 92 d1 08 	sts	0x08D1, r1
					packetId = 3;
    25de:	83 e0       	ldi	r24, 0x03	; 3
    25e0:	80 93 07 02 	sts	0x0207, r24
    25e4:	f3 ce       	rjmp	.-538    	; 0x23cc <__stack+0x1cd>
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
    25e6:	30 93 f6 02 	sts	0x02F6, r19
    25ea:	20 93 f5 02 	sts	0x02F5, r18
    25ee:	dc cd       	rjmp	.-1096   	; 0x21a8 <handleRFCommands+0x11e>
				}

			#endif
		
			if(currentSelector == 8) {
				if(calibrateOdomFlag==0) {
    25f0:	80 91 6e 05 	lds	r24, 0x056E
    25f4:	88 23       	and	r24, r24
    25f6:	09 f0       	breq	.+2      	; 0x25fa <__stack+0x3fb>
    25f8:	85 ce       	rjmp	.-758    	; 0x2304 <__stack+0x105>
					if((rfData[7]&0b00000001)==0b00000001) {
    25fa:	80 91 91 09 	lds	r24, 0x0991
    25fe:	80 ff       	sbrs	r24, 0
    2600:	81 ce       	rjmp	.-766    	; 0x2304 <__stack+0x105>
						calibrateSensors();
    2602:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2606:	8f ef       	ldi	r24, 0xFF	; 255
    2608:	93 e0       	ldi	r25, 0x03	; 3
    260a:	90 93 66 02 	sts	0x0266, r25
    260e:	80 93 65 02 	sts	0x0265, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    2612:	90 93 6c 02 	sts	0x026C, r25
    2616:	80 93 6b 02 	sts	0x026B, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    261a:	86 e0       	ldi	r24, 0x06	; 6
    261c:	80 93 61 0b 	sts	0x0B61, r24
						calibVelIndex = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	80 93 bb 08 	sts	0x08BB, r24
						calibrateOdomFlag = 1;
    2626:	80 93 6e 05 	sts	0x056E, r24
    262a:	6c ce       	rjmp	.-808    	; 0x2304 <__stack+0x105>
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				calibrateSensors();
    262c:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <calibrateSensors>
				resetOdometry();
    2630:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <resetOdometry>
    2634:	20 91 8d 09 	lds	r18, 0x098D
    2638:	92 2f       	mov	r25, r18
    263a:	12 ce       	rjmp	.-988    	; 0x2260 <__stack+0x61>
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	80 93 75 04 	sts	0x0475, r24
    2642:	17 ce       	rjmp	.-978    	; 0x2272 <__stack+0x73>
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
					GREEN_LED7_ON;
    2644:	80 91 0b 01 	lds	r24, 0x010B
    2648:	8f 77       	andi	r24, 0x7F	; 127
    264a:	80 93 0b 01 	sts	0x010B, r24
    264e:	55 ce       	rjmp	.-854    	; 0x22fa <__stack+0xfb>

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {

			writeAckPayload(ackPayload, 16);
    2650:	82 ec       	ldi	r24, 0xC2	; 194
    2652:	98 e0       	ldi	r25, 0x08	; 8
    2654:	60 e1       	ldi	r22, 0x10	; 16
    2656:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <writeAckPayload>
    265a:	22 cd       	rjmp	.-1468   	; 0x20a0 <handleRFCommands+0x16>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    265c:	80 91 35 02 	lds	r24, 0x0235
    2660:	90 91 36 02 	lds	r25, 0x0236
    2664:	80 93 c3 08 	sts	0x08C3, r24
					ackPayload[2] = proximityValue[8]>>8;
    2668:	80 91 35 02 	lds	r24, 0x0235
    266c:	90 91 36 02 	lds	r25, 0x0236
    2670:	90 93 c4 08 	sts	0x08C4, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    2674:	80 91 45 02 	lds	r24, 0x0245
    2678:	90 91 46 02 	lds	r25, 0x0246
    267c:	80 93 c5 08 	sts	0x08C5, r24
					ackPayload[4] = proximityValue[16]>>8;
    2680:	80 91 45 02 	lds	r24, 0x0245
    2684:	90 91 46 02 	lds	r25, 0x0246
    2688:	90 93 c6 08 	sts	0x08C6, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    268c:	80 91 49 02 	lds	r24, 0x0249
    2690:	90 91 4a 02 	lds	r25, 0x024A
    2694:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[6] = proximityValue[18]>>8;
    2698:	80 91 49 02 	lds	r24, 0x0249
    269c:	90 91 4a 02 	lds	r25, 0x024A
    26a0:	90 93 c8 08 	sts	0x08C8, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    26a4:	80 91 4d 02 	lds	r24, 0x024D
    26a8:	90 91 4e 02 	lds	r25, 0x024E
    26ac:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[8] = proximityValue[20]>>8;
    26b0:	80 91 4d 02 	lds	r24, 0x024D
    26b4:	90 91 4e 02 	lds	r25, 0x024E
    26b8:	90 93 ca 08 	sts	0x08CA, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    26bc:	80 91 51 02 	lds	r24, 0x0251
    26c0:	90 91 52 02 	lds	r25, 0x0252
    26c4:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[10] = proximityValue[22]>>8;
    26c8:	80 91 51 02 	lds	r24, 0x0251
    26cc:	90 91 52 02 	lds	r25, 0x0252
    26d0:	90 93 cc 08 	sts	0x08CC, r25
					ackPayload[11] = accZ&0xFF;
    26d4:	80 91 30 04 	lds	r24, 0x0430
    26d8:	90 91 31 04 	lds	r25, 0x0431
    26dc:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[12] = accZ>>8;	
    26e0:	89 2f       	mov	r24, r25
    26e2:	99 0f       	add	r25, r25
    26e4:	99 0b       	sbc	r25, r25
    26e6:	80 93 ce 08 	sts	0x08CE, r24
					ackPayload[13] = batteryLevel&0xFF;
    26ea:	80 91 b9 02 	lds	r24, 0x02B9
    26ee:	90 91 ba 02 	lds	r25, 0x02BA
    26f2:	80 93 cf 08 	sts	0x08CF, r24
					ackPayload[14] = batteryLevel>>8;
    26f6:	90 93 d0 08 	sts	0x08D0, r25
					ackPayload[15] = 0;
    26fa:	10 92 d1 08 	sts	0x08D1, r1
					packetId = 7;
    26fe:	87 e0       	ldi	r24, 0x07	; 7
    2700:	80 93 07 02 	sts	0x0207, r24
    2704:	63 ce       	rjmp	.-826    	; 0x23cc <__stack+0x1cd>
			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
    2706:	80 91 55 02 	lds	r24, 0x0255
    270a:	90 91 56 02 	lds	r25, 0x0256
    270e:	80 93 c3 08 	sts	0x08C3, r24
					ackPayload[2] = proximityResult[0]>>8;
    2712:	89 2f       	mov	r24, r25
    2714:	99 0f       	add	r25, r25
    2716:	99 0b       	sbc	r25, r25
    2718:	80 93 c4 08 	sts	0x08C4, r24
					ackPayload[3] = proximityResult[1]&0xFF;
    271c:	80 91 57 02 	lds	r24, 0x0257
    2720:	90 91 58 02 	lds	r25, 0x0258
    2724:	80 93 c5 08 	sts	0x08C5, r24
					ackPayload[4] = proximityResult[1]>>8;
    2728:	89 2f       	mov	r24, r25
    272a:	99 0f       	add	r25, r25
    272c:	99 0b       	sbc	r25, r25
    272e:	80 93 c6 08 	sts	0x08C6, r24
					ackPayload[5] = proximityResult[2]&0xFF;
    2732:	80 91 59 02 	lds	r24, 0x0259
    2736:	90 91 5a 02 	lds	r25, 0x025A
    273a:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[6] = proximityResult[2]>>8;
    273e:	89 2f       	mov	r24, r25
    2740:	99 0f       	add	r25, r25
    2742:	99 0b       	sbc	r25, r25
    2744:	80 93 c8 08 	sts	0x08C8, r24
					ackPayload[7] = proximityResult[3]&0xFF;
    2748:	80 91 5b 02 	lds	r24, 0x025B
    274c:	90 91 5c 02 	lds	r25, 0x025C
    2750:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[8] = proximityResult[3]>>8;
    2754:	89 2f       	mov	r24, r25
    2756:	99 0f       	add	r25, r25
    2758:	99 0b       	sbc	r25, r25
    275a:	80 93 ca 08 	sts	0x08CA, r24
					ackPayload[9] = proximityResult[5]&0xFF;
    275e:	80 91 5f 02 	lds	r24, 0x025F
    2762:	90 91 60 02 	lds	r25, 0x0260
    2766:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[10] = proximityResult[5]>>8;
    276a:	89 2f       	mov	r24, r25
    276c:	99 0f       	add	r25, r25
    276e:	99 0b       	sbc	r25, r25
    2770:	80 93 cc 08 	sts	0x08CC, r24
					ackPayload[11] = proximityResult[6]&0xFF;
    2774:	80 91 61 02 	lds	r24, 0x0261
    2778:	90 91 62 02 	lds	r25, 0x0262
    277c:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[12] = proximityResult[6]>>8;
    2780:	89 2f       	mov	r24, r25
    2782:	99 0f       	add	r25, r25
    2784:	99 0b       	sbc	r25, r25
    2786:	80 93 ce 08 	sts	0x08CE, r24
					ackPayload[13] = proximityResult[7]&0xFF;
    278a:	80 91 63 02 	lds	r24, 0x0263
    278e:	90 91 64 02 	lds	r25, 0x0264
    2792:	80 93 cf 08 	sts	0x08CF, r24
					ackPayload[14] = proximityResult[7]>>8;
    2796:	89 2f       	mov	r24, r25
    2798:	99 0f       	add	r25, r25
    279a:	99 0b       	sbc	r25, r25
    279c:	80 93 d0 08 	sts	0x08D0, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    27a0:	20 91 03 01 	lds	r18, 0x0103
    27a4:	80 91 03 01 	lds	r24, 0x0103
    27a8:	40 91 03 01 	lds	r20, 0x0103
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	80 72       	andi	r24, 0x20	; 32
    27b0:	90 70       	andi	r25, 0x00	; 0
    27b2:	95 95       	asr	r25
    27b4:	87 95       	ror	r24
    27b6:	95 95       	asr	r25
    27b8:	87 95       	ror	r24
    27ba:	95 95       	asr	r25
    27bc:	87 95       	ror	r24
    27be:	95 95       	asr	r25
    27c0:	87 95       	ror	r24
    27c2:	95 95       	asr	r25
    27c4:	87 95       	ror	r24
    27c6:	88 0f       	add	r24, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	44 1f       	adc	r20, r20
    27cc:	44 27       	eor	r20, r20
    27ce:	44 1f       	adc	r20, r20
    27d0:	44 0f       	add	r20, r20
    27d2:	44 0f       	add	r20, r20
    27d4:	48 2b       	or	r20, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	20 71       	andi	r18, 0x10	; 16
    27da:	30 70       	andi	r19, 0x00	; 0
    27dc:	35 95       	asr	r19
    27de:	27 95       	ror	r18
    27e0:	35 95       	asr	r19
    27e2:	27 95       	ror	r18
    27e4:	35 95       	asr	r19
    27e6:	27 95       	ror	r18
    27e8:	35 95       	asr	r19
    27ea:	27 95       	ror	r18
    27ec:	42 2b       	or	r20, r18
    27ee:	40 93 d1 08 	sts	0x08D1, r20
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
    27f2:	84 e0       	ldi	r24, 0x04	; 4
    27f4:	80 93 07 02 	sts	0x0207, r24
    27f8:	e9 cd       	rjmp	.-1070   	; 0x23cc <__stack+0x1cd>
					ackPayload[15] = irCommand;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    27fa:	80 91 25 02 	lds	r24, 0x0225
    27fe:	90 91 26 02 	lds	r25, 0x0226
    2802:	80 93 c3 08 	sts	0x08C3, r24
					ackPayload[2] = proximityValue[0]>>8;
    2806:	80 91 25 02 	lds	r24, 0x0225
    280a:	90 91 26 02 	lds	r25, 0x0226
    280e:	90 93 c4 08 	sts	0x08C4, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    2812:	80 91 29 02 	lds	r24, 0x0229
    2816:	90 91 2a 02 	lds	r25, 0x022A
    281a:	80 93 c5 08 	sts	0x08C5, r24
					ackPayload[4] = proximityValue[2]>>8;
    281e:	80 91 29 02 	lds	r24, 0x0229
    2822:	90 91 2a 02 	lds	r25, 0x022A
    2826:	90 93 c6 08 	sts	0x08C6, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    282a:	80 91 2d 02 	lds	r24, 0x022D
    282e:	90 91 2e 02 	lds	r25, 0x022E
    2832:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[6] = proximityValue[4]>>8;
    2836:	80 91 2d 02 	lds	r24, 0x022D
    283a:	90 91 2e 02 	lds	r25, 0x022E
    283e:	90 93 c8 08 	sts	0x08C8, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    2842:	80 91 31 02 	lds	r24, 0x0231
    2846:	90 91 32 02 	lds	r25, 0x0232
    284a:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[8] = proximityValue[6]>>8;
    284e:	80 91 31 02 	lds	r24, 0x0231
    2852:	90 91 32 02 	lds	r25, 0x0232
    2856:	90 93 ca 08 	sts	0x08CA, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    285a:	80 91 39 02 	lds	r24, 0x0239
    285e:	90 91 3a 02 	lds	r25, 0x023A
    2862:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[10] = proximityValue[10]>>8;
    2866:	80 91 39 02 	lds	r24, 0x0239
    286a:	90 91 3a 02 	lds	r25, 0x023A
    286e:	90 93 cc 08 	sts	0x08CC, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    2872:	80 91 3d 02 	lds	r24, 0x023D
    2876:	90 91 3e 02 	lds	r25, 0x023E
    287a:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[12] = proximityValue[12]>>8;
    287e:	80 91 3d 02 	lds	r24, 0x023D
    2882:	90 91 3e 02 	lds	r25, 0x023E
    2886:	90 93 ce 08 	sts	0x08CE, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    288a:	80 91 41 02 	lds	r24, 0x0241
    288e:	90 91 42 02 	lds	r25, 0x0242
    2892:	80 93 cf 08 	sts	0x08CF, r24
					ackPayload[14] = proximityValue[14]>>8;
    2896:	80 91 41 02 	lds	r24, 0x0241
    289a:	90 91 42 02 	lds	r25, 0x0242
    289e:	90 93 d0 08 	sts	0x08D0, r25
					ackPayload[15] = currentSelector;
    28a2:	80 91 50 04 	lds	r24, 0x0450
    28a6:	80 93 d1 08 	sts	0x08D1, r24
					packetId = 6;
    28aa:	86 e0       	ldi	r24, 0x06	; 6
    28ac:	80 93 07 02 	sts	0x0207, r24
    28b0:	8d cd       	rjmp	.-1254   	; 0x23cc <__stack+0x1cd>
				} else {								// backward
					pwm_right_desired = -(speedr);
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
					pwm_left_desired = speedl;
    28b2:	50 93 f8 02 	sts	0x02F8, r21
    28b6:	40 93 f7 02 	sts	0x02F7, r20
    28ba:	80 cc       	rjmp	.-1792   	; 0x21bc <handleRFCommands+0x132>

000028bc <rfDebugSendData>:
void rfDisableDebugMode() {
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
    28bc:	90 91 16 03 	lds	r25, 0x0316
    28c0:	90 93 c2 08 	sts	0x08C2, r25
	while(rfData[0] != rfDebugCounter) {
    28c4:	80 91 8a 09 	lds	r24, 0x098A
    28c8:	98 17       	cp	r25, r24
    28ca:	41 f0       	breq	.+16     	; 0x28dc <rfDebugSendData+0x20>
		handleRFCommands();
    28cc:	0e 94 45 10 	call	0x208a	; 0x208a <handleRFCommands>
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
	while(rfData[0] != rfDebugCounter) {
    28d0:	90 91 8a 09 	lds	r25, 0x098A
    28d4:	80 91 16 03 	lds	r24, 0x0316
    28d8:	98 17       	cp	r25, r24
    28da:	c1 f7       	brne	.-16     	; 0x28cc <rfDebugSendData+0x10>
		handleRFCommands();
	}
	ackPayload[0] = 0x00;
    28dc:	10 92 c2 08 	sts	0x08C2, r1
	if(rfDebugCounter < 255) {
    28e0:	9f 3f       	cpi	r25, 0xFF	; 255
    28e2:	21 f0       	breq	.+8      	; 0x28ec <rfDebugSendData+0x30>
		rfDebugCounter++;
    28e4:	9f 5f       	subi	r25, 0xFF	; 255
    28e6:	90 93 16 03 	sts	0x0316, r25
    28ea:	08 95       	ret
	} else {
		rfDebugCounter = 3;
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	80 93 16 03 	sts	0x0316, r24
    28f2:	08 95       	ret

000028f4 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29

	PCICR = 0;
    28f8:	e8 e6       	ldi	r30, 0x68	; 104
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	10 82       	st	Z, r1
	PCMSK1 = 0;
    28fe:	ac e6       	ldi	r26, 0x6C	; 108
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	1c 92       	st	X, r1
	TCCR2A = 0;
    2904:	20 eb       	ldi	r18, 0xB0	; 176
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	e9 01       	movw	r28, r18
    290a:	18 82       	st	Y, r1
	TCCR2B = 0;
    290c:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    2910:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    2914:	80 81       	ld	r24, Z
    2916:	82 60       	ori	r24, 0x02	; 2
    2918:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    291a:	8c 91       	ld	r24, X
    291c:	80 68       	ori	r24, 0x80	; 128
    291e:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    2920:	88 81       	ld	r24, Y
    2922:	82 60       	ori	r24, 0x02	; 2
    2924:	88 83       	st	Y, r24

}
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	08 95       	ret

0000292c <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    292c:	1f 92       	push	r1
    292e:	0f 92       	push	r0
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	0f 92       	push	r0
    2934:	11 24       	eor	r1, r1
    2936:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    2938:	80 91 0e 02 	lds	r24, 0x020E
    293c:	88 23       	and	r24, r24
    293e:	21 f1       	breq	.+72     	; 0x2988 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    2940:	80 91 03 01 	lds	r24, 0x0103
    2944:	86 fd       	sbrc	r24, 6
    2946:	20 c0       	rjmp	.+64     	; 0x2988 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    2948:	80 91 68 00 	lds	r24, 0x0068
    294c:	8d 7f       	andi	r24, 0xFD	; 253
    294e:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    2952:	80 91 6c 00 	lds	r24, 0x006C
    2956:	8f 77       	andi	r24, 0x7F	; 127
    2958:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	80 93 0f 02 	sts	0x020F, r24
			OCR2A = 13;									// output compare register
    2962:	8d e0       	ldi	r24, 0x0D	; 13
    2964:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2968:	80 91 b1 00 	lds	r24, 0x00B1
    296c:	86 60       	ori	r24, 0x06	; 6
    296e:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    2972:	80 91 70 00 	lds	r24, 0x0070
    2976:	82 60       	ori	r24, 0x02	; 2
    2978:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    297c:	10 92 1c 02 	sts	0x021C, r1
    2980:	10 92 1d 02 	sts	0x021D, r1
    2984:	10 92 1e 02 	sts	0x021E, r1

		}

	}
	
}
    2988:	8f 91       	pop	r24
    298a:	0f 90       	pop	r0
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	0f 90       	pop	r0
    2990:	1f 90       	pop	r1
    2992:	18 95       	reti

00002994 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    2994:	1f 92       	push	r1
    2996:	0f 92       	push	r0
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	0f 92       	push	r0
    299c:	11 24       	eor	r1, r1
    299e:	2f 93       	push	r18
    29a0:	3f 93       	push	r19
    29a2:	4f 93       	push	r20
    29a4:	5f 93       	push	r21
    29a6:	8f 93       	push	r24
    29a8:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    29aa:	80 91 b1 00 	lds	r24, 0x00B1
    29ae:	88 7f       	andi	r24, 0xF8	; 248
    29b0:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    29b4:	80 91 0f 02 	lds	r24, 0x020F
    29b8:	88 23       	and	r24, r24
    29ba:	59 f1       	breq	.+86     	; 0x2a12 <__vector_13+0x7e>

			if(REMOTE) {					// if high it is a glitch
    29bc:	80 91 03 01 	lds	r24, 0x0103
    29c0:	86 fd       	sbrc	r24, 6
    29c2:	69 c0       	rjmp	.+210    	; 0x2a96 <__vector_13+0x102>
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    29c4:	10 92 0f 02 	sts	0x020F, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    29c8:	83 e3       	ldi	r24, 0x33	; 51
    29ca:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    29ce:	80 91 b1 00 	lds	r24, 0x00B1
    29d2:	86 60       	ori	r24, 0x06	; 6
    29d4:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    29d8:	80 91 70 00 	lds	r24, 0x0070
    29dc:	82 60       	ori	r24, 0x02	; 2
    29de:	80 93 70 00 	sts	0x0070, r24

			} 

		}
	
		if(i!=-1) {
    29e2:	80 91 01 02 	lds	r24, 0x0201
    29e6:	90 91 02 02 	lds	r25, 0x0202
    29ea:	2f ef       	ldi	r18, 0xFF	; 255
    29ec:	8f 3f       	cpi	r24, 0xFF	; 255
    29ee:	92 07       	cpc	r25, r18
    29f0:	29 f0       	breq	.+10     	; 0x29fc <__vector_13+0x68>

			i++;
    29f2:	01 96       	adiw	r24, 0x01	; 1
    29f4:	90 93 02 02 	sts	0x0202, r25
    29f8:	80 93 01 02 	sts	0x0201, r24

		}

}
    29fc:	9f 91       	pop	r25
    29fe:	8f 91       	pop	r24
    2a00:	5f 91       	pop	r21
    2a02:	4f 91       	pop	r20
    2a04:	3f 91       	pop	r19
    2a06:	2f 91       	pop	r18
    2a08:	0f 90       	pop	r0
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	0f 90       	pop	r0
    2a0e:	1f 90       	pop	r1
    2a10:	18 95       	reti
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    2a12:	40 91 01 02 	lds	r20, 0x0201
    2a16:	50 91 02 02 	lds	r21, 0x0202
    2a1a:	8f ef       	ldi	r24, 0xFF	; 255
    2a1c:	4f 3f       	cpi	r20, 0xFF	; 255
    2a1e:	58 07       	cpc	r21, r24
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <__vector_13+0x90>
    2a22:	4a c0       	rjmp	.+148    	; 0x2ab8 <__vector_13+0x124>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    2a24:	41 30       	cpi	r20, 0x01	; 1
    2a26:	51 05       	cpc	r21, r1
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <__vector_13+0x98>
    2a2a:	80 c0       	rjmp	.+256    	; 0x2b2c <__vector_13+0x198>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2a2c:	ca 01       	movw	r24, r20
    2a2e:	02 97       	sbiw	r24, 0x02	; 2
    2a30:	05 97       	sbiw	r24, 0x05	; 5
    2a32:	08 f4       	brcc	.+2      	; 0x2a36 <__vector_13+0xa2>
    2a34:	50 c0       	rjmp	.+160    	; 0x2ad6 <__vector_13+0x142>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    2a36:	ca 01       	movw	r24, r20
    2a38:	07 97       	sbiw	r24, 0x07	; 7
    2a3a:	06 97       	sbiw	r24, 0x06	; 6
    2a3c:	08 f0       	brcs	.+2      	; 0x2a40 <__vector_13+0xac>
    2a3e:	ab c0       	rjmp	.+342    	; 0x2b96 <__vector_13+0x202>

				OCR2A = 54;
    2a40:	86 e3       	ldi	r24, 0x36	; 54
    2a42:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2a46:	80 91 b1 00 	lds	r24, 0x00B1
    2a4a:	86 60       	ori	r24, 0x06	; 6
    2a4c:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    2a50:	80 91 70 00 	lds	r24, 0x0070
    2a54:	82 60       	ori	r24, 0x02	; 2
    2a56:	80 93 70 00 	sts	0x0070, r24

				unsigned char temp = REMOTE;
    2a5a:	20 91 03 01 	lds	r18, 0x0103
				temp <<= 6+6-i;
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	20 74       	andi	r18, 0x40	; 64
    2a62:	30 70       	andi	r19, 0x00	; 0
    2a64:	00 24       	eor	r0, r0
    2a66:	22 0f       	add	r18, r18
    2a68:	33 1f       	adc	r19, r19
    2a6a:	00 1c       	adc	r0, r0
    2a6c:	22 0f       	add	r18, r18
    2a6e:	33 1f       	adc	r19, r19
    2a70:	00 1c       	adc	r0, r0
    2a72:	23 2f       	mov	r18, r19
    2a74:	30 2d       	mov	r19, r0
    2a76:	8c e0       	ldi	r24, 0x0C	; 12
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	84 1b       	sub	r24, r20
    2a7c:	95 0b       	sbc	r25, r21
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <__vector_13+0xf0>
    2a80:	22 0f       	add	r18, r18
    2a82:	33 1f       	adc	r19, r19
    2a84:	8a 95       	dec	r24
    2a86:	e2 f7       	brpl	.-8      	; 0x2a80 <__vector_13+0xec>
				data_temp += temp;
    2a88:	80 91 1c 02 	lds	r24, 0x021C
    2a8c:	82 0f       	add	r24, r18
    2a8e:	80 93 1c 02 	sts	0x021C, r24

			} 

		}
	
		if(i!=-1) {
    2a92:	ca 01       	movw	r24, r20
    2a94:	ae cf       	rjmp	.-164    	; 0x29f2 <__vector_13+0x5e>
	
		if(checkGlitch) {					// if checking this is a glitch

			if(REMOTE) {					// if high it is a glitch

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2a96:	80 91 68 00 	lds	r24, 0x0068
    2a9a:	82 60       	ori	r24, 0x02	; 2
    2a9c:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2aa0:	80 91 6c 00 	lds	r24, 0x006C
    2aa4:	80 68       	ori	r24, 0x80	; 128
    2aa6:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    2aaa:	8f ef       	ldi	r24, 0xFF	; 255
    2aac:	9f ef       	ldi	r25, 0xFF	; 255
    2aae:	90 93 02 02 	sts	0x0202, r25
    2ab2:	80 93 01 02 	sts	0x0201, r24
    2ab6:	a2 cf       	rjmp	.-188    	; 0x29fc <__vector_13+0x68>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    2ab8:	80 91 03 01 	lds	r24, 0x0103
    2abc:	86 ff       	sbrs	r24, 6
    2abe:	54 c0       	rjmp	.+168    	; 0x2b68 <__vector_13+0x1d4>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2ac0:	80 91 68 00 	lds	r24, 0x0068
    2ac4:	82 60       	ori	r24, 0x02	; 2
    2ac6:	80 93 68 00 	sts	0x0068, r24
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2aca:	80 91 6c 00 	lds	r24, 0x006C
    2ace:	80 68       	ori	r24, 0x80	; 128
    2ad0:	80 93 6c 00 	sts	0x006C, r24
    2ad4:	93 cf       	rjmp	.-218    	; 0x29fc <__vector_13+0x68>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    2ad6:	86 e3       	ldi	r24, 0x36	; 54
    2ad8:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2adc:	80 91 b1 00 	lds	r24, 0x00B1
    2ae0:	86 60       	ori	r24, 0x06	; 6
    2ae2:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    2ae6:	80 91 70 00 	lds	r24, 0x0070
    2aea:	82 60       	ori	r24, 0x02	; 2
    2aec:	80 93 70 00 	sts	0x0070, r24

				unsigned char temp = REMOTE;
    2af0:	20 91 03 01 	lds	r18, 0x0103
				temp <<= 6-i;
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	20 74       	andi	r18, 0x40	; 64
    2af8:	30 70       	andi	r19, 0x00	; 0
    2afa:	00 24       	eor	r0, r0
    2afc:	22 0f       	add	r18, r18
    2afe:	33 1f       	adc	r19, r19
    2b00:	00 1c       	adc	r0, r0
    2b02:	22 0f       	add	r18, r18
    2b04:	33 1f       	adc	r19, r19
    2b06:	00 1c       	adc	r0, r0
    2b08:	23 2f       	mov	r18, r19
    2b0a:	30 2d       	mov	r19, r0
    2b0c:	86 e0       	ldi	r24, 0x06	; 6
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	84 1b       	sub	r24, r20
    2b12:	95 0b       	sbc	r25, r21
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <__vector_13+0x186>
    2b16:	22 0f       	add	r18, r18
    2b18:	33 1f       	adc	r19, r19
    2b1a:	8a 95       	dec	r24
    2b1c:	e2 f7       	brpl	.-8      	; 0x2b16 <__vector_13+0x182>
				address_temp += temp;
    2b1e:	80 91 1d 02 	lds	r24, 0x021D
    2b22:	82 0f       	add	r24, r18
    2b24:	80 93 1d 02 	sts	0x021D, r24

			} 

		}
	
		if(i!=-1) {
    2b28:	ca 01       	movw	r24, r20
    2b2a:	63 cf       	rjmp	.-314    	; 0x29f2 <__vector_13+0x5e>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2b2c:	80 91 03 01 	lds	r24, 0x0103
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	80 74       	andi	r24, 0x40	; 64
    2b34:	90 70       	andi	r25, 0x00	; 0
    2b36:	08 2e       	mov	r0, r24
    2b38:	89 2f       	mov	r24, r25
    2b3a:	00 0c       	add	r0, r0
    2b3c:	88 1f       	adc	r24, r24
    2b3e:	99 0b       	sbc	r25, r25
    2b40:	00 0c       	add	r0, r0
    2b42:	88 1f       	adc	r24, r24
    2b44:	99 1f       	adc	r25, r25
    2b46:	80 93 1e 02 	sts	0x021E, r24
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    2b4a:	86 e3       	ldi	r24, 0x36	; 54
    2b4c:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2b50:	80 91 b1 00 	lds	r24, 0x00B1
    2b54:	86 60       	ori	r24, 0x06	; 6
    2b56:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2b5a:	80 91 70 00 	lds	r24, 0x0070
    2b5e:	82 60       	ori	r24, 0x02	; 2
    2b60:	80 93 70 00 	sts	0x0070, r24

			} 

		}
	
		if(i!=-1) {
    2b64:	ca 01       	movw	r24, r20
    2b66:	45 cf       	rjmp	.-374    	; 0x29f2 <__vector_13+0x5e>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    2b68:	8c e1       	ldi	r24, 0x1C	; 28
    2b6a:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2b6e:	80 91 b1 00 	lds	r24, 0x00B1
    2b72:	86 60       	ori	r24, 0x06	; 6
    2b74:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2b78:	80 91 70 00 	lds	r24, 0x0070
    2b7c:	82 60       	ori	r24, 0x02	; 2
    2b7e:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    2b82:	10 92 1c 02 	sts	0x021C, r1
    2b86:	10 92 1d 02 	sts	0x021D, r1
    2b8a:	10 92 1e 02 	sts	0x021E, r1
    2b8e:	40 e0       	ldi	r20, 0x00	; 0
    2b90:	50 e0       	ldi	r21, 0x00	; 0

			} 

		}
	
		if(i!=-1) {
    2b92:	ca 01       	movw	r24, r20
    2b94:	2e cf       	rjmp	.-420    	; 0x29f2 <__vector_13+0x5e>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    2b96:	4d 30       	cpi	r20, 0x0D	; 13
    2b98:	51 05       	cpc	r21, r1
    2b9a:	09 f0       	breq	.+2      	; 0x2b9e <__vector_13+0x20a>
    2b9c:	7a cf       	rjmp	.-268    	; 0x2a92 <__vector_13+0xfe>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    2b9e:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    2ba2:	80 91 68 00 	lds	r24, 0x0068
    2ba6:	82 60       	ori	r24, 0x02	; 2
    2ba8:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    2bac:	80 91 6c 00 	lds	r24, 0x006C
    2bb0:	80 68       	ori	r24, 0x80	; 128
    2bb2:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    2bb6:	8f ef       	ldi	r24, 0xFF	; 255
    2bb8:	9f ef       	ldi	r25, 0xFF	; 255
    2bba:	90 93 02 02 	sts	0x0202, r25
    2bbe:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    2bc2:	80 91 1e 02 	lds	r24, 0x021E
    2bc6:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    2bca:	80 91 1d 02 	lds	r24, 0x021D
    2bce:	80 93 1a 02 	sts	0x021A, r24
				data_ir = data_temp;
    2bd2:	80 91 1c 02 	lds	r24, 0x021C
    2bd6:	80 93 1b 02 	sts	0x021B, r24
				command_received=1;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	80 93 24 04 	sts	0x0424, r24
    2be0:	0d cf       	rjmp	.-486    	; 0x29fc <__vector_13+0x68>

00002be2 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2be2:	80 91 00 02 	lds	r24, 0x0200
    2be6:	08 95       	ret

00002be8 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    2be8:	80 91 1a 02 	lds	r24, 0x021A
    2bec:	08 95       	ret

00002bee <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    2bee:	80 91 1b 02 	lds	r24, 0x021B
    2bf2:	08 95       	ret

00002bf4 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    2bf4:	80 91 0e 02 	lds	r24, 0x020E
    2bf8:	88 23       	and	r24, r24
    2bfa:	21 f0       	breq	.+8      	; 0x2c04 <handleIRRemoteCommands+0x10>

		if(command_received) {
    2bfc:	80 91 24 04 	lds	r24, 0x0424
    2c00:	88 23       	and	r24, r24
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <handleIRRemoteCommands+0x12>
    2c04:	08 95       	ret

			command_received = 0;
    2c06:	10 92 24 04 	sts	0x0424, r1
			
			if((getTime100MicroSec() - lastCmdTime) < PAUSE_200_MSEC) {
    2c0a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    2c0e:	20 91 27 04 	lds	r18, 0x0427
    2c12:	30 91 28 04 	lds	r19, 0x0428
    2c16:	40 91 29 04 	lds	r20, 0x0429
    2c1a:	50 91 2a 04 	lds	r21, 0x042A
    2c1e:	62 1b       	sub	r22, r18
    2c20:	73 0b       	sbc	r23, r19
    2c22:	84 0b       	sbc	r24, r20
    2c24:	95 0b       	sbc	r25, r21
    2c26:	63 58       	subi	r22, 0x83	; 131
    2c28:	77 40       	sbci	r23, 0x07	; 7
    2c2a:	80 40       	sbci	r24, 0x00	; 0
    2c2c:	90 40       	sbci	r25, 0x00	; 0
    2c2e:	50 f3       	brcs	.-44     	; 0x2c04 <handleIRRemoteCommands+0x10>
				return;
			}

			lastCmdTime = getTime100MicroSec();
    2c30:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    2c34:	60 93 27 04 	sts	0x0427, r22
    2c38:	70 93 28 04 	sts	0x0428, r23
    2c3c:	80 93 29 04 	sts	0x0429, r24
    2c40:	90 93 2a 04 	sts	0x042A, r25
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    2c44:	80 91 1b 02 	lds	r24, 0x021B
				return;
			}

			lastCmdTime = getTime100MicroSec();

            irCommand = ir_remote_get_data();
    2c48:	80 93 23 04 	sts	0x0423, r24

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    2c4c:	e8 2f       	mov	r30, r24
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	e5 33       	cpi	r30, 0x35	; 53
    2c52:	f1 05       	cpc	r31, r1
    2c54:	c0 f0       	brcs	.+48     	; 0x2c86 <handleIRRemoteCommands+0x92>
    2c56:	40 91 f5 02 	lds	r20, 0x02F5
    2c5a:	50 91 f6 02 	lds	r21, 0x02F6
    2c5e:	20 91 f7 02 	lds	r18, 0x02F7
    2c62:	30 91 f8 02 	lds	r19, 0x02F8
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2c66:	ca 01       	movw	r24, r20
    2c68:	64 2f       	mov	r22, r20
    2c6a:	89 2f       	mov	r24, r25
    2c6c:	57 fd       	sbrc	r21, 7
    2c6e:	b7 c1       	rjmp	.+878    	; 0x2fde <handleIRRemoteCommands+0x3ea>
				speedr = pwm_right_desired;
    2c70:	60 93 0f 03 	sts	0x030F, r22
    2c74:	80 93 10 03 	sts	0x0310, r24
			} else {
				speedr = (-pwm_right_desired);
			}
			if(pwm_left_desired >= 0) {
    2c78:	37 fd       	sbrc	r19, 7
    2c7a:	a8 c1       	rjmp	.+848    	; 0x2fcc <handleIRRemoteCommands+0x3d8>
				speedl = pwm_left_desired;
    2c7c:	30 93 0e 03 	sts	0x030E, r19
    2c80:	20 93 0d 03 	sts	0x030D, r18
    2c84:	08 95       	ret

            irCommand = ir_remote_get_data();

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    2c86:	ee 58       	subi	r30, 0x8E	; 142
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	ee 0f       	add	r30, r30
    2c8c:	ff 1f       	adc	r31, r31
    2c8e:	05 90       	lpm	r0, Z+
    2c90:	f4 91       	lpm	r31, Z+
    2c92:	e0 2d       	mov	r30, r0
    2c94:	19 94       	eijmp
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    2c96:	80 91 26 04 	lds	r24, 0x0426
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	01 96       	adiw	r24, 0x01	; 1
    2c9e:	83 70       	andi	r24, 0x03	; 3
    2ca0:	90 70       	andi	r25, 0x00	; 0
    2ca2:	80 93 26 04 	sts	0x0426, r24
					switch(behaviorState) {
    2ca6:	81 30       	cpi	r24, 0x01	; 1
    2ca8:	09 f4       	brne	.+2      	; 0x2cac <handleIRRemoteCommands+0xb8>
    2caa:	ca c1       	rjmp	.+916    	; 0x3040 <handleIRRemoteCommands+0x44c>
    2cac:	81 30       	cpi	r24, 0x01	; 1
    2cae:	08 f0       	brcs	.+2      	; 0x2cb2 <handleIRRemoteCommands+0xbe>
    2cb0:	bb c1       	rjmp	.+886    	; 0x3028 <handleIRRemoteCommands+0x434>
						case 0:
							obstacleAvoidanceEnabled = 0;
    2cb2:	10 92 74 04 	sts	0x0474, r1
							cliffAvoidanceEnabled = 0;
    2cb6:	10 92 75 04 	sts	0x0475, r1
    2cba:	40 91 f5 02 	lds	r20, 0x02F5
    2cbe:	50 91 f6 02 	lds	r21, 0x02F6
    2cc2:	20 91 f7 02 	lds	r18, 0x02F7
    2cc6:	30 91 f8 02 	lds	r19, 0x02F8
    2cca:	cd cf       	rjmp	.-102    	; 0x2c66 <handleIRRemoteCommands+0x72>
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    2ccc:	10 92 74 04 	sts	0x0474, r1
							cliffAvoidanceEnabled = 1;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	80 93 75 04 	sts	0x0475, r24
    2cd6:	40 91 f5 02 	lds	r20, 0x02F5
    2cda:	50 91 f6 02 	lds	r21, 0x02F6
    2cde:	20 91 f7 02 	lds	r18, 0x02F7
    2ce2:	30 91 f8 02 	lds	r19, 0x02F8
    2ce6:	bf cf       	rjmp	.-130    	; 0x2c66 <handleIRRemoteCommands+0x72>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    2ce8:	10 92 74 04 	sts	0x0474, r1
    2cec:	40 91 f5 02 	lds	r20, 0x02F5
    2cf0:	50 91 f6 02 	lds	r21, 0x02F6
    2cf4:	20 91 f7 02 	lds	r18, 0x02F7
    2cf8:	30 91 f8 02 	lds	r19, 0x02F8
    2cfc:	b4 cf       	rjmp	.-152    	; 0x2c66 <handleIRRemoteCommands+0x72>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	80 93 74 04 	sts	0x0474, r24
    2d04:	40 91 f5 02 	lds	r20, 0x02F5
    2d08:	50 91 f6 02 	lds	r21, 0x02F6
    2d0c:	20 91 f7 02 	lds	r18, 0x02F7
    2d10:	30 91 f8 02 	lds	r19, 0x02F8
    2d14:	a8 cf       	rjmp	.-176    	; 0x2c66 <handleIRRemoteCommands+0x72>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    2d16:	20 91 f7 02 	lds	r18, 0x02F7
    2d1a:	30 91 f8 02 	lds	r19, 0x02F8
    2d1e:	22 50       	subi	r18, 0x02	; 2
    2d20:	30 40       	sbci	r19, 0x00	; 0
    2d22:	30 93 f8 02 	sts	0x02F8, r19
    2d26:	20 93 f7 02 	sts	0x02F7, r18
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
    2d2a:	8f ef       	ldi	r24, 0xFF	; 255
    2d2c:	21 38       	cpi	r18, 0x81	; 129
    2d2e:	38 07       	cpc	r19, r24
    2d30:	0c f0       	brlt	.+2      	; 0x2d34 <handleIRRemoteCommands+0x140>
    2d32:	5a c1       	rjmp	.+692    	; 0x2fe8 <handleIRRemoteCommands+0x3f4>
    2d34:	81 e8       	ldi	r24, 0x81	; 129
    2d36:	9f ef       	ldi	r25, 0xFF	; 255
    2d38:	90 93 f8 02 	sts	0x02F8, r25
    2d3c:	80 93 f7 02 	sts	0x02F7, r24
    2d40:	40 91 f5 02 	lds	r20, 0x02F5
    2d44:	50 91 f6 02 	lds	r21, 0x02F6
    2d48:	21 e8       	ldi	r18, 0x81	; 129
    2d4a:	3f ef       	ldi	r19, 0xFF	; 255
    2d4c:	8c cf       	rjmp	.-232    	; 0x2c66 <handleIRRemoteCommands+0x72>
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    2d4e:	40 91 f5 02 	lds	r20, 0x02F5
    2d52:	50 91 f6 02 	lds	r21, 0x02F6
    2d56:	80 91 f3 02 	lds	r24, 0x02F3
    2d5a:	90 91 f4 02 	lds	r25, 0x02F4
    2d5e:	48 17       	cp	r20, r24
    2d60:	59 07       	cpc	r21, r25
    2d62:	0c f0       	brlt	.+2      	; 0x2d66 <handleIRRemoteCommands+0x172>
    2d64:	5b c1       	rjmp	.+694    	; 0x301c <handleIRRemoteCommands+0x428>
    2d66:	9a 01       	movw	r18, r20
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired -= STEP_MOTORS;
    2d68:	42 50       	subi	r20, 0x02	; 2
    2d6a:	50 40       	sbci	r21, 0x00	; 0
    2d6c:	50 93 f6 02 	sts	0x02F6, r21
    2d70:	40 93 f5 02 	sts	0x02F5, r20
					pwm_left_desired -= STEP_MOTORS;
    2d74:	22 50       	subi	r18, 0x02	; 2
    2d76:	30 40       	sbci	r19, 0x00	; 0
    2d78:	30 93 f8 02 	sts	0x02F8, r19
    2d7c:	20 93 f7 02 	sts	0x02F7, r18
	                if (pwm_right_desired < -127) pwm_right_desired = -127;
    2d80:	8f ef       	ldi	r24, 0xFF	; 255
    2d82:	41 38       	cpi	r20, 0x81	; 129
    2d84:	58 07       	cpc	r21, r24
    2d86:	44 f4       	brge	.+16     	; 0x2d98 <handleIRRemoteCommands+0x1a4>
    2d88:	81 e8       	ldi	r24, 0x81	; 129
    2d8a:	9f ef       	ldi	r25, 0xFF	; 255
    2d8c:	90 93 f6 02 	sts	0x02F6, r25
    2d90:	80 93 f5 02 	sts	0x02F5, r24
    2d94:	41 e8       	ldi	r20, 0x81	; 129
    2d96:	5f ef       	ldi	r21, 0xFF	; 255
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
    2d98:	8f ef       	ldi	r24, 0xFF	; 255
    2d9a:	21 38       	cpi	r18, 0x81	; 129
    2d9c:	38 07       	cpc	r19, r24
    2d9e:	0c f0       	brlt	.+2      	; 0x2da2 <handleIRRemoteCommands+0x1ae>
    2da0:	62 cf       	rjmp	.-316    	; 0x2c66 <handleIRRemoteCommands+0x72>
				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
					pwm_left_desired -= STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    2da2:	81 e8       	ldi	r24, 0x81	; 129
    2da4:	9f ef       	ldi	r25, 0xFF	; 255
    2da6:	90 93 f8 02 	sts	0x02F8, r25
    2daa:	80 93 f7 02 	sts	0x02F7, r24
    2dae:	21 e8       	ldi	r18, 0x81	; 129
    2db0:	3f ef       	ldi	r19, 0xFF	; 255
    2db2:	59 cf       	rjmp	.-334    	; 0x2c66 <handleIRRemoteCommands+0x72>
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    2db4:	40 91 f5 02 	lds	r20, 0x02F5
    2db8:	50 91 f6 02 	lds	r21, 0x02F6
    2dbc:	42 50       	subi	r20, 0x02	; 2
    2dbe:	50 40       	sbci	r21, 0x00	; 0
    2dc0:	50 93 f6 02 	sts	0x02F6, r21
    2dc4:	40 93 f5 02 	sts	0x02F5, r20
					pwm_left_desired += STEP_MOTORS;
    2dc8:	60 91 f7 02 	lds	r22, 0x02F7
    2dcc:	70 91 f8 02 	lds	r23, 0x02F8
    2dd0:	6e 5f       	subi	r22, 0xFE	; 254
    2dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd4:	9b 01       	movw	r18, r22
    2dd6:	70 93 f8 02 	sts	0x02F8, r23
    2dda:	60 93 f7 02 	sts	0x02F7, r22
                	if (pwm_right_desired<-127) pwm_right_desired=-127;
    2dde:	8f ef       	ldi	r24, 0xFF	; 255
    2de0:	41 38       	cpi	r20, 0x81	; 129
    2de2:	58 07       	cpc	r21, r24
    2de4:	44 f4       	brge	.+16     	; 0x2df6 <handleIRRemoteCommands+0x202>
    2de6:	81 e8       	ldi	r24, 0x81	; 129
    2de8:	9f ef       	ldi	r25, 0xFF	; 255
    2dea:	90 93 f6 02 	sts	0x02F6, r25
    2dee:	80 93 f5 02 	sts	0x02F5, r24
    2df2:	41 e8       	ldi	r20, 0x81	; 129
    2df4:	5f ef       	ldi	r21, 0xFF	; 255
                	if (pwm_left_desired>127) pwm_left_desired=127;
    2df6:	60 38       	cpi	r22, 0x80	; 128
    2df8:	71 05       	cpc	r23, r1
    2dfa:	0c f4       	brge	.+2      	; 0x2dfe <handleIRRemoteCommands+0x20a>
    2dfc:	34 cf       	rjmp	.-408    	; 0x2c66 <handleIRRemoteCommands+0x72>
    2dfe:	8f e7       	ldi	r24, 0x7F	; 127
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	90 93 f8 02 	sts	0x02F8, r25
    2e06:	80 93 f7 02 	sts	0x02F7, r24
    2e0a:	2f e7       	ldi	r18, 0x7F	; 127
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	2b cf       	rjmp	.-426    	; 0x2c66 <handleIRRemoteCommands+0x72>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    2e10:	10 92 f6 02 	sts	0x02F6, r1
    2e14:	10 92 f5 02 	sts	0x02F5, r1
					pwm_left_desired = 0;
    2e18:	10 92 f8 02 	sts	0x02F8, r1
    2e1c:	10 92 f7 02 	sts	0x02F7, r1
					if(currentSelector == 8) {
    2e20:	80 91 50 04 	lds	r24, 0x0450
    2e24:	88 30       	cpi	r24, 0x08	; 8
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <handleIRRemoteCommands+0x236>
    2e28:	18 c1       	rjmp	.+560    	; 0x305a <handleIRRemoteCommands+0x466>
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2e2a:	60 91 f5 02 	lds	r22, 0x02F5
    2e2e:	80 91 f6 02 	lds	r24, 0x02F6
    2e32:	20 91 f7 02 	lds	r18, 0x02F7
    2e36:	30 91 f8 02 	lds	r19, 0x02F8
    2e3a:	1a cf       	rjmp	.-460    	; 0x2c70 <handleIRRemoteCommands+0x7c>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    2e3c:	40 91 f5 02 	lds	r20, 0x02F5
    2e40:	50 91 f6 02 	lds	r21, 0x02F6
    2e44:	42 50       	subi	r20, 0x02	; 2
    2e46:	50 40       	sbci	r21, 0x00	; 0
    2e48:	50 93 f6 02 	sts	0x02F6, r21
    2e4c:	40 93 f5 02 	sts	0x02F5, r20
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
    2e50:	2f ef       	ldi	r18, 0xFF	; 255
    2e52:	41 38       	cpi	r20, 0x81	; 129
    2e54:	52 07       	cpc	r21, r18
    2e56:	0c f0       	brlt	.+2      	; 0x2e5a <handleIRRemoteCommands+0x266>
    2e58:	02 cf       	rjmp	.-508    	; 0x2c5e <handleIRRemoteCommands+0x6a>
    2e5a:	81 e8       	ldi	r24, 0x81	; 129
    2e5c:	9f ef       	ldi	r25, 0xFF	; 255
    2e5e:	90 93 f6 02 	sts	0x02F6, r25
    2e62:	80 93 f5 02 	sts	0x02F5, r24
    2e66:	8f e7       	ldi	r24, 0x7F	; 127
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	20 91 f7 02 	lds	r18, 0x02F7
    2e6e:	30 91 f8 02 	lds	r19, 0x02F8

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    2e72:	90 93 10 03 	sts	0x0310, r25
    2e76:	80 93 0f 03 	sts	0x030F, r24
    2e7a:	fe ce       	rjmp	.-516    	; 0x2c78 <handleIRRemoteCommands+0x84>
                	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    2e7c:	40 91 f5 02 	lds	r20, 0x02F5
    2e80:	50 91 f6 02 	lds	r21, 0x02F6
    2e84:	4e 5f       	subi	r20, 0xFE	; 254
    2e86:	5f 4f       	sbci	r21, 0xFF	; 255
    2e88:	50 93 f6 02 	sts	0x02F6, r21
    2e8c:	40 93 f5 02 	sts	0x02F5, r20
					pwm_left_desired -= STEP_MOTORS;
    2e90:	60 91 f7 02 	lds	r22, 0x02F7
    2e94:	70 91 f8 02 	lds	r23, 0x02F8
    2e98:	62 50       	subi	r22, 0x02	; 2
    2e9a:	70 40       	sbci	r23, 0x00	; 0
    2e9c:	9b 01       	movw	r18, r22
    2e9e:	70 93 f8 02 	sts	0x02F8, r23
    2ea2:	60 93 f7 02 	sts	0x02F7, r22
	                if (pwm_right_desired>127) pwm_right_desired=127;
    2ea6:	40 38       	cpi	r20, 0x80	; 128
    2ea8:	51 05       	cpc	r21, r1
    2eaa:	44 f0       	brlt	.+16     	; 0x2ebc <handleIRRemoteCommands+0x2c8>
    2eac:	8f e7       	ldi	r24, 0x7F	; 127
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	90 93 f6 02 	sts	0x02F6, r25
    2eb4:	80 93 f5 02 	sts	0x02F5, r24
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	50 e0       	ldi	r21, 0x00	; 0
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    2ebc:	61 58       	subi	r22, 0x81	; 129
    2ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec0:	0c f0       	brlt	.+2      	; 0x2ec4 <handleIRRemoteCommands+0x2d0>
    2ec2:	d1 ce       	rjmp	.-606    	; 0x2c66 <handleIRRemoteCommands+0x72>
    2ec4:	6e cf       	rjmp	.-292    	; 0x2da2 <handleIRRemoteCommands+0x1ae>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    2ec6:	20 91 f7 02 	lds	r18, 0x02F7
    2eca:	30 91 f8 02 	lds	r19, 0x02F8
    2ece:	2e 5f       	subi	r18, 0xFE	; 254
    2ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed2:	30 93 f8 02 	sts	0x02F8, r19
    2ed6:	20 93 f7 02 	sts	0x02F7, r18
	               	if (pwm_left_desired>127) pwm_left_desired=127;
    2eda:	20 38       	cpi	r18, 0x80	; 128
    2edc:	31 05       	cpc	r19, r1
    2ede:	0c f4       	brge	.+2      	; 0x2ee2 <handleIRRemoteCommands+0x2ee>
    2ee0:	83 c0       	rjmp	.+262    	; 0x2fe8 <handleIRRemoteCommands+0x3f4>
    2ee2:	8f e7       	ldi	r24, 0x7F	; 127
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	90 93 f8 02 	sts	0x02F8, r25
    2eea:	80 93 f7 02 	sts	0x02F7, r24
    2eee:	40 91 f5 02 	lds	r20, 0x02F5
    2ef2:	50 91 f6 02 	lds	r21, 0x02F6
    2ef6:	2f e7       	ldi	r18, 0x7F	; 127
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	b5 ce       	rjmp	.-662    	; 0x2c66 <handleIRRemoteCommands+0x72>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2efc:	40 91 f5 02 	lds	r20, 0x02F5
    2f00:	50 91 f6 02 	lds	r21, 0x02F6
    2f04:	20 91 f7 02 	lds	r18, 0x02F7
    2f08:	30 91 f8 02 	lds	r19, 0x02F8
    2f0c:	24 17       	cp	r18, r20
    2f0e:	35 07       	cpc	r19, r21
    2f10:	0c f0       	brlt	.+2      	; 0x2f14 <handleIRRemoteCommands+0x320>
    2f12:	82 c0       	rjmp	.+260    	; 0x3018 <handleIRRemoteCommands+0x424>
    2f14:	9a 01       	movw	r18, r20
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    2f16:	4e 5f       	subi	r20, 0xFE	; 254
    2f18:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1a:	50 93 f6 02 	sts	0x02F6, r21
    2f1e:	40 93 f5 02 	sts	0x02F5, r20
					pwm_left_desired += STEP_MOTORS;
    2f22:	2e 5f       	subi	r18, 0xFE	; 254
    2f24:	3f 4f       	sbci	r19, 0xFF	; 255
    2f26:	30 93 f8 02 	sts	0x02F8, r19
    2f2a:	20 93 f7 02 	sts	0x02F7, r18
	                if (pwm_right_desired > 127) pwm_right_desired = 127;
    2f2e:	40 38       	cpi	r20, 0x80	; 128
    2f30:	51 05       	cpc	r21, r1
    2f32:	44 f0       	brlt	.+16     	; 0x2f44 <handleIRRemoteCommands+0x350>
    2f34:	8f e7       	ldi	r24, 0x7F	; 127
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	90 93 f6 02 	sts	0x02F6, r25
    2f3c:	80 93 f5 02 	sts	0x02F5, r24
    2f40:	4f e7       	ldi	r20, 0x7F	; 127
    2f42:	50 e0       	ldi	r21, 0x00	; 0
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
    2f44:	20 38       	cpi	r18, 0x80	; 128
    2f46:	31 05       	cpc	r19, r1
    2f48:	0c f4       	brge	.+2      	; 0x2f4c <handleIRRemoteCommands+0x358>
    2f4a:	8d ce       	rjmp	.-742    	; 0x2c66 <handleIRRemoteCommands+0x72>
    2f4c:	58 cf       	rjmp	.-336    	; 0x2dfe <handleIRRemoteCommands+0x20a>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    2f4e:	40 91 f5 02 	lds	r20, 0x02F5
    2f52:	50 91 f6 02 	lds	r21, 0x02F6
    2f56:	4e 5f       	subi	r20, 0xFE	; 254
    2f58:	5f 4f       	sbci	r21, 0xFF	; 255
    2f5a:	50 93 f6 02 	sts	0x02F6, r21
    2f5e:	40 93 f5 02 	sts	0x02F5, r20
	                if (pwm_right_desired>127) pwm_right_desired=127;
    2f62:	40 38       	cpi	r20, 0x80	; 128
    2f64:	51 05       	cpc	r21, r1
    2f66:	0c f4       	brge	.+2      	; 0x2f6a <handleIRRemoteCommands+0x376>
    2f68:	7a ce       	rjmp	.-780    	; 0x2c5e <handleIRRemoteCommands+0x6a>
    2f6a:	8f e7       	ldi	r24, 0x7F	; 127
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	90 93 f6 02 	sts	0x02F6, r25
    2f72:	80 93 f5 02 	sts	0x02F5, r24
    2f76:	59 cf       	rjmp	.-334    	; 0x2e2a <handleIRRemoteCommands+0x236>
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    2f78:	80 91 25 04 	lds	r24, 0x0425
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	01 96       	adiw	r24, 0x01	; 1
    2f80:	65 e0       	ldi	r22, 0x05	; 5
    2f82:	70 e0       	ldi	r23, 0x00	; 0
    2f84:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
    2f88:	80 93 25 04 	sts	0x0425, r24

					if(colorState==0) {			// turn on blue and off all IRs
    2f8c:	88 23       	and	r24, r24
    2f8e:	89 f5       	brne	.+98     	; 0x2ff2 <handleIRRemoteCommands+0x3fe>
						LED_IR1_HIGH;
    2f90:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    2f92:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    2f94:	10 92 0a 02 	sts	0x020A, r1
						pwm_green = MAX_LEDS_PWM;
    2f98:	8f ef       	ldi	r24, 0xFF	; 255
    2f9a:	80 93 09 02 	sts	0x0209, r24
						pwm_red = MAX_LEDS_PWM;
    2f9e:	80 93 08 02 	sts	0x0208, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    2fa2:	80 91 08 02 	lds	r24, 0x0208
    2fa6:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
					updateGreenLed(pwm_green);
    2faa:	80 91 09 02 	lds	r24, 0x0209
    2fae:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
					updateBlueLed(pwm_blue);
    2fb2:	80 91 0a 02 	lds	r24, 0x020A
    2fb6:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>
    2fba:	40 91 f5 02 	lds	r20, 0x02F5
    2fbe:	50 91 f6 02 	lds	r21, 0x02F6
    2fc2:	20 91 f7 02 	lds	r18, 0x02F7
    2fc6:	30 91 f8 02 	lds	r19, 0x02F8
    2fca:	4d ce       	rjmp	.-870    	; 0x2c66 <handleIRRemoteCommands+0x72>
				speedr = (-pwm_right_desired);
			}
			if(pwm_left_desired >= 0) {
				speedl = pwm_left_desired;
			} else {
				speedl = (-pwm_left_desired);
    2fcc:	88 27       	eor	r24, r24
    2fce:	99 27       	eor	r25, r25
    2fd0:	82 1b       	sub	r24, r18
    2fd2:	93 0b       	sbc	r25, r19
    2fd4:	90 93 0e 03 	sts	0x030E, r25
    2fd8:	80 93 0d 03 	sts	0x030D, r24
    2fdc:	08 95       	ret

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    2fde:	88 27       	eor	r24, r24
    2fe0:	99 27       	eor	r25, r25
    2fe2:	84 1b       	sub	r24, r20
    2fe4:	95 0b       	sbc	r25, r21
    2fe6:	45 cf       	rjmp	.-374    	; 0x2e72 <handleIRRemoteCommands+0x27e>
    2fe8:	40 91 f5 02 	lds	r20, 0x02F5
    2fec:	50 91 f6 02 	lds	r21, 0x02F6
    2ff0:	3a ce       	rjmp	.-908    	; 0x2c66 <handleIRRemoteCommands+0x72>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    2ff2:	81 30       	cpi	r24, 0x01	; 1
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <handleIRRemoteCommands+0x404>
    2ff6:	4e c0       	rjmp	.+156    	; 0x3094 <handleIRRemoteCommands+0x4a0>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    2ff8:	82 30       	cpi	r24, 0x02	; 2
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <handleIRRemoteCommands+0x40a>
    2ffc:	53 c0       	rjmp	.+166    	; 0x30a4 <handleIRRemoteCommands+0x4b0>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    2ffe:	83 30       	cpi	r24, 0x03	; 3
    3000:	09 f4       	brne	.+2      	; 0x3004 <handleIRRemoteCommands+0x410>
    3002:	5a c0       	rjmp	.+180    	; 0x30b8 <handleIRRemoteCommands+0x4c4>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
    3004:	84 30       	cpi	r24, 0x04	; 4
    3006:	69 f6       	brne	.-102    	; 0x2fa2 <handleIRRemoteCommands+0x3ae>
						pwm_blue = MAX_LEDS_PWM;
    3008:	8f ef       	ldi	r24, 0xFF	; 255
    300a:	80 93 0a 02 	sts	0x020A, r24
						pwm_green = MAX_LEDS_PWM;
    300e:	80 93 09 02 	sts	0x0209, r24
						pwm_red = MAX_LEDS_PWM;
    3012:	80 93 08 02 	sts	0x0208, r24
    3016:	c5 cf       	rjmp	.-118    	; 0x2fa2 <handleIRRemoteCommands+0x3ae>
    3018:	a9 01       	movw	r20, r18
    301a:	7d cf       	rjmp	.-262    	; 0x2f16 <handleIRRemoteCommands+0x322>
				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    301c:	20 91 f7 02 	lds	r18, 0x02F7
    3020:	30 91 f8 02 	lds	r19, 0x02F8
    3024:	a9 01       	movw	r20, r18
    3026:	a0 ce       	rjmp	.-704    	; 0x2d68 <handleIRRemoteCommands+0x174>
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
					switch(behaviorState) {
    3028:	82 30       	cpi	r24, 0x02	; 2
    302a:	09 f4       	brne	.+2      	; 0x302e <handleIRRemoteCommands+0x43a>
    302c:	4f ce       	rjmp	.-866    	; 0x2ccc <handleIRRemoteCommands+0xd8>
    302e:	83 30       	cpi	r24, 0x03	; 3
    3030:	09 f0       	breq	.+2      	; 0x3034 <handleIRRemoteCommands+0x440>
    3032:	51 ce       	rjmp	.-862    	; 0x2cd6 <handleIRRemoteCommands+0xe2>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	80 93 74 04 	sts	0x0474, r24
							cliffAvoidanceEnabled = 1;
    303a:	80 93 75 04 	sts	0x0475, r24
    303e:	0b ce       	rjmp	.-1002   	; 0x2c56 <handleIRRemoteCommands+0x62>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    3040:	80 93 74 04 	sts	0x0474, r24
							cliffAvoidanceEnabled = 0;
    3044:	10 92 75 04 	sts	0x0475, r1
    3048:	40 91 f5 02 	lds	r20, 0x02F5
    304c:	50 91 f6 02 	lds	r21, 0x02F6
    3050:	20 91 f7 02 	lds	r18, 0x02F7
    3054:	30 91 f8 02 	lds	r19, 0x02F8
    3058:	06 ce       	rjmp	.-1012   	; 0x2c66 <handleIRRemoteCommands+0x72>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    305a:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    305e:	8f ef       	ldi	r24, 0xFF	; 255
    3060:	93 e0       	ldi	r25, 0x03	; 3
    3062:	90 93 66 02 	sts	0x0266, r25
    3066:	80 93 65 02 	sts	0x0265, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    306a:	90 93 6c 02 	sts	0x026C, r25
    306e:	80 93 6b 02 	sts	0x026B, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    3072:	86 e0       	ldi	r24, 0x06	; 6
    3074:	80 93 61 0b 	sts	0x0B61, r24
						calibVelIndex = 1;
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	80 93 bb 08 	sts	0x08BB, r24
						calibrateOdomFlag = 1;
    307e:	80 93 6e 05 	sts	0x056E, r24
    3082:	40 91 f5 02 	lds	r20, 0x02F5
    3086:	50 91 f6 02 	lds	r21, 0x02F6
    308a:	20 91 f7 02 	lds	r18, 0x02F7
    308e:	30 91 f8 02 	lds	r19, 0x02F8
    3092:	e9 cd       	rjmp	.-1070   	; 0x2c66 <handleIRRemoteCommands+0x72>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    3094:	8f ef       	ldi	r24, 0xFF	; 255
    3096:	80 93 0a 02 	sts	0x020A, r24
						pwm_green = 0;
    309a:	10 92 09 02 	sts	0x0209, r1
						pwm_red = MAX_LEDS_PWM;
    309e:	80 93 08 02 	sts	0x0208, r24
    30a2:	7f cf       	rjmp	.-258    	; 0x2fa2 <handleIRRemoteCommands+0x3ae>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    30a4:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    30a6:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    30a8:	8f ef       	ldi	r24, 0xFF	; 255
    30aa:	80 93 0a 02 	sts	0x020A, r24
						pwm_green = MAX_LEDS_PWM;
    30ae:	80 93 09 02 	sts	0x0209, r24
						pwm_red = 0;
    30b2:	10 92 08 02 	sts	0x0208, r1
    30b6:	75 cf       	rjmp	.-278    	; 0x2fa2 <handleIRRemoteCommands+0x3ae>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    30b8:	10 92 0a 02 	sts	0x020A, r1
						pwm_green = 0;
    30bc:	10 92 09 02 	sts	0x0209, r1
						pwm_red = 0;
    30c0:	10 92 08 02 	sts	0x0208, r1
    30c4:	6e cf       	rjmp	.-292    	; 0x2fa2 <handleIRRemoteCommands+0x3ae>

000030c6 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    30c6:	08 95       	ret

000030c8 <start_speed_control_right>:

void start_speed_control_right(signed int *pwm_right) {
    30c8:	ef 92       	push	r14
    30ca:	ff 92       	push	r15
    30cc:	0f 93       	push	r16
    30ce:	1f 93       	push	r17
    30d0:	cf 93       	push	r28
    30d2:	df 93       	push	r29
    30d4:	ec 01       	movw	r28, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    30d6:	88 81       	ld	r24, Y
    30d8:	99 81       	ldd	r25, Y+1	; 0x01
    30da:	89 2b       	or	r24, r25
    30dc:	09 f4       	brne	.+2      	; 0x30e0 <start_speed_control_right+0x18>
    30de:	b2 c0       	rjmp	.+356    	; 0x3244 <start_speed_control_right+0x17c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    30e0:	e0 90 27 0b 	lds	r14, 0x0B27
    30e4:	f0 90 28 0b 	lds	r15, 0x0B28
    30e8:	f0 92 c1 08 	sts	0x08C1, r15
    30ec:	e0 92 c0 08 	sts	0x08C0, r14
	if(*pwm_right >= 0) {
    30f0:	28 81       	ld	r18, Y
    30f2:	39 81       	ldd	r19, Y+1	; 0x01
    30f4:	37 fd       	sbrc	r19, 7
    30f6:	e4 c0       	rjmp	.+456    	; 0x32c0 <start_speed_control_right+0x1f8>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    30f8:	80 91 ef 02 	lds	r24, 0x02EF
    30fc:	90 91 f0 02 	lds	r25, 0x02F0
    3100:	28 1b       	sub	r18, r24
    3102:	39 0b       	sbc	r19, r25
    3104:	30 93 28 0b 	sts	0x0B28, r19
    3108:	20 93 27 0b 	sts	0x0B27, r18
    310c:	f9 01       	movw	r30, r18
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    310e:	20 91 07 03 	lds	r18, 0x0307
    3112:	30 91 08 03 	lds	r19, 0x0308
    3116:	2e 0f       	add	r18, r30
    3118:	3f 1f       	adc	r19, r31
    311a:	30 93 08 03 	sts	0x0308, r19
    311e:	20 93 07 03 	sts	0x0307, r18

	if(delta_right_speed_sum > I_LIMIT) {
    3122:	86 e0       	ldi	r24, 0x06	; 6
    3124:	21 34       	cpi	r18, 0x41	; 65
    3126:	38 07       	cpc	r19, r24
    3128:	0c f4       	brge	.+2      	; 0x312c <start_speed_control_right+0x64>
    312a:	ad c0       	rjmp	.+346    	; 0x3286 <start_speed_control_right+0x1be>
		delta_right_speed_sum = I_LIMIT;
    312c:	80 e4       	ldi	r24, 0x40	; 64
    312e:	96 e0       	ldi	r25, 0x06	; 6
    3130:	90 93 08 03 	sts	0x0308, r25
    3134:	80 93 07 03 	sts	0x0307, r24
    3138:	20 e4       	ldi	r18, 0x40	; 64
    313a:	36 e0       	ldi	r19, 0x06	; 6
		delta_right_speed_sum = -I_LIMIT;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    313c:	08 81       	ld	r16, Y
    313e:	19 81       	ldd	r17, Y+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);
    3140:	c9 01       	movw	r24, r18
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	82 0f       	add	r24, r18
    3148:	93 1f       	adc	r25, r19
    314a:	ac 01       	movw	r20, r24
    314c:	66 27       	eor	r22, r22
    314e:	57 fd       	sbrc	r21, 7
    3150:	60 95       	com	r22
    3152:	76 2f       	mov	r23, r22
    3154:	cf 01       	movw	r24, r30
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	9f 01       	movw	r18, r30
    315c:	22 0f       	add	r18, r18
    315e:	33 1f       	adc	r19, r19
    3160:	22 0f       	add	r18, r18
    3162:	33 1f       	adc	r19, r19
    3164:	22 0f       	add	r18, r18
    3166:	33 1f       	adc	r19, r19
    3168:	82 0f       	add	r24, r18
    316a:	93 1f       	adc	r25, r19
    316c:	aa 27       	eor	r26, r26
    316e:	97 fd       	sbrc	r25, 7
    3170:	a0 95       	com	r26
    3172:	ba 2f       	mov	r27, r26
    3174:	48 0f       	add	r20, r24
    3176:	59 1f       	adc	r21, r25
    3178:	6a 1f       	adc	r22, r26
    317a:	7b 1f       	adc	r23, r27
    317c:	ee 19       	sub	r30, r14
    317e:	ff 09       	sbc	r31, r15
    3180:	ee 0f       	add	r30, r30
    3182:	ff 1f       	adc	r31, r31
    3184:	cf 01       	movw	r24, r30
    3186:	aa 27       	eor	r26, r26
    3188:	97 fd       	sbrc	r25, 7
    318a:	a0 95       	com	r26
    318c:	ba 2f       	mov	r27, r26
    318e:	48 0f       	add	r20, r24
    3190:	59 1f       	adc	r21, r25
    3192:	6a 1f       	adc	r22, r26
    3194:	7b 1f       	adc	r23, r27
    3196:	c8 01       	movw	r24, r16
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	88 0f       	add	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	aa 27       	eor	r26, r26
    31a6:	97 fd       	sbrc	r25, 7
    31a8:	a0 95       	com	r26
    31aa:	ba 2f       	mov	r27, r26
    31ac:	48 0f       	add	r20, r24
    31ae:	59 1f       	adc	r21, r25
    31b0:	6a 1f       	adc	r22, r26
    31b2:	7b 1f       	adc	r23, r27
    31b4:	40 93 fd 02 	sts	0x02FD, r20
    31b8:	50 93 fe 02 	sts	0x02FE, r21
    31bc:	60 93 ff 02 	sts	0x02FF, r22
    31c0:	70 93 00 03 	sts	0x0300, r23

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    31c4:	77 fd       	sbrc	r23, 7
    31c6:	6d c0       	rjmp	.+218    	; 0x32a2 <start_speed_control_right+0x1da>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    31c8:	14 16       	cp	r1, r20
    31ca:	15 06       	cpc	r1, r21
    31cc:	16 06       	cpc	r1, r22
    31ce:	17 06       	cpc	r1, r23
    31d0:	14 f4       	brge	.+4      	; 0x31d6 <start_speed_control_right+0x10e>
    31d2:	17 fd       	sbrc	r17, 7
    31d4:	68 c0       	rjmp	.+208    	; 0x32a6 <start_speed_control_right+0x1de>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    31d6:	41 5c       	subi	r20, 0xC1	; 193
    31d8:	5d 45       	sbci	r21, 0x5D	; 93
    31da:	60 40       	sbci	r22, 0x00	; 0
    31dc:	70 40       	sbci	r23, 0x00	; 0
    31de:	0c f4       	brge	.+2      	; 0x31e2 <start_speed_control_right+0x11a>
    31e0:	80 c0       	rjmp	.+256    	; 0x32e2 <start_speed_control_right+0x21a>
    31e2:	80 ec       	ldi	r24, 0xC0	; 192
    31e4:	9d e5       	ldi	r25, 0x5D	; 93
    31e6:	a0 e0       	ldi	r26, 0x00	; 0
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	80 93 fd 02 	sts	0x02FD, r24
    31ee:	90 93 fe 02 	sts	0x02FE, r25
    31f2:	a0 93 ff 02 	sts	0x02FF, r26
    31f6:	b0 93 00 03 	sts	0x0300, r27
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    31fa:	24 e0       	ldi	r18, 0x04	; 4
    31fc:	b5 95       	asr	r27
    31fe:	a7 95       	ror	r26
    3200:	97 95       	ror	r25
    3202:	87 95       	ror	r24
    3204:	2a 95       	dec	r18
    3206:	d1 f7       	brne	.-12     	; 0x31fc <start_speed_control_right+0x134>
    3208:	9c 01       	movw	r18, r24
    320a:	99 83       	std	Y+1, r25	; 0x01
    320c:	88 83       	st	Y, r24

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    320e:	80 91 e5 02 	lds	r24, 0x02E5
    3212:	90 91 e6 02 	lds	r25, 0x02E6
    3216:	18 16       	cp	r1, r24
    3218:	19 06       	cpc	r1, r25
    321a:	0c f0       	brlt	.+2      	; 0x321e <start_speed_control_right+0x156>
    321c:	5d c0       	rjmp	.+186    	; 0x32d8 <start_speed_control_right+0x210>
		*pwm_right += 1;
    321e:	c9 01       	movw	r24, r18
    3220:	01 96       	adiw	r24, 0x01	; 1
    3222:	99 83       	std	Y+1, r25	; 0x01
    3224:	88 83       	st	Y, r24
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    3226:	22 e0       	ldi	r18, 0x02	; 2
    3228:	80 30       	cpi	r24, 0x00	; 0
    322a:	92 07       	cpc	r25, r18
    322c:	f4 f0       	brlt	.+60     	; 0x326a <start_speed_control_right+0x1a2>
    322e:	8f ef       	ldi	r24, 0xFF	; 255
    3230:	91 e0       	ldi	r25, 0x01	; 1
    3232:	99 83       	std	Y+1, r25	; 0x01
    3234:	88 83       	st	Y, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	1f 91       	pop	r17
    323c:	0f 91       	pop	r16
    323e:	ff 90       	pop	r15
    3240:	ef 90       	pop	r14
    3242:	08 95       	ret
void start_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    3244:	10 92 08 03 	sts	0x0308, r1
    3248:	10 92 07 03 	sts	0x0307, r1
		delta_right_speed_current = 0;
    324c:	10 92 28 0b 	sts	0x0B28, r1
    3250:	10 92 27 0b 	sts	0x0B27, r1
		delta_right_speed_prev = 0;
    3254:	10 92 c1 08 	sts	0x08C1, r1
    3258:	10 92 c0 08 	sts	0x08C0, r1
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    325c:	df 91       	pop	r29
    325e:	cf 91       	pop	r28
    3260:	1f 91       	pop	r17
    3262:	0f 91       	pop	r16
    3264:	ff 90       	pop	r15
    3266:	ef 90       	pop	r14
    3268:	08 95       	ret
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    326a:	81 50       	subi	r24, 0x01	; 1
    326c:	9e 4f       	sbci	r25, 0xFE	; 254
    326e:	1c f7       	brge	.-58     	; 0x3236 <start_speed_control_right+0x16e>
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	9e ef       	ldi	r25, 0xFE	; 254
    3274:	99 83       	std	Y+1, r25	; 0x01
    3276:	88 83       	st	Y, r24

}
    3278:	df 91       	pop	r29
    327a:	cf 91       	pop	r28
    327c:	1f 91       	pop	r17
    327e:	0f 91       	pop	r16
    3280:	ff 90       	pop	r15
    3282:	ef 90       	pop	r14
    3284:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT) {
		delta_right_speed_sum = I_LIMIT;
	}else if(delta_right_speed_sum < -I_LIMIT) {
    3286:	89 ef       	ldi	r24, 0xF9	; 249
    3288:	20 3c       	cpi	r18, 0xC0	; 192
    328a:	38 07       	cpc	r19, r24
    328c:	0c f0       	brlt	.+2      	; 0x3290 <start_speed_control_right+0x1c8>
    328e:	56 cf       	rjmp	.-340    	; 0x313c <start_speed_control_right+0x74>
		delta_right_speed_sum = -I_LIMIT;
    3290:	80 ec       	ldi	r24, 0xC0	; 192
    3292:	99 ef       	ldi	r25, 0xF9	; 249
    3294:	90 93 08 03 	sts	0x0308, r25
    3298:	80 93 07 03 	sts	0x0307, r24
    329c:	20 ec       	ldi	r18, 0xC0	; 192
    329e:	39 ef       	ldi	r19, 0xF9	; 249
    32a0:	4d cf       	rjmp	.-358    	; 0x313c <start_speed_control_right+0x74>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    32a2:	17 fd       	sbrc	r17, 7
    32a4:	98 cf       	rjmp	.-208    	; 0x31d6 <start_speed_control_right+0x10e>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    32a6:	10 92 fd 02 	sts	0x02FD, r1
    32aa:	10 92 fe 02 	sts	0x02FE, r1
    32ae:	10 92 ff 02 	sts	0x02FF, r1
    32b2:	10 92 00 03 	sts	0x0300, r1
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	a0 e0       	ldi	r26, 0x00	; 0
    32bc:	b0 e0       	ldi	r27, 0x00	; 0
    32be:	9d cf       	rjmp	.-198    	; 0x31fa <start_speed_control_right+0x132>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    32c0:	80 91 ef 02 	lds	r24, 0x02EF
    32c4:	90 91 f0 02 	lds	r25, 0x02F0
    32c8:	28 0f       	add	r18, r24
    32ca:	39 1f       	adc	r19, r25
    32cc:	30 93 28 0b 	sts	0x0B28, r19
    32d0:	20 93 27 0b 	sts	0x0B27, r18
    32d4:	f9 01       	movw	r30, r18
    32d6:	1b cf       	rjmp	.-458    	; 0x310e <start_speed_control_right+0x46>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    32d8:	c9 01       	movw	r24, r18
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	99 83       	std	Y+1, r25	; 0x01
    32de:	88 83       	st	Y, r24
    32e0:	a2 cf       	rjmp	.-188    	; 0x3226 <start_speed_control_right+0x15e>
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    32e2:	80 91 fd 02 	lds	r24, 0x02FD
    32e6:	90 91 fe 02 	lds	r25, 0x02FE
    32ea:	a0 91 ff 02 	lds	r26, 0x02FF
    32ee:	b0 91 00 03 	lds	r27, 0x0300
    32f2:	80 34       	cpi	r24, 0x40	; 64
    32f4:	22 ea       	ldi	r18, 0xA2	; 162
    32f6:	92 07       	cpc	r25, r18
    32f8:	2f ef       	ldi	r18, 0xFF	; 255
    32fa:	a2 07       	cpc	r26, r18
    32fc:	2f ef       	ldi	r18, 0xFF	; 255
    32fe:	b2 07       	cpc	r27, r18
    3300:	0c f0       	brlt	.+2      	; 0x3304 <start_speed_control_right+0x23c>
    3302:	7b cf       	rjmp	.-266    	; 0x31fa <start_speed_control_right+0x132>
    3304:	80 e4       	ldi	r24, 0x40	; 64
    3306:	92 ea       	ldi	r25, 0xA2	; 162
    3308:	af ef       	ldi	r26, 0xFF	; 255
    330a:	bf ef       	ldi	r27, 0xFF	; 255
    330c:	80 93 fd 02 	sts	0x02FD, r24
    3310:	90 93 fe 02 	sts	0x02FE, r25
    3314:	a0 93 ff 02 	sts	0x02FF, r26
    3318:	b0 93 00 03 	sts	0x0300, r27
    331c:	6e cf       	rjmp	.-292    	; 0x31fa <start_speed_control_right+0x132>

0000331e <start_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_speed_control_left(signed int *pwm_left) {
    331e:	ef 92       	push	r14
    3320:	ff 92       	push	r15
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	cf 93       	push	r28
    3328:	df 93       	push	r29
    332a:	ec 01       	movw	r28, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    332c:	88 81       	ld	r24, Y
    332e:	99 81       	ldd	r25, Y+1	; 0x01
    3330:	89 2b       	or	r24, r25
    3332:	09 f4       	brne	.+2      	; 0x3336 <start_speed_control_left+0x18>
    3334:	b2 c0       	rjmp	.+356    	; 0x349a <start_speed_control_left+0x17c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    3336:	e0 90 73 05 	lds	r14, 0x0573
    333a:	f0 90 74 05 	lds	r15, 0x0574
    333e:	f0 92 89 09 	sts	0x0989, r15
    3342:	e0 92 88 09 	sts	0x0988, r14
	if(*pwm_left >= 0) {
    3346:	28 81       	ld	r18, Y
    3348:	39 81       	ldd	r19, Y+1	; 0x01
    334a:	37 fd       	sbrc	r19, 7
    334c:	e4 c0       	rjmp	.+456    	; 0x3516 <start_speed_control_left+0x1f8>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    334e:	80 91 ed 02 	lds	r24, 0x02ED
    3352:	90 91 ee 02 	lds	r25, 0x02EE
    3356:	28 1b       	sub	r18, r24
    3358:	39 0b       	sbc	r19, r25
    335a:	30 93 74 05 	sts	0x0574, r19
    335e:	20 93 73 05 	sts	0x0573, r18
    3362:	f9 01       	movw	r30, r18
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    3364:	20 91 05 03 	lds	r18, 0x0305
    3368:	30 91 06 03 	lds	r19, 0x0306
    336c:	2e 0f       	add	r18, r30
    336e:	3f 1f       	adc	r19, r31
    3370:	30 93 06 03 	sts	0x0306, r19
    3374:	20 93 05 03 	sts	0x0305, r18

	if(delta_left_speed_sum > I_LIMIT) {
    3378:	86 e0       	ldi	r24, 0x06	; 6
    337a:	21 34       	cpi	r18, 0x41	; 65
    337c:	38 07       	cpc	r19, r24
    337e:	0c f4       	brge	.+2      	; 0x3382 <start_speed_control_left+0x64>
    3380:	ad c0       	rjmp	.+346    	; 0x34dc <start_speed_control_left+0x1be>
		delta_left_speed_sum = I_LIMIT;
    3382:	80 e4       	ldi	r24, 0x40	; 64
    3384:	96 e0       	ldi	r25, 0x06	; 6
    3386:	90 93 06 03 	sts	0x0306, r25
    338a:	80 93 05 03 	sts	0x0305, r24
    338e:	20 e4       	ldi	r18, 0x40	; 64
    3390:	36 e0       	ldi	r19, 0x06	; 6
		delta_left_speed_sum = -I_LIMIT;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3392:	08 81       	ld	r16, Y
    3394:	19 81       	ldd	r17, Y+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);
    3396:	c9 01       	movw	r24, r18
    3398:	88 0f       	add	r24, r24
    339a:	99 1f       	adc	r25, r25
    339c:	82 0f       	add	r24, r18
    339e:	93 1f       	adc	r25, r19
    33a0:	ac 01       	movw	r20, r24
    33a2:	66 27       	eor	r22, r22
    33a4:	57 fd       	sbrc	r21, 7
    33a6:	60 95       	com	r22
    33a8:	76 2f       	mov	r23, r22
    33aa:	cf 01       	movw	r24, r30
    33ac:	88 0f       	add	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	9f 01       	movw	r18, r30
    33b2:	22 0f       	add	r18, r18
    33b4:	33 1f       	adc	r19, r19
    33b6:	22 0f       	add	r18, r18
    33b8:	33 1f       	adc	r19, r19
    33ba:	22 0f       	add	r18, r18
    33bc:	33 1f       	adc	r19, r19
    33be:	82 0f       	add	r24, r18
    33c0:	93 1f       	adc	r25, r19
    33c2:	aa 27       	eor	r26, r26
    33c4:	97 fd       	sbrc	r25, 7
    33c6:	a0 95       	com	r26
    33c8:	ba 2f       	mov	r27, r26
    33ca:	48 0f       	add	r20, r24
    33cc:	59 1f       	adc	r21, r25
    33ce:	6a 1f       	adc	r22, r26
    33d0:	7b 1f       	adc	r23, r27
    33d2:	ee 19       	sub	r30, r14
    33d4:	ff 09       	sbc	r31, r15
    33d6:	ee 0f       	add	r30, r30
    33d8:	ff 1f       	adc	r31, r31
    33da:	cf 01       	movw	r24, r30
    33dc:	aa 27       	eor	r26, r26
    33de:	97 fd       	sbrc	r25, 7
    33e0:	a0 95       	com	r26
    33e2:	ba 2f       	mov	r27, r26
    33e4:	48 0f       	add	r20, r24
    33e6:	59 1f       	adc	r21, r25
    33e8:	6a 1f       	adc	r22, r26
    33ea:	7b 1f       	adc	r23, r27
    33ec:	c8 01       	movw	r24, r16
    33ee:	88 0f       	add	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	aa 27       	eor	r26, r26
    33fc:	97 fd       	sbrc	r25, 7
    33fe:	a0 95       	com	r26
    3400:	ba 2f       	mov	r27, r26
    3402:	48 0f       	add	r20, r24
    3404:	59 1f       	adc	r21, r25
    3406:	6a 1f       	adc	r22, r26
    3408:	7b 1f       	adc	r23, r27
    340a:	40 93 01 03 	sts	0x0301, r20
    340e:	50 93 02 03 	sts	0x0302, r21
    3412:	60 93 03 03 	sts	0x0303, r22
    3416:	70 93 04 03 	sts	0x0304, r23

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    341a:	77 fd       	sbrc	r23, 7
    341c:	6d c0       	rjmp	.+218    	; 0x34f8 <start_speed_control_left+0x1da>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    341e:	14 16       	cp	r1, r20
    3420:	15 06       	cpc	r1, r21
    3422:	16 06       	cpc	r1, r22
    3424:	17 06       	cpc	r1, r23
    3426:	14 f4       	brge	.+4      	; 0x342c <start_speed_control_left+0x10e>
    3428:	17 fd       	sbrc	r17, 7
    342a:	68 c0       	rjmp	.+208    	; 0x34fc <start_speed_control_left+0x1de>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    342c:	41 5c       	subi	r20, 0xC1	; 193
    342e:	5d 45       	sbci	r21, 0x5D	; 93
    3430:	60 40       	sbci	r22, 0x00	; 0
    3432:	70 40       	sbci	r23, 0x00	; 0
    3434:	0c f4       	brge	.+2      	; 0x3438 <start_speed_control_left+0x11a>
    3436:	80 c0       	rjmp	.+256    	; 0x3538 <start_speed_control_left+0x21a>
    3438:	80 ec       	ldi	r24, 0xC0	; 192
    343a:	9d e5       	ldi	r25, 0x5D	; 93
    343c:	a0 e0       	ldi	r26, 0x00	; 0
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	80 93 01 03 	sts	0x0301, r24
    3444:	90 93 02 03 	sts	0x0302, r25
    3448:	a0 93 03 03 	sts	0x0303, r26
    344c:	b0 93 04 03 	sts	0x0304, r27
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    3450:	54 e0       	ldi	r21, 0x04	; 4
    3452:	b5 95       	asr	r27
    3454:	a7 95       	ror	r26
    3456:	97 95       	ror	r25
    3458:	87 95       	ror	r24
    345a:	5a 95       	dec	r21
    345c:	d1 f7       	brne	.-12     	; 0x3452 <start_speed_control_left+0x134>
    345e:	9c 01       	movw	r18, r24
    3460:	99 83       	std	Y+1, r25	; 0x01
    3462:	88 83       	st	Y, r24

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    3464:	80 91 e7 02 	lds	r24, 0x02E7
    3468:	90 91 e8 02 	lds	r25, 0x02E8
    346c:	18 16       	cp	r1, r24
    346e:	19 06       	cpc	r1, r25
    3470:	0c f0       	brlt	.+2      	; 0x3474 <start_speed_control_left+0x156>
    3472:	5d c0       	rjmp	.+186    	; 0x352e <start_speed_control_left+0x210>
		*pwm_left += 1;
    3474:	c9 01       	movw	r24, r18
    3476:	01 96       	adiw	r24, 0x01	; 1
    3478:	99 83       	std	Y+1, r25	; 0x01
    347a:	88 83       	st	Y, r24
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    347c:	22 e0       	ldi	r18, 0x02	; 2
    347e:	80 30       	cpi	r24, 0x00	; 0
    3480:	92 07       	cpc	r25, r18
    3482:	f4 f0       	brlt	.+60     	; 0x34c0 <start_speed_control_left+0x1a2>
    3484:	8f ef       	ldi	r24, 0xFF	; 255
    3486:	91 e0       	ldi	r25, 0x01	; 1
    3488:	99 83       	std	Y+1, r25	; 0x01
    348a:	88 83       	st	Y, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    348c:	df 91       	pop	r29
    348e:	cf 91       	pop	r28
    3490:	1f 91       	pop	r17
    3492:	0f 91       	pop	r16
    3494:	ff 90       	pop	r15
    3496:	ef 90       	pop	r14
    3498:	08 95       	ret
void start_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    349a:	10 92 06 03 	sts	0x0306, r1
    349e:	10 92 05 03 	sts	0x0305, r1
		delta_left_speed_current = 0;
    34a2:	10 92 74 05 	sts	0x0574, r1
    34a6:	10 92 73 05 	sts	0x0573, r1
		delta_left_speed_prev = 0;
    34aa:	10 92 89 09 	sts	0x0989, r1
    34ae:	10 92 88 09 	sts	0x0988, r1
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    34b2:	df 91       	pop	r29
    34b4:	cf 91       	pop	r28
    34b6:	1f 91       	pop	r17
    34b8:	0f 91       	pop	r16
    34ba:	ff 90       	pop	r15
    34bc:	ef 90       	pop	r14
    34be:	08 95       	ret
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    34c0:	81 50       	subi	r24, 0x01	; 1
    34c2:	9e 4f       	sbci	r25, 0xFE	; 254
    34c4:	1c f7       	brge	.-58     	; 0x348c <start_speed_control_left+0x16e>
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	9e ef       	ldi	r25, 0xFE	; 254
    34ca:	99 83       	std	Y+1, r25	; 0x01
    34cc:	88 83       	st	Y, r24

}
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	1f 91       	pop	r17
    34d4:	0f 91       	pop	r16
    34d6:	ff 90       	pop	r15
    34d8:	ef 90       	pop	r14
    34da:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT) {
		delta_left_speed_sum = I_LIMIT;
	} else if(delta_left_speed_sum < -I_LIMIT) {
    34dc:	89 ef       	ldi	r24, 0xF9	; 249
    34de:	20 3c       	cpi	r18, 0xC0	; 192
    34e0:	38 07       	cpc	r19, r24
    34e2:	0c f0       	brlt	.+2      	; 0x34e6 <start_speed_control_left+0x1c8>
    34e4:	56 cf       	rjmp	.-340    	; 0x3392 <start_speed_control_left+0x74>
		delta_left_speed_sum = -I_LIMIT;
    34e6:	80 ec       	ldi	r24, 0xC0	; 192
    34e8:	99 ef       	ldi	r25, 0xF9	; 249
    34ea:	90 93 06 03 	sts	0x0306, r25
    34ee:	80 93 05 03 	sts	0x0305, r24
    34f2:	20 ec       	ldi	r18, 0xC0	; 192
    34f4:	39 ef       	ldi	r19, 0xF9	; 249
    34f6:	4d cf       	rjmp	.-358    	; 0x3392 <start_speed_control_left+0x74>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    34f8:	17 fd       	sbrc	r17, 7
    34fa:	98 cf       	rjmp	.-208    	; 0x342c <start_speed_control_left+0x10e>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    34fc:	10 92 01 03 	sts	0x0301, r1
    3500:	10 92 02 03 	sts	0x0302, r1
    3504:	10 92 03 03 	sts	0x0303, r1
    3508:	10 92 04 03 	sts	0x0304, r1
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	a0 e0       	ldi	r26, 0x00	; 0
    3512:	b0 e0       	ldi	r27, 0x00	; 0
    3514:	9d cf       	rjmp	.-198    	; 0x3450 <start_speed_control_left+0x132>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3516:	80 91 ed 02 	lds	r24, 0x02ED
    351a:	90 91 ee 02 	lds	r25, 0x02EE
    351e:	28 0f       	add	r18, r24
    3520:	39 1f       	adc	r19, r25
    3522:	30 93 74 05 	sts	0x0574, r19
    3526:	20 93 73 05 	sts	0x0573, r18
    352a:	f9 01       	movw	r30, r18
    352c:	1b cf       	rjmp	.-458    	; 0x3364 <start_speed_control_left+0x46>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    352e:	c9 01       	movw	r24, r18
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	99 83       	std	Y+1, r25	; 0x01
    3534:	88 83       	st	Y, r24
    3536:	a2 cf       	rjmp	.-188    	; 0x347c <start_speed_control_left+0x15e>
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3538:	80 91 01 03 	lds	r24, 0x0301
    353c:	90 91 02 03 	lds	r25, 0x0302
    3540:	a0 91 03 03 	lds	r26, 0x0303
    3544:	b0 91 04 03 	lds	r27, 0x0304
    3548:	80 34       	cpi	r24, 0x40	; 64
    354a:	22 ea       	ldi	r18, 0xA2	; 162
    354c:	92 07       	cpc	r25, r18
    354e:	2f ef       	ldi	r18, 0xFF	; 255
    3550:	a2 07       	cpc	r26, r18
    3552:	2f ef       	ldi	r18, 0xFF	; 255
    3554:	b2 07       	cpc	r27, r18
    3556:	0c f0       	brlt	.+2      	; 0x355a <start_speed_control_left+0x23c>
    3558:	7b cf       	rjmp	.-266    	; 0x3450 <start_speed_control_left+0x132>
    355a:	80 e4       	ldi	r24, 0x40	; 64
    355c:	92 ea       	ldi	r25, 0xA2	; 162
    355e:	af ef       	ldi	r26, 0xFF	; 255
    3560:	bf ef       	ldi	r27, 0xFF	; 255
    3562:	80 93 01 03 	sts	0x0301, r24
    3566:	90 93 02 03 	sts	0x0302, r25
    356a:	a0 93 03 03 	sts	0x0303, r26
    356e:	b0 93 04 03 	sts	0x0304, r27
    3572:	6e cf       	rjmp	.-292    	; 0x3450 <start_speed_control_left+0x132>

00003574 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    3574:	85 b7       	in	r24, 0x35	; 53
    3576:	80 61       	ori	r24, 0x10	; 16
    3578:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    357a:	2f ef       	ldi	r18, 0xFF	; 255
    357c:	21 b9       	out	0x01, r18	; 1
	PORTA = 0x00;			// proximity pulses turned off
    357e:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3580:	87 ef       	ldi	r24, 0xF7	; 247
    3582:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    3584:	80 ee       	ldi	r24, 0xE0	; 224
    3586:	85 b9       	out	0x05, r24	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    3588:	80 ef       	ldi	r24, 0xF0	; 240
    358a:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    358c:	80 eb       	ldi	r24, 0xB0	; 176
    358e:	88 b9       	out	0x08, r24	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3590:	8c ef       	ldi	r24, 0xFC	; 252
    3592:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x03;			// default for unused pins is 0
    3594:	83 e0       	ldi	r24, 0x03	; 3
    3596:	8b b9       	out	0x0b, r24	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    3598:	2d b9       	out	0x0d, r18	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    359a:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    359c:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    359e:	23 bb       	out	0x13, r18	; 19
	if(hardwareRevision == HW_REV_3_0) {
    35a0:	90 91 53 04 	lds	r25, 0x0453
    35a4:	99 23       	and	r25, r25
    35a6:	99 f4       	brne	.+38     	; 0x35ce <initPortsIO+0x5a>
		PORTG = 0x00;		// default for unused pins is 0
    35a8:	14 ba       	out	0x14, r1	; 20
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    35aa:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    35ae:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    35b2:	8f e0       	ldi	r24, 0x0F	; 15
    35b4:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
    35b8:	80 91 05 01 	lds	r24, 0x0105
    35bc:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    35c0:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    35c4:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    35c8:	10 92 0b 01 	sts	0x010B, r1
    35cc:	08 95       	ret

	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    35ce:	91 30       	cpi	r25, 0x01	; 1
    35d0:	89 f4       	brne	.+34     	; 0x35f4 <initPortsIO+0x80>
		PORTG = 0x00;		// default for unused pins is 0
    35d2:	14 ba       	out	0x14, r1	; 20
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    35d4:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    35d8:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    35dc:	8f e0       	ldi	r24, 0x0F	; 15
    35de:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
    35e2:	80 93 05 01 	sts	0x0105, r24
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    35e6:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    35ea:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    35ee:	10 92 0b 01 	sts	0x010B, r1
    35f2:	08 95       	ret
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    35f4:	92 30       	cpi	r25, 0x02	; 2
    35f6:	99 f4       	brne	.+38     	; 0x361e <initPortsIO+0xaa>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    35f8:	88 e0       	ldi	r24, 0x08	; 8
    35fa:	84 bb       	out	0x14, r24	; 20
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    35fc:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3600:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    3604:	8f e0       	ldi	r24, 0x0F	; 15
    3606:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
    360a:	80 93 05 01 	sts	0x0105, r24
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    360e:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3612:	20 93 0a 01 	sts	0x010A, r18
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    3616:	87 ef       	ldi	r24, 0xF7	; 247
    3618:	80 93 0b 01 	sts	0x010B, r24
    361c:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    361e:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3622:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    3626:	8f e0       	ldi	r24, 0x0F	; 15
    3628:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    362c:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3630:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
    3634:	99 23       	and	r25, r25
    3636:	41 f2       	breq	.-112    	; 0x35c8 <initPortsIO+0x54>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    3638:	91 30       	cpi	r25, 0x01	; 1
    363a:	31 f2       	breq	.-116    	; 0x35c8 <initPortsIO+0x54>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    363c:	92 30       	cpi	r25, 0x02	; 2
    363e:	59 f3       	breq	.-42     	; 0x3616 <initPortsIO+0xa2>
    3640:	08 95       	ret

00003642 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    3642:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3646:	10 92 bc 00 	sts	0x00BC, r1
}
    364a:	08 95       	ret

0000364c <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    364c:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    364e:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3650:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    365a:	08 95       	ret

0000365c <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    365c:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    365e:	84 ea       	ldi	r24, 0xA4	; 164
    3660:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3664:	80 91 bc 00 	lds	r24, 0x00BC
    3668:	87 ff       	sbrs	r24, 7
    366a:	fc cf       	rjmp	.-8      	; 0x3664 <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    366c:	80 91 b9 00 	lds	r24, 0x00B9
    3670:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3672:	88 30       	cpi	r24, 0x08	; 8
    3674:	21 f0       	breq	.+8      	; 0x367e <i2c_start+0x22>
    3676:	80 31       	cpi	r24, 0x10	; 16
    3678:	11 f0       	breq	.+4      	; 0x367e <i2c_start+0x22>
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	08 95       	ret
		//usartTransmit(twst);
		return 1;
	}

	// send device address
	TWDR = address;
    367e:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    3682:	84 e8       	ldi	r24, 0x84	; 132
    3684:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3688:	80 91 bc 00 	lds	r24, 0x00BC
    368c:	87 ff       	sbrs	r24, 7
    368e:	fc cf       	rjmp	.-8      	; 0x3688 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3690:	90 91 b9 00 	lds	r25, 0x00B9
    3694:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3696:	98 31       	cpi	r25, 0x18	; 24
    3698:	29 f0       	breq	.+10     	; 0x36a4 <i2c_start+0x48>
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	90 34       	cpi	r25, 0x40	; 64
    369e:	09 f0       	breq	.+2      	; 0x36a2 <i2c_start+0x46>
    36a0:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}

	return 0;

}/* i2c_start */
    36a2:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	08 95       	ret

000036a8 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    36a8:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    36aa:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    36ac:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    36ae:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    36b0:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    36b4:	80 91 bc 00 	lds	r24, 0x00BC
    36b8:	87 ff       	sbrs	r24, 7
    36ba:	fc cf       	rjmp	.-8      	; 0x36b4 <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    36bc:	80 91 b9 00 	lds	r24, 0x00B9
    36c0:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    36c2:	88 30       	cpi	r24, 0x08	; 8
    36c4:	11 f0       	breq	.+4      	; 0x36ca <i2c_start_wait+0x22>
    36c6:	80 31       	cpi	r24, 0x10	; 16
    36c8:	99 f7       	brne	.-26     	; 0x36b0 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
    36ca:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    36ce:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    36d2:	80 91 bc 00 	lds	r24, 0x00BC
    36d6:	87 ff       	sbrs	r24, 7
    36d8:	fc cf       	rjmp	.-8      	; 0x36d2 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    36da:	80 91 b9 00 	lds	r24, 0x00B9
    36de:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    36e0:	80 32       	cpi	r24, 0x20	; 32
    36e2:	11 f0       	breq	.+4      	; 0x36e8 <i2c_start_wait+0x40>
    36e4:	88 35       	cpi	r24, 0x58	; 88
    36e6:	39 f4       	brne	.+14     	; 0x36f6 <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    36e8:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    36ec:	80 91 bc 00 	lds	r24, 0x00BC
    36f0:	84 fd       	sbrc	r24, 4
    36f2:	fc cf       	rjmp	.-8      	; 0x36ec <i2c_start_wait+0x44>
    36f4:	dd cf       	rjmp	.-70     	; 0x36b0 <i2c_start_wait+0x8>
    36f6:	08 95       	ret

000036f8 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    36f8:	84 e9       	ldi	r24, 0x94	; 148
    36fa:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    36fe:	80 91 bc 00 	lds	r24, 0x00BC
    3702:	84 fd       	sbrc	r24, 4
    3704:	fc cf       	rjmp	.-8      	; 0x36fe <i2c_stop+0x6>

}/* i2c_stop */
    3706:	08 95       	ret

00003708 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3708:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    370c:	84 e8       	ldi	r24, 0x84	; 132
    370e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3712:	80 91 bc 00 	lds	r24, 0x00BC
    3716:	87 ff       	sbrs	r24, 7
    3718:	fc cf       	rjmp	.-8      	; 0x3712 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    371a:	80 91 b9 00 	lds	r24, 0x00B9
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	88 7f       	andi	r24, 0xF8	; 248
    3722:	88 32       	cpi	r24, 0x28	; 40
    3724:	09 f0       	breq	.+2      	; 0x3728 <i2c_write+0x20>
    3726:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    3728:	89 2f       	mov	r24, r25
    372a:	08 95       	ret

0000372c <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    372c:	84 ec       	ldi	r24, 0xC4	; 196
    372e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3732:	80 91 bc 00 	lds	r24, 0x00BC
    3736:	87 ff       	sbrs	r24, 7
    3738:	fc cf       	rjmp	.-8      	; 0x3732 <i2c_readAck+0x6>

    return TWDR;
    373a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    373e:	08 95       	ret

00003740 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3740:	84 e8       	ldi	r24, 0x84	; 132
    3742:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3746:	80 91 bc 00 	lds	r24, 0x00BC
    374a:	87 ff       	sbrs	r24, 7
    374c:	fc cf       	rjmp	.-8      	; 0x3746 <i2c_readNak+0x6>
	
    return TWDR;
    374e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3752:	08 95       	ret

00003754 <i2c_rep_start>:
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    3754:	98 2f       	mov	r25, r24
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3756:	84 ea       	ldi	r24, 0xA4	; 164
    3758:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    375c:	80 91 bc 00 	lds	r24, 0x00BC
    3760:	87 ff       	sbrs	r24, 7
    3762:	fc cf       	rjmp	.-8      	; 0x375c <i2c_rep_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3764:	80 91 b9 00 	lds	r24, 0x00B9
    3768:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    376a:	88 30       	cpi	r24, 0x08	; 8
    376c:	21 f0       	breq	.+8      	; 0x3776 <i2c_rep_start+0x22>
    376e:	80 31       	cpi	r24, 0x10	; 16
    3770:	11 f0       	breq	.+4      	; 0x3776 <i2c_rep_start+0x22>
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	08 95       	ret
		//usartTransmit(twst);
		return 1;
	}

	// send device address
	TWDR = address;
    3776:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    377a:	84 e8       	ldi	r24, 0x84	; 132
    377c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3780:	80 91 bc 00 	lds	r24, 0x00BC
    3784:	87 ff       	sbrs	r24, 7
    3786:	fc cf       	rjmp	.-8      	; 0x3780 <i2c_rep_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3788:	90 91 b9 00 	lds	r25, 0x00B9
    378c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    378e:	98 31       	cpi	r25, 0x18	; 24
    3790:	29 f0       	breq	.+10     	; 0x379c <i2c_rep_start+0x48>
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	90 34       	cpi	r25, 0x40	; 64
    3796:	09 f0       	breq	.+2      	; 0x379a <i2c_rep_start+0x46>
    3798:	81 e0       	ldi	r24, 0x01	; 1
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    379a:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	08 95       	ret

000037a0 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    37a0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    37a4:	80 e1       	ldi	r24, 0x10	; 16
    37a6:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    37aa:	e0 ec       	ldi	r30, 0xC0	; 192
    37ac:	f0 e0       	ldi	r31, 0x00	; 0
    37ae:	80 81       	ld	r24, Z
    37b0:	82 60       	ori	r24, 0x02	; 2
    37b2:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    37b4:	e1 ec       	ldi	r30, 0xC1	; 193
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	80 81       	ld	r24, Z
    37ba:	88 69       	ori	r24, 0x98	; 152
    37bc:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    37be:	e2 ec       	ldi	r30, 0xC2	; 194
    37c0:	f0 e0       	ldi	r31, 0x00	; 0
    37c2:	80 81       	ld	r24, Z
    37c4:	86 60       	ori	r24, 0x06	; 6
    37c6:	80 83       	st	Z, r24



}
    37c8:	08 95       	ret

000037ca <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    37ca:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    37ce:	80 e1       	ldi	r24, 0x10	; 16
    37d0:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    37d4:	e8 ec       	ldi	r30, 0xC8	; 200
    37d6:	f0 e0       	ldi	r31, 0x00	; 0
    37d8:	80 81       	ld	r24, Z
    37da:	82 60       	ori	r24, 0x02	; 2
    37dc:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    37de:	e9 ec       	ldi	r30, 0xC9	; 201
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	80 81       	ld	r24, Z
    37e4:	88 61       	ori	r24, 0x18	; 24
    37e6:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    37e8:	ea ec       	ldi	r30, 0xCA	; 202
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	80 81       	ld	r24, Z
    37ee:	86 60       	ori	r24, 0x06	; 6
    37f0:	80 83       	st	Z, r24

}
    37f2:	08 95       	ret

000037f4 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    37f4:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    37f8:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    37fc:	10 92 c2 00 	sts	0x00C2, r1

}
    3800:	08 95       	ret

00003802 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {
    3802:	98 2f       	mov	r25, r24

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3804:	80 91 c0 00 	lds	r24, 0x00C0
    3808:	85 ff       	sbrs	r24, 5
    380a:	fc cf       	rjmp	.-8      	; 0x3804 <usart0Transmit+0x2>
	UDR0 = data;						// put data into buffer, sends the data
    380c:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
    3810:	66 23       	and	r22, r22
    3812:	21 f0       	breq	.+8      	; 0x381c <usart0Transmit+0x1a>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3814:	80 91 c0 00 	lds	r24, 0x00C0
    3818:	86 ff       	sbrs	r24, 6
    381a:	fc cf       	rjmp	.-8      	; 0x3814 <usart0Transmit+0x12>
    381c:	08 95       	ret

0000381e <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {
    381e:	98 2f       	mov	r25, r24

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    3820:	80 91 c8 00 	lds	r24, 0x00C8
    3824:	85 ff       	sbrs	r24, 5
    3826:	fc cf       	rjmp	.-8      	; 0x3820 <usart1Transmit+0x2>
	UDR1 = data;						// put data into buffer, sends the data
    3828:	90 93 ce 00 	sts	0x00CE, r25
	if(isBlocking) {
    382c:	66 23       	and	r22, r22
    382e:	21 f0       	breq	.+8      	; 0x3838 <usart1Transmit+0x1a>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    3830:	80 91 c8 00 	lds	r24, 0x00C8
    3834:	86 ff       	sbrs	r24, 6
    3836:	fc cf       	rjmp	.-8      	; 0x3830 <usart1Transmit+0x12>
    3838:	08 95       	ret

0000383a <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    383a:	80 91 c0 00 	lds	r24, 0x00C0
    383e:	80 95       	com	r24
		return 0;
	} else {
		return 1;
	}

}
    3840:	88 1f       	adc	r24, r24
    3842:	88 27       	eor	r24, r24
    3844:	88 1f       	adc	r24, r24
    3846:	08 95       	ret

00003848 <usart0Receive>:

unsigned char usart0Receive() {
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    384c:	80 91 c0 00 	lds	r24, 0x00C0
    3850:	87 fd       	sbrc	r24, 7
    3852:	0a c0       	rjmp	.+20     	; 0x3868 <usart0Receive+0x20>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3854:	2f 5f       	subi	r18, 0xFF	; 255
    3856:	3f 4f       	sbci	r19, 0xFF	; 255

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    3858:	27 39       	cpi	r18, 0x97	; 151
    385a:	31 05       	cpc	r19, r1
    385c:	b9 f7       	brne	.-18     	; 0x384c <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	80 93 1a 03 	sts	0x031A, r24
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	08 95       	ret
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3868:	80 91 c6 00 	lds	r24, 0x00C6

}
    386c:	08 95       	ret

0000386e <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    386e:	1f 92       	push	r1
    3870:	0f 92       	push	r0
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	0f 92       	push	r0
    3876:	0b b6       	in	r0, 0x3b	; 59
    3878:	0f 92       	push	r0
    387a:	11 24       	eor	r1, r1
    387c:	2f 93       	push	r18
    387e:	3f 93       	push	r19
    3880:	4f 93       	push	r20
    3882:	5f 93       	push	r21
    3884:	6f 93       	push	r22
    3886:	7f 93       	push	r23
    3888:	8f 93       	push	r24
    388a:	9f 93       	push	r25
    388c:	af 93       	push	r26
    388e:	bf 93       	push	r27
    3890:	ef 93       	push	r30
    3892:	ff 93       	push	r31

	char receivedByte = UDR0;
    3894:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    3898:	80 91 50 04 	lds	r24, 0x0450
    389c:	8e 30       	cpi	r24, 0x0E	; 14
    389e:	c1 f1       	breq	.+112    	; 0x3910 <__vector_25+0xa2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    38a0:	8f 30       	cpi	r24, 0x0F	; 15
    38a2:	31 f1       	breq	.+76     	; 0x38f0 <__vector_25+0x82>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    38a4:	80 91 0d 02 	lds	r24, 0x020D
    38a8:	88 23       	and	r24, r24
    38aa:	09 f0       	breq	.+2      	; 0x38ae <__vector_25+0x40>
    38ac:	46 c0       	rjmp	.+140    	; 0x393a <__vector_25+0xcc>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    38ae:	80 91 1f 04 	lds	r24, 0x041F
    38b2:	81 30       	cpi	r24, 0x01	; 1
    38b4:	09 f4       	brne	.+2      	; 0x38b8 <__vector_25+0x4a>
    38b6:	46 c0       	rjmp	.+140    	; 0x3944 <__vector_25+0xd6>
    38b8:	82 30       	cpi	r24, 0x02	; 2
    38ba:	61 f5       	brne	.+88     	; 0x3914 <__vector_25+0xa6>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    38bc:	40 91 21 04 	lds	r20, 0x0421
    38c0:	44 23       	and	r20, r20
    38c2:	09 f4       	brne	.+2      	; 0x38c6 <__vector_25+0x58>
    38c4:	5e c0       	rjmp	.+188    	; 0x3982 <__vector_25+0x114>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    38c6:	41 30       	cpi	r20, 0x01	; 1
    38c8:	29 f5       	brne	.+74     	; 0x3914 <__vector_25+0xa6>
						rfAddress |= ((unsigned int)receivedByte<<8);
    38ca:	39 2f       	mov	r19, r25
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	80 91 11 03 	lds	r24, 0x0311
    38d2:	90 91 12 03 	lds	r25, 0x0312
    38d6:	82 2b       	or	r24, r18
    38d8:	93 2b       	or	r25, r19
    38da:	90 93 12 03 	sts	0x0312, r25
    38de:	80 93 11 03 	sts	0x0311, r24
						addressReceived = 1;
    38e2:	40 93 20 04 	sts	0x0420, r20
						menuState = 0;
    38e6:	10 92 21 04 	sts	0x0421, r1
						chooseMenu = 1;
    38ea:	40 93 0d 02 	sts	0x020D, r20
    38ee:	12 c0       	rjmp	.+36     	; 0x3914 <__vector_25+0xa6>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    38f0:	9b 32       	cpi	r25, 0x2B	; 43
    38f2:	89 f1       	breq	.+98     	; 0x3956 <__vector_25+0xe8>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    38f4:	9d 32       	cpi	r25, 0x2D	; 45
    38f6:	e9 f1       	breq	.+122    	; 0x3972 <__vector_25+0x104>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    38f8:	97 36       	cpi	r25, 0x67	; 103
    38fa:	09 f4       	brne	.+2      	; 0x38fe <__vector_25+0x90>
    38fc:	4a c0       	rjmp	.+148    	; 0x3992 <__vector_25+0x124>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    38fe:	93 37       	cpi	r25, 0x73	; 115
    3900:	49 f4       	brne	.+18     	; 0x3914 <__vector_25+0xa6>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    3902:	8d ef       	ldi	r24, 0xFD	; 253
    3904:	9f e0       	ldi	r25, 0x0F	; 15
    3906:	60 91 50 05 	lds	r22, 0x0550
    390a:	0e 94 64 5c 	call	0xb8c8	; 0xb8c8 <__eewr_byte_m2560>
    390e:	02 c0       	rjmp	.+4      	; 0x3914 <__vector_25+0xa6>

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    3910:	9a 3a       	cpi	r25, 0xAA	; 170
    3912:	59 f1       	breq	.+86     	; 0x396a <__vector_25+0xfc>
			}
		}

	}

}
    3914:	ff 91       	pop	r31
    3916:	ef 91       	pop	r30
    3918:	bf 91       	pop	r27
    391a:	af 91       	pop	r26
    391c:	9f 91       	pop	r25
    391e:	8f 91       	pop	r24
    3920:	7f 91       	pop	r23
    3922:	6f 91       	pop	r22
    3924:	5f 91       	pop	r21
    3926:	4f 91       	pop	r20
    3928:	3f 91       	pop	r19
    392a:	2f 91       	pop	r18
    392c:	0f 90       	pop	r0
    392e:	0b be       	out	0x3b, r0	; 59
    3930:	0f 90       	pop	r0
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	0f 90       	pop	r0
    3936:	1f 90       	pop	r1
    3938:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    393a:	10 92 0d 02 	sts	0x020D, r1
			menuChoice = receivedByte;
    393e:	90 93 1f 04 	sts	0x041F, r25
    3942:	e8 cf       	rjmp	.-48     	; 0x3914 <__vector_25+0xa6>
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    3944:	9a 3a       	cpi	r25, 0xAA	; 170
    3946:	91 f1       	breq	.+100    	; 0x39ac <__vector_25+0x13e>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    3948:	95 35       	cpi	r25, 0x55	; 85
    394a:	21 f7       	brne	.-56     	; 0x3914 <__vector_25+0xa6>
						chooseMenu = 1;
    394c:	80 93 0d 02 	sts	0x020D, r24
						menuChoice = 0;
    3950:	10 92 1f 04 	sts	0x041F, r1
    3954:	df cf       	rjmp	.-66     	; 0x3914 <__vector_25+0xa6>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3956:	80 91 50 05 	lds	r24, 0x0550
    395a:	8f 3f       	cpi	r24, 0xFF	; 255
    395c:	19 f0       	breq	.+6      	; 0x3964 <__vector_25+0xf6>
				currentOsccal++;
    395e:	8f 5f       	subi	r24, 0xFF	; 255
    3960:	80 93 50 05 	sts	0x0550, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    3964:	80 93 66 00 	sts	0x0066, r24
    3968:	d5 cf       	rjmp	.-86     	; 0x3914 <__vector_25+0xa6>
	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	80 93 d8 04 	sts	0x04D8, r24
    3970:	d1 cf       	rjmp	.-94     	; 0x3914 <__vector_25+0xa6>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3972:	80 91 50 05 	lds	r24, 0x0550
    3976:	88 23       	and	r24, r24
    3978:	a9 f3       	breq	.-22     	; 0x3964 <__vector_25+0xf6>
				currentOsccal--;	
    397a:	81 50       	subi	r24, 0x01	; 1
    397c:	80 93 50 05 	sts	0x0550, r24
    3980:	f1 cf       	rjmp	.-30     	; 0x3964 <__vector_25+0xf6>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    3982:	90 93 11 03 	sts	0x0311, r25
    3986:	10 92 12 03 	sts	0x0312, r1
						menuState = 1;
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	80 93 21 04 	sts	0x0421, r24
    3990:	c1 cf       	rjmp	.-126    	; 0x3914 <__vector_25+0xa6>
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
    3992:	80 91 23 04 	lds	r24, 0x0423
    3996:	61 e0       	ldi	r22, 0x01	; 1
    3998:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
			currentOsccal = OSCCAL;
    399c:	80 91 66 00 	lds	r24, 0x0066
    39a0:	80 93 50 05 	sts	0x0550, r24
			usart0Transmit(currentOsccal,1);
    39a4:	61 e0       	ldi	r22, 0x01	; 1
    39a6:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    39aa:	b4 cf       	rjmp	.-152    	; 0x3914 <__vector_25+0xa6>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    39ac:	80 93 22 04 	sts	0x0422, r24
    39b0:	b1 cf       	rjmp	.-158    	; 0x3914 <__vector_25+0xa6>

000039b2 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    39b2:	86 b1       	in	r24, 0x06	; 6
    39b4:	46 b1       	in	r20, 0x06	; 6
    39b6:	26 b1       	in	r18, 0x06	; 6
    39b8:	66 b1       	in	r22, 0x06	; 6
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	28 70       	andi	r18, 0x08	; 8
    39be:	30 70       	andi	r19, 0x00	; 0
    39c0:	35 95       	asr	r19
    39c2:	27 95       	ror	r18
    39c4:	35 95       	asr	r19
    39c6:	27 95       	ror	r18
    39c8:	35 95       	asr	r19
    39ca:	27 95       	ror	r18
    39cc:	22 0f       	add	r18, r18
    39ce:	33 1f       	adc	r19, r19
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	44 70       	andi	r20, 0x04	; 4
    39d4:	50 70       	andi	r21, 0x00	; 0
    39d6:	55 95       	asr	r21
    39d8:	47 95       	ror	r20
    39da:	55 95       	asr	r21
    39dc:	47 95       	ror	r20
    39de:	24 0f       	add	r18, r20
    39e0:	35 1f       	adc	r19, r21
    39e2:	22 0f       	add	r18, r18
    39e4:	33 1f       	adc	r19, r19
    39e6:	70 e0       	ldi	r23, 0x00	; 0
    39e8:	62 70       	andi	r22, 0x02	; 2
    39ea:	70 70       	andi	r23, 0x00	; 0
    39ec:	75 95       	asr	r23
    39ee:	67 95       	ror	r22
    39f0:	26 0f       	add	r18, r22
    39f2:	37 1f       	adc	r19, r23
    39f4:	22 0f       	add	r18, r18
    39f6:	33 1f       	adc	r19, r19
    39f8:	81 70       	andi	r24, 0x01	; 1
}
    39fa:	82 0f       	add	r24, r18
    39fc:	08 95       	ret

000039fe <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    39fe:	1f 92       	push	r1
    3a00:	0f 92       	push	r0
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	0f 92       	push	r0
    3a06:	11 24       	eor	r1, r1

}
    3a08:	0f 90       	pop	r0
    3a0a:	0f be       	out	0x3f, r0	; 63
    3a0c:	0f 90       	pop	r0
    3a0e:	1f 90       	pop	r1
    3a10:	18 95       	reti

00003a12 <getTime100MicroSec>:
	pwm_left = 0;
	initPeripherals();

}

unsigned long int getTime100MicroSec() {
    3a12:	60 91 4c 04 	lds	r22, 0x044C
    3a16:	70 91 4d 04 	lds	r23, 0x044D
	return clockTick;
}
    3a1a:	80 91 4e 04 	lds	r24, 0x044E
    3a1e:	90 91 4f 04 	lds	r25, 0x044F
    3a22:	08 95       	ret

00003a24 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	80 93 bb 02 	sts	0x02BB, r24
}
    3a2a:	08 95       	ret

00003a2c <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	a0 e0       	ldi	r26, 0x00	; 0
    3a32:	b0 e0       	ldi	r27, 0x00	; 0
    3a34:	80 93 d1 02 	sts	0x02D1, r24
    3a38:	90 93 d2 02 	sts	0x02D2, r25
    3a3c:	a0 93 d3 02 	sts	0x02D3, r26
    3a40:	b0 93 d4 02 	sts	0x02D4, r27
	rightMotSteps = 0;
    3a44:	80 93 cd 02 	sts	0x02CD, r24
    3a48:	90 93 ce 02 	sts	0x02CE, r25
    3a4c:	a0 93 cf 02 	sts	0x02CF, r26
    3a50:	b0 93 d0 02 	sts	0x02D0, r27
	theta = 0;
    3a54:	80 93 77 04 	sts	0x0477, r24
    3a58:	90 93 78 04 	sts	0x0478, r25
    3a5c:	a0 93 79 04 	sts	0x0479, r26
    3a60:	b0 93 7a 04 	sts	0x047A, r27
	xPos = 0;
    3a64:	80 93 7f 04 	sts	0x047F, r24
    3a68:	90 93 80 04 	sts	0x0480, r25
    3a6c:	a0 93 81 04 	sts	0x0481, r26
    3a70:	b0 93 82 04 	sts	0x0482, r27
	yPos = 0;
    3a74:	80 93 83 04 	sts	0x0483, r24
    3a78:	90 93 84 04 	sts	0x0484, r25
    3a7c:	a0 93 85 04 	sts	0x0485, r26
    3a80:	b0 93 86 04 	sts	0x0486, r27
	rightDist = 0;
    3a84:	80 93 9f 04 	sts	0x049F, r24
    3a88:	90 93 a0 04 	sts	0x04A0, r25
    3a8c:	a0 93 a1 04 	sts	0x04A1, r26
    3a90:	b0 93 a2 04 	sts	0x04A2, r27
	leftDist = 0;
    3a94:	80 93 9b 04 	sts	0x049B, r24
    3a98:	90 93 9c 04 	sts	0x049C, r25
    3a9c:	a0 93 9d 04 	sts	0x049D, r26
    3aa0:	b0 93 9e 04 	sts	0x049E, r27
}
    3aa4:	08 95       	ret

00003aa6 <initPeripherals>:
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3aa6:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    3aa8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    3aaa:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    3aac:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    3ab0:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    3ab4:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    3ab8:	8e ef       	ldi	r24, 0xFE	; 254
    3aba:	9f e0       	ldi	r25, 0x0F	; 15
    3abc:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__eerd_word_m2560>
    3ac0:	90 93 12 03 	sts	0x0312, r25
    3ac4:	80 93 11 03 	sts	0x0311, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    3ac8:	8d ef       	ldi	r24, 0xFD	; 253
    3aca:	9f e0       	ldi	r25, 0x0F	; 15
    3acc:	0e 94 2e 5c 	call	0xb85c	; 0xb85c <__eerd_byte_m2560>
    3ad0:	98 2f       	mov	r25, r24
    3ad2:	80 93 50 05 	sts	0x0550, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    3ad6:	81 50       	subi	r24, 0x01	; 1
    3ad8:	8e 3f       	cpi	r24, 0xFE	; 254
    3ada:	b0 f5       	brcc	.+108    	; 0x3b48 <initPeripherals+0xa2>
		OSCCAL = currentOsccal;
    3adc:	90 93 66 00 	sts	0x0066, r25
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    3ae0:	20 91 11 03 	lds	r18, 0x0311
    3ae4:	30 91 12 03 	lds	r19, 0x0312
    3ae8:	c9 01       	movw	r24, r18
    3aea:	81 58       	subi	r24, 0x81	; 129
    3aec:	9c 40       	sbci	r25, 0x0C	; 12
    3aee:	03 97       	sbiw	r24, 0x03	; 3
    3af0:	10 f4       	brcc	.+4      	; 0x3af6 <initPeripherals+0x50>
		hardwareRevision = HW_REV_3_0;
    3af2:	10 92 53 04 	sts	0x0453, r1
	}

	if(rfAddress == 3200) {
    3af6:	8c e0       	ldi	r24, 0x0C	; 12
    3af8:	20 38       	cpi	r18, 0x80	; 128
    3afa:	38 07       	cpc	r19, r24
    3afc:	71 f1       	breq	.+92     	; 0x3b5a <initPeripherals+0xb4>
		hardwareRevision = HW_REV_3_0_1;
	}

	if(rfAddress > 3203) {
    3afe:	24 58       	subi	r18, 0x84	; 132
    3b00:	3c 40       	sbci	r19, 0x0C	; 12
    3b02:	18 f0       	brcs	.+6      	; 0x3b0a <initPeripherals+0x64>
		hardwareRevision = HW_REV_3_1;
    3b04:	82 e0       	ldi	r24, 0x02	; 2
    3b06:	80 93 53 04 	sts	0x0453, r24
	}

	initCalibration();
    3b0a:	0e 94 f3 3e 	call	0x7de6	; 0x7de6 <initCalibration>
	initPortsIO();
    3b0e:	0e 94 ba 1a 	call	0x3574	; 0x3574 <initPortsIO>
	initAdc();
    3b12:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <initAdc>
	initMotors();
    3b16:	0e 94 78 24 	call	0x48f0	; 0x48f0 <initMotors>
	initRGBleds();
    3b1a:	0e 94 e6 42 	call	0x85cc	; 0x85cc <initRGBleds>
	initSPI();
    3b1e:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <initSPI>
	mirf_init();
    3b22:	0e 94 28 10 	call	0x2050	; 0x2050 <mirf_init>
	if(spiCommError==0) {
    3b26:	80 91 14 03 	lds	r24, 0x0314
    3b2a:	88 23       	and	r24, r24
    3b2c:	29 f4       	brne	.+10     	; 0x3b38 <initPeripherals+0x92>
		rfFlags |= 1;
    3b2e:	80 91 13 03 	lds	r24, 0x0313
    3b32:	81 60       	ori	r24, 0x01	; 1
    3b34:	80 93 13 03 	sts	0x0313, r24
	}
	initUsart0();
    3b38:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <initUsart0>
	initAccelerometer();
    3b3c:	0e 94 ba 4b 	call	0x9774	; 0x9774 <initAccelerometer>
	init_ir_remote_control();
    3b40:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <init_ir_remote_control>

	sei();			// enable global interrupts
    3b44:	78 94       	sei

	
}
    3b46:	08 95       	ret
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    3b48:	60 91 66 00 	lds	r22, 0x0066
    3b4c:	60 93 50 05 	sts	0x0550, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    3b50:	8d ef       	ldi	r24, 0xFD	; 253
    3b52:	9f e0       	ldi	r25, 0x0F	; 15
    3b54:	0e 94 64 5c 	call	0xb8c8	; 0xb8c8 <__eewr_byte_m2560>
    3b58:	c3 cf       	rjmp	.-122    	; 0x3ae0 <initPeripherals+0x3a>
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
		hardwareRevision = HW_REV_3_0_1;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	80 93 53 04 	sts	0x0453, r24
    3b60:	d4 cf       	rjmp	.-88     	; 0x3b0a <initPeripherals+0x64>

00003b62 <sleep>:
// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {

}

void sleep(unsigned char seconds) {
    3b62:	cf 93       	push	r28
    3b64:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    3b66:	9e e1       	ldi	r25, 0x1E	; 30
    3b68:	89 9f       	mul	r24, r25
    3b6a:	e0 01       	movw	r28, r0
    3b6c:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    3b6e:	80 91 68 00 	lds	r24, 0x0068
    3b72:	8d 7f       	andi	r24, 0xFD	; 253
    3b74:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    3b78:	80 91 6c 00 	lds	r24, 0x006C
    3b7c:	8f 77       	andi	r24, 0x7F	; 127
    3b7e:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    3b82:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    3b84:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    3b88:	80 91 7a 00 	lds	r24, 0x007A
    3b8c:	80 61       	ori	r24, 0x10	; 16
    3b8e:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    3b92:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    3b96:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    3b9a:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    3b9e:	88 b3       	in	r24, 0x18	; 24
    3ba0:	87 60       	ori	r24, 0x07	; 7
    3ba2:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    3ba4:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    3ba8:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    3bac:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    3bb0:	89 b3       	in	r24, 0x19	; 25
    3bb2:	87 60       	ori	r24, 0x07	; 7
    3bb4:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    3bb6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    3bba:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3bbe:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <closeUsart>
	closeSPI();
    3bc2:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <closeSPI>
	i2c_close();
    3bc6:	0e 94 21 1b 	call	0x3642	; 0x3642 <i2c_close>

	// set port pins
	initPortsIO();
    3bca:	0e 94 ba 1a 	call	0x3574	; 0x3574 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    3bce:	83 b7       	in	r24, 0x33	; 51
    3bd0:	8f 60       	ori	r24, 0x0F	; 15
    3bd2:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    3bda:	80 91 b0 00 	lds	r24, 0x00B0
    3bde:	8d 7f       	andi	r24, 0xFD	; 253
    3be0:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    3be4:	80 91 b1 00 	lds	r24, 0x00B1
    3be8:	87 60       	ori	r24, 0x07	; 7
    3bea:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    3bee:	20 97       	sbiw	r28, 0x00	; 0
    3bf0:	19 f0       	breq	.+6      	; 0x3bf8 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3bf2:	88 95       	sleep
		pause--;
    3bf4:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    3bf6:	e9 f7       	brne	.-6      	; 0x3bf2 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    3bf8:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    3bfa:	80 91 b1 00 	lds	r24, 0x00B1
    3bfe:	88 7f       	andi	r24, 0xF8	; 248
    3c00:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3c04:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    3c08:	80 91 b0 00 	lds	r24, 0x00B0
    3c0c:	82 60       	ori	r24, 0x02	; 2
    3c0e:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3c12:	8f ef       	ldi	r24, 0xFF	; 255
    3c14:	80 93 08 02 	sts	0x0208, r24
	pwm_green = 255;
    3c18:	80 93 09 02 	sts	0x0209, r24
	pwm_blue = 255;
    3c1c:	80 93 0a 02 	sts	0x020A, r24
	pwm_right = 0;
    3c20:	10 92 f2 02 	sts	0x02F2, r1
    3c24:	10 92 f1 02 	sts	0x02F1, r1
	pwm_left = 0;
    3c28:	10 92 f4 02 	sts	0x02F4, r1
    3c2c:	10 92 f3 02 	sts	0x02F3, r1
	initPeripherals();
    3c30:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <initPeripherals>

}
    3c34:	df 91       	pop	r29
    3c36:	cf 91       	pop	r28
    3c38:	08 95       	ret

00003c3a <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    3c3a:	ea e7       	ldi	r30, 0x7A	; 122
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	10 82       	st	Z, r1
	ADCSRB = 0;
    3c40:	2b e7       	ldi	r18, 0x7B	; 123
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	d9 01       	movw	r26, r18
    3c46:	1c 92       	st	X, r1
	ADMUX = 0;
    3c48:	ac e7       	ldi	r26, 0x7C	; 124
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	1c 92       	st	X, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    3c4e:	80 81       	ld	r24, Z
    3c50:	86 60       	ori	r24, 0x06	; 6
    3c52:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3c54:	8c 91       	ld	r24, X
    3c56:	80 64       	ori	r24, 0x40	; 64
    3c58:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    3c5a:	80 81       	ld	r24, Z
    3c5c:	80 62       	ori	r24, 0x20	; 32
    3c5e:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3c60:	d9 01       	movw	r26, r18
    3c62:	8c 91       	ld	r24, X
    3c64:	88 7f       	andi	r24, 0xF8	; 248
    3c66:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    3c68:	80 81       	ld	r24, Z
    3c6a:	88 60       	ori	r24, 0x08	; 8
    3c6c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3c6e:	80 81       	ld	r24, Z
    3c70:	80 68       	ori	r24, 0x80	; 128
    3c72:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    3c74:	80 81       	ld	r24, Z
    3c76:	80 64       	ori	r24, 0x40	; 64
    3c78:	80 83       	st	Z, r24

}
    3c7a:	08 95       	ret

00003c7c <__vector_29>:

ISR(ADC_vect) {
    3c7c:	1f 92       	push	r1
    3c7e:	0f 92       	push	r0
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	0f 92       	push	r0
    3c84:	0b b6       	in	r0, 0x3b	; 59
    3c86:	0f 92       	push	r0
    3c88:	11 24       	eor	r1, r1
    3c8a:	1f 93       	push	r17
    3c8c:	2f 93       	push	r18
    3c8e:	3f 93       	push	r19
    3c90:	4f 93       	push	r20
    3c92:	5f 93       	push	r21
    3c94:	6f 93       	push	r22
    3c96:	7f 93       	push	r23
    3c98:	8f 93       	push	r24
    3c9a:	9f 93       	push	r25
    3c9c:	af 93       	push	r26
    3c9e:	bf 93       	push	r27
    3ca0:	ef 93       	push	r30
    3ca2:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
    3ca4:	80 91 4c 04 	lds	r24, 0x044C
    3ca8:	90 91 4d 04 	lds	r25, 0x044D
    3cac:	a0 91 4e 04 	lds	r26, 0x044E
    3cb0:	b0 91 4f 04 	lds	r27, 0x044F
    3cb4:	8f 3f       	cpi	r24, 0xFF	; 255
    3cb6:	2f ef       	ldi	r18, 0xFF	; 255
    3cb8:	92 07       	cpc	r25, r18
    3cba:	2f ef       	ldi	r18, 0xFF	; 255
    3cbc:	a2 07       	cpc	r26, r18
    3cbe:	2f ef       	ldi	r18, 0xFF	; 255
    3cc0:	b2 07       	cpc	r27, r18
    3cc2:	09 f4       	brne	.+2      	; 0x3cc6 <__vector_29+0x4a>
    3cc4:	b9 c0       	rjmp	.+370    	; 0x3e38 <__vector_29+0x1bc>
		clockTick = 0;
	} else {
		clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    3cc6:	01 96       	adiw	r24, 0x01	; 1
    3cc8:	a1 1d       	adc	r26, r1
    3cca:	b1 1d       	adc	r27, r1
    3ccc:	80 93 4c 04 	sts	0x044C, r24
    3cd0:	90 93 4d 04 	sts	0x044D, r25
    3cd4:	a0 93 4e 04 	sts	0x044E, r26
    3cd8:	b0 93 4f 04 	sts	0x044F, r27
	}								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    3cdc:	80 91 78 00 	lds	r24, 0x0078
    3ce0:	48 2f       	mov	r20, r24
    3ce2:	50 e0       	ldi	r21, 0x00	; 0
	value = (ADCH<<8) | value;
    3ce4:	20 91 79 00 	lds	r18, 0x0079
    3ce8:	92 2f       	mov	r25, r18
    3cea:	80 e0       	ldi	r24, 0x00	; 0
    3cec:	48 2b       	or	r20, r24
    3cee:	59 2b       	or	r21, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3cf0:	80 91 b5 02 	lds	r24, 0x02B5
    3cf4:	82 30       	cpi	r24, 0x02	; 2
    3cf6:	09 f4       	brne	.+2      	; 0x3cfa <__vector_29+0x7e>
    3cf8:	bd c1       	rjmp	.+890    	; 0x4074 <__vector_29+0x3f8>
    3cfa:	83 30       	cpi	r24, 0x03	; 3
    3cfc:	08 f4       	brcc	.+2      	; 0x3d00 <__vector_29+0x84>
    3cfe:	4c c0       	rjmp	.+152    	; 0x3d98 <__vector_29+0x11c>
    3d00:	84 30       	cpi	r24, 0x04	; 4
    3d02:	09 f4       	brne	.+2      	; 0x3d06 <__vector_29+0x8a>
    3d04:	e0 c1       	rjmp	.+960    	; 0x40c6 <__vector_29+0x44a>
    3d06:	84 30       	cpi	r24, 0x04	; 4
    3d08:	08 f0       	brcs	.+2      	; 0x3d0c <__vector_29+0x90>
    3d0a:	2f c1       	rjmp	.+606    	; 0x3f6a <__vector_29+0x2ee>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    3d0c:	80 91 dd 02 	lds	r24, 0x02DD
    3d10:	90 91 de 02 	lds	r25, 0x02DE
    3d14:	48 0f       	add	r20, r24
    3d16:	59 1f       	adc	r21, r25
			left_current_avg = left_current_avg >> 1;
    3d18:	56 95       	lsr	r21
    3d1a:	47 95       	ror	r20
    3d1c:	50 93 de 02 	sts	0x02DE, r21
    3d20:	40 93 dd 02 	sts	0x02DD, r20
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    3d24:	90 91 d4 04 	lds	r25, 0x04D4
    3d28:	92 30       	cpi	r25, 0x02	; 2
    3d2a:	09 f0       	breq	.+2      	; 0x3d2e <__vector_29+0xb2>
    3d2c:	4b c0       	rjmp	.+150    	; 0x3dc4 <__vector_29+0x148>
		switch(irCommAdcTxState) {
    3d2e:	80 91 24 05 	lds	r24, 0x0524
    3d32:	81 30       	cpi	r24, 0x01	; 1
    3d34:	09 f4       	brne	.+2      	; 0x3d38 <__vector_29+0xbc>
    3d36:	7b c2       	rjmp	.+1270   	; 0x422e <__vector_29+0x5b2>
    3d38:	81 30       	cpi	r24, 0x01	; 1
    3d3a:	08 f0       	brcs	.+2      	; 0x3d3e <__vector_29+0xc2>
    3d3c:	f1 c1       	rjmp	.+994    	; 0x4120 <__vector_29+0x4a4>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    3d3e:	80 91 26 05 	lds	r24, 0x0526
    3d42:	81 30       	cpi	r24, 0x01	; 1
    3d44:	09 f4       	brne	.+2      	; 0x3d48 <__vector_29+0xcc>
    3d46:	07 c3       	rjmp	.+1550   	; 0x4356 <__vector_29+0x6da>
    3d48:	90 91 b6 02 	lds	r25, 0x02B6
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3d4c:	80 91 1f 02 	lds	r24, 0x021F
    3d50:	88 30       	cpi	r24, 0x08	; 8
    3d52:	08 f0       	brcs	.+2      	; 0x3d56 <__vector_29+0xda>
    3d54:	50 c1       	rjmp	.+672    	; 0x3ff6 <__vector_29+0x37a>
		ADCSRB &= ~(1 << MUX5);
    3d56:	80 91 7b 00 	lds	r24, 0x007B
    3d5a:	87 7f       	andi	r24, 0xF7	; 247
    3d5c:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + currentAdChannel;
    3d60:	80 91 1f 02 	lds	r24, 0x021F
    3d64:	80 5c       	subi	r24, 0xC0	; 192
    3d66:	80 93 7c 00 	sts	0x007C, r24
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    3d6a:	92 30       	cpi	r25, 0x02	; 2
    3d6c:	09 f4       	brne	.+2      	; 0x3d70 <__vector_29+0xf4>
    3d6e:	50 c1       	rjmp	.+672    	; 0x4010 <__vector_29+0x394>

	}

	//LED_BLUE_OFF;

}
    3d70:	ff 91       	pop	r31
    3d72:	ef 91       	pop	r30
    3d74:	bf 91       	pop	r27
    3d76:	af 91       	pop	r26
    3d78:	9f 91       	pop	r25
    3d7a:	8f 91       	pop	r24
    3d7c:	7f 91       	pop	r23
    3d7e:	6f 91       	pop	r22
    3d80:	5f 91       	pop	r21
    3d82:	4f 91       	pop	r20
    3d84:	3f 91       	pop	r19
    3d86:	2f 91       	pop	r18
    3d88:	1f 91       	pop	r17
    3d8a:	0f 90       	pop	r0
    3d8c:	0b be       	out	0x3b, r0	; 59
    3d8e:	0f 90       	pop	r0
    3d90:	0f be       	out	0x3f, r0	; 63
    3d92:	0f 90       	pop	r0
    3d94:	1f 90       	pop	r1
    3d96:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3d98:	88 23       	and	r24, r24
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <__vector_29+0x122>
    3d9c:	56 c0       	rjmp	.+172    	; 0x3e4a <__vector_29+0x1ce>
    3d9e:	81 30       	cpi	r24, 0x01	; 1
    3da0:	61 f4       	brne	.+24     	; 0x3dba <__vector_29+0x13e>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3da2:	80 91 df 02 	lds	r24, 0x02DF
    3da6:	90 91 e0 02 	lds	r25, 0x02E0
    3daa:	48 0f       	add	r20, r24
    3dac:	59 1f       	adc	r21, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    3dae:	56 95       	lsr	r21
    3db0:	47 95       	ror	r20
    3db2:	50 93 e0 02 	sts	0x02E0, r21
    3db6:	40 93 df 02 	sts	0x02DF, r20
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    3dba:	90 91 d4 04 	lds	r25, 0x04D4
    3dbe:	92 30       	cpi	r25, 0x02	; 2
    3dc0:	09 f4       	brne	.+2      	; 0x3dc4 <__vector_29+0x148>
    3dc2:	b5 cf       	rjmp	.-150    	; 0x3d2e <__vector_29+0xb2>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    3dc4:	91 30       	cpi	r25, 0x01	; 1
    3dc6:	09 f4       	brne	.+2      	; 0x3dca <__vector_29+0x14e>
    3dc8:	34 c1       	rjmp	.+616    	; 0x4032 <__vector_29+0x3b6>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    3dca:	99 23       	and	r25, r25
    3dcc:	09 f0       	breq	.+2      	; 0x3dd0 <__vector_29+0x154>
    3dce:	bc cf       	rjmp	.-136    	; 0x3d48 <__vector_29+0xcc>
		switch(adcSamplingState) {
    3dd0:	90 91 b6 02 	lds	r25, 0x02B6
    3dd4:	92 30       	cpi	r25, 0x02	; 2
    3dd6:	09 f4       	brne	.+2      	; 0x3dda <__vector_29+0x15e>
    3dd8:	32 c3       	rjmp	.+1636   	; 0x443e <__vector_29+0x7c2>
    3dda:	93 30       	cpi	r25, 0x03	; 3
    3ddc:	08 f0       	brcs	.+2      	; 0x3de0 <__vector_29+0x164>
    3dde:	d5 c1       	rjmp	.+938    	; 0x418a <__vector_29+0x50e>
    3de0:	99 23       	and	r25, r25
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <__vector_29+0x16a>
    3de4:	71 c2       	rjmp	.+1250   	; 0x42c8 <__vector_29+0x64c>
    3de6:	91 30       	cpi	r25, 0x01	; 1
    3de8:	09 f0       	breq	.+2      	; 0x3dec <__vector_29+0x170>
    3dea:	b0 cf       	rjmp	.-160    	; 0x3d4c <__vector_29+0xd0>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    3dec:	80 91 21 02 	lds	r24, 0x0221
    3df0:	80 93 1f 02 	sts	0x021F, r24
				leftChannelPhase = leftMotorPhase;
    3df4:	80 91 24 02 	lds	r24, 0x0224
    3df8:	80 93 b8 02 	sts	0x02B8, r24
				adcSaveDataTo = SAVE_TO_PROX;
    3dfc:	10 92 b5 02 	sts	0x02B5, r1
				adcSamplingState = 2;
    3e00:	82 e0       	ldi	r24, 0x02	; 2
    3e02:	80 93 b6 02 	sts	0x02B6, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    3e06:	10 91 d2 04 	lds	r17, 0x04D2
    3e0a:	11 30       	cpi	r17, 0x01	; 1
    3e0c:	09 f4       	brne	.+2      	; 0x3e10 <__vector_29+0x194>
    3e0e:	10 c4       	rjmp	.+2080   	; 0x4630 <__vector_29+0x9b4>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    3e10:	12 30       	cpi	r17, 0x02	; 2
    3e12:	09 f0       	breq	.+2      	; 0x3e16 <__vector_29+0x19a>
    3e14:	99 cf       	rjmp	.-206    	; 0x3d48 <__vector_29+0xcc>
    3e16:	80 91 20 02 	lds	r24, 0x0220
    3e1a:	87 31       	cpi	r24, 0x17	; 23
    3e1c:	09 f0       	breq	.+2      	; 0x3e20 <__vector_29+0x1a4>
    3e1e:	94 cf       	rjmp	.-216    	; 0x3d48 <__vector_29+0xcc>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    3e20:	10 93 d4 04 	sts	0x04D4, r17
					if(irCommTxByteEnqueued==1) {
    3e24:	80 91 26 05 	lds	r24, 0x0526
    3e28:	81 30       	cpi	r24, 0x01	; 1
    3e2a:	09 f4       	brne	.+2      	; 0x3e2e <__vector_29+0x1b2>
    3e2c:	94 c2       	rjmp	.+1320   	; 0x4356 <__vector_29+0x6da>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    3e2e:	10 92 d4 04 	sts	0x04D4, r1
    3e32:	90 91 b6 02 	lds	r25, 0x02B6
    3e36:	8a cf       	rjmp	.-236    	; 0x3d4c <__vector_29+0xd0>


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
		clockTick = 0;
    3e38:	10 92 4c 04 	sts	0x044C, r1
    3e3c:	10 92 4d 04 	sts	0x044D, r1
    3e40:	10 92 4e 04 	sts	0x044E, r1
    3e44:	10 92 4f 04 	sts	0x044F, r1
    3e48:	49 cf       	rjmp	.-366    	; 0x3cdc <__vector_29+0x60>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3e4a:	60 91 20 02 	lds	r22, 0x0220
    3e4e:	6e 30       	cpi	r22, 0x0E	; 14
    3e50:	09 f4       	brne	.+2      	; 0x3e54 <__vector_29+0x1d8>
    3e52:	d1 c2       	rjmp	.+1442   	; 0x43f6 <__vector_29+0x77a>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    3e54:	e6 2f       	mov	r30, r22
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	df 01       	movw	r26, r30
    3e5a:	aa 0f       	add	r26, r26
    3e5c:	bb 1f       	adc	r27, r27
    3e5e:	ab 5d       	subi	r26, 0xDB	; 219
    3e60:	bd 4f       	sbci	r27, 0xFD	; 253
    3e62:	11 96       	adiw	r26, 0x01	; 1
    3e64:	5c 93       	st	X, r21
    3e66:	4e 93       	st	-X, r20
			}

			if(currentProx & 0x01) {
    3e68:	60 ff       	sbrs	r22, 0
    3e6a:	72 c0       	rjmp	.+228    	; 0x3f50 <__vector_29+0x2d4>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    3e6c:	ee 0f       	add	r30, r30
    3e6e:	ff 1f       	adc	r31, r31
    3e70:	ed 5d       	subi	r30, 0xDD	; 221
    3e72:	fd 4f       	sbci	r31, 0xFD	; 253
    3e74:	40 81       	ld	r20, Z
    3e76:	51 81       	ldd	r21, Z+1	; 0x01
    3e78:	2d 91       	ld	r18, X+
    3e7a:	3c 91       	ld	r19, X
    3e7c:	86 2f       	mov	r24, r22
    3e7e:	86 95       	lsr	r24
    3e80:	a8 2f       	mov	r26, r24
    3e82:	b0 e0       	ldi	r27, 0x00	; 0
    3e84:	42 1b       	sub	r20, r18
    3e86:	53 0b       	sbc	r21, r19
    3e88:	aa 0f       	add	r26, r26
    3e8a:	bb 1f       	adc	r27, r27
    3e8c:	fd 01       	movw	r30, r26
    3e8e:	e3 59       	subi	r30, 0x93	; 147
    3e90:	fd 4f       	sbci	r31, 0xFD	; 253
    3e92:	80 81       	ld	r24, Z
    3e94:	91 81       	ldd	r25, Z+1	; 0x01
    3e96:	48 1b       	sub	r20, r24
    3e98:	59 0b       	sbc	r21, r25
    3e9a:	fd 01       	movw	r30, r26
    3e9c:	eb 5a       	subi	r30, 0xAB	; 171
    3e9e:	fd 4f       	sbci	r31, 0xFD	; 253
    3ea0:	51 83       	std	Z+1, r21	; 0x01
    3ea2:	40 83       	st	Z, r20
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    3ea4:	57 fd       	sbrc	r21, 7
    3ea6:	e8 c2       	rjmp	.+1488   	; 0x4478 <__vector_29+0x7fc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    3ea8:	41 50       	subi	r20, 0x01	; 1
    3eaa:	54 40       	sbci	r21, 0x04	; 4
    3eac:	24 f0       	brlt	.+8      	; 0x3eb6 <__vector_29+0x23a>
					proximityResult[currentProx>>1] = 1024;
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	94 e0       	ldi	r25, 0x04	; 4
    3eb2:	91 83       	std	Z+1, r25	; 0x01
    3eb4:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    3eb6:	60 31       	cpi	r22, 0x10	; 16
    3eb8:	70 f4       	brcc	.+28     	; 0x3ed6 <__vector_29+0x25a>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    3eba:	fd 01       	movw	r30, r26
    3ebc:	eb 5a       	subi	r30, 0xAB	; 171
    3ebe:	fd 4f       	sbci	r31, 0xFD	; 253
    3ec0:	01 90       	ld	r0, Z+
    3ec2:	f0 81       	ld	r31, Z
    3ec4:	e0 2d       	mov	r30, r0
    3ec6:	ec 33       	cpi	r30, 0x3C	; 60
    3ec8:	f1 05       	cpc	r31, r1
    3eca:	0c f0       	brlt	.+2      	; 0x3ece <__vector_29+0x252>
    3ecc:	f4 c2       	rjmp	.+1512   	; 0x44b6 <__vector_29+0x83a>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    3ece:	a3 54       	subi	r26, 0x43	; 67
    3ed0:	bd 4f       	sbci	r27, 0xFD	; 253
    3ed2:	ed 93       	st	X+, r30
    3ed4:	fc 93       	st	X, r31
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    3ed6:	80 91 75 04 	lds	r24, 0x0475
    3eda:	88 23       	and	r24, r24
    3edc:	09 f4       	brne	.+2      	; 0x3ee0 <__vector_29+0x264>
    3ede:	06 c2       	rjmp	.+1036   	; 0x42ec <__vector_29+0x670>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3ee0:	80 91 65 02 	lds	r24, 0x0265
    3ee4:	90 91 66 02 	lds	r25, 0x0266
    3ee8:	84 5a       	subi	r24, 0xA4	; 164
    3eea:	91 40       	sbci	r25, 0x01	; 1
    3eec:	b4 f0       	brlt	.+44     	; 0x3f1a <__vector_29+0x29e>
    3eee:	80 91 67 02 	lds	r24, 0x0267
    3ef2:	90 91 68 02 	lds	r25, 0x0268
    3ef6:	84 5a       	subi	r24, 0xA4	; 164
    3ef8:	91 40       	sbci	r25, 0x01	; 1
    3efa:	7c f0       	brlt	.+30     	; 0x3f1a <__vector_29+0x29e>
    3efc:	80 91 69 02 	lds	r24, 0x0269
    3f00:	90 91 6a 02 	lds	r25, 0x026A
    3f04:	84 5a       	subi	r24, 0xA4	; 164
    3f06:	91 40       	sbci	r25, 0x01	; 1
    3f08:	44 f0       	brlt	.+16     	; 0x3f1a <__vector_29+0x29e>
    3f0a:	80 91 6b 02 	lds	r24, 0x026B
    3f0e:	90 91 6c 02 	lds	r25, 0x026C
    3f12:	84 5a       	subi	r24, 0xA4	; 164
    3f14:	91 40       	sbci	r25, 0x01	; 1
    3f16:	0c f0       	brlt	.+2      	; 0x3f1a <__vector_29+0x29e>
    3f18:	e9 c1       	rjmp	.+978    	; 0x42ec <__vector_29+0x670>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	80 93 76 04 	sts	0x0476, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    3f20:	10 92 f4 02 	sts	0x02F4, r1
    3f24:	10 92 f3 02 	sts	0x02F3, r1
						OCR4A = 0;
    3f28:	10 92 a9 00 	sts	0x00A9, r1
    3f2c:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    3f30:	10 92 ab 00 	sts	0x00AB, r1
    3f34:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    3f38:	10 92 f2 02 	sts	0x02F2, r1
    3f3c:	10 92 f1 02 	sts	0x02F1, r1
						OCR3A = 0;
    3f40:	10 92 99 00 	sts	0x0099, r1
    3f44:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    3f48:	10 92 9b 00 	sts	0x009B, r1
    3f4c:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    3f50:	86 2f       	mov	r24, r22
    3f52:	8f 5f       	subi	r24, 0xFF	; 255
    3f54:	80 93 20 02 	sts	0x0220, r24
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    3f58:	88 31       	cpi	r24, 0x18	; 24
    3f5a:	08 f4       	brcc	.+2      	; 0x3f5e <__vector_29+0x2e2>
    3f5c:	2e cf       	rjmp	.-420    	; 0x3dba <__vector_29+0x13e>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    3f5e:	10 92 20 02 	sts	0x0220, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	80 93 bc 02 	sts	0x02BC, r24
    3f68:	28 cf       	rjmp	.-432    	; 0x3dba <__vector_29+0x13e>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3f6a:	86 30       	cpi	r24, 0x06	; 6
    3f6c:	09 f0       	breq	.+2      	; 0x3f70 <__vector_29+0x2f4>
    3f6e:	25 cf       	rjmp	.-438    	; 0x3dba <__vector_29+0x13e>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    3f70:	80 91 02 05 	lds	r24, 0x0502
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	20 91 20 02 	lds	r18, 0x0220
    3f7a:	88 0f       	add	r24, r24
    3f7c:	99 1f       	adc	r25, r25
    3f7e:	88 0f       	add	r24, r24
    3f80:	99 1f       	adc	r25, r25
    3f82:	88 0f       	add	r24, r24
    3f84:	99 1f       	adc	r25, r25
    3f86:	82 0f       	add	r24, r18
    3f88:	91 1d       	adc	r25, r1
    3f8a:	88 0f       	add	r24, r24
    3f8c:	99 1f       	adc	r25, r25
    3f8e:	e0 91 69 08 	lds	r30, 0x0869
    3f92:	f0 91 6a 08 	lds	r31, 0x086A
    3f96:	e8 0f       	add	r30, r24
    3f98:	f9 1f       	adc	r31, r25
    3f9a:	51 83       	std	Z+1, r21	; 0x01
    3f9c:	40 83       	st	Z, r20
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    3f9e:	20 91 20 02 	lds	r18, 0x0220
    3fa2:	82 2f       	mov	r24, r18
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	88 0f       	add	r24, r24
    3fa8:	99 1f       	adc	r25, r25
    3faa:	e0 91 37 0b 	lds	r30, 0x0B37
    3fae:	f0 91 38 0b 	lds	r31, 0x0B38
    3fb2:	e8 0f       	add	r30, r24
    3fb4:	f9 1f       	adc	r31, r25
    3fb6:	80 81       	ld	r24, Z
    3fb8:	91 81       	ldd	r25, Z+1	; 0x01
    3fba:	84 17       	cp	r24, r20
    3fbc:	95 07       	cpc	r25, r21
    3fbe:	20 f4       	brcc	.+8      	; 0x3fc8 <__vector_29+0x34c>
				irCommMaxSensorValueAdc[currentProx] = value;
    3fc0:	51 83       	std	Z+1, r21	; 0x01
    3fc2:	40 83       	st	Z, r20
    3fc4:	20 91 20 02 	lds	r18, 0x0220
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    3fc8:	82 2f       	mov	r24, r18
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	88 0f       	add	r24, r24
    3fce:	99 1f       	adc	r25, r25
    3fd0:	e0 91 c7 05 	lds	r30, 0x05C7
    3fd4:	f0 91 c8 05 	lds	r31, 0x05C8
    3fd8:	e8 0f       	add	r30, r24
    3fda:	f9 1f       	adc	r31, r25
    3fdc:	80 81       	ld	r24, Z
    3fde:	91 81       	ldd	r25, Z+1	; 0x01
    3fe0:	48 17       	cp	r20, r24
    3fe2:	59 07       	cpc	r21, r25
    3fe4:	20 f4       	brcc	.+8      	; 0x3fee <__vector_29+0x372>
				irCommMinSensorValueAdc[currentProx] = value;
    3fe6:	51 83       	std	Z+1, r21	; 0x01
    3fe8:	40 83       	st	Z, r20
    3fea:	20 91 20 02 	lds	r18, 0x0220
			}
			currentProx++;
    3fee:	2f 5f       	subi	r18, 0xFF	; 255
    3ff0:	20 93 20 02 	sts	0x0220, r18
    3ff4:	e2 ce       	rjmp	.-572    	; 0x3dba <__vector_29+0x13e>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    3ff6:	80 91 7b 00 	lds	r24, 0x007B
    3ffa:	88 60       	ori	r24, 0x08	; 8
    3ffc:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + (currentAdChannel-8);
    4000:	80 91 1f 02 	lds	r24, 0x021F
    4004:	88 5c       	subi	r24, 0xC8	; 200
    4006:	80 93 7c 00 	sts	0x007C, r24
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    400a:	92 30       	cpi	r25, 0x02	; 2
    400c:	09 f0       	breq	.+2      	; 0x4010 <__vector_29+0x394>
    400e:	b0 ce       	rjmp	.-672    	; 0x3d70 <__vector_29+0xf4>
    4010:	80 91 d4 04 	lds	r24, 0x04D4
    4014:	88 23       	and	r24, r24
    4016:	09 f0       	breq	.+2      	; 0x401a <__vector_29+0x39e>
    4018:	ab ce       	rjmp	.-682    	; 0x3d70 <__vector_29+0xf4>

		if(hardwareRevision == HW_REV_3_0) {
    401a:	80 91 53 04 	lds	r24, 0x0453
    401e:	88 23       	and	r24, r24
    4020:	09 f0       	breq	.+2      	; 0x4024 <__vector_29+0x3a8>
    4022:	ab c0       	rjmp	.+342    	; 0x417a <__vector_29+0x4fe>
			PORTJ &= 0xF0;
    4024:	80 91 05 01 	lds	r24, 0x0105
    4028:	80 7f       	andi	r24, 0xF0	; 240
    402a:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    402e:	12 b8       	out	0x02, r1	; 2
    4030:	9f ce       	rjmp	.-706    	; 0x3d70 <__vector_29+0xf4>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4032:	20 91 01 05 	lds	r18, 0x0501
    4036:	26 30       	cpi	r18, 0x06	; 6
    4038:	09 f4       	brne	.+2      	; 0x403c <__vector_29+0x3c0>
    403a:	4e c2       	rjmp	.+1180   	; 0x44d8 <__vector_29+0x85c>
    403c:	27 30       	cpi	r18, 0x07	; 7
    403e:	08 f0       	brcs	.+2      	; 0x4042 <__vector_29+0x3c6>
    4040:	d4 c0       	rjmp	.+424    	; 0x41ea <__vector_29+0x56e>
    4042:	22 30       	cpi	r18, 0x02	; 2
    4044:	09 f4       	brne	.+2      	; 0x4048 <__vector_29+0x3cc>
    4046:	55 c2       	rjmp	.+1194   	; 0x44f2 <__vector_29+0x876>
    4048:	23 30       	cpi	r18, 0x03	; 3
    404a:	08 f4       	brcc	.+2      	; 0x404e <__vector_29+0x3d2>
    404c:	70 c1       	rjmp	.+736    	; 0x432e <__vector_29+0x6b2>
    404e:	24 30       	cpi	r18, 0x04	; 4
    4050:	09 f4       	brne	.+2      	; 0x4054 <__vector_29+0x3d8>
    4052:	d5 c2       	rjmp	.+1450   	; 0x45fe <__vector_29+0x982>
    4054:	25 30       	cpi	r18, 0x05	; 5
    4056:	08 f4       	brcc	.+2      	; 0x405a <__vector_29+0x3de>
    4058:	c4 c2       	rjmp	.+1416   	; 0x45e2 <__vector_29+0x966>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    405a:	80 91 20 02 	lds	r24, 0x0220
    405e:	8f 5f       	subi	r24, 0xFF	; 255
    4060:	80 93 1f 02 	sts	0x021F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4064:	86 e0       	ldi	r24, 0x06	; 6
    4066:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 6;
    406a:	80 93 01 05 	sts	0x0501, r24
    406e:	90 91 b6 02 	lds	r25, 0x02B6
    4072:	6c ce       	rjmp	.-808    	; 0x3d4c <__vector_29+0xd0>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    4074:	80 91 05 02 	lds	r24, 0x0205
    4078:	88 23       	and	r24, r24
    407a:	09 f4       	brne	.+2      	; 0x407e <__vector_29+0x402>
    407c:	9e ce       	rjmp	.-708    	; 0x3dba <__vector_29+0x13e>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    407e:	63 99       	sbic	0x0c, 3	; 12
    4080:	9c ce       	rjmp	.-712    	; 0x3dba <__vector_29+0x13e>
    4082:	64 99       	sbic	0x0c, 4	; 12
    4084:	9a ce       	rjmp	.-716    	; 0x3dba <__vector_29+0x13e>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    4086:	28 2f       	mov	r18, r24
    4088:	2f 5f       	subi	r18, 0xFF	; 255
    408a:	20 93 05 02 	sts	0x0205, r18
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    408e:	25 30       	cpi	r18, 0x05	; 5
    4090:	08 f4       	brcc	.+2      	; 0x4094 <__vector_29+0x418>
    4092:	93 ce       	rjmp	.-730    	; 0x3dba <__vector_29+0x13e>
					if(pwm_right != 0) {
    4094:	80 91 f1 02 	lds	r24, 0x02F1
    4098:	90 91 f2 02 	lds	r25, 0x02F2
    409c:	89 2b       	or	r24, r25
    409e:	51 f0       	breq	.+20     	; 0x40b4 <__vector_29+0x438>
						right_vel_sum += value;
    40a0:	80 91 eb 02 	lds	r24, 0x02EB
    40a4:	90 91 ec 02 	lds	r25, 0x02EC
    40a8:	84 0f       	add	r24, r20
    40aa:	95 1f       	adc	r25, r21
    40ac:	90 93 ec 02 	sts	0x02EC, r25
    40b0:	80 93 eb 02 	sts	0x02EB, r24
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    40b4:	28 30       	cpi	r18, 0x08	; 8
    40b6:	09 f0       	breq	.+2      	; 0x40ba <__vector_29+0x43e>
    40b8:	80 ce       	rjmp	.-768    	; 0x3dba <__vector_29+0x13e>
						firstSampleRight = 0;
    40ba:	10 92 05 02 	sts	0x0205, r1
						compute_right_vel = 1;
    40be:	81 e0       	ldi	r24, 0x01	; 1
    40c0:	80 93 04 02 	sts	0x0204, r24
    40c4:	7a ce       	rjmp	.-780    	; 0x3dba <__vector_29+0x13e>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    40c6:	90 91 06 02 	lds	r25, 0x0206
    40ca:	99 23       	and	r25, r25
    40cc:	09 f4       	brne	.+2      	; 0x40d0 <__vector_29+0x454>
    40ce:	75 ce       	rjmp	.-790    	; 0x3dba <__vector_29+0x13e>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    40d0:	80 91 00 01 	lds	r24, 0x0100
    40d4:	83 fd       	sbrc	r24, 3
    40d6:	71 ce       	rjmp	.-798    	; 0x3dba <__vector_29+0x13e>
    40d8:	80 91 00 01 	lds	r24, 0x0100
    40dc:	84 fd       	sbrc	r24, 4
    40de:	6d ce       	rjmp	.-806    	; 0x3dba <__vector_29+0x13e>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    40e0:	29 2f       	mov	r18, r25
    40e2:	2f 5f       	subi	r18, 0xFF	; 255
    40e4:	20 93 06 02 	sts	0x0206, r18
				if(firstSampleLeft > 4) {
    40e8:	25 30       	cpi	r18, 0x05	; 5
    40ea:	08 f4       	brcc	.+2      	; 0x40ee <__vector_29+0x472>
    40ec:	66 ce       	rjmp	.-820    	; 0x3dba <__vector_29+0x13e>
					if(pwm_left != 0) {
    40ee:	80 91 f3 02 	lds	r24, 0x02F3
    40f2:	90 91 f4 02 	lds	r25, 0x02F4
    40f6:	89 2b       	or	r24, r25
    40f8:	51 f0       	breq	.+20     	; 0x410e <__vector_29+0x492>
						left_vel_sum += value;
    40fa:	80 91 e9 02 	lds	r24, 0x02E9
    40fe:	90 91 ea 02 	lds	r25, 0x02EA
    4102:	84 0f       	add	r24, r20
    4104:	95 1f       	adc	r25, r21
    4106:	90 93 ea 02 	sts	0x02EA, r25
    410a:	80 93 e9 02 	sts	0x02E9, r24
					}
					if(firstSampleLeft==8) {
    410e:	28 30       	cpi	r18, 0x08	; 8
    4110:	09 f0       	breq	.+2      	; 0x4114 <__vector_29+0x498>
    4112:	53 ce       	rjmp	.-858    	; 0x3dba <__vector_29+0x13e>
						firstSampleLeft = 0;
    4114:	10 92 06 02 	sts	0x0206, r1
						compute_left_vel = 1;
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	80 93 03 02 	sts	0x0203, r24
    411e:	4d ce       	rjmp	.-870    	; 0x3dba <__vector_29+0x13e>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    4120:	83 30       	cpi	r24, 0x03	; 3
    4122:	09 f4       	brne	.+2      	; 0x4126 <__vector_29+0x4aa>
    4124:	ab c0       	rjmp	.+342    	; 0x427c <__vector_29+0x600>
    4126:	84 30       	cpi	r24, 0x04	; 4
    4128:	09 f0       	breq	.+2      	; 0x412c <__vector_29+0x4b0>
    412a:	0e ce       	rjmp	.-996    	; 0x3d48 <__vector_29+0xcc>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    412c:	80 91 32 05 	lds	r24, 0x0532
    4130:	8f 5f       	subi	r24, 0xFF	; 255
    4132:	80 93 32 05 	sts	0x0532, r24
				if(irCommTxDurationCycle == irCommTxDuration) {
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	20 91 2e 05 	lds	r18, 0x052E
    413c:	30 91 2f 05 	lds	r19, 0x052F
    4140:	82 17       	cp	r24, r18
    4142:	93 07       	cpc	r25, r19
    4144:	09 f4       	brne	.+2      	; 0x4148 <__vector_29+0x4cc>
    4146:	0c c1       	rjmp	.+536    	; 0x4360 <__vector_29+0x6e4>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    4148:	80 91 21 02 	lds	r24, 0x0221
    414c:	80 93 1f 02 	sts	0x021F, r24
				leftChannelPhase = leftMotorPhase;
    4150:	80 91 24 02 	lds	r24, 0x0224
    4154:	80 93 b8 02 	sts	0x02B8, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4158:	80 91 b7 02 	lds	r24, 0x02B7
    415c:	88 23       	and	r24, r24
    415e:	09 f4       	brne	.+2      	; 0x4162 <__vector_29+0x4e6>
    4160:	d3 c0       	rjmp	.+422    	; 0x4308 <__vector_29+0x68c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4162:	81 30       	cpi	r24, 0x01	; 1
    4164:	09 f4       	brne	.+2      	; 0x4168 <__vector_29+0x4ec>
    4166:	c2 c2       	rjmp	.+1412   	; 0x46ec <__vector_29+0xa70>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4168:	85 e0       	ldi	r24, 0x05	; 5
    416a:	80 93 b5 02 	sts	0x02B5, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    416e:	83 e0       	ldi	r24, 0x03	; 3
    4170:	80 93 24 05 	sts	0x0524, r24
    4174:	90 91 b6 02 	lds	r25, 0x02B6
    4178:	e9 cd       	rjmp	.-1070   	; 0x3d4c <__vector_29+0xd0>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    417a:	81 30       	cpi	r24, 0x01	; 1
    417c:	09 f0       	breq	.+2      	; 0x4180 <__vector_29+0x504>
    417e:	73 c1       	rjmp	.+742    	; 0x4466 <__vector_29+0x7ea>
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
			PORTJ = 0xFF;
    4180:	8f ef       	ldi	r24, 0xFF	; 255
    4182:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    4186:	12 b8       	out	0x02, r1	; 2
    4188:	f3 cd       	rjmp	.-1050   	; 0x3d70 <__vector_29+0xf4>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    418a:	93 30       	cpi	r25, 0x03	; 3
    418c:	09 f4       	brne	.+2      	; 0x4190 <__vector_29+0x514>
    418e:	43 c1       	rjmp	.+646    	; 0x4416 <__vector_29+0x79a>
    4190:	94 30       	cpi	r25, 0x04	; 4
    4192:	09 f0       	breq	.+2      	; 0x4196 <__vector_29+0x51a>
    4194:	db cd       	rjmp	.-1098   	; 0x3d4c <__vector_29+0xd0>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    4196:	80 91 22 02 	lds	r24, 0x0222
    419a:	80 93 1f 02 	sts	0x021F, r24
				rightChannelPhase = rightMotorPhase;
    419e:	80 91 23 02 	lds	r24, 0x0223
    41a2:	80 93 b7 02 	sts	0x02B7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    41a6:	80 91 b8 02 	lds	r24, 0x02B8
    41aa:	88 23       	and	r24, r24
    41ac:	09 f0       	breq	.+2      	; 0x41b0 <__vector_29+0x534>
    41ae:	75 c1       	rjmp	.+746    	; 0x449a <__vector_29+0x81e>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    41b0:	83 e0       	ldi	r24, 0x03	; 3
    41b2:	80 93 b5 02 	sts	0x02B5, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    41b6:	10 92 b6 02 	sts	0x02B6, r1

				if(currentProx==14 && measBattery==1) {
    41ba:	20 91 20 02 	lds	r18, 0x0220
    41be:	2e 30       	cpi	r18, 0x0E	; 14
    41c0:	09 f4       	brne	.+2      	; 0x41c4 <__vector_29+0x548>
    41c2:	2b c2       	rjmp	.+1110   	; 0x461a <__vector_29+0x99e>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    41c4:	42 2f       	mov	r20, r18
    41c6:	50 e0       	ldi	r21, 0x00	; 0
    41c8:	20 ff       	sbrs	r18, 0
    41ca:	be cd       	rjmp	.-1156   	; 0x3d48 <__vector_29+0xcc>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    41cc:	20 31       	cpi	r18, 0x10	; 16
    41ce:	08 f0       	brcs	.+2      	; 0x41d2 <__vector_29+0x556>
    41d0:	58 c2       	rjmp	.+1200   	; 0x4682 <__vector_29+0xa06>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    41d2:	26 95       	lsr	r18
    41d4:	81 e0       	ldi	r24, 0x01	; 1
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	02 c0       	rjmp	.+4      	; 0x41de <__vector_29+0x562>
    41da:	88 0f       	add	r24, r24
    41dc:	99 1f       	adc	r25, r25
    41de:	2a 95       	dec	r18
    41e0:	e2 f7       	brpl	.-8      	; 0x41da <__vector_29+0x55e>
    41e2:	82 b9       	out	0x02, r24	; 2
    41e4:	90 91 b6 02 	lds	r25, 0x02B6
    41e8:	b1 cd       	rjmp	.-1182   	; 0x3d4c <__vector_29+0xd0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    41ea:	29 30       	cpi	r18, 0x09	; 9
    41ec:	09 f4       	brne	.+2      	; 0x41f0 <__vector_29+0x574>
    41ee:	8f c1       	rjmp	.+798    	; 0x450e <__vector_29+0x892>
    41f0:	2a 30       	cpi	r18, 0x0A	; 10
    41f2:	08 f0       	brcs	.+2      	; 0x41f6 <__vector_29+0x57a>
    41f4:	8d c0       	rjmp	.+282    	; 0x4310 <__vector_29+0x694>
    41f6:	27 30       	cpi	r18, 0x07	; 7
    41f8:	09 f4       	brne	.+2      	; 0x41fc <__vector_29+0x580>
    41fa:	e2 c1       	rjmp	.+964    	; 0x45c0 <__vector_29+0x944>
    41fc:	28 30       	cpi	r18, 0x08	; 8
    41fe:	09 f0       	breq	.+2      	; 0x4202 <__vector_29+0x586>
    4200:	a3 cd       	rjmp	.-1210   	; 0x3d48 <__vector_29+0xcc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    4202:	80 91 22 02 	lds	r24, 0x0222
    4206:	80 93 1f 02 	sts	0x021F, r24
				rightChannelPhase = rightMotorPhase;
    420a:	80 91 23 02 	lds	r24, 0x0223
    420e:	80 93 b7 02 	sts	0x02B7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4212:	80 91 b8 02 	lds	r24, 0x02B8
    4216:	88 23       	and	r24, r24
    4218:	09 f0       	breq	.+2      	; 0x421c <__vector_29+0x5a0>
    421a:	7e c2       	rjmp	.+1276   	; 0x4718 <__vector_29+0xa9c>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    421c:	83 e0       	ldi	r24, 0x03	; 3
    421e:	80 93 b5 02 	sts	0x02B5, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    4222:	89 e0       	ldi	r24, 0x09	; 9
    4224:	80 93 01 05 	sts	0x0501, r24
    4228:	90 91 b6 02 	lds	r25, 0x02B6
    422c:	8f cd       	rjmp	.-1250   	; 0x3d4c <__vector_29+0xd0>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    422e:	80 91 53 04 	lds	r24, 0x0453
    4232:	88 23       	and	r24, r24
    4234:	09 f4       	brne	.+2      	; 0x4238 <__vector_29+0x5bc>
    4236:	5d c0       	rjmp	.+186    	; 0x42f2 <__vector_29+0x676>
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    4238:	81 30       	cpi	r24, 0x01	; 1
    423a:	09 f0       	breq	.+2      	; 0x423e <__vector_29+0x5c2>
    423c:	1e c2       	rjmp	.+1084   	; 0x467a <__vector_29+0x9fe>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
    423e:	8f ef       	ldi	r24, 0xFF	; 255
    4240:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    4244:	12 b8       	out	0x02, r1	; 2
				}
				currentAdChannel = currentMotLeftChannel;
    4246:	80 91 21 02 	lds	r24, 0x0221
    424a:	80 93 1f 02 	sts	0x021F, r24
				leftChannelPhase = leftMotorPhase;
    424e:	80 91 24 02 	lds	r24, 0x0224
    4252:	80 93 b8 02 	sts	0x02B8, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    4256:	85 e0       	ldi	r24, 0x05	; 5
    4258:	80 93 b5 02 	sts	0x02B5, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    425c:	80 93 d5 04 	sts	0x04D5, r24
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    4260:	82 e0       	ldi	r24, 0x02	; 2
    4262:	80 93 24 05 	sts	0x0524, r24
				if(irCommTxSensorGroup==0) {
    4266:	80 91 34 05 	lds	r24, 0x0534
    426a:	88 23       	and	r24, r24
    426c:	09 f0       	breq	.+2      	; 0x4270 <__vector_29+0x5f4>
    426e:	ff c0       	rjmp	.+510    	; 0x446e <__vector_29+0x7f2>
					irCommTxSensorGroup = 1;
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	80 93 34 05 	sts	0x0534, r24
    4276:	90 91 b6 02 	lds	r25, 0x02B6
    427a:	68 cd       	rjmp	.-1328   	; 0x3d4c <__vector_29+0xd0>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    427c:	80 91 32 05 	lds	r24, 0x0532
    4280:	8f 5f       	subi	r24, 0xFF	; 255
    4282:	80 93 32 05 	sts	0x0532, r24
				if(irCommTxDurationCycle == irCommTxDuration) {
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	20 91 2e 05 	lds	r18, 0x052E
    428c:	30 91 2f 05 	lds	r19, 0x052F
    4290:	82 17       	cp	r24, r18
    4292:	93 07       	cpc	r25, r19
    4294:	09 f4       	brne	.+2      	; 0x4298 <__vector_29+0x61c>
    4296:	93 c0       	rjmp	.+294    	; 0x43be <__vector_29+0x742>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    4298:	80 91 22 02 	lds	r24, 0x0222
    429c:	80 93 1f 02 	sts	0x021F, r24
				rightChannelPhase = rightMotorPhase;
    42a0:	80 91 23 02 	lds	r24, 0x0223
    42a4:	80 93 b7 02 	sts	0x02B7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    42a8:	80 91 b8 02 	lds	r24, 0x02B8
    42ac:	88 23       	and	r24, r24
    42ae:	41 f1       	breq	.+80     	; 0x4300 <__vector_29+0x684>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    42b0:	81 30       	cpi	r24, 0x01	; 1
    42b2:	09 f4       	brne	.+2      	; 0x42b6 <__vector_29+0x63a>
    42b4:	1f c2       	rjmp	.+1086   	; 0x46f4 <__vector_29+0xa78>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    42b6:	85 e0       	ldi	r24, 0x05	; 5
    42b8:	80 93 b5 02 	sts	0x02B5, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    42bc:	84 e0       	ldi	r24, 0x04	; 4
    42be:	80 93 24 05 	sts	0x0524, r24
    42c2:	90 91 b6 02 	lds	r25, 0x02B6
    42c6:	42 cd       	rjmp	.-1404   	; 0x3d4c <__vector_29+0xd0>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    42c8:	80 91 20 02 	lds	r24, 0x0220
    42cc:	86 95       	lsr	r24
    42ce:	80 93 1f 02 	sts	0x021F, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    42d2:	80 91 b7 02 	lds	r24, 0x02B7
    42d6:	88 23       	and	r24, r24
    42d8:	09 f0       	breq	.+2      	; 0x42dc <__vector_29+0x660>
    42da:	e6 c0       	rjmp	.+460    	; 0x44a8 <__vector_29+0x82c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	80 93 b5 02 	sts	0x02B5, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	80 93 b6 02 	sts	0x02B6, r24
    42e8:	91 e0       	ldi	r25, 0x01	; 1
    42ea:	30 cd       	rjmp	.-1440   	; 0x3d4c <__vector_29+0xd0>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    42ec:	10 92 76 04 	sts	0x0476, r1
    42f0:	2f ce       	rjmp	.-930    	; 0x3f50 <__vector_29+0x2d4>
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
    42f2:	80 91 05 01 	lds	r24, 0x0105
    42f6:	80 7f       	andi	r24, 0xF0	; 240
    42f8:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    42fc:	12 b8       	out	0x02, r1	; 2
    42fe:	a3 cf       	rjmp	.-186    	; 0x4246 <__vector_29+0x5ca>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4300:	83 e0       	ldi	r24, 0x03	; 3
    4302:	80 93 b5 02 	sts	0x02B5, r24
    4306:	da cf       	rjmp	.-76     	; 0x42bc <__vector_29+0x640>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	80 93 b5 02 	sts	0x02B5, r24
    430e:	2f cf       	rjmp	.-418    	; 0x416e <__vector_29+0x4f2>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4310:	2b 30       	cpi	r18, 0x0B	; 11
    4312:	09 f4       	brne	.+2      	; 0x4316 <__vector_29+0x69a>
    4314:	47 c1       	rjmp	.+654    	; 0x45a4 <__vector_29+0x928>
    4316:	2b 30       	cpi	r18, 0x0B	; 11
    4318:	08 f4       	brcc	.+2      	; 0x431c <__vector_29+0x6a0>
    431a:	1a c1       	rjmp	.+564    	; 0x4550 <__vector_29+0x8d4>
    431c:	2c 30       	cpi	r18, 0x0C	; 12
    431e:	09 f0       	breq	.+2      	; 0x4322 <__vector_29+0x6a6>
    4320:	13 cd       	rjmp	.-1498   	; 0x3d48 <__vector_29+0xcc>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    4322:	85 e0       	ldi	r24, 0x05	; 5
    4324:	80 93 b5 02 	sts	0x02B5, r24
    4328:	90 91 b6 02 	lds	r25, 0x02B6
    432c:	0f cd       	rjmp	.-1506   	; 0x3d4c <__vector_29+0xd0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    432e:	22 23       	and	r18, r18
    4330:	09 f4       	brne	.+2      	; 0x4334 <__vector_29+0x6b8>
    4332:	02 c1       	rjmp	.+516    	; 0x4538 <__vector_29+0x8bc>
    4334:	21 30       	cpi	r18, 0x01	; 1
    4336:	09 f0       	breq	.+2      	; 0x433a <__vector_29+0x6be>
    4338:	07 cd       	rjmp	.-1522   	; 0x3d48 <__vector_29+0xcc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    433a:	80 91 20 02 	lds	r24, 0x0220
    433e:	8f 5f       	subi	r24, 0xFF	; 255
    4340:	80 93 1f 02 	sts	0x021F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4344:	86 e0       	ldi	r24, 0x06	; 6
    4346:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 2;
    434a:	82 e0       	ldi	r24, 0x02	; 2
    434c:	80 93 01 05 	sts	0x0501, r24
    4350:	90 91 b6 02 	lds	r25, 0x02B6
    4354:	fb cc       	rjmp	.-1546   	; 0x3d4c <__vector_29+0xd0>
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    4356:	80 93 24 05 	sts	0x0524, r24
    435a:	90 91 b6 02 	lds	r25, 0x02B6
    435e:	f6 cc       	rjmp	.-1556   	; 0x3d4c <__vector_29+0xd0>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4360:	10 92 32 05 	sts	0x0532, r1
					if(irCommTxPulseState == 0) {
    4364:	80 91 2d 05 	lds	r24, 0x052D
    4368:	88 23       	and	r24, r24
    436a:	09 f0       	breq	.+2      	; 0x436e <__vector_29+0x6f2>
    436c:	9f c1       	rjmp	.+830    	; 0x46ac <__vector_29+0xa30>
						irCommTxPulseState = 1;
    436e:	81 e0       	ldi	r24, 0x01	; 1
    4370:	80 93 2d 05 	sts	0x052D, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    4374:	80 91 34 05 	lds	r24, 0x0534
    4378:	88 23       	and	r24, r24
    437a:	09 f0       	breq	.+2      	; 0x437e <__vector_29+0x702>
    437c:	01 c2       	rjmp	.+1026   	; 0x4780 <__vector_29+0xb04>
							PORTA = 0xAA;
    437e:	8a ea       	ldi	r24, 0xAA	; 170
    4380:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4382:	80 91 31 05 	lds	r24, 0x0531
    4386:	8f 5f       	subi	r24, 0xFF	; 255
    4388:	80 93 31 05 	sts	0x0531, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    438c:	90 91 30 05 	lds	r25, 0x0530
    4390:	89 17       	cp	r24, r25
    4392:	09 f0       	breq	.+2      	; 0x4396 <__vector_29+0x71a>
    4394:	d9 ce       	rjmp	.-590    	; 0x4148 <__vector_29+0x4cc>
						irCommTxBitCount++;
    4396:	80 91 2c 05 	lds	r24, 0x052C
    439a:	8f 5f       	subi	r24, 0xFF	; 255
    439c:	80 93 2c 05 	sts	0x052C, r24
						if(irCommTxBitCount==12) {
    43a0:	8c 30       	cpi	r24, 0x0C	; 12
    43a2:	09 f4       	brne	.+2      	; 0x43a6 <__vector_29+0x72a>
    43a4:	73 c2       	rjmp	.+1254   	; 0x488c <__vector_29+0xc10>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommInitReceiver();
							PORTA = 0x00;
							irCommTxLastTransmissionTime = getTime100MicroSec();
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    43a6:	82 e0       	ldi	r24, 0x02	; 2
    43a8:	80 93 d5 04 	sts	0x04D5, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    43ac:	82 e0       	ldi	r24, 0x02	; 2
    43ae:	80 93 24 05 	sts	0x0524, r24
						adcSaveDataTo = SKIP_SAMPLE;
    43b2:	85 e0       	ldi	r24, 0x05	; 5
    43b4:	80 93 b5 02 	sts	0x02B5, r24
    43b8:	90 91 b6 02 	lds	r25, 0x02B6
    43bc:	c7 cc       	rjmp	.-1650   	; 0x3d4c <__vector_29+0xd0>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    43be:	10 92 32 05 	sts	0x0532, r1
					if(irCommTxPulseState == 0) {
    43c2:	80 91 2d 05 	lds	r24, 0x052D
    43c6:	88 23       	and	r24, r24
    43c8:	09 f0       	breq	.+2      	; 0x43cc <__vector_29+0x750>
    43ca:	74 c1       	rjmp	.+744    	; 0x46b4 <__vector_29+0xa38>
						irCommTxPulseState = 1;
    43cc:	81 e0       	ldi	r24, 0x01	; 1
    43ce:	80 93 2d 05 	sts	0x052D, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    43d2:	80 91 34 05 	lds	r24, 0x0534
    43d6:	88 23       	and	r24, r24
    43d8:	09 f0       	breq	.+2      	; 0x43dc <__vector_29+0x760>
    43da:	d5 c1       	rjmp	.+938    	; 0x4786 <__vector_29+0xb0a>
							PORTA = 0xAA;
    43dc:	8a ea       	ldi	r24, 0xAA	; 170
    43de:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    43e0:	80 91 31 05 	lds	r24, 0x0531
    43e4:	8f 5f       	subi	r24, 0xFF	; 255
    43e6:	80 93 31 05 	sts	0x0531, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    43ea:	90 91 30 05 	lds	r25, 0x0530
    43ee:	89 17       	cp	r24, r25
    43f0:	09 f0       	breq	.+2      	; 0x43f4 <__vector_29+0x778>
    43f2:	52 cf       	rjmp	.-348    	; 0x4298 <__vector_29+0x61c>
    43f4:	d0 cf       	rjmp	.-96     	; 0x4396 <__vector_29+0x71a>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    43f6:	80 91 bb 02 	lds	r24, 0x02BB
    43fa:	82 30       	cpi	r24, 0x02	; 2
    43fc:	09 f0       	breq	.+2      	; 0x4400 <__vector_29+0x784>
    43fe:	2a cd       	rjmp	.-1452   	; 0x3e54 <__vector_29+0x1d8>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    4400:	50 93 ba 02 	sts	0x02BA, r21
    4404:	40 93 b9 02 	sts	0x02B9, r20
				measBattery = 0;
    4408:	10 92 bb 02 	sts	0x02BB, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    440c:	46 98       	cbi	0x08, 6	; 8
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    440e:	8f e0       	ldi	r24, 0x0F	; 15
    4410:	80 93 20 02 	sts	0x0220, r24
    4414:	d2 cc       	rjmp	.-1628   	; 0x3dba <__vector_29+0x13e>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    4416:	80 91 21 02 	lds	r24, 0x0221
    441a:	80 93 1f 02 	sts	0x021F, r24
				leftChannelPhase = leftMotorPhase;
    441e:	80 91 24 02 	lds	r24, 0x0224
    4422:	80 93 b8 02 	sts	0x02B8, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4426:	80 91 b7 02 	lds	r24, 0x02B7
    442a:	88 23       	and	r24, r24
    442c:	41 f5       	brne	.+80     	; 0x447e <__vector_29+0x802>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    442e:	81 e0       	ldi	r24, 0x01	; 1
    4430:	80 93 b5 02 	sts	0x02B5, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    4434:	84 e0       	ldi	r24, 0x04	; 4
    4436:	80 93 b6 02 	sts	0x02B6, r24
    443a:	94 e0       	ldi	r25, 0x04	; 4
    443c:	87 cc       	rjmp	.-1778   	; 0x3d4c <__vector_29+0xd0>
					}
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    443e:	80 91 22 02 	lds	r24, 0x0222
    4442:	80 93 1f 02 	sts	0x021F, r24
				rightChannelPhase = rightMotorPhase;
    4446:	80 91 23 02 	lds	r24, 0x0223
    444a:	80 93 b7 02 	sts	0x02B7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    444e:	80 91 b8 02 	lds	r24, 0x02B8
    4452:	88 23       	and	r24, r24
    4454:	d9 f4       	brne	.+54     	; 0x448c <__vector_29+0x810>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4456:	83 e0       	ldi	r24, 0x03	; 3
    4458:	80 93 b5 02 	sts	0x02B5, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    445c:	83 e0       	ldi	r24, 0x03	; 3
    445e:	80 93 b6 02 	sts	0x02B6, r24
    4462:	93 e0       	ldi	r25, 0x03	; 3
    4464:	73 cc       	rjmp	.-1818   	; 0x3d4c <__vector_29+0xd0>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    4466:	82 30       	cpi	r24, 0x02	; 2
    4468:	09 f4       	brne	.+2      	; 0x446c <__vector_29+0x7f0>
    446a:	8a ce       	rjmp	.-748    	; 0x4180 <__vector_29+0x504>
    446c:	81 cc       	rjmp	.-1790   	; 0x3d70 <__vector_29+0xf4>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    446e:	10 92 34 05 	sts	0x0534, r1
    4472:	90 91 b6 02 	lds	r25, 0x02B6
    4476:	6a cc       	rjmp	.-1836   	; 0x3d4c <__vector_29+0xd0>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    4478:	11 82       	std	Z+1, r1	; 0x01
    447a:	10 82       	st	Z, r1
    447c:	1c cd       	rjmp	.-1480   	; 0x3eb6 <__vector_29+0x23a>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    447e:	81 30       	cpi	r24, 0x01	; 1
    4480:	09 f4       	brne	.+2      	; 0x4484 <__vector_29+0x808>
    4482:	60 c1       	rjmp	.+704    	; 0x4744 <__vector_29+0xac8>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4484:	85 e0       	ldi	r24, 0x05	; 5
    4486:	80 93 b5 02 	sts	0x02B5, r24
    448a:	d4 cf       	rjmp	.-88     	; 0x4434 <__vector_29+0x7b8>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    448c:	81 30       	cpi	r24, 0x01	; 1
    448e:	09 f4       	brne	.+2      	; 0x4492 <__vector_29+0x816>
    4490:	51 c1       	rjmp	.+674    	; 0x4734 <__vector_29+0xab8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4492:	85 e0       	ldi	r24, 0x05	; 5
    4494:	80 93 b5 02 	sts	0x02B5, r24
    4498:	e1 cf       	rjmp	.-62     	; 0x445c <__vector_29+0x7e0>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    449a:	81 30       	cpi	r24, 0x01	; 1
    449c:	09 f4       	brne	.+2      	; 0x44a0 <__vector_29+0x824>
    449e:	56 c1       	rjmp	.+684    	; 0x474c <__vector_29+0xad0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    44a0:	85 e0       	ldi	r24, 0x05	; 5
    44a2:	80 93 b5 02 	sts	0x02B5, r24
    44a6:	87 ce       	rjmp	.-754    	; 0x41b6 <__vector_29+0x53a>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    44a8:	81 30       	cpi	r24, 0x01	; 1
    44aa:	09 f4       	brne	.+2      	; 0x44ae <__vector_29+0x832>
    44ac:	47 c1       	rjmp	.+654    	; 0x473c <__vector_29+0xac0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    44ae:	85 e0       	ldi	r24, 0x05	; 5
    44b0:	80 93 b5 02 	sts	0x02B5, r24
    44b4:	16 cf       	rjmp	.-468    	; 0x42e2 <__vector_29+0x666>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    44b6:	cf 01       	movw	r24, r30
    44b8:	cc 96       	adiw	r24, 0x3c	; 60
    44ba:	95 95       	asr	r25
    44bc:	87 95       	ror	r24
    44be:	88 37       	cpi	r24, 0x78	; 120
    44c0:	91 05       	cpc	r25, r1
    44c2:	0c f0       	brlt	.+2      	; 0x44c6 <__vector_29+0x84a>
    44c4:	fb c0       	rjmp	.+502    	; 0x46bc <__vector_29+0xa40>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    44c6:	a3 54       	subi	r26, 0x43	; 67
    44c8:	bd 4f       	sbci	r27, 0xFD	; 253
    44ca:	fc 97       	sbiw	r30, 0x3c	; 60
    44cc:	f5 95       	asr	r31
    44ce:	e7 95       	ror	r30
    44d0:	fc 96       	adiw	r30, 0x3c	; 60
    44d2:	ed 93       	st	X+, r30
    44d4:	fc 93       	st	X, r31
    44d6:	ff cc       	rjmp	.-1538   	; 0x3ed6 <__vector_29+0x25a>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    44d8:	80 91 20 02 	lds	r24, 0x0220
    44dc:	8f 5f       	subi	r24, 0xFF	; 255
    44de:	80 93 1f 02 	sts	0x021F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    44e2:	20 93 b5 02 	sts	0x02B5, r18
				irCommAdcRxState = 7;
    44e6:	87 e0       	ldi	r24, 0x07	; 7
    44e8:	80 93 01 05 	sts	0x0501, r24
    44ec:	90 91 b6 02 	lds	r25, 0x02B6
    44f0:	2d cc       	rjmp	.-1958   	; 0x3d4c <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    44f2:	80 91 20 02 	lds	r24, 0x0220
    44f6:	8f 5f       	subi	r24, 0xFF	; 255
    44f8:	80 93 1f 02 	sts	0x021F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    44fc:	86 e0       	ldi	r24, 0x06	; 6
    44fe:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 3;
    4502:	83 e0       	ldi	r24, 0x03	; 3
    4504:	80 93 01 05 	sts	0x0501, r24
    4508:	90 91 b6 02 	lds	r25, 0x02B6
    450c:	1f cc       	rjmp	.-1986   	; 0x3d4c <__vector_29+0xd0>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    450e:	80 91 21 02 	lds	r24, 0x0221
    4512:	80 93 1f 02 	sts	0x021F, r24
				leftChannelPhase = leftMotorPhase;
    4516:	80 91 24 02 	lds	r24, 0x0224
    451a:	80 93 b8 02 	sts	0x02B8, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    451e:	80 91 b7 02 	lds	r24, 0x02B7
    4522:	88 23       	and	r24, r24
    4524:	09 f0       	breq	.+2      	; 0x4528 <__vector_29+0x8ac>
    4526:	f1 c0       	rjmp	.+482    	; 0x470a <__vector_29+0xa8e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4528:	90 93 b5 02 	sts	0x02B5, r25
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 10;
    452c:	8a e0       	ldi	r24, 0x0A	; 10
    452e:	80 93 01 05 	sts	0x0501, r24
    4532:	90 91 b6 02 	lds	r25, 0x02B6
    4536:	0a cc       	rjmp	.-2028   	; 0x3d4c <__vector_29+0xd0>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    4538:	10 92 20 02 	sts	0x0220, r1
				currentAdChannel = currentProx+1;				
    453c:	90 93 1f 02 	sts	0x021F, r25
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4540:	86 e0       	ldi	r24, 0x06	; 6
    4542:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 1;
    4546:	90 93 01 05 	sts	0x0501, r25
    454a:	90 91 b6 02 	lds	r25, 0x02B6
    454e:	fe cb       	rjmp	.-2052   	; 0x3d4c <__vector_29+0xd0>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    4550:	80 91 22 02 	lds	r24, 0x0222
    4554:	80 93 1f 02 	sts	0x021F, r24
				rightChannelPhase = rightMotorPhase;
    4558:	80 91 23 02 	lds	r24, 0x0223
    455c:	80 93 b7 02 	sts	0x02B7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4560:	80 91 b8 02 	lds	r24, 0x02B8
    4564:	88 23       	and	r24, r24
    4566:	09 f0       	breq	.+2      	; 0x456a <__vector_29+0x8ee>
    4568:	c9 c0       	rjmp	.+402    	; 0x46fc <__vector_29+0xa80>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    456a:	83 e0       	ldi	r24, 0x03	; 3
    456c:	80 93 b5 02 	sts	0x02B5, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    4570:	80 91 1b 05 	lds	r24, 0x051B
    4574:	8e 3f       	cpi	r24, 0xFE	; 254
    4576:	18 f4       	brcc	.+6      	; 0x457e <__vector_29+0x902>
					irCommRxBitSkipped++;
    4578:	8f 5f       	subi	r24, 0xFF	; 255
    457a:	80 93 1b 05 	sts	0x051B, r24
				}
				irCommRxWindowSamples++;
    457e:	90 91 02 05 	lds	r25, 0x0502
    4582:	9f 5f       	subi	r25, 0xFF	; 255
    4584:	90 93 02 05 	sts	0x0502, r25
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    4588:	80 91 d5 04 	lds	r24, 0x04D5
    458c:	84 30       	cpi	r24, 0x04	; 4
    458e:	09 f4       	brne	.+2      	; 0x4592 <__vector_29+0x916>
    4590:	fd c0       	rjmp	.+506    	; 0x478c <__vector_29+0xb10>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    4592:	94 31       	cpi	r25, 0x14	; 20
    4594:	09 f4       	brne	.+2      	; 0x4598 <__vector_29+0x91c>
    4596:	16 c1       	rjmp	.+556    	; 0x47c4 <__vector_29+0xb48>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    4598:	8b e0       	ldi	r24, 0x0B	; 11
    459a:	80 93 01 05 	sts	0x0501, r24
    459e:	90 91 b6 02 	lds	r25, 0x02B6
    45a2:	d4 cb       	rjmp	.-2136   	; 0x3d4c <__vector_29+0xd0>
				break;

			case 11:
				currentAdChannel = 0;	// prox0
    45a4:	10 92 1f 02 	sts	0x021F, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    45a8:	80 91 b7 02 	lds	r24, 0x02B7
    45ac:	88 23       	and	r24, r24
    45ae:	09 f0       	breq	.+2      	; 0x45b2 <__vector_29+0x936>
    45b0:	ba c0       	rjmp	.+372    	; 0x4726 <__vector_29+0xaaa>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    45b2:	90 93 b5 02 	sts	0x02B5, r25
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 0;
    45b6:	10 92 01 05 	sts	0x0501, r1
    45ba:	90 91 b6 02 	lds	r25, 0x02B6
    45be:	c6 cb       	rjmp	.-2164   	; 0x3d4c <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    45c0:	80 91 21 02 	lds	r24, 0x0221
    45c4:	80 93 1f 02 	sts	0x021F, r24
				leftChannelPhase = leftMotorPhase;
    45c8:	80 91 24 02 	lds	r24, 0x0224
    45cc:	80 93 b8 02 	sts	0x02B8, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    45d0:	86 e0       	ldi	r24, 0x06	; 6
    45d2:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 8;
    45d6:	88 e0       	ldi	r24, 0x08	; 8
    45d8:	80 93 01 05 	sts	0x0501, r24
    45dc:	90 91 b6 02 	lds	r25, 0x02B6
    45e0:	b5 cb       	rjmp	.-2198   	; 0x3d4c <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    45e2:	80 91 20 02 	lds	r24, 0x0220
    45e6:	8f 5f       	subi	r24, 0xFF	; 255
    45e8:	80 93 1f 02 	sts	0x021F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    45ec:	86 e0       	ldi	r24, 0x06	; 6
    45ee:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 4;
    45f2:	84 e0       	ldi	r24, 0x04	; 4
    45f4:	80 93 01 05 	sts	0x0501, r24
    45f8:	90 91 b6 02 	lds	r25, 0x02B6
    45fc:	a7 cb       	rjmp	.-2226   	; 0x3d4c <__vector_29+0xd0>
				break;

			case 4:
				currentAdChannel = currentProx+1;
    45fe:	80 91 20 02 	lds	r24, 0x0220
    4602:	8f 5f       	subi	r24, 0xFF	; 255
    4604:	80 93 1f 02 	sts	0x021F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4608:	86 e0       	ldi	r24, 0x06	; 6
    460a:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 5;
    460e:	85 e0       	ldi	r24, 0x05	; 5
    4610:	80 93 01 05 	sts	0x0501, r24
    4614:	90 91 b6 02 	lds	r25, 0x02B6
    4618:	99 cb       	rjmp	.-2254   	; 0x3d4c <__vector_29+0xd0>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    461a:	80 91 bb 02 	lds	r24, 0x02BB
    461e:	81 30       	cpi	r24, 0x01	; 1
    4620:	09 f0       	breq	.+2      	; 0x4624 <__vector_29+0x9a8>
    4622:	d0 cd       	rjmp	.-1120   	; 0x41c4 <__vector_29+0x548>
					measBattery=2;
    4624:	82 e0       	ldi	r24, 0x02	; 2
    4626:	80 93 bb 02 	sts	0x02BB, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    462a:	46 9a       	sbi	0x08, 6	; 8
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	8e cb       	rjmp	.-2276   	; 0x3d4c <__vector_29+0xd0>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    4630:	80 91 20 02 	lds	r24, 0x0220
    4634:	87 31       	cpi	r24, 0x17	; 23
    4636:	09 f0       	breq	.+2      	; 0x463a <__vector_29+0x9be>
    4638:	eb cb       	rjmp	.-2090   	; 0x3e10 <__vector_29+0x194>
					currentAdChannel = 0;	// prox0					
    463a:	10 92 1f 02 	sts	0x021F, r1
					measBattery = 0;
    463e:	10 92 bb 02 	sts	0x02BB, r1
					irCommAdcRxState = 0;					
    4642:	10 92 01 05 	sts	0x0501, r1
					irCommRxWindowSamples = 0;
    4646:	10 92 02 05 	sts	0x0502, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    464a:	e0 91 37 0b 	lds	r30, 0x0B37
    464e:	f0 91 38 0b 	lds	r31, 0x0B38
    4652:	80 e1       	ldi	r24, 0x10	; 16
    4654:	df 01       	movw	r26, r30
    4656:	1d 92       	st	X+, r1
    4658:	8a 95       	dec	r24
    465a:	e9 f7       	brne	.-6      	; 0x4656 <__vector_29+0x9da>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    465c:	80 91 c7 05 	lds	r24, 0x05C7
    4660:	90 91 c8 05 	lds	r25, 0x05C8
    4664:	6f ef       	ldi	r22, 0xFF	; 255
    4666:	70 e0       	ldi	r23, 0x00	; 0
    4668:	40 e1       	ldi	r20, 0x10	; 16
    466a:	50 e0       	ldi	r21, 0x00	; 0
    466c:	0e 94 17 5c 	call	0xb82e	; 0xb82e <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;					
    4670:	10 93 d4 04 	sts	0x04D4, r17
    4674:	10 91 d2 04 	lds	r17, 0x04D2
    4678:	cb cb       	rjmp	.-2154   	; 0x3e10 <__vector_29+0x194>
				if(hardwareRevision == HW_REV_3_0_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    467a:	82 30       	cpi	r24, 0x02	; 2
    467c:	09 f4       	brne	.+2      	; 0x4680 <__vector_29+0xa04>
    467e:	df cd       	rjmp	.-1090   	; 0x423e <__vector_29+0x5c2>
    4680:	e2 cd       	rjmp	.-1084   	; 0x4246 <__vector_29+0x5ca>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    4682:	80 91 53 04 	lds	r24, 0x0453
    4686:	88 23       	and	r24, r24
    4688:	09 f0       	breq	.+2      	; 0x468c <__vector_29+0xa10>
    468a:	63 c0       	rjmp	.+198    	; 0x4752 <__vector_29+0xad6>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    468c:	40 51       	subi	r20, 0x10	; 16
    468e:	50 40       	sbci	r21, 0x00	; 0
    4690:	55 95       	asr	r21
    4692:	47 95       	ror	r20
    4694:	81 e0       	ldi	r24, 0x01	; 1
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	02 c0       	rjmp	.+4      	; 0x469e <__vector_29+0xa22>
    469a:	88 0f       	add	r24, r24
    469c:	99 1f       	adc	r25, r25
    469e:	4a 95       	dec	r20
    46a0:	e2 f7       	brpl	.-8      	; 0x469a <__vector_29+0xa1e>
    46a2:	80 93 05 01 	sts	0x0105, r24
    46a6:	90 91 b6 02 	lds	r25, 0x02B6
    46aa:	50 cb       	rjmp	.-2400   	; 0x3d4c <__vector_29+0xd0>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    46ac:	10 92 2d 05 	sts	0x052D, r1
						PORTA = 0x00;
    46b0:	12 b8       	out	0x02, r1	; 2
    46b2:	67 ce       	rjmp	.-818    	; 0x4382 <__vector_29+0x706>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    46b4:	10 92 2d 05 	sts	0x052D, r1
						PORTA = 0x00;
    46b8:	12 b8       	out	0x02, r1	; 2
    46ba:	92 ce       	rjmp	.-732    	; 0x43e0 <__vector_29+0x764>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    46bc:	cf 01       	movw	r24, r30
    46be:	84 5d       	subi	r24, 0xD4	; 212
    46c0:	9e 4f       	sbci	r25, 0xFE	; 254
    46c2:	95 95       	asr	r25
    46c4:	87 95       	ror	r24
    46c6:	95 95       	asr	r25
    46c8:	87 95       	ror	r24
    46ca:	84 3b       	cpi	r24, 0xB4	; 180
    46cc:	91 05       	cpc	r25, r1
    46ce:	0c f0       	brlt	.+2      	; 0x46d2 <__vector_29+0xa56>
    46d0:	6a c0       	rjmp	.+212    	; 0x47a6 <__vector_29+0xb2a>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    46d2:	a3 54       	subi	r26, 0x43	; 67
    46d4:	bd 4f       	sbci	r27, 0xFD	; 253
    46d6:	e4 5b       	subi	r30, 0xB4	; 180
    46d8:	f0 40       	sbci	r31, 0x00	; 0
    46da:	f5 95       	asr	r31
    46dc:	e7 95       	ror	r30
    46de:	f5 95       	asr	r31
    46e0:	e7 95       	ror	r30
    46e2:	e8 58       	subi	r30, 0x88	; 136
    46e4:	ff 4f       	sbci	r31, 0xFF	; 255
    46e6:	ed 93       	st	X+, r30
    46e8:	fc 93       	st	X, r31
    46ea:	f5 cb       	rjmp	.-2070   	; 0x3ed6 <__vector_29+0x25a>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    46ec:	82 e0       	ldi	r24, 0x02	; 2
    46ee:	80 93 b5 02 	sts	0x02B5, r24
    46f2:	3d cd       	rjmp	.-1414   	; 0x416e <__vector_29+0x4f2>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    46f4:	84 e0       	ldi	r24, 0x04	; 4
    46f6:	80 93 b5 02 	sts	0x02B5, r24
    46fa:	e0 cd       	rjmp	.-1088   	; 0x42bc <__vector_29+0x640>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    46fc:	81 30       	cpi	r24, 0x01	; 1
    46fe:	09 f4       	brne	.+2      	; 0x4702 <__vector_29+0xa86>
    4700:	c1 c0       	rjmp	.+386    	; 0x4884 <__vector_29+0xc08>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4702:	85 e0       	ldi	r24, 0x05	; 5
    4704:	80 93 b5 02 	sts	0x02B5, r24
    4708:	33 cf       	rjmp	.-410    	; 0x4570 <__vector_29+0x8f4>
			case 9:
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    470a:	81 30       	cpi	r24, 0x01	; 1
    470c:	09 f4       	brne	.+2      	; 0x4710 <__vector_29+0xa94>
    470e:	ae c0       	rjmp	.+348    	; 0x486c <__vector_29+0xbf0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4710:	85 e0       	ldi	r24, 0x05	; 5
    4712:	80 93 b5 02 	sts	0x02B5, r24
    4716:	0a cf       	rjmp	.-492    	; 0x452c <__vector_29+0x8b0>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4718:	81 30       	cpi	r24, 0x01	; 1
    471a:	09 f4       	brne	.+2      	; 0x471e <__vector_29+0xaa2>
    471c:	ab c0       	rjmp	.+342    	; 0x4874 <__vector_29+0xbf8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    471e:	85 e0       	ldi	r24, 0x05	; 5
    4720:	80 93 b5 02 	sts	0x02B5, r24
    4724:	7e cd       	rjmp	.-1284   	; 0x4222 <__vector_29+0x5a6>

			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4726:	81 30       	cpi	r24, 0x01	; 1
    4728:	09 f4       	brne	.+2      	; 0x472c <__vector_29+0xab0>
    472a:	a8 c0       	rjmp	.+336    	; 0x487c <__vector_29+0xc00>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    472c:	85 e0       	ldi	r24, 0x05	; 5
    472e:	80 93 b5 02 	sts	0x02B5, r24
    4732:	41 cf       	rjmp	.-382    	; 0x45b6 <__vector_29+0x93a>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4734:	84 e0       	ldi	r24, 0x04	; 4
    4736:	80 93 b5 02 	sts	0x02B5, r24
    473a:	90 ce       	rjmp	.-736    	; 0x445c <__vector_29+0x7e0>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    473c:	82 e0       	ldi	r24, 0x02	; 2
    473e:	80 93 b5 02 	sts	0x02B5, r24
    4742:	cf cd       	rjmp	.-1122   	; 0x42e2 <__vector_29+0x666>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4744:	82 e0       	ldi	r24, 0x02	; 2
    4746:	80 93 b5 02 	sts	0x02B5, r24
    474a:	74 ce       	rjmp	.-792    	; 0x4434 <__vector_29+0x7b8>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    474c:	90 93 b5 02 	sts	0x02B5, r25
    4750:	32 cd       	rjmp	.-1436   	; 0x41b6 <__vector_29+0x53a>
					} else {
						if(hardwareRevision == HW_REV_3_0) {
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    4752:	81 30       	cpi	r24, 0x01	; 1
    4754:	09 f0       	breq	.+2      	; 0x4758 <__vector_29+0xadc>
    4756:	b1 c0       	rjmp	.+354    	; 0x48ba <__vector_29+0xc3e>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    4758:	20 91 05 01 	lds	r18, 0x0105
    475c:	40 51       	subi	r20, 0x10	; 16
    475e:	50 40       	sbci	r21, 0x00	; 0
    4760:	55 95       	asr	r21
    4762:	47 95       	ror	r20
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	02 c0       	rjmp	.+4      	; 0x476e <__vector_29+0xaf2>
    476a:	88 0f       	add	r24, r24
    476c:	99 1f       	adc	r25, r25
    476e:	4a 95       	dec	r20
    4770:	e2 f7       	brpl	.-8      	; 0x476a <__vector_29+0xaee>
    4772:	80 95       	com	r24
    4774:	82 23       	and	r24, r18
    4776:	80 93 05 01 	sts	0x0105, r24
    477a:	90 91 b6 02 	lds	r25, 0x02B6
    477e:	e6 ca       	rjmp	.-2612   	; 0x3d4c <__vector_29+0xd0>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4780:	85 e5       	ldi	r24, 0x55	; 85
    4782:	82 b9       	out	0x02, r24	; 2
    4784:	fe cd       	rjmp	.-1028   	; 0x4382 <__vector_29+0x706>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4786:	85 e5       	ldi	r24, 0x55	; 85
    4788:	82 b9       	out	0x02, r24	; 2
    478a:	2a ce       	rjmp	.-940    	; 0x43e0 <__vector_29+0x764>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    478c:	10 92 02 05 	sts	0x0502, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    4790:	90 91 1b 05 	lds	r25, 0x051B
    4794:	80 91 0c 05 	lds	r24, 0x050C
    4798:	98 17       	cp	r25, r24
    479a:	08 f4       	brcc	.+2      	; 0x479e <__vector_29+0xb22>
    479c:	fd ce       	rjmp	.-518    	; 0x4598 <__vector_29+0x91c>
						irCommState = IRCOMM_RX_WAITING_BIT;
    479e:	85 e0       	ldi	r24, 0x05	; 5
    47a0:	80 93 d5 04 	sts	0x04D5, r24
    47a4:	f9 ce       	rjmp	.-526    	; 0x4598 <__vector_29+0x91c>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    47a6:	a3 54       	subi	r26, 0x43	; 67
    47a8:	bd 4f       	sbci	r27, 0xFD	; 253
    47aa:	e4 5a       	subi	r30, 0xA4	; 164
    47ac:	f1 40       	sbci	r31, 0x01	; 1
    47ae:	f5 95       	asr	r31
    47b0:	e7 95       	ror	r30
    47b2:	f5 95       	asr	r31
    47b4:	e7 95       	ror	r30
    47b6:	f5 95       	asr	r31
    47b8:	e7 95       	ror	r30
    47ba:	ec 54       	subi	r30, 0x4C	; 76
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	ed 93       	st	X+, r30
    47c0:	fc 93       	st	X, r31
    47c2:	89 cb       	rjmp	.-2286   	; 0x3ed6 <__vector_29+0x25a>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    47c4:	10 92 02 05 	sts	0x0502, r1
					irCommTempPointer = irCommProxValuesCurr;
    47c8:	20 91 4d 08 	lds	r18, 0x084D
    47cc:	30 91 4e 08 	lds	r19, 0x084E
					irCommProxValuesCurr = irCommProxValuesAdc;
    47d0:	80 91 69 08 	lds	r24, 0x0869
    47d4:	90 91 6a 08 	lds	r25, 0x086A
    47d8:	90 93 4e 08 	sts	0x084E, r25
    47dc:	80 93 4d 08 	sts	0x084D, r24
					irCommProxValuesAdc = irCommTempPointer;
    47e0:	30 93 6a 08 	sts	0x086A, r19
    47e4:	20 93 69 08 	sts	0x0869, r18
					irCommTempPointer = irCommMaxSensorValueCurr;
    47e8:	40 91 4a 05 	lds	r20, 0x054A
    47ec:	50 91 4b 05 	lds	r21, 0x054B
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    47f0:	80 91 37 0b 	lds	r24, 0x0B37
    47f4:	90 91 38 0b 	lds	r25, 0x0B38
    47f8:	90 93 4b 05 	sts	0x054B, r25
    47fc:	80 93 4a 05 	sts	0x054A, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    4800:	40 93 37 0b 	sts	0x0B37, r20
    4804:	50 93 38 0b 	sts	0x0B38, r21
					irCommTempPointer = irCommMinSensorValueCurr;
    4808:	20 91 36 05 	lds	r18, 0x0536
    480c:	30 91 37 05 	lds	r19, 0x0537
    4810:	30 93 79 0b 	sts	0x0B79, r19
    4814:	20 93 78 0b 	sts	0x0B78, r18
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    4818:	80 91 c7 05 	lds	r24, 0x05C7
    481c:	90 91 c8 05 	lds	r25, 0x05C8
    4820:	90 93 37 05 	sts	0x0537, r25
    4824:	80 93 36 05 	sts	0x0536, r24
					irCommMinSensorValueAdc = irCommTempPointer;
    4828:	30 93 c8 05 	sts	0x05C8, r19
    482c:	20 93 c7 05 	sts	0x05C7, r18
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4830:	fa 01       	movw	r30, r20
    4832:	80 e1       	ldi	r24, 0x10	; 16
    4834:	df 01       	movw	r26, r30
    4836:	1d 92       	st	X+, r1
    4838:	8a 95       	dec	r24
    483a:	e9 f7       	brne	.-6      	; 0x4836 <__vector_29+0xbba>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    483c:	80 91 c7 05 	lds	r24, 0x05C7
    4840:	90 91 c8 05 	lds	r25, 0x05C8
    4844:	6f ef       	ldi	r22, 0xFF	; 255
    4846:	70 e0       	ldi	r23, 0x00	; 0
    4848:	40 e1       	ldi	r20, 0x10	; 16
    484a:	50 e0       	ldi	r21, 0x00	; 0
    484c:	0e 94 17 5c 	call	0xb82e	; 0xb82e <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    4850:	80 91 d5 04 	lds	r24, 0x04D5
    4854:	81 30       	cpi	r24, 0x01	; 1
    4856:	09 f4       	brne	.+2      	; 0x485a <__vector_29+0xbde>
    4858:	45 c0       	rjmp	.+138    	; 0x48e4 <__vector_29+0xc68>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    485a:	80 91 d5 04 	lds	r24, 0x04D5
    485e:	85 30       	cpi	r24, 0x05	; 5
    4860:	09 f0       	breq	.+2      	; 0x4864 <__vector_29+0xbe8>
    4862:	9a ce       	rjmp	.-716    	; 0x4598 <__vector_29+0x91c>
						irCommState = IRCOMM_RX_READ_BIT;
    4864:	86 e0       	ldi	r24, 0x06	; 6
    4866:	80 93 d5 04 	sts	0x04D5, r24
    486a:	96 ce       	rjmp	.-724    	; 0x4598 <__vector_29+0x91c>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    486c:	82 e0       	ldi	r24, 0x02	; 2
    486e:	80 93 b5 02 	sts	0x02B5, r24
    4872:	5c ce       	rjmp	.-840    	; 0x452c <__vector_29+0x8b0>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4874:	84 e0       	ldi	r24, 0x04	; 4
    4876:	80 93 b5 02 	sts	0x02B5, r24
    487a:	d3 cc       	rjmp	.-1626   	; 0x4222 <__vector_29+0x5a6>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    487c:	82 e0       	ldi	r24, 0x02	; 2
    487e:	80 93 b5 02 	sts	0x02B5, r24
    4882:	99 ce       	rjmp	.-718    	; 0x45b6 <__vector_29+0x93a>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4884:	84 e0       	ldi	r24, 0x04	; 4
    4886:	80 93 b5 02 	sts	0x02B5, r24
    488a:	72 ce       	rjmp	.-796    	; 0x4570 <__vector_29+0x8f4>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	80 93 d5 04 	sts	0x04D5, r24
							irCommTxByteEnqueued = 0;
    4892:	10 92 26 05 	sts	0x0526, r1
							adcSamplingState = 0;
    4896:	10 92 b6 02 	sts	0x02B6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    489a:	10 92 d4 04 	sts	0x04D4, r1
							irCommInitReceiver();
    489e:	0e 94 25 4c 	call	0x984a	; 0x984a <irCommInitReceiver>
							PORTA = 0x00;
    48a2:	12 b8       	out	0x02, r1	; 2
							irCommTxLastTransmissionTime = getTime100MicroSec();
    48a4:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    48a8:	60 93 27 05 	sts	0x0527, r22
    48ac:	70 93 28 05 	sts	0x0528, r23
    48b0:	80 93 29 05 	sts	0x0529, r24
    48b4:	90 93 2a 05 	sts	0x052A, r25
    48b8:	79 cd       	rjmp	.-1294   	; 0x43ac <__vector_29+0x730>

						if(hardwareRevision == HW_REV_3_0_1) {
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    48ba:	82 30       	cpi	r24, 0x02	; 2
    48bc:	09 f0       	breq	.+2      	; 0x48c0 <__vector_29+0xc44>
    48be:	44 ca       	rjmp	.-2936   	; 0x3d48 <__vector_29+0xcc>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    48c0:	20 91 05 01 	lds	r18, 0x0105
    48c4:	40 51       	subi	r20, 0x10	; 16
    48c6:	50 40       	sbci	r21, 0x00	; 0
    48c8:	55 95       	asr	r21
    48ca:	47 95       	ror	r20
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	02 c0       	rjmp	.+4      	; 0x48d6 <__vector_29+0xc5a>
    48d2:	88 0f       	add	r24, r24
    48d4:	99 1f       	adc	r25, r25
    48d6:	4a 95       	dec	r20
    48d8:	e2 f7       	brpl	.-8      	; 0x48d2 <__vector_29+0xc56>
    48da:	80 95       	com	r24
    48dc:	82 23       	and	r24, r18
    48de:	80 93 05 01 	sts	0x0105, r24
    48e2:	32 ca       	rjmp	.-2972   	; 0x3d48 <__vector_29+0xcc>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    48e4:	82 e0       	ldi	r24, 0x02	; 2
    48e6:	80 93 d5 04 	sts	0x04D5, r24
						irCommRxBitSkipped = 0;
    48ea:	10 92 1b 05 	sts	0x051B, r1
    48ee:	b5 cf       	rjmp	.-150    	; 0x485a <__vector_29+0xbde>

000048f0 <initMotors>:

#include "motors.h"

void initMotors() {
    48f0:	0f 93       	push	r16
    48f2:	1f 93       	push	r17
    48f4:	cf 93       	push	r28
    48f6:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    48f8:	e0 e9       	ldi	r30, 0x90	; 144
    48fa:	f0 e0       	ldi	r31, 0x00	; 0
    48fc:	10 82       	st	Z, r1
	TCCR3B = 0;
    48fe:	a1 e9       	ldi	r26, 0x91	; 145
    4900:	b0 e0       	ldi	r27, 0x00	; 0
    4902:	1c 92       	st	X, r1
	TIMSK3 = 0;
    4904:	21 e7       	ldi	r18, 0x71	; 113
    4906:	30 e0       	ldi	r19, 0x00	; 0
    4908:	e9 01       	movw	r28, r18
    490a:	18 82       	st	Y, r1
	TCCR4A = 0;
    490c:	40 ea       	ldi	r20, 0xA0	; 160
    490e:	50 e0       	ldi	r21, 0x00	; 0
    4910:	ea 01       	movw	r28, r20
    4912:	18 82       	st	Y, r1
	TCCR4B = 0;
    4914:	61 ea       	ldi	r22, 0xA1	; 161
    4916:	70 e0       	ldi	r23, 0x00	; 0
    4918:	eb 01       	movw	r28, r22
    491a:	18 82       	st	Y, r1
	TIMSK4 = 0;
    491c:	02 e7       	ldi	r16, 0x72	; 114
    491e:	10 e0       	ldi	r17, 0x00	; 0
    4920:	e8 01       	movw	r28, r16
    4922:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    4924:	80 81       	ld	r24, Z
    4926:	83 68       	ori	r24, 0x83	; 131
    4928:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    492a:	80 81       	ld	r24, Z
    492c:	83 60       	ori	r24, 0x03	; 3
    492e:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4930:	8c 91       	ld	r24, X
    4932:	8b 60       	ori	r24, 0x0B	; 11
    4934:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    4936:	80 91 f1 02 	lds	r24, 0x02F1
    493a:	90 91 f2 02 	lds	r25, 0x02F2
    493e:	90 93 99 00 	sts	0x0099, r25
    4942:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    4946:	10 92 9b 00 	sts	0x009B, r1
    494a:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    494e:	d9 01       	movw	r26, r18
    4950:	8c 91       	ld	r24, X
    4952:	81 60       	ori	r24, 0x01	; 1
    4954:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    4956:	80 81       	ld	r24, Z
    4958:	8f 75       	andi	r24, 0x5F	; 95
    495a:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    495c:	8e b1       	in	r24, 0x0e	; 14
    495e:	87 7e       	andi	r24, 0xE7	; 231
    4960:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    4962:	ea 01       	movw	r28, r20
    4964:	88 81       	ld	r24, Y
    4966:	83 68       	ori	r24, 0x83	; 131
    4968:	88 83       	st	Y, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    496a:	fb 01       	movw	r30, r22
    496c:	80 81       	ld	r24, Z
    496e:	8b 60       	ori	r24, 0x0B	; 11
    4970:	80 83       	st	Z, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    4972:	80 91 f3 02 	lds	r24, 0x02F3
    4976:	90 91 f4 02 	lds	r25, 0x02F4
    497a:	90 93 a9 00 	sts	0x00A9, r25
    497e:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    4982:	10 92 ab 00 	sts	0x00AB, r1
    4986:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    498a:	d8 01       	movw	r26, r16
    498c:	8c 91       	ld	r24, X
    498e:	81 60       	ori	r24, 0x01	; 1
    4990:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    4992:	88 81       	ld	r24, Y
    4994:	8f 75       	andi	r24, 0x5F	; 95
    4996:	88 83       	st	Y, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4998:	e2 e0       	ldi	r30, 0x02	; 2
    499a:	f1 e0       	ldi	r31, 0x01	; 1
    499c:	80 81       	ld	r24, Z
    499e:	87 7e       	andi	r24, 0xE7	; 231
    49a0:	80 83       	st	Z, r24


}
    49a2:	df 91       	pop	r29
    49a4:	cf 91       	pop	r28
    49a6:	1f 91       	pop	r17
    49a8:	0f 91       	pop	r16
    49aa:	08 95       	ret

000049ac <cast_speed>:

signed int cast_speed(signed int vel) {
    49ac:	2e ef       	ldi	r18, 0xFE	; 254
    49ae:	81 30       	cpi	r24, 0x01	; 1
    49b0:	92 07       	cpc	r25, r18
    49b2:	14 f4       	brge	.+4      	; 0x49b8 <cast_speed+0xc>
    49b4:	81 e0       	ldi	r24, 0x01	; 1
    49b6:	9e ef       	ldi	r25, 0xFE	; 254
    49b8:	9c 01       	movw	r18, r24
    49ba:	82 e0       	ldi	r24, 0x02	; 2
    49bc:	20 30       	cpi	r18, 0x00	; 0
    49be:	38 07       	cpc	r19, r24
    49c0:	14 f0       	brlt	.+4      	; 0x49c6 <cast_speed+0x1a>
    49c2:	2f ef       	ldi	r18, 0xFF	; 255
    49c4:	31 e0       	ldi	r19, 0x01	; 1
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    49c6:	c9 01       	movw	r24, r18
    49c8:	08 95       	ret

000049ca <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    49ca:	28 2f       	mov	r18, r24
    49cc:	33 27       	eor	r19, r19
    49ce:	27 fd       	sbrc	r18, 7
    49d0:	30 95       	com	r19
    49d2:	37 fd       	sbrc	r19, 7
    49d4:	29 c0       	rjmp	.+82     	; 0x4a28 <setLeftSpeed+0x5e>
    49d6:	30 93 0e 03 	sts	0x030E, r19
    49da:	20 93 0d 03 	sts	0x030D, r18

    if(vel >= 0) {
    49de:	87 fd       	sbrc	r24, 7
    49e0:	1a c0       	rjmp	.+52     	; 0x4a16 <setLeftSpeed+0x4c>
        pwm_left_desired = speedl;
    49e2:	30 93 f8 02 	sts	0x02F8, r19
    49e6:	20 93 f7 02 	sts	0x02F7, r18
    49ea:	c9 01       	movw	r24, r18
    } else {
        pwm_left_desired = -(speedl);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    49ec:	22 e0       	ldi	r18, 0x02	; 2
    49ee:	80 30       	cpi	r24, 0x00	; 0
    49f0:	92 07       	cpc	r25, r18
    49f2:	3c f0       	brlt	.+14     	; 0x4a02 <setLeftSpeed+0x38>
    49f4:	8f ef       	ldi	r24, 0xFF	; 255
    49f6:	91 e0       	ldi	r25, 0x01	; 1
    49f8:	90 93 f8 02 	sts	0x02F8, r25
    49fc:	80 93 f7 02 	sts	0x02F7, r24
    4a00:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    4a02:	81 50       	subi	r24, 0x01	; 1
    4a04:	9e 4f       	sbci	r25, 0xFE	; 254
    4a06:	34 f4       	brge	.+12     	; 0x4a14 <setLeftSpeed+0x4a>
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	9e ef       	ldi	r25, 0xFE	; 254
    4a0c:	90 93 f8 02 	sts	0x02F8, r25
    4a10:	80 93 f7 02 	sts	0x02F7, r24
    4a14:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    4a16:	88 27       	eor	r24, r24
    4a18:	99 27       	eor	r25, r25
    4a1a:	82 1b       	sub	r24, r18
    4a1c:	93 0b       	sbc	r25, r19
    4a1e:	90 93 f8 02 	sts	0x02F8, r25
    4a22:	80 93 f7 02 	sts	0x02F7, r24
    4a26:	e2 cf       	rjmp	.-60     	; 0x49ec <setLeftSpeed+0x22>
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4a28:	30 95       	com	r19
    4a2a:	21 95       	neg	r18
    4a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a2e:	d3 cf       	rjmp	.-90     	; 0x49d6 <setLeftSpeed+0xc>

00004a30 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4a30:	28 2f       	mov	r18, r24
    4a32:	33 27       	eor	r19, r19
    4a34:	27 fd       	sbrc	r18, 7
    4a36:	30 95       	com	r19
    4a38:	37 fd       	sbrc	r19, 7
    4a3a:	29 c0       	rjmp	.+82     	; 0x4a8e <setRightSpeed+0x5e>
    4a3c:	30 93 10 03 	sts	0x0310, r19
    4a40:	20 93 0f 03 	sts	0x030F, r18

    if(vel >= 0) {
    4a44:	87 fd       	sbrc	r24, 7
    4a46:	1a c0       	rjmp	.+52     	; 0x4a7c <setRightSpeed+0x4c>
        pwm_right_desired = speedr;
    4a48:	30 93 f6 02 	sts	0x02F6, r19
    4a4c:	20 93 f5 02 	sts	0x02F5, r18
    4a50:	c9 01       	movw	r24, r18
    } else {
        pwm_right_desired = -(speedr);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    4a52:	22 e0       	ldi	r18, 0x02	; 2
    4a54:	80 30       	cpi	r24, 0x00	; 0
    4a56:	92 07       	cpc	r25, r18
    4a58:	3c f0       	brlt	.+14     	; 0x4a68 <setRightSpeed+0x38>
    4a5a:	8f ef       	ldi	r24, 0xFF	; 255
    4a5c:	91 e0       	ldi	r25, 0x01	; 1
    4a5e:	90 93 f6 02 	sts	0x02F6, r25
    4a62:	80 93 f5 02 	sts	0x02F5, r24
    4a66:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    4a68:	81 50       	subi	r24, 0x01	; 1
    4a6a:	9e 4f       	sbci	r25, 0xFE	; 254
    4a6c:	34 f4       	brge	.+12     	; 0x4a7a <setRightSpeed+0x4a>
    4a6e:	81 e0       	ldi	r24, 0x01	; 1
    4a70:	9e ef       	ldi	r25, 0xFE	; 254
    4a72:	90 93 f6 02 	sts	0x02F6, r25
    4a76:	80 93 f5 02 	sts	0x02F5, r24
    4a7a:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    4a7c:	88 27       	eor	r24, r24
    4a7e:	99 27       	eor	r25, r25
    4a80:	82 1b       	sub	r24, r18
    4a82:	93 0b       	sbc	r25, r19
    4a84:	90 93 f6 02 	sts	0x02F6, r25
    4a88:	80 93 f5 02 	sts	0x02F5, r24
    4a8c:	e2 cf       	rjmp	.-60     	; 0x4a52 <setRightSpeed+0x22>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4a8e:	30 95       	com	r19
    4a90:	21 95       	neg	r18
    4a92:	3f 4f       	sbci	r19, 0xFF	; 255
    4a94:	d3 cf       	rjmp	.-90     	; 0x4a3c <setRightSpeed+0xc>

00004a96 <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    4a96:	80 91 53 05 	lds	r24, 0x0553
    4a9a:	88 23       	and	r24, r24
    4a9c:	09 f0       	breq	.+2      	; 0x4aa0 <updateOdomData+0xa>
    4a9e:	3f c0       	rjmp	.+126    	; 0x4b1e <updateOdomData+0x88>
        if(calibVelIndex>1) {
    4aa0:	e0 91 bb 08 	lds	r30, 0x08BB
    4aa4:	e2 30       	cpi	r30, 0x02	; 2
    4aa6:	08 f4       	brcc	.+2      	; 0x4aaa <updateOdomData+0x14>
    4aa8:	77 c0       	rjmp	.+238    	; 0x4b98 <updateOdomData+0x102>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    4aaa:	4e 2f       	mov	r20, r30
    4aac:	50 e0       	ldi	r21, 0x00	; 0
    4aae:	fa 01       	movw	r30, r20
    4ab0:	ee 0f       	add	r30, r30
    4ab2:	ff 1f       	adc	r31, r31
    4ab4:	ee 0f       	add	r30, r30
    4ab6:	ff 1f       	adc	r31, r31
    4ab8:	ee 0f       	add	r30, r30
    4aba:	ff 1f       	adc	r31, r31
    4abc:	ee 0f       	add	r30, r30
    4abe:	ff 1f       	adc	r31, r31
    4ac0:	ec 53       	subi	r30, 0x3C	; 60
    4ac2:	f7 4f       	sbci	r31, 0xF7	; 247
    4ac4:	80 81       	ld	r24, Z
    4ac6:	91 81       	ldd	r25, Z+1	; 0x01
    4ac8:	20 91 76 0b 	lds	r18, 0x0B76
    4acc:	30 91 77 0b 	lds	r19, 0x0B77
    4ad0:	82 17       	cp	r24, r18
    4ad2:	93 07       	cpc	r25, r19
    4ad4:	34 f0       	brlt	.+12     	; 0x4ae2 <updateOdomData+0x4c>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    4ad6:	01 96       	adiw	r24, 0x01	; 1
    4ad8:	90 93 77 0b 	sts	0x0B77, r25
    4adc:	80 93 76 0b 	sts	0x0B76, r24
    4ae0:	9c 01       	movw	r18, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    4ae2:	fa 01       	movw	r30, r20
    4ae4:	31 97       	sbiw	r30, 0x01	; 1
    4ae6:	df 01       	movw	r26, r30
    4ae8:	a2 95       	swap	r26
    4aea:	b2 95       	swap	r27
    4aec:	b0 7f       	andi	r27, 0xF0	; 240
    4aee:	ba 27       	eor	r27, r26
    4af0:	a0 7f       	andi	r26, 0xF0	; 240
    4af2:	ba 27       	eor	r27, r26
    4af4:	ae 51       	subi	r26, 0x1E	; 30
    4af6:	b7 4f       	sbci	r27, 0xF7	; 247
    4af8:	80 91 bc 04 	lds	r24, 0x04BC
    4afc:	90 91 bd 04 	lds	r25, 0x04BD
    4b00:	8d 93       	st	X+, r24
    4b02:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][1] = tempVel;
    4b04:	ee 0f       	add	r30, r30
    4b06:	ff 1f       	adc	r31, r31
    4b08:	ee 0f       	add	r30, r30
    4b0a:	ff 1f       	adc	r31, r31
    4b0c:	ee 0f       	add	r30, r30
    4b0e:	ff 1f       	adc	r31, r31
    4b10:	ee 0f       	add	r30, r30
    4b12:	ff 1f       	adc	r31, r31
    4b14:	ec 51       	subi	r30, 0x1C	; 28
    4b16:	f7 4f       	sbci	r31, 0xF7	; 247
    4b18:	31 83       	std	Z+1, r19	; 0x01
    4b1a:	20 83       	st	Z, r18
    4b1c:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4b1e:	81 30       	cpi	r24, 0x01	; 1
    4b20:	31 f0       	breq	.+12     	; 0x4b2e <updateOdomData+0x98>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4b22:	82 30       	cpi	r24, 0x02	; 2
    4b24:	09 f4       	brne	.+2      	; 0x4b28 <updateOdomData+0x92>
    4b26:	70 c0       	rjmp	.+224    	; 0x4c08 <updateOdomData+0x172>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    4b28:	83 30       	cpi	r24, 0x03	; 3
    4b2a:	e9 f1       	breq	.+122    	; 0x4ba6 <updateOdomData+0x110>
    4b2c:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4b2e:	e0 91 bb 08 	lds	r30, 0x08BB
    4b32:	e2 30       	cpi	r30, 0x02	; 2
    4b34:	08 f4       	brcc	.+2      	; 0x4b38 <updateOdomData+0xa2>
    4b36:	9e c0       	rjmp	.+316    	; 0x4c74 <updateOdomData+0x1de>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    4b38:	4e 2f       	mov	r20, r30
    4b3a:	50 e0       	ldi	r21, 0x00	; 0
    4b3c:	fa 01       	movw	r30, r20
    4b3e:	e2 95       	swap	r30
    4b40:	f2 95       	swap	r31
    4b42:	f0 7f       	andi	r31, 0xF0	; 240
    4b44:	fe 27       	eor	r31, r30
    4b46:	e0 7f       	andi	r30, 0xF0	; 240
    4b48:	fe 27       	eor	r31, r30
    4b4a:	ee 53       	subi	r30, 0x3E	; 62
    4b4c:	f7 4f       	sbci	r31, 0xF7	; 247
    4b4e:	86 81       	ldd	r24, Z+6	; 0x06
    4b50:	97 81       	ldd	r25, Z+7	; 0x07
    4b52:	20 91 76 0b 	lds	r18, 0x0B76
    4b56:	30 91 77 0b 	lds	r19, 0x0B77
    4b5a:	82 17       	cp	r24, r18
    4b5c:	93 07       	cpc	r25, r19
    4b5e:	34 f0       	brlt	.+12     	; 0x4b6c <updateOdomData+0xd6>
                tempVel = calibration[calibVelIndex-2][3]+1;
    4b60:	01 96       	adiw	r24, 0x01	; 1
    4b62:	90 93 77 0b 	sts	0x0B77, r25
    4b66:	80 93 76 0b 	sts	0x0B76, r24
    4b6a:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    4b6c:	fa 01       	movw	r30, r20
    4b6e:	31 97       	sbiw	r30, 0x01	; 1
    4b70:	e2 95       	swap	r30
    4b72:	f2 95       	swap	r31
    4b74:	f0 7f       	andi	r31, 0xF0	; 240
    4b76:	fe 27       	eor	r31, r30
    4b78:	e0 7f       	andi	r30, 0xF0	; 240
    4b7a:	fe 27       	eor	r31, r30
    4b7c:	df 01       	movw	r26, r30
    4b7e:	aa 51       	subi	r26, 0x1A	; 26
    4b80:	b7 4f       	sbci	r27, 0xF7	; 247
    4b82:	80 91 be 04 	lds	r24, 0x04BE
    4b86:	90 91 bf 04 	lds	r25, 0x04BF
    4b8a:	8d 93       	st	X+, r24
    4b8c:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][3] = tempVel;
    4b8e:	ee 51       	subi	r30, 0x1E	; 30
    4b90:	f7 4f       	sbci	r31, 0xF7	; 247
    4b92:	37 83       	std	Z+7, r19	; 0x07
    4b94:	26 83       	std	Z+6, r18	; 0x06
    4b96:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4b98:	4e 2f       	mov	r20, r30
    4b9a:	50 e0       	ldi	r21, 0x00	; 0
    4b9c:	20 91 76 0b 	lds	r18, 0x0B76
    4ba0:	30 91 77 0b 	lds	r19, 0x0B77
    4ba4:	9e cf       	rjmp	.-196    	; 0x4ae2 <updateOdomData+0x4c>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4ba6:	e0 91 bb 08 	lds	r30, 0x08BB
    4baa:	e2 30       	cpi	r30, 0x02	; 2
    4bac:	08 f4       	brcc	.+2      	; 0x4bb0 <updateOdomData+0x11a>
    4bae:	70 c0       	rjmp	.+224    	; 0x4c90 <updateOdomData+0x1fa>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    4bb0:	4e 2f       	mov	r20, r30
    4bb2:	50 e0       	ldi	r21, 0x00	; 0
    4bb4:	fa 01       	movw	r30, r20
    4bb6:	e2 95       	swap	r30
    4bb8:	f2 95       	swap	r31
    4bba:	f0 7f       	andi	r31, 0xF0	; 240
    4bbc:	fe 27       	eor	r31, r30
    4bbe:	e0 7f       	andi	r30, 0xF0	; 240
    4bc0:	fe 27       	eor	r31, r30
    4bc2:	ee 53       	subi	r30, 0x3E	; 62
    4bc4:	f7 4f       	sbci	r31, 0xF7	; 247
    4bc6:	86 85       	ldd	r24, Z+14	; 0x0e
    4bc8:	97 85       	ldd	r25, Z+15	; 0x0f
    4bca:	20 91 76 0b 	lds	r18, 0x0B76
    4bce:	30 91 77 0b 	lds	r19, 0x0B77
    4bd2:	82 17       	cp	r24, r18
    4bd4:	93 07       	cpc	r25, r19
    4bd6:	34 f0       	brlt	.+12     	; 0x4be4 <updateOdomData+0x14e>
                tempVel = calibration[calibVelIndex-2][7]+1;
    4bd8:	01 96       	adiw	r24, 0x01	; 1
    4bda:	90 93 77 0b 	sts	0x0B77, r25
    4bde:	80 93 76 0b 	sts	0x0B76, r24
    4be2:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    4be4:	fa 01       	movw	r30, r20
    4be6:	e2 95       	swap	r30
    4be8:	f2 95       	swap	r31
    4bea:	f0 7f       	andi	r31, 0xF0	; 240
    4bec:	fe 27       	eor	r31, r30
    4bee:	e0 7f       	andi	r30, 0xF0	; 240
    4bf0:	fe 27       	eor	r31, r30
    4bf2:	ee 52       	subi	r30, 0x2E	; 46
    4bf4:	f7 4f       	sbci	r31, 0xF7	; 247
    4bf6:	80 91 be 04 	lds	r24, 0x04BE
    4bfa:	90 91 bf 04 	lds	r25, 0x04BF
    4bfe:	95 87       	std	Z+13, r25	; 0x0d
    4c00:	84 87       	std	Z+12, r24	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    4c02:	37 87       	std	Z+15, r19	; 0x0f
    4c04:	26 87       	std	Z+14, r18	; 0x0e
    4c06:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4c08:	e0 91 bb 08 	lds	r30, 0x08BB
    4c0c:	e2 30       	cpi	r30, 0x02	; 2
    4c0e:	c8 f1       	brcs	.+114    	; 0x4c82 <updateOdomData+0x1ec>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    4c10:	4e 2f       	mov	r20, r30
    4c12:	50 e0       	ldi	r21, 0x00	; 0
    4c14:	fa 01       	movw	r30, r20
    4c16:	e2 95       	swap	r30
    4c18:	f2 95       	swap	r31
    4c1a:	f0 7f       	andi	r31, 0xF0	; 240
    4c1c:	fe 27       	eor	r31, r30
    4c1e:	e0 7f       	andi	r30, 0xF0	; 240
    4c20:	fe 27       	eor	r31, r30
    4c22:	ee 53       	subi	r30, 0x3E	; 62
    4c24:	f7 4f       	sbci	r31, 0xF7	; 247
    4c26:	82 85       	ldd	r24, Z+10	; 0x0a
    4c28:	93 85       	ldd	r25, Z+11	; 0x0b
    4c2a:	20 91 76 0b 	lds	r18, 0x0B76
    4c2e:	30 91 77 0b 	lds	r19, 0x0B77
    4c32:	82 17       	cp	r24, r18
    4c34:	93 07       	cpc	r25, r19
    4c36:	34 f0       	brlt	.+12     	; 0x4c44 <updateOdomData+0x1ae>
                tempVel = calibration[calibVelIndex-2][5]+1;
    4c38:	01 96       	adiw	r24, 0x01	; 1
    4c3a:	90 93 77 0b 	sts	0x0B77, r25
    4c3e:	80 93 76 0b 	sts	0x0B76, r24
    4c42:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    4c44:	fa 01       	movw	r30, r20
    4c46:	31 97       	sbiw	r30, 0x01	; 1
    4c48:	ee 0f       	add	r30, r30
    4c4a:	ff 1f       	adc	r31, r31
    4c4c:	ee 0f       	add	r30, r30
    4c4e:	ff 1f       	adc	r31, r31
    4c50:	ee 0f       	add	r30, r30
    4c52:	ff 1f       	adc	r31, r31
    4c54:	ee 0f       	add	r30, r30
    4c56:	ff 1f       	adc	r31, r31
    4c58:	df 01       	movw	r26, r30
    4c5a:	a6 51       	subi	r26, 0x16	; 22
    4c5c:	b7 4f       	sbci	r27, 0xF7	; 247
    4c5e:	80 91 bc 04 	lds	r24, 0x04BC
    4c62:	90 91 bd 04 	lds	r25, 0x04BD
    4c66:	8d 93       	st	X+, r24
    4c68:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][5] = tempVel;
    4c6a:	ee 51       	subi	r30, 0x1E	; 30
    4c6c:	f7 4f       	sbci	r31, 0xF7	; 247
    4c6e:	33 87       	std	Z+11, r19	; 0x0b
    4c70:	22 87       	std	Z+10, r18	; 0x0a
    4c72:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4c74:	4e 2f       	mov	r20, r30
    4c76:	50 e0       	ldi	r21, 0x00	; 0
    4c78:	20 91 76 0b 	lds	r18, 0x0B76
    4c7c:	30 91 77 0b 	lds	r19, 0x0B77
    4c80:	75 cf       	rjmp	.-278    	; 0x4b6c <updateOdomData+0xd6>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4c82:	4e 2f       	mov	r20, r30
    4c84:	50 e0       	ldi	r21, 0x00	; 0
    4c86:	20 91 76 0b 	lds	r18, 0x0B76
    4c8a:	30 91 77 0b 	lds	r19, 0x0B77
    4c8e:	da cf       	rjmp	.-76     	; 0x4c44 <updateOdomData+0x1ae>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4c90:	4e 2f       	mov	r20, r30
    4c92:	50 e0       	ldi	r21, 0x00	; 0
    4c94:	20 91 76 0b 	lds	r18, 0x0B76
    4c98:	30 91 77 0b 	lds	r19, 0x0B77
    4c9c:	a3 cf       	rjmp	.-186    	; 0x4be4 <updateOdomData+0x14e>

00004c9e <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    4c9e:	8f 92       	push	r8
    4ca0:	9f 92       	push	r9
    4ca2:	af 92       	push	r10
    4ca4:	bf 92       	push	r11
    4ca6:	cf 92       	push	r12
    4ca8:	df 92       	push	r13
    4caa:	ef 92       	push	r14
    4cac:	ff 92       	push	r15
    4cae:	0f 93       	push	r16
    4cb0:	1f 93       	push	r17
    4cb2:	cf 93       	push	r28
    4cb4:	df 93       	push	r29
    4cb6:	46 2f       	mov	r20, r22
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    4cb8:	9c 01       	movw	r18, r24
    4cba:	22 0f       	add	r18, r18
    4cbc:	33 1f       	adc	r19, r19
    4cbe:	22 0f       	add	r18, r18
    4cc0:	33 1f       	adc	r19, r19
    4cc2:	28 0f       	add	r18, r24
    4cc4:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    4cc6:	21 15       	cp	r18, r1
    4cc8:	31 05       	cpc	r19, r1
    4cca:	09 f4       	brne	.+2      	; 0x4cce <getInputFromSpeed+0x30>
    4ccc:	92 c0       	rjmp	.+292    	; 0x4df2 <getInputFromSpeed+0x154>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    4cce:	86 2f       	mov	r24, r22
    4cd0:	82 50       	subi	r24, 0x02	; 2
    4cd2:	82 30       	cpi	r24, 0x02	; 2
    4cd4:	08 f4       	brcc	.+2      	; 0x4cd8 <getInputFromSpeed+0x3a>
    4cd6:	9d c0       	rjmp	.+314    	; 0x4e12 <getInputFromSpeed+0x174>
    4cd8:	44 23       	and	r20, r20
    4cda:	09 f0       	breq	.+2      	; 0x4cde <getInputFromSpeed+0x40>
    4cdc:	77 c0       	rjmp	.+238    	; 0x4dcc <getInputFromSpeed+0x12e>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    4cde:	60 91 e4 08 	lds	r22, 0x08E4
    4ce2:	70 91 e5 08 	lds	r23, 0x08E5
    4ce6:	62 17       	cp	r22, r18
    4ce8:	73 07       	cpc	r23, r19
    4cea:	0c f0       	brlt	.+2      	; 0x4cee <getInputFromSpeed+0x50>
    4cec:	99 c0       	rjmp	.+306    	; 0x4e20 <getInputFromSpeed+0x182>
    4cee:	80 91 f4 08 	lds	r24, 0x08F4
    4cf2:	90 91 f5 08 	lds	r25, 0x08F5
    4cf6:	82 17       	cp	r24, r18
    4cf8:	93 07       	cpc	r25, r19
    4cfa:	0c f0       	brlt	.+2      	; 0x4cfe <getInputFromSpeed+0x60>
    4cfc:	1e c2       	rjmp	.+1084   	; 0x513a <getInputFromSpeed+0x49c>
    4cfe:	80 91 04 09 	lds	r24, 0x0904
    4d02:	90 91 05 09 	lds	r25, 0x0905
    4d06:	82 17       	cp	r24, r18
    4d08:	93 07       	cpc	r25, r19
    4d0a:	0c f0       	brlt	.+2      	; 0x4d0e <getInputFromSpeed+0x70>
    4d0c:	66 c3       	rjmp	.+1740   	; 0x53da <getInputFromSpeed+0x73c>
    4d0e:	80 91 14 09 	lds	r24, 0x0914
    4d12:	90 91 15 09 	lds	r25, 0x0915
    4d16:	82 17       	cp	r24, r18
    4d18:	93 07       	cpc	r25, r19
    4d1a:	0c f0       	brlt	.+2      	; 0x4d1e <getInputFromSpeed+0x80>
    4d1c:	5b c3       	rjmp	.+1718   	; 0x53d4 <getInputFromSpeed+0x736>
    4d1e:	80 91 24 09 	lds	r24, 0x0924
    4d22:	90 91 25 09 	lds	r25, 0x0925
    4d26:	82 17       	cp	r24, r18
    4d28:	93 07       	cpc	r25, r19
    4d2a:	0c f0       	brlt	.+2      	; 0x4d2e <getInputFromSpeed+0x90>
    4d2c:	59 c3       	rjmp	.+1714   	; 0x53e0 <getInputFromSpeed+0x742>
    4d2e:	80 91 34 09 	lds	r24, 0x0934
    4d32:	90 91 35 09 	lds	r25, 0x0935
    4d36:	82 17       	cp	r24, r18
    4d38:	93 07       	cpc	r25, r19
    4d3a:	0c f0       	brlt	.+2      	; 0x4d3e <getInputFromSpeed+0xa0>
    4d3c:	54 c3       	rjmp	.+1704   	; 0x53e6 <getInputFromSpeed+0x748>
    4d3e:	80 91 44 09 	lds	r24, 0x0944
    4d42:	90 91 45 09 	lds	r25, 0x0945
    4d46:	82 17       	cp	r24, r18
    4d48:	93 07       	cpc	r25, r19
    4d4a:	0c f0       	brlt	.+2      	; 0x4d4e <getInputFromSpeed+0xb0>
    4d4c:	52 c3       	rjmp	.+1700   	; 0x53f2 <getInputFromSpeed+0x754>
    4d4e:	80 91 54 09 	lds	r24, 0x0954
    4d52:	90 91 55 09 	lds	r25, 0x0955
    4d56:	82 17       	cp	r24, r18
    4d58:	93 07       	cpc	r25, r19
    4d5a:	0c f0       	brlt	.+2      	; 0x4d5e <getInputFromSpeed+0xc0>
    4d5c:	47 c3       	rjmp	.+1678   	; 0x53ec <getInputFromSpeed+0x74e>
    4d5e:	80 91 64 09 	lds	r24, 0x0964
    4d62:	90 91 65 09 	lds	r25, 0x0965
    4d66:	82 17       	cp	r24, r18
    4d68:	93 07       	cpc	r25, r19
    4d6a:	0c f0       	brlt	.+2      	; 0x4d6e <getInputFromSpeed+0xd0>
    4d6c:	45 c3       	rjmp	.+1674   	; 0x53f8 <getInputFromSpeed+0x75a>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    4d6e:	b9 01       	movw	r22, r18
    4d70:	88 27       	eor	r24, r24
    4d72:	77 fd       	sbrc	r23, 7
    4d74:	80 95       	com	r24
    4d76:	98 2f       	mov	r25, r24
    4d78:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    4d7c:	7b 01       	movw	r14, r22
    4d7e:	8c 01       	movw	r16, r24
    4d80:	60 91 62 09 	lds	r22, 0x0962
    4d84:	70 91 63 09 	lds	r23, 0x0963
    4d88:	88 27       	eor	r24, r24
    4d8a:	77 fd       	sbrc	r23, 7
    4d8c:	80 95       	com	r24
    4d8e:	98 2f       	mov	r25, r24
    4d90:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    4d94:	9b 01       	movw	r18, r22
    4d96:	ac 01       	movw	r20, r24
    4d98:	c8 01       	movw	r24, r16
    4d9a:	b7 01       	movw	r22, r14
    4d9c:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    4da0:	7b 01       	movw	r14, r22
    4da2:	8c 01       	movw	r16, r24
    4da4:	60 91 64 09 	lds	r22, 0x0964
    4da8:	70 91 65 09 	lds	r23, 0x0965
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    4dac:	88 27       	eor	r24, r24
    4dae:	77 fd       	sbrc	r23, 7
    4db0:	80 95       	com	r24
    4db2:	98 2f       	mov	r25, r24
    4db4:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    4db8:	9b 01       	movw	r18, r22
    4dba:	ac 01       	movw	r20, r24
    4dbc:	c8 01       	movw	r24, r16
    4dbe:	b7 01       	movw	r22, r14
    4dc0:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    4dc4:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    4dc8:	9b 01       	movw	r18, r22
    4dca:	15 c0       	rjmp	.+42     	; 0x4df6 <getInputFromSpeed+0x158>
    4dcc:	43 30       	cpi	r20, 0x03	; 3
    4dce:	c1 f1       	breq	.+112    	; 0x4e40 <getInputFromSpeed+0x1a2>
    4dd0:	42 30       	cpi	r20, 0x02	; 2
    4dd2:	09 f4       	brne	.+2      	; 0x4dd6 <getInputFromSpeed+0x138>
    4dd4:	24 c1       	rjmp	.+584    	; 0x501e <getInputFromSpeed+0x380>
    4dd6:	41 30       	cpi	r20, 0x01	; 1
    4dd8:	09 f4       	brne	.+2      	; 0x4ddc <getInputFromSpeed+0x13e>
    4dda:	ac c0       	rjmp	.+344    	; 0x4f34 <getInputFromSpeed+0x296>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    4ddc:	44 23       	and	r20, r20
    4dde:	39 f2       	breq	.-114    	; 0x4d6e <getInputFromSpeed+0xd0>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    4de0:	41 30       	cpi	r20, 0x01	; 1
    4de2:	09 f4       	brne	.+2      	; 0x4de6 <getInputFromSpeed+0x148>
    4de4:	ef c0       	rjmp	.+478    	; 0x4fc4 <getInputFromSpeed+0x326>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    4de6:	42 30       	cpi	r20, 0x02	; 2
    4de8:	09 f4       	brne	.+2      	; 0x4dec <getInputFromSpeed+0x14e>
    4dea:	61 c1       	rjmp	.+706    	; 0x50ae <getInputFromSpeed+0x410>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    4dec:	43 30       	cpi	r20, 0x03	; 3
    4dee:	09 f4       	brne	.+2      	; 0x4df2 <getInputFromSpeed+0x154>
    4df0:	6f c0       	rjmp	.+222    	; 0x4ed0 <getInputFromSpeed+0x232>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
            temp = -temp;
    4df2:	20 e0       	ldi	r18, 0x00	; 0
    4df4:	30 e0       	ldi	r19, 0x00	; 0
        }        
    }
    
    return temp;
}
    4df6:	c9 01       	movw	r24, r18
    4df8:	df 91       	pop	r29
    4dfa:	cf 91       	pop	r28
    4dfc:	1f 91       	pop	r17
    4dfe:	0f 91       	pop	r16
    4e00:	ff 90       	pop	r15
    4e02:	ef 90       	pop	r14
    4e04:	df 90       	pop	r13
    4e06:	cf 90       	pop	r12
    4e08:	bf 90       	pop	r11
    4e0a:	af 90       	pop	r10
    4e0c:	9f 90       	pop	r9
    4e0e:	8f 90       	pop	r8
    4e10:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    4e12:	30 95       	com	r19
    4e14:	21 95       	neg	r18
    4e16:	3f 4f       	sbci	r19, 0xFF	; 255
    4e18:	44 23       	and	r20, r20
    4e1a:	09 f4       	brne	.+2      	; 0x4e1e <getInputFromSpeed+0x180>
    4e1c:	60 cf       	rjmp	.-320    	; 0x4cde <getInputFromSpeed+0x40>
    4e1e:	d6 cf       	rjmp	.-84     	; 0x4dcc <getInputFromSpeed+0x12e>
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
    4e20:	80 91 e2 08 	lds	r24, 0x08E2
    4e24:	90 91 e3 08 	lds	r25, 0x08E3
    4e28:	ac 01       	movw	r20, r24
    4e2a:	24 9f       	mul	r18, r20
    4e2c:	c0 01       	movw	r24, r0
    4e2e:	25 9f       	mul	r18, r21
    4e30:	90 0d       	add	r25, r0
    4e32:	34 9f       	mul	r19, r20
    4e34:	90 0d       	add	r25, r0
    4e36:	11 24       	eor	r1, r1
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    4e38:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
    4e3c:	9b 01       	movw	r18, r22
    4e3e:	db cf       	rjmp	.-74     	; 0x4df6 <getInputFromSpeed+0x158>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    4e40:	60 91 f0 08 	lds	r22, 0x08F0
    4e44:	70 91 f1 08 	lds	r23, 0x08F1
    4e48:	62 17       	cp	r22, r18
    4e4a:	73 07       	cpc	r23, r19
    4e4c:	0c f0       	brlt	.+2      	; 0x4e50 <getInputFromSpeed+0x1b2>
    4e4e:	62 c1       	rjmp	.+708    	; 0x5114 <getInputFromSpeed+0x476>
    4e50:	80 91 00 09 	lds	r24, 0x0900
    4e54:	90 91 01 09 	lds	r25, 0x0901
    4e58:	82 17       	cp	r24, r18
    4e5a:	93 07       	cpc	r25, r19
    4e5c:	0c f0       	brlt	.+2      	; 0x4e60 <getInputFromSpeed+0x1c2>
    4e5e:	6d c1       	rjmp	.+730    	; 0x513a <getInputFromSpeed+0x49c>
    4e60:	80 91 10 09 	lds	r24, 0x0910
    4e64:	90 91 11 09 	lds	r25, 0x0911
    4e68:	82 17       	cp	r24, r18
    4e6a:	93 07       	cpc	r25, r19
    4e6c:	0c f0       	brlt	.+2      	; 0x4e70 <getInputFromSpeed+0x1d2>
    4e6e:	b5 c2       	rjmp	.+1386   	; 0x53da <getInputFromSpeed+0x73c>
    4e70:	80 91 20 09 	lds	r24, 0x0920
    4e74:	90 91 21 09 	lds	r25, 0x0921
    4e78:	82 17       	cp	r24, r18
    4e7a:	93 07       	cpc	r25, r19
    4e7c:	0c f0       	brlt	.+2      	; 0x4e80 <getInputFromSpeed+0x1e2>
    4e7e:	aa c2       	rjmp	.+1364   	; 0x53d4 <getInputFromSpeed+0x736>
    4e80:	80 91 30 09 	lds	r24, 0x0930
    4e84:	90 91 31 09 	lds	r25, 0x0931
    4e88:	82 17       	cp	r24, r18
    4e8a:	93 07       	cpc	r25, r19
    4e8c:	0c f0       	brlt	.+2      	; 0x4e90 <getInputFromSpeed+0x1f2>
    4e8e:	a8 c2       	rjmp	.+1360   	; 0x53e0 <getInputFromSpeed+0x742>
    4e90:	80 91 40 09 	lds	r24, 0x0940
    4e94:	90 91 41 09 	lds	r25, 0x0941
    4e98:	82 17       	cp	r24, r18
    4e9a:	93 07       	cpc	r25, r19
    4e9c:	0c f0       	brlt	.+2      	; 0x4ea0 <getInputFromSpeed+0x202>
    4e9e:	a3 c2       	rjmp	.+1350   	; 0x53e6 <getInputFromSpeed+0x748>
    4ea0:	80 91 50 09 	lds	r24, 0x0950
    4ea4:	90 91 51 09 	lds	r25, 0x0951
    4ea8:	82 17       	cp	r24, r18
    4eaa:	93 07       	cpc	r25, r19
    4eac:	0c f0       	brlt	.+2      	; 0x4eb0 <getInputFromSpeed+0x212>
    4eae:	a1 c2       	rjmp	.+1346   	; 0x53f2 <getInputFromSpeed+0x754>
    4eb0:	80 91 60 09 	lds	r24, 0x0960
    4eb4:	90 91 61 09 	lds	r25, 0x0961
    4eb8:	82 17       	cp	r24, r18
    4eba:	93 07       	cpc	r25, r19
    4ebc:	0c f0       	brlt	.+2      	; 0x4ec0 <getInputFromSpeed+0x222>
    4ebe:	96 c2       	rjmp	.+1324   	; 0x53ec <getInputFromSpeed+0x74e>
    4ec0:	80 91 70 09 	lds	r24, 0x0970
    4ec4:	90 91 71 09 	lds	r25, 0x0971
    4ec8:	82 17       	cp	r24, r18
    4eca:	93 07       	cpc	r25, r19
    4ecc:	0c f0       	brlt	.+2      	; 0x4ed0 <getInputFromSpeed+0x232>
    4ece:	94 c2       	rjmp	.+1320   	; 0x53f8 <getInputFromSpeed+0x75a>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    4ed0:	b9 01       	movw	r22, r18
    4ed2:	88 27       	eor	r24, r24
    4ed4:	77 fd       	sbrc	r23, 7
    4ed6:	80 95       	com	r24
    4ed8:	98 2f       	mov	r25, r24
    4eda:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    4ede:	7b 01       	movw	r14, r22
    4ee0:	8c 01       	movw	r16, r24
    4ee2:	60 91 6e 09 	lds	r22, 0x096E
    4ee6:	70 91 6f 09 	lds	r23, 0x096F
    4eea:	88 27       	eor	r24, r24
    4eec:	77 fd       	sbrc	r23, 7
    4eee:	80 95       	com	r24
    4ef0:	98 2f       	mov	r25, r24
    4ef2:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    4ef6:	9b 01       	movw	r18, r22
    4ef8:	ac 01       	movw	r20, r24
    4efa:	c8 01       	movw	r24, r16
    4efc:	b7 01       	movw	r22, r14
    4efe:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    4f02:	7b 01       	movw	r14, r22
    4f04:	8c 01       	movw	r16, r24
    4f06:	60 91 70 09 	lds	r22, 0x0970
    4f0a:	70 91 71 09 	lds	r23, 0x0971
    4f0e:	88 27       	eor	r24, r24
    4f10:	77 fd       	sbrc	r23, 7
    4f12:	80 95       	com	r24
    4f14:	98 2f       	mov	r25, r24
    4f16:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    4f1a:	9b 01       	movw	r18, r22
    4f1c:	ac 01       	movw	r20, r24
    4f1e:	c8 01       	movw	r24, r16
    4f20:	b7 01       	movw	r22, r14
    4f22:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    4f26:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
            temp = -temp;
    4f2a:	22 27       	eor	r18, r18
    4f2c:	33 27       	eor	r19, r19
    4f2e:	26 1b       	sub	r18, r22
    4f30:	37 0b       	sbc	r19, r23
    4f32:	61 cf       	rjmp	.-318    	; 0x4df6 <getInputFromSpeed+0x158>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    4f34:	60 91 e8 08 	lds	r22, 0x08E8
    4f38:	70 91 e9 08 	lds	r23, 0x08E9
    4f3c:	62 17       	cp	r22, r18
    4f3e:	73 07       	cpc	r23, r19
    4f40:	0c f0       	brlt	.+2      	; 0x4f44 <getInputFromSpeed+0x2a6>
    4f42:	60 c0       	rjmp	.+192    	; 0x5004 <getInputFromSpeed+0x366>
    4f44:	80 91 f8 08 	lds	r24, 0x08F8
    4f48:	90 91 f9 08 	lds	r25, 0x08F9
    4f4c:	82 17       	cp	r24, r18
    4f4e:	93 07       	cpc	r25, r19
    4f50:	0c f0       	brlt	.+2      	; 0x4f54 <getInputFromSpeed+0x2b6>
    4f52:	f3 c0       	rjmp	.+486    	; 0x513a <getInputFromSpeed+0x49c>
    4f54:	80 91 08 09 	lds	r24, 0x0908
    4f58:	90 91 09 09 	lds	r25, 0x0909
    4f5c:	82 17       	cp	r24, r18
    4f5e:	93 07       	cpc	r25, r19
    4f60:	0c f0       	brlt	.+2      	; 0x4f64 <getInputFromSpeed+0x2c6>
    4f62:	3b c2       	rjmp	.+1142   	; 0x53da <getInputFromSpeed+0x73c>
    4f64:	80 91 18 09 	lds	r24, 0x0918
    4f68:	90 91 19 09 	lds	r25, 0x0919
    4f6c:	82 17       	cp	r24, r18
    4f6e:	93 07       	cpc	r25, r19
    4f70:	0c f0       	brlt	.+2      	; 0x4f74 <getInputFromSpeed+0x2d6>
    4f72:	30 c2       	rjmp	.+1120   	; 0x53d4 <getInputFromSpeed+0x736>
    4f74:	80 91 28 09 	lds	r24, 0x0928
    4f78:	90 91 29 09 	lds	r25, 0x0929
    4f7c:	82 17       	cp	r24, r18
    4f7e:	93 07       	cpc	r25, r19
    4f80:	0c f0       	brlt	.+2      	; 0x4f84 <getInputFromSpeed+0x2e6>
    4f82:	2e c2       	rjmp	.+1116   	; 0x53e0 <getInputFromSpeed+0x742>
    4f84:	80 91 38 09 	lds	r24, 0x0938
    4f88:	90 91 39 09 	lds	r25, 0x0939
    4f8c:	82 17       	cp	r24, r18
    4f8e:	93 07       	cpc	r25, r19
    4f90:	0c f0       	brlt	.+2      	; 0x4f94 <getInputFromSpeed+0x2f6>
    4f92:	29 c2       	rjmp	.+1106   	; 0x53e6 <getInputFromSpeed+0x748>
    4f94:	80 91 48 09 	lds	r24, 0x0948
    4f98:	90 91 49 09 	lds	r25, 0x0949
    4f9c:	82 17       	cp	r24, r18
    4f9e:	93 07       	cpc	r25, r19
    4fa0:	0c f0       	brlt	.+2      	; 0x4fa4 <getInputFromSpeed+0x306>
    4fa2:	27 c2       	rjmp	.+1102   	; 0x53f2 <getInputFromSpeed+0x754>
    4fa4:	80 91 58 09 	lds	r24, 0x0958
    4fa8:	90 91 59 09 	lds	r25, 0x0959
    4fac:	82 17       	cp	r24, r18
    4fae:	93 07       	cpc	r25, r19
    4fb0:	0c f0       	brlt	.+2      	; 0x4fb4 <getInputFromSpeed+0x316>
    4fb2:	1c c2       	rjmp	.+1080   	; 0x53ec <getInputFromSpeed+0x74e>
    4fb4:	80 91 68 09 	lds	r24, 0x0968
    4fb8:	90 91 69 09 	lds	r25, 0x0969
    4fbc:	82 17       	cp	r24, r18
    4fbe:	93 07       	cpc	r25, r19
    4fc0:	0c f0       	brlt	.+2      	; 0x4fc4 <getInputFromSpeed+0x326>
    4fc2:	1a c2       	rjmp	.+1076   	; 0x53f8 <getInputFromSpeed+0x75a>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    4fc4:	b9 01       	movw	r22, r18
    4fc6:	88 27       	eor	r24, r24
    4fc8:	77 fd       	sbrc	r23, 7
    4fca:	80 95       	com	r24
    4fcc:	98 2f       	mov	r25, r24
    4fce:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    4fd2:	7b 01       	movw	r14, r22
    4fd4:	8c 01       	movw	r16, r24
    4fd6:	60 91 66 09 	lds	r22, 0x0966
    4fda:	70 91 67 09 	lds	r23, 0x0967
    4fde:	88 27       	eor	r24, r24
    4fe0:	77 fd       	sbrc	r23, 7
    4fe2:	80 95       	com	r24
    4fe4:	98 2f       	mov	r25, r24
    4fe6:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    4fea:	9b 01       	movw	r18, r22
    4fec:	ac 01       	movw	r20, r24
    4fee:	c8 01       	movw	r24, r16
    4ff0:	b7 01       	movw	r22, r14
    4ff2:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    4ff6:	7b 01       	movw	r14, r22
    4ff8:	8c 01       	movw	r16, r24
    4ffa:	60 91 68 09 	lds	r22, 0x0968
    4ffe:	70 91 69 09 	lds	r23, 0x0969
    5002:	d4 ce       	rjmp	.-600    	; 0x4dac <getInputFromSpeed+0x10e>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    5004:	80 91 e6 08 	lds	r24, 0x08E6
    5008:	90 91 e7 08 	lds	r25, 0x08E7
    500c:	fc 01       	movw	r30, r24
    500e:	2e 9f       	mul	r18, r30
    5010:	c0 01       	movw	r24, r0
    5012:	2f 9f       	mul	r18, r31
    5014:	90 0d       	add	r25, r0
    5016:	3e 9f       	mul	r19, r30
    5018:	90 0d       	add	r25, r0
    501a:	11 24       	eor	r1, r1
    501c:	0d cf       	rjmp	.-486    	; 0x4e38 <getInputFromSpeed+0x19a>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    501e:	60 91 ec 08 	lds	r22, 0x08EC
    5022:	70 91 ed 08 	lds	r23, 0x08ED
    5026:	62 17       	cp	r22, r18
    5028:	73 07       	cpc	r23, r19
    502a:	0c f0       	brlt	.+2      	; 0x502e <getInputFromSpeed+0x390>
    502c:	60 c0       	rjmp	.+192    	; 0x50ee <getInputFromSpeed+0x450>
    502e:	80 91 fc 08 	lds	r24, 0x08FC
    5032:	90 91 fd 08 	lds	r25, 0x08FD
    5036:	82 17       	cp	r24, r18
    5038:	93 07       	cpc	r25, r19
    503a:	0c f0       	brlt	.+2      	; 0x503e <getInputFromSpeed+0x3a0>
    503c:	7e c0       	rjmp	.+252    	; 0x513a <getInputFromSpeed+0x49c>
    503e:	80 91 0c 09 	lds	r24, 0x090C
    5042:	90 91 0d 09 	lds	r25, 0x090D
    5046:	82 17       	cp	r24, r18
    5048:	93 07       	cpc	r25, r19
    504a:	0c f0       	brlt	.+2      	; 0x504e <getInputFromSpeed+0x3b0>
    504c:	c6 c1       	rjmp	.+908    	; 0x53da <getInputFromSpeed+0x73c>
    504e:	80 91 1c 09 	lds	r24, 0x091C
    5052:	90 91 1d 09 	lds	r25, 0x091D
    5056:	82 17       	cp	r24, r18
    5058:	93 07       	cpc	r25, r19
    505a:	0c f0       	brlt	.+2      	; 0x505e <getInputFromSpeed+0x3c0>
    505c:	bb c1       	rjmp	.+886    	; 0x53d4 <getInputFromSpeed+0x736>
    505e:	80 91 2c 09 	lds	r24, 0x092C
    5062:	90 91 2d 09 	lds	r25, 0x092D
    5066:	82 17       	cp	r24, r18
    5068:	93 07       	cpc	r25, r19
    506a:	0c f0       	brlt	.+2      	; 0x506e <getInputFromSpeed+0x3d0>
    506c:	b9 c1       	rjmp	.+882    	; 0x53e0 <getInputFromSpeed+0x742>
    506e:	80 91 3c 09 	lds	r24, 0x093C
    5072:	90 91 3d 09 	lds	r25, 0x093D
    5076:	82 17       	cp	r24, r18
    5078:	93 07       	cpc	r25, r19
    507a:	0c f0       	brlt	.+2      	; 0x507e <getInputFromSpeed+0x3e0>
    507c:	b4 c1       	rjmp	.+872    	; 0x53e6 <getInputFromSpeed+0x748>
    507e:	80 91 4c 09 	lds	r24, 0x094C
    5082:	90 91 4d 09 	lds	r25, 0x094D
    5086:	82 17       	cp	r24, r18
    5088:	93 07       	cpc	r25, r19
    508a:	0c f0       	brlt	.+2      	; 0x508e <getInputFromSpeed+0x3f0>
    508c:	b2 c1       	rjmp	.+868    	; 0x53f2 <getInputFromSpeed+0x754>
    508e:	80 91 5c 09 	lds	r24, 0x095C
    5092:	90 91 5d 09 	lds	r25, 0x095D
    5096:	82 17       	cp	r24, r18
    5098:	93 07       	cpc	r25, r19
    509a:	0c f0       	brlt	.+2      	; 0x509e <getInputFromSpeed+0x400>
    509c:	a7 c1       	rjmp	.+846    	; 0x53ec <getInputFromSpeed+0x74e>
    509e:	80 91 6c 09 	lds	r24, 0x096C
    50a2:	90 91 6d 09 	lds	r25, 0x096D
    50a6:	82 17       	cp	r24, r18
    50a8:	93 07       	cpc	r25, r19
    50aa:	0c f0       	brlt	.+2      	; 0x50ae <getInputFromSpeed+0x410>
    50ac:	a5 c1       	rjmp	.+842    	; 0x53f8 <getInputFromSpeed+0x75a>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    50ae:	b9 01       	movw	r22, r18
    50b0:	88 27       	eor	r24, r24
    50b2:	77 fd       	sbrc	r23, 7
    50b4:	80 95       	com	r24
    50b6:	98 2f       	mov	r25, r24
    50b8:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    50bc:	7b 01       	movw	r14, r22
    50be:	8c 01       	movw	r16, r24
    50c0:	60 91 6a 09 	lds	r22, 0x096A
    50c4:	70 91 6b 09 	lds	r23, 0x096B
    50c8:	88 27       	eor	r24, r24
    50ca:	77 fd       	sbrc	r23, 7
    50cc:	80 95       	com	r24
    50ce:	98 2f       	mov	r25, r24
    50d0:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    50d4:	9b 01       	movw	r18, r22
    50d6:	ac 01       	movw	r20, r24
    50d8:	c8 01       	movw	r24, r16
    50da:	b7 01       	movw	r22, r14
    50dc:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    50e0:	7b 01       	movw	r14, r22
    50e2:	8c 01       	movw	r16, r24
    50e4:	60 91 6c 09 	lds	r22, 0x096C
    50e8:	70 91 6d 09 	lds	r23, 0x096D
    50ec:	10 cf       	rjmp	.-480    	; 0x4f0e <getInputFromSpeed+0x270>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    50ee:	80 91 ea 08 	lds	r24, 0x08EA
    50f2:	90 91 eb 08 	lds	r25, 0x08EB
    50f6:	ac 01       	movw	r20, r24
    50f8:	24 9f       	mul	r18, r20
    50fa:	c0 01       	movw	r24, r0
    50fc:	25 9f       	mul	r18, r21
    50fe:	90 0d       	add	r25, r0
    5100:	34 9f       	mul	r19, r20
    5102:	90 0d       	add	r25, r0
    5104:	11 24       	eor	r1, r1
    5106:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
            temp = -temp;
    510a:	22 27       	eor	r18, r18
    510c:	33 27       	eor	r19, r19
    510e:	26 1b       	sub	r18, r22
    5110:	37 0b       	sbc	r19, r23
    5112:	71 ce       	rjmp	.-798    	; 0x4df6 <getInputFromSpeed+0x158>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
    5114:	80 91 ee 08 	lds	r24, 0x08EE
    5118:	90 91 ef 08 	lds	r25, 0x08EF
    511c:	fc 01       	movw	r30, r24
    511e:	2e 9f       	mul	r18, r30
    5120:	c0 01       	movw	r24, r0
    5122:	2f 9f       	mul	r18, r31
    5124:	90 0d       	add	r25, r0
    5126:	3e 9f       	mul	r19, r30
    5128:	90 0d       	add	r25, r0
    512a:	11 24       	eor	r1, r1
    512c:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
            temp = -temp;
    5130:	22 27       	eor	r18, r18
    5132:	33 27       	eor	r19, r19
    5134:	26 1b       	sub	r18, r22
    5136:	37 0b       	sbc	r19, r23
    5138:	5e ce       	rjmp	.-836    	; 0x4df6 <getInputFromSpeed+0x158>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    513a:	c1 e0       	ldi	r28, 0x01	; 1
    513c:	d0 e0       	ldi	r29, 0x00	; 0
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    513e:	c9 30       	cpi	r28, 0x09	; 9
    5140:	d1 05       	cpc	r29, r1
    5142:	09 f4       	brne	.+2      	; 0x5146 <getInputFromSpeed+0x4a8>
    5144:	4b ce       	rjmp	.-874    	; 0x4ddc <getInputFromSpeed+0x13e>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    5146:	44 23       	and	r20, r20
    5148:	09 f0       	breq	.+2      	; 0x514c <getInputFromSpeed+0x4ae>
    514a:	59 c0       	rjmp	.+178    	; 0x51fe <getInputFromSpeed+0x560>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    514c:	fe 01       	movw	r30, r28
    514e:	31 97       	sbiw	r30, 0x01	; 1
    5150:	ee 0f       	add	r30, r30
    5152:	ff 1f       	adc	r31, r31
    5154:	ee 0f       	add	r30, r30
    5156:	ff 1f       	adc	r31, r31
    5158:	ee 0f       	add	r30, r30
    515a:	ff 1f       	adc	r31, r31
    515c:	ee 0f       	add	r30, r30
    515e:	ff 1f       	adc	r31, r31
    5160:	df 01       	movw	r26, r30
    5162:	ac 51       	subi	r26, 0x1C	; 28
    5164:	b7 4f       	sbci	r27, 0xF7	; 247
    5166:	cd 90       	ld	r12, X+
    5168:	dc 90       	ld	r13, X
    516a:	ee 51       	subi	r30, 0x1E	; 30
    516c:	f7 4f       	sbci	r31, 0xF7	; 247
    516e:	a0 80       	ld	r10, Z
    5170:	b1 80       	ldd	r11, Z+1	; 0x01
    5172:	2c 19       	sub	r18, r12
    5174:	3d 09       	sbc	r19, r13
    5176:	b9 01       	movw	r22, r18
    5178:	88 27       	eor	r24, r24
    517a:	77 fd       	sbrc	r23, 7
    517c:	80 95       	com	r24
    517e:	98 2f       	mov	r25, r24
    5180:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5184:	7b 01       	movw	r14, r22
    5186:	8c 01       	movw	r16, r24
    5188:	fe 01       	movw	r30, r28
    518a:	e2 95       	swap	r30
    518c:	f2 95       	swap	r31
    518e:	f0 7f       	andi	r31, 0xF0	; 240
    5190:	fe 27       	eor	r31, r30
    5192:	e0 7f       	andi	r30, 0xF0	; 240
    5194:	fe 27       	eor	r31, r30
    5196:	ee 51       	subi	r30, 0x1E	; 30
    5198:	f7 4f       	sbci	r31, 0xF7	; 247
    519a:	60 81       	ld	r22, Z
    519c:	71 81       	ldd	r23, Z+1	; 0x01
    519e:	6a 19       	sub	r22, r10
    51a0:	7b 09       	sbc	r23, r11
    51a2:	88 27       	eor	r24, r24
    51a4:	77 fd       	sbrc	r23, 7
    51a6:	80 95       	com	r24
    51a8:	98 2f       	mov	r25, r24
    51aa:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    51ae:	9b 01       	movw	r18, r22
    51b0:	ac 01       	movw	r20, r24
    51b2:	c8 01       	movw	r24, r16
    51b4:	b7 01       	movw	r22, r14
    51b6:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    51ba:	7b 01       	movw	r14, r22
    51bc:	8c 01       	movw	r16, r24
    51be:	cc 0f       	add	r28, r28
    51c0:	dd 1f       	adc	r29, r29
    51c2:	cc 0f       	add	r28, r28
    51c4:	dd 1f       	adc	r29, r29
    51c6:	cc 0f       	add	r28, r28
    51c8:	dd 1f       	adc	r29, r29
    51ca:	cc 0f       	add	r28, r28
    51cc:	dd 1f       	adc	r29, r29
    51ce:	cc 51       	subi	r28, 0x1C	; 28
    51d0:	d7 4f       	sbci	r29, 0xF7	; 247
    51d2:	68 81       	ld	r22, Y
    51d4:	79 81       	ldd	r23, Y+1	; 0x01
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    51d6:	6c 19       	sub	r22, r12
    51d8:	7d 09       	sbc	r23, r13
    51da:	88 27       	eor	r24, r24
    51dc:	77 fd       	sbrc	r23, 7
    51de:	80 95       	com	r24
    51e0:	98 2f       	mov	r25, r24
    51e2:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    51e6:	9b 01       	movw	r18, r22
    51e8:	ac 01       	movw	r20, r24
    51ea:	c8 01       	movw	r24, r16
    51ec:	b7 01       	movw	r22, r14
    51ee:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    51f2:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    51f6:	9b 01       	movw	r18, r22
    51f8:	2a 0d       	add	r18, r10
    51fa:	3b 1d       	adc	r19, r11
    51fc:	fc cd       	rjmp	.-1032   	; 0x4df6 <getInputFromSpeed+0x158>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    51fe:	41 30       	cpi	r20, 0x01	; 1
    5200:	09 f4       	brne	.+2      	; 0x5204 <getInputFromSpeed+0x566>
    5202:	4e c0       	rjmp	.+156    	; 0x52a0 <getInputFromSpeed+0x602>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5204:	42 30       	cpi	r20, 0x02	; 2
    5206:	09 f4       	brne	.+2      	; 0x520a <getInputFromSpeed+0x56c>
    5208:	89 c0       	rjmp	.+274    	; 0x531c <getInputFromSpeed+0x67e>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    520a:	43 30       	cpi	r20, 0x03	; 3
    520c:	09 f0       	breq	.+2      	; 0x5210 <getInputFromSpeed+0x572>
    520e:	f1 cd       	rjmp	.-1054   	; 0x4df2 <getInputFromSpeed+0x154>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    5210:	c2 95       	swap	r28
    5212:	d2 95       	swap	r29
    5214:	d0 7f       	andi	r29, 0xF0	; 240
    5216:	dc 27       	eor	r29, r28
    5218:	c0 7f       	andi	r28, 0xF0	; 240
    521a:	dc 27       	eor	r29, r28
    521c:	fe 01       	movw	r30, r28
    521e:	ee 52       	subi	r30, 0x2E	; 46
    5220:	f7 4f       	sbci	r31, 0xF7	; 247
    5222:	a6 84       	ldd	r10, Z+14	; 0x0e
    5224:	b7 84       	ldd	r11, Z+15	; 0x0f
    5226:	84 84       	ldd	r8, Z+12	; 0x0c
    5228:	95 84       	ldd	r9, Z+13	; 0x0d
    522a:	2a 19       	sub	r18, r10
    522c:	3b 09       	sbc	r19, r11
    522e:	b9 01       	movw	r22, r18
    5230:	88 27       	eor	r24, r24
    5232:	77 fd       	sbrc	r23, 7
    5234:	80 95       	com	r24
    5236:	98 2f       	mov	r25, r24
    5238:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    523c:	6b 01       	movw	r12, r22
    523e:	7c 01       	movw	r14, r24
    5240:	8e 01       	movw	r16, r28
    5242:	0e 51       	subi	r16, 0x1E	; 30
    5244:	17 4f       	sbci	r17, 0xF7	; 247
    5246:	f8 01       	movw	r30, r16
    5248:	64 85       	ldd	r22, Z+12	; 0x0c
    524a:	75 85       	ldd	r23, Z+13	; 0x0d
    524c:	68 19       	sub	r22, r8
    524e:	79 09       	sbc	r23, r9
    5250:	88 27       	eor	r24, r24
    5252:	77 fd       	sbrc	r23, 7
    5254:	80 95       	com	r24
    5256:	98 2f       	mov	r25, r24
    5258:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    525c:	9b 01       	movw	r18, r22
    525e:	ac 01       	movw	r20, r24
    5260:	c7 01       	movw	r24, r14
    5262:	b6 01       	movw	r22, r12
    5264:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    5268:	6b 01       	movw	r12, r22
    526a:	7c 01       	movw	r14, r24
    526c:	f8 01       	movw	r30, r16
    526e:	66 85       	ldd	r22, Z+14	; 0x0e
    5270:	77 85       	ldd	r23, Z+15	; 0x0f
    5272:	6a 19       	sub	r22, r10
    5274:	7b 09       	sbc	r23, r11
    5276:	88 27       	eor	r24, r24
    5278:	77 fd       	sbrc	r23, 7
    527a:	80 95       	com	r24
    527c:	98 2f       	mov	r25, r24
    527e:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5282:	9b 01       	movw	r18, r22
    5284:	ac 01       	movw	r20, r24
    5286:	c7 01       	movw	r24, r14
    5288:	b6 01       	movw	r22, r12
    528a:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    528e:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    5292:	68 0d       	add	r22, r8
    5294:	79 1d       	adc	r23, r9
            temp = -temp;
    5296:	22 27       	eor	r18, r18
    5298:	33 27       	eor	r19, r19
    529a:	26 1b       	sub	r18, r22
    529c:	37 0b       	sbc	r19, r23
    529e:	ab cd       	rjmp	.-1194   	; 0x4df6 <getInputFromSpeed+0x158>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    52a0:	fe 01       	movw	r30, r28
    52a2:	31 97       	sbiw	r30, 0x01	; 1
    52a4:	e2 95       	swap	r30
    52a6:	f2 95       	swap	r31
    52a8:	f0 7f       	andi	r31, 0xF0	; 240
    52aa:	fe 27       	eor	r31, r30
    52ac:	e0 7f       	andi	r30, 0xF0	; 240
    52ae:	fe 27       	eor	r31, r30
    52b0:	df 01       	movw	r26, r30
    52b2:	ae 51       	subi	r26, 0x1E	; 30
    52b4:	b7 4f       	sbci	r27, 0xF7	; 247
    52b6:	16 96       	adiw	r26, 0x06	; 6
    52b8:	cd 90       	ld	r12, X+
    52ba:	dc 90       	ld	r13, X
    52bc:	17 97       	sbiw	r26, 0x07	; 7
    52be:	ea 51       	subi	r30, 0x1A	; 26
    52c0:	f7 4f       	sbci	r31, 0xF7	; 247
    52c2:	a0 80       	ld	r10, Z
    52c4:	b1 80       	ldd	r11, Z+1	; 0x01
    52c6:	2c 19       	sub	r18, r12
    52c8:	3d 09       	sbc	r19, r13
    52ca:	b9 01       	movw	r22, r18
    52cc:	88 27       	eor	r24, r24
    52ce:	77 fd       	sbrc	r23, 7
    52d0:	80 95       	com	r24
    52d2:	98 2f       	mov	r25, r24
    52d4:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    52d8:	7b 01       	movw	r14, r22
    52da:	8c 01       	movw	r16, r24
    52dc:	c2 95       	swap	r28
    52de:	d2 95       	swap	r29
    52e0:	d0 7f       	andi	r29, 0xF0	; 240
    52e2:	dc 27       	eor	r29, r28
    52e4:	c0 7f       	andi	r28, 0xF0	; 240
    52e6:	dc 27       	eor	r29, r28
    52e8:	fe 01       	movw	r30, r28
    52ea:	ea 51       	subi	r30, 0x1A	; 26
    52ec:	f7 4f       	sbci	r31, 0xF7	; 247
    52ee:	60 81       	ld	r22, Z
    52f0:	71 81       	ldd	r23, Z+1	; 0x01
    52f2:	6a 19       	sub	r22, r10
    52f4:	7b 09       	sbc	r23, r11
    52f6:	88 27       	eor	r24, r24
    52f8:	77 fd       	sbrc	r23, 7
    52fa:	80 95       	com	r24
    52fc:	98 2f       	mov	r25, r24
    52fe:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5302:	9b 01       	movw	r18, r22
    5304:	ac 01       	movw	r20, r24
    5306:	c8 01       	movw	r24, r16
    5308:	b7 01       	movw	r22, r14
    530a:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    530e:	7b 01       	movw	r14, r22
    5310:	8c 01       	movw	r16, r24
    5312:	ce 51       	subi	r28, 0x1E	; 30
    5314:	d7 4f       	sbci	r29, 0xF7	; 247
    5316:	6e 81       	ldd	r22, Y+6	; 0x06
    5318:	7f 81       	ldd	r23, Y+7	; 0x07
    531a:	5d cf       	rjmp	.-326    	; 0x51d6 <getInputFromSpeed+0x538>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    531c:	de 01       	movw	r26, r28
    531e:	11 97       	sbiw	r26, 0x01	; 1
    5320:	fd 01       	movw	r30, r26
    5322:	e2 95       	swap	r30
    5324:	f2 95       	swap	r31
    5326:	f0 7f       	andi	r31, 0xF0	; 240
    5328:	fe 27       	eor	r31, r30
    532a:	e0 7f       	andi	r30, 0xF0	; 240
    532c:	fe 27       	eor	r31, r30
    532e:	ee 51       	subi	r30, 0x1E	; 30
    5330:	f7 4f       	sbci	r31, 0xF7	; 247
    5332:	c2 84       	ldd	r12, Z+10	; 0x0a
    5334:	d3 84       	ldd	r13, Z+11	; 0x0b
    5336:	aa 0f       	add	r26, r26
    5338:	bb 1f       	adc	r27, r27
    533a:	aa 0f       	add	r26, r26
    533c:	bb 1f       	adc	r27, r27
    533e:	aa 0f       	add	r26, r26
    5340:	bb 1f       	adc	r27, r27
    5342:	aa 0f       	add	r26, r26
    5344:	bb 1f       	adc	r27, r27
    5346:	a6 51       	subi	r26, 0x16	; 22
    5348:	b7 4f       	sbci	r27, 0xF7	; 247
    534a:	ad 90       	ld	r10, X+
    534c:	bc 90       	ld	r11, X
    534e:	2c 19       	sub	r18, r12
    5350:	3d 09       	sbc	r19, r13
    5352:	b9 01       	movw	r22, r18
    5354:	88 27       	eor	r24, r24
    5356:	77 fd       	sbrc	r23, 7
    5358:	80 95       	com	r24
    535a:	98 2f       	mov	r25, r24
    535c:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5360:	7b 01       	movw	r14, r22
    5362:	8c 01       	movw	r16, r24
    5364:	cc 0f       	add	r28, r28
    5366:	dd 1f       	adc	r29, r29
    5368:	cc 0f       	add	r28, r28
    536a:	dd 1f       	adc	r29, r29
    536c:	cc 0f       	add	r28, r28
    536e:	dd 1f       	adc	r29, r29
    5370:	cc 0f       	add	r28, r28
    5372:	dd 1f       	adc	r29, r29
    5374:	fe 01       	movw	r30, r28
    5376:	e6 51       	subi	r30, 0x16	; 22
    5378:	f7 4f       	sbci	r31, 0xF7	; 247
    537a:	60 81       	ld	r22, Z
    537c:	71 81       	ldd	r23, Z+1	; 0x01
    537e:	6a 19       	sub	r22, r10
    5380:	7b 09       	sbc	r23, r11
    5382:	88 27       	eor	r24, r24
    5384:	77 fd       	sbrc	r23, 7
    5386:	80 95       	com	r24
    5388:	98 2f       	mov	r25, r24
    538a:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    538e:	9b 01       	movw	r18, r22
    5390:	ac 01       	movw	r20, r24
    5392:	c8 01       	movw	r24, r16
    5394:	b7 01       	movw	r22, r14
    5396:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    539a:	7b 01       	movw	r14, r22
    539c:	8c 01       	movw	r16, r24
    539e:	ce 51       	subi	r28, 0x1E	; 30
    53a0:	d7 4f       	sbci	r29, 0xF7	; 247
    53a2:	6a 85       	ldd	r22, Y+10	; 0x0a
    53a4:	7b 85       	ldd	r23, Y+11	; 0x0b
    53a6:	6c 19       	sub	r22, r12
    53a8:	7d 09       	sbc	r23, r13
    53aa:	88 27       	eor	r24, r24
    53ac:	77 fd       	sbrc	r23, 7
    53ae:	80 95       	com	r24
    53b0:	98 2f       	mov	r25, r24
    53b2:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    53b6:	9b 01       	movw	r18, r22
    53b8:	ac 01       	movw	r20, r24
    53ba:	c8 01       	movw	r24, r16
    53bc:	b7 01       	movw	r22, r14
    53be:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    53c2:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    53c6:	6a 0d       	add	r22, r10
    53c8:	7b 1d       	adc	r23, r11
            temp = -temp;
    53ca:	22 27       	eor	r18, r18
    53cc:	33 27       	eor	r19, r19
    53ce:	26 1b       	sub	r18, r22
    53d0:	37 0b       	sbc	r19, r23
    53d2:	11 cd       	rjmp	.-1502   	; 0x4df6 <getInputFromSpeed+0x158>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    53d4:	c3 e0       	ldi	r28, 0x03	; 3
    53d6:	d0 e0       	ldi	r29, 0x00	; 0
    53d8:	b2 ce       	rjmp	.-668    	; 0x513e <getInputFromSpeed+0x4a0>
    53da:	c2 e0       	ldi	r28, 0x02	; 2
    53dc:	d0 e0       	ldi	r29, 0x00	; 0
    53de:	af ce       	rjmp	.-674    	; 0x513e <getInputFromSpeed+0x4a0>
    53e0:	c4 e0       	ldi	r28, 0x04	; 4
    53e2:	d0 e0       	ldi	r29, 0x00	; 0
    53e4:	ac ce       	rjmp	.-680    	; 0x513e <getInputFromSpeed+0x4a0>
    53e6:	c5 e0       	ldi	r28, 0x05	; 5
    53e8:	d0 e0       	ldi	r29, 0x00	; 0
    53ea:	a9 ce       	rjmp	.-686    	; 0x513e <getInputFromSpeed+0x4a0>
    53ec:	c7 e0       	ldi	r28, 0x07	; 7
    53ee:	d0 e0       	ldi	r29, 0x00	; 0
    53f0:	a6 ce       	rjmp	.-692    	; 0x513e <getInputFromSpeed+0x4a0>
    53f2:	c6 e0       	ldi	r28, 0x06	; 6
    53f4:	d0 e0       	ldi	r29, 0x00	; 0
    53f6:	a3 ce       	rjmp	.-698    	; 0x513e <getInputFromSpeed+0x4a0>
    53f8:	c8 e0       	ldi	r28, 0x08	; 8
    53fa:	d0 e0       	ldi	r29, 0x00	; 0
    53fc:	a0 ce       	rjmp	.-704    	; 0x513e <getInputFromSpeed+0x4a0>

000053fe <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    53fe:	8f 92       	push	r8
    5400:	9f 92       	push	r9
    5402:	af 92       	push	r10
    5404:	bf 92       	push	r11
    5406:	cf 92       	push	r12
    5408:	df 92       	push	r13
    540a:	ef 92       	push	r14
    540c:	ff 92       	push	r15
    540e:	0f 93       	push	r16
    5410:	1f 93       	push	r17
    5412:	cf 93       	push	r28
    5414:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5416:	c0 91 ef 02 	lds	r28, 0x02EF
    541a:	d0 91 f0 02 	lds	r29, 0x02F0
    541e:	80 91 f1 02 	lds	r24, 0x02F1
    5422:	90 91 f2 02 	lds	r25, 0x02F2
    5426:	97 fd       	sbrc	r25, 7
    5428:	ea c0       	rjmp	.+468    	; 0x55fe <getRightSpeedFromInput+0x200>
    542a:	60 91 e6 08 	lds	r22, 0x08E6
    542e:	70 91 e7 08 	lds	r23, 0x08E7
    5432:	6c 17       	cp	r22, r28
    5434:	7d 07       	cpc	r23, r29
    5436:	0c f0       	brlt	.+2      	; 0x543a <getRightSpeedFromInput+0x3c>
    5438:	67 c1       	rjmp	.+718    	; 0x5708 <getRightSpeedFromInput+0x30a>
    543a:	88 24       	eor	r8, r8
    543c:	8a 94       	dec	r8
    543e:	98 2c       	mov	r9, r8
    5440:	80 91 f6 08 	lds	r24, 0x08F6
    5444:	90 91 f7 08 	lds	r25, 0x08F7
    5448:	8c 17       	cp	r24, r28
    544a:	9d 07       	cpc	r25, r29
    544c:	4c f0       	brlt	.+18     	; 0x5460 <getRightSpeedFromInput+0x62>
    544e:	80 e0       	ldi	r24, 0x00	; 0
    5450:	9f ef       	ldi	r25, 0xFF	; 255
    5452:	89 16       	cp	r8, r25
    5454:	9f ef       	ldi	r25, 0xFF	; 255
    5456:	99 06       	cpc	r9, r25
    5458:	09 f4       	brne	.+2      	; 0x545c <getRightSpeedFromInput+0x5e>
    545a:	75 c1       	rjmp	.+746    	; 0x5746 <getRightSpeedFromInput+0x348>
    545c:	88 2e       	mov	r8, r24
    545e:	99 24       	eor	r9, r9
    5460:	80 91 06 09 	lds	r24, 0x0906
    5464:	90 91 07 09 	lds	r25, 0x0907
    5468:	8c 17       	cp	r24, r28
    546a:	9d 07       	cpc	r25, r29
    546c:	34 f0       	brlt	.+12     	; 0x547a <getRightSpeedFromInput+0x7c>
    546e:	ef ef       	ldi	r30, 0xFF	; 255
    5470:	8e 16       	cp	r8, r30
    5472:	ef ef       	ldi	r30, 0xFF	; 255
    5474:	9e 06       	cpc	r9, r30
    5476:	09 f4       	brne	.+2      	; 0x547a <getRightSpeedFromInput+0x7c>
    5478:	62 c1       	rjmp	.+708    	; 0x573e <getRightSpeedFromInput+0x340>
    547a:	80 91 16 09 	lds	r24, 0x0916
    547e:	90 91 17 09 	lds	r25, 0x0917
    5482:	8c 17       	cp	r24, r28
    5484:	9d 07       	cpc	r25, r29
    5486:	34 f0       	brlt	.+12     	; 0x5494 <getRightSpeedFromInput+0x96>
    5488:	ff ef       	ldi	r31, 0xFF	; 255
    548a:	8f 16       	cp	r8, r31
    548c:	ff ef       	ldi	r31, 0xFF	; 255
    548e:	9f 06       	cpc	r9, r31
    5490:	09 f4       	brne	.+2      	; 0x5494 <getRightSpeedFromInput+0x96>
    5492:	51 c1       	rjmp	.+674    	; 0x5736 <getRightSpeedFromInput+0x338>
    5494:	80 91 26 09 	lds	r24, 0x0926
    5498:	90 91 27 09 	lds	r25, 0x0927
    549c:	8c 17       	cp	r24, r28
    549e:	9d 07       	cpc	r25, r29
    54a0:	34 f0       	brlt	.+12     	; 0x54ae <getRightSpeedFromInput+0xb0>
    54a2:	2f ef       	ldi	r18, 0xFF	; 255
    54a4:	82 16       	cp	r8, r18
    54a6:	2f ef       	ldi	r18, 0xFF	; 255
    54a8:	92 06       	cpc	r9, r18
    54aa:	09 f4       	brne	.+2      	; 0x54ae <getRightSpeedFromInput+0xb0>
    54ac:	40 c1       	rjmp	.+640    	; 0x572e <getRightSpeedFromInput+0x330>
    54ae:	80 91 36 09 	lds	r24, 0x0936
    54b2:	90 91 37 09 	lds	r25, 0x0937
    54b6:	8c 17       	cp	r24, r28
    54b8:	9d 07       	cpc	r25, r29
    54ba:	34 f0       	brlt	.+12     	; 0x54c8 <getRightSpeedFromInput+0xca>
    54bc:	3f ef       	ldi	r19, 0xFF	; 255
    54be:	83 16       	cp	r8, r19
    54c0:	3f ef       	ldi	r19, 0xFF	; 255
    54c2:	93 06       	cpc	r9, r19
    54c4:	09 f4       	brne	.+2      	; 0x54c8 <getRightSpeedFromInput+0xca>
    54c6:	2f c1       	rjmp	.+606    	; 0x5726 <getRightSpeedFromInput+0x328>
    54c8:	80 91 46 09 	lds	r24, 0x0946
    54cc:	90 91 47 09 	lds	r25, 0x0947
    54d0:	8c 17       	cp	r24, r28
    54d2:	9d 07       	cpc	r25, r29
    54d4:	34 f0       	brlt	.+12     	; 0x54e2 <getRightSpeedFromInput+0xe4>
    54d6:	8f ef       	ldi	r24, 0xFF	; 255
    54d8:	88 16       	cp	r8, r24
    54da:	8f ef       	ldi	r24, 0xFF	; 255
    54dc:	98 06       	cpc	r9, r24
    54de:	09 f4       	brne	.+2      	; 0x54e2 <getRightSpeedFromInput+0xe4>
    54e0:	1e c1       	rjmp	.+572    	; 0x571e <getRightSpeedFromInput+0x320>
    54e2:	80 91 56 09 	lds	r24, 0x0956
    54e6:	90 91 57 09 	lds	r25, 0x0957
    54ea:	8c 17       	cp	r24, r28
    54ec:	9d 07       	cpc	r25, r29
    54ee:	34 f0       	brlt	.+12     	; 0x54fc <getRightSpeedFromInput+0xfe>
    54f0:	9f ef       	ldi	r25, 0xFF	; 255
    54f2:	89 16       	cp	r8, r25
    54f4:	9f ef       	ldi	r25, 0xFF	; 255
    54f6:	99 06       	cpc	r9, r25
    54f8:	09 f4       	brne	.+2      	; 0x54fc <getRightSpeedFromInput+0xfe>
    54fa:	0d c1       	rjmp	.+538    	; 0x5716 <getRightSpeedFromInput+0x318>
    54fc:	c0 90 66 09 	lds	r12, 0x0966
    5500:	d0 90 67 09 	lds	r13, 0x0967
    5504:	cc 16       	cp	r12, r28
    5506:	dd 06       	cpc	r13, r29
    5508:	34 f0       	brlt	.+12     	; 0x5516 <getRightSpeedFromInput+0x118>
    550a:	ef ef       	ldi	r30, 0xFF	; 255
    550c:	8e 16       	cp	r8, r30
    550e:	ef ef       	ldi	r30, 0xFF	; 255
    5510:	9e 06       	cpc	r9, r30
    5512:	09 f4       	brne	.+2      	; 0x5516 <getRightSpeedFromInput+0x118>
    5514:	fc c0       	rjmp	.+504    	; 0x570e <getRightSpeedFromInput+0x310>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    5516:	20 97       	sbiw	r28, 0x00	; 0
    5518:	09 f4       	brne	.+2      	; 0x551c <getRightSpeedFromInput+0x11e>
    551a:	60 c0       	rjmp	.+192    	; 0x55dc <getRightSpeedFromInput+0x1de>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    551c:	81 14       	cp	r8, r1
    551e:	91 04       	cpc	r9, r1
    5520:	09 f4       	brne	.+2      	; 0x5524 <getRightSpeedFromInput+0x126>
    5522:	42 c1       	rjmp	.+644    	; 0x57a8 <getRightSpeedFromInput+0x3aa>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5524:	3f ef       	ldi	r19, 0xFF	; 255
    5526:	83 16       	cp	r8, r19
    5528:	3f ef       	ldi	r19, 0xFF	; 255
    552a:	93 06       	cpc	r9, r19
    552c:	09 f4       	brne	.+2      	; 0x5530 <getRightSpeedFromInput+0x132>
    552e:	0d c1       	rjmp	.+538    	; 0x574a <getRightSpeedFromInput+0x34c>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    5530:	f4 01       	movw	r30, r8
    5532:	31 97       	sbiw	r30, 0x01	; 1
    5534:	e2 95       	swap	r30
    5536:	f2 95       	swap	r31
    5538:	f0 7f       	andi	r31, 0xF0	; 240
    553a:	fe 27       	eor	r31, r30
    553c:	e0 7f       	andi	r30, 0xF0	; 240
    553e:	fe 27       	eor	r31, r30
    5540:	df 01       	movw	r26, r30
    5542:	aa 51       	subi	r26, 0x1A	; 26
    5544:	b7 4f       	sbci	r27, 0xF7	; 247
    5546:	cd 90       	ld	r12, X+
    5548:	dc 90       	ld	r13, X
    554a:	ee 51       	subi	r30, 0x1E	; 30
    554c:	f7 4f       	sbci	r31, 0xF7	; 247
    554e:	a6 80       	ldd	r10, Z+6	; 0x06
    5550:	b7 80       	ldd	r11, Z+7	; 0x07
    5552:	cc 19       	sub	r28, r12
    5554:	dd 09       	sbc	r29, r13
    5556:	be 01       	movw	r22, r28
    5558:	88 27       	eor	r24, r24
    555a:	77 fd       	sbrc	r23, 7
    555c:	80 95       	com	r24
    555e:	98 2f       	mov	r25, r24
    5560:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5564:	7b 01       	movw	r14, r22
    5566:	8c 01       	movw	r16, r24
    5568:	82 94       	swap	r8
    556a:	92 94       	swap	r9
    556c:	b0 ef       	ldi	r27, 0xF0	; 240
    556e:	9b 22       	and	r9, r27
    5570:	98 24       	eor	r9, r8
    5572:	8b 22       	and	r8, r27
    5574:	98 24       	eor	r9, r8
    5576:	f4 01       	movw	r30, r8
    5578:	ee 51       	subi	r30, 0x1E	; 30
    557a:	f7 4f       	sbci	r31, 0xF7	; 247
    557c:	66 81       	ldd	r22, Z+6	; 0x06
    557e:	77 81       	ldd	r23, Z+7	; 0x07
    5580:	6a 19       	sub	r22, r10
    5582:	7b 09       	sbc	r23, r11
    5584:	88 27       	eor	r24, r24
    5586:	77 fd       	sbrc	r23, 7
    5588:	80 95       	com	r24
    558a:	98 2f       	mov	r25, r24
    558c:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5590:	9b 01       	movw	r18, r22
    5592:	ac 01       	movw	r20, r24
    5594:	c8 01       	movw	r24, r16
    5596:	b7 01       	movw	r22, r14
    5598:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    559c:	7b 01       	movw	r14, r22
    559e:	8c 01       	movw	r16, r24
    55a0:	86 ee       	ldi	r24, 0xE6	; 230
    55a2:	98 e0       	ldi	r25, 0x08	; 8
    55a4:	88 0e       	add	r8, r24
    55a6:	99 1e       	adc	r9, r25
    55a8:	f4 01       	movw	r30, r8
    55aa:	60 81       	ld	r22, Z
    55ac:	71 81       	ldd	r23, Z+1	; 0x01
    55ae:	6c 19       	sub	r22, r12
    55b0:	7d 09       	sbc	r23, r13
    55b2:	88 27       	eor	r24, r24
    55b4:	77 fd       	sbrc	r23, 7
    55b6:	80 95       	com	r24
    55b8:	98 2f       	mov	r25, r24
    55ba:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    55be:	9b 01       	movw	r18, r22
    55c0:	ac 01       	movw	r20, r24
    55c2:	c8 01       	movw	r24, r16
    55c4:	b7 01       	movw	r22, r14
    55c6:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    55ca:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    55ce:	6a 0d       	add	r22, r10
    55d0:	7b 1d       	adc	r23, r11
    55d2:	70 93 c3 04 	sts	0x04C3, r23
    55d6:	60 93 c2 04 	sts	0x04C2, r22
    55da:	04 c0       	rjmp	.+8      	; 0x55e4 <getRightSpeedFromInput+0x1e6>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    55dc:	10 92 c3 04 	sts	0x04C3, r1
    55e0:	10 92 c2 04 	sts	0x04C2, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    55e4:	df 91       	pop	r29
    55e6:	cf 91       	pop	r28
    55e8:	1f 91       	pop	r17
    55ea:	0f 91       	pop	r16
    55ec:	ff 90       	pop	r15
    55ee:	ef 90       	pop	r14
    55f0:	df 90       	pop	r13
    55f2:	cf 90       	pop	r12
    55f4:	bf 90       	pop	r11
    55f6:	af 90       	pop	r10
    55f8:	9f 90       	pop	r9
    55fa:	8f 90       	pop	r8
    55fc:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    55fe:	60 91 ee 08 	lds	r22, 0x08EE
    5602:	70 91 ef 08 	lds	r23, 0x08EF
    5606:	6c 17       	cp	r22, r28
    5608:	7d 07       	cpc	r23, r29
    560a:	0c f0       	brlt	.+2      	; 0x560e <getRightSpeedFromInput+0x210>
    560c:	2b c1       	rjmp	.+598    	; 0x5864 <getRightSpeedFromInput+0x466>
    560e:	0f ef       	ldi	r16, 0xFF	; 255
    5610:	1f ef       	ldi	r17, 0xFF	; 255
    5612:	80 91 fe 08 	lds	r24, 0x08FE
    5616:	90 91 ff 08 	lds	r25, 0x08FF
    561a:	8c 17       	cp	r24, r28
    561c:	9d 07       	cpc	r25, r29
    561e:	2c f0       	brlt	.+10     	; 0x562a <getRightSpeedFromInput+0x22c>
    5620:	2f ef       	ldi	r18, 0xFF	; 255
    5622:	0f 3f       	cpi	r16, 0xFF	; 255
    5624:	12 07       	cpc	r17, r18
    5626:	09 f4       	brne	.+2      	; 0x562a <getRightSpeedFromInput+0x22c>
    5628:	20 c1       	rjmp	.+576    	; 0x586a <getRightSpeedFromInput+0x46c>
    562a:	80 91 0e 09 	lds	r24, 0x090E
    562e:	90 91 0f 09 	lds	r25, 0x090F
    5632:	8c 17       	cp	r24, r28
    5634:	9d 07       	cpc	r25, r29
    5636:	2c f0       	brlt	.+10     	; 0x5642 <getRightSpeedFromInput+0x244>
    5638:	3f ef       	ldi	r19, 0xFF	; 255
    563a:	0f 3f       	cpi	r16, 0xFF	; 255
    563c:	13 07       	cpc	r17, r19
    563e:	09 f4       	brne	.+2      	; 0x5642 <getRightSpeedFromInput+0x244>
    5640:	26 c1       	rjmp	.+588    	; 0x588e <getRightSpeedFromInput+0x490>
    5642:	80 91 1e 09 	lds	r24, 0x091E
    5646:	90 91 1f 09 	lds	r25, 0x091F
    564a:	8c 17       	cp	r24, r28
    564c:	9d 07       	cpc	r25, r29
    564e:	2c f0       	brlt	.+10     	; 0x565a <getRightSpeedFromInput+0x25c>
    5650:	8f ef       	ldi	r24, 0xFF	; 255
    5652:	0f 3f       	cpi	r16, 0xFF	; 255
    5654:	18 07       	cpc	r17, r24
    5656:	09 f4       	brne	.+2      	; 0x565a <getRightSpeedFromInput+0x25c>
    5658:	17 c1       	rjmp	.+558    	; 0x5888 <getRightSpeedFromInput+0x48a>
    565a:	80 91 2e 09 	lds	r24, 0x092E
    565e:	90 91 2f 09 	lds	r25, 0x092F
    5662:	8c 17       	cp	r24, r28
    5664:	9d 07       	cpc	r25, r29
    5666:	2c f0       	brlt	.+10     	; 0x5672 <getRightSpeedFromInput+0x274>
    5668:	9f ef       	ldi	r25, 0xFF	; 255
    566a:	0f 3f       	cpi	r16, 0xFF	; 255
    566c:	19 07       	cpc	r17, r25
    566e:	09 f4       	brne	.+2      	; 0x5672 <getRightSpeedFromInput+0x274>
    5670:	08 c1       	rjmp	.+528    	; 0x5882 <getRightSpeedFromInput+0x484>
    5672:	80 91 3e 09 	lds	r24, 0x093E
    5676:	90 91 3f 09 	lds	r25, 0x093F
    567a:	8c 17       	cp	r24, r28
    567c:	9d 07       	cpc	r25, r29
    567e:	2c f0       	brlt	.+10     	; 0x568a <getRightSpeedFromInput+0x28c>
    5680:	ef ef       	ldi	r30, 0xFF	; 255
    5682:	0f 3f       	cpi	r16, 0xFF	; 255
    5684:	1e 07       	cpc	r17, r30
    5686:	09 f4       	brne	.+2      	; 0x568a <getRightSpeedFromInput+0x28c>
    5688:	f9 c0       	rjmp	.+498    	; 0x587c <getRightSpeedFromInput+0x47e>
    568a:	80 91 4e 09 	lds	r24, 0x094E
    568e:	90 91 4f 09 	lds	r25, 0x094F
    5692:	8c 17       	cp	r24, r28
    5694:	9d 07       	cpc	r25, r29
    5696:	2c f0       	brlt	.+10     	; 0x56a2 <getRightSpeedFromInput+0x2a4>
    5698:	ff ef       	ldi	r31, 0xFF	; 255
    569a:	0f 3f       	cpi	r16, 0xFF	; 255
    569c:	1f 07       	cpc	r17, r31
    569e:	09 f4       	brne	.+2      	; 0x56a2 <getRightSpeedFromInput+0x2a4>
    56a0:	ea c0       	rjmp	.+468    	; 0x5876 <getRightSpeedFromInput+0x478>
    56a2:	80 91 5e 09 	lds	r24, 0x095E
    56a6:	90 91 5f 09 	lds	r25, 0x095F
    56aa:	8c 17       	cp	r24, r28
    56ac:	9d 07       	cpc	r25, r29
    56ae:	2c f0       	brlt	.+10     	; 0x56ba <getRightSpeedFromInput+0x2bc>
    56b0:	2f ef       	ldi	r18, 0xFF	; 255
    56b2:	0f 3f       	cpi	r16, 0xFF	; 255
    56b4:	12 07       	cpc	r17, r18
    56b6:	09 f4       	brne	.+2      	; 0x56ba <getRightSpeedFromInput+0x2bc>
    56b8:	db c0       	rjmp	.+438    	; 0x5870 <getRightSpeedFromInput+0x472>
    56ba:	c0 90 6e 09 	lds	r12, 0x096E
    56be:	d0 90 6f 09 	lds	r13, 0x096F
    56c2:	cc 16       	cp	r12, r28
    56c4:	dd 06       	cpc	r13, r29
    56c6:	2c f0       	brlt	.+10     	; 0x56d2 <getRightSpeedFromInput+0x2d4>
    56c8:	3f ef       	ldi	r19, 0xFF	; 255
    56ca:	0f 3f       	cpi	r16, 0xFF	; 255
    56cc:	13 07       	cpc	r17, r19
    56ce:	09 f4       	brne	.+2      	; 0x56d2 <getRightSpeedFromInput+0x2d4>
    56d0:	7e c0       	rjmp	.+252    	; 0x57ce <getRightSpeedFromInput+0x3d0>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    56d2:	01 15       	cp	r16, r1
    56d4:	11 05       	cpc	r17, r1
    56d6:	09 f0       	breq	.+2      	; 0x56da <getRightSpeedFromInput+0x2dc>
    56d8:	7c c0       	rjmp	.+248    	; 0x57d2 <getRightSpeedFromInput+0x3d4>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    56da:	80 91 f0 08 	lds	r24, 0x08F0
    56de:	90 91 f1 08 	lds	r25, 0x08F1
    56e2:	9c 01       	movw	r18, r24
    56e4:	c2 9f       	mul	r28, r18
    56e6:	c0 01       	movw	r24, r0
    56e8:	c3 9f       	mul	r28, r19
    56ea:	90 0d       	add	r25, r0
    56ec:	d2 9f       	mul	r29, r18
    56ee:	90 0d       	add	r25, r0
    56f0:	11 24       	eor	r1, r1
    56f2:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
    56f6:	cb 01       	movw	r24, r22
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    56f8:	90 95       	com	r25
    56fa:	81 95       	neg	r24
    56fc:	9f 4f       	sbci	r25, 0xFF	; 255
    56fe:	90 93 c3 04 	sts	0x04C3, r25
    5702:	80 93 c2 04 	sts	0x04C2, r24
    5706:	6e cf       	rjmp	.-292    	; 0x55e4 <getRightSpeedFromInput+0x1e6>

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5708:	88 24       	eor	r8, r8
    570a:	99 24       	eor	r9, r9
    570c:	99 ce       	rjmp	.-718    	; 0x5440 <getRightSpeedFromInput+0x42>
    570e:	88 e0       	ldi	r24, 0x08	; 8
    5710:	88 2e       	mov	r8, r24
    5712:	91 2c       	mov	r9, r1
    5714:	00 cf       	rjmp	.-512    	; 0x5516 <getRightSpeedFromInput+0x118>
    5716:	97 e0       	ldi	r25, 0x07	; 7
    5718:	89 2e       	mov	r8, r25
    571a:	91 2c       	mov	r9, r1
    571c:	ef ce       	rjmp	.-546    	; 0x54fc <getRightSpeedFromInput+0xfe>
    571e:	26 e0       	ldi	r18, 0x06	; 6
    5720:	82 2e       	mov	r8, r18
    5722:	91 2c       	mov	r9, r1
    5724:	de ce       	rjmp	.-580    	; 0x54e2 <getRightSpeedFromInput+0xe4>
    5726:	35 e0       	ldi	r19, 0x05	; 5
    5728:	83 2e       	mov	r8, r19
    572a:	91 2c       	mov	r9, r1
    572c:	cd ce       	rjmp	.-614    	; 0x54c8 <getRightSpeedFromInput+0xca>
    572e:	44 e0       	ldi	r20, 0x04	; 4
    5730:	84 2e       	mov	r8, r20
    5732:	91 2c       	mov	r9, r1
    5734:	bc ce       	rjmp	.-648    	; 0x54ae <getRightSpeedFromInput+0xb0>
    5736:	53 e0       	ldi	r21, 0x03	; 3
    5738:	85 2e       	mov	r8, r21
    573a:	91 2c       	mov	r9, r1
    573c:	ab ce       	rjmp	.-682    	; 0x5494 <getRightSpeedFromInput+0x96>
    573e:	e2 e0       	ldi	r30, 0x02	; 2
    5740:	8e 2e       	mov	r8, r30
    5742:	91 2c       	mov	r9, r1
    5744:	9a ce       	rjmp	.-716    	; 0x547a <getRightSpeedFromInput+0x7c>
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	89 ce       	rjmp	.-750    	; 0x545c <getRightSpeedFromInput+0x5e>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    574a:	60 91 68 09 	lds	r22, 0x0968
    574e:	70 91 69 09 	lds	r23, 0x0969
    5752:	88 27       	eor	r24, r24
    5754:	77 fd       	sbrc	r23, 7
    5756:	80 95       	com	r24
    5758:	98 2f       	mov	r25, r24
    575a:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    575e:	7b 01       	movw	r14, r22
    5760:	8c 01       	movw	r16, r24
    5762:	be 01       	movw	r22, r28
    5764:	88 27       	eor	r24, r24
    5766:	77 fd       	sbrc	r23, 7
    5768:	80 95       	com	r24
    576a:	98 2f       	mov	r25, r24
    576c:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5770:	9b 01       	movw	r18, r22
    5772:	ac 01       	movw	r20, r24
    5774:	c8 01       	movw	r24, r16
    5776:	b7 01       	movw	r22, r14
    5778:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    577c:	7b 01       	movw	r14, r22
    577e:	8c 01       	movw	r16, r24
    5780:	b6 01       	movw	r22, r12
    5782:	88 27       	eor	r24, r24
    5784:	77 fd       	sbrc	r23, 7
    5786:	80 95       	com	r24
    5788:	98 2f       	mov	r25, r24
    578a:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    578e:	9b 01       	movw	r18, r22
    5790:	ac 01       	movw	r20, r24
    5792:	c8 01       	movw	r24, r16
    5794:	b7 01       	movw	r22, r14
    5796:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    579a:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    579e:	70 93 c3 04 	sts	0x04C3, r23
    57a2:	60 93 c2 04 	sts	0x04C2, r22
    57a6:	1e cf       	rjmp	.-452    	; 0x55e4 <getRightSpeedFromInput+0x1e6>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    57a8:	80 91 e8 08 	lds	r24, 0x08E8
    57ac:	90 91 e9 08 	lds	r25, 0x08E9
    57b0:	9c 01       	movw	r18, r24
    57b2:	c2 9f       	mul	r28, r18
    57b4:	c0 01       	movw	r24, r0
    57b6:	c3 9f       	mul	r28, r19
    57b8:	90 0d       	add	r25, r0
    57ba:	d2 9f       	mul	r29, r18
    57bc:	90 0d       	add	r25, r0
    57be:	11 24       	eor	r1, r1
    57c0:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
    57c4:	70 93 c3 04 	sts	0x04C3, r23
    57c8:	60 93 c2 04 	sts	0x04C2, r22
    57cc:	0b cf       	rjmp	.-490    	; 0x55e4 <getRightSpeedFromInput+0x1e6>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    57ce:	08 e0       	ldi	r16, 0x08	; 8
    57d0:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    57d2:	3f ef       	ldi	r19, 0xFF	; 255
    57d4:	0f 3f       	cpi	r16, 0xFF	; 255
    57d6:	13 07       	cpc	r17, r19
    57d8:	09 f4       	brne	.+2      	; 0x57dc <getRightSpeedFromInput+0x3de>
    57da:	5c c0       	rjmp	.+184    	; 0x5894 <getRightSpeedFromInput+0x496>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    57dc:	02 95       	swap	r16
    57de:	12 95       	swap	r17
    57e0:	10 7f       	andi	r17, 0xF0	; 240
    57e2:	10 27       	eor	r17, r16
    57e4:	00 7f       	andi	r16, 0xF0	; 240
    57e6:	10 27       	eor	r17, r16
    57e8:	f8 01       	movw	r30, r16
    57ea:	ee 52       	subi	r30, 0x2E	; 46
    57ec:	f7 4f       	sbci	r31, 0xF7	; 247
    57ee:	a4 84       	ldd	r10, Z+12	; 0x0c
    57f0:	b5 84       	ldd	r11, Z+13	; 0x0d
    57f2:	86 84       	ldd	r8, Z+14	; 0x0e
    57f4:	97 84       	ldd	r9, Z+15	; 0x0f
    57f6:	ca 19       	sub	r28, r10
    57f8:	db 09       	sbc	r29, r11
    57fa:	be 01       	movw	r22, r28
    57fc:	88 27       	eor	r24, r24
    57fe:	77 fd       	sbrc	r23, 7
    5800:	80 95       	com	r24
    5802:	98 2f       	mov	r25, r24
    5804:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5808:	6b 01       	movw	r12, r22
    580a:	7c 01       	movw	r14, r24
    580c:	0e 51       	subi	r16, 0x1E	; 30
    580e:	17 4f       	sbci	r17, 0xF7	; 247
    5810:	f8 01       	movw	r30, r16
    5812:	66 85       	ldd	r22, Z+14	; 0x0e
    5814:	77 85       	ldd	r23, Z+15	; 0x0f
    5816:	68 19       	sub	r22, r8
    5818:	79 09       	sbc	r23, r9
    581a:	88 27       	eor	r24, r24
    581c:	77 fd       	sbrc	r23, 7
    581e:	80 95       	com	r24
    5820:	98 2f       	mov	r25, r24
    5822:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5826:	9b 01       	movw	r18, r22
    5828:	ac 01       	movw	r20, r24
    582a:	c7 01       	movw	r24, r14
    582c:	b6 01       	movw	r22, r12
    582e:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    5832:	6b 01       	movw	r12, r22
    5834:	7c 01       	movw	r14, r24
    5836:	f8 01       	movw	r30, r16
    5838:	64 85       	ldd	r22, Z+12	; 0x0c
    583a:	75 85       	ldd	r23, Z+13	; 0x0d
    583c:	6a 19       	sub	r22, r10
    583e:	7b 09       	sbc	r23, r11
    5840:	88 27       	eor	r24, r24
    5842:	77 fd       	sbrc	r23, 7
    5844:	80 95       	com	r24
    5846:	98 2f       	mov	r25, r24
    5848:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    584c:	9b 01       	movw	r18, r22
    584e:	ac 01       	movw	r20, r24
    5850:	c7 01       	movw	r24, r14
    5852:	b6 01       	movw	r22, r12
    5854:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    5858:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    585c:	68 0d       	add	r22, r8
    585e:	79 1d       	adc	r23, r9
    5860:	cb 01       	movw	r24, r22
    5862:	4a cf       	rjmp	.-364    	; 0x56f8 <getRightSpeedFromInput+0x2fa>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5864:	00 e0       	ldi	r16, 0x00	; 0
    5866:	10 e0       	ldi	r17, 0x00	; 0
    5868:	d4 ce       	rjmp	.-600    	; 0x5612 <getRightSpeedFromInput+0x214>
    586a:	01 e0       	ldi	r16, 0x01	; 1
    586c:	10 e0       	ldi	r17, 0x00	; 0
    586e:	dd ce       	rjmp	.-582    	; 0x562a <getRightSpeedFromInput+0x22c>
    5870:	07 e0       	ldi	r16, 0x07	; 7
    5872:	10 e0       	ldi	r17, 0x00	; 0
    5874:	22 cf       	rjmp	.-444    	; 0x56ba <getRightSpeedFromInput+0x2bc>
    5876:	06 e0       	ldi	r16, 0x06	; 6
    5878:	10 e0       	ldi	r17, 0x00	; 0
    587a:	13 cf       	rjmp	.-474    	; 0x56a2 <getRightSpeedFromInput+0x2a4>
    587c:	05 e0       	ldi	r16, 0x05	; 5
    587e:	10 e0       	ldi	r17, 0x00	; 0
    5880:	04 cf       	rjmp	.-504    	; 0x568a <getRightSpeedFromInput+0x28c>
    5882:	04 e0       	ldi	r16, 0x04	; 4
    5884:	10 e0       	ldi	r17, 0x00	; 0
    5886:	f5 ce       	rjmp	.-534    	; 0x5672 <getRightSpeedFromInput+0x274>
    5888:	03 e0       	ldi	r16, 0x03	; 3
    588a:	10 e0       	ldi	r17, 0x00	; 0
    588c:	e6 ce       	rjmp	.-564    	; 0x565a <getRightSpeedFromInput+0x25c>
    588e:	02 e0       	ldi	r16, 0x02	; 2
    5890:	10 e0       	ldi	r17, 0x00	; 0
    5892:	d7 ce       	rjmp	.-594    	; 0x5642 <getRightSpeedFromInput+0x244>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    5894:	60 91 70 09 	lds	r22, 0x0970
    5898:	70 91 71 09 	lds	r23, 0x0971
    589c:	88 27       	eor	r24, r24
    589e:	77 fd       	sbrc	r23, 7
    58a0:	80 95       	com	r24
    58a2:	98 2f       	mov	r25, r24
    58a4:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    58a8:	7b 01       	movw	r14, r22
    58aa:	8c 01       	movw	r16, r24
    58ac:	be 01       	movw	r22, r28
    58ae:	88 27       	eor	r24, r24
    58b0:	77 fd       	sbrc	r23, 7
    58b2:	80 95       	com	r24
    58b4:	98 2f       	mov	r25, r24
    58b6:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    58ba:	9b 01       	movw	r18, r22
    58bc:	ac 01       	movw	r20, r24
    58be:	c8 01       	movw	r24, r16
    58c0:	b7 01       	movw	r22, r14
    58c2:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    58c6:	7b 01       	movw	r14, r22
    58c8:	8c 01       	movw	r16, r24
    58ca:	b6 01       	movw	r22, r12
    58cc:	88 27       	eor	r24, r24
    58ce:	77 fd       	sbrc	r23, 7
    58d0:	80 95       	com	r24
    58d2:	98 2f       	mov	r25, r24
    58d4:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    58d8:	9b 01       	movw	r18, r22
    58da:	ac 01       	movw	r20, r24
    58dc:	c8 01       	movw	r24, r16
    58de:	b7 01       	movw	r22, r14
    58e0:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    58e4:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    58e8:	cb 01       	movw	r24, r22
    58ea:	06 cf       	rjmp	.-500    	; 0x56f8 <getRightSpeedFromInput+0x2fa>

000058ec <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    58ec:	8f 92       	push	r8
    58ee:	9f 92       	push	r9
    58f0:	af 92       	push	r10
    58f2:	bf 92       	push	r11
    58f4:	cf 92       	push	r12
    58f6:	df 92       	push	r13
    58f8:	ef 92       	push	r14
    58fa:	ff 92       	push	r15
    58fc:	0f 93       	push	r16
    58fe:	1f 93       	push	r17
    5900:	cf 93       	push	r28
    5902:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5904:	c0 91 ed 02 	lds	r28, 0x02ED
    5908:	d0 91 ee 02 	lds	r29, 0x02EE
    590c:	80 91 f3 02 	lds	r24, 0x02F3
    5910:	90 91 f4 02 	lds	r25, 0x02F4
    5914:	97 fd       	sbrc	r25, 7
    5916:	f3 c0       	rjmp	.+486    	; 0x5afe <getLeftSpeedFromInput+0x212>
    5918:	60 91 e2 08 	lds	r22, 0x08E2
    591c:	70 91 e3 08 	lds	r23, 0x08E3
    5920:	6c 17       	cp	r22, r28
    5922:	7d 07       	cpc	r23, r29
    5924:	0c f0       	brlt	.+2      	; 0x5928 <getLeftSpeedFromInput+0x3c>
    5926:	79 c1       	rjmp	.+754    	; 0x5c1a <getLeftSpeedFromInput+0x32e>
    5928:	88 24       	eor	r8, r8
    592a:	8a 94       	dec	r8
    592c:	98 2c       	mov	r9, r8
    592e:	80 91 f2 08 	lds	r24, 0x08F2
    5932:	90 91 f3 08 	lds	r25, 0x08F3
    5936:	8c 17       	cp	r24, r28
    5938:	9d 07       	cpc	r25, r29
    593a:	4c f0       	brlt	.+18     	; 0x594e <getLeftSpeedFromInput+0x62>
    593c:	80 e0       	ldi	r24, 0x00	; 0
    593e:	9f ef       	ldi	r25, 0xFF	; 255
    5940:	89 16       	cp	r8, r25
    5942:	9f ef       	ldi	r25, 0xFF	; 255
    5944:	99 06       	cpc	r9, r25
    5946:	09 f4       	brne	.+2      	; 0x594a <getLeftSpeedFromInput+0x5e>
    5948:	87 c1       	rjmp	.+782    	; 0x5c58 <getLeftSpeedFromInput+0x36c>
    594a:	88 2e       	mov	r8, r24
    594c:	99 24       	eor	r9, r9
    594e:	80 91 02 09 	lds	r24, 0x0902
    5952:	90 91 03 09 	lds	r25, 0x0903
    5956:	8c 17       	cp	r24, r28
    5958:	9d 07       	cpc	r25, r29
    595a:	34 f0       	brlt	.+12     	; 0x5968 <getLeftSpeedFromInput+0x7c>
    595c:	ef ef       	ldi	r30, 0xFF	; 255
    595e:	8e 16       	cp	r8, r30
    5960:	ef ef       	ldi	r30, 0xFF	; 255
    5962:	9e 06       	cpc	r9, r30
    5964:	09 f4       	brne	.+2      	; 0x5968 <getLeftSpeedFromInput+0x7c>
    5966:	74 c1       	rjmp	.+744    	; 0x5c50 <getLeftSpeedFromInput+0x364>
    5968:	80 91 12 09 	lds	r24, 0x0912
    596c:	90 91 13 09 	lds	r25, 0x0913
    5970:	8c 17       	cp	r24, r28
    5972:	9d 07       	cpc	r25, r29
    5974:	34 f0       	brlt	.+12     	; 0x5982 <getLeftSpeedFromInput+0x96>
    5976:	ff ef       	ldi	r31, 0xFF	; 255
    5978:	8f 16       	cp	r8, r31
    597a:	ff ef       	ldi	r31, 0xFF	; 255
    597c:	9f 06       	cpc	r9, r31
    597e:	09 f4       	brne	.+2      	; 0x5982 <getLeftSpeedFromInput+0x96>
    5980:	63 c1       	rjmp	.+710    	; 0x5c48 <getLeftSpeedFromInput+0x35c>
    5982:	80 91 22 09 	lds	r24, 0x0922
    5986:	90 91 23 09 	lds	r25, 0x0923
    598a:	8c 17       	cp	r24, r28
    598c:	9d 07       	cpc	r25, r29
    598e:	34 f0       	brlt	.+12     	; 0x599c <getLeftSpeedFromInput+0xb0>
    5990:	2f ef       	ldi	r18, 0xFF	; 255
    5992:	82 16       	cp	r8, r18
    5994:	2f ef       	ldi	r18, 0xFF	; 255
    5996:	92 06       	cpc	r9, r18
    5998:	09 f4       	brne	.+2      	; 0x599c <getLeftSpeedFromInput+0xb0>
    599a:	52 c1       	rjmp	.+676    	; 0x5c40 <getLeftSpeedFromInput+0x354>
    599c:	80 91 32 09 	lds	r24, 0x0932
    59a0:	90 91 33 09 	lds	r25, 0x0933
    59a4:	8c 17       	cp	r24, r28
    59a6:	9d 07       	cpc	r25, r29
    59a8:	34 f0       	brlt	.+12     	; 0x59b6 <getLeftSpeedFromInput+0xca>
    59aa:	3f ef       	ldi	r19, 0xFF	; 255
    59ac:	83 16       	cp	r8, r19
    59ae:	3f ef       	ldi	r19, 0xFF	; 255
    59b0:	93 06       	cpc	r9, r19
    59b2:	09 f4       	brne	.+2      	; 0x59b6 <getLeftSpeedFromInput+0xca>
    59b4:	41 c1       	rjmp	.+642    	; 0x5c38 <getLeftSpeedFromInput+0x34c>
    59b6:	80 91 42 09 	lds	r24, 0x0942
    59ba:	90 91 43 09 	lds	r25, 0x0943
    59be:	8c 17       	cp	r24, r28
    59c0:	9d 07       	cpc	r25, r29
    59c2:	34 f0       	brlt	.+12     	; 0x59d0 <getLeftSpeedFromInput+0xe4>
    59c4:	8f ef       	ldi	r24, 0xFF	; 255
    59c6:	88 16       	cp	r8, r24
    59c8:	8f ef       	ldi	r24, 0xFF	; 255
    59ca:	98 06       	cpc	r9, r24
    59cc:	09 f4       	brne	.+2      	; 0x59d0 <getLeftSpeedFromInput+0xe4>
    59ce:	30 c1       	rjmp	.+608    	; 0x5c30 <getLeftSpeedFromInput+0x344>
    59d0:	80 91 52 09 	lds	r24, 0x0952
    59d4:	90 91 53 09 	lds	r25, 0x0953
    59d8:	8c 17       	cp	r24, r28
    59da:	9d 07       	cpc	r25, r29
    59dc:	34 f0       	brlt	.+12     	; 0x59ea <getLeftSpeedFromInput+0xfe>
    59de:	9f ef       	ldi	r25, 0xFF	; 255
    59e0:	89 16       	cp	r8, r25
    59e2:	9f ef       	ldi	r25, 0xFF	; 255
    59e4:	99 06       	cpc	r9, r25
    59e6:	09 f4       	brne	.+2      	; 0x59ea <getLeftSpeedFromInput+0xfe>
    59e8:	1f c1       	rjmp	.+574    	; 0x5c28 <getLeftSpeedFromInput+0x33c>
    59ea:	c0 90 62 09 	lds	r12, 0x0962
    59ee:	d0 90 63 09 	lds	r13, 0x0963
    59f2:	cc 16       	cp	r12, r28
    59f4:	dd 06       	cpc	r13, r29
    59f6:	34 f0       	brlt	.+12     	; 0x5a04 <getLeftSpeedFromInput+0x118>
    59f8:	ef ef       	ldi	r30, 0xFF	; 255
    59fa:	8e 16       	cp	r8, r30
    59fc:	ef ef       	ldi	r30, 0xFF	; 255
    59fe:	9e 06       	cpc	r9, r30
    5a00:	09 f4       	brne	.+2      	; 0x5a04 <getLeftSpeedFromInput+0x118>
    5a02:	0e c1       	rjmp	.+540    	; 0x5c20 <getLeftSpeedFromInput+0x334>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    5a04:	20 97       	sbiw	r28, 0x00	; 0
    5a06:	09 f4       	brne	.+2      	; 0x5a0a <getLeftSpeedFromInput+0x11e>
    5a08:	69 c0       	rjmp	.+210    	; 0x5adc <getLeftSpeedFromInput+0x1f0>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    5a0a:	81 14       	cp	r8, r1
    5a0c:	91 04       	cpc	r9, r1
    5a0e:	09 f4       	brne	.+2      	; 0x5a12 <getLeftSpeedFromInput+0x126>
    5a10:	54 c1       	rjmp	.+680    	; 0x5cba <getLeftSpeedFromInput+0x3ce>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5a12:	3f ef       	ldi	r19, 0xFF	; 255
    5a14:	83 16       	cp	r8, r19
    5a16:	3f ef       	ldi	r19, 0xFF	; 255
    5a18:	93 06       	cpc	r9, r19
    5a1a:	09 f4       	brne	.+2      	; 0x5a1e <getLeftSpeedFromInput+0x132>
    5a1c:	1f c1       	rjmp	.+574    	; 0x5c5c <getLeftSpeedFromInput+0x370>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    5a1e:	d4 01       	movw	r26, r8
    5a20:	11 97       	sbiw	r26, 0x01	; 1
    5a22:	fd 01       	movw	r30, r26
    5a24:	e2 95       	swap	r30
    5a26:	f2 95       	swap	r31
    5a28:	f0 7f       	andi	r31, 0xF0	; 240
    5a2a:	fe 27       	eor	r31, r30
    5a2c:	e0 7f       	andi	r30, 0xF0	; 240
    5a2e:	fe 27       	eor	r31, r30
    5a30:	ee 51       	subi	r30, 0x1E	; 30
    5a32:	f7 4f       	sbci	r31, 0xF7	; 247
    5a34:	c0 80       	ld	r12, Z
    5a36:	d1 80       	ldd	r13, Z+1	; 0x01
    5a38:	aa 0f       	add	r26, r26
    5a3a:	bb 1f       	adc	r27, r27
    5a3c:	aa 0f       	add	r26, r26
    5a3e:	bb 1f       	adc	r27, r27
    5a40:	aa 0f       	add	r26, r26
    5a42:	bb 1f       	adc	r27, r27
    5a44:	aa 0f       	add	r26, r26
    5a46:	bb 1f       	adc	r27, r27
    5a48:	ac 51       	subi	r26, 0x1C	; 28
    5a4a:	b7 4f       	sbci	r27, 0xF7	; 247
    5a4c:	ad 90       	ld	r10, X+
    5a4e:	bc 90       	ld	r11, X
    5a50:	cc 19       	sub	r28, r12
    5a52:	dd 09       	sbc	r29, r13
    5a54:	be 01       	movw	r22, r28
    5a56:	88 27       	eor	r24, r24
    5a58:	77 fd       	sbrc	r23, 7
    5a5a:	80 95       	com	r24
    5a5c:	98 2f       	mov	r25, r24
    5a5e:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5a62:	7b 01       	movw	r14, r22
    5a64:	8c 01       	movw	r16, r24
    5a66:	88 0c       	add	r8, r8
    5a68:	99 1c       	adc	r9, r9
    5a6a:	88 0c       	add	r8, r8
    5a6c:	99 1c       	adc	r9, r9
    5a6e:	88 0c       	add	r8, r8
    5a70:	99 1c       	adc	r9, r9
    5a72:	88 0c       	add	r8, r8
    5a74:	99 1c       	adc	r9, r9
    5a76:	f4 01       	movw	r30, r8
    5a78:	ec 51       	subi	r30, 0x1C	; 28
    5a7a:	f7 4f       	sbci	r31, 0xF7	; 247
    5a7c:	60 81       	ld	r22, Z
    5a7e:	71 81       	ldd	r23, Z+1	; 0x01
    5a80:	6a 19       	sub	r22, r10
    5a82:	7b 09       	sbc	r23, r11
    5a84:	88 27       	eor	r24, r24
    5a86:	77 fd       	sbrc	r23, 7
    5a88:	80 95       	com	r24
    5a8a:	98 2f       	mov	r25, r24
    5a8c:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5a90:	9b 01       	movw	r18, r22
    5a92:	ac 01       	movw	r20, r24
    5a94:	c8 01       	movw	r24, r16
    5a96:	b7 01       	movw	r22, r14
    5a98:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    5a9c:	7b 01       	movw	r14, r22
    5a9e:	8c 01       	movw	r16, r24
    5aa0:	82 ee       	ldi	r24, 0xE2	; 226
    5aa2:	98 e0       	ldi	r25, 0x08	; 8
    5aa4:	88 0e       	add	r8, r24
    5aa6:	99 1e       	adc	r9, r25
    5aa8:	f4 01       	movw	r30, r8
    5aaa:	60 81       	ld	r22, Z
    5aac:	71 81       	ldd	r23, Z+1	; 0x01
    5aae:	6c 19       	sub	r22, r12
    5ab0:	7d 09       	sbc	r23, r13
    5ab2:	88 27       	eor	r24, r24
    5ab4:	77 fd       	sbrc	r23, 7
    5ab6:	80 95       	com	r24
    5ab8:	98 2f       	mov	r25, r24
    5aba:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5abe:	9b 01       	movw	r18, r22
    5ac0:	ac 01       	movw	r20, r24
    5ac2:	c8 01       	movw	r24, r16
    5ac4:	b7 01       	movw	r22, r14
    5ac6:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    5aca:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    5ace:	6a 0d       	add	r22, r10
    5ad0:	7b 1d       	adc	r23, r11
    5ad2:	70 93 c1 04 	sts	0x04C1, r23
    5ad6:	60 93 c0 04 	sts	0x04C0, r22
    5ada:	04 c0       	rjmp	.+8      	; 0x5ae4 <getLeftSpeedFromInput+0x1f8>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    5adc:	10 92 c1 04 	sts	0x04C1, r1
    5ae0:	10 92 c0 04 	sts	0x04C0, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    5ae4:	df 91       	pop	r29
    5ae6:	cf 91       	pop	r28
    5ae8:	1f 91       	pop	r17
    5aea:	0f 91       	pop	r16
    5aec:	ff 90       	pop	r15
    5aee:	ef 90       	pop	r14
    5af0:	df 90       	pop	r13
    5af2:	cf 90       	pop	r12
    5af4:	bf 90       	pop	r11
    5af6:	af 90       	pop	r10
    5af8:	9f 90       	pop	r9
    5afa:	8f 90       	pop	r8
    5afc:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    5afe:	60 91 ea 08 	lds	r22, 0x08EA
    5b02:	70 91 eb 08 	lds	r23, 0x08EB
    5b06:	6c 17       	cp	r22, r28
    5b08:	7d 07       	cpc	r23, r29
    5b0a:	0c f0       	brlt	.+2      	; 0x5b0e <getLeftSpeedFromInput+0x222>
    5b0c:	4e c1       	rjmp	.+668    	; 0x5daa <getLeftSpeedFromInput+0x4be>
    5b0e:	88 24       	eor	r8, r8
    5b10:	8a 94       	dec	r8
    5b12:	98 2c       	mov	r9, r8
    5b14:	80 91 fa 08 	lds	r24, 0x08FA
    5b18:	90 91 fb 08 	lds	r25, 0x08FB
    5b1c:	8c 17       	cp	r24, r28
    5b1e:	9d 07       	cpc	r25, r29
    5b20:	34 f0       	brlt	.+12     	; 0x5b2e <getLeftSpeedFromInput+0x242>
    5b22:	2f ef       	ldi	r18, 0xFF	; 255
    5b24:	82 16       	cp	r8, r18
    5b26:	2f ef       	ldi	r18, 0xFF	; 255
    5b28:	92 06       	cpc	r9, r18
    5b2a:	09 f4       	brne	.+2      	; 0x5b2e <getLeftSpeedFromInput+0x242>
    5b2c:	41 c1       	rjmp	.+642    	; 0x5db0 <getLeftSpeedFromInput+0x4c4>
    5b2e:	80 91 0a 09 	lds	r24, 0x090A
    5b32:	90 91 0b 09 	lds	r25, 0x090B
    5b36:	8c 17       	cp	r24, r28
    5b38:	9d 07       	cpc	r25, r29
    5b3a:	34 f0       	brlt	.+12     	; 0x5b48 <getLeftSpeedFromInput+0x25c>
    5b3c:	3f ef       	ldi	r19, 0xFF	; 255
    5b3e:	83 16       	cp	r8, r19
    5b40:	3f ef       	ldi	r19, 0xFF	; 255
    5b42:	93 06       	cpc	r9, r19
    5b44:	09 f4       	brne	.+2      	; 0x5b48 <getLeftSpeedFromInput+0x25c>
    5b46:	4c c1       	rjmp	.+664    	; 0x5de0 <getLeftSpeedFromInput+0x4f4>
    5b48:	80 91 1a 09 	lds	r24, 0x091A
    5b4c:	90 91 1b 09 	lds	r25, 0x091B
    5b50:	8c 17       	cp	r24, r28
    5b52:	9d 07       	cpc	r25, r29
    5b54:	34 f0       	brlt	.+12     	; 0x5b62 <getLeftSpeedFromInput+0x276>
    5b56:	8f ef       	ldi	r24, 0xFF	; 255
    5b58:	88 16       	cp	r8, r24
    5b5a:	8f ef       	ldi	r24, 0xFF	; 255
    5b5c:	98 06       	cpc	r9, r24
    5b5e:	09 f4       	brne	.+2      	; 0x5b62 <getLeftSpeedFromInput+0x276>
    5b60:	3b c1       	rjmp	.+630    	; 0x5dd8 <getLeftSpeedFromInput+0x4ec>
    5b62:	80 91 2a 09 	lds	r24, 0x092A
    5b66:	90 91 2b 09 	lds	r25, 0x092B
    5b6a:	8c 17       	cp	r24, r28
    5b6c:	9d 07       	cpc	r25, r29
    5b6e:	34 f0       	brlt	.+12     	; 0x5b7c <getLeftSpeedFromInput+0x290>
    5b70:	9f ef       	ldi	r25, 0xFF	; 255
    5b72:	89 16       	cp	r8, r25
    5b74:	9f ef       	ldi	r25, 0xFF	; 255
    5b76:	99 06       	cpc	r9, r25
    5b78:	09 f4       	brne	.+2      	; 0x5b7c <getLeftSpeedFromInput+0x290>
    5b7a:	2a c1       	rjmp	.+596    	; 0x5dd0 <getLeftSpeedFromInput+0x4e4>
    5b7c:	80 91 3a 09 	lds	r24, 0x093A
    5b80:	90 91 3b 09 	lds	r25, 0x093B
    5b84:	8c 17       	cp	r24, r28
    5b86:	9d 07       	cpc	r25, r29
    5b88:	34 f0       	brlt	.+12     	; 0x5b96 <getLeftSpeedFromInput+0x2aa>
    5b8a:	ef ef       	ldi	r30, 0xFF	; 255
    5b8c:	8e 16       	cp	r8, r30
    5b8e:	ef ef       	ldi	r30, 0xFF	; 255
    5b90:	9e 06       	cpc	r9, r30
    5b92:	09 f4       	brne	.+2      	; 0x5b96 <getLeftSpeedFromInput+0x2aa>
    5b94:	19 c1       	rjmp	.+562    	; 0x5dc8 <getLeftSpeedFromInput+0x4dc>
    5b96:	80 91 4a 09 	lds	r24, 0x094A
    5b9a:	90 91 4b 09 	lds	r25, 0x094B
    5b9e:	8c 17       	cp	r24, r28
    5ba0:	9d 07       	cpc	r25, r29
    5ba2:	34 f0       	brlt	.+12     	; 0x5bb0 <getLeftSpeedFromInput+0x2c4>
    5ba4:	ff ef       	ldi	r31, 0xFF	; 255
    5ba6:	8f 16       	cp	r8, r31
    5ba8:	ff ef       	ldi	r31, 0xFF	; 255
    5baa:	9f 06       	cpc	r9, r31
    5bac:	09 f4       	brne	.+2      	; 0x5bb0 <getLeftSpeedFromInput+0x2c4>
    5bae:	08 c1       	rjmp	.+528    	; 0x5dc0 <getLeftSpeedFromInput+0x4d4>
    5bb0:	80 91 5a 09 	lds	r24, 0x095A
    5bb4:	90 91 5b 09 	lds	r25, 0x095B
    5bb8:	8c 17       	cp	r24, r28
    5bba:	9d 07       	cpc	r25, r29
    5bbc:	34 f0       	brlt	.+12     	; 0x5bca <getLeftSpeedFromInput+0x2de>
    5bbe:	2f ef       	ldi	r18, 0xFF	; 255
    5bc0:	82 16       	cp	r8, r18
    5bc2:	2f ef       	ldi	r18, 0xFF	; 255
    5bc4:	92 06       	cpc	r9, r18
    5bc6:	09 f4       	brne	.+2      	; 0x5bca <getLeftSpeedFromInput+0x2de>
    5bc8:	f7 c0       	rjmp	.+494    	; 0x5db8 <getLeftSpeedFromInput+0x4cc>
    5bca:	c0 90 6a 09 	lds	r12, 0x096A
    5bce:	d0 90 6b 09 	lds	r13, 0x096B
    5bd2:	cc 16       	cp	r12, r28
    5bd4:	dd 06       	cpc	r13, r29
    5bd6:	34 f0       	brlt	.+12     	; 0x5be4 <getLeftSpeedFromInput+0x2f8>
    5bd8:	3f ef       	ldi	r19, 0xFF	; 255
    5bda:	83 16       	cp	r8, r19
    5bdc:	3f ef       	ldi	r19, 0xFF	; 255
    5bde:	93 06       	cpc	r9, r19
    5be0:	09 f4       	brne	.+2      	; 0x5be4 <getLeftSpeedFromInput+0x2f8>
    5be2:	7e c0       	rjmp	.+252    	; 0x5ce0 <getLeftSpeedFromInput+0x3f4>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    5be4:	81 14       	cp	r8, r1
    5be6:	91 04       	cpc	r9, r1
    5be8:	09 f0       	breq	.+2      	; 0x5bec <getLeftSpeedFromInput+0x300>
    5bea:	7d c0       	rjmp	.+250    	; 0x5ce6 <getLeftSpeedFromInput+0x3fa>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    5bec:	80 91 ec 08 	lds	r24, 0x08EC
    5bf0:	90 91 ed 08 	lds	r25, 0x08ED
    5bf4:	9c 01       	movw	r18, r24
    5bf6:	c2 9f       	mul	r28, r18
    5bf8:	c0 01       	movw	r24, r0
    5bfa:	c3 9f       	mul	r28, r19
    5bfc:	90 0d       	add	r25, r0
    5bfe:	d2 9f       	mul	r29, r18
    5c00:	90 0d       	add	r25, r0
    5c02:	11 24       	eor	r1, r1
    5c04:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
    5c08:	cb 01       	movw	r24, r22
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    5c0a:	90 95       	com	r25
    5c0c:	81 95       	neg	r24
    5c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c10:	90 93 c1 04 	sts	0x04C1, r25
    5c14:	80 93 c0 04 	sts	0x04C0, r24
    5c18:	65 cf       	rjmp	.-310    	; 0x5ae4 <getLeftSpeedFromInput+0x1f8>

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5c1a:	88 24       	eor	r8, r8
    5c1c:	99 24       	eor	r9, r9
    5c1e:	87 ce       	rjmp	.-754    	; 0x592e <getLeftSpeedFromInput+0x42>
    5c20:	e8 e0       	ldi	r30, 0x08	; 8
    5c22:	8e 2e       	mov	r8, r30
    5c24:	91 2c       	mov	r9, r1
    5c26:	ee ce       	rjmp	.-548    	; 0x5a04 <getLeftSpeedFromInput+0x118>
    5c28:	f7 e0       	ldi	r31, 0x07	; 7
    5c2a:	8f 2e       	mov	r8, r31
    5c2c:	91 2c       	mov	r9, r1
    5c2e:	dd ce       	rjmp	.-582    	; 0x59ea <getLeftSpeedFromInput+0xfe>
    5c30:	a6 e0       	ldi	r26, 0x06	; 6
    5c32:	8a 2e       	mov	r8, r26
    5c34:	91 2c       	mov	r9, r1
    5c36:	cc ce       	rjmp	.-616    	; 0x59d0 <getLeftSpeedFromInput+0xe4>
    5c38:	b5 e0       	ldi	r27, 0x05	; 5
    5c3a:	8b 2e       	mov	r8, r27
    5c3c:	91 2c       	mov	r9, r1
    5c3e:	bb ce       	rjmp	.-650    	; 0x59b6 <getLeftSpeedFromInput+0xca>
    5c40:	14 e0       	ldi	r17, 0x04	; 4
    5c42:	81 2e       	mov	r8, r17
    5c44:	91 2c       	mov	r9, r1
    5c46:	aa ce       	rjmp	.-684    	; 0x599c <getLeftSpeedFromInput+0xb0>
    5c48:	03 e0       	ldi	r16, 0x03	; 3
    5c4a:	80 2e       	mov	r8, r16
    5c4c:	91 2c       	mov	r9, r1
    5c4e:	99 ce       	rjmp	.-718    	; 0x5982 <getLeftSpeedFromInput+0x96>
    5c50:	82 e0       	ldi	r24, 0x02	; 2
    5c52:	88 2e       	mov	r8, r24
    5c54:	91 2c       	mov	r9, r1
    5c56:	88 ce       	rjmp	.-752    	; 0x5968 <getLeftSpeedFromInput+0x7c>
    5c58:	81 e0       	ldi	r24, 0x01	; 1
    5c5a:	77 ce       	rjmp	.-786    	; 0x594a <getLeftSpeedFromInput+0x5e>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    5c5c:	60 91 64 09 	lds	r22, 0x0964
    5c60:	70 91 65 09 	lds	r23, 0x0965
    5c64:	88 27       	eor	r24, r24
    5c66:	77 fd       	sbrc	r23, 7
    5c68:	80 95       	com	r24
    5c6a:	98 2f       	mov	r25, r24
    5c6c:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5c70:	7b 01       	movw	r14, r22
    5c72:	8c 01       	movw	r16, r24
    5c74:	be 01       	movw	r22, r28
    5c76:	88 27       	eor	r24, r24
    5c78:	77 fd       	sbrc	r23, 7
    5c7a:	80 95       	com	r24
    5c7c:	98 2f       	mov	r25, r24
    5c7e:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5c82:	9b 01       	movw	r18, r22
    5c84:	ac 01       	movw	r20, r24
    5c86:	c8 01       	movw	r24, r16
    5c88:	b7 01       	movw	r22, r14
    5c8a:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    5c8e:	7b 01       	movw	r14, r22
    5c90:	8c 01       	movw	r16, r24
    5c92:	b6 01       	movw	r22, r12
    5c94:	88 27       	eor	r24, r24
    5c96:	77 fd       	sbrc	r23, 7
    5c98:	80 95       	com	r24
    5c9a:	98 2f       	mov	r25, r24
    5c9c:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5ca0:	9b 01       	movw	r18, r22
    5ca2:	ac 01       	movw	r20, r24
    5ca4:	c8 01       	movw	r24, r16
    5ca6:	b7 01       	movw	r22, r14
    5ca8:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    5cac:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    5cb0:	70 93 c1 04 	sts	0x04C1, r23
    5cb4:	60 93 c0 04 	sts	0x04C0, r22
    5cb8:	15 cf       	rjmp	.-470    	; 0x5ae4 <getLeftSpeedFromInput+0x1f8>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    5cba:	80 91 e4 08 	lds	r24, 0x08E4
    5cbe:	90 91 e5 08 	lds	r25, 0x08E5
    5cc2:	9c 01       	movw	r18, r24
    5cc4:	c2 9f       	mul	r28, r18
    5cc6:	c0 01       	movw	r24, r0
    5cc8:	c3 9f       	mul	r28, r19
    5cca:	90 0d       	add	r25, r0
    5ccc:	d2 9f       	mul	r29, r18
    5cce:	90 0d       	add	r25, r0
    5cd0:	11 24       	eor	r1, r1
    5cd2:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
    5cd6:	70 93 c1 04 	sts	0x04C1, r23
    5cda:	60 93 c0 04 	sts	0x04C0, r22
    5cde:	02 cf       	rjmp	.-508    	; 0x5ae4 <getLeftSpeedFromInput+0x1f8>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    5ce0:	98 e0       	ldi	r25, 0x08	; 8
    5ce2:	89 2e       	mov	r8, r25
    5ce4:	91 2c       	mov	r9, r1
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5ce6:	3f ef       	ldi	r19, 0xFF	; 255
    5ce8:	83 16       	cp	r8, r19
    5cea:	3f ef       	ldi	r19, 0xFF	; 255
    5cec:	93 06       	cpc	r9, r19
    5cee:	09 f4       	brne	.+2      	; 0x5cf2 <getLeftSpeedFromInput+0x406>
    5cf0:	7b c0       	rjmp	.+246    	; 0x5de8 <getLeftSpeedFromInput+0x4fc>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    5cf2:	f4 01       	movw	r30, r8
    5cf4:	31 97       	sbiw	r30, 0x01	; 1
    5cf6:	ee 0f       	add	r30, r30
    5cf8:	ff 1f       	adc	r31, r31
    5cfa:	ee 0f       	add	r30, r30
    5cfc:	ff 1f       	adc	r31, r31
    5cfe:	ee 0f       	add	r30, r30
    5d00:	ff 1f       	adc	r31, r31
    5d02:	ee 0f       	add	r30, r30
    5d04:	ff 1f       	adc	r31, r31
    5d06:	df 01       	movw	r26, r30
    5d08:	a6 51       	subi	r26, 0x16	; 22
    5d0a:	b7 4f       	sbci	r27, 0xF7	; 247
    5d0c:	cd 90       	ld	r12, X+
    5d0e:	dc 90       	ld	r13, X
    5d10:	ee 51       	subi	r30, 0x1E	; 30
    5d12:	f7 4f       	sbci	r31, 0xF7	; 247
    5d14:	a2 84       	ldd	r10, Z+10	; 0x0a
    5d16:	b3 84       	ldd	r11, Z+11	; 0x0b
    5d18:	cc 19       	sub	r28, r12
    5d1a:	dd 09       	sbc	r29, r13
    5d1c:	be 01       	movw	r22, r28
    5d1e:	88 27       	eor	r24, r24
    5d20:	77 fd       	sbrc	r23, 7
    5d22:	80 95       	com	r24
    5d24:	98 2f       	mov	r25, r24
    5d26:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5d2a:	7b 01       	movw	r14, r22
    5d2c:	8c 01       	movw	r16, r24
    5d2e:	f4 01       	movw	r30, r8
    5d30:	e2 95       	swap	r30
    5d32:	f2 95       	swap	r31
    5d34:	f0 7f       	andi	r31, 0xF0	; 240
    5d36:	fe 27       	eor	r31, r30
    5d38:	e0 7f       	andi	r30, 0xF0	; 240
    5d3a:	fe 27       	eor	r31, r30
    5d3c:	ee 51       	subi	r30, 0x1E	; 30
    5d3e:	f7 4f       	sbci	r31, 0xF7	; 247
    5d40:	62 85       	ldd	r22, Z+10	; 0x0a
    5d42:	73 85       	ldd	r23, Z+11	; 0x0b
    5d44:	6a 19       	sub	r22, r10
    5d46:	7b 09       	sbc	r23, r11
    5d48:	88 27       	eor	r24, r24
    5d4a:	77 fd       	sbrc	r23, 7
    5d4c:	80 95       	com	r24
    5d4e:	98 2f       	mov	r25, r24
    5d50:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5d54:	9b 01       	movw	r18, r22
    5d56:	ac 01       	movw	r20, r24
    5d58:	c8 01       	movw	r24, r16
    5d5a:	b7 01       	movw	r22, r14
    5d5c:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    5d60:	7b 01       	movw	r14, r22
    5d62:	8c 01       	movw	r16, r24
    5d64:	88 0c       	add	r8, r8
    5d66:	99 1c       	adc	r9, r9
    5d68:	88 0c       	add	r8, r8
    5d6a:	99 1c       	adc	r9, r9
    5d6c:	88 0c       	add	r8, r8
    5d6e:	99 1c       	adc	r9, r9
    5d70:	88 0c       	add	r8, r8
    5d72:	99 1c       	adc	r9, r9
    5d74:	8a ee       	ldi	r24, 0xEA	; 234
    5d76:	98 e0       	ldi	r25, 0x08	; 8
    5d78:	88 0e       	add	r8, r24
    5d7a:	99 1e       	adc	r9, r25
    5d7c:	f4 01       	movw	r30, r8
    5d7e:	60 81       	ld	r22, Z
    5d80:	71 81       	ldd	r23, Z+1	; 0x01
    5d82:	6c 19       	sub	r22, r12
    5d84:	7d 09       	sbc	r23, r13
    5d86:	88 27       	eor	r24, r24
    5d88:	77 fd       	sbrc	r23, 7
    5d8a:	80 95       	com	r24
    5d8c:	98 2f       	mov	r25, r24
    5d8e:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5d92:	9b 01       	movw	r18, r22
    5d94:	ac 01       	movw	r20, r24
    5d96:	c8 01       	movw	r24, r16
    5d98:	b7 01       	movw	r22, r14
    5d9a:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    5d9e:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    5da2:	6a 0d       	add	r22, r10
    5da4:	7b 1d       	adc	r23, r11
    5da6:	cb 01       	movw	r24, r22
    5da8:	30 cf       	rjmp	.-416    	; 0x5c0a <getLeftSpeedFromInput+0x31e>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    5daa:	88 24       	eor	r8, r8
    5dac:	99 24       	eor	r9, r9
    5dae:	b2 ce       	rjmp	.-668    	; 0x5b14 <getLeftSpeedFromInput+0x228>
    5db0:	a1 e0       	ldi	r26, 0x01	; 1
    5db2:	8a 2e       	mov	r8, r26
    5db4:	91 2c       	mov	r9, r1
    5db6:	bb ce       	rjmp	.-650    	; 0x5b2e <getLeftSpeedFromInput+0x242>
    5db8:	27 e0       	ldi	r18, 0x07	; 7
    5dba:	82 2e       	mov	r8, r18
    5dbc:	91 2c       	mov	r9, r1
    5dbe:	05 cf       	rjmp	.-502    	; 0x5bca <getLeftSpeedFromInput+0x2de>
    5dc0:	36 e0       	ldi	r19, 0x06	; 6
    5dc2:	83 2e       	mov	r8, r19
    5dc4:	91 2c       	mov	r9, r1
    5dc6:	f4 ce       	rjmp	.-536    	; 0x5bb0 <getLeftSpeedFromInput+0x2c4>
    5dc8:	45 e0       	ldi	r20, 0x05	; 5
    5dca:	84 2e       	mov	r8, r20
    5dcc:	91 2c       	mov	r9, r1
    5dce:	e3 ce       	rjmp	.-570    	; 0x5b96 <getLeftSpeedFromInput+0x2aa>
    5dd0:	54 e0       	ldi	r21, 0x04	; 4
    5dd2:	85 2e       	mov	r8, r21
    5dd4:	91 2c       	mov	r9, r1
    5dd6:	d2 ce       	rjmp	.-604    	; 0x5b7c <getLeftSpeedFromInput+0x290>
    5dd8:	e3 e0       	ldi	r30, 0x03	; 3
    5dda:	8e 2e       	mov	r8, r30
    5ddc:	91 2c       	mov	r9, r1
    5dde:	c1 ce       	rjmp	.-638    	; 0x5b62 <getLeftSpeedFromInput+0x276>
    5de0:	f2 e0       	ldi	r31, 0x02	; 2
    5de2:	8f 2e       	mov	r8, r31
    5de4:	91 2c       	mov	r9, r1
    5de6:	b0 ce       	rjmp	.-672    	; 0x5b48 <getLeftSpeedFromInput+0x25c>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    5de8:	60 91 6c 09 	lds	r22, 0x096C
    5dec:	70 91 6d 09 	lds	r23, 0x096D
    5df0:	88 27       	eor	r24, r24
    5df2:	77 fd       	sbrc	r23, 7
    5df4:	80 95       	com	r24
    5df6:	98 2f       	mov	r25, r24
    5df8:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5dfc:	7b 01       	movw	r14, r22
    5dfe:	8c 01       	movw	r16, r24
    5e00:	be 01       	movw	r22, r28
    5e02:	88 27       	eor	r24, r24
    5e04:	77 fd       	sbrc	r23, 7
    5e06:	80 95       	com	r24
    5e08:	98 2f       	mov	r25, r24
    5e0a:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5e0e:	9b 01       	movw	r18, r22
    5e10:	ac 01       	movw	r20, r24
    5e12:	c8 01       	movw	r24, r16
    5e14:	b7 01       	movw	r22, r14
    5e16:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    5e1a:	7b 01       	movw	r14, r22
    5e1c:	8c 01       	movw	r16, r24
    5e1e:	b6 01       	movw	r22, r12
    5e20:	88 27       	eor	r24, r24
    5e22:	77 fd       	sbrc	r23, 7
    5e24:	80 95       	com	r24
    5e26:	98 2f       	mov	r25, r24
    5e28:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    5e2c:	9b 01       	movw	r18, r22
    5e2e:	ac 01       	movw	r20, r24
    5e30:	c8 01       	movw	r24, r16
    5e32:	b7 01       	movw	r22, r14
    5e34:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    5e38:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    5e3c:	cb 01       	movw	r24, r22
    5e3e:	e5 ce       	rjmp	.-566    	; 0x5c0a <getLeftSpeedFromInput+0x31e>

00005e40 <__vector_45>:

}


// Motor left
ISR(TIMER4_OVF_vect) {
    5e40:	1f 92       	push	r1
    5e42:	0f 92       	push	r0
    5e44:	0f b6       	in	r0, 0x3f	; 63
    5e46:	0f 92       	push	r0
    5e48:	11 24       	eor	r1, r1
    5e4a:	8f 93       	push	r24
    5e4c:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    5e4e:	80 91 76 04 	lds	r24, 0x0476
    5e52:	88 23       	and	r24, r24
    5e54:	c1 f1       	breq	.+112    	; 0x5ec6 <__vector_45+0x86>
		pwm_left = 0;
    5e56:	10 92 f4 02 	sts	0x02F4, r1
    5e5a:	10 92 f3 02 	sts	0x02F3, r1
		OCR4A = 0;
    5e5e:	10 92 a9 00 	sts	0x00A9, r1
    5e62:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    5e66:	10 92 ab 00 	sts	0x00AB, r1
    5e6a:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    5e6e:	10 92 de 02 	sts	0x02DE, r1
    5e72:	10 92 dd 02 	sts	0x02DD, r1


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    5e76:	80 91 e7 02 	lds	r24, 0x02E7
    5e7a:	90 91 e8 02 	lds	r25, 0x02E8
    5e7e:	97 fd       	sbrc	r25, 7
    5e80:	79 c0       	rjmp	.+242    	; 0x5f74 <__vector_45+0x134>
			leftMotorPhase = PASSIVE_PHASE;
    5e82:	81 e0       	ldi	r24, 0x01	; 1
    5e84:	80 93 24 02 	sts	0x0224, r24
			currentMotLeftChannel = 14;
    5e88:	8e e0       	ldi	r24, 0x0E	; 14
    5e8a:	80 93 21 02 	sts	0x0221, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    5e8e:	81 e0       	ldi	r24, 0x01	; 1
    5e90:	80 93 06 02 	sts	0x0206, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    5e94:	80 91 a0 00 	lds	r24, 0x00A0
    5e98:	8f 75       	andi	r24, 0x5F	; 95
    5e9a:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    5e9e:	80 91 02 01 	lds	r24, 0x0102
    5ea2:	87 7e       	andi	r24, 0xE7	; 231
    5ea4:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    5ea8:	80 91 72 00 	lds	r24, 0x0072
    5eac:	89 7f       	andi	r24, 0xF9	; 249
    5eae:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    5eb2:	89 b3       	in	r24, 0x19	; 25
    5eb4:	86 60       	ori	r24, 0x06	; 6
    5eb6:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    5eb8:	9f 91       	pop	r25
    5eba:	8f 91       	pop	r24
    5ebc:	0f 90       	pop	r0
    5ebe:	0f be       	out	0x3f, r0	; 63
    5ec0:	0f 90       	pop	r0
    5ec2:	1f 90       	pop	r1
    5ec4:	18 95       	reti
		pwm_left = 0;
		OCR4A = 0;
		OCR4B = 0;
	}

	left_current_avg = 0;
    5ec6:	10 92 de 02 	sts	0x02DE, r1
    5eca:	10 92 dd 02 	sts	0x02DD, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    5ece:	80 91 f3 02 	lds	r24, 0x02F3
    5ed2:	90 91 f4 02 	lds	r25, 0x02F4
    5ed6:	00 97       	sbiw	r24, 0x00	; 0
    5ed8:	71 f2       	breq	.-100    	; 0x5e76 <__vector_45+0x36>
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    5eda:	18 16       	cp	r1, r24
    5edc:	19 06       	cpc	r1, r25
    5ede:	2c f5       	brge	.+74     	; 0x5f2a <__vector_45+0xea>
		leftMotorPhase = ACTIVE_PHASE;
    5ee0:	10 92 24 02 	sts	0x0224, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    5ee4:	8f e0       	ldi	r24, 0x0F	; 15
    5ee6:	80 93 21 02 	sts	0x0221, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    5eea:	80 91 a0 00 	lds	r24, 0x00A0
    5eee:	8f 7d       	andi	r24, 0xDF	; 223
    5ef0:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    5ef4:	80 91 72 00 	lds	r24, 0x0072
    5ef8:	8b 7f       	andi	r24, 0xFB	; 251
    5efa:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    5efe:	80 91 02 01 	lds	r24, 0x0102
    5f02:	8f 7e       	andi	r24, 0xEF	; 239
    5f04:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    5f08:	80 91 a0 00 	lds	r24, 0x00A0
    5f0c:	80 68       	ori	r24, 0x80	; 128
    5f0e:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    5f12:	80 91 72 00 	lds	r24, 0x0072
    5f16:	82 60       	ori	r24, 0x02	; 2
    5f18:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    5f1c:	9f 91       	pop	r25
    5f1e:	8f 91       	pop	r24
    5f20:	0f 90       	pop	r0
    5f22:	0f be       	out	0x3f, r0	; 63
    5f24:	0f 90       	pop	r0
    5f26:	1f 90       	pop	r1
    5f28:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    5f2a:	10 92 24 02 	sts	0x0224, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    5f2e:	8e e0       	ldi	r24, 0x0E	; 14
    5f30:	80 93 21 02 	sts	0x0221, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    5f34:	80 91 a0 00 	lds	r24, 0x00A0
    5f38:	8f 77       	andi	r24, 0x7F	; 127
    5f3a:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    5f3e:	80 91 72 00 	lds	r24, 0x0072
    5f42:	8d 7f       	andi	r24, 0xFD	; 253
    5f44:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    5f48:	80 91 02 01 	lds	r24, 0x0102
    5f4c:	87 7f       	andi	r24, 0xF7	; 247
    5f4e:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    5f52:	80 91 a0 00 	lds	r24, 0x00A0
    5f56:	80 62       	ori	r24, 0x20	; 32
    5f58:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    5f5c:	80 91 72 00 	lds	r24, 0x0072
    5f60:	84 60       	ori	r24, 0x04	; 4
    5f62:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    5f66:	9f 91       	pop	r25
    5f68:	8f 91       	pop	r24
    5f6a:	0f 90       	pop	r0
    5f6c:	0f be       	out	0x3f, r0	; 63
    5f6e:	0f 90       	pop	r0
    5f70:	1f 90       	pop	r1
    5f72:	18 95       	reti

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    5f74:	81 e0       	ldi	r24, 0x01	; 1
    5f76:	80 93 24 02 	sts	0x0224, r24
			currentMotLeftChannel = 15;
    5f7a:	8f e0       	ldi	r24, 0x0F	; 15
    5f7c:	80 93 21 02 	sts	0x0221, r24
    5f80:	86 cf       	rjmp	.-244    	; 0x5e8e <__vector_45+0x4e>

00005f82 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    5f82:	1f 92       	push	r1
    5f84:	0f 92       	push	r0
    5f86:	0f b6       	in	r0, 0x3f	; 63
    5f88:	0f 92       	push	r0
    5f8a:	11 24       	eor	r1, r1
    5f8c:	8f 93       	push	r24
    5f8e:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    5f90:	91 e0       	ldi	r25, 0x01	; 1
    5f92:	90 93 24 02 	sts	0x0224, r25
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    5f96:	8e e0       	ldi	r24, 0x0E	; 14
    5f98:	80 93 21 02 	sts	0x0221, r24

	firstSampleLeft = 1;
    5f9c:	90 93 06 02 	sts	0x0206, r25

//	LED_GREEN_OFF;

}
    5fa0:	9f 91       	pop	r25
    5fa2:	8f 91       	pop	r24
    5fa4:	0f 90       	pop	r0
    5fa6:	0f be       	out	0x3f, r0	; 63
    5fa8:	0f 90       	pop	r0
    5faa:	1f 90       	pop	r1
    5fac:	18 95       	reti

00005fae <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    5fae:	1f 92       	push	r1
    5fb0:	0f 92       	push	r0
    5fb2:	0f b6       	in	r0, 0x3f	; 63
    5fb4:	0f 92       	push	r0
    5fb6:	11 24       	eor	r1, r1
    5fb8:	8f 93       	push	r24
    5fba:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    5fbc:	91 e0       	ldi	r25, 0x01	; 1
    5fbe:	90 93 24 02 	sts	0x0224, r25
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    5fc2:	8f e0       	ldi	r24, 0x0F	; 15
    5fc4:	80 93 21 02 	sts	0x0221, r24

	firstSampleLeft = 1;
    5fc8:	90 93 06 02 	sts	0x0206, r25

//	LED_GREEN_OFF;

}
    5fcc:	9f 91       	pop	r25
    5fce:	8f 91       	pop	r24
    5fd0:	0f 90       	pop	r0
    5fd2:	0f be       	out	0x3f, r0	; 63
    5fd4:	0f 90       	pop	r0
    5fd6:	1f 90       	pop	r1
    5fd8:	18 95       	reti

00005fda <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    5fda:	1f 92       	push	r1
    5fdc:	0f 92       	push	r0
    5fde:	0f b6       	in	r0, 0x3f	; 63
    5fe0:	0f 92       	push	r0
    5fe2:	11 24       	eor	r1, r1
    5fe4:	8f 93       	push	r24
    5fe6:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    5fe8:	80 91 76 04 	lds	r24, 0x0476
    5fec:	88 23       	and	r24, r24
    5fee:	b1 f1       	breq	.+108    	; 0x605c <__vector_35+0x82>
		pwm_right = 0;
    5ff0:	10 92 f2 02 	sts	0x02F2, r1
    5ff4:	10 92 f1 02 	sts	0x02F1, r1
		OCR3A = 0;
    5ff8:	10 92 99 00 	sts	0x0099, r1
    5ffc:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    6000:	10 92 9b 00 	sts	0x009B, r1
    6004:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    6008:	10 92 e0 02 	sts	0x02E0, r1
    600c:	10 92 df 02 	sts	0x02DF, r1
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    6010:	80 91 e5 02 	lds	r24, 0x02E5
    6014:	90 91 e6 02 	lds	r25, 0x02E6
    6018:	97 fd       	sbrc	r25, 7
    601a:	6f c0       	rjmp	.+222    	; 0x60fa <__vector_35+0x120>
			rightMotorPhase = PASSIVE_PHASE;
    601c:	81 e0       	ldi	r24, 0x01	; 1
    601e:	80 93 23 02 	sts	0x0223, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    6022:	8c e0       	ldi	r24, 0x0C	; 12
    6024:	80 93 22 02 	sts	0x0222, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    6028:	81 e0       	ldi	r24, 0x01	; 1
    602a:	80 93 05 02 	sts	0x0205, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    602e:	80 91 90 00 	lds	r24, 0x0090
    6032:	8f 75       	andi	r24, 0x5F	; 95
    6034:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6038:	8e b1       	in	r24, 0x0e	; 14
    603a:	87 7e       	andi	r24, 0xE7	; 231
    603c:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    603e:	80 91 71 00 	lds	r24, 0x0071
    6042:	89 7f       	andi	r24, 0xF9	; 249
    6044:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    6048:	88 b3       	in	r24, 0x18	; 24
    604a:	86 60       	ori	r24, 0x06	; 6
    604c:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    604e:	9f 91       	pop	r25
    6050:	8f 91       	pop	r24
    6052:	0f 90       	pop	r0
    6054:	0f be       	out	0x3f, r0	; 63
    6056:	0f 90       	pop	r0
    6058:	1f 90       	pop	r1
    605a:	18 95       	reti
		pwm_right = 0;
		OCR3A = 0;
		OCR3B = 0;
	}

	right_current_avg = 0;
    605c:	10 92 e0 02 	sts	0x02E0, r1
    6060:	10 92 df 02 	sts	0x02DF, r1


	if(pwm_right == 0) {
    6064:	80 91 f1 02 	lds	r24, 0x02F1
    6068:	90 91 f2 02 	lds	r25, 0x02F2
    606c:	00 97       	sbiw	r24, 0x00	; 0
    606e:	81 f2       	breq	.-96     	; 0x6010 <__vector_35+0x36>
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    6070:	18 16       	cp	r1, r24
    6072:	19 06       	cpc	r1, r25
    6074:	0c f5       	brge	.+66     	; 0x60b8 <__vector_35+0xde>
		rightMotorPhase = ACTIVE_PHASE;
    6076:	10 92 23 02 	sts	0x0223, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    607a:	8d e0       	ldi	r24, 0x0D	; 13
    607c:	80 93 22 02 	sts	0x0222, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    6080:	80 91 90 00 	lds	r24, 0x0090
    6084:	8f 7d       	andi	r24, 0xDF	; 223
    6086:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    608a:	80 91 71 00 	lds	r24, 0x0071
    608e:	8b 7f       	andi	r24, 0xFB	; 251
    6090:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    6094:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    6096:	80 91 90 00 	lds	r24, 0x0090
    609a:	80 68       	ori	r24, 0x80	; 128
    609c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    60a0:	80 91 71 00 	lds	r24, 0x0071
    60a4:	82 60       	ori	r24, 0x02	; 2
    60a6:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    60aa:	9f 91       	pop	r25
    60ac:	8f 91       	pop	r24
    60ae:	0f 90       	pop	r0
    60b0:	0f be       	out	0x3f, r0	; 63
    60b2:	0f 90       	pop	r0
    60b4:	1f 90       	pop	r1
    60b6:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    60b8:	10 92 23 02 	sts	0x0223, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    60bc:	8c e0       	ldi	r24, 0x0C	; 12
    60be:	80 93 22 02 	sts	0x0222, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    60c2:	80 91 90 00 	lds	r24, 0x0090
    60c6:	8f 77       	andi	r24, 0x7F	; 127
    60c8:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    60cc:	80 91 71 00 	lds	r24, 0x0071
    60d0:	8d 7f       	andi	r24, 0xFD	; 253
    60d2:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    60d6:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    60d8:	80 91 90 00 	lds	r24, 0x0090
    60dc:	80 62       	ori	r24, 0x20	; 32
    60de:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    60e2:	80 91 71 00 	lds	r24, 0x0071
    60e6:	84 60       	ori	r24, 0x04	; 4
    60e8:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    60ec:	9f 91       	pop	r25
    60ee:	8f 91       	pop	r24
    60f0:	0f 90       	pop	r0
    60f2:	0f be       	out	0x3f, r0	; 63
    60f4:	0f 90       	pop	r0
    60f6:	1f 90       	pop	r1
    60f8:	18 95       	reti
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    60fa:	81 e0       	ldi	r24, 0x01	; 1
    60fc:	80 93 23 02 	sts	0x0223, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    6100:	8d e0       	ldi	r24, 0x0D	; 13
    6102:	80 93 22 02 	sts	0x0222, r24
    6106:	90 cf       	rjmp	.-224    	; 0x6028 <__vector_35+0x4e>

00006108 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    6108:	1f 92       	push	r1
    610a:	0f 92       	push	r0
    610c:	0f b6       	in	r0, 0x3f	; 63
    610e:	0f 92       	push	r0
    6110:	11 24       	eor	r1, r1
    6112:	8f 93       	push	r24
    6114:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    6116:	91 e0       	ldi	r25, 0x01	; 1
    6118:	90 93 23 02 	sts	0x0223, r25
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    611c:	8c e0       	ldi	r24, 0x0C	; 12
    611e:	80 93 22 02 	sts	0x0222, r24

	firstSampleRight = 1;
    6122:	90 93 05 02 	sts	0x0205, r25

//	LED_RED_OFF;

}
    6126:	9f 91       	pop	r25
    6128:	8f 91       	pop	r24
    612a:	0f 90       	pop	r0
    612c:	0f be       	out	0x3f, r0	; 63
    612e:	0f 90       	pop	r0
    6130:	1f 90       	pop	r1
    6132:	18 95       	reti

00006134 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    6134:	1f 92       	push	r1
    6136:	0f 92       	push	r0
    6138:	0f b6       	in	r0, 0x3f	; 63
    613a:	0f 92       	push	r0
    613c:	11 24       	eor	r1, r1
    613e:	8f 93       	push	r24
    6140:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    6142:	91 e0       	ldi	r25, 0x01	; 1
    6144:	90 93 23 02 	sts	0x0223, r25
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    6148:	8d e0       	ldi	r24, 0x0D	; 13
    614a:	80 93 22 02 	sts	0x0222, r24

	firstSampleRight = 1;
    614e:	90 93 05 02 	sts	0x0205, r25

//	LED_RED_OFF;
}
    6152:	9f 91       	pop	r25
    6154:	8f 91       	pop	r24
    6156:	0f 90       	pop	r0
    6158:	0f be       	out	0x3f, r0	; 63
    615a:	0f 90       	pop	r0
    615c:	1f 90       	pop	r1
    615e:	18 95       	reti

00006160 <handleSoftAcceleration>:

// Handle "soft acceleration" that basically increase or decrease the current speed
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
    6160:	9f 92       	push	r9
    6162:	af 92       	push	r10
    6164:	bf 92       	push	r11
    6166:	cf 92       	push	r12
    6168:	df 92       	push	r13
    616a:	ef 92       	push	r14
    616c:	ff 92       	push	r15
    616e:	0f 93       	push	r16
    6170:	1f 93       	push	r17
		
	if(calibrateOdomFlag==0) {
    6172:	80 91 6e 05 	lds	r24, 0x056E
    6176:	88 23       	and	r24, r24
    6178:	51 f0       	breq	.+20     	; 0x618e <handleSoftAcceleration+0x2e>
			}

		}
	}

}
    617a:	1f 91       	pop	r17
    617c:	0f 91       	pop	r16
    617e:	ff 90       	pop	r15
    6180:	ef 90       	pop	r14
    6182:	df 90       	pop	r13
    6184:	cf 90       	pop	r12
    6186:	bf 90       	pop	r11
    6188:	af 90       	pop	r10
    618a:	9f 90       	pop	r9
    618c:	08 95       	ret
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    618e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6192:	8b 01       	movw	r16, r22
    6194:	9c 01       	movw	r18, r24
    6196:	40 e0       	ldi	r20, 0x00	; 0
    6198:	50 e0       	ldi	r21, 0x00	; 0
    619a:	60 e0       	ldi	r22, 0x00	; 0
    619c:	70 e0       	ldi	r23, 0x00	; 0
    619e:	80 91 64 04 	lds	r24, 0x0464
    61a2:	90 91 65 04 	lds	r25, 0x0465
    61a6:	f0 91 66 04 	lds	r31, 0x0466
    61aa:	b0 91 67 04 	lds	r27, 0x0467
    61ae:	e0 90 68 04 	lds	r14, 0x0468
    61b2:	c0 90 69 04 	lds	r12, 0x0469
    61b6:	a0 90 6a 04 	lds	r10, 0x046A
    61ba:	a0 91 6b 04 	lds	r26, 0x046B
    61be:	90 2e       	mov	r9, r16
    61c0:	98 1a       	sub	r9, r24
    61c2:	e1 e0       	ldi	r30, 0x01	; 1
    61c4:	09 15       	cp	r16, r9
    61c6:	08 f0       	brcs	.+2      	; 0x61ca <handleSoftAcceleration+0x6a>
    61c8:	08 c1       	rjmp	.+528    	; 0x63da <handleSoftAcceleration+0x27a>
    61ca:	81 2f       	mov	r24, r17
    61cc:	89 1b       	sub	r24, r25
    61ce:	91 e0       	ldi	r25, 0x01	; 1
    61d0:	18 17       	cp	r17, r24
    61d2:	08 f0       	brcs	.+2      	; 0x61d6 <handleSoftAcceleration+0x76>
    61d4:	fa c0       	rjmp	.+500    	; 0x63ca <handleSoftAcceleration+0x26a>
    61d6:	f8 2e       	mov	r15, r24
    61d8:	fe 1a       	sub	r15, r30
    61da:	e1 e0       	ldi	r30, 0x01	; 1
    61dc:	8f 15       	cp	r24, r15
    61de:	08 f0       	brcs	.+2      	; 0x61e2 <handleSoftAcceleration+0x82>
    61e0:	eb c0       	rjmp	.+470    	; 0x63b8 <handleSoftAcceleration+0x258>
    61e2:	9e 2b       	or	r25, r30
    61e4:	82 2f       	mov	r24, r18
    61e6:	8f 1b       	sub	r24, r31
    61e8:	e1 e0       	ldi	r30, 0x01	; 1
    61ea:	28 17       	cp	r18, r24
    61ec:	08 f0       	brcs	.+2      	; 0x61f0 <handleSoftAcceleration+0x90>
    61ee:	dc c0       	rjmp	.+440    	; 0x63a8 <handleSoftAcceleration+0x248>
    61f0:	b8 2e       	mov	r11, r24
    61f2:	b9 1a       	sub	r11, r25
    61f4:	91 e0       	ldi	r25, 0x01	; 1
    61f6:	8b 15       	cp	r24, r11
    61f8:	08 f0       	brcs	.+2      	; 0x61fc <handleSoftAcceleration+0x9c>
    61fa:	cd c0       	rjmp	.+410    	; 0x6396 <handleSoftAcceleration+0x236>
    61fc:	e9 2b       	or	r30, r25
    61fe:	83 2f       	mov	r24, r19
    6200:	8b 1b       	sub	r24, r27
    6202:	91 e0       	ldi	r25, 0x01	; 1
    6204:	38 17       	cp	r19, r24
    6206:	08 f0       	brcs	.+2      	; 0x620a <handleSoftAcceleration+0xaa>
    6208:	be c0       	rjmp	.+380    	; 0x6386 <handleSoftAcceleration+0x226>
    620a:	d8 2e       	mov	r13, r24
    620c:	de 1a       	sub	r13, r30
    620e:	e1 e0       	ldi	r30, 0x01	; 1
    6210:	8d 15       	cp	r24, r13
    6212:	08 f0       	brcs	.+2      	; 0x6216 <handleSoftAcceleration+0xb6>
    6214:	af c0       	rjmp	.+350    	; 0x6374 <handleSoftAcceleration+0x214>
    6216:	9e 2b       	or	r25, r30
    6218:	8e 2d       	mov	r24, r14
    621a:	81 95       	neg	r24
    621c:	e1 e0       	ldi	r30, 0x01	; 1
    621e:	48 17       	cp	r20, r24
    6220:	08 f0       	brcs	.+2      	; 0x6224 <handleSoftAcceleration+0xc4>
    6222:	a0 c0       	rjmp	.+320    	; 0x6364 <handleSoftAcceleration+0x204>
    6224:	b8 2f       	mov	r27, r24
    6226:	b9 1b       	sub	r27, r25
    6228:	91 e0       	ldi	r25, 0x01	; 1
    622a:	8b 17       	cp	r24, r27
    622c:	08 f0       	brcs	.+2      	; 0x6230 <handleSoftAcceleration+0xd0>
    622e:	91 c0       	rjmp	.+290    	; 0x6352 <handleSoftAcceleration+0x1f2>
    6230:	e9 2b       	or	r30, r25
    6232:	8c 2d       	mov	r24, r12
    6234:	81 95       	neg	r24
    6236:	f1 e0       	ldi	r31, 0x01	; 1
    6238:	58 17       	cp	r21, r24
    623a:	08 f0       	brcs	.+2      	; 0x623e <handleSoftAcceleration+0xde>
    623c:	81 c0       	rjmp	.+258    	; 0x6340 <handleSoftAcceleration+0x1e0>
    623e:	98 2f       	mov	r25, r24
    6240:	9e 1b       	sub	r25, r30
    6242:	e9 2f       	mov	r30, r25
    6244:	91 e0       	ldi	r25, 0x01	; 1
    6246:	8e 17       	cp	r24, r30
    6248:	08 f0       	brcs	.+2      	; 0x624c <handleSoftAcceleration+0xec>
    624a:	71 c0       	rjmp	.+226    	; 0x632e <handleSoftAcceleration+0x1ce>
    624c:	f9 2b       	or	r31, r25
    624e:	8a 2d       	mov	r24, r10
    6250:	81 95       	neg	r24
    6252:	91 e0       	ldi	r25, 0x01	; 1
    6254:	68 17       	cp	r22, r24
    6256:	08 f0       	brcs	.+2      	; 0x625a <handleSoftAcceleration+0xfa>
    6258:	62 c0       	rjmp	.+196    	; 0x631e <handleSoftAcceleration+0x1be>
    625a:	38 2f       	mov	r19, r24
    625c:	3f 1b       	sub	r19, r31
    625e:	21 e0       	ldi	r18, 0x01	; 1
    6260:	83 17       	cp	r24, r19
    6262:	08 f0       	brcs	.+2      	; 0x6266 <handleSoftAcceleration+0x106>
    6264:	55 c0       	rjmp	.+170    	; 0x6310 <handleSoftAcceleration+0x1b0>
    6266:	92 2b       	or	r25, r18
    6268:	a1 95       	neg	r26
    626a:	a9 17       	cp	r26, r25
    626c:	09 f4       	brne	.+2      	; 0x6270 <handleSoftAcceleration+0x110>
    626e:	bd c0       	rjmp	.+378    	; 0x63ea <handleSoftAcceleration+0x28a>
			speedStepCounter = getTime100MicroSec();
    6270:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6274:	9b 01       	movw	r18, r22
    6276:	ac 01       	movw	r20, r24
    6278:	60 93 64 04 	sts	0x0464, r22
    627c:	30 93 65 04 	sts	0x0465, r19
    6280:	40 93 66 04 	sts	0x0466, r20
    6284:	50 93 67 04 	sts	0x0467, r21
    6288:	10 92 68 04 	sts	0x0468, r1
    628c:	10 92 69 04 	sts	0x0469, r1
    6290:	10 92 6a 04 	sts	0x046A, r1
    6294:	10 92 6b 04 	sts	0x046B, r1

			if(softAccEnabled) {
    6298:	80 91 6c 04 	lds	r24, 0x046C
    629c:	88 23       	and	r24, r24
    629e:	09 f4       	brne	.+2      	; 0x62a2 <handleSoftAcceleration+0x142>
    62a0:	bf c0       	rjmp	.+382    	; 0x6420 <handleSoftAcceleration+0x2c0>
				if(pwm_right_desired == 0) {
    62a2:	20 91 f5 02 	lds	r18, 0x02F5
    62a6:	30 91 f6 02 	lds	r19, 0x02F6
    62aa:	21 15       	cp	r18, r1
    62ac:	31 05       	cpc	r19, r1
    62ae:	09 f0       	breq	.+2      	; 0x62b2 <handleSoftAcceleration+0x152>
    62b0:	c8 c0       	rjmp	.+400    	; 0x6442 <handleSoftAcceleration+0x2e2>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    62b2:	10 92 fa 02 	sts	0x02FA, r1
    62b6:	10 92 f9 02 	sts	0x02F9, r1
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    62ba:	20 91 f7 02 	lds	r18, 0x02F7
    62be:	30 91 f8 02 	lds	r19, 0x02F8
    62c2:	21 15       	cp	r18, r1
    62c4:	31 05       	cpc	r19, r1
    62c6:	09 f4       	brne	.+2      	; 0x62ca <handleSoftAcceleration+0x16a>
    62c8:	de c0       	rjmp	.+444    	; 0x6486 <handleSoftAcceleration+0x326>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    62ca:	40 91 fb 02 	lds	r20, 0x02FB
    62ce:	50 91 fc 02 	lds	r21, 0x02FC
    62d2:	42 9f       	mul	r20, r18
    62d4:	c0 01       	movw	r24, r0
    62d6:	43 9f       	mul	r20, r19
    62d8:	90 0d       	add	r25, r0
    62da:	52 9f       	mul	r21, r18
    62dc:	90 0d       	add	r25, r0
    62de:	11 24       	eor	r1, r1
    62e0:	97 fd       	sbrc	r25, 7
    62e2:	d1 c0       	rjmp	.+418    	; 0x6486 <handleSoftAcceleration+0x326>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    62e4:	42 17       	cp	r20, r18
    62e6:	53 07       	cpc	r21, r19
    62e8:	0c f0       	brlt	.+2      	; 0x62ec <handleSoftAcceleration+0x18c>
    62ea:	d2 c0       	rjmp	.+420    	; 0x6490 <handleSoftAcceleration+0x330>
					pwm_intermediate_left_desired += speedStep;
    62ec:	80 91 13 02 	lds	r24, 0x0213
    62f0:	ba 01       	movw	r22, r20
    62f2:	68 0f       	add	r22, r24
    62f4:	71 1d       	adc	r23, r1
    62f6:	70 93 fc 02 	sts	0x02FC, r23
    62fa:	60 93 fb 02 	sts	0x02FB, r22
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    62fe:	26 17       	cp	r18, r22
    6300:	37 07       	cpc	r19, r23
    6302:	0c f0       	brlt	.+2      	; 0x6306 <handleSoftAcceleration+0x1a6>
    6304:	3a cf       	rjmp	.-396    	; 0x617a <handleSoftAcceleration+0x1a>
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired -= speedStep;
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
    6306:	30 93 fc 02 	sts	0x02FC, r19
    630a:	20 93 fb 02 	sts	0x02FB, r18
    630e:	35 cf       	rjmp	.-406    	; 0x617a <handleSoftAcceleration+0x1a>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    6310:	20 e0       	ldi	r18, 0x00	; 0
    6312:	92 2b       	or	r25, r18
    6314:	a1 95       	neg	r26
    6316:	a9 17       	cp	r26, r25
    6318:	09 f0       	breq	.+2      	; 0x631c <handleSoftAcceleration+0x1bc>
    631a:	aa cf       	rjmp	.-172    	; 0x6270 <handleSoftAcceleration+0x110>
    631c:	66 c0       	rjmp	.+204    	; 0x63ea <handleSoftAcceleration+0x28a>
    631e:	90 e0       	ldi	r25, 0x00	; 0
    6320:	38 2f       	mov	r19, r24
    6322:	3f 1b       	sub	r19, r31
    6324:	21 e0       	ldi	r18, 0x01	; 1
    6326:	83 17       	cp	r24, r19
    6328:	08 f4       	brcc	.+2      	; 0x632c <handleSoftAcceleration+0x1cc>
    632a:	9d cf       	rjmp	.-198    	; 0x6266 <handleSoftAcceleration+0x106>
    632c:	f1 cf       	rjmp	.-30     	; 0x6310 <handleSoftAcceleration+0x1b0>
    632e:	90 e0       	ldi	r25, 0x00	; 0
    6330:	f9 2b       	or	r31, r25
    6332:	8a 2d       	mov	r24, r10
    6334:	81 95       	neg	r24
    6336:	91 e0       	ldi	r25, 0x01	; 1
    6338:	68 17       	cp	r22, r24
    633a:	08 f4       	brcc	.+2      	; 0x633e <handleSoftAcceleration+0x1de>
    633c:	8e cf       	rjmp	.-228    	; 0x625a <handleSoftAcceleration+0xfa>
    633e:	ef cf       	rjmp	.-34     	; 0x631e <handleSoftAcceleration+0x1be>
    6340:	f0 e0       	ldi	r31, 0x00	; 0
    6342:	98 2f       	mov	r25, r24
    6344:	9e 1b       	sub	r25, r30
    6346:	e9 2f       	mov	r30, r25
    6348:	91 e0       	ldi	r25, 0x01	; 1
    634a:	8e 17       	cp	r24, r30
    634c:	08 f4       	brcc	.+2      	; 0x6350 <handleSoftAcceleration+0x1f0>
    634e:	7e cf       	rjmp	.-260    	; 0x624c <handleSoftAcceleration+0xec>
    6350:	ee cf       	rjmp	.-36     	; 0x632e <handleSoftAcceleration+0x1ce>
    6352:	90 e0       	ldi	r25, 0x00	; 0
    6354:	e9 2b       	or	r30, r25
    6356:	8c 2d       	mov	r24, r12
    6358:	81 95       	neg	r24
    635a:	f1 e0       	ldi	r31, 0x01	; 1
    635c:	58 17       	cp	r21, r24
    635e:	08 f4       	brcc	.+2      	; 0x6362 <handleSoftAcceleration+0x202>
    6360:	6e cf       	rjmp	.-292    	; 0x623e <handleSoftAcceleration+0xde>
    6362:	ee cf       	rjmp	.-36     	; 0x6340 <handleSoftAcceleration+0x1e0>
    6364:	e0 e0       	ldi	r30, 0x00	; 0
    6366:	b8 2f       	mov	r27, r24
    6368:	b9 1b       	sub	r27, r25
    636a:	91 e0       	ldi	r25, 0x01	; 1
    636c:	8b 17       	cp	r24, r27
    636e:	08 f4       	brcc	.+2      	; 0x6372 <handleSoftAcceleration+0x212>
    6370:	5f cf       	rjmp	.-322    	; 0x6230 <handleSoftAcceleration+0xd0>
    6372:	ef cf       	rjmp	.-34     	; 0x6352 <handleSoftAcceleration+0x1f2>
    6374:	e0 e0       	ldi	r30, 0x00	; 0
    6376:	9e 2b       	or	r25, r30
    6378:	8e 2d       	mov	r24, r14
    637a:	81 95       	neg	r24
    637c:	e1 e0       	ldi	r30, 0x01	; 1
    637e:	48 17       	cp	r20, r24
    6380:	08 f4       	brcc	.+2      	; 0x6384 <handleSoftAcceleration+0x224>
    6382:	50 cf       	rjmp	.-352    	; 0x6224 <handleSoftAcceleration+0xc4>
    6384:	ef cf       	rjmp	.-34     	; 0x6364 <handleSoftAcceleration+0x204>
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	d8 2e       	mov	r13, r24
    638a:	de 1a       	sub	r13, r30
    638c:	e1 e0       	ldi	r30, 0x01	; 1
    638e:	8d 15       	cp	r24, r13
    6390:	08 f4       	brcc	.+2      	; 0x6394 <handleSoftAcceleration+0x234>
    6392:	41 cf       	rjmp	.-382    	; 0x6216 <handleSoftAcceleration+0xb6>
    6394:	ef cf       	rjmp	.-34     	; 0x6374 <handleSoftAcceleration+0x214>
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	e9 2b       	or	r30, r25
    639a:	83 2f       	mov	r24, r19
    639c:	8b 1b       	sub	r24, r27
    639e:	91 e0       	ldi	r25, 0x01	; 1
    63a0:	38 17       	cp	r19, r24
    63a2:	08 f4       	brcc	.+2      	; 0x63a6 <handleSoftAcceleration+0x246>
    63a4:	32 cf       	rjmp	.-412    	; 0x620a <handleSoftAcceleration+0xaa>
    63a6:	ef cf       	rjmp	.-34     	; 0x6386 <handleSoftAcceleration+0x226>
    63a8:	e0 e0       	ldi	r30, 0x00	; 0
    63aa:	b8 2e       	mov	r11, r24
    63ac:	b9 1a       	sub	r11, r25
    63ae:	91 e0       	ldi	r25, 0x01	; 1
    63b0:	8b 15       	cp	r24, r11
    63b2:	08 f4       	brcc	.+2      	; 0x63b6 <handleSoftAcceleration+0x256>
    63b4:	23 cf       	rjmp	.-442    	; 0x61fc <handleSoftAcceleration+0x9c>
    63b6:	ef cf       	rjmp	.-34     	; 0x6396 <handleSoftAcceleration+0x236>
    63b8:	e0 e0       	ldi	r30, 0x00	; 0
    63ba:	9e 2b       	or	r25, r30
    63bc:	82 2f       	mov	r24, r18
    63be:	8f 1b       	sub	r24, r31
    63c0:	e1 e0       	ldi	r30, 0x01	; 1
    63c2:	28 17       	cp	r18, r24
    63c4:	08 f4       	brcc	.+2      	; 0x63c8 <handleSoftAcceleration+0x268>
    63c6:	14 cf       	rjmp	.-472    	; 0x61f0 <handleSoftAcceleration+0x90>
    63c8:	ef cf       	rjmp	.-34     	; 0x63a8 <handleSoftAcceleration+0x248>
    63ca:	90 e0       	ldi	r25, 0x00	; 0
    63cc:	f8 2e       	mov	r15, r24
    63ce:	fe 1a       	sub	r15, r30
    63d0:	e1 e0       	ldi	r30, 0x01	; 1
    63d2:	8f 15       	cp	r24, r15
    63d4:	08 f4       	brcc	.+2      	; 0x63d8 <handleSoftAcceleration+0x278>
    63d6:	05 cf       	rjmp	.-502    	; 0x61e2 <handleSoftAcceleration+0x82>
    63d8:	ef cf       	rjmp	.-34     	; 0x63b8 <handleSoftAcceleration+0x258>
    63da:	e0 e0       	ldi	r30, 0x00	; 0
    63dc:	81 2f       	mov	r24, r17
    63de:	89 1b       	sub	r24, r25
    63e0:	91 e0       	ldi	r25, 0x01	; 1
    63e2:	18 17       	cp	r17, r24
    63e4:	08 f4       	brcc	.+2      	; 0x63e8 <handleSoftAcceleration+0x288>
    63e6:	f7 ce       	rjmp	.-530    	; 0x61d6 <handleSoftAcceleration+0x76>
    63e8:	f0 cf       	rjmp	.-32     	; 0x63ca <handleSoftAcceleration+0x26a>
    63ea:	33 23       	and	r19, r19
    63ec:	09 f0       	breq	.+2      	; 0x63f0 <handleSoftAcceleration+0x290>
    63ee:	40 cf       	rjmp	.-384    	; 0x6270 <handleSoftAcceleration+0x110>
    63f0:	ee 23       	and	r30, r30
    63f2:	09 f0       	breq	.+2      	; 0x63f6 <handleSoftAcceleration+0x296>
    63f4:	3d cf       	rjmp	.-390    	; 0x6270 <handleSoftAcceleration+0x110>
    63f6:	bb 23       	and	r27, r27
    63f8:	09 f0       	breq	.+2      	; 0x63fc <handleSoftAcceleration+0x29c>
    63fa:	3a cf       	rjmp	.-396    	; 0x6270 <handleSoftAcceleration+0x110>
    63fc:	dd 20       	and	r13, r13
    63fe:	09 f0       	breq	.+2      	; 0x6402 <handleSoftAcceleration+0x2a2>
    6400:	37 cf       	rjmp	.-402    	; 0x6270 <handleSoftAcceleration+0x110>
    6402:	bb 20       	and	r11, r11
    6404:	09 f0       	breq	.+2      	; 0x6408 <handleSoftAcceleration+0x2a8>
    6406:	34 cf       	rjmp	.-408    	; 0x6270 <handleSoftAcceleration+0x110>
    6408:	61 e0       	ldi	r22, 0x01	; 1
    640a:	6f 15       	cp	r22, r15
    640c:	08 f4       	brcc	.+2      	; 0x6410 <handleSoftAcceleration+0x2b0>
    640e:	30 cf       	rjmp	.-416    	; 0x6270 <handleSoftAcceleration+0x110>
    6410:	f6 16       	cp	r15, r22
    6412:	09 f0       	breq	.+2      	; 0x6416 <handleSoftAcceleration+0x2b6>
    6414:	b2 ce       	rjmp	.-668    	; 0x617a <handleSoftAcceleration+0x1a>
    6416:	7f e8       	ldi	r23, 0x8F	; 143
    6418:	79 15       	cp	r23, r9
    641a:	08 f0       	brcs	.+2      	; 0x641e <handleSoftAcceleration+0x2be>
    641c:	ae ce       	rjmp	.-676    	; 0x617a <handleSoftAcceleration+0x1a>
    641e:	28 cf       	rjmp	.-432    	; 0x6270 <handleSoftAcceleration+0x110>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    6420:	80 91 f5 02 	lds	r24, 0x02F5
    6424:	90 91 f6 02 	lds	r25, 0x02F6
    6428:	90 93 fa 02 	sts	0x02FA, r25
    642c:	80 93 f9 02 	sts	0x02F9, r24
				pwm_intermediate_left_desired = pwm_left_desired;
    6430:	80 91 f7 02 	lds	r24, 0x02F7
    6434:	90 91 f8 02 	lds	r25, 0x02F8
    6438:	90 93 fc 02 	sts	0x02FC, r25
    643c:	80 93 fb 02 	sts	0x02FB, r24
    6440:	9c ce       	rjmp	.-712    	; 0x617a <handleSoftAcceleration+0x1a>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    6442:	40 91 f9 02 	lds	r20, 0x02F9
    6446:	50 91 fa 02 	lds	r21, 0x02FA
    644a:	42 9f       	mul	r20, r18
    644c:	c0 01       	movw	r24, r0
    644e:	43 9f       	mul	r20, r19
    6450:	90 0d       	add	r25, r0
    6452:	52 9f       	mul	r21, r18
    6454:	90 0d       	add	r25, r0
    6456:	11 24       	eor	r1, r1
    6458:	97 fd       	sbrc	r25, 7
    645a:	2b cf       	rjmp	.-426    	; 0x62b2 <handleSoftAcceleration+0x152>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    645c:	42 17       	cp	r20, r18
    645e:	53 07       	cpc	r21, r19
    6460:	4c f5       	brge	.+82     	; 0x64b4 <handleSoftAcceleration+0x354>
					pwm_intermediate_right_desired += speedStep;
    6462:	80 91 13 02 	lds	r24, 0x0213
    6466:	ba 01       	movw	r22, r20
    6468:	68 0f       	add	r22, r24
    646a:	71 1d       	adc	r23, r1
    646c:	70 93 fa 02 	sts	0x02FA, r23
    6470:	60 93 f9 02 	sts	0x02F9, r22
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    6474:	26 17       	cp	r18, r22
    6476:	37 07       	cpc	r19, r23
    6478:	0c f0       	brlt	.+2      	; 0x647c <handleSoftAcceleration+0x31c>
    647a:	1f cf       	rjmp	.-450    	; 0x62ba <handleSoftAcceleration+0x15a>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    647c:	30 93 fa 02 	sts	0x02FA, r19
    6480:	20 93 f9 02 	sts	0x02F9, r18
    6484:	1a cf       	rjmp	.-460    	; 0x62ba <handleSoftAcceleration+0x15a>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    6486:	10 92 fc 02 	sts	0x02FC, r1
    648a:	10 92 fb 02 	sts	0x02FB, r1
    648e:	75 ce       	rjmp	.-790    	; 0x617a <handleSoftAcceleration+0x1a>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    6490:	24 17       	cp	r18, r20
    6492:	35 07       	cpc	r19, r21
    6494:	0c f0       	brlt	.+2      	; 0x6498 <handleSoftAcceleration+0x338>
    6496:	71 ce       	rjmp	.-798    	; 0x617a <handleSoftAcceleration+0x1a>
					pwm_intermediate_left_desired -= speedStep;
    6498:	80 91 13 02 	lds	r24, 0x0213
    649c:	ba 01       	movw	r22, r20
    649e:	68 1b       	sub	r22, r24
    64a0:	71 09       	sbc	r23, r1
    64a2:	70 93 fc 02 	sts	0x02FC, r23
    64a6:	60 93 fb 02 	sts	0x02FB, r22
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    64aa:	62 17       	cp	r22, r18
    64ac:	73 07       	cpc	r23, r19
    64ae:	0c f0       	brlt	.+2      	; 0x64b2 <handleSoftAcceleration+0x352>
    64b0:	64 ce       	rjmp	.-824    	; 0x617a <handleSoftAcceleration+0x1a>
    64b2:	29 cf       	rjmp	.-430    	; 0x6306 <handleSoftAcceleration+0x1a6>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    64b4:	24 17       	cp	r18, r20
    64b6:	35 07       	cpc	r19, r21
    64b8:	0c f0       	brlt	.+2      	; 0x64bc <handleSoftAcceleration+0x35c>
    64ba:	ff ce       	rjmp	.-514    	; 0x62ba <handleSoftAcceleration+0x15a>
					pwm_intermediate_right_desired -= speedStep;
    64bc:	80 91 13 02 	lds	r24, 0x0213
    64c0:	ba 01       	movw	r22, r20
    64c2:	68 1b       	sub	r22, r24
    64c4:	71 09       	sbc	r23, r1
    64c6:	70 93 fa 02 	sts	0x02FA, r23
    64ca:	60 93 f9 02 	sts	0x02F9, r22
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    64ce:	62 17       	cp	r22, r18
    64d0:	73 07       	cpc	r23, r19
    64d2:	0c f0       	brlt	.+2      	; 0x64d6 <handleSoftAcceleration+0x376>
    64d4:	f2 ce       	rjmp	.-540    	; 0x62ba <handleSoftAcceleration+0x15a>
    64d6:	d2 cf       	rjmp	.-92     	; 0x647c <handleSoftAcceleration+0x31c>

000064d8 <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    64d8:	2f 92       	push	r2
    64da:	3f 92       	push	r3
    64dc:	4f 92       	push	r4
    64de:	5f 92       	push	r5
    64e0:	6f 92       	push	r6
    64e2:	7f 92       	push	r7
    64e4:	8f 92       	push	r8
    64e6:	9f 92       	push	r9
    64e8:	af 92       	push	r10
    64ea:	bf 92       	push	r11
    64ec:	cf 92       	push	r12
    64ee:	df 92       	push	r13
    64f0:	ef 92       	push	r14
    64f2:	ff 92       	push	r15
    64f4:	0f 93       	push	r16
    64f6:	1f 93       	push	r17
    64f8:	cf 93       	push	r28
    64fa:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    64fc:	74 e1       	ldi	r23, 0x14	; 20
    64fe:	87 2e       	mov	r8, r23
    6500:	91 2c       	mov	r9, r1
    6502:	90 92 e3 08 	sts	0x08E3, r9
    6506:	80 92 e2 08 	sts	0x08E2, r8
    calibration[1][0] = 40;
    650a:	88 e2       	ldi	r24, 0x28	; 40
    650c:	90 e0       	ldi	r25, 0x00	; 0
    650e:	90 93 f3 08 	sts	0x08F3, r25
    6512:	80 93 f2 08 	sts	0x08F2, r24
    calibration[2][0] = 59;
    6516:	8b e3       	ldi	r24, 0x3B	; 59
    6518:	90 e0       	ldi	r25, 0x00	; 0
    651a:	90 93 03 09 	sts	0x0903, r25
    651e:	80 93 02 09 	sts	0x0902, r24
    calibration[3][0] = 79;
    6522:	8f e4       	ldi	r24, 0x4F	; 79
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	90 93 13 09 	sts	0x0913, r25
    652a:	80 93 12 09 	sts	0x0912, r24
    calibration[4][0] = 100;
    652e:	84 e6       	ldi	r24, 0x64	; 100
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	90 93 23 09 	sts	0x0923, r25
    6536:	80 93 22 09 	sts	0x0922, r24
    calibration[5][0] = 120;
    653a:	c8 e7       	ldi	r28, 0x78	; 120
    653c:	d0 e0       	ldi	r29, 0x00	; 0
    653e:	d0 93 33 09 	sts	0x0933, r29
    6542:	c0 93 32 09 	sts	0x0932, r28
    calibration[6][0] = 139;
    6546:	6b e8       	ldi	r22, 0x8B	; 139
    6548:	e6 2e       	mov	r14, r22
    654a:	f1 2c       	mov	r15, r1
    654c:	f0 92 43 09 	sts	0x0943, r15
    6550:	e0 92 42 09 	sts	0x0942, r14
    calibration[7][0] = 159;
    6554:	8f e9       	ldi	r24, 0x9F	; 159
    6556:	90 e0       	ldi	r25, 0x00	; 0
    6558:	90 93 53 09 	sts	0x0953, r25
    655c:	80 93 52 09 	sts	0x0952, r24
	calibration[8][0] = 180;
    6560:	54 eb       	ldi	r21, 0xB4	; 180
    6562:	a5 2e       	mov	r10, r21
    6564:	b1 2c       	mov	r11, r1
    6566:	b0 92 63 09 	sts	0x0963, r11
    656a:	a0 92 62 09 	sts	0x0962, r10
    calibration[0][1] = 19;    	// real speed measured in mm/s
    656e:	23 e1       	ldi	r18, 0x13	; 19
    6570:	30 e0       	ldi	r19, 0x00	; 0
    6572:	30 93 e5 08 	sts	0x08E5, r19
    6576:	20 93 e4 08 	sts	0x08E4, r18
    calibration[1][1] = 47;
    657a:	8f e2       	ldi	r24, 0x2F	; 47
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	90 93 f5 08 	sts	0x08F5, r25
    6582:	80 93 f4 08 	sts	0x08F4, r24
    calibration[2][1] = 72;
    6586:	88 e4       	ldi	r24, 0x48	; 72
    6588:	90 e0       	ldi	r25, 0x00	; 0
    658a:	90 93 05 09 	sts	0x0905, r25
    658e:	80 93 04 09 	sts	0x0904, r24
    calibration[3][1] = 91;
    6592:	8b e5       	ldi	r24, 0x5B	; 91
    6594:	90 e0       	ldi	r25, 0x00	; 0
    6596:	90 93 15 09 	sts	0x0915, r25
    659a:	80 93 14 09 	sts	0x0914, r24
    calibration[4][1] = 109;
    659e:	8d e6       	ldi	r24, 0x6D	; 109
    65a0:	90 e0       	ldi	r25, 0x00	; 0
    65a2:	90 93 25 09 	sts	0x0925, r25
    65a6:	80 93 24 09 	sts	0x0924, r24
    calibration[5][1] = 125;
    65aa:	4d e7       	ldi	r20, 0x7D	; 125
    65ac:	c4 2e       	mov	r12, r20
    65ae:	d1 2c       	mov	r13, r1
    65b0:	d0 92 35 09 	sts	0x0935, r13
    65b4:	c0 92 34 09 	sts	0x0934, r12
    calibration[6][1] = 143;
    65b8:	8f e8       	ldi	r24, 0x8F	; 143
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	90 93 45 09 	sts	0x0945, r25
    65c0:	80 93 44 09 	sts	0x0944, r24
    calibration[7][1] = 160;
    65c4:	40 ea       	ldi	r20, 0xA0	; 160
    65c6:	50 e0       	ldi	r21, 0x00	; 0
    65c8:	50 93 55 09 	sts	0x0955, r21
    65cc:	40 93 54 09 	sts	0x0954, r20
	calibration[8][1] = 174;
    65d0:	8e ea       	ldi	r24, 0xAE	; 174
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	90 93 65 09 	sts	0x0965, r25
    65d8:	80 93 64 09 	sts	0x0964, r24
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    65dc:	30 93 e7 08 	sts	0x08E7, r19
    65e0:	20 93 e6 08 	sts	0x08E6, r18
    calibration[1][2] = 39;
    65e4:	67 e2       	ldi	r22, 0x27	; 39
    65e6:	70 e0       	ldi	r23, 0x00	; 0
    65e8:	70 93 f7 08 	sts	0x08F7, r23
    65ec:	60 93 f6 08 	sts	0x08F6, r22
    calibration[2][2] = 60;
    65f0:	0c e3       	ldi	r16, 0x3C	; 60
    65f2:	10 e0       	ldi	r17, 0x00	; 0
    65f4:	10 93 07 09 	sts	0x0907, r17
    65f8:	00 93 06 09 	sts	0x0906, r16
    calibration[3][2] = 80;
    65fc:	20 e5       	ldi	r18, 0x50	; 80
    65fe:	22 2e       	mov	r2, r18
    6600:	31 2c       	mov	r3, r1
    6602:	30 92 17 09 	sts	0x0917, r3
    6606:	20 92 16 09 	sts	0x0916, r2
    calibration[4][2] = 99;
    660a:	a3 e6       	ldi	r26, 0x63	; 99
    660c:	b0 e0       	ldi	r27, 0x00	; 0
    660e:	b0 93 27 09 	sts	0x0927, r27
    6612:	a0 93 26 09 	sts	0x0926, r26
    calibration[5][2] = 119;
    6616:	27 e7       	ldi	r18, 0x77	; 119
    6618:	30 e0       	ldi	r19, 0x00	; 0
    661a:	30 93 37 09 	sts	0x0937, r19
    661e:	20 93 36 09 	sts	0x0936, r18
    calibration[6][2] = 140;
    6622:	ec e8       	ldi	r30, 0x8C	; 140
    6624:	f0 e0       	ldi	r31, 0x00	; 0
    6626:	f0 93 47 09 	sts	0x0947, r31
    662a:	e0 93 46 09 	sts	0x0946, r30
    calibration[7][2] = 160;
    662e:	50 93 57 09 	sts	0x0957, r21
    6632:	40 93 56 09 	sts	0x0956, r20
	calibration[8][2] = 180;
    6636:	b0 92 67 09 	sts	0x0967, r11
    663a:	a0 92 66 09 	sts	0x0966, r10
    calibration[0][3] = 23;    	// real speed measured in mm/s
    663e:	87 e1       	ldi	r24, 0x17	; 23
    6640:	90 e0       	ldi	r25, 0x00	; 0
    6642:	90 93 e9 08 	sts	0x08E9, r25
    6646:	80 93 e8 08 	sts	0x08E8, r24
    calibration[1][3] = 46;
    664a:	9e e2       	ldi	r25, 0x2E	; 46
    664c:	49 2e       	mov	r4, r25
    664e:	51 2c       	mov	r5, r1
    6650:	50 92 f9 08 	sts	0x08F9, r5
    6654:	40 92 f8 08 	sts	0x08F8, r4
    calibration[2][3] = 64;
    6658:	80 e4       	ldi	r24, 0x40	; 64
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	90 93 09 09 	sts	0x0909, r25
    6660:	80 93 08 09 	sts	0x0908, r24
    calibration[3][3] = 81;
    6664:	81 e5       	ldi	r24, 0x51	; 81
    6666:	68 2e       	mov	r6, r24
    6668:	71 2c       	mov	r7, r1
    666a:	70 92 19 09 	sts	0x0919, r7
    666e:	60 92 18 09 	sts	0x0918, r6
    calibration[4][3] = 97;
    6672:	81 e6       	ldi	r24, 0x61	; 97
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	90 93 29 09 	sts	0x0929, r25
    667a:	80 93 28 09 	sts	0x0928, r24
    calibration[5][3] = 112;
    667e:	80 e7       	ldi	r24, 0x70	; 112
    6680:	90 e0       	ldi	r25, 0x00	; 0
    6682:	90 93 39 09 	sts	0x0939, r25
    6686:	80 93 38 09 	sts	0x0938, r24
    calibration[6][3] = 125;
    668a:	d0 92 49 09 	sts	0x0949, r13
    668e:	c0 92 48 09 	sts	0x0948, r12
    calibration[7][3] = 139;
    6692:	f0 92 59 09 	sts	0x0959, r15
    6696:	e0 92 58 09 	sts	0x0958, r14
	calibration[8][3] = 152;
    669a:	88 e9       	ldi	r24, 0x98	; 152
    669c:	90 e0       	ldi	r25, 0x00	; 0
    669e:	90 93 69 09 	sts	0x0969, r25
    66a2:	80 93 68 09 	sts	0x0968, r24
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    66a6:	90 92 eb 08 	sts	0x08EB, r9
    66aa:	80 92 ea 08 	sts	0x08EA, r8
    calibration[1][4] = 39;
    66ae:	70 93 fb 08 	sts	0x08FB, r23
    66b2:	60 93 fa 08 	sts	0x08FA, r22
    calibration[2][4] = 60;
    66b6:	10 93 0b 09 	sts	0x090B, r17
    66ba:	00 93 0a 09 	sts	0x090A, r16
    calibration[3][4] = 79;
    66be:	8f e4       	ldi	r24, 0x4F	; 79
    66c0:	90 e0       	ldi	r25, 0x00	; 0
    66c2:	90 93 1b 09 	sts	0x091B, r25
    66c6:	80 93 1a 09 	sts	0x091A, r24
    calibration[4][4] = 99;
    66ca:	b0 93 2b 09 	sts	0x092B, r27
    66ce:	a0 93 2a 09 	sts	0x092A, r26
    calibration[5][4] = 120;
    66d2:	d0 93 3b 09 	sts	0x093B, r29
    66d6:	c0 93 3a 09 	sts	0x093A, r28
    calibration[6][4] = 140;
    66da:	f0 93 4b 09 	sts	0x094B, r31
    66de:	e0 93 4a 09 	sts	0x094A, r30
    calibration[7][4] = 160;
    66e2:	50 93 5b 09 	sts	0x095B, r21
    66e6:	40 93 5a 09 	sts	0x095A, r20
	calibration[8][4] = 179;
    66ea:	83 eb       	ldi	r24, 0xB3	; 179
    66ec:	90 e0       	ldi	r25, 0x00	; 0
    66ee:	90 93 6b 09 	sts	0x096B, r25
    66f2:	80 93 6a 09 	sts	0x096A, r24
    calibration[0][5] = 18;    	// real speed measured in mm/s
    66f6:	82 e1       	ldi	r24, 0x12	; 18
    66f8:	90 e0       	ldi	r25, 0x00	; 0
    66fa:	90 93 ed 08 	sts	0x08ED, r25
    66fe:	80 93 ec 08 	sts	0x08EC, r24
    calibration[1][5] = 45;
    6702:	8d e2       	ldi	r24, 0x2D	; 45
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	90 93 fd 08 	sts	0x08FD, r25
    670a:	80 93 fc 08 	sts	0x08FC, r24
    calibration[2][5] = 68;
    670e:	84 e4       	ldi	r24, 0x44	; 68
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	90 93 0d 09 	sts	0x090D, r25
    6716:	80 93 0c 09 	sts	0x090C, r24
    calibration[3][5] = 87;
    671a:	87 e5       	ldi	r24, 0x57	; 87
    671c:	90 e0       	ldi	r25, 0x00	; 0
    671e:	90 93 1d 09 	sts	0x091D, r25
    6722:	80 93 1c 09 	sts	0x091C, r24
    calibration[4][5] = 105;
    6726:	89 e6       	ldi	r24, 0x69	; 105
    6728:	90 e0       	ldi	r25, 0x00	; 0
    672a:	90 93 2d 09 	sts	0x092D, r25
    672e:	80 93 2c 09 	sts	0x092C, r24
    calibration[5][5] = 119;
    6732:	30 93 3d 09 	sts	0x093D, r19
    6736:	20 93 3c 09 	sts	0x093C, r18
    calibration[6][5] = 137;
    673a:	89 e8       	ldi	r24, 0x89	; 137
    673c:	90 e0       	ldi	r25, 0x00	; 0
    673e:	90 93 4d 09 	sts	0x094D, r25
    6742:	80 93 4c 09 	sts	0x094C, r24
    calibration[7][5] = 151;
    6746:	87 e9       	ldi	r24, 0x97	; 151
    6748:	90 e0       	ldi	r25, 0x00	; 0
    674a:	90 93 5d 09 	sts	0x095D, r25
    674e:	80 93 5c 09 	sts	0x095C, r24
	calibration[8][5] = 168;
    6752:	88 ea       	ldi	r24, 0xA8	; 168
    6754:	90 e0       	ldi	r25, 0x00	; 0
    6756:	90 93 6d 09 	sts	0x096D, r25
    675a:	80 93 6c 09 	sts	0x096C, r24
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    675e:	90 92 ef 08 	sts	0x08EF, r9
    6762:	80 92 ee 08 	sts	0x08EE, r8
    calibration[1][6] = 39;
    6766:	70 93 ff 08 	sts	0x08FF, r23
    676a:	60 93 fe 08 	sts	0x08FE, r22
    calibration[2][6] = 59;
    676e:	8b e3       	ldi	r24, 0x3B	; 59
    6770:	90 e0       	ldi	r25, 0x00	; 0
    6772:	90 93 0f 09 	sts	0x090F, r25
    6776:	80 93 0e 09 	sts	0x090E, r24
    calibration[3][6] = 80;
    677a:	30 92 1f 09 	sts	0x091F, r3
    677e:	20 92 1e 09 	sts	0x091E, r2
    calibration[4][6] = 100;
    6782:	84 e6       	ldi	r24, 0x64	; 100
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	90 93 2f 09 	sts	0x092F, r25
    678a:	80 93 2e 09 	sts	0x092E, r24
    calibration[5][6] = 119;
    678e:	30 93 3f 09 	sts	0x093F, r19
    6792:	20 93 3e 09 	sts	0x093E, r18
    calibration[6][6] = 139;
    6796:	f0 92 4f 09 	sts	0x094F, r15
    679a:	e0 92 4e 09 	sts	0x094E, r14
    calibration[7][6] = 160;
    679e:	50 93 5f 09 	sts	0x095F, r21
    67a2:	40 93 5e 09 	sts	0x095E, r20
	calibration[8][6] = 180;
    67a6:	b0 92 6f 09 	sts	0x096F, r11
    67aa:	a0 92 6e 09 	sts	0x096E, r10
    calibration[0][7] = 22;    	// real speed measured in mm/s
    67ae:	86 e1       	ldi	r24, 0x16	; 22
    67b0:	90 e0       	ldi	r25, 0x00	; 0
    67b2:	90 93 f1 08 	sts	0x08F1, r25
    67b6:	80 93 f0 08 	sts	0x08F0, r24
    calibration[1][7] = 46;
    67ba:	50 92 01 09 	sts	0x0901, r5
    67be:	40 92 00 09 	sts	0x0900, r4
    calibration[2][7] = 65;
    67c2:	81 e4       	ldi	r24, 0x41	; 65
    67c4:	90 e0       	ldi	r25, 0x00	; 0
    67c6:	90 93 11 09 	sts	0x0911, r25
    67ca:	80 93 10 09 	sts	0x0910, r24
    calibration[3][7] = 81;
    67ce:	70 92 21 09 	sts	0x0921, r7
    67d2:	60 92 20 09 	sts	0x0920, r6
    calibration[4][7] = 96;
    67d6:	80 e6       	ldi	r24, 0x60	; 96
    67d8:	90 e0       	ldi	r25, 0x00	; 0
    67da:	90 93 31 09 	sts	0x0931, r25
    67de:	80 93 30 09 	sts	0x0930, r24
    calibration[5][7] = 111;
    67e2:	8f e6       	ldi	r24, 0x6F	; 111
    67e4:	90 e0       	ldi	r25, 0x00	; 0
    67e6:	90 93 41 09 	sts	0x0941, r25
    67ea:	80 93 40 09 	sts	0x0940, r24
    calibration[6][7] = 125;
    67ee:	d0 92 51 09 	sts	0x0951, r13
    67f2:	c0 92 50 09 	sts	0x0950, r12
    calibration[7][7] = 139;
    67f6:	f0 92 61 09 	sts	0x0961, r15
    67fa:	e0 92 60 09 	sts	0x0960, r14
	calibration[8][7] = 153;
    67fe:	89 e9       	ldi	r24, 0x99	; 153
    6800:	90 e0       	ldi	r25, 0x00	; 0
    6802:	90 93 71 09 	sts	0x0971, r25
    6806:	80 93 70 09 	sts	0x0970, r24

    writeCalibrationToFlash();
    680a:	0e 94 0f 4c 	call	0x981e	; 0x981e <writeCalibrationToFlash>
}
    680e:	df 91       	pop	r29
    6810:	cf 91       	pop	r28
    6812:	1f 91       	pop	r17
    6814:	0f 91       	pop	r16
    6816:	ff 90       	pop	r15
    6818:	ef 90       	pop	r14
    681a:	df 90       	pop	r13
    681c:	cf 90       	pop	r12
    681e:	bf 90       	pop	r11
    6820:	af 90       	pop	r10
    6822:	9f 90       	pop	r9
    6824:	8f 90       	pop	r8
    6826:	7f 90       	pop	r7
    6828:	6f 90       	pop	r6
    682a:	5f 90       	pop	r5
    682c:	4f 90       	pop	r4
    682e:	3f 90       	pop	r3
    6830:	2f 90       	pop	r2
    6832:	08 95       	ret

00006834 <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    6834:	80 91 61 0b 	lds	r24, 0x0B61
    6838:	84 30       	cpi	r24, 0x04	; 4
    683a:	09 f4       	brne	.+2      	; 0x683e <handleCalibration+0xa>
    683c:	cf c1       	rjmp	.+926    	; 0x6bdc <handleCalibration+0x3a8>
    683e:	85 30       	cpi	r24, 0x05	; 5
    6840:	80 f0       	brcs	.+32     	; 0x6862 <handleCalibration+0x2e>
    6842:	86 30       	cpi	r24, 0x06	; 6
    6844:	09 f4       	brne	.+2      	; 0x6848 <handleCalibration+0x14>
    6846:	60 c2       	rjmp	.+1216   	; 0x6d08 <handleCalibration+0x4d4>
    6848:	86 30       	cpi	r24, 0x06	; 6
    684a:	b0 f5       	brcc	.+108    	; 0x68b8 <handleCalibration+0x84>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
    684c:	80 91 bb 08 	lds	r24, 0x08BB
    6850:	8f 5f       	subi	r24, 0xFF	; 255
    6852:	80 93 bb 08 	sts	0x08BB, r24
            if(calibVelIndex == 10) {
    6856:	8a 30       	cpi	r24, 0x0A	; 10
    6858:	09 f4       	brne	.+2      	; 0x685c <handleCalibration+0x28>
    685a:	b7 c2       	rjmp	.+1390   	; 0x6dca <handleCalibration+0x596>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = CALIBRATION_STATE_SET_SPEED;
    685c:	10 92 61 0b 	sts	0x0B61, r1
    6860:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    6862:	81 30       	cpi	r24, 0x01	; 1
    6864:	09 f4       	brne	.+2      	; 0x6868 <handleCalibration+0x34>
    6866:	6b c1       	rjmp	.+726    	; 0x6b3e <handleCalibration+0x30a>
    6868:	81 30       	cpi	r24, 0x01	; 1
    686a:	08 f0       	brcs	.+2      	; 0x686e <handleCalibration+0x3a>
    686c:	73 c0       	rjmp	.+230    	; 0x6954 <handleCalibration+0x120>
			}
			break;


    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    686e:	80 91 53 05 	lds	r24, 0x0553
    6872:	88 23       	and	r24, r24
    6874:	09 f0       	breq	.+2      	; 0x6878 <handleCalibration+0x44>
    6876:	56 c2       	rjmp	.+1196   	; 0x6d24 <handleCalibration+0x4f0>
				pwm_intermediate_right_desired = 0;
    6878:	10 92 fa 02 	sts	0x02FA, r1
    687c:	10 92 f9 02 	sts	0x02F9, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    6880:	80 91 bb 08 	lds	r24, 0x08BB
    6884:	25 e0       	ldi	r18, 0x05	; 5
    6886:	82 9f       	mul	r24, r18
    6888:	c0 01       	movw	r24, r0
    688a:	11 24       	eor	r1, r1
    688c:	88 0f       	add	r24, r24
    688e:	99 1f       	adc	r25, r25
    6890:	88 0f       	add	r24, r24
    6892:	99 1f       	adc	r25, r25
    6894:	90 93 fc 02 	sts	0x02FC, r25
    6898:	80 93 fb 02 	sts	0x02FB, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = CALIBRATION_STATE_START_MEASURE;
    689c:	81 e0       	ldi	r24, 0x01	; 1
    689e:	80 93 61 0b 	sts	0x0B61, r24
            timeoutOdometry = getTime100MicroSec();
    68a2:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    68a6:	60 93 31 0b 	sts	0x0B31, r22
    68aa:	70 93 32 0b 	sts	0x0B32, r23
    68ae:	80 93 33 0b 	sts	0x0B33, r24
    68b2:	90 93 34 0b 	sts	0x0B34, r25
    68b6:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    68b8:	87 30       	cpi	r24, 0x07	; 7
    68ba:	09 f4       	brne	.+2      	; 0x68be <handleCalibration+0x8a>
    68bc:	f8 c1       	rjmp	.+1008   	; 0x6cae <handleCalibration+0x47a>
    68be:	88 30       	cpi	r24, 0x08	; 8
    68c0:	79 f6       	brne	.-98     	; 0x6860 <handleCalibration+0x2c>
	            timeoutOdometry = getTime100MicroSec();
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved.
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    68c2:	80 91 53 05 	lds	r24, 0x0553
    68c6:	88 23       	and	r24, r24
    68c8:	09 f4       	brne	.+2      	; 0x68cc <handleCalibration+0x98>
    68ca:	d9 c0       	rjmp	.+434    	; 0x6a7e <handleCalibration+0x24a>
    68cc:	82 30       	cpi	r24, 0x02	; 2
    68ce:	09 f4       	brne	.+2      	; 0x68d2 <handleCalibration+0x9e>
    68d0:	d6 c0       	rjmp	.+428    	; 0x6a7e <handleCalibration+0x24a>
				}
				if(proximityResult[8] > maxGround) {
					maxGround = proximityResult[8];
				}
			} else {
				if(proximityResult[11] < minGround) {
    68d2:	20 91 6b 02 	lds	r18, 0x026B
    68d6:	30 91 6c 02 	lds	r19, 0x026C
    68da:	80 91 cc 04 	lds	r24, 0x04CC
    68de:	90 91 cd 04 	lds	r25, 0x04CD
    68e2:	28 17       	cp	r18, r24
    68e4:	39 07       	cpc	r19, r25
    68e6:	24 f4       	brge	.+8      	; 0x68f0 <handleCalibration+0xbc>
					minGround = proximityResult[11];
    68e8:	30 93 cd 04 	sts	0x04CD, r19
    68ec:	20 93 cc 04 	sts	0x04CC, r18
				}
				if(proximityResult[11] > maxGround) {
    68f0:	80 91 ce 04 	lds	r24, 0x04CE
    68f4:	90 91 cf 04 	lds	r25, 0x04CF
    68f8:	82 17       	cp	r24, r18
    68fa:	93 07       	cpc	r25, r19
    68fc:	24 f4       	brge	.+8      	; 0x6906 <handleCalibration+0xd2>
					maxGround = proximityResult[11];
    68fe:	30 93 cf 04 	sts	0x04CF, r19
    6902:	20 93 ce 04 	sts	0x04CE, r18
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_5_SEC) {    // the robot seems to be still, go to next velcoity
    6906:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    690a:	20 91 31 0b 	lds	r18, 0x0B31
    690e:	30 91 32 0b 	lds	r19, 0x0B32
    6912:	40 91 33 0b 	lds	r20, 0x0B33
    6916:	50 91 34 0b 	lds	r21, 0x0B34
    691a:	62 1b       	sub	r22, r18
    691c:	73 0b       	sbc	r23, r19
    691e:	84 0b       	sbc	r24, r20
    6920:	95 0b       	sbc	r25, r21
    6922:	6e 5c       	subi	r22, 0xCE	; 206
    6924:	7b 4b       	sbci	r23, 0xBB	; 187
    6926:	80 40       	sbci	r24, 0x00	; 0
    6928:	90 40       	sbci	r25, 0x00	; 0
    692a:	08 f4       	brcc	.+2      	; 0x692e <handleCalibration+0xfa>
    692c:	99 cf       	rjmp	.-206    	; 0x6860 <handleCalibration+0x2c>
				calibrationThr = (minGround + maxGround)>>1;	// Take the average of the 2 as the reference threshold value.
    692e:	80 91 ce 04 	lds	r24, 0x04CE
    6932:	90 91 cf 04 	lds	r25, 0x04CF
    6936:	20 91 cc 04 	lds	r18, 0x04CC
    693a:	30 91 cd 04 	lds	r19, 0x04CD
    693e:	82 0f       	add	r24, r18
    6940:	93 1f       	adc	r25, r19
    6942:	95 95       	asr	r25
    6944:	87 95       	ror	r24
    6946:	90 93 d1 04 	sts	0x04D1, r25
    694a:	80 93 d0 04 	sts	0x04D0, r24
				//calibrationThrLow = calibrationThr - ((maxGround-minGround)>>2);	// Use an histeresys between max and min (not needed...).
				//calibrationThrHigh = calibrationThr + ((maxGround-minGround)>>2);
                calibState = CALIBRATION_STATE_SET_SPEED;
    694e:	10 92 61 0b 	sts	0x0B61, r1
    6952:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    6954:	82 30       	cpi	r24, 0x02	; 2
    6956:	09 f4       	brne	.+2      	; 0x695a <handleCalibration+0x126>
    6958:	7d c1       	rjmp	.+762    	; 0x6c54 <handleCalibration+0x420>
    695a:	83 30       	cpi	r24, 0x03	; 3
    695c:	09 f0       	breq	.+2      	; 0x6960 <handleCalibration+0x12c>
    695e:	80 cf       	rjmp	.-256    	; 0x6860 <handleCalibration+0x2c>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    6960:	80 91 53 05 	lds	r24, 0x0553
    6964:	88 23       	and	r24, r24
    6966:	09 f4       	brne	.+2      	; 0x696a <handleCalibration+0x136>
    6968:	97 c0       	rjmp	.+302    	; 0x6a98 <handleCalibration+0x264>
    696a:	82 30       	cpi	r24, 0x02	; 2
    696c:	09 f4       	brne	.+2      	; 0x6970 <handleCalibration+0x13c>
    696e:	94 c0       	rjmp	.+296    	; 0x6a98 <handleCalibration+0x264>
                    updateOdomData();
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    6970:	20 91 6b 02 	lds	r18, 0x026B
    6974:	30 91 6c 02 	lds	r19, 0x026C
    6978:	80 91 d0 04 	lds	r24, 0x04D0
    697c:	90 91 d1 04 	lds	r25, 0x04D1
    6980:	28 17       	cp	r18, r24
    6982:	39 07       	cpc	r19, r25
    6984:	0c f0       	brlt	.+2      	; 0x6988 <handleCalibration+0x154>
    6986:	55 c0       	rjmp	.+170    	; 0x6a32 <handleCalibration+0x1fe>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    6988:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    698c:	20 91 4c 05 	lds	r18, 0x054C
    6990:	30 91 4d 05 	lds	r19, 0x054D
    6994:	40 91 4e 05 	lds	r20, 0x054E
    6998:	50 91 4f 05 	lds	r21, 0x054F
    699c:	62 1b       	sub	r22, r18
    699e:	73 0b       	sbc	r23, r19
    69a0:	84 0b       	sbc	r24, r20
    69a2:	95 0b       	sbc	r25, r21
    69a4:	60 93 4c 05 	sts	0x054C, r22
    69a8:	70 93 4d 05 	sts	0x054D, r23
    69ac:	80 93 4e 05 	sts	0x054E, r24
    69b0:	90 93 4f 05 	sts	0x054F, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    69b4:	0e 94 83 59 	call	0xb306	; 0xb306 <__floatunsisf>
    69b8:	20 e0       	ldi	r18, 0x00	; 0
    69ba:	30 e0       	ldi	r19, 0x00	; 0
    69bc:	40 ed       	ldi	r20, 0xD0	; 208
    69be:	52 e4       	ldi	r21, 0x42	; 66
    69c0:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    69c4:	20 e0       	ldi	r18, 0x00	; 0
    69c6:	34 e2       	ldi	r19, 0x24	; 36
    69c8:	44 e7       	ldi	r20, 0x74	; 116
    69ca:	59 e4       	ldi	r21, 0x49	; 73
    69cc:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    69d0:	9b 01       	movw	r18, r22
    69d2:	ac 01       	movw	r20, r24
    69d4:	64 e1       	ldi	r22, 0x14	; 20
    69d6:	7e e2       	ldi	r23, 0x2E	; 46
    69d8:	88 e7       	ldi	r24, 0x78	; 120
    69da:	93 e4       	ldi	r25, 0x43	; 67
    69dc:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    69e0:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <__fixunssfsi>
    69e4:	70 93 77 0b 	sts	0x0B77, r23
    69e8:	60 93 76 0b 	sts	0x0B76, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    69ec:	20 91 ba 04 	lds	r18, 0x04BA
    69f0:	30 91 bb 04 	lds	r19, 0x04BB
    69f4:	40 e0       	ldi	r20, 0x00	; 0
    69f6:	50 e0       	ldi	r21, 0x00	; 0
    69f8:	60 91 b4 04 	lds	r22, 0x04B4
    69fc:	70 91 b5 04 	lds	r23, 0x04B5
    6a00:	80 91 b6 04 	lds	r24, 0x04B6
    6a04:	90 91 b7 04 	lds	r25, 0x04B7
    6a08:	0e 94 6f 5b 	call	0xb6de	; 0xb6de <__divmodsi4>
    6a0c:	30 93 bf 04 	sts	0x04BF, r19
    6a10:	20 93 be 04 	sts	0x04BE, r18
					updateOdomData();
    6a14:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <updateOdomData>
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
    6a18:	84 e0       	ldi	r24, 0x04	; 4
    6a1a:	80 93 61 0b 	sts	0x0B61, r24
                    timeoutOdometry = getTime100MicroSec();;
    6a1e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6a22:	60 93 31 0b 	sts	0x0B31, r22
    6a26:	70 93 32 0b 	sts	0x0B32, r23
    6a2a:	80 93 33 0b 	sts	0x0B33, r24
    6a2e:	90 93 34 0b 	sts	0x0B34, r25
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    6a32:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6a36:	20 91 31 0b 	lds	r18, 0x0B31
    6a3a:	30 91 32 0b 	lds	r19, 0x0B32
    6a3e:	40 91 33 0b 	lds	r20, 0x0B33
    6a42:	50 91 34 0b 	lds	r21, 0x0B34
    6a46:	62 1b       	sub	r22, r18
    6a48:	73 0b       	sbc	r23, r19
    6a4a:	84 0b       	sbc	r24, r20
    6a4c:	95 0b       	sbc	r25, r21
    6a4e:	6c 59       	subi	r22, 0x9C	; 156
    6a50:	7d 4c       	sbci	r23, 0xCD	; 205
    6a52:	88 40       	sbci	r24, 0x08	; 8
    6a54:	90 40       	sbci	r25, 0x00	; 0
    6a56:	08 f4       	brcc	.+2      	; 0x6a5a <handleCalibration+0x226>
    6a58:	03 cf       	rjmp	.-506    	; 0x6860 <handleCalibration+0x2c>
            	tempVel = 0;
    6a5a:	10 92 77 0b 	sts	0x0B77, r1
    6a5e:	10 92 76 0b 	sts	0x0B76, r1
				avgLeftSpeed = 0;
    6a62:	10 92 bd 04 	sts	0x04BD, r1
    6a66:	10 92 bc 04 	sts	0x04BC, r1
				avgRightSpeed = 0;
    6a6a:	10 92 bf 04 	sts	0x04BF, r1
    6a6e:	10 92 be 04 	sts	0x04BE, r1
                updateOdomData();
    6a72:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <updateOdomData>
                calibState = CALIBRATION_STATE_NEXT;
    6a76:	85 e0       	ldi	r24, 0x05	; 5
    6a78:	80 93 61 0b 	sts	0x0B61, r24
    6a7c:	08 95       	ret
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved.
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < minGround) {
    6a7e:	20 91 65 02 	lds	r18, 0x0265
    6a82:	30 91 66 02 	lds	r19, 0x0266
    6a86:	80 91 cc 04 	lds	r24, 0x04CC
    6a8a:	90 91 cd 04 	lds	r25, 0x04CD
    6a8e:	28 17       	cp	r18, r24
    6a90:	39 07       	cpc	r19, r25
    6a92:	0c f0       	brlt	.+2      	; 0x6a96 <handleCalibration+0x262>
    6a94:	2d cf       	rjmp	.-422    	; 0x68f0 <handleCalibration+0xbc>
    6a96:	28 cf       	rjmp	.-432    	; 0x68e8 <handleCalibration+0xb4>
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {	
    6a98:	20 91 65 02 	lds	r18, 0x0265
    6a9c:	30 91 66 02 	lds	r19, 0x0266
    6aa0:	80 91 d0 04 	lds	r24, 0x04D0
    6aa4:	90 91 d1 04 	lds	r25, 0x04D1
    6aa8:	28 17       	cp	r18, r24
    6aaa:	39 07       	cpc	r19, r25
    6aac:	0c f0       	brlt	.+2      	; 0x6ab0 <handleCalibration+0x27c>
    6aae:	c1 cf       	rjmp	.-126    	; 0x6a32 <handleCalibration+0x1fe>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    6ab0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6ab4:	20 91 4c 05 	lds	r18, 0x054C
    6ab8:	30 91 4d 05 	lds	r19, 0x054D
    6abc:	40 91 4e 05 	lds	r20, 0x054E
    6ac0:	50 91 4f 05 	lds	r21, 0x054F
    6ac4:	62 1b       	sub	r22, r18
    6ac6:	73 0b       	sbc	r23, r19
    6ac8:	84 0b       	sbc	r24, r20
    6aca:	95 0b       	sbc	r25, r21
    6acc:	60 93 4c 05 	sts	0x054C, r22
    6ad0:	70 93 4d 05 	sts	0x054D, r23
    6ad4:	80 93 4e 05 	sts	0x054E, r24
    6ad8:	90 93 4f 05 	sts	0x054F, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    6adc:	0e 94 83 59 	call	0xb306	; 0xb306 <__floatunsisf>
    6ae0:	20 e0       	ldi	r18, 0x00	; 0
    6ae2:	30 e0       	ldi	r19, 0x00	; 0
    6ae4:	40 ed       	ldi	r20, 0xD0	; 208
    6ae6:	52 e4       	ldi	r21, 0x42	; 66
    6ae8:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    6aec:	20 e0       	ldi	r18, 0x00	; 0
    6aee:	34 e2       	ldi	r19, 0x24	; 36
    6af0:	44 e7       	ldi	r20, 0x74	; 116
    6af2:	59 e4       	ldi	r21, 0x49	; 73
    6af4:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    6af8:	9b 01       	movw	r18, r22
    6afa:	ac 01       	movw	r20, r24
    6afc:	64 e1       	ldi	r22, 0x14	; 20
    6afe:	7e e2       	ldi	r23, 0x2E	; 46
    6b00:	88 e7       	ldi	r24, 0x78	; 120
    6b02:	93 e4       	ldi	r25, 0x43	; 67
    6b04:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    6b08:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <__fixunssfsi>
    6b0c:	70 93 77 0b 	sts	0x0B77, r23
    6b10:	60 93 76 0b 	sts	0x0B76, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    6b14:	20 91 b8 04 	lds	r18, 0x04B8
    6b18:	30 91 b9 04 	lds	r19, 0x04B9
    6b1c:	40 e0       	ldi	r20, 0x00	; 0
    6b1e:	50 e0       	ldi	r21, 0x00	; 0
    6b20:	60 91 b0 04 	lds	r22, 0x04B0
    6b24:	70 91 b1 04 	lds	r23, 0x04B1
    6b28:	80 91 b2 04 	lds	r24, 0x04B2
    6b2c:	90 91 b3 04 	lds	r25, 0x04B3
    6b30:	0e 94 6f 5b 	call	0xb6de	; 0xb6de <__divmodsi4>
    6b34:	30 93 bd 04 	sts	0x04BD, r19
    6b38:	20 93 bc 04 	sts	0x04BC, r18
    6b3c:	6b cf       	rjmp	.-298    	; 0x6a14 <handleCalibration+0x1e0>
            calibState = CALIBRATION_STATE_START_MEASURE;
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    6b3e:	80 91 53 05 	lds	r24, 0x0553
    6b42:	88 23       	and	r24, r24
    6b44:	91 f1       	breq	.+100    	; 0x6baa <handleCalibration+0x376>
    6b46:	82 30       	cpi	r24, 0x02	; 2
    6b48:	81 f1       	breq	.+96     	; 0x6baa <handleCalibration+0x376>
                    timeOdometry = getTime100MicroSec();;
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    6b4a:	20 91 6b 02 	lds	r18, 0x026B
    6b4e:	30 91 6c 02 	lds	r19, 0x026C
    6b52:	80 91 d0 04 	lds	r24, 0x04D0
    6b56:	90 91 d1 04 	lds	r25, 0x04D1
    6b5a:	28 17       	cp	r18, r24
    6b5c:	39 07       	cpc	r19, r25
    6b5e:	0c f0       	brlt	.+2      	; 0x6b62 <handleCalibration+0x32e>
    6b60:	68 cf       	rjmp	.-304    	; 0x6a32 <handleCalibration+0x1fe>
					rightSumCount = 0;
    6b62:	10 92 bb 04 	sts	0x04BB, r1
    6b66:	10 92 ba 04 	sts	0x04BA, r1
					rightSpeedSumOdom = 0;
    6b6a:	10 92 b4 04 	sts	0x04B4, r1
    6b6e:	10 92 b5 04 	sts	0x04B5, r1
    6b72:	10 92 b6 04 	sts	0x04B6, r1
    6b76:	10 92 b7 04 	sts	0x04B7, r1
                    timeOdometry = getTime100MicroSec();;
    6b7a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6b7e:	60 93 4c 05 	sts	0x054C, r22
    6b82:	70 93 4d 05 	sts	0x054D, r23
    6b86:	80 93 4e 05 	sts	0x054E, r24
    6b8a:	90 93 4f 05 	sts	0x054F, r25
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
    6b8e:	82 e0       	ldi	r24, 0x02	; 2
    6b90:	80 93 61 0b 	sts	0x0B61, r24
                    timeoutOdometry = getTime100MicroSec();;
    6b94:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6b98:	60 93 31 0b 	sts	0x0B31, r22
    6b9c:	70 93 32 0b 	sts	0x0B32, r23
    6ba0:	80 93 33 0b 	sts	0x0B33, r24
    6ba4:	90 93 34 0b 	sts	0x0B34, r25
    6ba8:	44 cf       	rjmp	.-376    	; 0x6a32 <handleCalibration+0x1fe>
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {				
    6baa:	20 91 65 02 	lds	r18, 0x0265
    6bae:	30 91 66 02 	lds	r19, 0x0266
    6bb2:	80 91 d0 04 	lds	r24, 0x04D0
    6bb6:	90 91 d1 04 	lds	r25, 0x04D1
    6bba:	28 17       	cp	r18, r24
    6bbc:	39 07       	cpc	r19, r25
    6bbe:	0c f0       	brlt	.+2      	; 0x6bc2 <handleCalibration+0x38e>
    6bc0:	38 cf       	rjmp	.-400    	; 0x6a32 <handleCalibration+0x1fe>
                	leftSumCount = 0;
    6bc2:	10 92 b9 04 	sts	0x04B9, r1
    6bc6:	10 92 b8 04 	sts	0x04B8, r1
                    leftSpeedSumOdom = 0;
    6bca:	10 92 b0 04 	sts	0x04B0, r1
    6bce:	10 92 b1 04 	sts	0x04B1, r1
    6bd2:	10 92 b2 04 	sts	0x04B2, r1
    6bd6:	10 92 b3 04 	sts	0x04B3, r1
    6bda:	cf cf       	rjmp	.-98     	; 0x6b7a <handleCalibration+0x346>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    6bdc:	80 91 53 05 	lds	r24, 0x0553
    6be0:	88 23       	and	r24, r24
    6be2:	61 f1       	breq	.+88     	; 0x6c3c <handleCalibration+0x408>
    6be4:	82 30       	cpi	r24, 0x02	; 2
    6be6:	51 f1       	breq	.+84     	; 0x6c3c <handleCalibration+0x408>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_NEXT;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    6be8:	20 91 6b 02 	lds	r18, 0x026B
    6bec:	30 91 6c 02 	lds	r19, 0x026C
    6bf0:	80 91 d0 04 	lds	r24, 0x04D0
    6bf4:	90 91 d1 04 	lds	r25, 0x04D1
    6bf8:	82 17       	cp	r24, r18
    6bfa:	93 07       	cpc	r25, r19
    6bfc:	1c f4       	brge	.+6      	; 0x6c04 <handleCalibration+0x3d0>
					calibState = CALIBRATION_STATE_NEXT;
    6bfe:	85 e0       	ldi	r24, 0x05	; 5
    6c00:	80 93 61 0b 	sts	0x0B61, r24
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    6c04:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6c08:	20 91 31 0b 	lds	r18, 0x0B31
    6c0c:	30 91 32 0b 	lds	r19, 0x0B32
    6c10:	40 91 33 0b 	lds	r20, 0x0B33
    6c14:	50 91 34 0b 	lds	r21, 0x0B34
    6c18:	62 1b       	sub	r22, r18
    6c1a:	73 0b       	sbc	r23, r19
    6c1c:	84 0b       	sbc	r24, r20
    6c1e:	95 0b       	sbc	r25, r21
    6c20:	6c 59       	subi	r22, 0x9C	; 156
    6c22:	7d 4c       	sbci	r23, 0xCD	; 205
    6c24:	88 40       	sbci	r24, 0x08	; 8
    6c26:	90 40       	sbci	r25, 0x00	; 0
    6c28:	08 f4       	brcc	.+2      	; 0x6c2c <handleCalibration+0x3f8>
    6c2a:	1a ce       	rjmp	.-972    	; 0x6860 <handleCalibration+0x2c>
            	tempVel = 0;
    6c2c:	10 92 77 0b 	sts	0x0B77, r1
    6c30:	10 92 76 0b 	sts	0x0B76, r1
                //updateOdomData();
                calibState = CALIBRATION_STATE_NEXT;
    6c34:	85 e0       	ldi	r24, 0x05	; 5
    6c36:	80 93 61 0b 	sts	0x0B61, r24
    6c3a:	08 95       	ret
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    6c3c:	20 91 65 02 	lds	r18, 0x0265
    6c40:	30 91 66 02 	lds	r19, 0x0266
    6c44:	80 91 d0 04 	lds	r24, 0x04D0
    6c48:	90 91 d1 04 	lds	r25, 0x04D1
    6c4c:	82 17       	cp	r24, r18
    6c4e:	93 07       	cpc	r25, r19
    6c50:	cc f6       	brge	.-78     	; 0x6c04 <handleCalibration+0x3d0>
    6c52:	d5 cf       	rjmp	.-86     	; 0x6bfe <handleCalibration+0x3ca>
                calibState = CALIBRATION_STATE_NEXT;
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    6c54:	80 91 53 05 	lds	r24, 0x0553
    6c58:	88 23       	and	r24, r24
    6c5a:	e1 f0       	breq	.+56     	; 0x6c94 <handleCalibration+0x460>
    6c5c:	82 30       	cpi	r24, 0x02	; 2
    6c5e:	d1 f0       	breq	.+52     	; 0x6c94 <handleCalibration+0x460>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    6c60:	20 91 6b 02 	lds	r18, 0x026B
    6c64:	30 91 6c 02 	lds	r19, 0x026C
    6c68:	80 91 d0 04 	lds	r24, 0x04D0
    6c6c:	90 91 d1 04 	lds	r25, 0x04D1
    6c70:	82 17       	cp	r24, r18
    6c72:	93 07       	cpc	r25, r19
    6c74:	0c f0       	brlt	.+2      	; 0x6c78 <handleCalibration+0x444>
    6c76:	dd ce       	rjmp	.-582    	; 0x6a32 <handleCalibration+0x1fe>
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
    6c78:	83 e0       	ldi	r24, 0x03	; 3
    6c7a:	80 93 61 0b 	sts	0x0B61, r24
                    timeoutOdometry = getTime100MicroSec();;
    6c7e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6c82:	60 93 31 0b 	sts	0x0B31, r22
    6c86:	70 93 32 0b 	sts	0x0B32, r23
    6c8a:	80 93 33 0b 	sts	0x0B33, r24
    6c8e:	90 93 34 0b 	sts	0x0B34, r25
    6c92:	cf ce       	rjmp	.-610    	; 0x6a32 <handleCalibration+0x1fe>
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    6c94:	20 91 65 02 	lds	r18, 0x0265
    6c98:	30 91 66 02 	lds	r19, 0x0266
    6c9c:	80 91 d0 04 	lds	r24, 0x04D0
    6ca0:	90 91 d1 04 	lds	r25, 0x04D1
    6ca4:	82 17       	cp	r24, r18
    6ca6:	93 07       	cpc	r25, r19
    6ca8:	0c f0       	brlt	.+2      	; 0x6cac <handleCalibration+0x478>
    6caa:	c3 ce       	rjmp	.-634    	; 0x6a32 <handleCalibration+0x1fe>
    6cac:	e5 cf       	rjmp	.-54     	; 0x6c78 <handleCalibration+0x444>
			calibState = CALIBRATION_STATE_FIND_THRS_1;
			break;
		
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line securily (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
    6cae:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6cb2:	20 91 31 0b 	lds	r18, 0x0B31
    6cb6:	30 91 32 0b 	lds	r19, 0x0B32
    6cba:	40 91 33 0b 	lds	r20, 0x0B33
    6cbe:	50 91 34 0b 	lds	r21, 0x0B34
    6cc2:	62 1b       	sub	r22, r18
    6cc4:	73 0b       	sbc	r23, r19
    6cc6:	84 0b       	sbc	r24, r20
    6cc8:	95 0b       	sbc	r25, r21
    6cca:	60 59       	subi	r22, 0x90	; 144
    6ccc:	75 42       	sbci	r23, 0x25	; 37
    6cce:	80 40       	sbci	r24, 0x00	; 0
    6cd0:	90 40       	sbci	r25, 0x00	; 0
    6cd2:	08 f4       	brcc	.+2      	; 0x6cd6 <handleCalibration+0x4a2>
    6cd4:	c5 cd       	rjmp	.-1142   	; 0x6860 <handleCalibration+0x2c>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
    6cd6:	80 91 53 05 	lds	r24, 0x0553
    6cda:	88 23       	and	r24, r24
    6cdc:	09 f4       	brne	.+2      	; 0x6ce0 <handleCalibration+0x4ac>
    6cde:	40 c0       	rjmp	.+128    	; 0x6d60 <handleCalibration+0x52c>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    6ce0:	81 30       	cpi	r24, 0x01	; 1
    6ce2:	09 f4       	brne	.+2      	; 0x6ce6 <handleCalibration+0x4b2>
    6ce4:	a1 c0       	rjmp	.+322    	; 0x6e28 <handleCalibration+0x5f4>
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
					pwm_intermediate_left_desired = 0;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    6ce6:	82 30       	cpi	r24, 0x02	; 2
    6ce8:	09 f4       	brne	.+2      	; 0x6cec <handleCalibration+0x4b8>
    6cea:	a9 c0       	rjmp	.+338    	; 0x6e3e <handleCalibration+0x60a>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
	        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    6cec:	83 30       	cpi	r24, 0x03	; 3
    6cee:	09 f0       	breq	.+2      	; 0x6cf2 <handleCalibration+0x4be>
    6cf0:	41 c0       	rjmp	.+130    	; 0x6d74 <handleCalibration+0x540>
					pwm_intermediate_right_desired = -((INDEX_STEP*3)<<2);
    6cf2:	84 ec       	ldi	r24, 0xC4	; 196
    6cf4:	9f ef       	ldi	r25, 0xFF	; 255
    6cf6:	90 93 fa 02 	sts	0x02FA, r25
    6cfa:	80 93 f9 02 	sts	0x02F9, r24
					pwm_intermediate_left_desired = 0;
    6cfe:	10 92 fc 02 	sts	0x02FC, r1
    6d02:	10 92 fb 02 	sts	0x02FB, r1
    6d06:	36 c0       	rjmp	.+108    	; 0x6d74 <handleCalibration+0x540>

void handleCalibration() {

	switch(calibState) {
		case CALIBRATION_STATE_FIND_THRS_0:
			timeoutOdometry = getTime100MicroSec();
    6d08:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6d0c:	60 93 31 0b 	sts	0x0B31, r22
    6d10:	70 93 32 0b 	sts	0x0B32, r23
    6d14:	80 93 33 0b 	sts	0x0B33, r24
    6d18:	90 93 34 0b 	sts	0x0B34, r25
			calibState = CALIBRATION_STATE_FIND_THRS_1;
    6d1c:	87 e0       	ldi	r24, 0x07	; 7
    6d1e:	80 93 61 0b 	sts	0x0B61, r24
    6d22:	08 95       	ret

    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    6d24:	81 30       	cpi	r24, 0x01	; 1
    6d26:	f1 f1       	breq	.+124    	; 0x6da4 <handleCalibration+0x570>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    6d28:	82 30       	cpi	r24, 0x02	; 2
    6d2a:	09 f4       	brne	.+2      	; 0x6d2e <handleCalibration+0x4fa>
    6d2c:	67 c0       	rjmp	.+206    	; 0x6dfc <handleCalibration+0x5c8>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    6d2e:	83 30       	cpi	r24, 0x03	; 3
    6d30:	09 f0       	breq	.+2      	; 0x6d34 <handleCalibration+0x500>
    6d32:	b4 cd       	rjmp	.-1176   	; 0x689c <handleCalibration+0x68>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    6d34:	80 91 bb 08 	lds	r24, 0x08BB
    6d38:	25 e0       	ldi	r18, 0x05	; 5
    6d3a:	82 9f       	mul	r24, r18
    6d3c:	c0 01       	movw	r24, r0
    6d3e:	11 24       	eor	r1, r1
    6d40:	88 0f       	add	r24, r24
    6d42:	99 1f       	adc	r25, r25
    6d44:	88 0f       	add	r24, r24
    6d46:	99 1f       	adc	r25, r25
    6d48:	90 95       	com	r25
    6d4a:	81 95       	neg	r24
    6d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    6d4e:	90 93 fa 02 	sts	0x02FA, r25
    6d52:	80 93 f9 02 	sts	0x02F9, r24
				pwm_intermediate_left_desired = 0;
    6d56:	10 92 fc 02 	sts	0x02FC, r1
    6d5a:	10 92 fb 02 	sts	0x02FB, r1
    6d5e:	9e cd       	rjmp	.-1220   	; 0x689c <handleCalibration+0x68>
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line securily (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = 0;
    6d60:	10 92 fa 02 	sts	0x02FA, r1
    6d64:	10 92 f9 02 	sts	0x02F9, r1
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
    6d68:	8c e3       	ldi	r24, 0x3C	; 60
    6d6a:	90 e0       	ldi	r25, 0x00	; 0
    6d6c:	90 93 fc 02 	sts	0x02FC, r25
    6d70:	80 93 fb 02 	sts	0x02FB, r24
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
	        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
					pwm_intermediate_right_desired = -((INDEX_STEP*3)<<2);
					pwm_intermediate_left_desired = 0;
				}               
				minGround = 1023;
    6d74:	8f ef       	ldi	r24, 0xFF	; 255
    6d76:	93 e0       	ldi	r25, 0x03	; 3
    6d78:	90 93 cd 04 	sts	0x04CD, r25
    6d7c:	80 93 cc 04 	sts	0x04CC, r24
				maxGround = 0;
    6d80:	10 92 cf 04 	sts	0x04CF, r1
    6d84:	10 92 ce 04 	sts	0x04CE, r1
	            calibState = CALIBRATION_STATE_FIND_THRS_2;
    6d88:	88 e0       	ldi	r24, 0x08	; 8
    6d8a:	80 93 61 0b 	sts	0x0B61, r24
	            timeoutOdometry = getTime100MicroSec();
    6d8e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6d92:	60 93 31 0b 	sts	0x0B31, r22
    6d96:	70 93 32 0b 	sts	0x0B32, r23
    6d9a:	80 93 33 0b 	sts	0x0B33, r24
    6d9e:	90 93 34 0b 	sts	0x0B34, r25
    6da2:	08 95       	ret
    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    6da4:	80 91 bb 08 	lds	r24, 0x08BB
    6da8:	25 e0       	ldi	r18, 0x05	; 5
    6daa:	82 9f       	mul	r24, r18
    6dac:	c0 01       	movw	r24, r0
    6dae:	11 24       	eor	r1, r1
    6db0:	88 0f       	add	r24, r24
    6db2:	99 1f       	adc	r25, r25
    6db4:	88 0f       	add	r24, r24
    6db6:	99 1f       	adc	r25, r25
    6db8:	90 93 fa 02 	sts	0x02FA, r25
    6dbc:	80 93 f9 02 	sts	0x02F9, r24
				pwm_intermediate_left_desired = 0;
    6dc0:	10 92 fc 02 	sts	0x02FC, r1
    6dc4:	10 92 fb 02 	sts	0x02FB, r1
    6dc8:	69 cd       	rjmp	.-1326   	; 0x689c <handleCalibration+0x68>
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    6dca:	91 e0       	ldi	r25, 0x01	; 1
    6dcc:	90 93 bb 08 	sts	0x08BB, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    6dd0:	80 91 53 05 	lds	r24, 0x0553
    6dd4:	88 23       	and	r24, r24
    6dd6:	21 f4       	brne	.+8      	; 0x6de0 <handleCalibration+0x5ac>
                	calibWheel = LEFT_WHEEL_BW_SC;
    6dd8:	82 e0       	ldi	r24, 0x02	; 2
    6dda:	80 93 53 05 	sts	0x0553, r24
    6dde:	3e cd       	rjmp	.-1412   	; 0x685c <handleCalibration+0x28>
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    6de0:	81 30       	cpi	r24, 0x01	; 1
    6de2:	c1 f1       	breq	.+112    	; 0x6e54 <handleCalibration+0x620>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    6de4:	82 30       	cpi	r24, 0x02	; 2
    6de6:	d1 f1       	breq	.+116    	; 0x6e5c <handleCalibration+0x628>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
					break;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    6de8:	83 30       	cpi	r24, 0x03	; 3
    6dea:	09 f0       	breq	.+2      	; 0x6dee <handleCalibration+0x5ba>
    6dec:	37 cd       	rjmp	.-1426   	; 0x685c <handleCalibration+0x28>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    6dee:	10 92 53 05 	sts	0x0553, r1
					// red off
					writeCalibrationToFlash();
    6df2:	0e 94 0f 4c 	call	0x981e	; 0x981e <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    6df6:	10 92 6e 05 	sts	0x056E, r1
    6dfa:	30 cd       	rjmp	.-1440   	; 0x685c <handleCalibration+0x28>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    6dfc:	10 92 fa 02 	sts	0x02FA, r1
    6e00:	10 92 f9 02 	sts	0x02F9, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    6e04:	80 91 bb 08 	lds	r24, 0x08BB
    6e08:	25 e0       	ldi	r18, 0x05	; 5
    6e0a:	82 9f       	mul	r24, r18
    6e0c:	c0 01       	movw	r24, r0
    6e0e:	11 24       	eor	r1, r1
    6e10:	88 0f       	add	r24, r24
    6e12:	99 1f       	adc	r25, r25
    6e14:	88 0f       	add	r24, r24
    6e16:	99 1f       	adc	r25, r25
    6e18:	90 95       	com	r25
    6e1a:	81 95       	neg	r24
    6e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e1e:	90 93 fc 02 	sts	0x02FC, r25
    6e22:	80 93 fb 02 	sts	0x02FB, r24
    6e26:	3a cd       	rjmp	.-1420   	; 0x689c <handleCalibration+0x68>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
    6e28:	8c e3       	ldi	r24, 0x3C	; 60
    6e2a:	90 e0       	ldi	r25, 0x00	; 0
    6e2c:	90 93 fa 02 	sts	0x02FA, r25
    6e30:	80 93 f9 02 	sts	0x02F9, r24
					pwm_intermediate_left_desired = 0;
    6e34:	10 92 fc 02 	sts	0x02FC, r1
    6e38:	10 92 fb 02 	sts	0x02FB, r1
    6e3c:	9b cf       	rjmp	.-202    	; 0x6d74 <handleCalibration+0x540>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
					pwm_intermediate_right_desired = 0;
    6e3e:	10 92 fa 02 	sts	0x02FA, r1
    6e42:	10 92 f9 02 	sts	0x02F9, r1
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
    6e46:	84 ec       	ldi	r24, 0xC4	; 196
    6e48:	9f ef       	ldi	r25, 0xFF	; 255
    6e4a:	90 93 fc 02 	sts	0x02FC, r25
    6e4e:	80 93 fb 02 	sts	0x02FB, r24
    6e52:	90 cf       	rjmp	.-224    	; 0x6d74 <handleCalibration+0x540>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    6e54:	83 e0       	ldi	r24, 0x03	; 3
    6e56:	80 93 53 05 	sts	0x0553, r24
    6e5a:	00 cd       	rjmp	.-1536   	; 0x685c <handleCalibration+0x28>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    6e5c:	90 93 53 05 	sts	0x0553, r25
					calibrateOdomFlag = 0;
    6e60:	10 92 6e 05 	sts	0x056E, r1
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
    6e64:	86 e0       	ldi	r24, 0x06	; 6
    6e66:	80 93 61 0b 	sts	0x0B61, r24
    6e6a:	08 95       	ret

00006e6c <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    6e6c:	2f 92       	push	r2
    6e6e:	3f 92       	push	r3
    6e70:	4f 92       	push	r4
    6e72:	5f 92       	push	r5
    6e74:	6f 92       	push	r6
    6e76:	7f 92       	push	r7
    6e78:	8f 92       	push	r8
    6e7a:	9f 92       	push	r9
    6e7c:	af 92       	push	r10
    6e7e:	bf 92       	push	r11
    6e80:	cf 92       	push	r12
    6e82:	df 92       	push	r13
    6e84:	ef 92       	push	r14
    6e86:	ff 92       	push	r15
    6e88:	0f 93       	push	r16
    6e8a:	1f 93       	push	r17
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
    6e8c:	40 91 6e 05 	lds	r20, 0x056E
    6e90:	44 23       	and	r20, r20
    6e92:	09 f4       	brne	.+2      	; 0x6e96 <handleMotorsWithSpeedController+0x2a>
    6e94:	4e c2       	rjmp	.+1180   	; 0x7332 <handleMotorsWithSpeedController+0x4c6>
    6e96:	20 91 f9 02 	lds	r18, 0x02F9
    6e9a:	30 91 fa 02 	lds	r19, 0x02FA

void handleMotorsWithSpeedController() {

	handleSoftAcceleration();

	if(calibrateOdomFlag==1) {
    6e9e:	41 30       	cpi	r20, 0x01	; 1
    6ea0:	09 f4       	brne	.+2      	; 0x6ea4 <handleMotorsWithSpeedController+0x38>
    6ea2:	0c c3       	rjmp	.+1560   	; 0x74bc <handleMotorsWithSpeedController+0x650>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    6ea4:	37 fd       	sbrc	r19, 7
    6ea6:	81 c1       	rjmp	.+770    	; 0x71aa <handleMotorsWithSpeedController+0x33e>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    6ea8:	c9 01       	movw	r24, r18
    6eaa:	61 e0       	ldi	r22, 0x01	; 1
    6eac:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <getInputFromSpeed>
    6eb0:	90 93 0a 03 	sts	0x030A, r25
    6eb4:	80 93 09 03 	sts	0x0309, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    6eb8:	80 91 fb 02 	lds	r24, 0x02FB
    6ebc:	90 91 fc 02 	lds	r25, 0x02FC
    6ec0:	97 fd       	sbrc	r25, 7
    6ec2:	81 c1       	rjmp	.+770    	; 0x71c6 <handleMotorsWithSpeedController+0x35a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    6ec4:	60 e0       	ldi	r22, 0x00	; 0
    6ec6:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <getInputFromSpeed>
    6eca:	90 93 0c 03 	sts	0x030C, r25
    6ece:	80 93 0b 03 	sts	0x030B, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    6ed2:	80 91 74 04 	lds	r24, 0x0474
    6ed6:	88 23       	and	r24, r24
    6ed8:	09 f0       	breq	.+2      	; 0x6edc <handleMotorsWithSpeedController+0x70>
    6eda:	81 c1       	rjmp	.+770    	; 0x71de <handleMotorsWithSpeedController+0x372>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    6edc:	80 91 0b 03 	lds	r24, 0x030B
    6ee0:	90 91 0c 03 	lds	r25, 0x030C
    6ee4:	90 93 e8 02 	sts	0x02E8, r25
    6ee8:	80 93 e7 02 	sts	0x02E7, r24
	pwm_right_desired_to_control = pwm_right_working;
    6eec:	80 91 09 03 	lds	r24, 0x0309
    6ef0:	90 91 0a 03 	lds	r25, 0x030A
    6ef4:	90 93 e6 02 	sts	0x02E6, r25
    6ef8:	80 93 e5 02 	sts	0x02E5, r24

	if(compute_left_vel) {
    6efc:	80 91 03 02 	lds	r24, 0x0203
    6f00:	88 23       	and	r24, r24
    6f02:	09 f4       	brne	.+2      	; 0x6f06 <handleMotorsWithSpeedController+0x9a>
    6f04:	a2 c0       	rjmp	.+324    	; 0x704a <handleMotorsWithSpeedController+0x1de>

		last_left_vel = left_vel_sum>>2;
    6f06:	20 91 e9 02 	lds	r18, 0x02E9
    6f0a:	30 91 ea 02 	lds	r19, 0x02EA
    6f0e:	36 95       	lsr	r19
    6f10:	27 95       	ror	r18
    6f12:	36 95       	lsr	r19
    6f14:	27 95       	ror	r18
    6f16:	30 93 ee 02 	sts	0x02EE, r19
    6f1a:	20 93 ed 02 	sts	0x02ED, r18
		compute_left_vel = 0;
    6f1e:	10 92 03 02 	sts	0x0203, r1
		left_vel_sum = 0;
    6f22:	10 92 ea 02 	sts	0x02EA, r1
    6f26:	10 92 e9 02 	sts	0x02E9, r1
		
		if(calibrateOdomFlag==1) {
    6f2a:	80 91 6e 05 	lds	r24, 0x056E
    6f2e:	81 30       	cpi	r24, 0x01	; 1
    6f30:	09 f4       	brne	.+2      	; 0x6f34 <handleMotorsWithSpeedController+0xc8>
    6f32:	95 c3       	rjmp	.+1834   	; 0x765e <handleMotorsWithSpeedController+0x7f2>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    6f34:	0e 94 76 2c 	call	0x58ec	; 0x58ec <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    6f38:	80 91 9b 04 	lds	r24, 0x049B
    6f3c:	90 91 9c 04 	lds	r25, 0x049C
    6f40:	a0 91 9d 04 	lds	r26, 0x049D
    6f44:	b0 91 9e 04 	lds	r27, 0x049E
    6f48:	80 93 a3 04 	sts	0x04A3, r24
    6f4c:	90 93 a4 04 	sts	0x04A4, r25
    6f50:	a0 93 a5 04 	sts	0x04A5, r26
    6f54:	b0 93 a6 04 	sts	0x04A6, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    6f58:	60 91 c0 04 	lds	r22, 0x04C0
    6f5c:	70 91 c1 04 	lds	r23, 0x04C1
    6f60:	88 27       	eor	r24, r24
    6f62:	77 fd       	sbrc	r23, 7
    6f64:	80 95       	com	r24
    6f66:	98 2f       	mov	r25, r24
    6f68:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    6f6c:	7b 01       	movw	r14, r22
    6f6e:	8c 01       	movw	r16, r24
    6f70:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6f74:	20 91 c4 04 	lds	r18, 0x04C4
    6f78:	30 91 c5 04 	lds	r19, 0x04C5
    6f7c:	40 91 c6 04 	lds	r20, 0x04C6
    6f80:	50 91 c7 04 	lds	r21, 0x04C7
    6f84:	62 1b       	sub	r22, r18
    6f86:	73 0b       	sbc	r23, r19
    6f88:	84 0b       	sbc	r24, r20
    6f8a:	95 0b       	sbc	r25, r21
    6f8c:	0e 94 83 59 	call	0xb306	; 0xb306 <__floatunsisf>
    6f90:	20 e0       	ldi	r18, 0x00	; 0
    6f92:	30 e0       	ldi	r19, 0x00	; 0
    6f94:	40 ed       	ldi	r20, 0xD0	; 208
    6f96:	52 e4       	ldi	r21, 0x42	; 66
    6f98:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    6f9c:	9b 01       	movw	r18, r22
    6f9e:	ac 01       	movw	r20, r24
    6fa0:	c8 01       	movw	r24, r16
    6fa2:	b7 01       	movw	r22, r14
    6fa4:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    6fa8:	20 e0       	ldi	r18, 0x00	; 0
    6faa:	34 e2       	ldi	r19, 0x24	; 36
    6fac:	44 e7       	ldi	r20, 0x74	; 116
    6fae:	59 e4       	ldi	r21, 0x49	; 73
    6fb0:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    6fb4:	9b 01       	movw	r18, r22
    6fb6:	ac 01       	movw	r20, r24
    6fb8:	60 91 9b 04 	lds	r22, 0x049B
    6fbc:	70 91 9c 04 	lds	r23, 0x049C
    6fc0:	80 91 9d 04 	lds	r24, 0x049D
    6fc4:	90 91 9e 04 	lds	r25, 0x049E
    6fc8:	0e 94 1d 58 	call	0xb03a	; 0xb03a <__addsf3>
    6fcc:	60 93 9b 04 	sts	0x049B, r22
    6fd0:	70 93 9c 04 	sts	0x049C, r23
    6fd4:	80 93 9d 04 	sts	0x049D, r24
    6fd8:	90 93 9e 04 	sts	0x049E, r25
		timeLeftOdom = getTime100MicroSec();
    6fdc:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    6fe0:	60 93 c4 04 	sts	0x04C4, r22
    6fe4:	70 93 c5 04 	sts	0x04C5, r23
    6fe8:	80 93 c6 04 	sts	0x04C6, r24
    6fec:	90 93 c7 04 	sts	0x04C7, r25
		leftMotSteps = (signed long int)leftDist;
    6ff0:	60 91 9b 04 	lds	r22, 0x049B
    6ff4:	70 91 9c 04 	lds	r23, 0x049C
    6ff8:	80 91 9d 04 	lds	r24, 0x049D
    6ffc:	90 91 9e 04 	lds	r25, 0x049E
    7000:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    7004:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    7008:	60 93 d1 02 	sts	0x02D1, r22
    700c:	70 93 d2 02 	sts	0x02D2, r23
    7010:	80 93 d3 02 	sts	0x02D3, r24
    7014:	90 93 d4 02 	sts	0x02D4, r25
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/

		start_speed_control_left(&pwm_left_working);
    7018:	8b e0       	ldi	r24, 0x0B	; 11
    701a:	93 e0       	ldi	r25, 0x03	; 3
    701c:	0e 94 8f 19 	call	0x331e	; 0x331e <start_speed_control_left>

		pwm_left = pwm_left_working;
    7020:	20 91 0b 03 	lds	r18, 0x030B
    7024:	30 91 0c 03 	lds	r19, 0x030C
    7028:	30 93 f4 02 	sts	0x02F4, r19
    702c:	20 93 f3 02 	sts	0x02F3, r18

		if(pwm_left > 0) {
    7030:	12 16       	cp	r1, r18
    7032:	13 06       	cpc	r1, r19
    7034:	0c f0       	brlt	.+2      	; 0x7038 <handleMotorsWithSpeedController+0x1cc>
    7036:	36 c3       	rjmp	.+1644   	; 0x76a4 <handleMotorsWithSpeedController+0x838>
			OCR4A = (unsigned int)pwm_left;
    7038:	30 93 a9 00 	sts	0x00A9, r19
    703c:	20 93 a8 00 	sts	0x00A8, r18
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    7040:	80 91 ab 04 	lds	r24, 0x04AB
    7044:	8f 5f       	subi	r24, 0xFF	; 255
    7046:	80 93 ab 04 	sts	0x04AB, r24

	}

	if(compute_right_vel) {
    704a:	80 91 04 02 	lds	r24, 0x0204
    704e:	88 23       	and	r24, r24
    7050:	09 f0       	breq	.+2      	; 0x7054 <handleMotorsWithSpeedController+0x1e8>
    7052:	cc c0       	rjmp	.+408    	; 0x71ec <handleMotorsWithSpeedController+0x380>
    7054:	80 91 ab 04 	lds	r24, 0x04AB

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    7058:	82 30       	cpi	r24, 0x02	; 2
    705a:	08 f4       	brcc	.+2      	; 0x705e <handleMotorsWithSpeedController+0x1f2>
    705c:	95 c0       	rjmp	.+298    	; 0x7188 <handleMotorsWithSpeedController+0x31c>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    705e:	10 92 ab 04 	sts	0x04AB, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    7062:	20 90 9f 04 	lds	r2, 0x049F
    7066:	30 90 a0 04 	lds	r3, 0x04A0
    706a:	40 90 a1 04 	lds	r4, 0x04A1
    706e:	50 90 a2 04 	lds	r5, 0x04A2
    7072:	60 90 9b 04 	lds	r6, 0x049B
    7076:	70 90 9c 04 	lds	r7, 0x049C
    707a:	80 90 9d 04 	lds	r8, 0x049D
    707e:	90 90 9e 04 	lds	r9, 0x049E
    7082:	c2 01       	movw	r24, r4
    7084:	b1 01       	movw	r22, r2
    7086:	20 91 a7 04 	lds	r18, 0x04A7
    708a:	30 91 a8 04 	lds	r19, 0x04A8
    708e:	40 91 a9 04 	lds	r20, 0x04A9
    7092:	50 91 aa 04 	lds	r21, 0x04AA
    7096:	0e 94 1c 58 	call	0xb038	; 0xb038 <__subsf3>
    709a:	7b 01       	movw	r14, r22
    709c:	8c 01       	movw	r16, r24
    709e:	c4 01       	movw	r24, r8
    70a0:	b3 01       	movw	r22, r6
    70a2:	20 91 a3 04 	lds	r18, 0x04A3
    70a6:	30 91 a4 04 	lds	r19, 0x04A4
    70aa:	40 91 a5 04 	lds	r20, 0x04A5
    70ae:	50 91 a6 04 	lds	r21, 0x04A6
    70b2:	0e 94 1c 58 	call	0xb038	; 0xb038 <__subsf3>
    70b6:	9b 01       	movw	r18, r22
    70b8:	ac 01       	movw	r20, r24
    70ba:	c8 01       	movw	r24, r16
    70bc:	b7 01       	movw	r22, r14
    70be:	0e 94 1d 58 	call	0xb03a	; 0xb03a <__addsf3>
    70c2:	20 e0       	ldi	r18, 0x00	; 0
    70c4:	30 e0       	ldi	r19, 0x00	; 0
    70c6:	40 e0       	ldi	r20, 0x00	; 0
    70c8:	5f e3       	ldi	r21, 0x3F	; 63
    70ca:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    70ce:	5b 01       	movw	r10, r22
    70d0:	6c 01       	movw	r12, r24
    70d2:	60 93 87 04 	sts	0x0487, r22
    70d6:	70 93 88 04 	sts	0x0488, r23
    70da:	80 93 89 04 	sts	0x0489, r24
    70de:	90 93 8a 04 	sts	0x048A, r25

		if(robotPosition == HORIZONTAL_POS) {
    70e2:	80 91 12 02 	lds	r24, 0x0212
    70e6:	81 30       	cpi	r24, 0x01	; 1
    70e8:	09 f4       	brne	.+2      	; 0x70ec <handleMotorsWithSpeedController+0x280>
    70ea:	f5 c1       	rjmp	.+1002   	; 0x74d6 <handleMotorsWithSpeedController+0x66a>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    70ec:	80 91 ac 04 	lds	r24, 0x04AC
    70f0:	90 91 ad 04 	lds	r25, 0x04AD
    70f4:	a0 91 ae 04 	lds	r26, 0x04AE
    70f8:	b0 91 af 04 	lds	r27, 0x04AF
    70fc:	80 93 77 04 	sts	0x0477, r24
    7100:	90 93 78 04 	sts	0x0478, r25
    7104:	a0 93 79 04 	sts	0x0479, r26
    7108:	b0 93 7a 04 	sts	0x047A, r27
    710c:	7c 01       	movw	r14, r24
    710e:	8d 01       	movw	r16, r26
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    7110:	c8 01       	movw	r24, r16
    7112:	b7 01       	movw	r22, r14
    7114:	0e 94 e7 58 	call	0xb1ce	; 0xb1ce <cos>
    7118:	9b 01       	movw	r18, r22
    711a:	ac 01       	movw	r20, r24
    711c:	c6 01       	movw	r24, r12
    711e:	b5 01       	movw	r22, r10
    7120:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    7124:	9b 01       	movw	r18, r22
    7126:	ac 01       	movw	r20, r24
    7128:	60 91 7f 04 	lds	r22, 0x047F
    712c:	70 91 80 04 	lds	r23, 0x0480
    7130:	80 91 81 04 	lds	r24, 0x0481
    7134:	90 91 82 04 	lds	r25, 0x0482
    7138:	0e 94 1d 58 	call	0xb03a	; 0xb03a <__addsf3>
    713c:	60 93 7f 04 	sts	0x047F, r22
    7140:	70 93 80 04 	sts	0x0480, r23
    7144:	80 93 81 04 	sts	0x0481, r24
    7148:	90 93 82 04 	sts	0x0482, r25
		yPos = yPos + sin(theta)*deltaDist;
    714c:	c8 01       	movw	r24, r16
    714e:	b7 01       	movw	r22, r14
    7150:	0e 94 01 5b 	call	0xb602	; 0xb602 <sin>
    7154:	9b 01       	movw	r18, r22
    7156:	ac 01       	movw	r20, r24
    7158:	c6 01       	movw	r24, r12
    715a:	b5 01       	movw	r22, r10
    715c:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    7160:	9b 01       	movw	r18, r22
    7162:	ac 01       	movw	r20, r24
    7164:	60 91 83 04 	lds	r22, 0x0483
    7168:	70 91 84 04 	lds	r23, 0x0484
    716c:	80 91 85 04 	lds	r24, 0x0485
    7170:	90 91 86 04 	lds	r25, 0x0486
    7174:	0e 94 1d 58 	call	0xb03a	; 0xb03a <__addsf3>
    7178:	60 93 83 04 	sts	0x0483, r22
    717c:	70 93 84 04 	sts	0x0484, r23
    7180:	80 93 85 04 	sts	0x0485, r24
    7184:	90 93 86 04 	sts	0x0486, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    7188:	1f 91       	pop	r17
    718a:	0f 91       	pop	r16
    718c:	ff 90       	pop	r15
    718e:	ef 90       	pop	r14
    7190:	df 90       	pop	r13
    7192:	cf 90       	pop	r12
    7194:	bf 90       	pop	r11
    7196:	af 90       	pop	r10
    7198:	9f 90       	pop	r9
    719a:	8f 90       	pop	r8
    719c:	7f 90       	pop	r7
    719e:	6f 90       	pop	r6
    71a0:	5f 90       	pop	r5
    71a2:	4f 90       	pop	r4
    71a4:	3f 90       	pop	r3
    71a6:	2f 90       	pop	r2
    71a8:	08 95       	ret
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    71aa:	c9 01       	movw	r24, r18
    71ac:	63 e0       	ldi	r22, 0x03	; 3
    71ae:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <getInputFromSpeed>
    71b2:	90 93 0a 03 	sts	0x030A, r25
    71b6:	80 93 09 03 	sts	0x0309, r24
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    71ba:	80 91 fb 02 	lds	r24, 0x02FB
    71be:	90 91 fc 02 	lds	r25, 0x02FC
    71c2:	97 ff       	sbrs	r25, 7
    71c4:	7f ce       	rjmp	.-770    	; 0x6ec4 <handleMotorsWithSpeedController+0x58>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    71c6:	62 e0       	ldi	r22, 0x02	; 2
    71c8:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <getInputFromSpeed>
    71cc:	90 93 0c 03 	sts	0x030C, r25
    71d0:	80 93 0b 03 	sts	0x030B, r24
		}
	}

	if(obstacleAvoidanceEnabled) {
    71d4:	80 91 74 04 	lds	r24, 0x0474
    71d8:	88 23       	and	r24, r24
    71da:	09 f4       	brne	.+2      	; 0x71de <handleMotorsWithSpeedController+0x372>
    71dc:	7f ce       	rjmp	.-770    	; 0x6edc <handleMotorsWithSpeedController+0x70>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    71de:	8b e0       	ldi	r24, 0x0B	; 11
    71e0:	93 e0       	ldi	r25, 0x03	; 3
    71e2:	69 e0       	ldi	r22, 0x09	; 9
    71e4:	73 e0       	ldi	r23, 0x03	; 3
    71e6:	0e 94 da 40 	call	0x81b4	; 0x81b4 <obstacleAvoidance>
    71ea:	78 ce       	rjmp	.-784    	; 0x6edc <handleMotorsWithSpeedController+0x70>

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    71ec:	20 91 eb 02 	lds	r18, 0x02EB
    71f0:	30 91 ec 02 	lds	r19, 0x02EC
    71f4:	36 95       	lsr	r19
    71f6:	27 95       	ror	r18
    71f8:	36 95       	lsr	r19
    71fa:	27 95       	ror	r18
    71fc:	30 93 f0 02 	sts	0x02F0, r19
    7200:	20 93 ef 02 	sts	0x02EF, r18
		compute_right_vel = 0;
    7204:	10 92 04 02 	sts	0x0204, r1
		right_vel_sum = 0;
    7208:	10 92 ec 02 	sts	0x02EC, r1
    720c:	10 92 eb 02 	sts	0x02EB, r1

		if(calibrateOdomFlag==1) {
    7210:	80 91 6e 05 	lds	r24, 0x056E
    7214:	81 30       	cpi	r24, 0x01	; 1
    7216:	09 f4       	brne	.+2      	; 0x721a <handleMotorsWithSpeedController+0x3ae>
    7218:	ff c1       	rjmp	.+1022   	; 0x7618 <handleMotorsWithSpeedController+0x7ac>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    721a:	0e 94 ff 29 	call	0x53fe	; 0x53fe <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    721e:	80 91 9f 04 	lds	r24, 0x049F
    7222:	90 91 a0 04 	lds	r25, 0x04A0
    7226:	a0 91 a1 04 	lds	r26, 0x04A1
    722a:	b0 91 a2 04 	lds	r27, 0x04A2
    722e:	80 93 a7 04 	sts	0x04A7, r24
    7232:	90 93 a8 04 	sts	0x04A8, r25
    7236:	a0 93 a9 04 	sts	0x04A9, r26
    723a:	b0 93 aa 04 	sts	0x04AA, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    723e:	60 91 c2 04 	lds	r22, 0x04C2
    7242:	70 91 c3 04 	lds	r23, 0x04C3
    7246:	88 27       	eor	r24, r24
    7248:	77 fd       	sbrc	r23, 7
    724a:	80 95       	com	r24
    724c:	98 2f       	mov	r25, r24
    724e:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    7252:	7b 01       	movw	r14, r22
    7254:	8c 01       	movw	r16, r24
    7256:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    725a:	20 91 c8 04 	lds	r18, 0x04C8
    725e:	30 91 c9 04 	lds	r19, 0x04C9
    7262:	40 91 ca 04 	lds	r20, 0x04CA
    7266:	50 91 cb 04 	lds	r21, 0x04CB
    726a:	62 1b       	sub	r22, r18
    726c:	73 0b       	sbc	r23, r19
    726e:	84 0b       	sbc	r24, r20
    7270:	95 0b       	sbc	r25, r21
    7272:	0e 94 83 59 	call	0xb306	; 0xb306 <__floatunsisf>
    7276:	20 e0       	ldi	r18, 0x00	; 0
    7278:	30 e0       	ldi	r19, 0x00	; 0
    727a:	40 ed       	ldi	r20, 0xD0	; 208
    727c:	52 e4       	ldi	r21, 0x42	; 66
    727e:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    7282:	9b 01       	movw	r18, r22
    7284:	ac 01       	movw	r20, r24
    7286:	c8 01       	movw	r24, r16
    7288:	b7 01       	movw	r22, r14
    728a:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    728e:	20 e0       	ldi	r18, 0x00	; 0
    7290:	34 e2       	ldi	r19, 0x24	; 36
    7292:	44 e7       	ldi	r20, 0x74	; 116
    7294:	59 e4       	ldi	r21, 0x49	; 73
    7296:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    729a:	9b 01       	movw	r18, r22
    729c:	ac 01       	movw	r20, r24
    729e:	60 91 9f 04 	lds	r22, 0x049F
    72a2:	70 91 a0 04 	lds	r23, 0x04A0
    72a6:	80 91 a1 04 	lds	r24, 0x04A1
    72aa:	90 91 a2 04 	lds	r25, 0x04A2
    72ae:	0e 94 1d 58 	call	0xb03a	; 0xb03a <__addsf3>
    72b2:	60 93 9f 04 	sts	0x049F, r22
    72b6:	70 93 a0 04 	sts	0x04A0, r23
    72ba:	80 93 a1 04 	sts	0x04A1, r24
    72be:	90 93 a2 04 	sts	0x04A2, r25
		timeRightOdom = getTime100MicroSec();
    72c2:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    72c6:	60 93 c8 04 	sts	0x04C8, r22
    72ca:	70 93 c9 04 	sts	0x04C9, r23
    72ce:	80 93 ca 04 	sts	0x04CA, r24
    72d2:	90 93 cb 04 	sts	0x04CB, r25
		rightMotSteps = (signed long int)rightDist;
    72d6:	60 91 9f 04 	lds	r22, 0x049F
    72da:	70 91 a0 04 	lds	r23, 0x04A0
    72de:	80 91 a1 04 	lds	r24, 0x04A1
    72e2:	90 91 a2 04 	lds	r25, 0x04A2
    72e6:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    72ea:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    72ee:	60 93 cd 02 	sts	0x02CD, r22
    72f2:	70 93 ce 02 	sts	0x02CE, r23
    72f6:	80 93 cf 02 	sts	0x02CF, r24
    72fa:	90 93 d0 02 	sts	0x02D0, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		start_speed_control_right(&pwm_right_working);
    72fe:	89 e0       	ldi	r24, 0x09	; 9
    7300:	93 e0       	ldi	r25, 0x03	; 3
    7302:	0e 94 64 18 	call	0x30c8	; 0x30c8 <start_speed_control_right>

		pwm_right = pwm_right_working;
    7306:	20 91 09 03 	lds	r18, 0x0309
    730a:	30 91 0a 03 	lds	r19, 0x030A
    730e:	30 93 f2 02 	sts	0x02F2, r19
    7312:	20 93 f1 02 	sts	0x02F1, r18

		if(pwm_right > 0) {
    7316:	12 16       	cp	r1, r18
    7318:	13 06       	cpc	r1, r19
    731a:	0c f0       	brlt	.+2      	; 0x731e <handleMotorsWithSpeedController+0x4b2>
    731c:	d0 c1       	rjmp	.+928    	; 0x76be <handleMotorsWithSpeedController+0x852>
			OCR3A = (unsigned int)pwm_right;
    731e:	30 93 99 00 	sts	0x0099, r19
    7322:	20 93 98 00 	sts	0x0098, r18
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    7326:	80 91 ab 04 	lds	r24, 0x04AB
    732a:	8f 5f       	subi	r24, 0xFF	; 255
    732c:	80 93 ab 04 	sts	0x04AB, r24
    7330:	93 ce       	rjmp	.-730    	; 0x7058 <handleMotorsWithSpeedController+0x1ec>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    7332:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    7336:	8b 01       	movw	r16, r22
    7338:	9c 01       	movw	r18, r24
    733a:	40 e0       	ldi	r20, 0x00	; 0
    733c:	50 e0       	ldi	r21, 0x00	; 0
    733e:	60 e0       	ldi	r22, 0x00	; 0
    7340:	70 e0       	ldi	r23, 0x00	; 0
    7342:	80 91 64 04 	lds	r24, 0x0464
    7346:	90 91 65 04 	lds	r25, 0x0465
    734a:	f0 91 66 04 	lds	r31, 0x0466
    734e:	b0 91 67 04 	lds	r27, 0x0467
    7352:	d0 90 68 04 	lds	r13, 0x0468
    7356:	b0 90 69 04 	lds	r11, 0x0469
    735a:	90 90 6a 04 	lds	r9, 0x046A
    735e:	a0 91 6b 04 	lds	r26, 0x046B
    7362:	80 2e       	mov	r8, r16
    7364:	88 1a       	sub	r8, r24
    7366:	e1 e0       	ldi	r30, 0x01	; 1
    7368:	08 15       	cp	r16, r8
    736a:	08 f0       	brcs	.+2      	; 0x736e <handleMotorsWithSpeedController+0x502>
    736c:	30 c1       	rjmp	.+608    	; 0x75ce <handleMotorsWithSpeedController+0x762>
    736e:	81 2f       	mov	r24, r17
    7370:	89 1b       	sub	r24, r25
    7372:	91 e0       	ldi	r25, 0x01	; 1
    7374:	18 17       	cp	r17, r24
    7376:	08 f0       	brcs	.+2      	; 0x737a <handleMotorsWithSpeedController+0x50e>
    7378:	22 c1       	rjmp	.+580    	; 0x75be <handleMotorsWithSpeedController+0x752>
    737a:	e8 2e       	mov	r14, r24
    737c:	ee 1a       	sub	r14, r30
    737e:	e1 e0       	ldi	r30, 0x01	; 1
    7380:	8e 15       	cp	r24, r14
    7382:	08 f0       	brcs	.+2      	; 0x7386 <handleMotorsWithSpeedController+0x51a>
    7384:	13 c1       	rjmp	.+550    	; 0x75ac <handleMotorsWithSpeedController+0x740>
    7386:	9e 2b       	or	r25, r30
    7388:	82 2f       	mov	r24, r18
    738a:	8f 1b       	sub	r24, r31
    738c:	e1 e0       	ldi	r30, 0x01	; 1
    738e:	28 17       	cp	r18, r24
    7390:	08 f0       	brcs	.+2      	; 0x7394 <handleMotorsWithSpeedController+0x528>
    7392:	04 c1       	rjmp	.+520    	; 0x759c <handleMotorsWithSpeedController+0x730>
    7394:	a8 2e       	mov	r10, r24
    7396:	a9 1a       	sub	r10, r25
    7398:	91 e0       	ldi	r25, 0x01	; 1
    739a:	8a 15       	cp	r24, r10
    739c:	08 f0       	brcs	.+2      	; 0x73a0 <handleMotorsWithSpeedController+0x534>
    739e:	f5 c0       	rjmp	.+490    	; 0x758a <handleMotorsWithSpeedController+0x71e>
    73a0:	e9 2b       	or	r30, r25
    73a2:	83 2f       	mov	r24, r19
    73a4:	8b 1b       	sub	r24, r27
    73a6:	91 e0       	ldi	r25, 0x01	; 1
    73a8:	38 17       	cp	r19, r24
    73aa:	08 f0       	brcs	.+2      	; 0x73ae <handleMotorsWithSpeedController+0x542>
    73ac:	e6 c0       	rjmp	.+460    	; 0x757a <handleMotorsWithSpeedController+0x70e>
    73ae:	c8 2e       	mov	r12, r24
    73b0:	ce 1a       	sub	r12, r30
    73b2:	e1 e0       	ldi	r30, 0x01	; 1
    73b4:	8c 15       	cp	r24, r12
    73b6:	08 f0       	brcs	.+2      	; 0x73ba <handleMotorsWithSpeedController+0x54e>
    73b8:	d7 c0       	rjmp	.+430    	; 0x7568 <handleMotorsWithSpeedController+0x6fc>
    73ba:	9e 2b       	or	r25, r30
    73bc:	8d 2d       	mov	r24, r13
    73be:	81 95       	neg	r24
    73c0:	e1 e0       	ldi	r30, 0x01	; 1
    73c2:	48 17       	cp	r20, r24
    73c4:	08 f0       	brcs	.+2      	; 0x73c8 <handleMotorsWithSpeedController+0x55c>
    73c6:	c8 c0       	rjmp	.+400    	; 0x7558 <handleMotorsWithSpeedController+0x6ec>
    73c8:	b8 2f       	mov	r27, r24
    73ca:	b9 1b       	sub	r27, r25
    73cc:	91 e0       	ldi	r25, 0x01	; 1
    73ce:	8b 17       	cp	r24, r27
    73d0:	08 f0       	brcs	.+2      	; 0x73d4 <handleMotorsWithSpeedController+0x568>
    73d2:	b9 c0       	rjmp	.+370    	; 0x7546 <handleMotorsWithSpeedController+0x6da>
    73d4:	e9 2b       	or	r30, r25
    73d6:	8b 2d       	mov	r24, r11
    73d8:	81 95       	neg	r24
    73da:	f1 e0       	ldi	r31, 0x01	; 1
    73dc:	58 17       	cp	r21, r24
    73de:	08 f0       	brcs	.+2      	; 0x73e2 <handleMotorsWithSpeedController+0x576>
    73e0:	a9 c0       	rjmp	.+338    	; 0x7534 <handleMotorsWithSpeedController+0x6c8>
    73e2:	98 2f       	mov	r25, r24
    73e4:	9e 1b       	sub	r25, r30
    73e6:	e9 2f       	mov	r30, r25
    73e8:	91 e0       	ldi	r25, 0x01	; 1
    73ea:	8e 17       	cp	r24, r30
    73ec:	08 f0       	brcs	.+2      	; 0x73f0 <handleMotorsWithSpeedController+0x584>
    73ee:	99 c0       	rjmp	.+306    	; 0x7522 <handleMotorsWithSpeedController+0x6b6>
    73f0:	f9 2b       	or	r31, r25
    73f2:	89 2d       	mov	r24, r9
    73f4:	81 95       	neg	r24
    73f6:	91 e0       	ldi	r25, 0x01	; 1
    73f8:	68 17       	cp	r22, r24
    73fa:	08 f0       	brcs	.+2      	; 0x73fe <handleMotorsWithSpeedController+0x592>
    73fc:	8a c0       	rjmp	.+276    	; 0x7512 <handleMotorsWithSpeedController+0x6a6>
    73fe:	38 2f       	mov	r19, r24
    7400:	3f 1b       	sub	r19, r31
    7402:	21 e0       	ldi	r18, 0x01	; 1
    7404:	83 17       	cp	r24, r19
    7406:	08 f0       	brcs	.+2      	; 0x740a <handleMotorsWithSpeedController+0x59e>
    7408:	7d c0       	rjmp	.+250    	; 0x7504 <handleMotorsWithSpeedController+0x698>
    740a:	92 2b       	or	r25, r18
    740c:	a1 95       	neg	r26
    740e:	a9 17       	cp	r26, r25
    7410:	09 f4       	brne	.+2      	; 0x7414 <handleMotorsWithSpeedController+0x5a8>
    7412:	e5 c0       	rjmp	.+458    	; 0x75de <handleMotorsWithSpeedController+0x772>
			speedStepCounter = getTime100MicroSec();
    7414:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    7418:	9b 01       	movw	r18, r22
    741a:	ac 01       	movw	r20, r24
    741c:	60 93 64 04 	sts	0x0464, r22
    7420:	30 93 65 04 	sts	0x0465, r19
    7424:	40 93 66 04 	sts	0x0466, r20
    7428:	50 93 67 04 	sts	0x0467, r21
    742c:	10 92 68 04 	sts	0x0468, r1
    7430:	10 92 69 04 	sts	0x0469, r1
    7434:	10 92 6a 04 	sts	0x046A, r1
    7438:	10 92 6b 04 	sts	0x046B, r1

			if(softAccEnabled) {
    743c:	80 91 6c 04 	lds	r24, 0x046C
    7440:	88 23       	and	r24, r24
    7442:	09 f4       	brne	.+2      	; 0x7446 <handleMotorsWithSpeedController+0x5da>
    7444:	49 c1       	rjmp	.+658    	; 0x76d8 <handleMotorsWithSpeedController+0x86c>
				if(pwm_right_desired == 0) {
    7446:	40 91 f5 02 	lds	r20, 0x02F5
    744a:	50 91 f6 02 	lds	r21, 0x02F6
    744e:	41 15       	cp	r20, r1
    7450:	51 05       	cpc	r21, r1
    7452:	09 f0       	breq	.+2      	; 0x7456 <handleMotorsWithSpeedController+0x5ea>
    7454:	56 c1       	rjmp	.+684    	; 0x7702 <handleMotorsWithSpeedController+0x896>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    7456:	10 92 fa 02 	sts	0x02FA, r1
    745a:	10 92 f9 02 	sts	0x02F9, r1
    745e:	20 e0       	ldi	r18, 0x00	; 0
    7460:	30 e0       	ldi	r19, 0x00	; 0
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    7462:	40 91 f7 02 	lds	r20, 0x02F7
    7466:	50 91 f8 02 	lds	r21, 0x02F8
    746a:	41 15       	cp	r20, r1
    746c:	51 05       	cpc	r21, r1
    746e:	09 f4       	brne	.+2      	; 0x7472 <handleMotorsWithSpeedController+0x606>
    7470:	7f c1       	rjmp	.+766    	; 0x7770 <handleMotorsWithSpeedController+0x904>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    7472:	60 91 fb 02 	lds	r22, 0x02FB
    7476:	70 91 fc 02 	lds	r23, 0x02FC
    747a:	64 9f       	mul	r22, r20
    747c:	c0 01       	movw	r24, r0
    747e:	65 9f       	mul	r22, r21
    7480:	90 0d       	add	r25, r0
    7482:	74 9f       	mul	r23, r20
    7484:	90 0d       	add	r25, r0
    7486:	11 24       	eor	r1, r1
    7488:	97 fd       	sbrc	r25, 7
    748a:	72 c1       	rjmp	.+740    	; 0x7770 <handleMotorsWithSpeedController+0x904>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    748c:	64 17       	cp	r22, r20
    748e:	75 07       	cpc	r23, r21
    7490:	0c f0       	brlt	.+2      	; 0x7494 <handleMotorsWithSpeedController+0x628>
    7492:	75 c1       	rjmp	.+746    	; 0x777e <handleMotorsWithSpeedController+0x912>
					pwm_intermediate_left_desired += speedStep;
    7494:	80 91 13 02 	lds	r24, 0x0213
    7498:	fb 01       	movw	r30, r22
    749a:	e8 0f       	add	r30, r24
    749c:	f1 1d       	adc	r31, r1
    749e:	f0 93 fc 02 	sts	0x02FC, r31
    74a2:	e0 93 fb 02 	sts	0x02FB, r30
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    74a6:	4e 17       	cp	r20, r30
    74a8:	5f 07       	cpc	r21, r31
    74aa:	0c f0       	brlt	.+2      	; 0x74ae <handleMotorsWithSpeedController+0x642>
    74ac:	7b c1       	rjmp	.+758    	; 0x77a4 <handleMotorsWithSpeedController+0x938>
						pwm_intermediate_left_desired = pwm_left_desired;
    74ae:	50 93 fc 02 	sts	0x02FC, r21
    74b2:	40 93 fb 02 	sts	0x02FB, r20
    74b6:	40 91 6e 05 	lds	r20, 0x056E
    74ba:	f1 cc       	rjmp	.-1566   	; 0x6e9e <handleMotorsWithSpeedController+0x32>
void handleMotorsWithSpeedController() {

	handleSoftAcceleration();

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    74bc:	30 93 0a 03 	sts	0x030A, r19
    74c0:	20 93 09 03 	sts	0x0309, r18
		pwm_left_working = pwm_intermediate_left_desired;
    74c4:	80 91 fb 02 	lds	r24, 0x02FB
    74c8:	90 91 fc 02 	lds	r25, 0x02FC
    74cc:	90 93 0c 03 	sts	0x030C, r25
    74d0:	80 93 0b 03 	sts	0x030B, r24
    74d4:	fe cc       	rjmp	.-1540   	; 0x6ed2 <handleMotorsWithSpeedController+0x66>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    74d6:	c2 01       	movw	r24, r4
    74d8:	b1 01       	movw	r22, r2
    74da:	a4 01       	movw	r20, r8
    74dc:	93 01       	movw	r18, r6
    74de:	0e 94 1c 58 	call	0xb038	; 0xb038 <__subsf3>
    74e2:	20 e0       	ldi	r18, 0x00	; 0
    74e4:	30 e0       	ldi	r19, 0x00	; 0
    74e6:	4e e1       	ldi	r20, 0x1E	; 30
    74e8:	52 e4       	ldi	r21, 0x42	; 66
    74ea:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divsf3>
    74ee:	60 93 77 04 	sts	0x0477, r22
    74f2:	70 93 78 04 	sts	0x0478, r23
    74f6:	80 93 79 04 	sts	0x0479, r24
    74fa:	90 93 7a 04 	sts	0x047A, r25
    74fe:	7b 01       	movw	r14, r22
    7500:	8c 01       	movw	r16, r24
    7502:	06 ce       	rjmp	.-1012   	; 0x7110 <handleMotorsWithSpeedController+0x2a4>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    7504:	20 e0       	ldi	r18, 0x00	; 0
    7506:	92 2b       	or	r25, r18
    7508:	a1 95       	neg	r26
    750a:	a9 17       	cp	r26, r25
    750c:	09 f0       	breq	.+2      	; 0x7510 <handleMotorsWithSpeedController+0x6a4>
    750e:	82 cf       	rjmp	.-252    	; 0x7414 <handleMotorsWithSpeedController+0x5a8>
    7510:	66 c0       	rjmp	.+204    	; 0x75de <handleMotorsWithSpeedController+0x772>
    7512:	90 e0       	ldi	r25, 0x00	; 0
    7514:	38 2f       	mov	r19, r24
    7516:	3f 1b       	sub	r19, r31
    7518:	21 e0       	ldi	r18, 0x01	; 1
    751a:	83 17       	cp	r24, r19
    751c:	08 f4       	brcc	.+2      	; 0x7520 <handleMotorsWithSpeedController+0x6b4>
    751e:	75 cf       	rjmp	.-278    	; 0x740a <handleMotorsWithSpeedController+0x59e>
    7520:	f1 cf       	rjmp	.-30     	; 0x7504 <handleMotorsWithSpeedController+0x698>
    7522:	90 e0       	ldi	r25, 0x00	; 0
    7524:	f9 2b       	or	r31, r25
    7526:	89 2d       	mov	r24, r9
    7528:	81 95       	neg	r24
    752a:	91 e0       	ldi	r25, 0x01	; 1
    752c:	68 17       	cp	r22, r24
    752e:	08 f4       	brcc	.+2      	; 0x7532 <handleMotorsWithSpeedController+0x6c6>
    7530:	66 cf       	rjmp	.-308    	; 0x73fe <handleMotorsWithSpeedController+0x592>
    7532:	ef cf       	rjmp	.-34     	; 0x7512 <handleMotorsWithSpeedController+0x6a6>
    7534:	f0 e0       	ldi	r31, 0x00	; 0
    7536:	98 2f       	mov	r25, r24
    7538:	9e 1b       	sub	r25, r30
    753a:	e9 2f       	mov	r30, r25
    753c:	91 e0       	ldi	r25, 0x01	; 1
    753e:	8e 17       	cp	r24, r30
    7540:	08 f4       	brcc	.+2      	; 0x7544 <handleMotorsWithSpeedController+0x6d8>
    7542:	56 cf       	rjmp	.-340    	; 0x73f0 <handleMotorsWithSpeedController+0x584>
    7544:	ee cf       	rjmp	.-36     	; 0x7522 <handleMotorsWithSpeedController+0x6b6>
    7546:	90 e0       	ldi	r25, 0x00	; 0
    7548:	e9 2b       	or	r30, r25
    754a:	8b 2d       	mov	r24, r11
    754c:	81 95       	neg	r24
    754e:	f1 e0       	ldi	r31, 0x01	; 1
    7550:	58 17       	cp	r21, r24
    7552:	08 f4       	brcc	.+2      	; 0x7556 <handleMotorsWithSpeedController+0x6ea>
    7554:	46 cf       	rjmp	.-372    	; 0x73e2 <handleMotorsWithSpeedController+0x576>
    7556:	ee cf       	rjmp	.-36     	; 0x7534 <handleMotorsWithSpeedController+0x6c8>
    7558:	e0 e0       	ldi	r30, 0x00	; 0
    755a:	b8 2f       	mov	r27, r24
    755c:	b9 1b       	sub	r27, r25
    755e:	91 e0       	ldi	r25, 0x01	; 1
    7560:	8b 17       	cp	r24, r27
    7562:	08 f4       	brcc	.+2      	; 0x7566 <handleMotorsWithSpeedController+0x6fa>
    7564:	37 cf       	rjmp	.-402    	; 0x73d4 <handleMotorsWithSpeedController+0x568>
    7566:	ef cf       	rjmp	.-34     	; 0x7546 <handleMotorsWithSpeedController+0x6da>
    7568:	e0 e0       	ldi	r30, 0x00	; 0
    756a:	9e 2b       	or	r25, r30
    756c:	8d 2d       	mov	r24, r13
    756e:	81 95       	neg	r24
    7570:	e1 e0       	ldi	r30, 0x01	; 1
    7572:	48 17       	cp	r20, r24
    7574:	08 f4       	brcc	.+2      	; 0x7578 <handleMotorsWithSpeedController+0x70c>
    7576:	28 cf       	rjmp	.-432    	; 0x73c8 <handleMotorsWithSpeedController+0x55c>
    7578:	ef cf       	rjmp	.-34     	; 0x7558 <handleMotorsWithSpeedController+0x6ec>
    757a:	90 e0       	ldi	r25, 0x00	; 0
    757c:	c8 2e       	mov	r12, r24
    757e:	ce 1a       	sub	r12, r30
    7580:	e1 e0       	ldi	r30, 0x01	; 1
    7582:	8c 15       	cp	r24, r12
    7584:	08 f4       	brcc	.+2      	; 0x7588 <handleMotorsWithSpeedController+0x71c>
    7586:	19 cf       	rjmp	.-462    	; 0x73ba <handleMotorsWithSpeedController+0x54e>
    7588:	ef cf       	rjmp	.-34     	; 0x7568 <handleMotorsWithSpeedController+0x6fc>
    758a:	90 e0       	ldi	r25, 0x00	; 0
    758c:	e9 2b       	or	r30, r25
    758e:	83 2f       	mov	r24, r19
    7590:	8b 1b       	sub	r24, r27
    7592:	91 e0       	ldi	r25, 0x01	; 1
    7594:	38 17       	cp	r19, r24
    7596:	08 f4       	brcc	.+2      	; 0x759a <handleMotorsWithSpeedController+0x72e>
    7598:	0a cf       	rjmp	.-492    	; 0x73ae <handleMotorsWithSpeedController+0x542>
    759a:	ef cf       	rjmp	.-34     	; 0x757a <handleMotorsWithSpeedController+0x70e>
    759c:	e0 e0       	ldi	r30, 0x00	; 0
    759e:	a8 2e       	mov	r10, r24
    75a0:	a9 1a       	sub	r10, r25
    75a2:	91 e0       	ldi	r25, 0x01	; 1
    75a4:	8a 15       	cp	r24, r10
    75a6:	08 f4       	brcc	.+2      	; 0x75aa <handleMotorsWithSpeedController+0x73e>
    75a8:	fb ce       	rjmp	.-522    	; 0x73a0 <handleMotorsWithSpeedController+0x534>
    75aa:	ef cf       	rjmp	.-34     	; 0x758a <handleMotorsWithSpeedController+0x71e>
    75ac:	e0 e0       	ldi	r30, 0x00	; 0
    75ae:	9e 2b       	or	r25, r30
    75b0:	82 2f       	mov	r24, r18
    75b2:	8f 1b       	sub	r24, r31
    75b4:	e1 e0       	ldi	r30, 0x01	; 1
    75b6:	28 17       	cp	r18, r24
    75b8:	08 f4       	brcc	.+2      	; 0x75bc <handleMotorsWithSpeedController+0x750>
    75ba:	ec ce       	rjmp	.-552    	; 0x7394 <handleMotorsWithSpeedController+0x528>
    75bc:	ef cf       	rjmp	.-34     	; 0x759c <handleMotorsWithSpeedController+0x730>
    75be:	90 e0       	ldi	r25, 0x00	; 0
    75c0:	e8 2e       	mov	r14, r24
    75c2:	ee 1a       	sub	r14, r30
    75c4:	e1 e0       	ldi	r30, 0x01	; 1
    75c6:	8e 15       	cp	r24, r14
    75c8:	08 f4       	brcc	.+2      	; 0x75cc <handleMotorsWithSpeedController+0x760>
    75ca:	dd ce       	rjmp	.-582    	; 0x7386 <handleMotorsWithSpeedController+0x51a>
    75cc:	ef cf       	rjmp	.-34     	; 0x75ac <handleMotorsWithSpeedController+0x740>
    75ce:	e0 e0       	ldi	r30, 0x00	; 0
    75d0:	81 2f       	mov	r24, r17
    75d2:	89 1b       	sub	r24, r25
    75d4:	91 e0       	ldi	r25, 0x01	; 1
    75d6:	18 17       	cp	r17, r24
    75d8:	08 f4       	brcc	.+2      	; 0x75dc <handleMotorsWithSpeedController+0x770>
    75da:	cf ce       	rjmp	.-610    	; 0x737a <handleMotorsWithSpeedController+0x50e>
    75dc:	f0 cf       	rjmp	.-32     	; 0x75be <handleMotorsWithSpeedController+0x752>
    75de:	33 23       	and	r19, r19
    75e0:	09 f0       	breq	.+2      	; 0x75e4 <handleMotorsWithSpeedController+0x778>
    75e2:	18 cf       	rjmp	.-464    	; 0x7414 <handleMotorsWithSpeedController+0x5a8>
    75e4:	ee 23       	and	r30, r30
    75e6:	09 f0       	breq	.+2      	; 0x75ea <handleMotorsWithSpeedController+0x77e>
    75e8:	15 cf       	rjmp	.-470    	; 0x7414 <handleMotorsWithSpeedController+0x5a8>
    75ea:	bb 23       	and	r27, r27
    75ec:	09 f0       	breq	.+2      	; 0x75f0 <handleMotorsWithSpeedController+0x784>
    75ee:	12 cf       	rjmp	.-476    	; 0x7414 <handleMotorsWithSpeedController+0x5a8>
    75f0:	cc 20       	and	r12, r12
    75f2:	09 f0       	breq	.+2      	; 0x75f6 <handleMotorsWithSpeedController+0x78a>
    75f4:	0f cf       	rjmp	.-482    	; 0x7414 <handleMotorsWithSpeedController+0x5a8>
    75f6:	aa 20       	and	r10, r10
    75f8:	09 f0       	breq	.+2      	; 0x75fc <handleMotorsWithSpeedController+0x790>
    75fa:	0c cf       	rjmp	.-488    	; 0x7414 <handleMotorsWithSpeedController+0x5a8>
    75fc:	e1 e0       	ldi	r30, 0x01	; 1
    75fe:	ee 15       	cp	r30, r14
    7600:	08 f4       	brcc	.+2      	; 0x7604 <handleMotorsWithSpeedController+0x798>
    7602:	08 cf       	rjmp	.-496    	; 0x7414 <handleMotorsWithSpeedController+0x5a8>
    7604:	ee 16       	cp	r14, r30
    7606:	09 f4       	brne	.+2      	; 0x760a <handleMotorsWithSpeedController+0x79e>
    7608:	e4 c0       	rjmp	.+456    	; 0x77d2 <handleMotorsWithSpeedController+0x966>
    760a:	40 91 6e 05 	lds	r20, 0x056E
    760e:	20 91 f9 02 	lds	r18, 0x02F9
    7612:	30 91 fa 02 	lds	r19, 0x02FA
    7616:	43 cc       	rjmp	.-1914   	; 0x6e9e <handleMotorsWithSpeedController+0x32>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    7618:	c9 01       	movw	r24, r18
    761a:	aa 27       	eor	r26, r26
    761c:	97 fd       	sbrc	r25, 7
    761e:	a0 95       	com	r26
    7620:	ba 2f       	mov	r27, r26
    7622:	20 91 b4 04 	lds	r18, 0x04B4
    7626:	30 91 b5 04 	lds	r19, 0x04B5
    762a:	40 91 b6 04 	lds	r20, 0x04B6
    762e:	50 91 b7 04 	lds	r21, 0x04B7
    7632:	28 0f       	add	r18, r24
    7634:	39 1f       	adc	r19, r25
    7636:	4a 1f       	adc	r20, r26
    7638:	5b 1f       	adc	r21, r27
    763a:	20 93 b4 04 	sts	0x04B4, r18
    763e:	30 93 b5 04 	sts	0x04B5, r19
    7642:	40 93 b6 04 	sts	0x04B6, r20
    7646:	50 93 b7 04 	sts	0x04B7, r21
			rightSumCount++;
    764a:	80 91 ba 04 	lds	r24, 0x04BA
    764e:	90 91 bb 04 	lds	r25, 0x04BB
    7652:	01 96       	adiw	r24, 0x01	; 1
    7654:	90 93 bb 04 	sts	0x04BB, r25
    7658:	80 93 ba 04 	sts	0x04BA, r24
    765c:	de cd       	rjmp	.-1092   	; 0x721a <handleMotorsWithSpeedController+0x3ae>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    765e:	c9 01       	movw	r24, r18
    7660:	aa 27       	eor	r26, r26
    7662:	97 fd       	sbrc	r25, 7
    7664:	a0 95       	com	r26
    7666:	ba 2f       	mov	r27, r26
    7668:	20 91 b0 04 	lds	r18, 0x04B0
    766c:	30 91 b1 04 	lds	r19, 0x04B1
    7670:	40 91 b2 04 	lds	r20, 0x04B2
    7674:	50 91 b3 04 	lds	r21, 0x04B3
    7678:	28 0f       	add	r18, r24
    767a:	39 1f       	adc	r19, r25
    767c:	4a 1f       	adc	r20, r26
    767e:	5b 1f       	adc	r21, r27
    7680:	20 93 b0 04 	sts	0x04B0, r18
    7684:	30 93 b1 04 	sts	0x04B1, r19
    7688:	40 93 b2 04 	sts	0x04B2, r20
    768c:	50 93 b3 04 	sts	0x04B3, r21
			leftSumCount++;
    7690:	80 91 b8 04 	lds	r24, 0x04B8
    7694:	90 91 b9 04 	lds	r25, 0x04B9
    7698:	01 96       	adiw	r24, 0x01	; 1
    769a:	90 93 b9 04 	sts	0x04B9, r25
    769e:	80 93 b8 04 	sts	0x04B8, r24
    76a2:	48 cc       	rjmp	.-1904   	; 0x6f34 <handleMotorsWithSpeedController+0xc8>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    76a4:	21 15       	cp	r18, r1
    76a6:	31 05       	cpc	r19, r1
    76a8:	09 f0       	breq	.+2      	; 0x76ac <handleMotorsWithSpeedController+0x840>
    76aa:	59 c0       	rjmp	.+178    	; 0x775e <handleMotorsWithSpeedController+0x8f2>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    76ac:	10 92 a9 00 	sts	0x00A9, r1
    76b0:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    76b4:	10 92 ab 00 	sts	0x00AB, r1
    76b8:	10 92 aa 00 	sts	0x00AA, r1
    76bc:	c1 cc       	rjmp	.-1662   	; 0x7040 <handleMotorsWithSpeedController+0x1d4>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    76be:	21 15       	cp	r18, r1
    76c0:	31 05       	cpc	r19, r1
    76c2:	09 f0       	breq	.+2      	; 0x76c6 <handleMotorsWithSpeedController+0x85a>
    76c4:	43 c0       	rjmp	.+134    	; 0x774c <handleMotorsWithSpeedController+0x8e0>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    76c6:	10 92 99 00 	sts	0x0099, r1
    76ca:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    76ce:	10 92 9b 00 	sts	0x009B, r1
    76d2:	10 92 9a 00 	sts	0x009A, r1
    76d6:	27 ce       	rjmp	.-946    	; 0x7326 <handleMotorsWithSpeedController+0x4ba>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    76d8:	20 91 f5 02 	lds	r18, 0x02F5
    76dc:	30 91 f6 02 	lds	r19, 0x02F6
    76e0:	20 93 f9 02 	sts	0x02F9, r18
    76e4:	30 93 fa 02 	sts	0x02FA, r19
				pwm_intermediate_left_desired = pwm_left_desired;
    76e8:	80 91 f7 02 	lds	r24, 0x02F7
    76ec:	90 91 f8 02 	lds	r25, 0x02F8
    76f0:	90 93 fc 02 	sts	0x02FC, r25
    76f4:	80 93 fb 02 	sts	0x02FB, r24
    76f8:	40 91 6e 05 	lds	r20, 0x056E
    76fc:	c9 01       	movw	r24, r18
    76fe:	9c 01       	movw	r18, r24
    7700:	ce cb       	rjmp	.-2148   	; 0x6e9e <handleMotorsWithSpeedController+0x32>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    7702:	20 91 f9 02 	lds	r18, 0x02F9
    7706:	30 91 fa 02 	lds	r19, 0x02FA
    770a:	24 9f       	mul	r18, r20
    770c:	c0 01       	movw	r24, r0
    770e:	25 9f       	mul	r18, r21
    7710:	90 0d       	add	r25, r0
    7712:	34 9f       	mul	r19, r20
    7714:	90 0d       	add	r25, r0
    7716:	11 24       	eor	r1, r1
    7718:	97 fd       	sbrc	r25, 7
    771a:	9d ce       	rjmp	.-710    	; 0x7456 <handleMotorsWithSpeedController+0x5ea>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    771c:	24 17       	cp	r18, r20
    771e:	35 07       	cpc	r19, r21
    7720:	0c f0       	brlt	.+2      	; 0x7724 <handleMotorsWithSpeedController+0x8b8>
    7722:	43 c0       	rjmp	.+134    	; 0x77aa <handleMotorsWithSpeedController+0x93e>
					pwm_intermediate_right_desired += speedStep;
    7724:	80 91 13 02 	lds	r24, 0x0213
    7728:	b9 01       	movw	r22, r18
    772a:	68 0f       	add	r22, r24
    772c:	71 1d       	adc	r23, r1
    772e:	cb 01       	movw	r24, r22
    7730:	70 93 fa 02 	sts	0x02FA, r23
    7734:	60 93 f9 02 	sts	0x02F9, r22
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    7738:	46 17       	cp	r20, r22
    773a:	57 07       	cpc	r21, r23
    773c:	0c f0       	brlt	.+2      	; 0x7740 <handleMotorsWithSpeedController+0x8d4>
    773e:	47 c0       	rjmp	.+142    	; 0x77ce <handleMotorsWithSpeedController+0x962>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    7740:	50 93 fa 02 	sts	0x02FA, r21
    7744:	40 93 f9 02 	sts	0x02F9, r20
    7748:	9a 01       	movw	r18, r20
    774a:	8b ce       	rjmp	.-746    	; 0x7462 <handleMotorsWithSpeedController+0x5f6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    774c:	88 27       	eor	r24, r24
    774e:	99 27       	eor	r25, r25
    7750:	82 1b       	sub	r24, r18
    7752:	93 0b       	sbc	r25, r19
    7754:	90 93 9b 00 	sts	0x009B, r25
    7758:	80 93 9a 00 	sts	0x009A, r24
    775c:	e4 cd       	rjmp	.-1080   	; 0x7326 <handleMotorsWithSpeedController+0x4ba>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    775e:	88 27       	eor	r24, r24
    7760:	99 27       	eor	r25, r25
    7762:	82 1b       	sub	r24, r18
    7764:	93 0b       	sbc	r25, r19
    7766:	90 93 ab 00 	sts	0x00AB, r25
    776a:	80 93 aa 00 	sts	0x00AA, r24
    776e:	68 cc       	rjmp	.-1840   	; 0x7040 <handleMotorsWithSpeedController+0x1d4>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    7770:	10 92 fc 02 	sts	0x02FC, r1
    7774:	10 92 fb 02 	sts	0x02FB, r1
    7778:	40 91 6e 05 	lds	r20, 0x056E
    777c:	90 cb       	rjmp	.-2272   	; 0x6e9e <handleMotorsWithSpeedController+0x32>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    777e:	46 17       	cp	r20, r22
    7780:	57 07       	cpc	r21, r23
    7782:	84 f4       	brge	.+32     	; 0x77a4 <handleMotorsWithSpeedController+0x938>
					pwm_intermediate_left_desired -= speedStep;
    7784:	80 91 13 02 	lds	r24, 0x0213
    7788:	fb 01       	movw	r30, r22
    778a:	e8 1b       	sub	r30, r24
    778c:	f1 09       	sbc	r31, r1
    778e:	f0 93 fc 02 	sts	0x02FC, r31
    7792:	e0 93 fb 02 	sts	0x02FB, r30
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    7796:	e4 17       	cp	r30, r20
    7798:	f5 07       	cpc	r31, r21
    779a:	24 f4       	brge	.+8      	; 0x77a4 <handleMotorsWithSpeedController+0x938>
						pwm_intermediate_left_desired = pwm_left_desired;
    779c:	50 93 fc 02 	sts	0x02FC, r21
    77a0:	40 93 fb 02 	sts	0x02FB, r20
    77a4:	40 91 6e 05 	lds	r20, 0x056E
    77a8:	7a cb       	rjmp	.-2316   	; 0x6e9e <handleMotorsWithSpeedController+0x32>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    77aa:	42 17       	cp	r20, r18
    77ac:	53 07       	cpc	r21, r19
    77ae:	0c f0       	brlt	.+2      	; 0x77b2 <handleMotorsWithSpeedController+0x946>
    77b0:	58 ce       	rjmp	.-848    	; 0x7462 <handleMotorsWithSpeedController+0x5f6>
					pwm_intermediate_right_desired -= speedStep;
    77b2:	80 91 13 02 	lds	r24, 0x0213
    77b6:	f9 01       	movw	r30, r18
    77b8:	e8 1b       	sub	r30, r24
    77ba:	f1 09       	sbc	r31, r1
    77bc:	cf 01       	movw	r24, r30
    77be:	f0 93 fa 02 	sts	0x02FA, r31
    77c2:	e0 93 f9 02 	sts	0x02F9, r30
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    77c6:	e4 17       	cp	r30, r20
    77c8:	f5 07       	cpc	r31, r21
    77ca:	0c f4       	brge	.+2      	; 0x77ce <handleMotorsWithSpeedController+0x962>
    77cc:	b9 cf       	rjmp	.-142    	; 0x7740 <handleMotorsWithSpeedController+0x8d4>
    77ce:	9c 01       	movw	r18, r24
    77d0:	48 ce       	rjmp	.-880    	; 0x7462 <handleMotorsWithSpeedController+0x5f6>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    77d2:	ff e8       	ldi	r31, 0x8F	; 143
    77d4:	f8 15       	cp	r31, r8
    77d6:	08 f4       	brcc	.+2      	; 0x77da <handleMotorsWithSpeedController+0x96e>
    77d8:	1d ce       	rjmp	.-966    	; 0x7414 <handleMotorsWithSpeedController+0x5a8>
    77da:	40 91 6e 05 	lds	r20, 0x056E
    77de:	5b cb       	rjmp	.-2378   	; 0x6e96 <handleMotorsWithSpeedController+0x2a>

000077e0 <handleMotorsWithNoController>:
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}

void handleMotorsWithNoController() {
    77e0:	9f 92       	push	r9
    77e2:	af 92       	push	r10
    77e4:	bf 92       	push	r11
    77e6:	cf 92       	push	r12
    77e8:	df 92       	push	r13
    77ea:	ef 92       	push	r14
    77ec:	ff 92       	push	r15
    77ee:	0f 93       	push	r16
    77f0:	1f 93       	push	r17
    77f2:	cf 93       	push	r28
    77f4:	df 93       	push	r29
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
    77f6:	80 91 6e 05 	lds	r24, 0x056E
    77fa:	88 23       	and	r24, r24
    77fc:	09 f4       	brne	.+2      	; 0x7800 <handleMotorsWithNoController+0x20>
    77fe:	c9 c0       	rjmp	.+402    	; 0x7992 <handleMotorsWithNoController+0x1b2>
    7800:	c0 91 f9 02 	lds	r28, 0x02F9
    7804:	d0 91 fa 02 	lds	r29, 0x02FA
    7808:	00 91 fb 02 	lds	r16, 0x02FB
    780c:	10 91 fc 02 	lds	r17, 0x02FC
void handleMotorsWithNoController() {

	handleSoftAcceleration();

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    7810:	80 91 03 02 	lds	r24, 0x0203
    7814:	88 23       	and	r24, r24
    7816:	c9 f1       	breq	.+114    	; 0x788a <handleMotorsWithNoController+0xaa>
		last_left_vel = left_vel_sum>>2;
    7818:	20 91 e9 02 	lds	r18, 0x02E9
    781c:	30 91 ea 02 	lds	r19, 0x02EA
    7820:	36 95       	lsr	r19
    7822:	27 95       	ror	r18
    7824:	36 95       	lsr	r19
    7826:	27 95       	ror	r18
    7828:	30 93 ee 02 	sts	0x02EE, r19
    782c:	20 93 ed 02 	sts	0x02ED, r18
		compute_left_vel = 0;
    7830:	10 92 03 02 	sts	0x0203, r1
		left_vel_sum = 0;
    7834:	10 92 ea 02 	sts	0x02EA, r1
    7838:	10 92 e9 02 	sts	0x02E9, r1

		if(pwm_left_desired >= 0) {
    783c:	80 91 f7 02 	lds	r24, 0x02F7
    7840:	90 91 f8 02 	lds	r25, 0x02F8
    7844:	97 fd       	sbrc	r25, 7
    7846:	35 c2       	rjmp	.+1130   	; 0x7cb2 <handleMotorsWithNoController+0x4d2>
			leftMotSteps += (last_left_vel>>3);
    7848:	35 95       	asr	r19
    784a:	27 95       	ror	r18
    784c:	35 95       	asr	r19
    784e:	27 95       	ror	r18
    7850:	35 95       	asr	r19
    7852:	27 95       	ror	r18
    7854:	b9 01       	movw	r22, r18
    7856:	88 27       	eor	r24, r24
    7858:	77 fd       	sbrc	r23, 7
    785a:	80 95       	com	r24
    785c:	98 2f       	mov	r25, r24
    785e:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    7862:	9b 01       	movw	r18, r22
    7864:	ac 01       	movw	r20, r24
    7866:	60 91 d1 02 	lds	r22, 0x02D1
    786a:	70 91 d2 02 	lds	r23, 0x02D2
    786e:	80 91 d3 02 	lds	r24, 0x02D3
    7872:	90 91 d4 02 	lds	r25, 0x02D4
    7876:	0e 94 1d 58 	call	0xb03a	; 0xb03a <__addsf3>
    787a:	60 93 d1 02 	sts	0x02D1, r22
    787e:	70 93 d2 02 	sts	0x02D2, r23
    7882:	80 93 d3 02 	sts	0x02D3, r24
    7886:	90 93 d4 02 	sts	0x02D4, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    788a:	80 91 04 02 	lds	r24, 0x0204
    788e:	88 23       	and	r24, r24
    7890:	c9 f1       	breq	.+114    	; 0x7904 <handleMotorsWithNoController+0x124>
		last_right_vel = right_vel_sum>>2;
    7892:	20 91 eb 02 	lds	r18, 0x02EB
    7896:	30 91 ec 02 	lds	r19, 0x02EC
    789a:	36 95       	lsr	r19
    789c:	27 95       	ror	r18
    789e:	36 95       	lsr	r19
    78a0:	27 95       	ror	r18
    78a2:	30 93 f0 02 	sts	0x02F0, r19
    78a6:	20 93 ef 02 	sts	0x02EF, r18
		compute_right_vel = 0;
    78aa:	10 92 04 02 	sts	0x0204, r1
		right_vel_sum = 0;
    78ae:	10 92 ec 02 	sts	0x02EC, r1
    78b2:	10 92 eb 02 	sts	0x02EB, r1

		if(pwm_right_desired >= 0) {
    78b6:	80 91 f5 02 	lds	r24, 0x02F5
    78ba:	90 91 f6 02 	lds	r25, 0x02F6
    78be:	97 fd       	sbrc	r25, 7
    78c0:	d6 c1       	rjmp	.+940    	; 0x7c6e <handleMotorsWithNoController+0x48e>
			rightMotSteps += (last_right_vel>>3);
    78c2:	35 95       	asr	r19
    78c4:	27 95       	ror	r18
    78c6:	35 95       	asr	r19
    78c8:	27 95       	ror	r18
    78ca:	35 95       	asr	r19
    78cc:	27 95       	ror	r18
    78ce:	b9 01       	movw	r22, r18
    78d0:	88 27       	eor	r24, r24
    78d2:	77 fd       	sbrc	r23, 7
    78d4:	80 95       	com	r24
    78d6:	98 2f       	mov	r25, r24
    78d8:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    78dc:	9b 01       	movw	r18, r22
    78de:	ac 01       	movw	r20, r24
    78e0:	60 91 cd 02 	lds	r22, 0x02CD
    78e4:	70 91 ce 02 	lds	r23, 0x02CE
    78e8:	80 91 cf 02 	lds	r24, 0x02CF
    78ec:	90 91 d0 02 	lds	r25, 0x02D0
    78f0:	0e 94 1d 58 	call	0xb03a	; 0xb03a <__addsf3>
    78f4:	60 93 cd 02 	sts	0x02CD, r22
    78f8:	70 93 ce 02 	sts	0x02CE, r23
    78fc:	80 93 cf 02 	sts	0x02CF, r24
    7900:	90 93 d0 02 	sts	0x02D0, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    7904:	ce 01       	movw	r24, r28
    7906:	88 0f       	add	r24, r24
    7908:	99 1f       	adc	r25, r25
    790a:	88 0f       	add	r24, r24
    790c:	99 1f       	adc	r25, r25
    790e:	8c 0f       	add	r24, r28
    7910:	9d 1f       	adc	r25, r29
    7912:	90 93 0a 03 	sts	0x030A, r25
    7916:	80 93 09 03 	sts	0x0309, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    791a:	c8 01       	movw	r24, r16
    791c:	88 0f       	add	r24, r24
    791e:	99 1f       	adc	r25, r25
    7920:	88 0f       	add	r24, r24
    7922:	99 1f       	adc	r25, r25
    7924:	80 0f       	add	r24, r16
    7926:	91 1f       	adc	r25, r17
    7928:	90 93 0c 03 	sts	0x030C, r25
    792c:	80 93 0b 03 	sts	0x030B, r24
	if(obstacleAvoidanceEnabled) {
    7930:	80 91 74 04 	lds	r24, 0x0474
    7934:	88 23       	and	r24, r24
    7936:	09 f0       	breq	.+2      	; 0x793a <handleMotorsWithNoController+0x15a>
    7938:	fe c0       	rjmp	.+508    	; 0x7b36 <handleMotorsWithNoController+0x356>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    793a:	40 91 0b 03 	lds	r20, 0x030B
    793e:	50 91 0c 03 	lds	r21, 0x030C
    7942:	50 93 f4 02 	sts	0x02F4, r21
    7946:	40 93 f3 02 	sts	0x02F3, r20
	pwm_right = pwm_right_working;
    794a:	20 91 09 03 	lds	r18, 0x0309
    794e:	30 91 0a 03 	lds	r19, 0x030A
    7952:	30 93 f2 02 	sts	0x02F2, r19
    7956:	20 93 f1 02 	sts	0x02F1, r18

	if(pwm_right > 0) {
    795a:	12 16       	cp	r1, r18
    795c:	13 06       	cpc	r1, r19
    795e:	0c f0       	brlt	.+2      	; 0x7962 <handleMotorsWithNoController+0x182>
    7960:	f1 c0       	rjmp	.+482    	; 0x7b44 <handleMotorsWithNoController+0x364>
		OCR3A = (unsigned int)pwm_right;
    7962:	30 93 99 00 	sts	0x0099, r19
    7966:	20 93 98 00 	sts	0x0098, r18
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    796a:	14 16       	cp	r1, r20
    796c:	15 06       	cpc	r1, r21
    796e:	0c f0       	brlt	.+2      	; 0x7972 <handleMotorsWithNoController+0x192>
    7970:	d5 c0       	rjmp	.+426    	; 0x7b1c <handleMotorsWithNoController+0x33c>
		OCR4A = (unsigned int)pwm_left;
    7972:	50 93 a9 00 	sts	0x00A9, r21
    7976:	40 93 a8 00 	sts	0x00A8, r20
	} else {
		OCR4A = 0;
		OCR4B = 0;
	}

}
    797a:	df 91       	pop	r29
    797c:	cf 91       	pop	r28
    797e:	1f 91       	pop	r17
    7980:	0f 91       	pop	r16
    7982:	ff 90       	pop	r15
    7984:	ef 90       	pop	r14
    7986:	df 90       	pop	r13
    7988:	cf 90       	pop	r12
    798a:	bf 90       	pop	r11
    798c:	af 90       	pop	r10
    798e:	9f 90       	pop	r9
    7990:	08 95       	ret
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    7992:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    7996:	8b 01       	movw	r16, r22
    7998:	9c 01       	movw	r18, r24
    799a:	40 e0       	ldi	r20, 0x00	; 0
    799c:	50 e0       	ldi	r21, 0x00	; 0
    799e:	60 e0       	ldi	r22, 0x00	; 0
    79a0:	70 e0       	ldi	r23, 0x00	; 0
    79a2:	80 91 64 04 	lds	r24, 0x0464
    79a6:	90 91 65 04 	lds	r25, 0x0465
    79aa:	f0 91 66 04 	lds	r31, 0x0466
    79ae:	b0 91 67 04 	lds	r27, 0x0467
    79b2:	e0 90 68 04 	lds	r14, 0x0468
    79b6:	c0 90 69 04 	lds	r12, 0x0469
    79ba:	a0 90 6a 04 	lds	r10, 0x046A
    79be:	a0 91 6b 04 	lds	r26, 0x046B
    79c2:	90 2e       	mov	r9, r16
    79c4:	98 1a       	sub	r9, r24
    79c6:	e1 e0       	ldi	r30, 0x01	; 1
    79c8:	09 15       	cp	r16, r9
    79ca:	08 f0       	brcs	.+2      	; 0x79ce <handleMotorsWithNoController+0x1ee>
    79cc:	2d c1       	rjmp	.+602    	; 0x7c28 <handleMotorsWithNoController+0x448>
    79ce:	81 2f       	mov	r24, r17
    79d0:	89 1b       	sub	r24, r25
    79d2:	91 e0       	ldi	r25, 0x01	; 1
    79d4:	18 17       	cp	r17, r24
    79d6:	08 f0       	brcs	.+2      	; 0x79da <handleMotorsWithNoController+0x1fa>
    79d8:	1f c1       	rjmp	.+574    	; 0x7c18 <handleMotorsWithNoController+0x438>
    79da:	f8 2e       	mov	r15, r24
    79dc:	fe 1a       	sub	r15, r30
    79de:	e1 e0       	ldi	r30, 0x01	; 1
    79e0:	8f 15       	cp	r24, r15
    79e2:	08 f0       	brcs	.+2      	; 0x79e6 <handleMotorsWithNoController+0x206>
    79e4:	10 c1       	rjmp	.+544    	; 0x7c06 <handleMotorsWithNoController+0x426>
    79e6:	9e 2b       	or	r25, r30
    79e8:	82 2f       	mov	r24, r18
    79ea:	8f 1b       	sub	r24, r31
    79ec:	e1 e0       	ldi	r30, 0x01	; 1
    79ee:	28 17       	cp	r18, r24
    79f0:	08 f0       	brcs	.+2      	; 0x79f4 <handleMotorsWithNoController+0x214>
    79f2:	01 c1       	rjmp	.+514    	; 0x7bf6 <handleMotorsWithNoController+0x416>
    79f4:	b8 2e       	mov	r11, r24
    79f6:	b9 1a       	sub	r11, r25
    79f8:	91 e0       	ldi	r25, 0x01	; 1
    79fa:	8b 15       	cp	r24, r11
    79fc:	08 f0       	brcs	.+2      	; 0x7a00 <handleMotorsWithNoController+0x220>
    79fe:	f2 c0       	rjmp	.+484    	; 0x7be4 <handleMotorsWithNoController+0x404>
    7a00:	e9 2b       	or	r30, r25
    7a02:	83 2f       	mov	r24, r19
    7a04:	8b 1b       	sub	r24, r27
    7a06:	91 e0       	ldi	r25, 0x01	; 1
    7a08:	38 17       	cp	r19, r24
    7a0a:	08 f0       	brcs	.+2      	; 0x7a0e <handleMotorsWithNoController+0x22e>
    7a0c:	e3 c0       	rjmp	.+454    	; 0x7bd4 <handleMotorsWithNoController+0x3f4>
    7a0e:	d8 2e       	mov	r13, r24
    7a10:	de 1a       	sub	r13, r30
    7a12:	e1 e0       	ldi	r30, 0x01	; 1
    7a14:	8d 15       	cp	r24, r13
    7a16:	08 f0       	brcs	.+2      	; 0x7a1a <handleMotorsWithNoController+0x23a>
    7a18:	d4 c0       	rjmp	.+424    	; 0x7bc2 <handleMotorsWithNoController+0x3e2>
    7a1a:	9e 2b       	or	r25, r30
    7a1c:	8e 2d       	mov	r24, r14
    7a1e:	81 95       	neg	r24
    7a20:	e1 e0       	ldi	r30, 0x01	; 1
    7a22:	48 17       	cp	r20, r24
    7a24:	08 f0       	brcs	.+2      	; 0x7a28 <handleMotorsWithNoController+0x248>
    7a26:	c5 c0       	rjmp	.+394    	; 0x7bb2 <handleMotorsWithNoController+0x3d2>
    7a28:	b8 2f       	mov	r27, r24
    7a2a:	b9 1b       	sub	r27, r25
    7a2c:	91 e0       	ldi	r25, 0x01	; 1
    7a2e:	8b 17       	cp	r24, r27
    7a30:	08 f0       	brcs	.+2      	; 0x7a34 <handleMotorsWithNoController+0x254>
    7a32:	b6 c0       	rjmp	.+364    	; 0x7ba0 <handleMotorsWithNoController+0x3c0>
    7a34:	e9 2b       	or	r30, r25
    7a36:	8c 2d       	mov	r24, r12
    7a38:	81 95       	neg	r24
    7a3a:	f1 e0       	ldi	r31, 0x01	; 1
    7a3c:	58 17       	cp	r21, r24
    7a3e:	08 f0       	brcs	.+2      	; 0x7a42 <handleMotorsWithNoController+0x262>
    7a40:	a6 c0       	rjmp	.+332    	; 0x7b8e <handleMotorsWithNoController+0x3ae>
    7a42:	98 2f       	mov	r25, r24
    7a44:	9e 1b       	sub	r25, r30
    7a46:	e9 2f       	mov	r30, r25
    7a48:	91 e0       	ldi	r25, 0x01	; 1
    7a4a:	8e 17       	cp	r24, r30
    7a4c:	08 f0       	brcs	.+2      	; 0x7a50 <handleMotorsWithNoController+0x270>
    7a4e:	96 c0       	rjmp	.+300    	; 0x7b7c <handleMotorsWithNoController+0x39c>
    7a50:	f9 2b       	or	r31, r25
    7a52:	8a 2d       	mov	r24, r10
    7a54:	81 95       	neg	r24
    7a56:	91 e0       	ldi	r25, 0x01	; 1
    7a58:	68 17       	cp	r22, r24
    7a5a:	08 f0       	brcs	.+2      	; 0x7a5e <handleMotorsWithNoController+0x27e>
    7a5c:	87 c0       	rjmp	.+270    	; 0x7b6c <handleMotorsWithNoController+0x38c>
    7a5e:	38 2f       	mov	r19, r24
    7a60:	3f 1b       	sub	r19, r31
    7a62:	21 e0       	ldi	r18, 0x01	; 1
    7a64:	83 17       	cp	r24, r19
    7a66:	08 f0       	brcs	.+2      	; 0x7a6a <handleMotorsWithNoController+0x28a>
    7a68:	7a c0       	rjmp	.+244    	; 0x7b5e <handleMotorsWithNoController+0x37e>
    7a6a:	92 2b       	or	r25, r18
    7a6c:	a1 95       	neg	r26
    7a6e:	a9 17       	cp	r26, r25
    7a70:	09 f4       	brne	.+2      	; 0x7a74 <handleMotorsWithNoController+0x294>
    7a72:	e2 c0       	rjmp	.+452    	; 0x7c38 <handleMotorsWithNoController+0x458>
			speedStepCounter = getTime100MicroSec();
    7a74:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    7a78:	9b 01       	movw	r18, r22
    7a7a:	ac 01       	movw	r20, r24
    7a7c:	60 93 64 04 	sts	0x0464, r22
    7a80:	30 93 65 04 	sts	0x0465, r19
    7a84:	40 93 66 04 	sts	0x0466, r20
    7a88:	50 93 67 04 	sts	0x0467, r21
    7a8c:	10 92 68 04 	sts	0x0468, r1
    7a90:	10 92 69 04 	sts	0x0469, r1
    7a94:	10 92 6a 04 	sts	0x046A, r1
    7a98:	10 92 6b 04 	sts	0x046B, r1

			if(softAccEnabled) {
    7a9c:	80 91 6c 04 	lds	r24, 0x046C
    7aa0:	88 23       	and	r24, r24
    7aa2:	09 f4       	brne	.+2      	; 0x7aa6 <handleMotorsWithNoController+0x2c6>
    7aa4:	3a c1       	rjmp	.+628    	; 0x7d1a <handleMotorsWithNoController+0x53a>
				if(pwm_right_desired == 0) {
    7aa6:	20 91 f5 02 	lds	r18, 0x02F5
    7aaa:	30 91 f6 02 	lds	r19, 0x02F6
    7aae:	21 15       	cp	r18, r1
    7ab0:	31 05       	cpc	r19, r1
    7ab2:	09 f0       	breq	.+2      	; 0x7ab6 <handleMotorsWithNoController+0x2d6>
    7ab4:	47 c1       	rjmp	.+654    	; 0x7d44 <handleMotorsWithNoController+0x564>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    7ab6:	10 92 fa 02 	sts	0x02FA, r1
    7aba:	10 92 f9 02 	sts	0x02F9, r1
    7abe:	c0 e0       	ldi	r28, 0x00	; 0
    7ac0:	d0 e0       	ldi	r29, 0x00	; 0
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    7ac2:	20 91 f7 02 	lds	r18, 0x02F7
    7ac6:	30 91 f8 02 	lds	r19, 0x02F8
    7aca:	21 15       	cp	r18, r1
    7acc:	31 05       	cpc	r19, r1
    7ace:	09 f4       	brne	.+2      	; 0x7ad2 <handleMotorsWithNoController+0x2f2>
    7ad0:	5c c1       	rjmp	.+696    	; 0x7d8a <handleMotorsWithNoController+0x5aa>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    7ad2:	00 91 fb 02 	lds	r16, 0x02FB
    7ad6:	10 91 fc 02 	lds	r17, 0x02FC
    7ada:	02 9f       	mul	r16, r18
    7adc:	c0 01       	movw	r24, r0
    7ade:	03 9f       	mul	r16, r19
    7ae0:	90 0d       	add	r25, r0
    7ae2:	12 9f       	mul	r17, r18
    7ae4:	90 0d       	add	r25, r0
    7ae6:	11 24       	eor	r1, r1
    7ae8:	97 fd       	sbrc	r25, 7
    7aea:	4f c1       	rjmp	.+670    	; 0x7d8a <handleMotorsWithNoController+0x5aa>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    7aec:	02 17       	cp	r16, r18
    7aee:	13 07       	cpc	r17, r19
    7af0:	0c f0       	brlt	.+2      	; 0x7af4 <handleMotorsWithNoController+0x314>
    7af2:	52 c1       	rjmp	.+676    	; 0x7d98 <handleMotorsWithNoController+0x5b8>
					pwm_intermediate_left_desired += speedStep;
    7af4:	80 91 13 02 	lds	r24, 0x0213
    7af8:	a8 01       	movw	r20, r16
    7afa:	48 0f       	add	r20, r24
    7afc:	51 1d       	adc	r21, r1
    7afe:	ca 01       	movw	r24, r20
    7b00:	50 93 fc 02 	sts	0x02FC, r21
    7b04:	40 93 fb 02 	sts	0x02FB, r20
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    7b08:	24 17       	cp	r18, r20
    7b0a:	35 07       	cpc	r19, r21
    7b0c:	0c f0       	brlt	.+2      	; 0x7b10 <handleMotorsWithNoController+0x330>
    7b0e:	18 c1       	rjmp	.+560    	; 0x7d40 <handleMotorsWithNoController+0x560>
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired -= speedStep;
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
    7b10:	30 93 fc 02 	sts	0x02FC, r19
    7b14:	20 93 fb 02 	sts	0x02FB, r18
    7b18:	89 01       	movw	r16, r18
    7b1a:	7a ce       	rjmp	.-780    	; 0x7810 <handleMotorsWithNoController+0x30>
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
    7b1c:	41 15       	cp	r20, r1
    7b1e:	51 05       	cpc	r21, r1
    7b20:	09 f0       	breq	.+2      	; 0x7b24 <handleMotorsWithNoController+0x344>
    7b22:	f2 c0       	rjmp	.+484    	; 0x7d08 <handleMotorsWithNoController+0x528>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    7b24:	10 92 a9 00 	sts	0x00A9, r1
    7b28:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    7b2c:	10 92 ab 00 	sts	0x00AB, r1
    7b30:	10 92 aa 00 	sts	0x00AA, r1
    7b34:	22 cf       	rjmp	.-444    	; 0x797a <handleMotorsWithNoController+0x19a>
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    7b36:	8b e0       	ldi	r24, 0x0B	; 11
    7b38:	93 e0       	ldi	r25, 0x03	; 3
    7b3a:	69 e0       	ldi	r22, 0x09	; 9
    7b3c:	73 e0       	ldi	r23, 0x03	; 3
    7b3e:	0e 94 da 40 	call	0x81b4	; 0x81b4 <obstacleAvoidance>
    7b42:	fb ce       	rjmp	.-522    	; 0x793a <handleMotorsWithNoController+0x15a>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    7b44:	21 15       	cp	r18, r1
    7b46:	31 05       	cpc	r19, r1
    7b48:	09 f0       	breq	.+2      	; 0x7b4c <handleMotorsWithNoController+0x36c>
    7b4a:	d5 c0       	rjmp	.+426    	; 0x7cf6 <handleMotorsWithNoController+0x516>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    7b4c:	10 92 99 00 	sts	0x0099, r1
    7b50:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    7b54:	10 92 9b 00 	sts	0x009B, r1
    7b58:	10 92 9a 00 	sts	0x009A, r1
    7b5c:	06 cf       	rjmp	.-500    	; 0x796a <handleMotorsWithNoController+0x18a>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    7b5e:	20 e0       	ldi	r18, 0x00	; 0
    7b60:	92 2b       	or	r25, r18
    7b62:	a1 95       	neg	r26
    7b64:	a9 17       	cp	r26, r25
    7b66:	09 f0       	breq	.+2      	; 0x7b6a <handleMotorsWithNoController+0x38a>
    7b68:	85 cf       	rjmp	.-246    	; 0x7a74 <handleMotorsWithNoController+0x294>
    7b6a:	66 c0       	rjmp	.+204    	; 0x7c38 <handleMotorsWithNoController+0x458>
    7b6c:	90 e0       	ldi	r25, 0x00	; 0
    7b6e:	38 2f       	mov	r19, r24
    7b70:	3f 1b       	sub	r19, r31
    7b72:	21 e0       	ldi	r18, 0x01	; 1
    7b74:	83 17       	cp	r24, r19
    7b76:	08 f4       	brcc	.+2      	; 0x7b7a <handleMotorsWithNoController+0x39a>
    7b78:	78 cf       	rjmp	.-272    	; 0x7a6a <handleMotorsWithNoController+0x28a>
    7b7a:	f1 cf       	rjmp	.-30     	; 0x7b5e <handleMotorsWithNoController+0x37e>
    7b7c:	90 e0       	ldi	r25, 0x00	; 0
    7b7e:	f9 2b       	or	r31, r25
    7b80:	8a 2d       	mov	r24, r10
    7b82:	81 95       	neg	r24
    7b84:	91 e0       	ldi	r25, 0x01	; 1
    7b86:	68 17       	cp	r22, r24
    7b88:	08 f4       	brcc	.+2      	; 0x7b8c <handleMotorsWithNoController+0x3ac>
    7b8a:	69 cf       	rjmp	.-302    	; 0x7a5e <handleMotorsWithNoController+0x27e>
    7b8c:	ef cf       	rjmp	.-34     	; 0x7b6c <handleMotorsWithNoController+0x38c>
    7b8e:	f0 e0       	ldi	r31, 0x00	; 0
    7b90:	98 2f       	mov	r25, r24
    7b92:	9e 1b       	sub	r25, r30
    7b94:	e9 2f       	mov	r30, r25
    7b96:	91 e0       	ldi	r25, 0x01	; 1
    7b98:	8e 17       	cp	r24, r30
    7b9a:	08 f4       	brcc	.+2      	; 0x7b9e <handleMotorsWithNoController+0x3be>
    7b9c:	59 cf       	rjmp	.-334    	; 0x7a50 <handleMotorsWithNoController+0x270>
    7b9e:	ee cf       	rjmp	.-36     	; 0x7b7c <handleMotorsWithNoController+0x39c>
    7ba0:	90 e0       	ldi	r25, 0x00	; 0
    7ba2:	e9 2b       	or	r30, r25
    7ba4:	8c 2d       	mov	r24, r12
    7ba6:	81 95       	neg	r24
    7ba8:	f1 e0       	ldi	r31, 0x01	; 1
    7baa:	58 17       	cp	r21, r24
    7bac:	08 f4       	brcc	.+2      	; 0x7bb0 <handleMotorsWithNoController+0x3d0>
    7bae:	49 cf       	rjmp	.-366    	; 0x7a42 <handleMotorsWithNoController+0x262>
    7bb0:	ee cf       	rjmp	.-36     	; 0x7b8e <handleMotorsWithNoController+0x3ae>
    7bb2:	e0 e0       	ldi	r30, 0x00	; 0
    7bb4:	b8 2f       	mov	r27, r24
    7bb6:	b9 1b       	sub	r27, r25
    7bb8:	91 e0       	ldi	r25, 0x01	; 1
    7bba:	8b 17       	cp	r24, r27
    7bbc:	08 f4       	brcc	.+2      	; 0x7bc0 <handleMotorsWithNoController+0x3e0>
    7bbe:	3a cf       	rjmp	.-396    	; 0x7a34 <handleMotorsWithNoController+0x254>
    7bc0:	ef cf       	rjmp	.-34     	; 0x7ba0 <handleMotorsWithNoController+0x3c0>
    7bc2:	e0 e0       	ldi	r30, 0x00	; 0
    7bc4:	9e 2b       	or	r25, r30
    7bc6:	8e 2d       	mov	r24, r14
    7bc8:	81 95       	neg	r24
    7bca:	e1 e0       	ldi	r30, 0x01	; 1
    7bcc:	48 17       	cp	r20, r24
    7bce:	08 f4       	brcc	.+2      	; 0x7bd2 <handleMotorsWithNoController+0x3f2>
    7bd0:	2b cf       	rjmp	.-426    	; 0x7a28 <handleMotorsWithNoController+0x248>
    7bd2:	ef cf       	rjmp	.-34     	; 0x7bb2 <handleMotorsWithNoController+0x3d2>
    7bd4:	90 e0       	ldi	r25, 0x00	; 0
    7bd6:	d8 2e       	mov	r13, r24
    7bd8:	de 1a       	sub	r13, r30
    7bda:	e1 e0       	ldi	r30, 0x01	; 1
    7bdc:	8d 15       	cp	r24, r13
    7bde:	08 f4       	brcc	.+2      	; 0x7be2 <handleMotorsWithNoController+0x402>
    7be0:	1c cf       	rjmp	.-456    	; 0x7a1a <handleMotorsWithNoController+0x23a>
    7be2:	ef cf       	rjmp	.-34     	; 0x7bc2 <handleMotorsWithNoController+0x3e2>
    7be4:	90 e0       	ldi	r25, 0x00	; 0
    7be6:	e9 2b       	or	r30, r25
    7be8:	83 2f       	mov	r24, r19
    7bea:	8b 1b       	sub	r24, r27
    7bec:	91 e0       	ldi	r25, 0x01	; 1
    7bee:	38 17       	cp	r19, r24
    7bf0:	08 f4       	brcc	.+2      	; 0x7bf4 <handleMotorsWithNoController+0x414>
    7bf2:	0d cf       	rjmp	.-486    	; 0x7a0e <handleMotorsWithNoController+0x22e>
    7bf4:	ef cf       	rjmp	.-34     	; 0x7bd4 <handleMotorsWithNoController+0x3f4>
    7bf6:	e0 e0       	ldi	r30, 0x00	; 0
    7bf8:	b8 2e       	mov	r11, r24
    7bfa:	b9 1a       	sub	r11, r25
    7bfc:	91 e0       	ldi	r25, 0x01	; 1
    7bfe:	8b 15       	cp	r24, r11
    7c00:	08 f4       	brcc	.+2      	; 0x7c04 <handleMotorsWithNoController+0x424>
    7c02:	fe ce       	rjmp	.-516    	; 0x7a00 <handleMotorsWithNoController+0x220>
    7c04:	ef cf       	rjmp	.-34     	; 0x7be4 <handleMotorsWithNoController+0x404>
    7c06:	e0 e0       	ldi	r30, 0x00	; 0
    7c08:	9e 2b       	or	r25, r30
    7c0a:	82 2f       	mov	r24, r18
    7c0c:	8f 1b       	sub	r24, r31
    7c0e:	e1 e0       	ldi	r30, 0x01	; 1
    7c10:	28 17       	cp	r18, r24
    7c12:	08 f4       	brcc	.+2      	; 0x7c16 <handleMotorsWithNoController+0x436>
    7c14:	ef ce       	rjmp	.-546    	; 0x79f4 <handleMotorsWithNoController+0x214>
    7c16:	ef cf       	rjmp	.-34     	; 0x7bf6 <handleMotorsWithNoController+0x416>
    7c18:	90 e0       	ldi	r25, 0x00	; 0
    7c1a:	f8 2e       	mov	r15, r24
    7c1c:	fe 1a       	sub	r15, r30
    7c1e:	e1 e0       	ldi	r30, 0x01	; 1
    7c20:	8f 15       	cp	r24, r15
    7c22:	08 f4       	brcc	.+2      	; 0x7c26 <handleMotorsWithNoController+0x446>
    7c24:	e0 ce       	rjmp	.-576    	; 0x79e6 <handleMotorsWithNoController+0x206>
    7c26:	ef cf       	rjmp	.-34     	; 0x7c06 <handleMotorsWithNoController+0x426>
    7c28:	e0 e0       	ldi	r30, 0x00	; 0
    7c2a:	81 2f       	mov	r24, r17
    7c2c:	89 1b       	sub	r24, r25
    7c2e:	91 e0       	ldi	r25, 0x01	; 1
    7c30:	18 17       	cp	r17, r24
    7c32:	08 f4       	brcc	.+2      	; 0x7c36 <handleMotorsWithNoController+0x456>
    7c34:	d2 ce       	rjmp	.-604    	; 0x79da <handleMotorsWithNoController+0x1fa>
    7c36:	f0 cf       	rjmp	.-32     	; 0x7c18 <handleMotorsWithNoController+0x438>
    7c38:	33 23       	and	r19, r19
    7c3a:	09 f0       	breq	.+2      	; 0x7c3e <handleMotorsWithNoController+0x45e>
    7c3c:	1b cf       	rjmp	.-458    	; 0x7a74 <handleMotorsWithNoController+0x294>
    7c3e:	ee 23       	and	r30, r30
    7c40:	09 f0       	breq	.+2      	; 0x7c44 <handleMotorsWithNoController+0x464>
    7c42:	18 cf       	rjmp	.-464    	; 0x7a74 <handleMotorsWithNoController+0x294>
    7c44:	bb 23       	and	r27, r27
    7c46:	09 f0       	breq	.+2      	; 0x7c4a <handleMotorsWithNoController+0x46a>
    7c48:	15 cf       	rjmp	.-470    	; 0x7a74 <handleMotorsWithNoController+0x294>
    7c4a:	dd 20       	and	r13, r13
    7c4c:	09 f0       	breq	.+2      	; 0x7c50 <handleMotorsWithNoController+0x470>
    7c4e:	12 cf       	rjmp	.-476    	; 0x7a74 <handleMotorsWithNoController+0x294>
    7c50:	bb 20       	and	r11, r11
    7c52:	09 f0       	breq	.+2      	; 0x7c56 <handleMotorsWithNoController+0x476>
    7c54:	0f cf       	rjmp	.-482    	; 0x7a74 <handleMotorsWithNoController+0x294>
    7c56:	41 e0       	ldi	r20, 0x01	; 1
    7c58:	4f 15       	cp	r20, r15
    7c5a:	08 f4       	brcc	.+2      	; 0x7c5e <handleMotorsWithNoController+0x47e>
    7c5c:	0b cf       	rjmp	.-490    	; 0x7a74 <handleMotorsWithNoController+0x294>
    7c5e:	f4 16       	cp	r15, r20
    7c60:	09 f0       	breq	.+2      	; 0x7c64 <handleMotorsWithNoController+0x484>
    7c62:	ce cd       	rjmp	.-1124   	; 0x7800 <handleMotorsWithNoController+0x20>
    7c64:	5f e8       	ldi	r21, 0x8F	; 143
    7c66:	59 15       	cp	r21, r9
    7c68:	08 f4       	brcc	.+2      	; 0x7c6c <handleMotorsWithNoController+0x48c>
    7c6a:	04 cf       	rjmp	.-504    	; 0x7a74 <handleMotorsWithNoController+0x294>
    7c6c:	c9 cd       	rjmp	.-1134   	; 0x7800 <handleMotorsWithNoController+0x20>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    7c6e:	35 95       	asr	r19
    7c70:	27 95       	ror	r18
    7c72:	35 95       	asr	r19
    7c74:	27 95       	ror	r18
    7c76:	35 95       	asr	r19
    7c78:	27 95       	ror	r18
    7c7a:	b9 01       	movw	r22, r18
    7c7c:	88 27       	eor	r24, r24
    7c7e:	77 fd       	sbrc	r23, 7
    7c80:	80 95       	com	r24
    7c82:	98 2f       	mov	r25, r24
    7c84:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    7c88:	9b 01       	movw	r18, r22
    7c8a:	ac 01       	movw	r20, r24
    7c8c:	60 91 cd 02 	lds	r22, 0x02CD
    7c90:	70 91 ce 02 	lds	r23, 0x02CE
    7c94:	80 91 cf 02 	lds	r24, 0x02CF
    7c98:	90 91 d0 02 	lds	r25, 0x02D0
    7c9c:	0e 94 1c 58 	call	0xb038	; 0xb038 <__subsf3>
    7ca0:	60 93 cd 02 	sts	0x02CD, r22
    7ca4:	70 93 ce 02 	sts	0x02CE, r23
    7ca8:	80 93 cf 02 	sts	0x02CF, r24
    7cac:	90 93 d0 02 	sts	0x02D0, r25
    7cb0:	29 ce       	rjmp	.-942    	; 0x7904 <handleMotorsWithNoController+0x124>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    7cb2:	35 95       	asr	r19
    7cb4:	27 95       	ror	r18
    7cb6:	35 95       	asr	r19
    7cb8:	27 95       	ror	r18
    7cba:	35 95       	asr	r19
    7cbc:	27 95       	ror	r18
    7cbe:	b9 01       	movw	r22, r18
    7cc0:	88 27       	eor	r24, r24
    7cc2:	77 fd       	sbrc	r23, 7
    7cc4:	80 95       	com	r24
    7cc6:	98 2f       	mov	r25, r24
    7cc8:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    7ccc:	9b 01       	movw	r18, r22
    7cce:	ac 01       	movw	r20, r24
    7cd0:	60 91 d1 02 	lds	r22, 0x02D1
    7cd4:	70 91 d2 02 	lds	r23, 0x02D2
    7cd8:	80 91 d3 02 	lds	r24, 0x02D3
    7cdc:	90 91 d4 02 	lds	r25, 0x02D4
    7ce0:	0e 94 1c 58 	call	0xb038	; 0xb038 <__subsf3>
    7ce4:	60 93 d1 02 	sts	0x02D1, r22
    7ce8:	70 93 d2 02 	sts	0x02D2, r23
    7cec:	80 93 d3 02 	sts	0x02D3, r24
    7cf0:	90 93 d4 02 	sts	0x02D4, r25
    7cf4:	ca cd       	rjmp	.-1132   	; 0x788a <handleMotorsWithNoController+0xaa>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    7cf6:	88 27       	eor	r24, r24
    7cf8:	99 27       	eor	r25, r25
    7cfa:	82 1b       	sub	r24, r18
    7cfc:	93 0b       	sbc	r25, r19
    7cfe:	90 93 9b 00 	sts	0x009B, r25
    7d02:	80 93 9a 00 	sts	0x009A, r24
    7d06:	31 ce       	rjmp	.-926    	; 0x796a <handleMotorsWithNoController+0x18a>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    7d08:	88 27       	eor	r24, r24
    7d0a:	99 27       	eor	r25, r25
    7d0c:	84 1b       	sub	r24, r20
    7d0e:	95 0b       	sbc	r25, r21
    7d10:	90 93 ab 00 	sts	0x00AB, r25
    7d14:	80 93 aa 00 	sts	0x00AA, r24
    7d18:	30 ce       	rjmp	.-928    	; 0x797a <handleMotorsWithNoController+0x19a>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    7d1a:	20 91 f5 02 	lds	r18, 0x02F5
    7d1e:	30 91 f6 02 	lds	r19, 0x02F6
    7d22:	20 93 f9 02 	sts	0x02F9, r18
    7d26:	30 93 fa 02 	sts	0x02FA, r19
				pwm_intermediate_left_desired = pwm_left_desired;
    7d2a:	40 91 f7 02 	lds	r20, 0x02F7
    7d2e:	50 91 f8 02 	lds	r21, 0x02F8
    7d32:	40 93 fb 02 	sts	0x02FB, r20
    7d36:	50 93 fc 02 	sts	0x02FC, r21
    7d3a:	c9 01       	movw	r24, r18
    7d3c:	ec 01       	movw	r28, r24
    7d3e:	ca 01       	movw	r24, r20
    7d40:	8c 01       	movw	r16, r24
    7d42:	66 cd       	rjmp	.-1332   	; 0x7810 <handleMotorsWithNoController+0x30>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    7d44:	c0 91 f9 02 	lds	r28, 0x02F9
    7d48:	d0 91 fa 02 	lds	r29, 0x02FA
    7d4c:	c2 9f       	mul	r28, r18
    7d4e:	c0 01       	movw	r24, r0
    7d50:	c3 9f       	mul	r28, r19
    7d52:	90 0d       	add	r25, r0
    7d54:	d2 9f       	mul	r29, r18
    7d56:	90 0d       	add	r25, r0
    7d58:	11 24       	eor	r1, r1
    7d5a:	97 fd       	sbrc	r25, 7
    7d5c:	ac ce       	rjmp	.-680    	; 0x7ab6 <handleMotorsWithNoController+0x2d6>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    7d5e:	c2 17       	cp	r28, r18
    7d60:	d3 07       	cpc	r29, r19
    7d62:	74 f5       	brge	.+92     	; 0x7dc0 <handleMotorsWithNoController+0x5e0>
					pwm_intermediate_right_desired += speedStep;
    7d64:	80 91 13 02 	lds	r24, 0x0213
    7d68:	ae 01       	movw	r20, r28
    7d6a:	48 0f       	add	r20, r24
    7d6c:	51 1d       	adc	r21, r1
    7d6e:	ca 01       	movw	r24, r20
    7d70:	50 93 fa 02 	sts	0x02FA, r21
    7d74:	40 93 f9 02 	sts	0x02F9, r20
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    7d78:	24 17       	cp	r18, r20
    7d7a:	35 07       	cpc	r19, r21
    7d7c:	94 f5       	brge	.+100    	; 0x7de2 <handleMotorsWithNoController+0x602>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    7d7e:	30 93 fa 02 	sts	0x02FA, r19
    7d82:	20 93 f9 02 	sts	0x02F9, r18
    7d86:	e9 01       	movw	r28, r18
    7d88:	9c ce       	rjmp	.-712    	; 0x7ac2 <handleMotorsWithNoController+0x2e2>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    7d8a:	10 92 fc 02 	sts	0x02FC, r1
    7d8e:	10 92 fb 02 	sts	0x02FB, r1
    7d92:	00 e0       	ldi	r16, 0x00	; 0
    7d94:	10 e0       	ldi	r17, 0x00	; 0
    7d96:	3c cd       	rjmp	.-1416   	; 0x7810 <handleMotorsWithNoController+0x30>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    7d98:	20 17       	cp	r18, r16
    7d9a:	31 07       	cpc	r19, r17
    7d9c:	0c f0       	brlt	.+2      	; 0x7da0 <handleMotorsWithNoController+0x5c0>
    7d9e:	38 cd       	rjmp	.-1424   	; 0x7810 <handleMotorsWithNoController+0x30>
					pwm_intermediate_left_desired -= speedStep;
    7da0:	80 91 13 02 	lds	r24, 0x0213
    7da4:	a8 01       	movw	r20, r16
    7da6:	48 1b       	sub	r20, r24
    7da8:	51 09       	sbc	r21, r1
    7daa:	ca 01       	movw	r24, r20
    7dac:	50 93 fc 02 	sts	0x02FC, r21
    7db0:	40 93 fb 02 	sts	0x02FB, r20
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    7db4:	42 17       	cp	r20, r18
    7db6:	53 07       	cpc	r21, r19
    7db8:	0c f4       	brge	.+2      	; 0x7dbc <handleMotorsWithNoController+0x5dc>
    7dba:	aa ce       	rjmp	.-684    	; 0x7b10 <handleMotorsWithNoController+0x330>
    7dbc:	8c 01       	movw	r16, r24
    7dbe:	28 cd       	rjmp	.-1456   	; 0x7810 <handleMotorsWithNoController+0x30>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    7dc0:	2c 17       	cp	r18, r28
    7dc2:	3d 07       	cpc	r19, r29
    7dc4:	0c f0       	brlt	.+2      	; 0x7dc8 <handleMotorsWithNoController+0x5e8>
    7dc6:	7d ce       	rjmp	.-774    	; 0x7ac2 <handleMotorsWithNoController+0x2e2>
					pwm_intermediate_right_desired -= speedStep;
    7dc8:	80 91 13 02 	lds	r24, 0x0213
    7dcc:	ae 01       	movw	r20, r28
    7dce:	48 1b       	sub	r20, r24
    7dd0:	51 09       	sbc	r21, r1
    7dd2:	ca 01       	movw	r24, r20
    7dd4:	50 93 fa 02 	sts	0x02FA, r21
    7dd8:	40 93 f9 02 	sts	0x02F9, r20
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    7ddc:	42 17       	cp	r20, r18
    7dde:	53 07       	cpc	r21, r19
    7de0:	74 f2       	brlt	.-100    	; 0x7d7e <handleMotorsWithNoController+0x59e>
    7de2:	ec 01       	movw	r28, r24
    7de4:	6e ce       	rjmp	.-804    	; 0x7ac2 <handleMotorsWithNoController+0x2e2>

00007de6 <initCalibration>:
	calibration[8][7] = 153;

    writeCalibrationToFlash();
}

void initCalibration() {
    7de6:	2f 92       	push	r2
    7de8:	3f 92       	push	r3
    7dea:	4f 92       	push	r4
    7dec:	5f 92       	push	r5
    7dee:	6f 92       	push	r6
    7df0:	7f 92       	push	r7
    7df2:	8f 92       	push	r8
    7df4:	9f 92       	push	r9
    7df6:	af 92       	push	r10
    7df8:	bf 92       	push	r11
    7dfa:	cf 92       	push	r12
    7dfc:	df 92       	push	r13
    7dfe:	ef 92       	push	r14
    7e00:	ff 92       	push	r15
    7e02:	0f 93       	push	r16
    7e04:	1f 93       	push	r17
    7e06:	cf 93       	push	r28
    7e08:	df 93       	push	r29

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    7e0a:	8a e6       	ldi	r24, 0x6A	; 106
    7e0c:	9f e0       	ldi	r25, 0x0F	; 15
    7e0e:	0e 94 36 5c 	call	0xb86c	; 0xb86c <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    7e12:	85 55       	subi	r24, 0x55	; 85
    7e14:	9a 4a       	sbci	r25, 0xAA	; 170
    7e16:	09 f4       	brne	.+2      	; 0x7e1a <initCalibration+0x34>
    7e18:	9c c1       	rjmp	.+824    	; 0x8152 <initCalibration+0x36c>
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    7e1a:	74 e1       	ldi	r23, 0x14	; 20
    7e1c:	87 2e       	mov	r8, r23
    7e1e:	91 2c       	mov	r9, r1
    7e20:	90 92 e3 08 	sts	0x08E3, r9
    7e24:	80 92 e2 08 	sts	0x08E2, r8
    calibration[1][0] = 40;
    7e28:	88 e2       	ldi	r24, 0x28	; 40
    7e2a:	90 e0       	ldi	r25, 0x00	; 0
    7e2c:	90 93 f3 08 	sts	0x08F3, r25
    7e30:	80 93 f2 08 	sts	0x08F2, r24
    calibration[2][0] = 59;
    7e34:	8b e3       	ldi	r24, 0x3B	; 59
    7e36:	90 e0       	ldi	r25, 0x00	; 0
    7e38:	90 93 03 09 	sts	0x0903, r25
    7e3c:	80 93 02 09 	sts	0x0902, r24
    calibration[3][0] = 79;
    7e40:	8f e4       	ldi	r24, 0x4F	; 79
    7e42:	90 e0       	ldi	r25, 0x00	; 0
    7e44:	90 93 13 09 	sts	0x0913, r25
    7e48:	80 93 12 09 	sts	0x0912, r24
    calibration[4][0] = 100;
    7e4c:	84 e6       	ldi	r24, 0x64	; 100
    7e4e:	90 e0       	ldi	r25, 0x00	; 0
    7e50:	90 93 23 09 	sts	0x0923, r25
    7e54:	80 93 22 09 	sts	0x0922, r24
    calibration[5][0] = 120;
    7e58:	c8 e7       	ldi	r28, 0x78	; 120
    7e5a:	d0 e0       	ldi	r29, 0x00	; 0
    7e5c:	d0 93 33 09 	sts	0x0933, r29
    7e60:	c0 93 32 09 	sts	0x0932, r28
    calibration[6][0] = 139;
    7e64:	6b e8       	ldi	r22, 0x8B	; 139
    7e66:	e6 2e       	mov	r14, r22
    7e68:	f1 2c       	mov	r15, r1
    7e6a:	f0 92 43 09 	sts	0x0943, r15
    7e6e:	e0 92 42 09 	sts	0x0942, r14
    calibration[7][0] = 159;
    7e72:	8f e9       	ldi	r24, 0x9F	; 159
    7e74:	90 e0       	ldi	r25, 0x00	; 0
    7e76:	90 93 53 09 	sts	0x0953, r25
    7e7a:	80 93 52 09 	sts	0x0952, r24
	calibration[8][0] = 180;
    7e7e:	54 eb       	ldi	r21, 0xB4	; 180
    7e80:	a5 2e       	mov	r10, r21
    7e82:	b1 2c       	mov	r11, r1
    7e84:	b0 92 63 09 	sts	0x0963, r11
    7e88:	a0 92 62 09 	sts	0x0962, r10
    calibration[0][1] = 19;    	// real speed measured in mm/s
    7e8c:	23 e1       	ldi	r18, 0x13	; 19
    7e8e:	30 e0       	ldi	r19, 0x00	; 0
    7e90:	30 93 e5 08 	sts	0x08E5, r19
    7e94:	20 93 e4 08 	sts	0x08E4, r18
    calibration[1][1] = 47;
    7e98:	8f e2       	ldi	r24, 0x2F	; 47
    7e9a:	90 e0       	ldi	r25, 0x00	; 0
    7e9c:	90 93 f5 08 	sts	0x08F5, r25
    7ea0:	80 93 f4 08 	sts	0x08F4, r24
    calibration[2][1] = 72;
    7ea4:	88 e4       	ldi	r24, 0x48	; 72
    7ea6:	90 e0       	ldi	r25, 0x00	; 0
    7ea8:	90 93 05 09 	sts	0x0905, r25
    7eac:	80 93 04 09 	sts	0x0904, r24
    calibration[3][1] = 91;
    7eb0:	8b e5       	ldi	r24, 0x5B	; 91
    7eb2:	90 e0       	ldi	r25, 0x00	; 0
    7eb4:	90 93 15 09 	sts	0x0915, r25
    7eb8:	80 93 14 09 	sts	0x0914, r24
    calibration[4][1] = 109;
    7ebc:	8d e6       	ldi	r24, 0x6D	; 109
    7ebe:	90 e0       	ldi	r25, 0x00	; 0
    7ec0:	90 93 25 09 	sts	0x0925, r25
    7ec4:	80 93 24 09 	sts	0x0924, r24
    calibration[5][1] = 125;
    7ec8:	4d e7       	ldi	r20, 0x7D	; 125
    7eca:	c4 2e       	mov	r12, r20
    7ecc:	d1 2c       	mov	r13, r1
    7ece:	d0 92 35 09 	sts	0x0935, r13
    7ed2:	c0 92 34 09 	sts	0x0934, r12
    calibration[6][1] = 143;
    7ed6:	8f e8       	ldi	r24, 0x8F	; 143
    7ed8:	90 e0       	ldi	r25, 0x00	; 0
    7eda:	90 93 45 09 	sts	0x0945, r25
    7ede:	80 93 44 09 	sts	0x0944, r24
    calibration[7][1] = 160;
    7ee2:	40 ea       	ldi	r20, 0xA0	; 160
    7ee4:	50 e0       	ldi	r21, 0x00	; 0
    7ee6:	50 93 55 09 	sts	0x0955, r21
    7eea:	40 93 54 09 	sts	0x0954, r20
	calibration[8][1] = 174;
    7eee:	8e ea       	ldi	r24, 0xAE	; 174
    7ef0:	90 e0       	ldi	r25, 0x00	; 0
    7ef2:	90 93 65 09 	sts	0x0965, r25
    7ef6:	80 93 64 09 	sts	0x0964, r24
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    7efa:	30 93 e7 08 	sts	0x08E7, r19
    7efe:	20 93 e6 08 	sts	0x08E6, r18
    calibration[1][2] = 39;
    7f02:	67 e2       	ldi	r22, 0x27	; 39
    7f04:	70 e0       	ldi	r23, 0x00	; 0
    7f06:	70 93 f7 08 	sts	0x08F7, r23
    7f0a:	60 93 f6 08 	sts	0x08F6, r22
    calibration[2][2] = 60;
    7f0e:	0c e3       	ldi	r16, 0x3C	; 60
    7f10:	10 e0       	ldi	r17, 0x00	; 0
    7f12:	10 93 07 09 	sts	0x0907, r17
    7f16:	00 93 06 09 	sts	0x0906, r16
    calibration[3][2] = 80;
    7f1a:	20 e5       	ldi	r18, 0x50	; 80
    7f1c:	22 2e       	mov	r2, r18
    7f1e:	31 2c       	mov	r3, r1
    7f20:	30 92 17 09 	sts	0x0917, r3
    7f24:	20 92 16 09 	sts	0x0916, r2
    calibration[4][2] = 99;
    7f28:	a3 e6       	ldi	r26, 0x63	; 99
    7f2a:	b0 e0       	ldi	r27, 0x00	; 0
    7f2c:	b0 93 27 09 	sts	0x0927, r27
    7f30:	a0 93 26 09 	sts	0x0926, r26
    calibration[5][2] = 119;
    7f34:	27 e7       	ldi	r18, 0x77	; 119
    7f36:	30 e0       	ldi	r19, 0x00	; 0
    7f38:	30 93 37 09 	sts	0x0937, r19
    7f3c:	20 93 36 09 	sts	0x0936, r18
    calibration[6][2] = 140;
    7f40:	ec e8       	ldi	r30, 0x8C	; 140
    7f42:	f0 e0       	ldi	r31, 0x00	; 0
    7f44:	f0 93 47 09 	sts	0x0947, r31
    7f48:	e0 93 46 09 	sts	0x0946, r30
    calibration[7][2] = 160;
    7f4c:	50 93 57 09 	sts	0x0957, r21
    7f50:	40 93 56 09 	sts	0x0956, r20
	calibration[8][2] = 180;
    7f54:	b0 92 67 09 	sts	0x0967, r11
    7f58:	a0 92 66 09 	sts	0x0966, r10
    calibration[0][3] = 23;    	// real speed measured in mm/s
    7f5c:	87 e1       	ldi	r24, 0x17	; 23
    7f5e:	90 e0       	ldi	r25, 0x00	; 0
    7f60:	90 93 e9 08 	sts	0x08E9, r25
    7f64:	80 93 e8 08 	sts	0x08E8, r24
    calibration[1][3] = 46;
    7f68:	9e e2       	ldi	r25, 0x2E	; 46
    7f6a:	49 2e       	mov	r4, r25
    7f6c:	51 2c       	mov	r5, r1
    7f6e:	50 92 f9 08 	sts	0x08F9, r5
    7f72:	40 92 f8 08 	sts	0x08F8, r4
    calibration[2][3] = 64;
    7f76:	80 e4       	ldi	r24, 0x40	; 64
    7f78:	90 e0       	ldi	r25, 0x00	; 0
    7f7a:	90 93 09 09 	sts	0x0909, r25
    7f7e:	80 93 08 09 	sts	0x0908, r24
    calibration[3][3] = 81;
    7f82:	81 e5       	ldi	r24, 0x51	; 81
    7f84:	68 2e       	mov	r6, r24
    7f86:	71 2c       	mov	r7, r1
    7f88:	70 92 19 09 	sts	0x0919, r7
    7f8c:	60 92 18 09 	sts	0x0918, r6
    calibration[4][3] = 97;
    7f90:	81 e6       	ldi	r24, 0x61	; 97
    7f92:	90 e0       	ldi	r25, 0x00	; 0
    7f94:	90 93 29 09 	sts	0x0929, r25
    7f98:	80 93 28 09 	sts	0x0928, r24
    calibration[5][3] = 112;
    7f9c:	80 e7       	ldi	r24, 0x70	; 112
    7f9e:	90 e0       	ldi	r25, 0x00	; 0
    7fa0:	90 93 39 09 	sts	0x0939, r25
    7fa4:	80 93 38 09 	sts	0x0938, r24
    calibration[6][3] = 125;
    7fa8:	d0 92 49 09 	sts	0x0949, r13
    7fac:	c0 92 48 09 	sts	0x0948, r12
    calibration[7][3] = 139;
    7fb0:	f0 92 59 09 	sts	0x0959, r15
    7fb4:	e0 92 58 09 	sts	0x0958, r14
	calibration[8][3] = 152;
    7fb8:	88 e9       	ldi	r24, 0x98	; 152
    7fba:	90 e0       	ldi	r25, 0x00	; 0
    7fbc:	90 93 69 09 	sts	0x0969, r25
    7fc0:	80 93 68 09 	sts	0x0968, r24
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    7fc4:	90 92 eb 08 	sts	0x08EB, r9
    7fc8:	80 92 ea 08 	sts	0x08EA, r8
    calibration[1][4] = 39;
    7fcc:	70 93 fb 08 	sts	0x08FB, r23
    7fd0:	60 93 fa 08 	sts	0x08FA, r22
    calibration[2][4] = 60;
    7fd4:	10 93 0b 09 	sts	0x090B, r17
    7fd8:	00 93 0a 09 	sts	0x090A, r16
    calibration[3][4] = 79;
    7fdc:	8f e4       	ldi	r24, 0x4F	; 79
    7fde:	90 e0       	ldi	r25, 0x00	; 0
    7fe0:	90 93 1b 09 	sts	0x091B, r25
    7fe4:	80 93 1a 09 	sts	0x091A, r24
    calibration[4][4] = 99;
    7fe8:	b0 93 2b 09 	sts	0x092B, r27
    7fec:	a0 93 2a 09 	sts	0x092A, r26
    calibration[5][4] = 120;
    7ff0:	d0 93 3b 09 	sts	0x093B, r29
    7ff4:	c0 93 3a 09 	sts	0x093A, r28
    calibration[6][4] = 140;
    7ff8:	f0 93 4b 09 	sts	0x094B, r31
    7ffc:	e0 93 4a 09 	sts	0x094A, r30
    calibration[7][4] = 160;
    8000:	50 93 5b 09 	sts	0x095B, r21
    8004:	40 93 5a 09 	sts	0x095A, r20
	calibration[8][4] = 179;
    8008:	83 eb       	ldi	r24, 0xB3	; 179
    800a:	90 e0       	ldi	r25, 0x00	; 0
    800c:	90 93 6b 09 	sts	0x096B, r25
    8010:	80 93 6a 09 	sts	0x096A, r24
    calibration[0][5] = 18;    	// real speed measured in mm/s
    8014:	82 e1       	ldi	r24, 0x12	; 18
    8016:	90 e0       	ldi	r25, 0x00	; 0
    8018:	90 93 ed 08 	sts	0x08ED, r25
    801c:	80 93 ec 08 	sts	0x08EC, r24
    calibration[1][5] = 45;
    8020:	8d e2       	ldi	r24, 0x2D	; 45
    8022:	90 e0       	ldi	r25, 0x00	; 0
    8024:	90 93 fd 08 	sts	0x08FD, r25
    8028:	80 93 fc 08 	sts	0x08FC, r24
    calibration[2][5] = 68;
    802c:	84 e4       	ldi	r24, 0x44	; 68
    802e:	90 e0       	ldi	r25, 0x00	; 0
    8030:	90 93 0d 09 	sts	0x090D, r25
    8034:	80 93 0c 09 	sts	0x090C, r24
    calibration[3][5] = 87;
    8038:	87 e5       	ldi	r24, 0x57	; 87
    803a:	90 e0       	ldi	r25, 0x00	; 0
    803c:	90 93 1d 09 	sts	0x091D, r25
    8040:	80 93 1c 09 	sts	0x091C, r24
    calibration[4][5] = 105;
    8044:	89 e6       	ldi	r24, 0x69	; 105
    8046:	90 e0       	ldi	r25, 0x00	; 0
    8048:	90 93 2d 09 	sts	0x092D, r25
    804c:	80 93 2c 09 	sts	0x092C, r24
    calibration[5][5] = 119;
    8050:	30 93 3d 09 	sts	0x093D, r19
    8054:	20 93 3c 09 	sts	0x093C, r18
    calibration[6][5] = 137;
    8058:	89 e8       	ldi	r24, 0x89	; 137
    805a:	90 e0       	ldi	r25, 0x00	; 0
    805c:	90 93 4d 09 	sts	0x094D, r25
    8060:	80 93 4c 09 	sts	0x094C, r24
    calibration[7][5] = 151;
    8064:	87 e9       	ldi	r24, 0x97	; 151
    8066:	90 e0       	ldi	r25, 0x00	; 0
    8068:	90 93 5d 09 	sts	0x095D, r25
    806c:	80 93 5c 09 	sts	0x095C, r24
	calibration[8][5] = 168;
    8070:	88 ea       	ldi	r24, 0xA8	; 168
    8072:	90 e0       	ldi	r25, 0x00	; 0
    8074:	90 93 6d 09 	sts	0x096D, r25
    8078:	80 93 6c 09 	sts	0x096C, r24
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    807c:	90 92 ef 08 	sts	0x08EF, r9
    8080:	80 92 ee 08 	sts	0x08EE, r8
    calibration[1][6] = 39;
    8084:	70 93 ff 08 	sts	0x08FF, r23
    8088:	60 93 fe 08 	sts	0x08FE, r22
    calibration[2][6] = 59;
    808c:	8b e3       	ldi	r24, 0x3B	; 59
    808e:	90 e0       	ldi	r25, 0x00	; 0
    8090:	90 93 0f 09 	sts	0x090F, r25
    8094:	80 93 0e 09 	sts	0x090E, r24
    calibration[3][6] = 80;
    8098:	30 92 1f 09 	sts	0x091F, r3
    809c:	20 92 1e 09 	sts	0x091E, r2
    calibration[4][6] = 100;
    80a0:	84 e6       	ldi	r24, 0x64	; 100
    80a2:	90 e0       	ldi	r25, 0x00	; 0
    80a4:	90 93 2f 09 	sts	0x092F, r25
    80a8:	80 93 2e 09 	sts	0x092E, r24
    calibration[5][6] = 119;
    80ac:	30 93 3f 09 	sts	0x093F, r19
    80b0:	20 93 3e 09 	sts	0x093E, r18
    calibration[6][6] = 139;
    80b4:	f0 92 4f 09 	sts	0x094F, r15
    80b8:	e0 92 4e 09 	sts	0x094E, r14
    calibration[7][6] = 160;
    80bc:	50 93 5f 09 	sts	0x095F, r21
    80c0:	40 93 5e 09 	sts	0x095E, r20
	calibration[8][6] = 180;
    80c4:	b0 92 6f 09 	sts	0x096F, r11
    80c8:	a0 92 6e 09 	sts	0x096E, r10
    calibration[0][7] = 22;    	// real speed measured in mm/s
    80cc:	86 e1       	ldi	r24, 0x16	; 22
    80ce:	90 e0       	ldi	r25, 0x00	; 0
    80d0:	90 93 f1 08 	sts	0x08F1, r25
    80d4:	80 93 f0 08 	sts	0x08F0, r24
    calibration[1][7] = 46;
    80d8:	50 92 01 09 	sts	0x0901, r5
    80dc:	40 92 00 09 	sts	0x0900, r4
    calibration[2][7] = 65;
    80e0:	81 e4       	ldi	r24, 0x41	; 65
    80e2:	90 e0       	ldi	r25, 0x00	; 0
    80e4:	90 93 11 09 	sts	0x0911, r25
    80e8:	80 93 10 09 	sts	0x0910, r24
    calibration[3][7] = 81;
    80ec:	70 92 21 09 	sts	0x0921, r7
    80f0:	60 92 20 09 	sts	0x0920, r6
    calibration[4][7] = 96;
    80f4:	80 e6       	ldi	r24, 0x60	; 96
    80f6:	90 e0       	ldi	r25, 0x00	; 0
    80f8:	90 93 31 09 	sts	0x0931, r25
    80fc:	80 93 30 09 	sts	0x0930, r24
    calibration[5][7] = 111;
    8100:	8f e6       	ldi	r24, 0x6F	; 111
    8102:	90 e0       	ldi	r25, 0x00	; 0
    8104:	90 93 41 09 	sts	0x0941, r25
    8108:	80 93 40 09 	sts	0x0940, r24
    calibration[6][7] = 125;
    810c:	d0 92 51 09 	sts	0x0951, r13
    8110:	c0 92 50 09 	sts	0x0950, r12
    calibration[7][7] = 139;
    8114:	f0 92 61 09 	sts	0x0961, r15
    8118:	e0 92 60 09 	sts	0x0960, r14
	calibration[8][7] = 153;
    811c:	89 e9       	ldi	r24, 0x99	; 153
    811e:	90 e0       	ldi	r25, 0x00	; 0
    8120:	90 93 71 09 	sts	0x0971, r25
    8124:	80 93 70 09 	sts	0x0970, r24

    writeCalibrationToFlash();
    8128:	0e 94 0f 4c 	call	0x981e	; 0x981e <writeCalibrationToFlash>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    }

}
    812c:	df 91       	pop	r29
    812e:	cf 91       	pop	r28
    8130:	1f 91       	pop	r17
    8132:	0f 91       	pop	r16
    8134:	ff 90       	pop	r15
    8136:	ef 90       	pop	r14
    8138:	df 90       	pop	r13
    813a:	cf 90       	pop	r12
    813c:	bf 90       	pop	r11
    813e:	af 90       	pop	r10
    8140:	9f 90       	pop	r9
    8142:	8f 90       	pop	r8
    8144:	7f 90       	pop	r7
    8146:	6f 90       	pop	r6
    8148:	5f 90       	pop	r5
    814a:	4f 90       	pop	r4
    814c:	3f 90       	pop	r3
    814e:	2f 90       	pop	r2
    8150:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    8152:	0e 94 06 4c 	call	0x980c	; 0x980c <readCalibrationFromFlash>
    8156:	ea cf       	rjmp	.-44     	; 0x812c <initCalibration+0x346>

00008158 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    8158:	80 91 65 02 	lds	r24, 0x0265
    815c:	90 91 66 02 	lds	r25, 0x0266
    8160:	84 5a       	subi	r24, 0xA4	; 164
    8162:	91 40       	sbci	r25, 0x01	; 1
    8164:	b4 f0       	brlt	.+44     	; 0x8192 <cliffDetected+0x3a>
    8166:	80 91 67 02 	lds	r24, 0x0267
    816a:	90 91 68 02 	lds	r25, 0x0268
    816e:	84 5a       	subi	r24, 0xA4	; 164
    8170:	91 40       	sbci	r25, 0x01	; 1
    8172:	7c f0       	brlt	.+30     	; 0x8192 <cliffDetected+0x3a>
    8174:	80 91 69 02 	lds	r24, 0x0269
    8178:	90 91 6a 02 	lds	r25, 0x026A
    817c:	84 5a       	subi	r24, 0xA4	; 164
    817e:	91 40       	sbci	r25, 0x01	; 1
    8180:	44 f0       	brlt	.+16     	; 0x8192 <cliffDetected+0x3a>
    8182:	20 e0       	ldi	r18, 0x00	; 0
    8184:	80 91 6b 02 	lds	r24, 0x026B
    8188:	90 91 6c 02 	lds	r25, 0x026C
    818c:	84 5a       	subi	r24, 0xA4	; 164
    818e:	91 40       	sbci	r25, 0x01	; 1
    8190:	0c f4       	brge	.+2      	; 0x8194 <cliffDetected+0x3c>
    8192:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		return 0;
	}


}
    8194:	82 2f       	mov	r24, r18
    8196:	08 95       	ret

00008198 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    8198:	81 e0       	ldi	r24, 0x01	; 1
    819a:	80 93 74 04 	sts	0x0474, r24
}
    819e:	08 95       	ret

000081a0 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    81a0:	10 92 74 04 	sts	0x0474, r1
}
    81a4:	08 95       	ret

000081a6 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    81a6:	81 e0       	ldi	r24, 0x01	; 1
    81a8:	80 93 75 04 	sts	0x0475, r24
}
    81ac:	08 95       	ret

000081ae <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    81ae:	10 92 75 04 	sts	0x0475, r1
}
    81b2:	08 95       	ret

000081b4 <obstacleAvoidance>:

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)

}

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    81b4:	2f 92       	push	r2
    81b6:	3f 92       	push	r3
    81b8:	4f 92       	push	r4
    81ba:	5f 92       	push	r5
    81bc:	6f 92       	push	r6
    81be:	7f 92       	push	r7
    81c0:	8f 92       	push	r8
    81c2:	9f 92       	push	r9
    81c4:	af 92       	push	r10
    81c6:	bf 92       	push	r11
    81c8:	cf 92       	push	r12
    81ca:	df 92       	push	r13
    81cc:	ef 92       	push	r14
    81ce:	ff 92       	push	r15
    81d0:	0f 93       	push	r16
    81d2:	1f 93       	push	r17
    81d4:	df 93       	push	r29
    81d6:	cf 93       	push	r28
    81d8:	00 d0       	rcall	.+0      	; 0x81da <obstacleAvoidance+0x26>
    81da:	00 d0       	rcall	.+0      	; 0x81dc <obstacleAvoidance+0x28>
    81dc:	cd b7       	in	r28, 0x3d	; 61
    81de:	de b7       	in	r29, 0x3e	; 62
    81e0:	2c 01       	movw	r4, r24
    81e2:	1b 01       	movw	r2, r22
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    81e4:	fc 01       	movw	r30, r24
    81e6:	01 90       	ld	r0, Z+
    81e8:	f0 81       	ld	r31, Z
    81ea:	e0 2d       	mov	r30, r0
    81ec:	fc 83       	std	Y+4, r31	; 0x04
    81ee:	eb 83       	std	Y+3, r30	; 0x03
    81f0:	fb 01       	movw	r30, r22
    81f2:	01 90       	ld	r0, Z+
    81f4:	f0 81       	ld	r31, Z
    81f6:	e0 2d       	mov	r30, r0
    81f8:	fa 83       	std	Y+2, r31	; 0x02
    81fa:	e9 83       	std	Y+1, r30	; 0x01

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    81fc:	80 91 bd 02 	lds	r24, 0x02BD
    8200:	90 91 be 02 	lds	r25, 0x02BE
    8204:	05 97       	sbiw	r24, 0x05	; 5
    8206:	24 f4       	brge	.+8      	; 0x8210 <obstacleAvoidance+0x5c>
			proximityResultLinear[i] = 0;
    8208:	10 92 be 02 	sts	0x02BE, r1
    820c:	10 92 bd 02 	sts	0x02BD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    8210:	80 91 bf 02 	lds	r24, 0x02BF
    8214:	90 91 c0 02 	lds	r25, 0x02C0
    8218:	05 97       	sbiw	r24, 0x05	; 5
    821a:	24 f4       	brge	.+8      	; 0x8224 <obstacleAvoidance+0x70>
			proximityResultLinear[i] = 0;
    821c:	10 92 c0 02 	sts	0x02C0, r1
    8220:	10 92 bf 02 	sts	0x02BF, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    8224:	80 91 c1 02 	lds	r24, 0x02C1
    8228:	90 91 c2 02 	lds	r25, 0x02C2
    822c:	05 97       	sbiw	r24, 0x05	; 5
    822e:	24 f4       	brge	.+8      	; 0x8238 <obstacleAvoidance+0x84>
			proximityResultLinear[i] = 0;
    8230:	10 92 c2 02 	sts	0x02C2, r1
    8234:	10 92 c1 02 	sts	0x02C1, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    8238:	80 91 c3 02 	lds	r24, 0x02C3
    823c:	90 91 c4 02 	lds	r25, 0x02C4
    8240:	05 97       	sbiw	r24, 0x05	; 5
    8242:	24 f4       	brge	.+8      	; 0x824c <obstacleAvoidance+0x98>
			proximityResultLinear[i] = 0;
    8244:	10 92 c4 02 	sts	0x02C4, r1
    8248:	10 92 c3 02 	sts	0x02C3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    824c:	80 91 c5 02 	lds	r24, 0x02C5
    8250:	90 91 c6 02 	lds	r25, 0x02C6
    8254:	05 97       	sbiw	r24, 0x05	; 5
    8256:	24 f4       	brge	.+8      	; 0x8260 <obstacleAvoidance+0xac>
			proximityResultLinear[i] = 0;
    8258:	10 92 c6 02 	sts	0x02C6, r1
    825c:	10 92 c5 02 	sts	0x02C5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    8260:	80 91 c7 02 	lds	r24, 0x02C7
    8264:	90 91 c8 02 	lds	r25, 0x02C8
    8268:	05 97       	sbiw	r24, 0x05	; 5
    826a:	24 f4       	brge	.+8      	; 0x8274 <obstacleAvoidance+0xc0>
			proximityResultLinear[i] = 0;
    826c:	10 92 c8 02 	sts	0x02C8, r1
    8270:	10 92 c7 02 	sts	0x02C7, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    8274:	80 91 c9 02 	lds	r24, 0x02C9
    8278:	90 91 ca 02 	lds	r25, 0x02CA
    827c:	05 97       	sbiw	r24, 0x05	; 5
    827e:	24 f4       	brge	.+8      	; 0x8288 <obstacleAvoidance+0xd4>
			proximityResultLinear[i] = 0;
    8280:	10 92 ca 02 	sts	0x02CA, r1
    8284:	10 92 c9 02 	sts	0x02C9, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    8288:	80 91 cb 02 	lds	r24, 0x02CB
    828c:	90 91 cc 02 	lds	r25, 0x02CC
    8290:	05 97       	sbiw	r24, 0x05	; 5
    8292:	24 f4       	brge	.+8      	; 0x829c <obstacleAvoidance+0xe8>
			proximityResultLinear[i] = 0;
    8294:	10 92 cc 02 	sts	0x02CC, r1
    8298:	10 92 cb 02 	sts	0x02CB, r1
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    829c:	a0 90 bd 02 	lds	r10, 0x02BD
    82a0:	b0 90 be 02 	lds	r11, 0x02BE
    82a4:	b0 94       	com	r11
    82a6:	a1 94       	neg	r10
    82a8:	b1 08       	sbc	r11, r1
    82aa:	b3 94       	inc	r11
    82ac:	80 90 bf 02 	lds	r8, 0x02BF
    82b0:	90 90 c0 02 	lds	r9, 0x02C0
    82b4:	95 94       	asr	r9
    82b6:	87 94       	ror	r8
    82b8:	c0 90 c3 02 	lds	r12, 0x02C3
    82bc:	d0 90 c4 02 	lds	r13, 0x02C4
    82c0:	d5 94       	asr	r13
    82c2:	c7 94       	ror	r12
    82c4:	20 91 c5 02 	lds	r18, 0x02C5
    82c8:	30 91 c6 02 	lds	r19, 0x02C6
    82cc:	3e 83       	std	Y+6, r19	; 0x06
    82ce:	2d 83       	std	Y+5, r18	; 0x05
    82d0:	00 91 c7 02 	lds	r16, 0x02C7
    82d4:	10 91 c8 02 	lds	r17, 0x02C8
    82d8:	15 95       	asr	r17
    82da:	07 95       	ror	r16
    82dc:	e0 90 cb 02 	lds	r14, 0x02CB
    82e0:	f0 90 cc 02 	lds	r15, 0x02CC
    82e4:	f5 94       	asr	r15
    82e6:	e7 94       	ror	r14
    82e8:	0e 94 07 5c 	call	0xb80e	; 0xb80e <rand>
    82ec:	ed 81       	ldd	r30, Y+5	; 0x05
    82ee:	fe 81       	ldd	r31, Y+6	; 0x06
    82f0:	7e 97       	sbiw	r30, 0x1e	; 30
    82f2:	ea 0d       	add	r30, r10
    82f4:	fb 1d       	adc	r31, r11
    82f6:	ec 0d       	add	r30, r12
    82f8:	fd 1d       	adc	r31, r13
    82fa:	e0 0f       	add	r30, r16
    82fc:	f1 1f       	adc	r31, r17
    82fe:	e8 19       	sub	r30, r8
    8300:	f9 09       	sbc	r31, r9
    8302:	ee 19       	sub	r30, r14
    8304:	ff 09       	sbc	r31, r15
    8306:	6c e3       	ldi	r22, 0x3C	; 60
    8308:	70 e0       	ldi	r23, 0x00	; 0
    830a:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
    830e:	e8 0f       	add	r30, r24
    8310:	f9 1f       	adc	r31, r25
    8312:	fe 83       	std	Y+6, r31	; 0x06
    8314:	ed 83       	std	Y+5, r30	; 0x05
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    8316:	60 90 bf 02 	lds	r6, 0x02BF
    831a:	70 90 c0 02 	lds	r7, 0x02C0
    831e:	75 94       	asr	r7
    8320:	67 94       	ror	r6
    8322:	c0 90 c1 02 	lds	r12, 0x02C1
    8326:	d0 90 c2 02 	lds	r13, 0x02C2
    832a:	d5 94       	asr	r13
    832c:	c7 94       	ror	r12
    832e:	d5 94       	asr	r13
    8330:	c7 94       	ror	r12
    8332:	a0 90 c3 02 	lds	r10, 0x02C3
    8336:	b0 90 c4 02 	lds	r11, 0x02C4
    833a:	b5 94       	asr	r11
    833c:	a7 94       	ror	r10
    833e:	80 90 c7 02 	lds	r8, 0x02C7
    8342:	90 90 c8 02 	lds	r9, 0x02C8
    8346:	95 94       	asr	r9
    8348:	87 94       	ror	r8
    834a:	00 91 c9 02 	lds	r16, 0x02C9
    834e:	10 91 ca 02 	lds	r17, 0x02CA
    8352:	15 95       	asr	r17
    8354:	07 95       	ror	r16
    8356:	15 95       	asr	r17
    8358:	07 95       	ror	r16
    835a:	e0 90 cb 02 	lds	r14, 0x02CB
    835e:	f0 90 cc 02 	lds	r15, 0x02CC
    8362:	f5 94       	asr	r15
    8364:	e7 94       	ror	r14
    8366:	0e 94 07 5c 	call	0xb80e	; 0xb80e <rand>
    836a:	93 01       	movw	r18, r6
    836c:	2c 0d       	add	r18, r12
    836e:	3d 1d       	adc	r19, r13
    8370:	2e 51       	subi	r18, 0x1E	; 30
    8372:	30 40       	sbci	r19, 0x00	; 0
    8374:	2a 0d       	add	r18, r10
    8376:	3b 1d       	adc	r19, r11
    8378:	20 1b       	sub	r18, r16
    837a:	31 0b       	sbc	r19, r17
    837c:	28 19       	sub	r18, r8
    837e:	39 09       	sbc	r19, r9
    8380:	2e 19       	sub	r18, r14
    8382:	3f 09       	sbc	r19, r15
    8384:	6c e3       	ldi	r22, 0x3C	; 60
    8386:	70 e0       	ldi	r23, 0x00	; 0
    8388:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <__divmodhi4>
    838c:	28 0f       	add	r18, r24
    838e:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    8390:	8b 81       	ldd	r24, Y+3	; 0x03
    8392:	9c 81       	ldd	r25, Y+4	; 0x04
    8394:	97 fd       	sbrc	r25, 7
    8396:	db c0       	rjmp	.+438    	; 0x854e <obstacleAvoidance+0x39a>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    8398:	7c 01       	movw	r14, r24
    839a:	00 27       	eor	r16, r16
    839c:	f7 fc       	sbrc	r15, 7
    839e:	00 95       	com	r16
    83a0:	10 2f       	mov	r17, r16
    83a2:	ed 81       	ldd	r30, Y+5	; 0x05
    83a4:	fe 81       	ldd	r31, Y+6	; 0x06
    83a6:	3f 01       	movw	r6, r30
    83a8:	88 24       	eor	r8, r8
    83aa:	77 fc       	sbrc	r7, 7
    83ac:	80 94       	com	r8
    83ae:	98 2c       	mov	r9, r8
    83b0:	59 01       	movw	r10, r18
    83b2:	cc 24       	eor	r12, r12
    83b4:	b7 fc       	sbrc	r11, 7
    83b6:	c0 94       	com	r12
    83b8:	dc 2c       	mov	r13, r12
		*pwmLeft = (signed int)res;
    83ba:	c4 01       	movw	r24, r8
    83bc:	b3 01       	movw	r22, r6
    83be:	6a 19       	sub	r22, r10
    83c0:	7b 09       	sbc	r23, r11
    83c2:	8c 09       	sbc	r24, r12
    83c4:	9d 09       	sbc	r25, r13
    83c6:	a8 01       	movw	r20, r16
    83c8:	97 01       	movw	r18, r14
    83ca:	0e 94 29 5b 	call	0xb652	; 0xb652 <__mulsi3>
    83ce:	56 e0       	ldi	r21, 0x06	; 6
    83d0:	95 95       	asr	r25
    83d2:	87 95       	ror	r24
    83d4:	77 95       	ror	r23
    83d6:	67 95       	ror	r22
    83d8:	5a 95       	dec	r21
    83da:	d1 f7       	brne	.-12     	; 0x83d0 <obstacleAvoidance+0x21c>
    83dc:	e6 0e       	add	r14, r22
    83de:	f7 1e       	adc	r15, r23
    83e0:	08 1f       	adc	r16, r24
    83e2:	19 1f       	adc	r17, r25
    83e4:	f2 01       	movw	r30, r4
    83e6:	f1 82       	std	Z+1, r15	; 0x01
    83e8:	e0 82       	st	Z, r14
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    83ea:	29 81       	ldd	r18, Y+1	; 0x01
    83ec:	3a 81       	ldd	r19, Y+2	; 0x02
    83ee:	37 fd       	sbrc	r19, 7
    83f0:	8f c0       	rjmp	.+286    	; 0x8510 <obstacleAvoidance+0x35c>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    83f2:	79 01       	movw	r14, r18
    83f4:	00 27       	eor	r16, r16
    83f6:	f7 fc       	sbrc	r15, 7
    83f8:	00 95       	com	r16
    83fa:	10 2f       	mov	r17, r16
		*pwmRight = (signed int)res;
    83fc:	a6 0c       	add	r10, r6
    83fe:	b7 1c       	adc	r11, r7
    8400:	c8 1c       	adc	r12, r8
    8402:	d9 1c       	adc	r13, r9
    8404:	c6 01       	movw	r24, r12
    8406:	b5 01       	movw	r22, r10
    8408:	a8 01       	movw	r20, r16
    840a:	97 01       	movw	r18, r14
    840c:	0e 94 29 5b 	call	0xb652	; 0xb652 <__mulsi3>
    8410:	36 e0       	ldi	r19, 0x06	; 6
    8412:	95 95       	asr	r25
    8414:	87 95       	ror	r24
    8416:	77 95       	ror	r23
    8418:	67 95       	ror	r22
    841a:	3a 95       	dec	r19
    841c:	d1 f7       	brne	.-12     	; 0x8412 <obstacleAvoidance+0x25e>
    841e:	6e 0d       	add	r22, r14
    8420:	7f 1d       	adc	r23, r15
    8422:	80 1f       	adc	r24, r16
    8424:	91 1f       	adc	r25, r17
    8426:	ab 01       	movw	r20, r22
    8428:	f1 01       	movw	r30, r2
    842a:	71 83       	std	Z+1, r23	; 0x01
    842c:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    842e:	80 91 50 04 	lds	r24, 0x0450
    8432:	8a 30       	cpi	r24, 0x0A	; 10
    8434:	09 f4       	brne	.+2      	; 0x8438 <obstacleAvoidance+0x284>
    8436:	48 c0       	rjmp	.+144    	; 0x84c8 <obstacleAvoidance+0x314>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    8438:	f2 e0       	ldi	r31, 0x02	; 2
    843a:	40 30       	cpi	r20, 0x00	; 0
    843c:	5f 07       	cpc	r21, r31
    843e:	3c f0       	brlt	.+14     	; 0x844e <obstacleAvoidance+0x29a>
    8440:	8f ef       	ldi	r24, 0xFF	; 255
    8442:	91 e0       	ldi	r25, 0x01	; 1
    8444:	f1 01       	movw	r30, r2
    8446:	91 83       	std	Z+1, r25	; 0x01
    8448:	80 83       	st	Z, r24
    844a:	4f ef       	ldi	r20, 0xFF	; 255
    844c:	51 e0       	ldi	r21, 0x01	; 1
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    844e:	f2 01       	movw	r30, r4
    8450:	20 81       	ld	r18, Z
    8452:	31 81       	ldd	r19, Z+1	; 0x01
    8454:	f2 e0       	ldi	r31, 0x02	; 2
    8456:	20 30       	cpi	r18, 0x00	; 0
    8458:	3f 07       	cpc	r19, r31
    845a:	54 f0       	brlt	.+20     	; 0x8470 <obstacleAvoidance+0x2bc>
    845c:	8f ef       	ldi	r24, 0xFF	; 255
    845e:	91 e0       	ldi	r25, 0x01	; 1
    8460:	f2 01       	movw	r30, r4
    8462:	91 83       	std	Z+1, r25	; 0x01
    8464:	80 83       	st	Z, r24
    8466:	f1 01       	movw	r30, r2
    8468:	40 81       	ld	r20, Z
    846a:	51 81       	ldd	r21, Z+1	; 0x01
    846c:	2f ef       	ldi	r18, 0xFF	; 255
    846e:	31 e0       	ldi	r19, 0x01	; 1
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    8470:	41 50       	subi	r20, 0x01	; 1
    8472:	5e 4f       	sbci	r21, 0xFE	; 254
    8474:	44 f4       	brge	.+16     	; 0x8486 <obstacleAvoidance+0x2d2>
    8476:	81 e0       	ldi	r24, 0x01	; 1
    8478:	9e ef       	ldi	r25, 0xFE	; 254
    847a:	f1 01       	movw	r30, r2
    847c:	91 83       	std	Z+1, r25	; 0x01
    847e:	80 83       	st	Z, r24
    8480:	f2 01       	movw	r30, r4
    8482:	20 81       	ld	r18, Z
    8484:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    8486:	21 50       	subi	r18, 0x01	; 1
    8488:	3e 4f       	sbci	r19, 0xFE	; 254
    848a:	2c f4       	brge	.+10     	; 0x8496 <obstacleAvoidance+0x2e2>
    848c:	81 e0       	ldi	r24, 0x01	; 1
    848e:	9e ef       	ldi	r25, 0xFE	; 254
    8490:	f2 01       	movw	r30, r4
    8492:	91 83       	std	Z+1, r25	; 0x01
    8494:	80 83       	st	Z, r24

}
    8496:	26 96       	adiw	r28, 0x06	; 6
    8498:	0f b6       	in	r0, 0x3f	; 63
    849a:	f8 94       	cli
    849c:	de bf       	out	0x3e, r29	; 62
    849e:	0f be       	out	0x3f, r0	; 63
    84a0:	cd bf       	out	0x3d, r28	; 61
    84a2:	cf 91       	pop	r28
    84a4:	df 91       	pop	r29
    84a6:	1f 91       	pop	r17
    84a8:	0f 91       	pop	r16
    84aa:	ff 90       	pop	r15
    84ac:	ef 90       	pop	r14
    84ae:	df 90       	pop	r13
    84b0:	cf 90       	pop	r12
    84b2:	bf 90       	pop	r11
    84b4:	af 90       	pop	r10
    84b6:	9f 90       	pop	r9
    84b8:	8f 90       	pop	r8
    84ba:	7f 90       	pop	r7
    84bc:	6f 90       	pop	r6
    84be:	5f 90       	pop	r5
    84c0:	4f 90       	pop	r4
    84c2:	3f 90       	pop	r3
    84c4:	2f 90       	pop	r2
    84c6:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    84c8:	2b 81       	ldd	r18, Y+3	; 0x03
    84ca:	3c 81       	ldd	r19, Y+4	; 0x04
    84cc:	23 2b       	or	r18, r19
    84ce:	e1 f0       	breq	.+56     	; 0x8508 <obstacleAvoidance+0x354>
    84d0:	29 81       	ldd	r18, Y+1	; 0x01
    84d2:	3a 81       	ldd	r19, Y+2	; 0x02
    84d4:	23 2b       	or	r18, r19
    84d6:	c1 f0       	breq	.+48     	; 0x8508 <obstacleAvoidance+0x354>
			if(currentAngle<270 && currentAngle>90) {
    84d8:	80 91 42 04 	lds	r24, 0x0442
    84dc:	90 91 43 04 	lds	r25, 0x0443
    84e0:	8b 55       	subi	r24, 0x5B	; 91
    84e2:	90 40       	sbci	r25, 0x00	; 0
    84e4:	83 3b       	cpi	r24, 0xB3	; 179
    84e6:	91 05       	cpc	r25, r1
    84e8:	08 f0       	brcs	.+2      	; 0x84ec <obstacleAvoidance+0x338>
    84ea:	5b c0       	rjmp	.+182    	; 0x85a2 <obstacleAvoidance+0x3ee>
				*pwmLeft += 10;
    84ec:	f2 01       	movw	r30, r4
    84ee:	80 81       	ld	r24, Z
    84f0:	91 81       	ldd	r25, Z+1	; 0x01
    84f2:	0a 96       	adiw	r24, 0x0a	; 10
    84f4:	91 83       	std	Z+1, r25	; 0x01
    84f6:	80 83       	st	Z, r24
				*pwmRight -= 10;
    84f8:	f1 01       	movw	r30, r2
    84fa:	40 81       	ld	r20, Z
    84fc:	51 81       	ldd	r21, Z+1	; 0x01
    84fe:	4a 50       	subi	r20, 0x0A	; 10
    8500:	50 40       	sbci	r21, 0x00	; 0
    8502:	51 83       	std	Z+1, r21	; 0x01
    8504:	40 83       	st	Z, r20
    8506:	98 cf       	rjmp	.-208    	; 0x8438 <obstacleAvoidance+0x284>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    8508:	f1 01       	movw	r30, r2
    850a:	40 81       	ld	r20, Z
    850c:	51 81       	ldd	r21, Z+1	; 0x01
    850e:	94 cf       	rjmp	.-216    	; 0x8438 <obstacleAvoidance+0x284>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    8510:	79 01       	movw	r14, r18
    8512:	00 27       	eor	r16, r16
    8514:	f7 fc       	sbrc	r15, 7
    8516:	00 95       	com	r16
    8518:	10 2f       	mov	r17, r16
		*pwmRight = (signed int)res;
    851a:	6a 18       	sub	r6, r10
    851c:	7b 08       	sbc	r7, r11
    851e:	8c 08       	sbc	r8, r12
    8520:	9d 08       	sbc	r9, r13
    8522:	c4 01       	movw	r24, r8
    8524:	b3 01       	movw	r22, r6
    8526:	a8 01       	movw	r20, r16
    8528:	97 01       	movw	r18, r14
    852a:	0e 94 29 5b 	call	0xb652	; 0xb652 <__mulsi3>
    852e:	26 e0       	ldi	r18, 0x06	; 6
    8530:	95 95       	asr	r25
    8532:	87 95       	ror	r24
    8534:	77 95       	ror	r23
    8536:	67 95       	ror	r22
    8538:	2a 95       	dec	r18
    853a:	d1 f7       	brne	.-12     	; 0x8530 <obstacleAvoidance+0x37c>
    853c:	e6 1a       	sub	r14, r22
    853e:	f7 0a       	sbc	r15, r23
    8540:	08 0b       	sbc	r16, r24
    8542:	19 0b       	sbc	r17, r25
    8544:	a7 01       	movw	r20, r14
    8546:	f1 01       	movw	r30, r2
    8548:	f1 82       	std	Z+1, r15	; 0x01
    854a:	e0 82       	st	Z, r14
    854c:	70 cf       	rjmp	.-288    	; 0x842e <obstacleAvoidance+0x27a>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    854e:	7c 01       	movw	r14, r24
    8550:	00 27       	eor	r16, r16
    8552:	f7 fc       	sbrc	r15, 7
    8554:	00 95       	com	r16
    8556:	10 2f       	mov	r17, r16
    8558:	ed 81       	ldd	r30, Y+5	; 0x05
    855a:	fe 81       	ldd	r31, Y+6	; 0x06
    855c:	3f 01       	movw	r6, r30
    855e:	88 24       	eor	r8, r8
    8560:	77 fc       	sbrc	r7, 7
    8562:	80 94       	com	r8
    8564:	98 2c       	mov	r9, r8
    8566:	59 01       	movw	r10, r18
    8568:	cc 24       	eor	r12, r12
    856a:	b7 fc       	sbrc	r11, 7
    856c:	c0 94       	com	r12
    856e:	dc 2c       	mov	r13, r12
		*pwmLeft = (signed int)res;
    8570:	c6 01       	movw	r24, r12
    8572:	b5 01       	movw	r22, r10
    8574:	66 0d       	add	r22, r6
    8576:	77 1d       	adc	r23, r7
    8578:	88 1d       	adc	r24, r8
    857a:	99 1d       	adc	r25, r9
    857c:	a8 01       	movw	r20, r16
    857e:	97 01       	movw	r18, r14
    8580:	0e 94 29 5b 	call	0xb652	; 0xb652 <__mulsi3>
    8584:	46 e0       	ldi	r20, 0x06	; 6
    8586:	95 95       	asr	r25
    8588:	87 95       	ror	r24
    858a:	77 95       	ror	r23
    858c:	67 95       	ror	r22
    858e:	4a 95       	dec	r20
    8590:	d1 f7       	brne	.-12     	; 0x8586 <obstacleAvoidance+0x3d2>
    8592:	e6 1a       	sub	r14, r22
    8594:	f7 0a       	sbc	r15, r23
    8596:	08 0b       	sbc	r16, r24
    8598:	19 0b       	sbc	r17, r25
    859a:	f2 01       	movw	r30, r4
    859c:	f1 82       	std	Z+1, r15	; 0x01
    859e:	e0 82       	st	Z, r14
    85a0:	24 cf       	rjmp	.-440    	; 0x83ea <obstacleAvoidance+0x236>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    85a2:	f2 01       	movw	r30, r4
    85a4:	80 81       	ld	r24, Z
    85a6:	91 81       	ldd	r25, Z+1	; 0x01
    85a8:	0a 97       	sbiw	r24, 0x0a	; 10
    85aa:	91 83       	std	Z+1, r25	; 0x01
    85ac:	80 83       	st	Z, r24
				*pwmRight += 10;
    85ae:	f1 01       	movw	r30, r2
    85b0:	40 81       	ld	r20, Z
    85b2:	51 81       	ldd	r21, Z+1	; 0x01
    85b4:	46 5f       	subi	r20, 0xF6	; 246
    85b6:	5f 4f       	sbci	r21, 0xFF	; 255
    85b8:	51 83       	std	Z+1, r21	; 0x01
    85ba:	40 83       	st	Z, r20
    85bc:	3d cf       	rjmp	.-390    	; 0x8438 <obstacleAvoidance+0x284>

000085be <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    85be:	80 91 94 00 	lds	r24, 0x0094
    85c2:	90 91 95 00 	lds	r25, 0x0095
    85c6:	0e 94 0c 5c 	call	0xb818	; 0xb818 <srand>

}
    85ca:	08 95       	ret

000085cc <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    85cc:	e0 e8       	ldi	r30, 0x80	; 128
    85ce:	f0 e0       	ldi	r31, 0x00	; 0
    85d0:	10 82       	st	Z, r1
	TCCR1B = 0;
    85d2:	a1 e8       	ldi	r26, 0x81	; 129
    85d4:	b0 e0       	ldi	r27, 0x00	; 0
    85d6:	1c 92       	st	X, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    85d8:	80 81       	ld	r24, Z
    85da:	89 6a       	ori	r24, 0xA9	; 169
    85dc:	80 83       	st	Z, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    85de:	8c 91       	ld	r24, X
    85e0:	89 60       	ori	r24, 0x09	; 9
    85e2:	8c 93       	st	X, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    85e4:	80 91 08 02 	lds	r24, 0x0208
    85e8:	90 e0       	ldi	r25, 0x00	; 0
    85ea:	90 93 89 00 	sts	0x0089, r25
    85ee:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    85f2:	80 91 09 02 	lds	r24, 0x0209
    85f6:	90 e0       	ldi	r25, 0x00	; 0
    85f8:	90 93 8b 00 	sts	0x008B, r25
    85fc:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    8600:	80 91 0a 02 	lds	r24, 0x020A
    8604:	90 e0       	ldi	r25, 0x00	; 0
    8606:	90 93 8d 00 	sts	0x008D, r25
    860a:	80 93 8c 00 	sts	0x008C, r24

}
    860e:	08 95       	ret

00008610 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    8610:	81 e0       	ldi	r24, 0x01	; 1
    8612:	90 91 17 03 	lds	r25, 0x0317
    8616:	89 1b       	sub	r24, r25
    8618:	80 93 17 03 	sts	0x0317, r24

	if(blinkState) {
    861c:	88 23       	and	r24, r24
    861e:	39 f4       	brne	.+14     	; 0x862e <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    8620:	80 91 80 00 	lds	r24, 0x0080
    8624:	87 7f       	andi	r24, 0xF7	; 247
    8626:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    862a:	2f 98       	cbi	0x05, 7	; 5
    862c:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    862e:	80 91 80 00 	lds	r24, 0x0080
    8632:	88 60       	ori	r24, 0x08	; 8
    8634:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    8638:	8f ef       	ldi	r24, 0xFF	; 255
    863a:	90 e0       	ldi	r25, 0x00	; 0
    863c:	90 93 8d 00 	sts	0x008D, r25
    8640:	80 93 8c 00 	sts	0x008C, r24
    8644:	08 95       	ret

00008646 <updateRedLed>:
									// the pin is configured accordingly (low state).
	}

}

void updateRedLed(unsigned char value) {
    8646:	98 2f       	mov	r25, r24

	if(value == 0) {
    8648:	88 23       	and	r24, r24
    864a:	61 f0       	breq	.+24     	; 0x8664 <updateRedLed+0x1e>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    864c:	80 91 80 00 	lds	r24, 0x0080
    8650:	80 68       	ori	r24, 0x80	; 128
    8652:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    8656:	89 2f       	mov	r24, r25
    8658:	90 e0       	ldi	r25, 0x00	; 0
    865a:	90 93 89 00 	sts	0x0089, r25
    865e:	80 93 88 00 	sts	0x0088, r24
    8662:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    8664:	80 91 80 00 	lds	r24, 0x0080
    8668:	8f 77       	andi	r24, 0x7F	; 127
    866a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    866e:	2d 98       	cbi	0x05, 5	; 5
    8670:	08 95       	ret

00008672 <updateGreenLed>:
		OCR1A = value;
	}

}

void updateGreenLed(unsigned char value) {
    8672:	98 2f       	mov	r25, r24

	if(value == 0) {
    8674:	88 23       	and	r24, r24
    8676:	61 f0       	breq	.+24     	; 0x8690 <updateGreenLed+0x1e>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    8678:	80 91 80 00 	lds	r24, 0x0080
    867c:	80 62       	ori	r24, 0x20	; 32
    867e:	80 93 80 00 	sts	0x0080, r24
		OCR1B = value;
    8682:	89 2f       	mov	r24, r25
    8684:	90 e0       	ldi	r25, 0x00	; 0
    8686:	90 93 8b 00 	sts	0x008B, r25
    868a:	80 93 8a 00 	sts	0x008A, r24
    868e:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    8690:	80 91 80 00 	lds	r24, 0x0080
    8694:	8f 7d       	andi	r24, 0xDF	; 223
    8696:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    869a:	2e 98       	cbi	0x05, 6	; 5
    869c:	08 95       	ret

0000869e <updateBlueLed>:
		OCR1B = value;
	}

}

void updateBlueLed(unsigned char value) {
    869e:	98 2f       	mov	r25, r24

	if(value == 0) {
    86a0:	88 23       	and	r24, r24
    86a2:	61 f0       	breq	.+24     	; 0x86bc <updateBlueLed+0x1e>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    86a4:	80 91 80 00 	lds	r24, 0x0080
    86a8:	88 60       	ori	r24, 0x08	; 8
    86aa:	80 93 80 00 	sts	0x0080, r24
		OCR1C = value;
    86ae:	89 2f       	mov	r24, r25
    86b0:	90 e0       	ldi	r25, 0x00	; 0
    86b2:	90 93 8d 00 	sts	0x008D, r25
    86b6:	80 93 8c 00 	sts	0x008C, r24
    86ba:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    86bc:	80 91 80 00 	lds	r24, 0x0080
    86c0:	87 7f       	andi	r24, 0xF7	; 247
    86c2:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    86c6:	2f 98       	cbi	0x05, 7	; 5
    86c8:	08 95       	ret

000086ca <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    86ca:	83 30       	cpi	r24, 0x03	; 3
    86cc:	09 f4       	brne	.+2      	; 0x86d0 <setGreenLed+0x6>
    86ce:	5a c0       	rjmp	.+180    	; 0x8784 <setGreenLed+0xba>
    86d0:	84 30       	cpi	r24, 0x04	; 4
    86d2:	80 f0       	brcs	.+32     	; 0x86f4 <setGreenLed+0x2a>
    86d4:	85 30       	cpi	r24, 0x05	; 5
    86d6:	09 f4       	brne	.+2      	; 0x86da <setGreenLed+0x10>
    86d8:	41 c0       	rjmp	.+130    	; 0x875c <setGreenLed+0x92>
    86da:	85 30       	cpi	r24, 0x05	; 5
    86dc:	d0 f4       	brcc	.+52     	; 0x8712 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    86de:	66 23       	and	r22, r22
    86e0:	09 f4       	brne	.+2      	; 0x86e4 <setGreenLed+0x1a>
    86e2:	68 c0       	rjmp	.+208    	; 0x87b4 <setGreenLed+0xea>
    86e4:	80 91 0b 01 	lds	r24, 0x010B
    86e8:	8f 7e       	andi	r24, 0xEF	; 239
    86ea:	80 93 0b 01 	sts	0x010B, r24
    86ee:	80 91 0b 01 	lds	r24, 0x010B
    86f2:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    86f4:	81 30       	cpi	r24, 0x01	; 1
    86f6:	e1 f1       	breq	.+120    	; 0x8770 <setGreenLed+0xa6>
    86f8:	82 30       	cpi	r24, 0x02	; 2
    86fa:	80 f0       	brcs	.+32     	; 0x871c <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    86fc:	66 23       	and	r22, r22
    86fe:	09 f4       	brne	.+2      	; 0x8702 <setGreenLed+0x38>
    8700:	46 c0       	rjmp	.+140    	; 0x878e <setGreenLed+0xc4>
    8702:	80 91 0b 01 	lds	r24, 0x010B
    8706:	8b 7f       	andi	r24, 0xFB	; 251
    8708:	80 93 0b 01 	sts	0x010B, r24
    870c:	80 91 0b 01 	lds	r24, 0x010B
    8710:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    8712:	86 30       	cpi	r24, 0x06	; 6
    8714:	c9 f0       	breq	.+50     	; 0x8748 <setGreenLed+0x7e>
    8716:	87 30       	cpi	r24, 0x07	; 7
    8718:	61 f0       	breq	.+24     	; 0x8732 <setGreenLed+0x68>
    871a:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    871c:	66 23       	and	r22, r22
    871e:	09 f4       	brne	.+2      	; 0x8722 <setGreenLed+0x58>
    8720:	51 c0       	rjmp	.+162    	; 0x87c4 <setGreenLed+0xfa>
    8722:	80 91 0b 01 	lds	r24, 0x010B
    8726:	8e 7f       	andi	r24, 0xFE	; 254
    8728:	80 93 0b 01 	sts	0x010B, r24
    872c:	80 91 0b 01 	lds	r24, 0x010B
    8730:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    8732:	66 23       	and	r22, r22
    8734:	09 f0       	breq	.+2      	; 0x8738 <setGreenLed+0x6e>
    8736:	5e c0       	rjmp	.+188    	; 0x87f4 <setGreenLed+0x12a>
    8738:	80 91 0b 01 	lds	r24, 0x010B
    873c:	80 68       	ori	r24, 0x80	; 128
    873e:	80 93 0b 01 	sts	0x010B, r24
    8742:	80 91 0b 01 	lds	r24, 0x010B
    8746:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    8748:	66 23       	and	r22, r22
    874a:	49 f1       	breq	.+82     	; 0x879e <setGreenLed+0xd4>
    874c:	80 91 0b 01 	lds	r24, 0x010B
    8750:	8f 7b       	andi	r24, 0xBF	; 191
    8752:	80 93 0b 01 	sts	0x010B, r24
    8756:	80 91 0b 01 	lds	r24, 0x010B
    875a:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    875c:	66 23       	and	r22, r22
    875e:	d1 f1       	breq	.+116    	; 0x87d4 <setGreenLed+0x10a>
    8760:	80 91 0b 01 	lds	r24, 0x010B
    8764:	8f 7d       	andi	r24, 0xDF	; 223
    8766:	80 93 0b 01 	sts	0x010B, r24
    876a:	80 91 0b 01 	lds	r24, 0x010B
    876e:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    8770:	66 23       	and	r22, r22
    8772:	c1 f1       	breq	.+112    	; 0x87e4 <setGreenLed+0x11a>
    8774:	80 91 0b 01 	lds	r24, 0x010B
    8778:	8d 7f       	andi	r24, 0xFD	; 253
    877a:	80 93 0b 01 	sts	0x010B, r24
    877e:	80 91 0b 01 	lds	r24, 0x010B
    8782:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    8784:	66 23       	and	r22, r22
    8786:	99 f0       	breq	.+38     	; 0x87ae <setGreenLed+0xe4>
    8788:	a3 98       	cbi	0x14, 3	; 20
    878a:	84 b3       	in	r24, 0x14	; 20
    878c:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    878e:	80 91 0b 01 	lds	r24, 0x010B
    8792:	84 60       	ori	r24, 0x04	; 4
    8794:	80 93 0b 01 	sts	0x010B, r24
    8798:	80 91 0b 01 	lds	r24, 0x010B
    879c:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    879e:	80 91 0b 01 	lds	r24, 0x010B
    87a2:	80 64       	ori	r24, 0x40	; 64
    87a4:	80 93 0b 01 	sts	0x010B, r24
    87a8:	80 91 0b 01 	lds	r24, 0x010B
    87ac:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    87ae:	a3 9a       	sbi	0x14, 3	; 20
    87b0:	84 b3       	in	r24, 0x14	; 20
    87b2:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    87b4:	80 91 0b 01 	lds	r24, 0x010B
    87b8:	80 61       	ori	r24, 0x10	; 16
    87ba:	80 93 0b 01 	sts	0x010B, r24
    87be:	80 91 0b 01 	lds	r24, 0x010B
    87c2:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    87c4:	80 91 0b 01 	lds	r24, 0x010B
    87c8:	81 60       	ori	r24, 0x01	; 1
    87ca:	80 93 0b 01 	sts	0x010B, r24
    87ce:	80 91 0b 01 	lds	r24, 0x010B
    87d2:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    87d4:	80 91 0b 01 	lds	r24, 0x010B
    87d8:	80 62       	ori	r24, 0x20	; 32
    87da:	80 93 0b 01 	sts	0x010B, r24
    87de:	80 91 0b 01 	lds	r24, 0x010B
    87e2:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    87e4:	80 91 0b 01 	lds	r24, 0x010B
    87e8:	82 60       	ori	r24, 0x02	; 2
    87ea:	80 93 0b 01 	sts	0x010B, r24
    87ee:	80 91 0b 01 	lds	r24, 0x010B
    87f2:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    87f4:	80 91 0b 01 	lds	r24, 0x010B
    87f8:	8f 77       	andi	r24, 0x7F	; 127
    87fa:	80 93 0b 01 	sts	0x010B, r24
    87fe:	80 91 0b 01 	lds	r24, 0x010B
    8802:	08 95       	ret

00008804 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    8804:	eb e0       	ldi	r30, 0x0B	; 11
    8806:	f1 e0       	ldi	r31, 0x01	; 1
    8808:	80 81       	ld	r24, Z
    880a:	81 60       	ori	r24, 0x01	; 1
    880c:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    880e:	80 81       	ld	r24, Z
    8810:	82 60       	ori	r24, 0x02	; 2
    8812:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    8814:	80 81       	ld	r24, Z
    8816:	84 60       	ori	r24, 0x04	; 4
    8818:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    881a:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    881c:	80 81       	ld	r24, Z
    881e:	80 61       	ori	r24, 0x10	; 16
    8820:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    8822:	80 81       	ld	r24, Z
    8824:	80 62       	ori	r24, 0x20	; 32
    8826:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    8828:	80 81       	ld	r24, Z
    882a:	80 64       	ori	r24, 0x40	; 64
    882c:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    882e:	80 81       	ld	r24, Z
    8830:	80 68       	ori	r24, 0x80	; 128
    8832:	80 83       	st	Z, r24

}
    8834:	08 95       	ret

00008836 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    8836:	eb e0       	ldi	r30, 0x0B	; 11
    8838:	f1 e0       	ldi	r31, 0x01	; 1
    883a:	80 81       	ld	r24, Z
    883c:	8e 7f       	andi	r24, 0xFE	; 254
    883e:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    8840:	80 81       	ld	r24, Z
    8842:	8d 7f       	andi	r24, 0xFD	; 253
    8844:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    8846:	80 81       	ld	r24, Z
    8848:	8b 7f       	andi	r24, 0xFB	; 251
    884a:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    884c:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    884e:	80 81       	ld	r24, Z
    8850:	8f 7e       	andi	r24, 0xEF	; 239
    8852:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    8854:	80 81       	ld	r24, Z
    8856:	8f 7d       	andi	r24, 0xDF	; 223
    8858:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    885a:	80 81       	ld	r24, Z
    885c:	8f 7b       	andi	r24, 0xBF	; 191
    885e:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    8860:	80 81       	ld	r24, Z
    8862:	8f 77       	andi	r24, 0x7F	; 127
    8864:	80 83       	st	Z, r24

}
    8866:	08 95       	ret

00008868 <computeAngle>:

	}

}

void computeAngle() {
    8868:	ef 92       	push	r14
    886a:	ff 92       	push	r15
    886c:	0f 93       	push	r16
    886e:	1f 93       	push	r17

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    8870:	80 91 30 04 	lds	r24, 0x0430
    8874:	90 91 31 04 	lds	r25, 0x0431
    8878:	97 fd       	sbrc	r25, 7
    887a:	6c c0       	rjmp	.+216    	; 0x8954 <computeAngle+0xec>
    887c:	8d 97       	sbiw	r24, 0x2d	; 45
    887e:	0c f4       	brge	.+2      	; 0x8882 <computeAngle+0x1a>
    8880:	54 c0       	rjmp	.+168    	; 0x892a <computeAngle+0xc2>
		currPosition = HORIZONTAL_POS;
    8882:	81 e0       	ldi	r24, 0x01	; 1
    8884:	80 93 11 02 	sts	0x0211, r24
    8888:	28 2f       	mov	r18, r24
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    888a:	80 91 12 02 	lds	r24, 0x0212
    888e:	28 17       	cp	r18, r24
    8890:	09 f4       	brne	.+2      	; 0x8894 <computeAngle+0x2c>
    8892:	54 c0       	rjmp	.+168    	; 0x893c <computeAngle+0xd4>
		timesInSamePos++;
    8894:	80 91 44 04 	lds	r24, 0x0444
    8898:	90 91 45 04 	lds	r25, 0x0445
    889c:	01 96       	adiw	r24, 0x01	; 1
    889e:	90 93 45 04 	sts	0x0445, r25
    88a2:	80 93 44 04 	sts	0x0444, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    88a6:	88 3c       	cpi	r24, 0xC8	; 200
    88a8:	91 05       	cpc	r25, r1
    88aa:	08 f0       	brcs	.+2      	; 0x88ae <computeAngle+0x46>
    88ac:	4c c0       	rjmp	.+152    	; 0x8946 <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    88ae:	60 91 2c 04 	lds	r22, 0x042C
    88b2:	70 91 2d 04 	lds	r23, 0x042D
    88b6:	88 27       	eor	r24, r24
    88b8:	77 fd       	sbrc	r23, 7
    88ba:	80 95       	com	r24
    88bc:	98 2f       	mov	r25, r24
    88be:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    88c2:	7b 01       	movw	r14, r22
    88c4:	8c 01       	movw	r16, r24
    88c6:	60 91 2e 04 	lds	r22, 0x042E
    88ca:	70 91 2f 04 	lds	r23, 0x042F
    88ce:	88 27       	eor	r24, r24
    88d0:	77 fd       	sbrc	r23, 7
    88d2:	80 95       	com	r24
    88d4:	98 2f       	mov	r25, r24
    88d6:	0e 94 85 59 	call	0xb30a	; 0xb30a <__floatsisf>
    88da:	9b 01       	movw	r18, r22
    88dc:	ac 01       	movw	r20, r24
    88de:	c8 01       	movw	r24, r16
    88e0:	b7 01       	movw	r22, r14
    88e2:	0e 94 90 58 	call	0xb120	; 0xb120 <atan2>
    88e6:	60 93 ac 04 	sts	0x04AC, r22
    88ea:	70 93 ad 04 	sts	0x04AD, r23
    88ee:	80 93 ae 04 	sts	0x04AE, r24
    88f2:	90 93 af 04 	sts	0x04AF, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    88f6:	21 ee       	ldi	r18, 0xE1	; 225
    88f8:	3e e2       	ldi	r19, 0x2E	; 46
    88fa:	45 e6       	ldi	r20, 0x65	; 101
    88fc:	52 e4       	ldi	r21, 0x42	; 66
    88fe:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__mulsf3>
    8902:	0e 94 52 59 	call	0xb2a4	; 0xb2a4 <__fixsfsi>
    8906:	cb 01       	movw	r24, r22
    8908:	70 93 43 04 	sts	0x0443, r23
    890c:	60 93 42 04 	sts	0x0442, r22

	if(currentAngle < 0) {
    8910:	77 ff       	sbrs	r23, 7
    8912:	06 c0       	rjmp	.+12     	; 0x8920 <computeAngle+0xb8>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    8914:	88 59       	subi	r24, 0x98	; 152
    8916:	9e 4f       	sbci	r25, 0xFE	; 254
    8918:	90 93 43 04 	sts	0x0443, r25
    891c:	80 93 42 04 	sts	0x0442, r24
	}

}
    8920:	1f 91       	pop	r17
    8922:	0f 91       	pop	r16
    8924:	ff 90       	pop	r15
    8926:	ef 90       	pop	r14
    8928:	08 95       	ret

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    892a:	10 92 11 02 	sts	0x0211, r1
    892e:	20 91 11 02 	lds	r18, 0x0211
	}
	if(currPosition != robotPosition) {			
    8932:	80 91 12 02 	lds	r24, 0x0212
    8936:	28 17       	cp	r18, r24
    8938:	09 f0       	breq	.+2      	; 0x893c <computeAngle+0xd4>
    893a:	ac cf       	rjmp	.-168    	; 0x8894 <computeAngle+0x2c>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    893c:	10 92 45 04 	sts	0x0445, r1
    8940:	10 92 44 04 	sts	0x0444, r1
    8944:	b4 cf       	rjmp	.-152    	; 0x88ae <computeAngle+0x46>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    8946:	10 92 45 04 	sts	0x0445, r1
    894a:	10 92 44 04 	sts	0x0444, r1
			robotPosition = currPosition;
    894e:	20 93 12 02 	sts	0x0212, r18
    8952:	ad cf       	rjmp	.-166    	; 0x88ae <computeAngle+0x46>
}

void computeAngle() {

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    8954:	90 95       	com	r25
    8956:	81 95       	neg	r24
    8958:	9f 4f       	sbci	r25, 0xFF	; 255
    895a:	90 cf       	rjmp	.-224    	; 0x887c <computeAngle+0x14>

0000895c <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    895c:	80 91 2b 04 	lds	r24, 0x042B
    8960:	88 23       	and	r24, r24
    8962:	09 f0       	breq	.+2      	; 0x8966 <readAccelXYZ_2+0xa>
    8964:	5a c0       	rjmp	.+180    	; 0x8a1a <readAccelXYZ_2+0xbe>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8966:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    896a:	80 93 48 04 	sts	0x0448, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    896e:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8972:	80 93 49 04 	sts	0x0449, r24
    8976:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    897a:	80 93 4a 04 	sts	0x044A, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    897e:	0e 94 a0 1b 	call	0x3740	; 0x3740 <i2c_readNak>
    8982:	80 93 4b 04 	sts	0x044B, r24
		i2c_stop();													// set stop conditon = release bus
    8986:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    898a:	80 91 7a 0b 	lds	r24, 0x0B7A
    898e:	88 23       	and	r24, r24
    8990:	09 f0       	breq	.+2      	; 0x8994 <readAccelXYZ_2+0x38>
    8992:	53 c0       	rjmp	.+166    	; 0x8a3a <readAccelXYZ_2+0xde>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    8994:	20 91 47 04 	lds	r18, 0x0447
    8998:	33 27       	eor	r19, r19
    899a:	27 fd       	sbrc	r18, 7
    899c:	30 95       	com	r19
    899e:	32 2f       	mov	r19, r18
    89a0:	22 27       	eor	r18, r18
    89a2:	80 91 46 04 	lds	r24, 0x0446
    89a6:	99 27       	eor	r25, r25
    89a8:	87 fd       	sbrc	r24, 7
    89aa:	90 95       	com	r25
    89ac:	28 2b       	or	r18, r24
    89ae:	39 2b       	or	r19, r25
    89b0:	80 91 32 04 	lds	r24, 0x0432
    89b4:	90 91 33 04 	lds	r25, 0x0433
    89b8:	28 1b       	sub	r18, r24
    89ba:	39 0b       	sbc	r19, r25
    89bc:	30 93 2d 04 	sts	0x042D, r19
    89c0:	20 93 2c 04 	sts	0x042C, r18
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    89c4:	20 91 49 04 	lds	r18, 0x0449
    89c8:	33 27       	eor	r19, r19
    89ca:	27 fd       	sbrc	r18, 7
    89cc:	30 95       	com	r19
    89ce:	32 2f       	mov	r19, r18
    89d0:	22 27       	eor	r18, r18
    89d2:	80 91 48 04 	lds	r24, 0x0448
    89d6:	99 27       	eor	r25, r25
    89d8:	87 fd       	sbrc	r24, 7
    89da:	90 95       	com	r25
    89dc:	28 2b       	or	r18, r24
    89de:	39 2b       	or	r19, r25
    89e0:	80 91 34 04 	lds	r24, 0x0434
    89e4:	90 91 35 04 	lds	r25, 0x0435
    89e8:	28 1b       	sub	r18, r24
    89ea:	39 0b       	sbc	r19, r25
    89ec:	30 93 2f 04 	sts	0x042F, r19
    89f0:	20 93 2e 04 	sts	0x042E, r18
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
    89f4:	80 91 4b 04 	lds	r24, 0x044B
    89f8:	99 27       	eor	r25, r25
    89fa:	87 fd       	sbrc	r24, 7
    89fc:	90 95       	com	r25
    89fe:	98 2f       	mov	r25, r24
    8a00:	88 27       	eor	r24, r24
    8a02:	20 91 4a 04 	lds	r18, 0x044A
    8a06:	33 27       	eor	r19, r19
    8a08:	27 fd       	sbrc	r18, 7
    8a0a:	30 95       	com	r19
    8a0c:	82 2b       	or	r24, r18
    8a0e:	93 2b       	or	r25, r19
    8a10:	90 93 31 04 	sts	0x0431, r25
    8a14:	80 93 30 04 	sts	0x0430, r24
    8a18:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    8a1a:	81 30       	cpi	r24, 0x01	; 1
    8a1c:	09 f4       	brne	.+2      	; 0x8a20 <readAccelXYZ_2+0xc4>
    8a1e:	a7 cf       	rjmp	.-178    	; 0x896e <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
		}

	} else {

		accX = 0;
    8a20:	10 92 2d 04 	sts	0x042D, r1
    8a24:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    8a28:	10 92 2f 04 	sts	0x042F, r1
    8a2c:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    8a30:	10 92 31 04 	sts	0x0431, r1
    8a34:	10 92 30 04 	sts	0x0430, r1
    8a38:	08 95       	ret
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
		i2c_stop();													// set stop conditon = release bus

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    8a3a:	80 91 47 04 	lds	r24, 0x0447
    8a3e:	99 27       	eor	r25, r25
    8a40:	87 fd       	sbrc	r24, 7
    8a42:	90 95       	com	r25
    8a44:	98 2f       	mov	r25, r24
    8a46:	88 27       	eor	r24, r24
    8a48:	20 91 46 04 	lds	r18, 0x0446
    8a4c:	33 27       	eor	r19, r19
    8a4e:	27 fd       	sbrc	r18, 7
    8a50:	30 95       	com	r19
    8a52:	82 2b       	or	r24, r18
    8a54:	93 2b       	or	r25, r19
    8a56:	90 93 2d 04 	sts	0x042D, r25
    8a5a:	80 93 2c 04 	sts	0x042C, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    8a5e:	80 91 49 04 	lds	r24, 0x0449
    8a62:	99 27       	eor	r25, r25
    8a64:	87 fd       	sbrc	r24, 7
    8a66:	90 95       	com	r25
    8a68:	98 2f       	mov	r25, r24
    8a6a:	88 27       	eor	r24, r24
    8a6c:	20 91 48 04 	lds	r18, 0x0448
    8a70:	33 27       	eor	r19, r19
    8a72:	27 fd       	sbrc	r18, 7
    8a74:	30 95       	com	r19
    8a76:	82 2b       	or	r24, r18
    8a78:	93 2b       	or	r25, r19
    8a7a:	90 93 2f 04 	sts	0x042F, r25
    8a7e:	80 93 2e 04 	sts	0x042E, r24
    8a82:	b8 cf       	rjmp	.-144    	; 0x89f4 <readAccelXYZ_2+0x98>

00008a84 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8a84:	80 91 10 02 	lds	r24, 0x0210
    8a88:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    8a8c:	88 23       	and	r24, r24
    8a8e:	31 f5       	brne	.+76     	; 0x8adc <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    8a90:	8d e2       	ldi	r24, 0x2D	; 45
    8a92:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_write(0x08);	// measurement mode
    8a96:	88 e0       	ldi	r24, 0x08	; 8
    8a98:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8a9c:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8aa0:	80 91 10 02 	lds	r24, 0x0210
    8aa4:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    8aa8:	88 23       	and	r24, r24
    8aaa:	c1 f4       	brne	.+48     	; 0x8adc <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    8aac:	81 e3       	ldi	r24, 0x31	; 49
    8aae:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    8ab2:	80 e0       	ldi	r24, 0x00	; 0
    8ab4:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8ab8:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8abc:	80 91 10 02 	lds	r24, 0x0210
    8ac0:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    8ac4:	88 23       	and	r24, r24
    8ac6:	51 f4       	brne	.+20     	; 0x8adc <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    8ac8:	8c e2       	ldi	r24, 0x2C	; 44
    8aca:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    8ace:	89 e0       	ldi	r24, 0x09	; 9
    8ad0:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8ad4:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>
    8ad8:	80 e0       	ldi	r24, 0x00	; 0
    }

	return 0;

}
    8ada:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    8adc:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>
    8ae0:	81 e0       	ldi	r24, 0x01	; 1
    8ae2:	08 95       	ret

00008ae4 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    8ae4:	80 91 10 02 	lds	r24, 0x0210
    8ae8:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    8aec:	88 23       	and	r24, r24
    8aee:	51 f4       	brne	.+20     	; 0x8b04 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    8af0:	86 e1       	ldi	r24, 0x16	; 22
    8af2:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    8af6:	85 e4       	ldi	r24, 0x45	; 69
    8af8:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    8afc:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>
    8b00:	80 e0       	ldi	r24, 0x00	; 0
    }

	return 0;				// configuration ok

}
    8b02:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    8b04:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>
    8b08:	81 e0       	ldi	r24, 0x01	; 1
    8b0a:	08 95       	ret

00008b0c <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    8b0c:	80 91 2b 04 	lds	r24, 0x042B
    8b10:	88 23       	and	r24, r24
    8b12:	79 f0       	breq	.+30     	; 0x8b32 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    8b14:	81 30       	cpi	r24, 0x01	; 1
    8b16:	11 f1       	breq	.+68     	; 0x8b5c <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    8b18:	10 92 2d 04 	sts	0x042D, r1
    8b1c:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    8b20:	10 92 2f 04 	sts	0x042F, r1
    8b24:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    8b28:	10 92 31 04 	sts	0x0431, r1
    8b2c:	10 92 30 04 	sts	0x0430, r1
    8b30:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8b32:	80 91 10 02 	lds	r24, 0x0210
    8b36:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8b3a:	80 e0       	ldi	r24, 0x00	; 0
    8b3c:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8b40:	80 91 10 02 	lds	r24, 0x0210
    8b44:	8f 5f       	subi	r24, 0xFF	; 255
    8b46:	0e 94 aa 1b 	call	0x3754	; 0x3754 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8b4a:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8b4e:	80 93 46 04 	sts	0x0446, r24
    8b52:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8b56:	80 93 47 04 	sts	0x0447, r24
    8b5a:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    8b5c:	80 91 10 02 	lds	r24, 0x0210
    8b60:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8b64:	82 e3       	ldi	r24, 0x32	; 50
    8b66:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8b6a:	80 91 10 02 	lds	r24, 0x0210
    8b6e:	8f 5f       	subi	r24, 0xFF	; 255
    8b70:	0e 94 aa 1b 	call	0x3754	; 0x3754 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8b74:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8b78:	80 93 46 04 	sts	0x0446, r24
    8b7c:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8b80:	80 93 47 04 	sts	0x0447, r24
    8b84:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8b88:	80 93 48 04 	sts	0x0448, r24
    8b8c:	08 95       	ret

00008b8e <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    8b8e:	1f 93       	push	r17
    8b90:	df 93       	push	r29
    8b92:	cf 93       	push	r28
    8b94:	00 d0       	rcall	.+0      	; 0x8b96 <readAccelXYZ+0x8>
    8b96:	00 d0       	rcall	.+0      	; 0x8b98 <readAccelXYZ+0xa>
    8b98:	cd b7       	in	r28, 0x3d	; 61
    8b9a:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    8b9c:	80 91 2b 04 	lds	r24, 0x042B
    8ba0:	88 23       	and	r24, r24
    8ba2:	c9 f0       	breq	.+50     	; 0x8bd6 <readAccelXYZ+0x48>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    8ba4:	81 30       	cpi	r24, 0x01	; 1
    8ba6:	09 f4       	brne	.+2      	; 0x8baa <readAccelXYZ+0x1c>
    8ba8:	99 c0       	rjmp	.+306    	; 0x8cdc <readAccelXYZ+0x14e>
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
		}

	} else {

		accX = 0;
    8baa:	10 92 2d 04 	sts	0x042D, r1
    8bae:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    8bb2:	10 92 2f 04 	sts	0x042F, r1
    8bb6:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    8bba:	10 92 31 04 	sts	0x0431, r1
    8bbe:	10 92 30 04 	sts	0x0430, r1

	}

}
    8bc2:	26 96       	adiw	r28, 0x06	; 6
    8bc4:	0f b6       	in	r0, 0x3f	; 63
    8bc6:	f8 94       	cli
    8bc8:	de bf       	out	0x3e, r29	; 62
    8bca:	0f be       	out	0x3f, r0	; 63
    8bcc:	cd bf       	out	0x3d, r28	; 61
    8bce:	cf 91       	pop	r28
    8bd0:	df 91       	pop	r29
    8bd2:	1f 91       	pop	r17
    8bd4:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8bd6:	80 91 10 02 	lds	r24, 0x0210
    8bda:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8bde:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    8be0:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8be4:	80 91 10 02 	lds	r24, 0x0210
    8be8:	8f 5f       	subi	r24, 0xFF	; 255
    8bea:	0e 94 aa 1b 	call	0x3754	; 0x3754 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    8bee:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8bf2:	89 83       	std	Y+1, r24	; 0x01
    8bf4:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8bf8:	8a 83       	std	Y+2, r24	; 0x02
    8bfa:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8bfe:	8b 83       	std	Y+3, r24	; 0x03
    8c00:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8c04:	8c 83       	std	Y+4, r24	; 0x04
    8c06:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8c0a:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    8c0c:	0e 94 a0 1b 	call	0x3740	; 0x3740 <i2c_readNak>
    8c10:	18 2f       	mov	r17, r24
    8c12:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    8c14:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8c18:	80 91 7a 0b 	lds	r24, 0x0B7A
    8c1c:	88 23       	and	r24, r24
    8c1e:	89 f1       	breq	.+98     	; 0x8c82 <readAccelXYZ+0xf4>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    8c20:	8a 81       	ldd	r24, Y+2	; 0x02
    8c22:	99 27       	eor	r25, r25
    8c24:	87 fd       	sbrc	r24, 7
    8c26:	90 95       	com	r25
    8c28:	98 2f       	mov	r25, r24
    8c2a:	88 27       	eor	r24, r24
    8c2c:	29 81       	ldd	r18, Y+1	; 0x01
    8c2e:	33 27       	eor	r19, r19
    8c30:	27 fd       	sbrc	r18, 7
    8c32:	30 95       	com	r19
    8c34:	82 2b       	or	r24, r18
    8c36:	93 2b       	or	r25, r19
    8c38:	90 93 2d 04 	sts	0x042D, r25
    8c3c:	80 93 2c 04 	sts	0x042C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    8c40:	8c 81       	ldd	r24, Y+4	; 0x04
    8c42:	99 27       	eor	r25, r25
    8c44:	87 fd       	sbrc	r24, 7
    8c46:	90 95       	com	r25
    8c48:	98 2f       	mov	r25, r24
    8c4a:	88 27       	eor	r24, r24
    8c4c:	2b 81       	ldd	r18, Y+3	; 0x03
    8c4e:	33 27       	eor	r19, r19
    8c50:	27 fd       	sbrc	r18, 7
    8c52:	30 95       	com	r19
    8c54:	82 2b       	or	r24, r18
    8c56:	93 2b       	or	r25, r19
    8c58:	90 93 2f 04 	sts	0x042F, r25
    8c5c:	80 93 2e 04 	sts	0x042E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
    8c60:	21 2f       	mov	r18, r17
    8c62:	33 27       	eor	r19, r19
    8c64:	27 fd       	sbrc	r18, 7
    8c66:	30 95       	com	r19
    8c68:	32 2f       	mov	r19, r18
    8c6a:	22 27       	eor	r18, r18
    8c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    8c6e:	99 27       	eor	r25, r25
    8c70:	87 fd       	sbrc	r24, 7
    8c72:	90 95       	com	r25
    8c74:	28 2b       	or	r18, r24
    8c76:	39 2b       	or	r19, r25
    8c78:	30 93 31 04 	sts	0x0431, r19
    8c7c:	20 93 30 04 	sts	0x0430, r18
    8c80:	a0 cf       	rjmp	.-192    	; 0x8bc2 <readAccelXYZ+0x34>
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    8c82:	2a 81       	ldd	r18, Y+2	; 0x02
    8c84:	33 27       	eor	r19, r19
    8c86:	27 fd       	sbrc	r18, 7
    8c88:	30 95       	com	r19
    8c8a:	32 2f       	mov	r19, r18
    8c8c:	22 27       	eor	r18, r18
    8c8e:	89 81       	ldd	r24, Y+1	; 0x01
    8c90:	99 27       	eor	r25, r25
    8c92:	87 fd       	sbrc	r24, 7
    8c94:	90 95       	com	r25
    8c96:	28 2b       	or	r18, r24
    8c98:	39 2b       	or	r19, r25
    8c9a:	80 91 32 04 	lds	r24, 0x0432
    8c9e:	90 91 33 04 	lds	r25, 0x0433
    8ca2:	28 1b       	sub	r18, r24
    8ca4:	39 0b       	sbc	r19, r25
    8ca6:	30 93 2d 04 	sts	0x042D, r19
    8caa:	20 93 2c 04 	sts	0x042C, r18
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    8cae:	2c 81       	ldd	r18, Y+4	; 0x04
    8cb0:	33 27       	eor	r19, r19
    8cb2:	27 fd       	sbrc	r18, 7
    8cb4:	30 95       	com	r19
    8cb6:	32 2f       	mov	r19, r18
    8cb8:	22 27       	eor	r18, r18
    8cba:	8b 81       	ldd	r24, Y+3	; 0x03
    8cbc:	99 27       	eor	r25, r25
    8cbe:	87 fd       	sbrc	r24, 7
    8cc0:	90 95       	com	r25
    8cc2:	28 2b       	or	r18, r24
    8cc4:	39 2b       	or	r19, r25
    8cc6:	80 91 34 04 	lds	r24, 0x0434
    8cca:	90 91 35 04 	lds	r25, 0x0435
    8cce:	28 1b       	sub	r18, r24
    8cd0:	39 0b       	sbc	r19, r25
    8cd2:	30 93 2f 04 	sts	0x042F, r19
    8cd6:	20 93 2e 04 	sts	0x042E, r18
    8cda:	c2 cf       	rjmp	.-124    	; 0x8c60 <readAccelXYZ+0xd2>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    8cdc:	80 91 10 02 	lds	r24, 0x0210
    8ce0:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8ce4:	82 e3       	ldi	r24, 0x32	; 50
    8ce6:	7c cf       	rjmp	.-264    	; 0x8be0 <readAccelXYZ+0x52>

00008ce8 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    8ce8:	ef 92       	push	r14
    8cea:	ff 92       	push	r15
    8cec:	0f 93       	push	r16
    8cee:	1f 93       	push	r17

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    8cf0:	80 91 2b 04 	lds	r24, 0x042B
    8cf4:	88 23       	and	r24, r24
    8cf6:	81 f0       	breq	.+32     	; 0x8d18 <readAccelXY+0x30>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    8cf8:	81 30       	cpi	r24, 0x01	; 1
    8cfa:	09 f4       	brne	.+2      	; 0x8cfe <readAccelXY+0x16>
    8cfc:	81 c0       	rjmp	.+258    	; 0x8e00 <readAccelXY+0x118>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    8cfe:	10 92 2d 04 	sts	0x042D, r1
    8d02:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    8d06:	10 92 2f 04 	sts	0x042F, r1
    8d0a:	10 92 2e 04 	sts	0x042E, r1

	}

}
    8d0e:	1f 91       	pop	r17
    8d10:	0f 91       	pop	r16
    8d12:	ff 90       	pop	r15
    8d14:	ef 90       	pop	r14
    8d16:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8d18:	80 91 10 02 	lds	r24, 0x0210
    8d1c:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8d20:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    8d22:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8d26:	80 91 10 02 	lds	r24, 0x0210
    8d2a:	8f 5f       	subi	r24, 0xFF	; 255
    8d2c:	0e 94 aa 1b 	call	0x3754	; 0x3754 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    8d30:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8d34:	08 2f       	mov	r16, r24
    8d36:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8d3a:	18 2f       	mov	r17, r24
    8d3c:	0e 94 96 1b 	call	0x372c	; 0x372c <i2c_readAck>
    8d40:	e8 2e       	mov	r14, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    8d42:	0e 94 a0 1b 	call	0x3740	; 0x3740 <i2c_readNak>
    8d46:	f8 2e       	mov	r15, r24
		i2c_stop();													// set stop conditon = release bus
    8d48:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8d4c:	80 91 7a 0b 	lds	r24, 0x0B7A
    8d50:	88 23       	and	r24, r24
    8d52:	29 f1       	breq	.+74     	; 0x8d9e <readAccelXY+0xb6>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    8d54:	81 2f       	mov	r24, r17
    8d56:	99 27       	eor	r25, r25
    8d58:	87 fd       	sbrc	r24, 7
    8d5a:	90 95       	com	r25
    8d5c:	98 2f       	mov	r25, r24
    8d5e:	88 27       	eor	r24, r24
    8d60:	20 2f       	mov	r18, r16
    8d62:	33 27       	eor	r19, r19
    8d64:	27 fd       	sbrc	r18, 7
    8d66:	30 95       	com	r19
    8d68:	82 2b       	or	r24, r18
    8d6a:	93 2b       	or	r25, r19
    8d6c:	90 93 2d 04 	sts	0x042D, r25
    8d70:	80 93 2c 04 	sts	0x042C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    8d74:	8f 2d       	mov	r24, r15
    8d76:	99 27       	eor	r25, r25
    8d78:	87 fd       	sbrc	r24, 7
    8d7a:	90 95       	com	r25
    8d7c:	98 2f       	mov	r25, r24
    8d7e:	88 27       	eor	r24, r24
    8d80:	2e 2d       	mov	r18, r14
    8d82:	33 27       	eor	r19, r19
    8d84:	27 fd       	sbrc	r18, 7
    8d86:	30 95       	com	r19
    8d88:	82 2b       	or	r24, r18
    8d8a:	93 2b       	or	r25, r19
    8d8c:	90 93 2f 04 	sts	0x042F, r25
    8d90:	80 93 2e 04 	sts	0x042E, r24
		accX = 0;
		accY = 0;

	}

}
    8d94:	1f 91       	pop	r17
    8d96:	0f 91       	pop	r16
    8d98:	ff 90       	pop	r15
    8d9a:	ef 90       	pop	r14
    8d9c:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    8d9e:	81 2f       	mov	r24, r17
    8da0:	99 27       	eor	r25, r25
    8da2:	87 fd       	sbrc	r24, 7
    8da4:	90 95       	com	r25
    8da6:	98 2f       	mov	r25, r24
    8da8:	88 27       	eor	r24, r24
    8daa:	20 2f       	mov	r18, r16
    8dac:	33 27       	eor	r19, r19
    8dae:	27 fd       	sbrc	r18, 7
    8db0:	30 95       	com	r19
    8db2:	82 2b       	or	r24, r18
    8db4:	93 2b       	or	r25, r19
    8db6:	20 91 32 04 	lds	r18, 0x0432
    8dba:	30 91 33 04 	lds	r19, 0x0433
    8dbe:	82 1b       	sub	r24, r18
    8dc0:	93 0b       	sbc	r25, r19
    8dc2:	90 93 2d 04 	sts	0x042D, r25
    8dc6:	80 93 2c 04 	sts	0x042C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    8dca:	8f 2d       	mov	r24, r15
    8dcc:	99 27       	eor	r25, r25
    8dce:	87 fd       	sbrc	r24, 7
    8dd0:	90 95       	com	r25
    8dd2:	98 2f       	mov	r25, r24
    8dd4:	88 27       	eor	r24, r24
    8dd6:	2e 2d       	mov	r18, r14
    8dd8:	33 27       	eor	r19, r19
    8dda:	27 fd       	sbrc	r18, 7
    8ddc:	30 95       	com	r19
    8dde:	82 2b       	or	r24, r18
    8de0:	93 2b       	or	r25, r19
    8de2:	20 91 34 04 	lds	r18, 0x0434
    8de6:	30 91 35 04 	lds	r19, 0x0435
    8dea:	82 1b       	sub	r24, r18
    8dec:	93 0b       	sbc	r25, r19
    8dee:	90 93 2f 04 	sts	0x042F, r25
    8df2:	80 93 2e 04 	sts	0x042E, r24
		accX = 0;
		accY = 0;

	}

}
    8df6:	1f 91       	pop	r17
    8df8:	0f 91       	pop	r16
    8dfa:	ff 90       	pop	r15
    8dfc:	ef 90       	pop	r14
    8dfe:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8e00:	80 91 10 02 	lds	r24, 0x0210
    8e04:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8e08:	82 e3       	ldi	r24, 0x32	; 50
    8e0a:	8b cf       	rjmp	.-234    	; 0x8d22 <readAccelXY+0x3a>

00008e0c <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    8e0c:	af 92       	push	r10
    8e0e:	bf 92       	push	r11
    8e10:	cf 92       	push	r12
    8e12:	df 92       	push	r13
    8e14:	ef 92       	push	r14
    8e16:	ff 92       	push	r15
    8e18:	0f 93       	push	r16
    8e1a:	1f 93       	push	r17
    8e1c:	cf 93       	push	r28
    8e1e:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    8e20:	10 92 08 02 	sts	0x0208, r1
	pwm_green = 0;
    8e24:	10 92 09 02 	sts	0x0209, r1
	pwm_blue = 0;
    8e28:	10 92 0a 02 	sts	0x020A, r1
	updateRedLed(pwm_red);
    8e2c:	80 e0       	ldi	r24, 0x00	; 0
    8e2e:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
	updateGreenLed(pwm_green);
    8e32:	80 91 09 02 	lds	r24, 0x0209
    8e36:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
	updateBlueLed(pwm_blue);
    8e3a:	80 91 0a 02 	lds	r24, 0x020A
    8e3e:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>

	calibrationCycle = 0;
    8e42:	10 92 52 04 	sts	0x0452, r1
    8e46:	10 92 51 04 	sts	0x0451, r1
	startCalibration = 1;
    8e4a:	81 e0       	ldi	r24, 0x01	; 1
    8e4c:	80 93 7a 0b 	sts	0x0B7A, r24


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
    8e50:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    8e54:	60 93 70 04 	sts	0x0470, r22
    8e58:	70 93 71 04 	sts	0x0471, r23
    8e5c:	80 93 72 04 	sts	0x0472, r24
    8e60:	90 93 73 04 	sts	0x0473, r25
    8e64:	02 c0       	rjmp	.+4      	; 0x8e6a <calibrateSensors+0x5e>
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
		readAccelXYZ();	// get a fresh value from the accelerometer
    8e66:	0e 94 c7 45 	call	0x8b8e	; 0x8b8e <readAccelXYZ>


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
    8e6a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    8e6e:	20 91 70 04 	lds	r18, 0x0470
    8e72:	30 91 71 04 	lds	r19, 0x0471
    8e76:	40 91 72 04 	lds	r20, 0x0472
    8e7a:	50 91 73 04 	lds	r21, 0x0473
    8e7e:	62 1b       	sub	r22, r18
    8e80:	73 0b       	sbc	r23, r19
    8e82:	84 0b       	sbc	r24, r20
    8e84:	95 0b       	sbc	r25, r21
    8e86:	61 5c       	subi	r22, 0xC1	; 193
    8e88:	73 40       	sbci	r23, 0x03	; 3
    8e8a:	80 40       	sbci	r24, 0x00	; 0
    8e8c:	90 40       	sbci	r25, 0x00	; 0
    8e8e:	58 f3       	brcs	.-42     	; 0x8e66 <calibrateSensors+0x5a>
		readAccelXYZ();	// get a fresh value from the accelerometer
	}
	
	accXMax = -1023;
    8e90:	21 e0       	ldi	r18, 0x01	; 1
    8e92:	3c ef       	ldi	r19, 0xFC	; 252
    8e94:	30 93 3b 04 	sts	0x043B, r19
    8e98:	20 93 3a 04 	sts	0x043A, r18
	accXMin = 1023;
    8e9c:	8f ef       	ldi	r24, 0xFF	; 255
    8e9e:	93 e0       	ldi	r25, 0x03	; 3
    8ea0:	90 93 3d 04 	sts	0x043D, r25
    8ea4:	80 93 3c 04 	sts	0x043C, r24
	accYMax = -1023;
    8ea8:	30 93 3f 04 	sts	0x043F, r19
    8eac:	20 93 3e 04 	sts	0x043E, r18
	accYMin = 1023;
    8eb0:	90 93 41 04 	sts	0x0441, r25
    8eb4:	80 93 40 04 	sts	0x0440, r24
	accOffsetXSum = 0;
    8eb8:	10 92 37 04 	sts	0x0437, r1
    8ebc:	10 92 36 04 	sts	0x0436, r1
	accOffsetYSum = 0;
    8ec0:	10 92 39 04 	sts	0x0439, r1
    8ec4:	10 92 38 04 	sts	0x0438, r1

	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    8ec8:	80 91 30 04 	lds	r24, 0x0430
    8ecc:	90 91 31 04 	lds	r25, 0x0431
    8ed0:	97 fd       	sbrc	r25, 7
    8ed2:	4c c4       	rjmp	.+2200   	; 0x976c <calibrateSensors+0x960>
    8ed4:	8d 97       	sbiw	r24, 0x2d	; 45
    8ed6:	0c f4       	brge	.+2      	; 0x8eda <calibrateSensors+0xce>
    8ed8:	ab c3       	rjmp	.+1878   	; 0x9630 <calibrateSensors+0x824>

		pwm_red = 0;
    8eda:	10 92 08 02 	sts	0x0208, r1
		pwm_green = 255;
    8ede:	8f ef       	ldi	r24, 0xFF	; 255
    8ee0:	80 93 09 02 	sts	0x0209, r24
		pwm_blue = 255;
    8ee4:	80 93 0a 02 	sts	0x020A, r24
		updateRedLed(pwm_red);
    8ee8:	80 e0       	ldi	r24, 0x00	; 0
    8eea:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
		updateGreenLed(pwm_green);
    8eee:	80 91 09 02 	lds	r24, 0x0209
    8ef2:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
		updateBlueLed(pwm_blue);
    8ef6:	80 91 0a 02 	lds	r24, 0x020A
    8efa:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>

		setLeftSpeed(0);
    8efe:	80 e0       	ldi	r24, 0x00	; 0
    8f00:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
		setRightSpeed(0);
    8f04:	80 e0       	ldi	r24, 0x00	; 0
    8f06:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
    8f0a:	22 c0       	rjmp	.+68     	; 0x8f50 <calibrateSensors+0x144>
			readAccelXYZ();

			handleMotorsWithNoController();

			if(calibrationCycle < CALIBRATION_CYCLES) {
				accOffsetXSum += accX;
    8f0c:	80 91 36 04 	lds	r24, 0x0436
    8f10:	90 91 37 04 	lds	r25, 0x0437
    8f14:	20 91 2c 04 	lds	r18, 0x042C
    8f18:	30 91 2d 04 	lds	r19, 0x042D
    8f1c:	82 0f       	add	r24, r18
    8f1e:	93 1f       	adc	r25, r19
    8f20:	90 93 37 04 	sts	0x0437, r25
    8f24:	80 93 36 04 	sts	0x0436, r24
				accOffsetYSum += accY;
    8f28:	80 91 38 04 	lds	r24, 0x0438
    8f2c:	90 91 39 04 	lds	r25, 0x0439
    8f30:	20 91 2e 04 	lds	r18, 0x042E
    8f34:	30 91 2f 04 	lds	r19, 0x042F
    8f38:	82 0f       	add	r24, r18
    8f3a:	93 1f       	adc	r25, r19
    8f3c:	90 93 39 04 	sts	0x0439, r25
    8f40:	80 93 38 04 	sts	0x0438, r24
				calibrationCycle++;
    8f44:	4f 5f       	subi	r20, 0xFF	; 255
    8f46:	5f 4f       	sbci	r21, 0xFF	; 255
    8f48:	50 93 52 04 	sts	0x0452, r21
    8f4c:	40 93 51 04 	sts	0x0451, r20
		setLeftSpeed(0);
		setRightSpeed(0);

		while(1) {

			readAccelXYZ();
    8f50:	0e 94 c7 45 	call	0x8b8e	; 0x8b8e <readAccelXYZ>

			handleMotorsWithNoController();
    8f54:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <handleMotorsWithNoController>

			if(calibrationCycle < CALIBRATION_CYCLES) {
    8f58:	40 91 51 04 	lds	r20, 0x0451
    8f5c:	50 91 52 04 	lds	r21, 0x0452
    8f60:	40 31       	cpi	r20, 0x10	; 16
    8f62:	51 05       	cpc	r21, r1
    8f64:	9c f2       	brlt	.-90     	; 0x8f0c <calibrateSensors+0x100>
				accOffsetXSum += accX;
				accOffsetYSum += accY;
				calibrationCycle++;
			} else {
				accOffsetX = accOffsetXSum>>4;
    8f66:	80 91 36 04 	lds	r24, 0x0436
    8f6a:	90 91 37 04 	lds	r25, 0x0437
    8f6e:	95 95       	asr	r25
    8f70:	87 95       	ror	r24
    8f72:	95 95       	asr	r25
    8f74:	87 95       	ror	r24
    8f76:	95 95       	asr	r25
    8f78:	87 95       	ror	r24
    8f7a:	95 95       	asr	r25
    8f7c:	87 95       	ror	r24
    8f7e:	90 93 33 04 	sts	0x0433, r25
    8f82:	80 93 32 04 	sts	0x0432, r24
				accOffsetY = accOffsetYSum>>4;
    8f86:	80 91 38 04 	lds	r24, 0x0438
    8f8a:	90 91 39 04 	lds	r25, 0x0439
    8f8e:	95 95       	asr	r25
    8f90:	87 95       	ror	r24
    8f92:	95 95       	asr	r25
    8f94:	87 95       	ror	r24
    8f96:	95 95       	asr	r25
    8f98:	87 95       	ror	r24
    8f9a:	95 95       	asr	r25
    8f9c:	87 95       	ror	r24
    8f9e:	90 93 35 04 	sts	0x0435, r25
    8fa2:	80 93 34 04 	sts	0x0434, r24
		setLeftSpeed(0);
		setRightSpeed(0);

	}	

	startCalibration = 1;
    8fa6:	81 e0       	ldi	r24, 0x01	; 1
    8fa8:	80 93 7a 0b 	sts	0x0B7A, r24
	calibrationCycle = 0;
    8fac:	10 92 52 04 	sts	0x0452, r1
    8fb0:	10 92 51 04 	sts	0x0451, r1

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    8fb4:	1f ef       	ldi	r17, 0xFF	; 255
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
						proximityOffset[i] = 0;
					}				
					
					calibrationCycle++;
    8fb6:	c1 e0       	ldi	r28, 0x01	; 1
    8fb8:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    8fba:	80 91 51 04 	lds	r24, 0x0451
    8fbe:	90 91 52 04 	lds	r25, 0x0452
    8fc2:	41 97       	sbiw	r24, 0x11	; 17
    8fc4:	84 f4       	brge	.+32     	; 0x8fe6 <calibrateSensors+0x1da>

			if(proxUpdated) {
    8fc6:	80 91 bc 02 	lds	r24, 0x02BC
    8fca:	88 23       	and	r24, r24
    8fcc:	09 f0       	breq	.+2      	; 0x8fd0 <calibrateSensors+0x1c4>
    8fce:	29 c1       	rjmp	.+594    	; 0x9222 <calibrateSensors+0x416>

	startCalibration = 1;
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {
    8fd0:	80 91 7a 0b 	lds	r24, 0x0B7A
    8fd4:	88 23       	and	r24, r24
    8fd6:	09 f4       	brne	.+2      	; 0x8fda <calibrateSensors+0x1ce>
    8fd8:	08 c1       	rjmp	.+528    	; 0x91ea <calibrateSensors+0x3de>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    8fda:	80 91 51 04 	lds	r24, 0x0451
    8fde:	90 91 52 04 	lds	r25, 0x0452
    8fe2:	41 97       	sbiw	r24, 0x11	; 17
    8fe4:	84 f3       	brlt	.-32     	; 0x8fc6 <calibrateSensors+0x1ba>

			}

		} else {

			pwm_red = 0;
    8fe6:	10 92 08 02 	sts	0x0208, r1
			pwm_green = 0;
    8fea:	10 92 09 02 	sts	0x0209, r1
			pwm_blue = 255;
    8fee:	8f ef       	ldi	r24, 0xFF	; 255
    8ff0:	80 93 0a 02 	sts	0x020A, r24
			updateRedLed(pwm_red);
    8ff4:	80 e0       	ldi	r24, 0x00	; 0
    8ff6:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
			updateGreenLed(pwm_green);
    8ffa:	80 91 09 02 	lds	r24, 0x0209
    8ffe:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
			updateBlueLed(pwm_blue);
    9002:	80 91 0a 02 	lds	r24, 0x020A
    9006:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    900a:	80 91 85 02 	lds	r24, 0x0285
    900e:	90 91 86 02 	lds	r25, 0x0286
    9012:	a0 91 87 02 	lds	r26, 0x0287
    9016:	b0 91 88 02 	lds	r27, 0x0288
    901a:	e4 e0       	ldi	r30, 0x04	; 4
    901c:	b6 95       	lsr	r27
    901e:	a7 95       	ror	r26
    9020:	97 95       	ror	r25
    9022:	87 95       	ror	r24
    9024:	ea 95       	dec	r30
    9026:	d1 f7       	brne	.-12     	; 0x901c <calibrateSensors+0x210>
    9028:	90 93 6e 02 	sts	0x026E, r25
    902c:	80 93 6d 02 	sts	0x026D, r24
    9030:	80 91 89 02 	lds	r24, 0x0289
    9034:	90 91 8a 02 	lds	r25, 0x028A
    9038:	a0 91 8b 02 	lds	r26, 0x028B
    903c:	b0 91 8c 02 	lds	r27, 0x028C
    9040:	74 e0       	ldi	r23, 0x04	; 4
    9042:	b6 95       	lsr	r27
    9044:	a7 95       	ror	r26
    9046:	97 95       	ror	r25
    9048:	87 95       	ror	r24
    904a:	7a 95       	dec	r23
    904c:	d1 f7       	brne	.-12     	; 0x9042 <calibrateSensors+0x236>
    904e:	90 93 70 02 	sts	0x0270, r25
    9052:	80 93 6f 02 	sts	0x026F, r24
    9056:	80 91 8d 02 	lds	r24, 0x028D
    905a:	90 91 8e 02 	lds	r25, 0x028E
    905e:	a0 91 8f 02 	lds	r26, 0x028F
    9062:	b0 91 90 02 	lds	r27, 0x0290
    9066:	64 e0       	ldi	r22, 0x04	; 4
    9068:	b6 95       	lsr	r27
    906a:	a7 95       	ror	r26
    906c:	97 95       	ror	r25
    906e:	87 95       	ror	r24
    9070:	6a 95       	dec	r22
    9072:	d1 f7       	brne	.-12     	; 0x9068 <calibrateSensors+0x25c>
    9074:	90 93 72 02 	sts	0x0272, r25
    9078:	80 93 71 02 	sts	0x0271, r24
    907c:	80 91 91 02 	lds	r24, 0x0291
    9080:	90 91 92 02 	lds	r25, 0x0292
    9084:	a0 91 93 02 	lds	r26, 0x0293
    9088:	b0 91 94 02 	lds	r27, 0x0294
    908c:	54 e0       	ldi	r21, 0x04	; 4
    908e:	b6 95       	lsr	r27
    9090:	a7 95       	ror	r26
    9092:	97 95       	ror	r25
    9094:	87 95       	ror	r24
    9096:	5a 95       	dec	r21
    9098:	d1 f7       	brne	.-12     	; 0x908e <calibrateSensors+0x282>
    909a:	90 93 74 02 	sts	0x0274, r25
    909e:	80 93 73 02 	sts	0x0273, r24
    90a2:	80 91 95 02 	lds	r24, 0x0295
    90a6:	90 91 96 02 	lds	r25, 0x0296
    90aa:	a0 91 97 02 	lds	r26, 0x0297
    90ae:	b0 91 98 02 	lds	r27, 0x0298
    90b2:	44 e0       	ldi	r20, 0x04	; 4
    90b4:	b6 95       	lsr	r27
    90b6:	a7 95       	ror	r26
    90b8:	97 95       	ror	r25
    90ba:	87 95       	ror	r24
    90bc:	4a 95       	dec	r20
    90be:	d1 f7       	brne	.-12     	; 0x90b4 <calibrateSensors+0x2a8>
    90c0:	90 93 76 02 	sts	0x0276, r25
    90c4:	80 93 75 02 	sts	0x0275, r24
    90c8:	80 91 99 02 	lds	r24, 0x0299
    90cc:	90 91 9a 02 	lds	r25, 0x029A
    90d0:	a0 91 9b 02 	lds	r26, 0x029B
    90d4:	b0 91 9c 02 	lds	r27, 0x029C
    90d8:	34 e0       	ldi	r19, 0x04	; 4
    90da:	b6 95       	lsr	r27
    90dc:	a7 95       	ror	r26
    90de:	97 95       	ror	r25
    90e0:	87 95       	ror	r24
    90e2:	3a 95       	dec	r19
    90e4:	d1 f7       	brne	.-12     	; 0x90da <calibrateSensors+0x2ce>
    90e6:	90 93 78 02 	sts	0x0278, r25
    90ea:	80 93 77 02 	sts	0x0277, r24
    90ee:	80 91 9d 02 	lds	r24, 0x029D
    90f2:	90 91 9e 02 	lds	r25, 0x029E
    90f6:	a0 91 9f 02 	lds	r26, 0x029F
    90fa:	b0 91 a0 02 	lds	r27, 0x02A0
    90fe:	24 e0       	ldi	r18, 0x04	; 4
    9100:	b6 95       	lsr	r27
    9102:	a7 95       	ror	r26
    9104:	97 95       	ror	r25
    9106:	87 95       	ror	r24
    9108:	2a 95       	dec	r18
    910a:	d1 f7       	brne	.-12     	; 0x9100 <calibrateSensors+0x2f4>
    910c:	90 93 7a 02 	sts	0x027A, r25
    9110:	80 93 79 02 	sts	0x0279, r24
    9114:	80 91 a1 02 	lds	r24, 0x02A1
    9118:	90 91 a2 02 	lds	r25, 0x02A2
    911c:	a0 91 a3 02 	lds	r26, 0x02A3
    9120:	b0 91 a4 02 	lds	r27, 0x02A4
    9124:	04 e0       	ldi	r16, 0x04	; 4
    9126:	b6 95       	lsr	r27
    9128:	a7 95       	ror	r26
    912a:	97 95       	ror	r25
    912c:	87 95       	ror	r24
    912e:	0a 95       	dec	r16
    9130:	d1 f7       	brne	.-12     	; 0x9126 <calibrateSensors+0x31a>
    9132:	90 93 7c 02 	sts	0x027C, r25
    9136:	80 93 7b 02 	sts	0x027B, r24
    913a:	80 91 a5 02 	lds	r24, 0x02A5
    913e:	90 91 a6 02 	lds	r25, 0x02A6
    9142:	a0 91 a7 02 	lds	r26, 0x02A7
    9146:	b0 91 a8 02 	lds	r27, 0x02A8
    914a:	14 e0       	ldi	r17, 0x04	; 4
    914c:	b6 95       	lsr	r27
    914e:	a7 95       	ror	r26
    9150:	97 95       	ror	r25
    9152:	87 95       	ror	r24
    9154:	1a 95       	dec	r17
    9156:	d1 f7       	brne	.-12     	; 0x914c <calibrateSensors+0x340>
    9158:	20 91 a9 02 	lds	r18, 0x02A9
    915c:	30 91 aa 02 	lds	r19, 0x02AA
    9160:	40 91 ab 02 	lds	r20, 0x02AB
    9164:	50 91 ac 02 	lds	r21, 0x02AC
    9168:	f4 e0       	ldi	r31, 0x04	; 4
    916a:	56 95       	lsr	r21
    916c:	47 95       	ror	r20
    916e:	37 95       	ror	r19
    9170:	27 95       	ror	r18
    9172:	fa 95       	dec	r31
    9174:	d1 f7       	brne	.-12     	; 0x916a <calibrateSensors+0x35e>
    9176:	e0 90 ad 02 	lds	r14, 0x02AD
    917a:	f0 90 ae 02 	lds	r15, 0x02AE
    917e:	00 91 af 02 	lds	r16, 0x02AF
    9182:	10 91 b0 02 	lds	r17, 0x02B0
    9186:	e4 e0       	ldi	r30, 0x04	; 4
    9188:	16 95       	lsr	r17
    918a:	07 95       	ror	r16
    918c:	f7 94       	ror	r15
    918e:	e7 94       	ror	r14
    9190:	ea 95       	dec	r30
    9192:	d1 f7       	brne	.-12     	; 0x9188 <calibrateSensors+0x37c>
    9194:	a0 90 b1 02 	lds	r10, 0x02B1
    9198:	b0 90 b2 02 	lds	r11, 0x02B2
    919c:	c0 90 b3 02 	lds	r12, 0x02B3
    91a0:	d0 90 b4 02 	lds	r13, 0x02B4
    91a4:	74 e0       	ldi	r23, 0x04	; 4
    91a6:	d6 94       	lsr	r13
    91a8:	c7 94       	ror	r12
    91aa:	b7 94       	ror	r11
    91ac:	a7 94       	ror	r10
    91ae:	7a 95       	dec	r23
    91b0:	d1 f7       	brne	.-12     	; 0x91a6 <calibrateSensors+0x39a>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    91b2:	80 50       	subi	r24, 0x00	; 0
    91b4:	92 40       	sbci	r25, 0x02	; 2
    91b6:	90 93 7e 02 	sts	0x027E, r25
    91ba:	80 93 7d 02 	sts	0x027D, r24
    91be:	20 50       	subi	r18, 0x00	; 0
    91c0:	32 40       	sbci	r19, 0x02	; 2
    91c2:	30 93 80 02 	sts	0x0280, r19
    91c6:	20 93 7f 02 	sts	0x027F, r18
    91ca:	80 e0       	ldi	r24, 0x00	; 0
    91cc:	9e ef       	ldi	r25, 0xFE	; 254
    91ce:	e8 0e       	add	r14, r24
    91d0:	f9 1e       	adc	r15, r25
    91d2:	f0 92 82 02 	sts	0x0282, r15
    91d6:	e0 92 81 02 	sts	0x0281, r14
    91da:	a8 0e       	add	r10, r24
    91dc:	b9 1e       	adc	r11, r25
    91de:	b0 92 84 02 	sts	0x0284, r11
    91e2:	a0 92 83 02 	sts	0x0283, r10
			}

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    91e6:	10 92 7a 0b 	sts	0x0B7A, r1

		}

	}

	pwm_red = 255;
    91ea:	8f ef       	ldi	r24, 0xFF	; 255
    91ec:	80 93 08 02 	sts	0x0208, r24
	pwm_green = 255;
    91f0:	80 93 09 02 	sts	0x0209, r24
	pwm_blue = 255;
    91f4:	80 93 0a 02 	sts	0x020A, r24
	updateRedLed(pwm_red);
    91f8:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
	updateGreenLed(pwm_green);
    91fc:	80 91 09 02 	lds	r24, 0x0209
    9200:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
	updateBlueLed(pwm_blue);
    9204:	80 91 0a 02 	lds	r24, 0x020A
    9208:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>

}
    920c:	df 91       	pop	r29
    920e:	cf 91       	pop	r28
    9210:	1f 91       	pop	r17
    9212:	0f 91       	pop	r16
    9214:	ff 90       	pop	r15
    9216:	ef 90       	pop	r14
    9218:	df 90       	pop	r13
    921a:	cf 90       	pop	r12
    921c:	bf 90       	pop	r11
    921e:	af 90       	pop	r10
    9220:	08 95       	ret

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    9222:	10 93 08 02 	sts	0x0208, r17
				pwm_green = 255;
    9226:	10 93 09 02 	sts	0x0209, r17
				pwm_blue = 0;
    922a:	10 92 0a 02 	sts	0x020A, r1
				updateRedLed(pwm_red);
    922e:	8f ef       	ldi	r24, 0xFF	; 255
    9230:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
				updateGreenLed(pwm_green);
    9234:	80 91 09 02 	lds	r24, 0x0209
    9238:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
				updateBlueLed(pwm_blue);
    923c:	80 91 0a 02 	lds	r24, 0x020A
    9240:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>

				proxUpdated = 0;
    9244:	10 92 bc 02 	sts	0x02BC, r1

				if(calibrationCycle==0) {		// reset all variables
    9248:	60 91 51 04 	lds	r22, 0x0451
    924c:	70 91 52 04 	lds	r23, 0x0452
    9250:	61 15       	cp	r22, r1
    9252:	71 05       	cpc	r23, r1
    9254:	09 f0       	breq	.+2      	; 0x9258 <calibrateSensors+0x44c>
    9256:	95 c0       	rjmp	.+298    	; 0x9382 <calibrateSensors+0x576>

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9258:	10 92 85 02 	sts	0x0285, r1
    925c:	10 92 86 02 	sts	0x0286, r1
    9260:	10 92 87 02 	sts	0x0287, r1
    9264:	10 92 88 02 	sts	0x0288, r1
						proximityOffset[i] = 0;
    9268:	10 92 6e 02 	sts	0x026E, r1
    926c:	10 92 6d 02 	sts	0x026D, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9270:	10 92 89 02 	sts	0x0289, r1
    9274:	10 92 8a 02 	sts	0x028A, r1
    9278:	10 92 8b 02 	sts	0x028B, r1
    927c:	10 92 8c 02 	sts	0x028C, r1
						proximityOffset[i] = 0;
    9280:	10 92 70 02 	sts	0x0270, r1
    9284:	10 92 6f 02 	sts	0x026F, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9288:	10 92 8d 02 	sts	0x028D, r1
    928c:	10 92 8e 02 	sts	0x028E, r1
    9290:	10 92 8f 02 	sts	0x028F, r1
    9294:	10 92 90 02 	sts	0x0290, r1
						proximityOffset[i] = 0;
    9298:	10 92 72 02 	sts	0x0272, r1
    929c:	10 92 71 02 	sts	0x0271, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    92a0:	10 92 91 02 	sts	0x0291, r1
    92a4:	10 92 92 02 	sts	0x0292, r1
    92a8:	10 92 93 02 	sts	0x0293, r1
    92ac:	10 92 94 02 	sts	0x0294, r1
						proximityOffset[i] = 0;
    92b0:	10 92 74 02 	sts	0x0274, r1
    92b4:	10 92 73 02 	sts	0x0273, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    92b8:	10 92 95 02 	sts	0x0295, r1
    92bc:	10 92 96 02 	sts	0x0296, r1
    92c0:	10 92 97 02 	sts	0x0297, r1
    92c4:	10 92 98 02 	sts	0x0298, r1
						proximityOffset[i] = 0;
    92c8:	10 92 76 02 	sts	0x0276, r1
    92cc:	10 92 75 02 	sts	0x0275, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    92d0:	10 92 99 02 	sts	0x0299, r1
    92d4:	10 92 9a 02 	sts	0x029A, r1
    92d8:	10 92 9b 02 	sts	0x029B, r1
    92dc:	10 92 9c 02 	sts	0x029C, r1
						proximityOffset[i] = 0;
    92e0:	10 92 78 02 	sts	0x0278, r1
    92e4:	10 92 77 02 	sts	0x0277, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    92e8:	10 92 9d 02 	sts	0x029D, r1
    92ec:	10 92 9e 02 	sts	0x029E, r1
    92f0:	10 92 9f 02 	sts	0x029F, r1
    92f4:	10 92 a0 02 	sts	0x02A0, r1
						proximityOffset[i] = 0;
    92f8:	10 92 7a 02 	sts	0x027A, r1
    92fc:	10 92 79 02 	sts	0x0279, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9300:	10 92 a1 02 	sts	0x02A1, r1
    9304:	10 92 a2 02 	sts	0x02A2, r1
    9308:	10 92 a3 02 	sts	0x02A3, r1
    930c:	10 92 a4 02 	sts	0x02A4, r1
						proximityOffset[i] = 0;
    9310:	10 92 7c 02 	sts	0x027C, r1
    9314:	10 92 7b 02 	sts	0x027B, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9318:	10 92 a5 02 	sts	0x02A5, r1
    931c:	10 92 a6 02 	sts	0x02A6, r1
    9320:	10 92 a7 02 	sts	0x02A7, r1
    9324:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    9328:	10 92 7e 02 	sts	0x027E, r1
    932c:	10 92 7d 02 	sts	0x027D, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9330:	10 92 a9 02 	sts	0x02A9, r1
    9334:	10 92 aa 02 	sts	0x02AA, r1
    9338:	10 92 ab 02 	sts	0x02AB, r1
    933c:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    9340:	10 92 80 02 	sts	0x0280, r1
    9344:	10 92 7f 02 	sts	0x027F, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9348:	10 92 ad 02 	sts	0x02AD, r1
    934c:	10 92 ae 02 	sts	0x02AE, r1
    9350:	10 92 af 02 	sts	0x02AF, r1
    9354:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    9358:	10 92 82 02 	sts	0x0282, r1
    935c:	10 92 81 02 	sts	0x0281, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9360:	10 92 b1 02 	sts	0x02B1, r1
    9364:	10 92 b2 02 	sts	0x02B2, r1
    9368:	10 92 b3 02 	sts	0x02B3, r1
    936c:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    9370:	10 92 84 02 	sts	0x0284, r1
    9374:	10 92 83 02 	sts	0x0283, r1
					}				
					
					calibrationCycle++;
    9378:	d0 93 52 04 	sts	0x0452, r29
    937c:	c0 93 51 04 	sts	0x0451, r28
    9380:	27 ce       	rjmp	.-946    	; 0x8fd0 <calibrateSensors+0x1c4>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    9382:	80 91 55 02 	lds	r24, 0x0255
    9386:	90 91 56 02 	lds	r25, 0x0256
    938a:	aa 27       	eor	r26, r26
    938c:	97 fd       	sbrc	r25, 7
    938e:	a0 95       	com	r26
    9390:	ba 2f       	mov	r27, r26
    9392:	20 91 85 02 	lds	r18, 0x0285
    9396:	30 91 86 02 	lds	r19, 0x0286
    939a:	40 91 87 02 	lds	r20, 0x0287
    939e:	50 91 88 02 	lds	r21, 0x0288
    93a2:	82 0f       	add	r24, r18
    93a4:	93 1f       	adc	r25, r19
    93a6:	a4 1f       	adc	r26, r20
    93a8:	b5 1f       	adc	r27, r21
    93aa:	80 93 85 02 	sts	0x0285, r24
    93ae:	90 93 86 02 	sts	0x0286, r25
    93b2:	a0 93 87 02 	sts	0x0287, r26
    93b6:	b0 93 88 02 	sts	0x0288, r27
    93ba:	80 91 57 02 	lds	r24, 0x0257
    93be:	90 91 58 02 	lds	r25, 0x0258
    93c2:	aa 27       	eor	r26, r26
    93c4:	97 fd       	sbrc	r25, 7
    93c6:	a0 95       	com	r26
    93c8:	ba 2f       	mov	r27, r26
    93ca:	20 91 89 02 	lds	r18, 0x0289
    93ce:	30 91 8a 02 	lds	r19, 0x028A
    93d2:	40 91 8b 02 	lds	r20, 0x028B
    93d6:	50 91 8c 02 	lds	r21, 0x028C
    93da:	82 0f       	add	r24, r18
    93dc:	93 1f       	adc	r25, r19
    93de:	a4 1f       	adc	r26, r20
    93e0:	b5 1f       	adc	r27, r21
    93e2:	80 93 89 02 	sts	0x0289, r24
    93e6:	90 93 8a 02 	sts	0x028A, r25
    93ea:	a0 93 8b 02 	sts	0x028B, r26
    93ee:	b0 93 8c 02 	sts	0x028C, r27
    93f2:	80 91 59 02 	lds	r24, 0x0259
    93f6:	90 91 5a 02 	lds	r25, 0x025A
    93fa:	aa 27       	eor	r26, r26
    93fc:	97 fd       	sbrc	r25, 7
    93fe:	a0 95       	com	r26
    9400:	ba 2f       	mov	r27, r26
    9402:	20 91 8d 02 	lds	r18, 0x028D
    9406:	30 91 8e 02 	lds	r19, 0x028E
    940a:	40 91 8f 02 	lds	r20, 0x028F
    940e:	50 91 90 02 	lds	r21, 0x0290
    9412:	82 0f       	add	r24, r18
    9414:	93 1f       	adc	r25, r19
    9416:	a4 1f       	adc	r26, r20
    9418:	b5 1f       	adc	r27, r21
    941a:	80 93 8d 02 	sts	0x028D, r24
    941e:	90 93 8e 02 	sts	0x028E, r25
    9422:	a0 93 8f 02 	sts	0x028F, r26
    9426:	b0 93 90 02 	sts	0x0290, r27
    942a:	80 91 5b 02 	lds	r24, 0x025B
    942e:	90 91 5c 02 	lds	r25, 0x025C
    9432:	aa 27       	eor	r26, r26
    9434:	97 fd       	sbrc	r25, 7
    9436:	a0 95       	com	r26
    9438:	ba 2f       	mov	r27, r26
    943a:	20 91 91 02 	lds	r18, 0x0291
    943e:	30 91 92 02 	lds	r19, 0x0292
    9442:	40 91 93 02 	lds	r20, 0x0293
    9446:	50 91 94 02 	lds	r21, 0x0294
    944a:	82 0f       	add	r24, r18
    944c:	93 1f       	adc	r25, r19
    944e:	a4 1f       	adc	r26, r20
    9450:	b5 1f       	adc	r27, r21
    9452:	80 93 91 02 	sts	0x0291, r24
    9456:	90 93 92 02 	sts	0x0292, r25
    945a:	a0 93 93 02 	sts	0x0293, r26
    945e:	b0 93 94 02 	sts	0x0294, r27
    9462:	80 91 5d 02 	lds	r24, 0x025D
    9466:	90 91 5e 02 	lds	r25, 0x025E
    946a:	aa 27       	eor	r26, r26
    946c:	97 fd       	sbrc	r25, 7
    946e:	a0 95       	com	r26
    9470:	ba 2f       	mov	r27, r26
    9472:	20 91 95 02 	lds	r18, 0x0295
    9476:	30 91 96 02 	lds	r19, 0x0296
    947a:	40 91 97 02 	lds	r20, 0x0297
    947e:	50 91 98 02 	lds	r21, 0x0298
    9482:	82 0f       	add	r24, r18
    9484:	93 1f       	adc	r25, r19
    9486:	a4 1f       	adc	r26, r20
    9488:	b5 1f       	adc	r27, r21
    948a:	80 93 95 02 	sts	0x0295, r24
    948e:	90 93 96 02 	sts	0x0296, r25
    9492:	a0 93 97 02 	sts	0x0297, r26
    9496:	b0 93 98 02 	sts	0x0298, r27
    949a:	80 91 5f 02 	lds	r24, 0x025F
    949e:	90 91 60 02 	lds	r25, 0x0260
    94a2:	aa 27       	eor	r26, r26
    94a4:	97 fd       	sbrc	r25, 7
    94a6:	a0 95       	com	r26
    94a8:	ba 2f       	mov	r27, r26
    94aa:	20 91 99 02 	lds	r18, 0x0299
    94ae:	30 91 9a 02 	lds	r19, 0x029A
    94b2:	40 91 9b 02 	lds	r20, 0x029B
    94b6:	50 91 9c 02 	lds	r21, 0x029C
    94ba:	82 0f       	add	r24, r18
    94bc:	93 1f       	adc	r25, r19
    94be:	a4 1f       	adc	r26, r20
    94c0:	b5 1f       	adc	r27, r21
    94c2:	80 93 99 02 	sts	0x0299, r24
    94c6:	90 93 9a 02 	sts	0x029A, r25
    94ca:	a0 93 9b 02 	sts	0x029B, r26
    94ce:	b0 93 9c 02 	sts	0x029C, r27
    94d2:	80 91 61 02 	lds	r24, 0x0261
    94d6:	90 91 62 02 	lds	r25, 0x0262
    94da:	aa 27       	eor	r26, r26
    94dc:	97 fd       	sbrc	r25, 7
    94de:	a0 95       	com	r26
    94e0:	ba 2f       	mov	r27, r26
    94e2:	20 91 9d 02 	lds	r18, 0x029D
    94e6:	30 91 9e 02 	lds	r19, 0x029E
    94ea:	40 91 9f 02 	lds	r20, 0x029F
    94ee:	50 91 a0 02 	lds	r21, 0x02A0
    94f2:	82 0f       	add	r24, r18
    94f4:	93 1f       	adc	r25, r19
    94f6:	a4 1f       	adc	r26, r20
    94f8:	b5 1f       	adc	r27, r21
    94fa:	80 93 9d 02 	sts	0x029D, r24
    94fe:	90 93 9e 02 	sts	0x029E, r25
    9502:	a0 93 9f 02 	sts	0x029F, r26
    9506:	b0 93 a0 02 	sts	0x02A0, r27
    950a:	80 91 63 02 	lds	r24, 0x0263
    950e:	90 91 64 02 	lds	r25, 0x0264
    9512:	aa 27       	eor	r26, r26
    9514:	97 fd       	sbrc	r25, 7
    9516:	a0 95       	com	r26
    9518:	ba 2f       	mov	r27, r26
    951a:	20 91 a1 02 	lds	r18, 0x02A1
    951e:	30 91 a2 02 	lds	r19, 0x02A2
    9522:	40 91 a3 02 	lds	r20, 0x02A3
    9526:	50 91 a4 02 	lds	r21, 0x02A4
    952a:	82 0f       	add	r24, r18
    952c:	93 1f       	adc	r25, r19
    952e:	a4 1f       	adc	r26, r20
    9530:	b5 1f       	adc	r27, r21
    9532:	80 93 a1 02 	sts	0x02A1, r24
    9536:	90 93 a2 02 	sts	0x02A2, r25
    953a:	a0 93 a3 02 	sts	0x02A3, r26
    953e:	b0 93 a4 02 	sts	0x02A4, r27
    9542:	80 91 65 02 	lds	r24, 0x0265
    9546:	90 91 66 02 	lds	r25, 0x0266
    954a:	aa 27       	eor	r26, r26
    954c:	97 fd       	sbrc	r25, 7
    954e:	a0 95       	com	r26
    9550:	ba 2f       	mov	r27, r26
    9552:	20 91 a5 02 	lds	r18, 0x02A5
    9556:	30 91 a6 02 	lds	r19, 0x02A6
    955a:	40 91 a7 02 	lds	r20, 0x02A7
    955e:	50 91 a8 02 	lds	r21, 0x02A8
    9562:	82 0f       	add	r24, r18
    9564:	93 1f       	adc	r25, r19
    9566:	a4 1f       	adc	r26, r20
    9568:	b5 1f       	adc	r27, r21
    956a:	80 93 a5 02 	sts	0x02A5, r24
    956e:	90 93 a6 02 	sts	0x02A6, r25
    9572:	a0 93 a7 02 	sts	0x02A7, r26
    9576:	b0 93 a8 02 	sts	0x02A8, r27
    957a:	80 91 67 02 	lds	r24, 0x0267
    957e:	90 91 68 02 	lds	r25, 0x0268
    9582:	aa 27       	eor	r26, r26
    9584:	97 fd       	sbrc	r25, 7
    9586:	a0 95       	com	r26
    9588:	ba 2f       	mov	r27, r26
    958a:	20 91 a9 02 	lds	r18, 0x02A9
    958e:	30 91 aa 02 	lds	r19, 0x02AA
    9592:	40 91 ab 02 	lds	r20, 0x02AB
    9596:	50 91 ac 02 	lds	r21, 0x02AC
    959a:	82 0f       	add	r24, r18
    959c:	93 1f       	adc	r25, r19
    959e:	a4 1f       	adc	r26, r20
    95a0:	b5 1f       	adc	r27, r21
    95a2:	80 93 a9 02 	sts	0x02A9, r24
    95a6:	90 93 aa 02 	sts	0x02AA, r25
    95aa:	a0 93 ab 02 	sts	0x02AB, r26
    95ae:	b0 93 ac 02 	sts	0x02AC, r27
    95b2:	80 91 69 02 	lds	r24, 0x0269
    95b6:	90 91 6a 02 	lds	r25, 0x026A
    95ba:	aa 27       	eor	r26, r26
    95bc:	97 fd       	sbrc	r25, 7
    95be:	a0 95       	com	r26
    95c0:	ba 2f       	mov	r27, r26
    95c2:	20 91 ad 02 	lds	r18, 0x02AD
    95c6:	30 91 ae 02 	lds	r19, 0x02AE
    95ca:	40 91 af 02 	lds	r20, 0x02AF
    95ce:	50 91 b0 02 	lds	r21, 0x02B0
    95d2:	82 0f       	add	r24, r18
    95d4:	93 1f       	adc	r25, r19
    95d6:	a4 1f       	adc	r26, r20
    95d8:	b5 1f       	adc	r27, r21
    95da:	80 93 ad 02 	sts	0x02AD, r24
    95de:	90 93 ae 02 	sts	0x02AE, r25
    95e2:	a0 93 af 02 	sts	0x02AF, r26
    95e6:	b0 93 b0 02 	sts	0x02B0, r27
    95ea:	80 91 6b 02 	lds	r24, 0x026B
    95ee:	90 91 6c 02 	lds	r25, 0x026C
    95f2:	aa 27       	eor	r26, r26
    95f4:	97 fd       	sbrc	r25, 7
    95f6:	a0 95       	com	r26
    95f8:	ba 2f       	mov	r27, r26
    95fa:	20 91 b1 02 	lds	r18, 0x02B1
    95fe:	30 91 b2 02 	lds	r19, 0x02B2
    9602:	40 91 b3 02 	lds	r20, 0x02B3
    9606:	50 91 b4 02 	lds	r21, 0x02B4
    960a:	82 0f       	add	r24, r18
    960c:	93 1f       	adc	r25, r19
    960e:	a4 1f       	adc	r26, r20
    9610:	b5 1f       	adc	r27, r21
    9612:	80 93 b1 02 	sts	0x02B1, r24
    9616:	90 93 b2 02 	sts	0x02B2, r25
    961a:	a0 93 b3 02 	sts	0x02B3, r26
    961e:	b0 93 b4 02 	sts	0x02B4, r27
				}

				calibrationCycle++;
    9622:	6f 5f       	subi	r22, 0xFF	; 255
    9624:	7f 4f       	sbci	r23, 0xFF	; 255
    9626:	70 93 52 04 	sts	0x0452, r23
    962a:	60 93 51 04 	sts	0x0451, r22
    962e:	d0 cc       	rjmp	.-1632   	; 0x8fd0 <calibrateSensors+0x1c4>

		}

	} else {

		pwm_red = 255;
    9630:	8f ef       	ldi	r24, 0xFF	; 255
    9632:	80 93 08 02 	sts	0x0208, r24
		pwm_green = 0;
    9636:	10 92 09 02 	sts	0x0209, r1
		pwm_blue = 255;
    963a:	80 93 0a 02 	sts	0x020A, r24
		updateRedLed(pwm_red);
    963e:	0e 94 23 43 	call	0x8646	; 0x8646 <updateRedLed>
		updateGreenLed(pwm_green);
    9642:	80 91 09 02 	lds	r24, 0x0209
    9646:	0e 94 39 43 	call	0x8672	; 0x8672 <updateGreenLed>
		updateBlueLed(pwm_blue);
    964a:	80 91 0a 02 	lds	r24, 0x020A
    964e:	0e 94 4f 43 	call	0x869e	; 0x869e <updateBlueLed>

		setLeftSpeed(-10);
    9652:	86 ef       	ldi	r24, 0xF6	; 246
    9654:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
		setRightSpeed(10);
    9658:	8a e0       	ldi	r24, 0x0A	; 10
    965a:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>

		lastTick = getTime100MicroSec();
    965e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    9662:	60 93 70 04 	sts	0x0470, r22
    9666:	70 93 71 04 	sts	0x0471, r23
    966a:	80 93 72 04 	sts	0x0472, r24
    966e:	90 93 73 04 	sts	0x0473, r25
    9672:	3d c0       	rjmp	.+122    	; 0x96ee <calibrateSensors+0x8e2>
			readAccelXYZ();

			handleMotorsWithSpeedController();

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
				if(accXMax < accX) {
    9674:	20 91 2c 04 	lds	r18, 0x042C
    9678:	30 91 2d 04 	lds	r19, 0x042D
    967c:	80 91 3a 04 	lds	r24, 0x043A
    9680:	90 91 3b 04 	lds	r25, 0x043B
    9684:	82 17       	cp	r24, r18
    9686:	93 07       	cpc	r25, r19
    9688:	24 f4       	brge	.+8      	; 0x9692 <calibrateSensors+0x886>
					accXMax = accX;
    968a:	30 93 3b 04 	sts	0x043B, r19
    968e:	20 93 3a 04 	sts	0x043A, r18
				}
				if(accXMin > accX) {
    9692:	80 91 3c 04 	lds	r24, 0x043C
    9696:	90 91 3d 04 	lds	r25, 0x043D
    969a:	28 17       	cp	r18, r24
    969c:	39 07       	cpc	r19, r25
    969e:	24 f4       	brge	.+8      	; 0x96a8 <calibrateSensors+0x89c>
					accXMin = accX;
    96a0:	30 93 3d 04 	sts	0x043D, r19
    96a4:	20 93 3c 04 	sts	0x043C, r18
				}
				if(accYMax < accY) {
    96a8:	20 91 2e 04 	lds	r18, 0x042E
    96ac:	30 91 2f 04 	lds	r19, 0x042F
    96b0:	80 91 3e 04 	lds	r24, 0x043E
    96b4:	90 91 3f 04 	lds	r25, 0x043F
    96b8:	82 17       	cp	r24, r18
    96ba:	93 07       	cpc	r25, r19
    96bc:	24 f4       	brge	.+8      	; 0x96c6 <calibrateSensors+0x8ba>
					accYMax = accY;
    96be:	30 93 3f 04 	sts	0x043F, r19
    96c2:	20 93 3e 04 	sts	0x043E, r18
				}
				if(accYMin > accY) {
    96c6:	80 91 40 04 	lds	r24, 0x0440
    96ca:	90 91 41 04 	lds	r25, 0x0441
    96ce:	28 17       	cp	r18, r24
    96d0:	39 07       	cpc	r19, r25
    96d2:	24 f4       	brge	.+8      	; 0x96dc <calibrateSensors+0x8d0>
					accYMin = accY;
    96d4:	30 93 41 04 	sts	0x0441, r19
    96d8:	20 93 40 04 	sts	0x0440, r18
				}
				calibrationCycle++;
    96dc:	80 91 51 04 	lds	r24, 0x0451
    96e0:	90 91 52 04 	lds	r25, 0x0452
    96e4:	01 96       	adiw	r24, 0x01	; 1
    96e6:	90 93 52 04 	sts	0x0452, r25
    96ea:	80 93 51 04 	sts	0x0451, r24

		lastTick = getTime100MicroSec();

		while(1) {

			readAccelXYZ();
    96ee:	0e 94 c7 45 	call	0x8b8e	; 0x8b8e <readAccelXYZ>

			handleMotorsWithSpeedController();
    96f2:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <handleMotorsWithSpeedController>

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
    96f6:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    96fa:	20 91 70 04 	lds	r18, 0x0470
    96fe:	30 91 71 04 	lds	r19, 0x0471
    9702:	40 91 72 04 	lds	r20, 0x0472
    9706:	50 91 73 04 	lds	r21, 0x0473
    970a:	62 1b       	sub	r22, r18
    970c:	73 0b       	sbc	r23, r19
    970e:	84 0b       	sbc	r24, r20
    9710:	95 0b       	sbc	r25, r21
    9712:	6e 53       	subi	r22, 0x3E	; 62
    9714:	76 49       	sbci	r23, 0x96	; 150
    9716:	80 40       	sbci	r24, 0x00	; 0
    9718:	90 40       	sbci	r25, 0x00	; 0
    971a:	08 f4       	brcc	.+2      	; 0x971e <calibrateSensors+0x912>
    971c:	ab cf       	rjmp	.-170    	; 0x9674 <calibrateSensors+0x868>
				if(accYMin > accY) {
					accYMin = accY;
				}
				calibrationCycle++;
			} else {
				accOffsetX = (accXMax + accXMin)>>1;
    971e:	80 91 3c 04 	lds	r24, 0x043C
    9722:	90 91 3d 04 	lds	r25, 0x043D
    9726:	20 91 3a 04 	lds	r18, 0x043A
    972a:	30 91 3b 04 	lds	r19, 0x043B
    972e:	82 0f       	add	r24, r18
    9730:	93 1f       	adc	r25, r19
    9732:	95 95       	asr	r25
    9734:	87 95       	ror	r24
    9736:	90 93 33 04 	sts	0x0433, r25
    973a:	80 93 32 04 	sts	0x0432, r24
				accOffsetY = (accYMax + accYMin)>>1;
    973e:	80 91 40 04 	lds	r24, 0x0440
    9742:	90 91 41 04 	lds	r25, 0x0441
    9746:	20 91 3e 04 	lds	r18, 0x043E
    974a:	30 91 3f 04 	lds	r19, 0x043F
    974e:	82 0f       	add	r24, r18
    9750:	93 1f       	adc	r25, r19
    9752:	95 95       	asr	r25
    9754:	87 95       	ror	r24
    9756:	90 93 35 04 	sts	0x0435, r25
    975a:	80 93 34 04 	sts	0x0434, r24
				break;
			}

		}

		setLeftSpeed(0);
    975e:	80 e0       	ldi	r24, 0x00	; 0
    9760:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setLeftSpeed>
		setRightSpeed(0);
    9764:	80 e0       	ldi	r24, 0x00	; 0
    9766:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setRightSpeed>
    976a:	1d cc       	rjmp	.-1990   	; 0x8fa6 <calibrateSensors+0x19a>
	accYMax = -1023;
	accYMin = 1023;
	accOffsetXSum = 0;
	accOffsetYSum = 0;

	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    976c:	90 95       	com	r25
    976e:	81 95       	neg	r24
    9770:	9f 4f       	sbci	r25, 0xFF	; 255
    9772:	b0 cb       	rjmp	.-2208   	; 0x8ed4 <calibrateSensors+0xc8>

00009774 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    9774:	0e 94 26 1b 	call	0x364c	; 0x364c <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    9778:	80 91 10 02 	lds	r24, 0x0210
    977c:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    9780:	88 23       	and	r24, r24
    9782:	49 f4       	brne	.+18     	; 0x9796 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    9784:	86 e1       	ldi	r24, 0x16	; 22
    9786:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    978a:	85 e4       	ldi	r24, 0x45	; 69
    978c:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    9790:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>
    9794:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    9796:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    979a:	86 ea       	ldi	r24, 0xA6	; 166
    979c:	90 e0       	ldi	r25, 0x00	; 0
    979e:	90 93 11 02 	sts	0x0211, r25
    97a2:	80 93 10 02 	sts	0x0210, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    97a6:	86 ea       	ldi	r24, 0xA6	; 166
    97a8:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    97ac:	88 23       	and	r24, r24
    97ae:	41 f5       	brne	.+80     	; 0x9800 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    97b0:	8d e2       	ldi	r24, 0x2D	; 45
    97b2:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_write(0x08);	// measurement mode
    97b6:	88 e0       	ldi	r24, 0x08	; 8
    97b8:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    97bc:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    97c0:	80 91 10 02 	lds	r24, 0x0210
    97c4:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    97c8:	88 23       	and	r24, r24
    97ca:	d1 f4       	brne	.+52     	; 0x9800 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    97cc:	81 e3       	ldi	r24, 0x31	; 49
    97ce:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    97d2:	80 e0       	ldi	r24, 0x00	; 0
    97d4:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    97d8:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    97dc:	80 91 10 02 	lds	r24, 0x0210
    97e0:	0e 94 2e 1b 	call	0x365c	; 0x365c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    97e4:	88 23       	and	r24, r24
    97e6:	61 f4       	brne	.+24     	; 0x9800 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    97e8:	8c e2       	ldi	r24, 0x2C	; 44
    97ea:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    97ee:	89 e0       	ldi	r24, 0x09	; 9
    97f0:	0e 94 84 1b 	call	0x3708	; 0x3708 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    97f4:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    97f8:	81 e0       	ldi	r24, 0x01	; 1
    97fa:	80 93 2b 04 	sts	0x042B, r24
    97fe:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    9800:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    9804:	82 e0       	ldi	r24, 0x02	; 2
    9806:	80 93 2b 04 	sts	0x042B, r24
    980a:	08 95       	ret

0000980c <readCalibrationFromFlash>:
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
}

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    980c:	82 ee       	ldi	r24, 0xE2	; 226
    980e:	98 e0       	ldi	r25, 0x08	; 8
    9810:	6c e6       	ldi	r22, 0x6C	; 108
    9812:	7f e0       	ldi	r23, 0x0F	; 15
    9814:	40 e9       	ldi	r20, 0x90	; 144
    9816:	50 e0       	ldi	r21, 0x00	; 0
    9818:	0e 94 1e 5c 	call	0xb83c	; 0xb83c <__eerd_block_m2560>
}
    981c:	08 95       	ret

0000981e <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    981e:	82 ee       	ldi	r24, 0xE2	; 226
    9820:	98 e0       	ldi	r25, 0x08	; 8
    9822:	6c e6       	ldi	r22, 0x6C	; 108
    9824:	7f e0       	ldi	r23, 0x0F	; 15
    9826:	40 e9       	ldi	r20, 0x90	; 144
    9828:	50 e0       	ldi	r21, 0x00	; 0
    982a:	0e 94 3c 5c 	call	0xb878	; 0xb878 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    982e:	8a e6       	ldi	r24, 0x6A	; 106
    9830:	9f e0       	ldi	r25, 0x0F	; 15
    9832:	65 e5       	ldi	r22, 0x55	; 85
    9834:	7a ea       	ldi	r23, 0xAA	; 170
    9836:	0e 94 5e 5c 	call	0xb8bc	; 0xb8bc <__eeupd_word_m2560>
}
    983a:	08 95       	ret

0000983c <irCommInitTransmitter>:
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    983c:	82 e0       	ldi	r24, 0x02	; 2
    983e:	80 93 d2 04 	sts	0x04D2, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    9842:	81 e0       	ldi	r24, 0x01	; 1
    9844:	80 93 d5 04 	sts	0x04D5, r24
}
    9848:	08 95       	ret

0000984a <irCommInitReceiver>:

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    984a:	81 e0       	ldi	r24, 0x01	; 1
    984c:	80 93 d2 04 	sts	0x04D2, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    9850:	80 93 d5 04 	sts	0x04D5, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    9854:	80 93 d3 04 	sts	0x04D3, r24
}
    9858:	08 95       	ret

0000985a <irCommDeinit>:
	irCommInitVars();
	irCommInitReceiver();
}

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
    985a:	10 92 d2 04 	sts	0x04D2, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    985e:	10 92 d4 04 	sts	0x04D4, r1
}
    9862:	08 95       	ret

00009864 <irCommSendData>:
//	irCommTxSensorMask = sensorMask;
//	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
//}

void irCommSendData(unsigned char value) {
	irCommTxByte = value;
    9864:	80 93 25 05 	sts	0x0525, r24
	irCommTxByteEnqueued = 1;
    9868:	81 e0       	ldi	r24, 0x01	; 1
    986a:	80 93 26 05 	sts	0x0526, r24
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
    986e:	82 e0       	ldi	r24, 0x02	; 2
    9870:	80 93 d3 04 	sts	0x04D3, r24
}
    9874:	08 95       	ret

00009876 <irCommDataSent>:

unsigned char irCommDataSent() {
    9876:	90 e0       	ldi	r25, 0x00	; 0
    9878:	80 91 26 05 	lds	r24, 0x0526
    987c:	81 30       	cpi	r24, 0x01	; 1
    987e:	09 f0       	breq	.+2      	; 0x9882 <irCommDataSent+0xc>
    9880:	91 e0       	ldi	r25, 0x01	; 1
	if(irCommTxByteEnqueued==1) {
		return 0;
	} else {
		return 1;
	}
}
    9882:	89 2f       	mov	r24, r25
    9884:	08 95       	ret

00009886 <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    9886:	80 91 1a 05 	lds	r24, 0x051A
    988a:	08 95       	ret

0000988c <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    988c:	10 92 1a 05 	sts	0x051A, r1
	return irCommRxLastDataReceived;
}
    9890:	80 91 19 05 	lds	r24, 0x0519
    9894:	08 95       	ret

00009896 <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    9896:	80 91 15 02 	lds	r24, 0x0215
    989a:	08 95       	ret

0000989c <getBearing>:

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    989c:	83 30       	cpi	r24, 0x03	; 3
    989e:	71 f1       	breq	.+92     	; 0x98fc <getBearing+0x60>
    98a0:	84 30       	cpi	r24, 0x04	; 4
    98a2:	60 f0       	brcs	.+24     	; 0x98bc <getBearing+0x20>
    98a4:	85 30       	cpi	r24, 0x05	; 5
    98a6:	d1 f0       	breq	.+52     	; 0x98dc <getBearing+0x40>
    98a8:	85 30       	cpi	r24, 0x05	; 5
    98aa:	80 f0       	brcs	.+32     	; 0x98cc <getBearing+0x30>
    98ac:	86 30       	cpi	r24, 0x06	; 6
    98ae:	f1 f0       	breq	.+60     	; 0x98ec <getBearing+0x50>
    98b0:	87 30       	cpi	r24, 0x07	; 7
    98b2:	c1 f0       	breq	.+48     	; 0x98e4 <getBearing+0x48>
		case 5:
			return 135;
		case 6:
			return 90;
		case 7:
			return 45;
    98b4:	2f ef       	ldi	r18, 0xFF	; 255
    98b6:	3f ef       	ldi	r19, 0xFF	; 255
		default:
			return -1;
	}
}
    98b8:	c9 01       	movw	r24, r18
    98ba:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    98bc:	81 30       	cpi	r24, 0x01	; 1
    98be:	d1 f0       	breq	.+52     	; 0x98f4 <getBearing+0x58>
    98c0:	82 30       	cpi	r24, 0x02	; 2
    98c2:	40 f0       	brcs	.+16     	; 0x98d4 <getBearing+0x38>
    98c4:	26 ea       	ldi	r18, 0xA6	; 166
    98c6:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    98c8:	c9 01       	movw	r24, r18
    98ca:	08 95       	ret
		case 1:
			return -45;
		case 2:
			return -90;
		case 3:
			return -135;
    98cc:	24 eb       	ldi	r18, 0xB4	; 180
    98ce:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    98d0:	c9 01       	movw	r24, r18
    98d2:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    98d4:	20 e0       	ldi	r18, 0x00	; 0
    98d6:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    98d8:	c9 01       	movw	r24, r18
    98da:	08 95       	ret
		case 2:
			return -90;
		case 3:
			return -135;
		case 4:
			return 180;
    98dc:	27 e8       	ldi	r18, 0x87	; 135
    98de:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    98e0:	c9 01       	movw	r24, r18
    98e2:	08 95       	ret
		case 4:
			return 180;
		case 5:
			return 135;
		case 6:
			return 90;
    98e4:	2d e2       	ldi	r18, 0x2D	; 45
    98e6:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    98e8:	c9 01       	movw	r24, r18
    98ea:	08 95       	ret
		case 3:
			return -135;
		case 4:
			return 180;
		case 5:
			return 135;
    98ec:	2a e5       	ldi	r18, 0x5A	; 90
    98ee:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    98f0:	c9 01       	movw	r24, r18
    98f2:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    98f4:	23 ed       	ldi	r18, 0xD3	; 211
    98f6:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    98f8:	c9 01       	movw	r24, r18
    98fa:	08 95       	ret
		case 0:
			return 0;
		case 1:
			return -45;
		case 2:
			return -90;
    98fc:	29 e7       	ldi	r18, 0x79	; 121
    98fe:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    9900:	c9 01       	movw	r24, r18
    9902:	08 95       	ret

00009904 <resetDebugVariables>:
void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
}

void resetDebugVariables() {
    9904:	cf 92       	push	r12
    9906:	df 92       	push	r13
    9908:	ef 92       	push	r14
    990a:	ff 92       	push	r15
    990c:	0f 93       	push	r16
    990e:	1f 93       	push	r17
	irCommRxMaxSensorIndexTemp=0;
    9910:	10 92 ef 04 	sts	0x04EF, r1
	irCommRxMaxDiffIndexTemp=0;
    9914:	10 92 f0 04 	sts	0x04F0, r1
	irCommMaxSensorValueCurrIndexTemp=0;
    9918:	10 92 f3 04 	sts	0x04F3, r1
	irCommMinSensorValueCurrIndexTemp=0;
    991c:	10 92 f4 04 	sts	0x04F4, r1
	memset(irCommRxMaxSensorTemp, 0xFF, 4);
    9920:	cc 24       	eor	r12, r12
    9922:	ca 94       	dec	r12
    9924:	dc 2c       	mov	r13, r12
    9926:	76 01       	movw	r14, r12
    9928:	c0 92 29 0b 	sts	0x0B29, r12
    992c:	d0 92 2a 0b 	sts	0x0B2A, r13
    9930:	e0 92 2b 0b 	sts	0x0B2B, r14
    9934:	f0 92 2c 0b 	sts	0x0B2C, r15
	memset(irCommRxMaxDiffTemp, 0xFF, 4);
    9938:	c0 92 62 0b 	sts	0x0B62, r12
    993c:	d0 92 63 0b 	sts	0x0B63, r13
    9940:	e0 92 64 0b 	sts	0x0B64, r14
    9944:	f0 92 65 0b 	sts	0x0B65, r15
	memset(irCommMaxSensorValueCurrTemp, 0xFF, 4);
    9948:	c0 92 38 05 	sts	0x0538, r12
    994c:	d0 92 39 05 	sts	0x0539, r13
    9950:	e0 92 3a 05 	sts	0x053A, r14
    9954:	f0 92 3b 05 	sts	0x053B, r15
	memset(irCommMinSensorValueCurrTemp, 0xFF, 4);
    9958:	c0 92 2d 0b 	sts	0x0B2D, r12
    995c:	d0 92 2e 0b 	sts	0x0B2E, r13
    9960:	e0 92 2f 0b 	sts	0x0B2F, r14
    9964:	f0 92 30 0b 	sts	0x0B30, r15

	irCommStateIndexTemp = 0;					
    9968:	10 92 fc 04 	sts	0x04FC, r1
	memset(irCommStateTemp, 0xFF, 14);
    996c:	8c e3       	ldi	r24, 0x3C	; 60
    996e:	95 e0       	ldi	r25, 0x05	; 5
    9970:	6f ef       	ldi	r22, 0xFF	; 255
    9972:	70 e0       	ldi	r23, 0x00	; 0
    9974:	4e e0       	ldi	r20, 0x0E	; 14
    9976:	50 e0       	ldi	r21, 0x00	; 0
    9978:	0e 94 17 5c 	call	0xb82e	; 0xb82e <memset>

	irCommShiftCountFinalIndexTemp = 0;
    997c:	10 92 f6 04 	sts	0x04F6, r1
	memset(irCommShiftCountFinalTemp, 0xFF, 2);
    9980:	0f ef       	ldi	r16, 0xFF	; 255
    9982:	1f ef       	ldi	r17, 0xFF	; 255
    9984:	10 93 36 0b 	sts	0x0B36, r17
    9988:	00 93 35 0b 	sts	0x0B35, r16
	irCommRxStartBitDetectedIndexTemp = 0;
    998c:	10 92 fb 04 	sts	0x04FB, r1
	memset(irCommRxStartBitDetectedTemp, 0xFF, 2);
    9990:	10 93 76 05 	sts	0x0576, r17
    9994:	00 93 75 05 	sts	0x0575, r16
	irCommSwitchCountIndexTemp = 0;
    9998:	10 92 f2 04 	sts	0x04F2, r1
	memset(irCommSwitchCountTemp, 0xFF, 2);
    999c:	10 93 52 05 	sts	0x0552, r17
    99a0:	00 93 51 05 	sts	0x0551, r16
	irCommMaxSensorSignalFiltIndexTemp = 0;
    99a4:	10 92 ee 04 	sts	0x04EE, r1
	memset(irCommMaxSensorSignalFiltTemp, 0xFF, 80);
    99a8:	87 e7       	ldi	r24, 0x77	; 119
    99aa:	95 e0       	ldi	r25, 0x05	; 5
    99ac:	6f ef       	ldi	r22, 0xFF	; 255
    99ae:	70 e0       	ldi	r23, 0x00	; 0
    99b0:	40 e5       	ldi	r20, 0x50	; 80
    99b2:	50 e0       	ldi	r21, 0x00	; 0
    99b4:	0e 94 17 5c 	call	0xb82e	; 0xb82e <memset>
	irCommMaxSensorSignalIndexTemp = 0;
    99b8:	10 92 ed 04 	sts	0x04ED, r1
	memset(irCommMaxSensorSignalTemp, 0xFF, 80);
    99bc:	8b e6       	ldi	r24, 0x6B	; 107
    99be:	98 e0       	ldi	r25, 0x08	; 8
    99c0:	6f ef       	ldi	r22, 0xFF	; 255
    99c2:	70 e0       	ldi	r23, 0x00	; 0
    99c4:	40 e5       	ldi	r20, 0x50	; 80
    99c6:	50 e0       	ldi	r21, 0x00	; 0
    99c8:	0e 94 17 5c 	call	0xb82e	; 0xb82e <memset>
	irCommProxMeanIndexTemp = 0;
    99cc:	10 92 f1 04 	sts	0x04F1, r1
	memset(irCommProxMeanTemp, 0xFF, 4);
    99d0:	c0 92 6f 05 	sts	0x056F, r12
    99d4:	d0 92 70 05 	sts	0x0570, r13
    99d8:	e0 92 71 05 	sts	0x0571, r14
    99dc:	f0 92 72 05 	sts	0x0572, r15
	irCommComputeShiftIndexTemp = 0;
    99e0:	10 92 f8 04 	sts	0x04F8, r1
	memset(irCommComputeShiftTemp, 0xFF, 2);
    99e4:	10 93 6d 05 	sts	0x056D, r17
    99e8:	00 93 6c 05 	sts	0x056C, r16
	irCommShiftCountIndexTemp = 0;
    99ec:	10 92 f5 04 	sts	0x04F5, r1
	memset(irCommShiftCountTemp, 0xFF, 2);
    99f0:	10 93 7c 0b 	sts	0x0B7C, r17
    99f4:	00 93 7b 0b 	sts	0x0B7B, r16
	irCommRxPeakHighToLowIndexTemp = 0;
    99f8:	10 92 f9 04 	sts	0x04F9, r1
	memset(irCommRxPeakHighToLowTemp, 0xFF, 2);
    99fc:	10 93 ca 05 	sts	0x05CA, r17
    9a00:	00 93 c9 05 	sts	0x05C9, r16
	irCommRxStartPeakDurationIndexTemp = 0;
    9a04:	10 92 fa 04 	sts	0x04FA, r1
	memset(irCommRxStartPeakDurationTemp, 0xFF, 2);
    9a08:	10 93 0c 07 	sts	0x070C, r17
    9a0c:	00 93 0b 07 	sts	0x070B, r16
	irCommStartDiffIndexTemp = 0;
    9a10:	10 92 f7 04 	sts	0x04F7, r1
	memset(irCommSyncStateTemp, 0xFF, 2);
    9a14:	10 93 6b 05 	sts	0x056B, r17
    9a18:	00 93 6a 05 	sts	0x056A, r16
	irCommSyncStateIndexTemp = 0;
    9a1c:	10 92 fd 04 	sts	0x04FD, r1
	memset(irCommBitsSignalTemp, 0xFF, 400);
    9a20:	87 e9       	ldi	r24, 0x97	; 151
    9a22:	99 e0       	ldi	r25, 0x09	; 9
    9a24:	6f ef       	ldi	r22, 0xFF	; 255
    9a26:	70 e0       	ldi	r23, 0x00	; 0
    9a28:	40 e9       	ldi	r20, 0x90	; 144
    9a2a:	51 e0       	ldi	r21, 0x01	; 1
    9a2c:	0e 94 17 5c 	call	0xb82e	; 0xb82e <memset>
	irCommBitsSignalIndexTemp = 0;
    9a30:	10 92 fe 04 	sts	0x04FE, r1
	memset(irCommRxBitReceivedTemp, 0xFF, 10);
    9a34:	8f e5       	ldi	r24, 0x5F	; 95
    9a36:	98 e0       	ldi	r25, 0x08	; 8
    9a38:	6f ef       	ldi	r22, 0xFF	; 255
    9a3a:	70 e0       	ldi	r23, 0x00	; 0
    9a3c:	4a e0       	ldi	r20, 0x0A	; 10
    9a3e:	50 e0       	ldi	r21, 0x00	; 0
    9a40:	0e 94 17 5c 	call	0xb82e	; 0xb82e <memset>
	irCommRxBitReceivedIndexTemp = 0;
    9a44:	10 92 ff 04 	sts	0x04FF, r1
	
	
}
    9a48:	1f 91       	pop	r17
    9a4a:	0f 91       	pop	r16
    9a4c:	ff 90       	pop	r15
    9a4e:	ef 90       	pop	r14
    9a50:	df 90       	pop	r13
    9a52:	cf 90       	pop	r12
    9a54:	08 95       	ret

00009a56 <irCommTasks>:

void irCommTasks() {
    9a56:	2f 92       	push	r2
    9a58:	3f 92       	push	r3
    9a5a:	4f 92       	push	r4
    9a5c:	5f 92       	push	r5
    9a5e:	6f 92       	push	r6
    9a60:	7f 92       	push	r7
    9a62:	8f 92       	push	r8
    9a64:	9f 92       	push	r9
    9a66:	af 92       	push	r10
    9a68:	bf 92       	push	r11
    9a6a:	cf 92       	push	r12
    9a6c:	df 92       	push	r13
    9a6e:	ef 92       	push	r14
    9a70:	ff 92       	push	r15
    9a72:	0f 93       	push	r16
    9a74:	1f 93       	push	r17
    9a76:	cf 93       	push	r28
    9a78:	df 93       	push	r29
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    9a7a:	00 91 d4 04 	lds	r16, 0x04D4
    9a7e:	01 30       	cpi	r16, 0x01	; 1
    9a80:	09 f4       	brne	.+2      	; 0x9a84 <irCommTasks+0x2e>
    9a82:	d2 c0       	rjmp	.+420    	; 0x9c28 <irCommTasks+0x1d2>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    9a84:	02 30       	cpi	r16, 0x02	; 2
    9a86:	99 f0       	breq	.+38     	; 0x9aae <irCommTasks+0x58>

		}

	}

}
    9a88:	df 91       	pop	r29
    9a8a:	cf 91       	pop	r28
    9a8c:	1f 91       	pop	r17
    9a8e:	0f 91       	pop	r16
    9a90:	ff 90       	pop	r15
    9a92:	ef 90       	pop	r14
    9a94:	df 90       	pop	r13
    9a96:	cf 90       	pop	r12
    9a98:	bf 90       	pop	r11
    9a9a:	af 90       	pop	r10
    9a9c:	9f 90       	pop	r9
    9a9e:	8f 90       	pop	r8
    9aa0:	7f 90       	pop	r7
    9aa2:	6f 90       	pop	r6
    9aa4:	5f 90       	pop	r5
    9aa6:	4f 90       	pop	r4
    9aa8:	3f 90       	pop	r3
    9aaa:	2f 90       	pop	r2
    9aac:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    9aae:	80 91 d5 04 	lds	r24, 0x04D5
    9ab2:	82 30       	cpi	r24, 0x02	; 2
    9ab4:	09 f4       	brne	.+2      	; 0x9ab8 <irCommTasks+0x62>
    9ab6:	68 c3       	rjmp	.+1744   	; 0xa188 <irCommTasks+0x732>
    9ab8:	85 30       	cpi	r24, 0x05	; 5
    9aba:	31 f7       	brne	.-52     	; 0x9a88 <irCommTasks+0x32>
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:				
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    9abc:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    9ac0:	20 91 dd 04 	lds	r18, 0x04DD
    9ac4:	30 91 de 04 	lds	r19, 0x04DE
    9ac8:	40 91 df 04 	lds	r20, 0x04DF
    9acc:	50 91 e0 04 	lds	r21, 0x04E0
    9ad0:	62 1b       	sub	r22, r18
    9ad2:	73 0b       	sbc	r23, r19
    9ad4:	84 0b       	sbc	r24, r20
    9ad6:	95 0b       	sbc	r25, r21
    9ad8:	60 93 d9 04 	sts	0x04D9, r22
    9adc:	70 93 da 04 	sts	0x04DA, r23
    9ae0:	80 93 db 04 	sts	0x04DB, r24
    9ae4:	90 93 dc 04 	sts	0x04DC, r25
				irCommTickCounter2 = getTime100MicroSec();
    9ae8:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    9aec:	60 93 dd 04 	sts	0x04DD, r22
    9af0:	70 93 de 04 	sts	0x04DE, r23
    9af4:	80 93 df 04 	sts	0x04DF, r24
    9af8:	90 93 e0 04 	sts	0x04E0, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
    9afc:	00 93 54 05 	sts	0x0554, r16
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
    9b00:	83 e0       	ldi	r24, 0x03	; 3
    9b02:	80 93 55 05 	sts	0x0555, r24
				irCommTxCrc = 0;
    9b06:	10 92 2b 05 	sts	0x052B, r1
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9b0a:	30 91 25 05 	lds	r19, 0x0525
    9b0e:	83 2f       	mov	r24, r19
    9b10:	90 e0       	ldi	r25, 0x00	; 0
    9b12:	81 70       	andi	r24, 0x01	; 1
    9b14:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9b16:	80 93 5d 05 	sts	0x055D, r24
					if(irCommTempValue==1) {
    9b1a:	01 97       	sbiw	r24, 0x01	; 1
    9b1c:	09 f4       	brne	.+2      	; 0x9b20 <irCommTasks+0xca>
    9b1e:	82 c7       	rjmp	.+3844   	; 0xaa24 <irCommTasks+0xfce>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9b20:	83 2f       	mov	r24, r19
    9b22:	90 e0       	ldi	r25, 0x00	; 0
    9b24:	95 95       	asr	r25
    9b26:	87 95       	ror	r24
    9b28:	81 70       	andi	r24, 0x01	; 1
    9b2a:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9b2c:	80 93 5c 05 	sts	0x055C, r24
					if(irCommTempValue==1) {
    9b30:	01 97       	sbiw	r24, 0x01	; 1
    9b32:	09 f4       	brne	.+2      	; 0x9b36 <irCommTasks+0xe0>
    9b34:	73 c7       	rjmp	.+3814   	; 0xaa1c <irCommTasks+0xfc6>
    9b36:	20 91 2b 05 	lds	r18, 0x052B
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9b3a:	83 2f       	mov	r24, r19
    9b3c:	90 e0       	ldi	r25, 0x00	; 0
    9b3e:	95 95       	asr	r25
    9b40:	87 95       	ror	r24
    9b42:	95 95       	asr	r25
    9b44:	87 95       	ror	r24
    9b46:	81 70       	andi	r24, 0x01	; 1
    9b48:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9b4a:	80 93 5b 05 	sts	0x055B, r24
					if(irCommTempValue==1) {
    9b4e:	01 97       	sbiw	r24, 0x01	; 1
    9b50:	09 f4       	brne	.+2      	; 0x9b54 <irCommTasks+0xfe>
    9b52:	62 c7       	rjmp	.+3780   	; 0xaa18 <irCommTasks+0xfc2>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9b54:	83 2f       	mov	r24, r19
    9b56:	90 e0       	ldi	r25, 0x00	; 0
    9b58:	95 95       	asr	r25
    9b5a:	87 95       	ror	r24
    9b5c:	95 95       	asr	r25
    9b5e:	87 95       	ror	r24
    9b60:	95 95       	asr	r25
    9b62:	87 95       	ror	r24
    9b64:	81 70       	andi	r24, 0x01	; 1
    9b66:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9b68:	80 93 5a 05 	sts	0x055A, r24
					if(irCommTempValue==1) {
    9b6c:	01 97       	sbiw	r24, 0x01	; 1
    9b6e:	09 f4       	brne	.+2      	; 0x9b72 <irCommTasks+0x11c>
    9b70:	51 c7       	rjmp	.+3746   	; 0xaa14 <irCommTasks+0xfbe>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9b72:	83 2f       	mov	r24, r19
    9b74:	90 e0       	ldi	r25, 0x00	; 0
    9b76:	95 95       	asr	r25
    9b78:	87 95       	ror	r24
    9b7a:	95 95       	asr	r25
    9b7c:	87 95       	ror	r24
    9b7e:	95 95       	asr	r25
    9b80:	87 95       	ror	r24
    9b82:	95 95       	asr	r25
    9b84:	87 95       	ror	r24
    9b86:	81 70       	andi	r24, 0x01	; 1
    9b88:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9b8a:	80 93 59 05 	sts	0x0559, r24
					if(irCommTempValue==1) {
    9b8e:	01 97       	sbiw	r24, 0x01	; 1
    9b90:	09 f4       	brne	.+2      	; 0x9b94 <irCommTasks+0x13e>
    9b92:	3e c7       	rjmp	.+3708   	; 0xaa10 <irCommTasks+0xfba>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9b94:	83 2f       	mov	r24, r19
    9b96:	90 e0       	ldi	r25, 0x00	; 0
    9b98:	95 95       	asr	r25
    9b9a:	87 95       	ror	r24
    9b9c:	95 95       	asr	r25
    9b9e:	87 95       	ror	r24
    9ba0:	95 95       	asr	r25
    9ba2:	87 95       	ror	r24
    9ba4:	95 95       	asr	r25
    9ba6:	87 95       	ror	r24
    9ba8:	95 95       	asr	r25
    9baa:	87 95       	ror	r24
    9bac:	81 70       	andi	r24, 0x01	; 1
    9bae:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9bb0:	80 93 58 05 	sts	0x0558, r24
					if(irCommTempValue==1) {
    9bb4:	01 97       	sbiw	r24, 0x01	; 1
    9bb6:	09 f4       	brne	.+2      	; 0x9bba <irCommTasks+0x164>
    9bb8:	29 c7       	rjmp	.+3666   	; 0xaa0c <irCommTasks+0xfb6>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9bba:	83 2f       	mov	r24, r19
    9bbc:	90 e0       	ldi	r25, 0x00	; 0
    9bbe:	08 2e       	mov	r0, r24
    9bc0:	89 2f       	mov	r24, r25
    9bc2:	00 0c       	add	r0, r0
    9bc4:	88 1f       	adc	r24, r24
    9bc6:	99 0b       	sbc	r25, r25
    9bc8:	00 0c       	add	r0, r0
    9bca:	88 1f       	adc	r24, r24
    9bcc:	99 1f       	adc	r25, r25
    9bce:	81 70       	andi	r24, 0x01	; 1
    9bd0:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9bd2:	80 93 57 05 	sts	0x0557, r24
					if(irCommTempValue==1) {
    9bd6:	01 97       	sbiw	r24, 0x01	; 1
    9bd8:	09 f4       	brne	.+2      	; 0x9bdc <irCommTasks+0x186>
    9bda:	16 c7       	rjmp	.+3628   	; 0xaa08 <irCommTasks+0xfb2>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9bdc:	83 2f       	mov	r24, r19
    9bde:	90 e0       	ldi	r25, 0x00	; 0
    9be0:	88 0f       	add	r24, r24
    9be2:	89 2f       	mov	r24, r25
    9be4:	88 1f       	adc	r24, r24
    9be6:	99 0b       	sbc	r25, r25
    9be8:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9bea:	80 93 56 05 	sts	0x0556, r24
					if(irCommTempValue==1) {
    9bee:	81 30       	cpi	r24, 0x01	; 1
    9bf0:	91 05       	cpc	r25, r1
    9bf2:	09 f4       	brne	.+2      	; 0x9bf6 <irCommTasks+0x1a0>
    9bf4:	07 c7       	rjmp	.+3598   	; 0xaa04 <irCommTasks+0xfae>
						irCommTxCrc++;
    9bf6:	90 93 d7 04 	sts	0x04D7, r25
    9bfa:	80 93 d6 04 	sts	0x04D6, r24
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
				irCommTxCrc = 4 - irCommTxCrc;
    9bfe:	23 70       	andi	r18, 0x03	; 3
    9c00:	84 e0       	ldi	r24, 0x04	; 4
    9c02:	82 1b       	sub	r24, r18
    9c04:	80 93 2b 05 	sts	0x052B, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    9c08:	98 2f       	mov	r25, r24
    9c0a:	96 95       	lsr	r25
    9c0c:	91 70       	andi	r25, 0x01	; 1
    9c0e:	90 93 5e 05 	sts	0x055E, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    9c12:	81 70       	andi	r24, 0x01	; 1
    9c14:	80 93 5f 05 	sts	0x055F, r24
				irCommTxBitCount = 0;							
    9c18:	10 92 2c 05 	sts	0x052C, r1
				irCommTxPulseState = 0;	
    9c1c:	10 92 2d 05 	sts	0x052D, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    9c20:	82 e0       	ldi	r24, 0x02	; 2
    9c22:	80 93 d5 04 	sts	0x04D5, r24
    9c26:	30 cf       	rjmp	.-416    	; 0x9a88 <irCommTasks+0x32>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    9c28:	10 91 d5 04 	lds	r17, 0x04D5
    9c2c:	13 30       	cpi	r17, 0x03	; 3
    9c2e:	09 f4       	brne	.+2      	; 0x9c32 <irCommTasks+0x1dc>
    9c30:	ca c4       	rjmp	.+2452   	; 0xa5c6 <irCommTasks+0xb70>
    9c32:	14 30       	cpi	r17, 0x04	; 4
    9c34:	08 f4       	brcc	.+2      	; 0x9c38 <irCommTasks+0x1e2>
    9c36:	af c0       	rjmp	.+350    	; 0x9d96 <irCommTasks+0x340>
    9c38:	17 30       	cpi	r17, 0x07	; 7
    9c3a:	09 f4       	brne	.+2      	; 0x9c3e <irCommTasks+0x1e8>
    9c3c:	74 c4       	rjmp	.+2280   	; 0xa526 <irCommTasks+0xad0>
    9c3e:	18 30       	cpi	r17, 0x08	; 8
    9c40:	09 f4       	brne	.+2      	; 0x9c44 <irCommTasks+0x1ee>
    9c42:	dc c2       	rjmp	.+1464   	; 0xa1fc <irCommTasks+0x7a6>
    9c44:	16 30       	cpi	r17, 0x06	; 6
    9c46:	09 f0       	breq	.+2      	; 0x9c4a <irCommTasks+0x1f4>
    9c48:	1f cf       	rjmp	.-450    	; 0x9a88 <irCommTasks+0x32>
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
    9c4a:	80 e0       	ldi	r24, 0x00	; 0
    9c4c:	94 e0       	ldi	r25, 0x04	; 4
    9c4e:	90 93 0b 05 	sts	0x050B, r25
    9c52:	80 93 0a 05 	sts	0x050A, r24
				irCommTempMax = 0;
    9c56:	10 92 09 05 	sts	0x0509, r1
    9c5a:	10 92 08 05 	sts	0x0508, r1
    9c5e:	80 91 21 05 	lds	r24, 0x0521
    9c62:	90 91 22 05 	lds	r25, 0x0522
    9c66:	88 0f       	add	r24, r24
    9c68:	99 1f       	adc	r25, r25
    9c6a:	c0 91 4d 08 	lds	r28, 0x084D
    9c6e:	d0 91 4e 08 	lds	r29, 0x084E
    9c72:	c8 0f       	add	r28, r24
    9c74:	d9 1f       	adc	r29, r25
    9c76:	b9 e3       	ldi	r27, 0x39	; 57
    9c78:	cb 2e       	mov	r12, r27
    9c7a:	bb e0       	ldi	r27, 0x0B	; 11
    9c7c:	db 2e       	mov	r13, r27
    9c7e:	f6 01       	movw	r30, r12
    9c80:	ee 24       	eor	r14, r14
    9c82:	ff 24       	eor	r15, r15
    9c84:	87 01       	movw	r16, r14
    9c86:	60 e0       	ldi	r22, 0x00	; 0
    9c88:	74 e0       	ldi	r23, 0x04	; 4
    9c8a:	40 e0       	ldi	r20, 0x00	; 0
    9c8c:	50 e0       	ldi	r21, 0x00	; 0
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    9c8e:	28 81       	ld	r18, Y
    9c90:	39 81       	ldd	r19, Y+1	; 0x01
    9c92:	31 83       	std	Z+1, r19	; 0x01
    9c94:	20 83       	st	Z, r18
					irCommProxSum += irCommMaxSensorSignal[i];
    9c96:	c9 01       	movw	r24, r18
    9c98:	aa 27       	eor	r26, r26
    9c9a:	97 fd       	sbrc	r25, 7
    9c9c:	a0 95       	com	r26
    9c9e:	ba 2f       	mov	r27, r26
    9ca0:	e8 0e       	add	r14, r24
    9ca2:	f9 1e       	adc	r15, r25
    9ca4:	0a 1f       	adc	r16, r26
    9ca6:	1b 1f       	adc	r17, r27
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
    9ca8:	26 17       	cp	r18, r22
    9caa:	37 07       	cpc	r19, r23
    9cac:	2c f4       	brge	.+10     	; 0x9cb8 <irCommTasks+0x262>
						irCommTempMin = irCommMaxSensorSignal[i];
    9cae:	30 93 0b 05 	sts	0x050B, r19
    9cb2:	20 93 0a 05 	sts	0x050A, r18
    9cb6:	b9 01       	movw	r22, r18
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
    9cb8:	42 17       	cp	r20, r18
    9cba:	53 07       	cpc	r21, r19
    9cbc:	2c f4       	brge	.+10     	; 0x9cc8 <irCommTasks+0x272>
						irCommTempMax = irCommMaxSensorSignal[i];
    9cbe:	30 93 09 05 	sts	0x0509, r19
    9cc2:	20 93 08 05 	sts	0x0508, r18
    9cc6:	a9 01       	movw	r20, r18
    9cc8:	60 96       	adiw	r28, 0x10	; 16
    9cca:	32 96       	adiw	r30, 0x02	; 2
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9ccc:	9b e0       	ldi	r25, 0x0B	; 11
    9cce:	e1 36       	cpi	r30, 0x61	; 97
    9cd0:	f9 07       	cpc	r31, r25
    9cd2:	e9 f6       	brne	.-70     	; 0x9c8e <irCommTasks+0x238>
    9cd4:	e0 92 04 05 	sts	0x0504, r14
    9cd8:	f0 92 05 05 	sts	0x0505, r15
    9cdc:	00 93 06 05 	sts	0x0506, r16
    9ce0:	10 93 07 05 	sts	0x0507, r17
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
    9ce4:	46 1b       	sub	r20, r22
    9ce6:	57 0b       	sbc	r21, r23
    9ce8:	40 35       	cpi	r20, 0x50	; 80
    9cea:	51 05       	cpc	r21, r1
    9cec:	0c f4       	brge	.+2      	; 0x9cf0 <irCommTasks+0x29a>
    9cee:	38 c6       	rjmp	.+3184   	; 0xa960 <irCommTasks+0xf0a>

					resetDebugVariables();
					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    9cf0:	b7 01       	movw	r22, r14
    9cf2:	c8 01       	movw	r24, r16
    9cf4:	24 e1       	ldi	r18, 0x14	; 20
    9cf6:	30 e0       	ldi	r19, 0x00	; 0
    9cf8:	40 e0       	ldi	r20, 0x00	; 0
    9cfa:	50 e0       	ldi	r21, 0x00	; 0
    9cfc:	0e 94 6f 5b 	call	0xb6de	; 0xb6de <__divmodsi4>
    9d00:	a9 01       	movw	r20, r18
    9d02:	30 93 0f 05 	sts	0x050F, r19
    9d06:	20 93 0e 05 	sts	0x050E, r18
    9d0a:	30 91 fe 04 	lds	r19, 0x04FE

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
    9d0e:	67 ec       	ldi	r22, 0xC7	; 199
    9d10:	d6 01       	movw	r26, r12
    9d12:	8d 91       	ld	r24, X+
    9d14:	9c 91       	ld	r25, X
    9d16:	11 97       	sbiw	r26, 0x01	; 1
    9d18:	84 1b       	sub	r24, r20
    9d1a:	95 0b       	sbc	r25, r21
    9d1c:	8d 93       	st	X+, r24
    9d1e:	9c 93       	st	X, r25
    9d20:	27 ec       	ldi	r18, 0xC7	; 199
    9d22:	36 17       	cp	r19, r22
    9d24:	08 f4       	brcc	.+2      	; 0x9d28 <irCommTasks+0x2d2>
    9d26:	23 2f       	mov	r18, r19

					if(irCommBitsSignalIndexTemp>199) {
						irCommBitsSignalIndexTemp = 199;
						//updateRedLed(0);
					}
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
    9d28:	e2 2f       	mov	r30, r18
    9d2a:	f0 e0       	ldi	r31, 0x00	; 0
    9d2c:	ee 0f       	add	r30, r30
    9d2e:	ff 1f       	adc	r31, r31
    9d30:	e9 56       	subi	r30, 0x69	; 105
    9d32:	f6 4f       	sbci	r31, 0xF6	; 246
    9d34:	91 83       	std	Z+1, r25	; 0x01
    9d36:	80 83       	st	Z, r24
					irCommBitsSignalIndexTemp++;
    9d38:	32 2f       	mov	r19, r18
    9d3a:	3f 5f       	subi	r19, 0xFF	; 255
    9d3c:	e2 e0       	ldi	r30, 0x02	; 2
    9d3e:	f0 e0       	ldi	r31, 0x00	; 0
    9d40:	ce 0e       	add	r12, r30
    9d42:	df 1e       	adc	r13, r31
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9d44:	f1 e6       	ldi	r31, 0x61	; 97
    9d46:	cf 16       	cp	r12, r31
    9d48:	fb e0       	ldi	r31, 0x0B	; 11
    9d4a:	df 06       	cpc	r13, r31
    9d4c:	09 f7       	brne	.-62     	; 0x9d10 <irCommTasks+0x2ba>
    9d4e:	30 93 fe 04 	sts	0x04FE, r19
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommBitsSignalIndexTemp++;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    9d52:	80 91 39 0b 	lds	r24, 0x0B39
    9d56:	90 91 3a 0b 	lds	r25, 0x0B3A
    9d5a:	18 16       	cp	r1, r24
    9d5c:	19 06       	cpc	r1, r25
    9d5e:	0c f0       	brlt	.+2      	; 0x9d62 <irCommTasks+0x30c>
    9d60:	07 c7       	rjmp	.+3598   	; 0xab70 <irCommTasks+0x111a>
					irCommSignalState = 1;
    9d62:	81 e0       	ldi	r24, 0x01	; 1
    9d64:	80 93 10 05 	sts	0x0510, r24
    9d68:	28 2f       	mov	r18, r24
				} else {
					irCommSignalState = -1;
    9d6a:	eb e3       	ldi	r30, 0x3B	; 59
    9d6c:	fb e0       	ldi	r31, 0x0B	; 11
    9d6e:	30 e0       	ldi	r19, 0x00	; 0
    9d70:	08 c0       	rjmp	.+16     	; 0x9d82 <irCommTasks+0x32c>
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    9d72:	27 fd       	sbrc	r18, 7
    9d74:	40 c2       	rjmp	.+1152   	; 0xa1f6 <irCommTasks+0x7a0>
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
							irCommSwitchCount++;
    9d76:	32 96       	adiw	r30, 0x02	; 2
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9d78:	8b e0       	ldi	r24, 0x0B	; 11
    9d7a:	e1 36       	cpi	r30, 0x61	; 97
    9d7c:	f8 07       	cpc	r31, r24
    9d7e:	09 f4       	brne	.+2      	; 0x9d82 <irCommTasks+0x32c>
    9d80:	fe c5       	rjmp	.+3068   	; 0xa97e <irCommTasks+0xf28>
					if(irCommMaxSensorSignal[i] > 0) {
    9d82:	80 81       	ld	r24, Z
    9d84:	91 81       	ldd	r25, Z+1	; 0x01
    9d86:	18 16       	cp	r1, r24
    9d88:	19 06       	cpc	r1, r25
    9d8a:	9c f3       	brlt	.-26     	; 0x9d72 <irCommTasks+0x31c>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    9d8c:	12 16       	cp	r1, r18
    9d8e:	9c f7       	brge	.-26     	; 0x9d76 <irCommTasks+0x320>
							irCommSignalState = -1;
							irCommSwitchCount++;
    9d90:	3f 5f       	subi	r19, 0xFF	; 255
    9d92:	2f ef       	ldi	r18, 0xFF	; 255
    9d94:	f0 cf       	rjmp	.-32     	; 0x9d76 <irCommTasks+0x320>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    9d96:	11 30       	cpi	r17, 0x01	; 1
    9d98:	09 f4       	brne	.+2      	; 0x9d9c <irCommTasks+0x346>
    9d9a:	ef c3       	rjmp	.+2014   	; 0xa57a <irCommTasks+0xb24>
    9d9c:	12 30       	cpi	r17, 0x02	; 2
    9d9e:	09 f0       	breq	.+2      	; 0x9da2 <irCommTasks+0x34c>
    9da0:	73 ce       	rjmp	.-794    	; 0x9a88 <irCommTasks+0x32>
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9da2:	c0 91 4a 05 	lds	r28, 0x054A
    9da6:	d0 91 4b 05 	lds	r29, 0x054B
    9daa:	60 91 36 05 	lds	r22, 0x0536
    9dae:	70 91 37 05 	lds	r23, 0x0537
    9db2:	88 81       	ld	r24, Y
    9db4:	99 81       	ldd	r25, Y+1	; 0x01
    9db6:	db 01       	movw	r26, r22
    9db8:	2d 91       	ld	r18, X+
    9dba:	3c 91       	ld	r19, X
    9dbc:	82 1b       	sub	r24, r18
    9dbe:	93 0b       	sbc	r25, r19
    9dc0:	80 35       	cpi	r24, 0x50	; 80
    9dc2:	91 05       	cpc	r25, r1
    9dc4:	0c f0       	brlt	.+2      	; 0x9dc8 <irCommTasks+0x372>
    9dc6:	3c c6       	rjmp	.+3192   	; 0xaa40 <irCommTasks+0xfea>
    9dc8:	40 91 23 05 	lds	r20, 0x0523
    9dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    9dce:	9b 81       	ldd	r25, Y+3	; 0x03
    9dd0:	fb 01       	movw	r30, r22
    9dd2:	22 81       	ldd	r18, Z+2	; 0x02
    9dd4:	33 81       	ldd	r19, Z+3	; 0x03
    9dd6:	82 1b       	sub	r24, r18
    9dd8:	93 0b       	sbc	r25, r19
    9dda:	80 35       	cpi	r24, 0x50	; 80
    9ddc:	91 05       	cpc	r25, r1
    9dde:	1c f0       	brlt	.+6      	; 0x9de6 <irCommTasks+0x390>
						irCommRxNumReceivingSensors++;
    9de0:	4f 5f       	subi	r20, 0xFF	; 255
    9de2:	40 93 23 05 	sts	0x0523, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9de6:	8c 81       	ldd	r24, Y+4	; 0x04
    9de8:	9d 81       	ldd	r25, Y+5	; 0x05
    9dea:	db 01       	movw	r26, r22
    9dec:	14 96       	adiw	r26, 0x04	; 4
    9dee:	2d 91       	ld	r18, X+
    9df0:	3c 91       	ld	r19, X
    9df2:	15 97       	sbiw	r26, 0x05	; 5
    9df4:	82 1b       	sub	r24, r18
    9df6:	93 0b       	sbc	r25, r19
    9df8:	80 35       	cpi	r24, 0x50	; 80
    9dfa:	91 05       	cpc	r25, r1
    9dfc:	1c f0       	brlt	.+6      	; 0x9e04 <irCommTasks+0x3ae>
						irCommRxNumReceivingSensors++;
    9dfe:	4f 5f       	subi	r20, 0xFF	; 255
    9e00:	40 93 23 05 	sts	0x0523, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9e04:	8e 81       	ldd	r24, Y+6	; 0x06
    9e06:	9f 81       	ldd	r25, Y+7	; 0x07
    9e08:	fb 01       	movw	r30, r22
    9e0a:	26 81       	ldd	r18, Z+6	; 0x06
    9e0c:	37 81       	ldd	r19, Z+7	; 0x07
    9e0e:	82 1b       	sub	r24, r18
    9e10:	93 0b       	sbc	r25, r19
    9e12:	80 35       	cpi	r24, 0x50	; 80
    9e14:	91 05       	cpc	r25, r1
    9e16:	1c f0       	brlt	.+6      	; 0x9e1e <irCommTasks+0x3c8>
						irCommRxNumReceivingSensors++;
    9e18:	4f 5f       	subi	r20, 0xFF	; 255
    9e1a:	40 93 23 05 	sts	0x0523, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9e1e:	88 85       	ldd	r24, Y+8	; 0x08
    9e20:	99 85       	ldd	r25, Y+9	; 0x09
    9e22:	db 01       	movw	r26, r22
    9e24:	18 96       	adiw	r26, 0x08	; 8
    9e26:	2d 91       	ld	r18, X+
    9e28:	3c 91       	ld	r19, X
    9e2a:	19 97       	sbiw	r26, 0x09	; 9
    9e2c:	82 1b       	sub	r24, r18
    9e2e:	93 0b       	sbc	r25, r19
    9e30:	80 35       	cpi	r24, 0x50	; 80
    9e32:	91 05       	cpc	r25, r1
    9e34:	1c f0       	brlt	.+6      	; 0x9e3c <irCommTasks+0x3e6>
						irCommRxNumReceivingSensors++;
    9e36:	4f 5f       	subi	r20, 0xFF	; 255
    9e38:	40 93 23 05 	sts	0x0523, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9e3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    9e3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    9e40:	fb 01       	movw	r30, r22
    9e42:	22 85       	ldd	r18, Z+10	; 0x0a
    9e44:	33 85       	ldd	r19, Z+11	; 0x0b
    9e46:	82 1b       	sub	r24, r18
    9e48:	93 0b       	sbc	r25, r19
    9e4a:	80 35       	cpi	r24, 0x50	; 80
    9e4c:	91 05       	cpc	r25, r1
    9e4e:	1c f0       	brlt	.+6      	; 0x9e56 <irCommTasks+0x400>
						irCommRxNumReceivingSensors++;
    9e50:	4f 5f       	subi	r20, 0xFF	; 255
    9e52:	40 93 23 05 	sts	0x0523, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9e56:	8c 85       	ldd	r24, Y+12	; 0x0c
    9e58:	9d 85       	ldd	r25, Y+13	; 0x0d
    9e5a:	db 01       	movw	r26, r22
    9e5c:	1c 96       	adiw	r26, 0x0c	; 12
    9e5e:	2d 91       	ld	r18, X+
    9e60:	3c 91       	ld	r19, X
    9e62:	1d 97       	sbiw	r26, 0x0d	; 13
    9e64:	82 1b       	sub	r24, r18
    9e66:	93 0b       	sbc	r25, r19
    9e68:	80 35       	cpi	r24, 0x50	; 80
    9e6a:	91 05       	cpc	r25, r1
    9e6c:	1c f0       	brlt	.+6      	; 0x9e74 <irCommTasks+0x41e>
						irCommRxNumReceivingSensors++;
    9e6e:	4f 5f       	subi	r20, 0xFF	; 255
    9e70:	40 93 23 05 	sts	0x0523, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9e74:	8e 85       	ldd	r24, Y+14	; 0x0e
    9e76:	9f 85       	ldd	r25, Y+15	; 0x0f
    9e78:	fb 01       	movw	r30, r22
    9e7a:	26 85       	ldd	r18, Z+14	; 0x0e
    9e7c:	37 85       	ldd	r19, Z+15	; 0x0f
    9e7e:	82 1b       	sub	r24, r18
    9e80:	93 0b       	sbc	r25, r19
    9e82:	80 35       	cpi	r24, 0x50	; 80
    9e84:	91 05       	cpc	r25, r1
    9e86:	1c f0       	brlt	.+6      	; 0x9e8e <irCommTasks+0x438>
						irCommRxNumReceivingSensors++;
    9e88:	4f 5f       	subi	r20, 0xFF	; 255
    9e8a:	40 93 23 05 	sts	0x0523, r20
					}					
				}
				if(irCommRxNumReceivingSensors==0) {
    9e8e:	44 23       	and	r20, r20
    9e90:	09 f4       	brne	.+2      	; 0x9e94 <irCommTasks+0x43e>
    9e92:	10 c6       	rjmp	.+3104   	; 0xaab4 <irCommTasks+0x105e>
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
					}
				} else {
					if(irCommRxStartBitDetected==0) {
    9e94:	80 91 1c 05 	lds	r24, 0x051C
    9e98:	88 23       	and	r24, r24
    9e9a:	09 f0       	breq	.+2      	; 0x9e9e <irCommTasks+0x448>
    9e9c:	f4 c5       	rjmp	.+3048   	; 0xaa86 <irCommTasks+0x1030>
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
    9e9e:	80 91 21 05 	lds	r24, 0x0521
    9ea2:	90 91 22 05 	lds	r25, 0x0522
    9ea6:	87 30       	cpi	r24, 0x07	; 7
    9ea8:	91 05       	cpc	r25, r1
    9eaa:	0c f0       	brlt	.+2      	; 0x9eae <irCommTasks+0x458>
    9eac:	9f c6       	rjmp	.+3390   	; 0xabec <irCommTasks+0x1196>
							irCommRxMaxSensor++;
    9eae:	01 96       	adiw	r24, 0x01	; 1
    9eb0:	90 93 22 05 	sts	0x0522, r25
    9eb4:	80 93 21 05 	sts	0x0521, r24
    9eb8:	ac 01       	movw	r20, r24
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9eba:	fa 01       	movw	r30, r20
    9ebc:	ee 0f       	add	r30, r30
    9ebe:	ff 1f       	adc	r31, r31
    9ec0:	de 01       	movw	r26, r28
    9ec2:	ae 0f       	add	r26, r30
    9ec4:	bf 1f       	adc	r27, r31
    9ec6:	e6 0f       	add	r30, r22
    9ec8:	f7 1f       	adc	r31, r23
    9eca:	0d 90       	ld	r0, X+
    9ecc:	bc 91       	ld	r27, X
    9ece:	a0 2d       	mov	r26, r0
    9ed0:	80 81       	ld	r24, Z
    9ed2:	91 81       	ldd	r25, Z+1	; 0x01
    9ed4:	a8 1b       	sub	r26, r24
    9ed6:	b9 0b       	sbc	r27, r25
    9ed8:	a0 35       	cpi	r26, 0x50	; 80
    9eda:	b1 05       	cpc	r27, r1
    9edc:	0c f0       	brlt	.+2      	; 0x9ee0 <irCommTasks+0x48a>
    9ede:	6f c7       	rjmp	.+3806   	; 0xadbe <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9ee0:	47 30       	cpi	r20, 0x07	; 7
    9ee2:	51 05       	cpc	r21, r1
    9ee4:	0c f4       	brge	.+2      	; 0x9ee8 <irCommTasks+0x492>
    9ee6:	a1 c6       	rjmp	.+3394   	; 0xac2a <irCommTasks+0x11d4>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    9ee8:	10 92 22 05 	sts	0x0522, r1
    9eec:	10 92 21 05 	sts	0x0521, r1
    9ef0:	40 91 21 05 	lds	r20, 0x0521
    9ef4:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9ef8:	fa 01       	movw	r30, r20
    9efa:	ee 0f       	add	r30, r30
    9efc:	ff 1f       	adc	r31, r31
    9efe:	de 01       	movw	r26, r28
    9f00:	ae 0f       	add	r26, r30
    9f02:	bf 1f       	adc	r27, r31
    9f04:	e6 0f       	add	r30, r22
    9f06:	f7 1f       	adc	r31, r23
    9f08:	0d 90       	ld	r0, X+
    9f0a:	bc 91       	ld	r27, X
    9f0c:	a0 2d       	mov	r26, r0
    9f0e:	80 81       	ld	r24, Z
    9f10:	91 81       	ldd	r25, Z+1	; 0x01
    9f12:	a8 1b       	sub	r26, r24
    9f14:	b9 0b       	sbc	r27, r25
    9f16:	a0 35       	cpi	r26, 0x50	; 80
    9f18:	b1 05       	cpc	r27, r1
    9f1a:	0c f0       	brlt	.+2      	; 0x9f1e <irCommTasks+0x4c8>
    9f1c:	50 c7       	rjmp	.+3744   	; 0xadbe <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9f1e:	47 30       	cpi	r20, 0x07	; 7
    9f20:	51 05       	cpc	r21, r1
    9f22:	0c f4       	brge	.+2      	; 0x9f26 <irCommTasks+0x4d0>
    9f24:	7b c6       	rjmp	.+3318   	; 0xac1c <irCommTasks+0x11c6>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    9f26:	10 92 22 05 	sts	0x0522, r1
    9f2a:	10 92 21 05 	sts	0x0521, r1
    9f2e:	40 91 21 05 	lds	r20, 0x0521
    9f32:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9f36:	fa 01       	movw	r30, r20
    9f38:	ee 0f       	add	r30, r30
    9f3a:	ff 1f       	adc	r31, r31
    9f3c:	de 01       	movw	r26, r28
    9f3e:	ae 0f       	add	r26, r30
    9f40:	bf 1f       	adc	r27, r31
    9f42:	e6 0f       	add	r30, r22
    9f44:	f7 1f       	adc	r31, r23
    9f46:	0d 90       	ld	r0, X+
    9f48:	bc 91       	ld	r27, X
    9f4a:	a0 2d       	mov	r26, r0
    9f4c:	80 81       	ld	r24, Z
    9f4e:	91 81       	ldd	r25, Z+1	; 0x01
    9f50:	a8 1b       	sub	r26, r24
    9f52:	b9 0b       	sbc	r27, r25
    9f54:	a0 35       	cpi	r26, 0x50	; 80
    9f56:	b1 05       	cpc	r27, r1
    9f58:	0c f0       	brlt	.+2      	; 0x9f5c <irCommTasks+0x506>
    9f5a:	31 c7       	rjmp	.+3682   	; 0xadbe <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9f5c:	47 30       	cpi	r20, 0x07	; 7
    9f5e:	51 05       	cpc	r21, r1
    9f60:	0c f4       	brge	.+2      	; 0x9f64 <irCommTasks+0x50e>
    9f62:	be c6       	rjmp	.+3452   	; 0xace0 <irCommTasks+0x128a>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    9f64:	10 92 22 05 	sts	0x0522, r1
    9f68:	10 92 21 05 	sts	0x0521, r1
    9f6c:	40 91 21 05 	lds	r20, 0x0521
    9f70:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9f74:	fa 01       	movw	r30, r20
    9f76:	ee 0f       	add	r30, r30
    9f78:	ff 1f       	adc	r31, r31
    9f7a:	de 01       	movw	r26, r28
    9f7c:	ae 0f       	add	r26, r30
    9f7e:	bf 1f       	adc	r27, r31
    9f80:	e6 0f       	add	r30, r22
    9f82:	f7 1f       	adc	r31, r23
    9f84:	0d 90       	ld	r0, X+
    9f86:	bc 91       	ld	r27, X
    9f88:	a0 2d       	mov	r26, r0
    9f8a:	80 81       	ld	r24, Z
    9f8c:	91 81       	ldd	r25, Z+1	; 0x01
    9f8e:	a8 1b       	sub	r26, r24
    9f90:	b9 0b       	sbc	r27, r25
    9f92:	a0 35       	cpi	r26, 0x50	; 80
    9f94:	b1 05       	cpc	r27, r1
    9f96:	0c f0       	brlt	.+2      	; 0x9f9a <irCommTasks+0x544>
    9f98:	12 c7       	rjmp	.+3620   	; 0xadbe <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9f9a:	47 30       	cpi	r20, 0x07	; 7
    9f9c:	51 05       	cpc	r21, r1
    9f9e:	0c f4       	brge	.+2      	; 0x9fa2 <irCommTasks+0x54c>
    9fa0:	a6 c6       	rjmp	.+3404   	; 0xacee <irCommTasks+0x1298>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    9fa2:	10 92 22 05 	sts	0x0522, r1
    9fa6:	10 92 21 05 	sts	0x0521, r1
    9faa:	40 91 21 05 	lds	r20, 0x0521
    9fae:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9fb2:	fa 01       	movw	r30, r20
    9fb4:	ee 0f       	add	r30, r30
    9fb6:	ff 1f       	adc	r31, r31
    9fb8:	de 01       	movw	r26, r28
    9fba:	ae 0f       	add	r26, r30
    9fbc:	bf 1f       	adc	r27, r31
    9fbe:	e6 0f       	add	r30, r22
    9fc0:	f7 1f       	adc	r31, r23
    9fc2:	0d 90       	ld	r0, X+
    9fc4:	bc 91       	ld	r27, X
    9fc6:	a0 2d       	mov	r26, r0
    9fc8:	80 81       	ld	r24, Z
    9fca:	91 81       	ldd	r25, Z+1	; 0x01
    9fcc:	a8 1b       	sub	r26, r24
    9fce:	b9 0b       	sbc	r27, r25
    9fd0:	a0 35       	cpi	r26, 0x50	; 80
    9fd2:	b1 05       	cpc	r27, r1
    9fd4:	0c f0       	brlt	.+2      	; 0x9fd8 <irCommTasks+0x582>
    9fd6:	f3 c6       	rjmp	.+3558   	; 0xadbe <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    9fd8:	47 30       	cpi	r20, 0x07	; 7
    9fda:	51 05       	cpc	r21, r1
    9fdc:	0c f4       	brge	.+2      	; 0x9fe0 <irCommTasks+0x58a>
    9fde:	8e c6       	rjmp	.+3356   	; 0xacfc <irCommTasks+0x12a6>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    9fe0:	10 92 22 05 	sts	0x0522, r1
    9fe4:	10 92 21 05 	sts	0x0521, r1
    9fe8:	40 91 21 05 	lds	r20, 0x0521
    9fec:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    9ff0:	fa 01       	movw	r30, r20
    9ff2:	ee 0f       	add	r30, r30
    9ff4:	ff 1f       	adc	r31, r31
    9ff6:	de 01       	movw	r26, r28
    9ff8:	ae 0f       	add	r26, r30
    9ffa:	bf 1f       	adc	r27, r31
    9ffc:	e6 0f       	add	r30, r22
    9ffe:	f7 1f       	adc	r31, r23
    a000:	0d 90       	ld	r0, X+
    a002:	bc 91       	ld	r27, X
    a004:	a0 2d       	mov	r26, r0
    a006:	80 81       	ld	r24, Z
    a008:	91 81       	ldd	r25, Z+1	; 0x01
    a00a:	a8 1b       	sub	r26, r24
    a00c:	b9 0b       	sbc	r27, r25
    a00e:	a0 35       	cpi	r26, 0x50	; 80
    a010:	b1 05       	cpc	r27, r1
    a012:	0c f0       	brlt	.+2      	; 0xa016 <irCommTasks+0x5c0>
    a014:	d4 c6       	rjmp	.+3496   	; 0xadbe <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    a016:	47 30       	cpi	r20, 0x07	; 7
    a018:	51 05       	cpc	r21, r1
    a01a:	0c f4       	brge	.+2      	; 0xa01e <irCommTasks+0x5c8>
    a01c:	76 c6       	rjmp	.+3308   	; 0xad0a <irCommTasks+0x12b4>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    a01e:	10 92 22 05 	sts	0x0522, r1
    a022:	10 92 21 05 	sts	0x0521, r1
    a026:	40 91 21 05 	lds	r20, 0x0521
    a02a:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a02e:	fa 01       	movw	r30, r20
    a030:	ee 0f       	add	r30, r30
    a032:	ff 1f       	adc	r31, r31
    a034:	de 01       	movw	r26, r28
    a036:	ae 0f       	add	r26, r30
    a038:	bf 1f       	adc	r27, r31
    a03a:	e6 0f       	add	r30, r22
    a03c:	f7 1f       	adc	r31, r23
    a03e:	0d 90       	ld	r0, X+
    a040:	bc 91       	ld	r27, X
    a042:	a0 2d       	mov	r26, r0
    a044:	80 81       	ld	r24, Z
    a046:	91 81       	ldd	r25, Z+1	; 0x01
    a048:	a8 1b       	sub	r26, r24
    a04a:	b9 0b       	sbc	r27, r25
    a04c:	a0 35       	cpi	r26, 0x50	; 80
    a04e:	b1 05       	cpc	r27, r1
    a050:	0c f0       	brlt	.+2      	; 0xa054 <irCommTasks+0x5fe>
    a052:	b5 c6       	rjmp	.+3434   	; 0xadbe <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    a054:	47 30       	cpi	r20, 0x07	; 7
    a056:	51 05       	cpc	r21, r1
    a058:	0c f4       	brge	.+2      	; 0xa05c <irCommTasks+0x606>
    a05a:	65 c6       	rjmp	.+3274   	; 0xad26 <irCommTasks+0x12d0>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    a05c:	10 92 22 05 	sts	0x0522, r1
    a060:	10 92 21 05 	sts	0x0521, r1
    a064:	40 91 21 05 	lds	r20, 0x0521
    a068:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a06c:	fa 01       	movw	r30, r20
    a06e:	ee 0f       	add	r30, r30
    a070:	ff 1f       	adc	r31, r31
    a072:	de 01       	movw	r26, r28
    a074:	ae 0f       	add	r26, r30
    a076:	bf 1f       	adc	r27, r31
    a078:	e6 0f       	add	r30, r22
    a07a:	f7 1f       	adc	r31, r23
    a07c:	0d 90       	ld	r0, X+
    a07e:	bc 91       	ld	r27, X
    a080:	a0 2d       	mov	r26, r0
    a082:	80 81       	ld	r24, Z
    a084:	91 81       	ldd	r25, Z+1	; 0x01
    a086:	a8 1b       	sub	r26, r24
    a088:	b9 0b       	sbc	r27, r25
    a08a:	a0 35       	cpi	r26, 0x50	; 80
    a08c:	b1 05       	cpc	r27, r1
    a08e:	0c f0       	brlt	.+2      	; 0xa092 <irCommTasks+0x63c>
    a090:	96 c6       	rjmp	.+3372   	; 0xadbe <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    a092:	47 30       	cpi	r20, 0x07	; 7
    a094:	51 05       	cpc	r21, r1
    a096:	0c f0       	brlt	.+2      	; 0xa09a <irCommTasks+0x644>
    a098:	3f c6       	rjmp	.+3198   	; 0xad18 <irCommTasks+0x12c2>
								irCommRxMaxSensor++;
    a09a:	ca 01       	movw	r24, r20
    a09c:	01 96       	adiw	r24, 0x01	; 1
    a09e:	90 93 22 05 	sts	0x0522, r25
    a0a2:	80 93 21 05 	sts	0x0521, r24
    a0a6:	ac 01       	movw	r20, r24
					}
				}
				//turnOffGreenLeds();
				//setGreenLed(irCommRxMaxSensor, 1);			

				if(irCommRxMaxSensorIndexTemp>1) {
    a0a8:	80 91 ef 04 	lds	r24, 0x04EF
    a0ac:	82 30       	cpi	r24, 0x02	; 2
    a0ae:	08 f0       	brcs	.+2      	; 0xa0b2 <irCommTasks+0x65c>
    a0b0:	81 e0       	ldi	r24, 0x01	; 1
					irCommRxMaxSensorIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
    a0b2:	e8 2f       	mov	r30, r24
    a0b4:	f0 e0       	ldi	r31, 0x00	; 0
    a0b6:	ee 0f       	add	r30, r30
    a0b8:	ff 1f       	adc	r31, r31
    a0ba:	e7 5d       	subi	r30, 0xD7	; 215
    a0bc:	f4 4f       	sbci	r31, 0xF4	; 244
    a0be:	51 83       	std	Z+1, r21	; 0x01
    a0c0:	40 83       	st	Z, r20
				irCommRxMaxSensorIndexTemp++;
    a0c2:	8f 5f       	subi	r24, 0xFF	; 255
    a0c4:	80 93 ef 04 	sts	0x04EF, r24
					
				if(irCommRxMaxDiffIndexTemp>1) {
    a0c8:	80 91 f0 04 	lds	r24, 0x04F0
    a0cc:	82 30       	cpi	r24, 0x02	; 2
    a0ce:	08 f0       	brcs	.+2      	; 0xa0d2 <irCommTasks+0x67c>
    a0d0:	81 e0       	ldi	r24, 0x01	; 1
					irCommRxMaxDiffIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
    a0d2:	e8 2f       	mov	r30, r24
    a0d4:	f0 e0       	ldi	r31, 0x00	; 0
    a0d6:	ee 0f       	add	r30, r30
    a0d8:	ff 1f       	adc	r31, r31
    a0da:	ee 59       	subi	r30, 0x9E	; 158
    a0dc:	f4 4f       	sbci	r31, 0xF4	; 244
    a0de:	00 91 1f 05 	lds	r16, 0x051F
    a0e2:	10 91 20 05 	lds	r17, 0x0520
    a0e6:	11 83       	std	Z+1, r17	; 0x01
    a0e8:	00 83       	st	Z, r16
				irCommRxMaxDiffIndexTemp++;
    a0ea:	8f 5f       	subi	r24, 0xFF	; 255
    a0ec:	80 93 f0 04 	sts	0x04F0, r24
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    a0f0:	20 91 f3 04 	lds	r18, 0x04F3
    a0f4:	22 30       	cpi	r18, 0x02	; 2
    a0f6:	20 f0       	brcs	.+8      	; 0xa100 <irCommTasks+0x6aa>
					irCommMaxSensorValueCurrIndexTemp = 1;
    a0f8:	81 e0       	ldi	r24, 0x01	; 1
    a0fa:	80 93 f3 04 	sts	0x04F3, r24
    a0fe:	21 e0       	ldi	r18, 0x01	; 1
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    a100:	da 01       	movw	r26, r20
    a102:	aa 0f       	add	r26, r26
    a104:	bb 1f       	adc	r27, r27
    a106:	e2 2f       	mov	r30, r18
    a108:	f0 e0       	ldi	r31, 0x00	; 0
    a10a:	ee 0f       	add	r30, r30
    a10c:	ff 1f       	adc	r31, r31
    a10e:	e8 5c       	subi	r30, 0xC8	; 200
    a110:	fa 4f       	sbci	r31, 0xFA	; 250
    a112:	ca 0f       	add	r28, r26
    a114:	db 1f       	adc	r29, r27
    a116:	88 81       	ld	r24, Y
    a118:	99 81       	ldd	r25, Y+1	; 0x01
    a11a:	91 83       	std	Z+1, r25	; 0x01
    a11c:	80 83       	st	Z, r24
				irCommMaxSensorValueCurrIndexTemp++;
    a11e:	2f 5f       	subi	r18, 0xFF	; 255
    a120:	20 93 f3 04 	sts	0x04F3, r18
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    a124:	20 91 f4 04 	lds	r18, 0x04F4
    a128:	22 30       	cpi	r18, 0x02	; 2
    a12a:	20 f0       	brcs	.+8      	; 0xa134 <irCommTasks+0x6de>
					irCommMinSensorValueCurrIndexTemp = 1;
    a12c:	81 e0       	ldi	r24, 0x01	; 1
    a12e:	80 93 f4 04 	sts	0x04F4, r24
    a132:	21 e0       	ldi	r18, 0x01	; 1
					//updateBlueLed(0);
				}
				irCommMinSensorValueCurrTemp[irCommMinSensorValueCurrIndexTemp] = irCommMinSensorValueCurr[irCommRxMaxSensor];
    a134:	e2 2f       	mov	r30, r18
    a136:	f0 e0       	ldi	r31, 0x00	; 0
    a138:	ee 0f       	add	r30, r30
    a13a:	ff 1f       	adc	r31, r31
    a13c:	e3 5d       	subi	r30, 0xD3	; 211
    a13e:	f4 4f       	sbci	r31, 0xF4	; 244
    a140:	6a 0f       	add	r22, r26
    a142:	7b 1f       	adc	r23, r27
    a144:	db 01       	movw	r26, r22
    a146:	8d 91       	ld	r24, X+
    a148:	9c 91       	ld	r25, X
    a14a:	91 83       	std	Z+1, r25	; 0x01
    a14c:	80 83       	st	Z, r24
				irCommMinSensorValueCurrIndexTemp++;			
    a14e:	2f 5f       	subi	r18, 0xFF	; 255
    a150:	20 93 f4 04 	sts	0x04F4, r18


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a154:	00 35       	cpi	r16, 0x50	; 80
    a156:	11 05       	cpc	r17, r1
    a158:	0c f4       	brge	.+2      	; 0xa15c <irCommTasks+0x706>
    a15a:	fb c3       	rjmp	.+2038   	; 0xa952 <irCommTasks+0xefc>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;	
    a15c:	83 e0       	ldi	r24, 0x03	; 3
    a15e:	80 93 d5 04 	sts	0x04D5, r24
					
					if(irCommStateIndexTemp>13) {
    a162:	90 91 fc 04 	lds	r25, 0x04FC
    a166:	9e 30       	cpi	r25, 0x0E	; 14
    a168:	20 f0       	brcs	.+8      	; 0xa172 <irCommTasks+0x71c>

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;

					if(irCommStateIndexTemp>13) {
						irCommStateIndexTemp = 13;
    a16a:	8d e0       	ldi	r24, 0x0D	; 13
    a16c:	80 93 fc 04 	sts	0x04FC, r24
    a170:	9d e0       	ldi	r25, 0x0D	; 13
						//updateRedLed(0);
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
    a172:	80 91 d5 04 	lds	r24, 0x04D5
    a176:	e9 2f       	mov	r30, r25
    a178:	f0 e0       	ldi	r31, 0x00	; 0
    a17a:	e4 5c       	subi	r30, 0xC4	; 196
    a17c:	fa 4f       	sbci	r31, 0xFA	; 250
    a17e:	80 83       	st	Z, r24
					irCommStateIndexTemp++;
    a180:	9f 5f       	subi	r25, 0xFF	; 255
    a182:	90 93 fc 04 	sts	0x04FC, r25
    a186:	80 cc       	rjmp	.-1792   	; 0x9a88 <irCommTasks+0x32>
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
    a188:	20 91 2c 05 	lds	r18, 0x052C
    a18c:	e2 2f       	mov	r30, r18
    a18e:	f0 e0       	ldi	r31, 0x00	; 0
    a190:	ec 5a       	subi	r30, 0xAC	; 172
    a192:	fa 4f       	sbci	r31, 0xFA	; 250
    a194:	e0 81       	ld	r30, Z
    a196:	e3 30       	cpi	r30, 0x03	; 3
    a198:	09 f4       	brne	.+2      	; 0xa19c <irCommTasks+0x746>
    a19a:	48 c4       	rjmp	.+2192   	; 0xaa2c <irCommTasks+0xfd6>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    a19c:	e2 30       	cpi	r30, 0x02	; 2
    a19e:	11 f1       	breq	.+68     	; 0xa1e4 <irCommTasks+0x78e>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    a1a0:	e1 30       	cpi	r30, 0x01	; 1
    a1a2:	09 f4       	brne	.+2      	; 0xa1a6 <irCommTasks+0x750>
    a1a4:	db c4       	rjmp	.+2486   	; 0xab5c <irCommTasks+0x1106>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    a1a6:	8e e1       	ldi	r24, 0x1E	; 30
    a1a8:	90 e0       	ldi	r25, 0x00	; 0
    a1aa:	90 93 2f 05 	sts	0x052F, r25
    a1ae:	80 93 2e 05 	sts	0x052E, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    a1b2:	88 e0       	ldi	r24, 0x08	; 8
    a1b4:	80 93 30 05 	sts	0x0530, r24
				}
				if(irCommTxBitCount == 0) {
    a1b8:	22 23       	and	r18, r18
    a1ba:	51 f4       	brne	.+20     	; 0xa1d0 <irCommTasks+0x77a>
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
    a1bc:	80 91 34 05 	lds	r24, 0x0534
    a1c0:	88 23       	and	r24, r24
    a1c2:	09 f0       	breq	.+2      	; 0xa1c6 <irCommTasks+0x770>
    a1c4:	43 c4       	rjmp	.+2182   	; 0xaa4c <irCommTasks+0xff6>
						PORTA = 0xAA;
    a1c6:	8a ea       	ldi	r24, 0xAA	; 170
    a1c8:	82 b9       	out	0x02, r24	; 2
					} else {
						PORTA = 0x55;
					}					
					irCommTxPulseState = 1;
    a1ca:	81 e0       	ldi	r24, 0x01	; 1
    a1cc:	80 93 2d 05 	sts	0x052D, r24
				}
				irCommTxDurationCycle = 0;
    a1d0:	10 92 32 05 	sts	0x0532, r1
				irCommTxSwitchCounter = 0;						
    a1d4:	10 92 31 05 	sts	0x0531, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    a1d8:	83 e0       	ldi	r24, 0x03	; 3
    a1da:	80 93 d5 04 	sts	0x04D5, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    a1de:	80 93 24 05 	sts	0x0524, r24
    a1e2:	52 cc       	rjmp	.-1884   	; 0x9a88 <irCommTasks+0x32>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
    a1e4:	88 e7       	ldi	r24, 0x78	; 120
    a1e6:	90 e0       	ldi	r25, 0x00	; 0
    a1e8:	90 93 2f 05 	sts	0x052F, r25
    a1ec:	80 93 2e 05 	sts	0x052E, r24
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
    a1f0:	e0 93 30 05 	sts	0x0530, r30
    a1f4:	e1 cf       	rjmp	.-62     	; 0xa1b8 <irCommTasks+0x762>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    a1f6:	3f 5f       	subi	r19, 0xFF	; 255
    a1f8:	21 e0       	ldi	r18, 0x01	; 1
    a1fa:	bd cd       	rjmp	.-1158   	; 0x9d76 <irCommTasks+0x320>
				irCommState = IRCOMM_RX_IDLE_STATE;

				break;

			case IRCOMM_RX_DEBUG:								
				irCommSendValues = 0;						
    a1fc:	10 92 d8 04 	sts	0x04D8, r1
				while(irCommSendValues==0);	// wait for the start from the uart (computer)
    a200:	80 91 d8 04 	lds	r24, 0x04D8
    a204:	88 23       	and	r24, r24
    a206:	e1 f3       	breq	.-8      	; 0xa200 <irCommTasks+0x7aa>
				usart0Transmit(0xFF, 1);
    a208:	8f ef       	ldi	r24, 0xFF	; 255
    a20a:	61 e0       	ldi	r22, 0x01	; 1
    a20c:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[0],1);
    a210:	80 91 29 0b 	lds	r24, 0x0B29
    a214:	61 e0       	ldi	r22, 0x01	; 1
    a216:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[1],1);
    a21a:	80 91 2b 0b 	lds	r24, 0x0B2B
    a21e:	61 e0       	ldi	r22, 0x01	; 1
    a220:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]&0xFF,1);
    a224:	80 91 62 0b 	lds	r24, 0x0B62
    a228:	61 e0       	ldi	r22, 0x01	; 1
    a22a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]>>8,1);
    a22e:	80 91 63 0b 	lds	r24, 0x0B63
    a232:	61 e0       	ldi	r22, 0x01	; 1
    a234:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]&0xFF,1);
    a238:	80 91 64 0b 	lds	r24, 0x0B64
    a23c:	61 e0       	ldi	r22, 0x01	; 1
    a23e:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]>>8,1);
    a242:	80 91 65 0b 	lds	r24, 0x0B65
    a246:	61 e0       	ldi	r22, 0x01	; 1
    a248:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]&0xFF,1);
    a24c:	80 91 6f 05 	lds	r24, 0x056F
    a250:	61 e0       	ldi	r22, 0x01	; 1
    a252:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
    a256:	80 91 70 05 	lds	r24, 0x0570
    a25a:	61 e0       	ldi	r22, 0x01	; 1
    a25c:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
    a260:	80 91 71 05 	lds	r24, 0x0571
    a264:	61 e0       	ldi	r22, 0x01	; 1
    a266:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
    a26a:	80 91 72 05 	lds	r24, 0x0572
    a26e:	61 e0       	ldi	r22, 0x01	; 1
    a270:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[0],1);
    a274:	80 91 51 05 	lds	r24, 0x0551
    a278:	61 e0       	ldi	r22, 0x01	; 1
    a27a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[1],1);
    a27e:	80 91 52 05 	lds	r24, 0x0552
    a282:	61 e0       	ldi	r22, 0x01	; 1
    a284:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a288:	c0 e0       	ldi	r28, 0x00	; 0
    a28a:	d0 e0       	ldi	r29, 0x00	; 0
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
					irCommTempValue = irCommMaxSensorSignalTemp[i];
    a28c:	fe 01       	movw	r30, r28
    a28e:	e5 59       	subi	r30, 0x95	; 149
    a290:	f7 4f       	sbci	r31, 0xF7	; 247
    a292:	80 81       	ld	r24, Z
    a294:	91 81       	ldd	r25, Z+1	; 0x01
    a296:	80 93 d6 04 	sts	0x04D6, r24
    a29a:	90 93 d7 04 	sts	0x04D7, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    a29e:	61 e0       	ldi	r22, 0x01	; 1
    a2a0:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    a2a4:	80 91 d7 04 	lds	r24, 0x04D7
    a2a8:	61 e0       	ldi	r22, 0x01	; 1
    a2aa:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
    a2ae:	fe 01       	movw	r30, r28
    a2b0:	e9 58       	subi	r30, 0x89	; 137
    a2b2:	fa 4f       	sbci	r31, 0xFA	; 250
    a2b4:	80 81       	ld	r24, Z
    a2b6:	91 81       	ldd	r25, Z+1	; 0x01
    a2b8:	80 93 d6 04 	sts	0x04D6, r24
    a2bc:	90 93 d7 04 	sts	0x04D7, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    a2c0:	61 e0       	ldi	r22, 0x01	; 1
    a2c2:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    a2c6:	80 91 d7 04 	lds	r24, 0x04D7
    a2ca:	61 e0       	ldi	r22, 0x01	; 1
    a2cc:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a2d0:	22 96       	adiw	r28, 0x02	; 2
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
				usart0Transmit(irCommSwitchCountTemp[0],1);
				usart0Transmit(irCommSwitchCountTemp[1],1);
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
    a2d2:	c0 35       	cpi	r28, 0x50	; 80
    a2d4:	d1 05       	cpc	r29, r1
    a2d6:	d1 f6       	brne	.-76     	; 0xa28c <irCommTasks+0x836>
					usart0Transmit(irCommTempValue>>8,1);
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]&0xFF,1);
    a2d8:	80 91 38 05 	lds	r24, 0x0538
    a2dc:	61 e0       	ldi	r22, 0x01	; 1
    a2de:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]>>8,1);
    a2e2:	80 91 39 05 	lds	r24, 0x0539
    a2e6:	61 e0       	ldi	r22, 0x01	; 1
    a2e8:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]&0xFF,1);
    a2ec:	80 91 3a 05 	lds	r24, 0x053A
    a2f0:	61 e0       	ldi	r22, 0x01	; 1
    a2f2:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]>>8,1);
    a2f6:	80 91 3b 05 	lds	r24, 0x053B
    a2fa:	61 e0       	ldi	r22, 0x01	; 1
    a2fc:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]&0xFF,1);
    a300:	80 91 2d 0b 	lds	r24, 0x0B2D
    a304:	61 e0       	ldi	r22, 0x01	; 1
    a306:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]>>8,1);
    a30a:	80 91 2e 0b 	lds	r24, 0x0B2E
    a30e:	61 e0       	ldi	r22, 0x01	; 1
    a310:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]&0xFF,1);
    a314:	80 91 2f 0b 	lds	r24, 0x0B2F
    a318:	61 e0       	ldi	r22, 0x01	; 1
    a31a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]>>8,1);
    a31e:	80 91 30 0b 	lds	r24, 0x0B30
    a322:	61 e0       	ldi	r22, 0x01	; 1
    a324:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[0],1);
    a328:	80 91 7b 0b 	lds	r24, 0x0B7B
    a32c:	61 e0       	ldi	r22, 0x01	; 1
    a32e:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[1],1);
    a332:	80 91 7c 0b 	lds	r24, 0x0B7C
    a336:	61 e0       	ldi	r22, 0x01	; 1
    a338:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[0],1);
    a33c:	80 91 35 0b 	lds	r24, 0x0B35
    a340:	61 e0       	ldi	r22, 0x01	; 1
    a342:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[1],1);
    a346:	80 91 36 0b 	lds	r24, 0x0B36
    a34a:	61 e0       	ldi	r22, 0x01	; 1
    a34c:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]&0xFF,1);
    a350:	80 91 bc 08 	lds	r24, 0x08BC
    a354:	61 e0       	ldi	r22, 0x01	; 1
    a356:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]>>8,1);
    a35a:	80 91 bd 08 	lds	r24, 0x08BD
    a35e:	61 e0       	ldi	r22, 0x01	; 1
    a360:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]&0xFF,1);
    a364:	80 91 be 08 	lds	r24, 0x08BE
    a368:	61 e0       	ldi	r22, 0x01	; 1
    a36a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]>>8,1);
    a36e:	80 91 bf 08 	lds	r24, 0x08BF
    a372:	61 e0       	ldi	r22, 0x01	; 1
    a374:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[0],1);
    a378:	80 91 6c 05 	lds	r24, 0x056C
    a37c:	61 e0       	ldi	r22, 0x01	; 1
    a37e:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[1],1);
    a382:	80 91 6d 05 	lds	r24, 0x056D
    a386:	61 e0       	ldi	r22, 0x01	; 1
    a388:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[0],1);
    a38c:	80 91 c9 05 	lds	r24, 0x05C9
    a390:	61 e0       	ldi	r22, 0x01	; 1
    a392:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[1],1);
    a396:	80 91 ca 05 	lds	r24, 0x05CA
    a39a:	61 e0       	ldi	r22, 0x01	; 1
    a39c:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[0],1);
    a3a0:	80 91 0b 07 	lds	r24, 0x070B
    a3a4:	61 e0       	ldi	r22, 0x01	; 1
    a3a6:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[1],1);
    a3aa:	80 91 0c 07 	lds	r24, 0x070C
    a3ae:	61 e0       	ldi	r22, 0x01	; 1
    a3b0:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[0],1);
    a3b4:	80 91 75 05 	lds	r24, 0x0575
    a3b8:	61 e0       	ldi	r22, 0x01	; 1
    a3ba:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[1],1);
    a3be:	80 91 76 05 	lds	r24, 0x0576
    a3c2:	61 e0       	ldi	r22, 0x01	; 1
    a3c4:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
    a3c8:	80 91 6a 05 	lds	r24, 0x056A
    a3cc:	61 e0       	ldi	r22, 0x01	; 1
    a3ce:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[1],1);
    a3d2:	80 91 6b 05 	lds	r24, 0x056B
    a3d6:	61 e0       	ldi	r22, 0x01	; 1
    a3d8:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
    a3dc:	80 91 3c 05 	lds	r24, 0x053C
    a3e0:	61 e0       	ldi	r22, 0x01	; 1
    a3e2:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a3e6:	80 91 3d 05 	lds	r24, 0x053D
    a3ea:	61 e0       	ldi	r22, 0x01	; 1
    a3ec:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a3f0:	80 91 3e 05 	lds	r24, 0x053E
    a3f4:	61 e0       	ldi	r22, 0x01	; 1
    a3f6:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a3fa:	80 91 3f 05 	lds	r24, 0x053F
    a3fe:	61 e0       	ldi	r22, 0x01	; 1
    a400:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a404:	80 91 40 05 	lds	r24, 0x0540
    a408:	61 e0       	ldi	r22, 0x01	; 1
    a40a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a40e:	80 91 41 05 	lds	r24, 0x0541
    a412:	61 e0       	ldi	r22, 0x01	; 1
    a414:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a418:	80 91 42 05 	lds	r24, 0x0542
    a41c:	61 e0       	ldi	r22, 0x01	; 1
    a41e:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a422:	80 91 43 05 	lds	r24, 0x0543
    a426:	61 e0       	ldi	r22, 0x01	; 1
    a428:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a42c:	80 91 44 05 	lds	r24, 0x0544
    a430:	61 e0       	ldi	r22, 0x01	; 1
    a432:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a436:	80 91 45 05 	lds	r24, 0x0545
    a43a:	61 e0       	ldi	r22, 0x01	; 1
    a43c:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a440:	80 91 46 05 	lds	r24, 0x0546
    a444:	61 e0       	ldi	r22, 0x01	; 1
    a446:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a44a:	80 91 47 05 	lds	r24, 0x0547
    a44e:	61 e0       	ldi	r22, 0x01	; 1
    a450:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a454:	80 91 48 05 	lds	r24, 0x0548
    a458:	61 e0       	ldi	r22, 0x01	; 1
    a45a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a45e:	80 91 49 05 	lds	r24, 0x0549
    a462:	61 e0       	ldi	r22, 0x01	; 1
    a464:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a468:	c7 e9       	ldi	r28, 0x97	; 151
    a46a:	d9 e0       	ldi	r29, 0x09	; 9
				}
				for(i=0; i<200; i++) {
					irCommTempValue = irCommBitsSignalTemp[i];
    a46c:	88 81       	ld	r24, Y
    a46e:	99 81       	ldd	r25, Y+1	; 0x01
    a470:	80 93 d6 04 	sts	0x04D6, r24
    a474:	90 93 d7 04 	sts	0x04D7, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    a478:	61 e0       	ldi	r22, 0x01	; 1
    a47a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    a47e:	80 91 d7 04 	lds	r24, 0x04D7
    a482:	61 e0       	ldi	r22, 0x01	; 1
    a484:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a488:	22 96       	adiw	r28, 0x02	; 2
				usart0Transmit(irCommSyncStateTemp[0],1);
				usart0Transmit(irCommSyncStateTemp[1],1);
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
				}
				for(i=0; i<200; i++) {
    a48a:	9b e0       	ldi	r25, 0x0B	; 11
    a48c:	c7 32       	cpi	r28, 0x27	; 39
    a48e:	d9 07       	cpc	r29, r25
    a490:	69 f7       	brne	.-38     	; 0xa46c <irCommTasks+0xa16>
					irCommTempValue = irCommBitsSignalTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				for(i=0; i<10; i++) {
					usart0Transmit(irCommRxBitReceivedTemp[i],1);
    a492:	80 91 5f 08 	lds	r24, 0x085F
    a496:	61 e0       	ldi	r22, 0x01	; 1
    a498:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a49c:	80 91 60 08 	lds	r24, 0x0860
    a4a0:	61 e0       	ldi	r22, 0x01	; 1
    a4a2:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a4a6:	80 91 61 08 	lds	r24, 0x0861
    a4aa:	61 e0       	ldi	r22, 0x01	; 1
    a4ac:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a4b0:	80 91 62 08 	lds	r24, 0x0862
    a4b4:	61 e0       	ldi	r22, 0x01	; 1
    a4b6:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a4ba:	80 91 63 08 	lds	r24, 0x0863
    a4be:	61 e0       	ldi	r22, 0x01	; 1
    a4c0:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a4c4:	80 91 64 08 	lds	r24, 0x0864
    a4c8:	61 e0       	ldi	r22, 0x01	; 1
    a4ca:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a4ce:	80 91 65 08 	lds	r24, 0x0865
    a4d2:	61 e0       	ldi	r22, 0x01	; 1
    a4d4:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a4d8:	80 91 66 08 	lds	r24, 0x0866
    a4dc:	61 e0       	ldi	r22, 0x01	; 1
    a4de:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a4e2:	80 91 67 08 	lds	r24, 0x0867
    a4e6:	61 e0       	ldi	r22, 0x01	; 1
    a4e8:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
    a4ec:	80 91 68 08 	lds	r24, 0x0868
    a4f0:	61 e0       	ldi	r22, 0x01	; 1
    a4f2:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				}
				usart0Transmit(irCommRxCrc,1);
    a4f6:	80 91 03 05 	lds	r24, 0x0503
    a4fa:	61 e0       	ldi	r22, 0x01	; 1
    a4fc:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxCrcError,1);
    a500:	80 91 13 05 	lds	r24, 0x0513
    a504:	61 e0       	ldi	r22, 0x01	; 1
    a506:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxByte,1);
    a50a:	80 91 14 05 	lds	r24, 0x0514
    a50e:	61 e0       	ldi	r22, 0x01	; 1
    a510:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
				usart0Transmit(irCommRxByteExpected,1);				
    a514:	80 91 17 05 	lds	r24, 0x0517
    a518:	61 e0       	ldi	r22, 0x01	; 1
    a51a:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>

				irCommState = IRCOMM_RX_STOP;
    a51e:	89 e0       	ldi	r24, 0x09	; 9
    a520:	80 93 d5 04 	sts	0x04D5, r24
    a524:	b1 ca       	rjmp	.-2718   	; 0x9a88 <irCommTasks+0x32>

				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    a526:	80 91 69 05 	lds	r24, 0x0569
    a52a:	90 91 03 05 	lds	r25, 0x0503
    a52e:	89 0f       	add	r24, r25
    a530:	90 91 68 05 	lds	r25, 0x0568
    a534:	99 0f       	add	r25, r25
    a536:	89 0f       	add	r24, r25
    a538:	83 70       	andi	r24, 0x03	; 3
    a53a:	80 93 13 05 	sts	0x0513, r24
				if(irCommRxCrcError==0) {
    a53e:	88 23       	and	r24, r24
    a540:	69 f4       	brne	.+26     	; 0xa55c <irCommTasks+0xb06>
					irCommRxLastDataReceived = irCommRxByte;
    a542:	80 91 14 05 	lds	r24, 0x0514
    a546:	80 93 19 05 	sts	0x0519, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    a54a:	90 91 21 05 	lds	r25, 0x0521
    a54e:	90 93 15 02 	sts	0x0215, r25
					irCommRxDataAvailable = 1;
    a552:	00 93 1a 05 	sts	0x051A, r16
					//updateBlueLed(0);
					usart0Transmit(irCommRxByte,1);		
    a556:	61 e0       	ldi	r22, 0x01	; 1
    a558:	0e 94 01 1c 	call	0x3802	; 0x3802 <usart0Transmit>
					//updateBlueLed(255);			
				}
												
				currentProx = 0;
    a55c:	10 92 20 02 	sts	0x0220, r1
				adcSaveDataTo = SKIP_SAMPLE;
    a560:	85 e0       	ldi	r24, 0x05	; 5
    a562:	80 93 b5 02 	sts	0x02B5, r24
				adcSamplingState = 0;
    a566:	10 92 b6 02 	sts	0x02B6, r1
				irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;				
    a56a:	10 92 d4 04 	sts	0x04D4, r1
				} else {
					irCommRxPrevDataReceived = irCommRxLastDataReceived;
				}
				*/

				resetDebugVariables();
    a56e:	0e 94 82 4c 	call	0x9904	; 0x9904 <resetDebugVariables>

				irCommState = IRCOMM_RX_IDLE_STATE;
    a572:	81 e0       	ldi	r24, 0x01	; 1
    a574:	80 93 d5 04 	sts	0x04D5, r24
    a578:	87 ca       	rjmp	.-2802   	; 0x9a88 <irCommTasks+0x32>

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				if((irCommRxStartBitDetected==0) && (irCommEnabled!=irCommEnabledNext)) {
    a57a:	80 91 1c 05 	lds	r24, 0x051C
    a57e:	88 23       	and	r24, r24
    a580:	09 f0       	breq	.+2      	; 0xa584 <irCommTasks+0xb2e>
    a582:	82 ca       	rjmp	.-2812   	; 0x9a88 <irCommTasks+0x32>
    a584:	90 91 d2 04 	lds	r25, 0x04D2
    a588:	80 91 d3 04 	lds	r24, 0x04D3
    a58c:	98 17       	cp	r25, r24
    a58e:	09 f4       	brne	.+2      	; 0xa592 <irCommTasks+0xb3c>
    a590:	7b ca       	rjmp	.-2826   	; 0x9a88 <irCommTasks+0x32>
					if((getTime100MicroSec() - irCommTxLastTransmissionTime) > PAUSE_200_MSEC) {
    a592:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <getTime100MicroSec>
    a596:	20 91 27 05 	lds	r18, 0x0527
    a59a:	30 91 28 05 	lds	r19, 0x0528
    a59e:	40 91 29 05 	lds	r20, 0x0529
    a5a2:	50 91 2a 05 	lds	r21, 0x052A
    a5a6:	62 1b       	sub	r22, r18
    a5a8:	73 0b       	sbc	r23, r19
    a5aa:	84 0b       	sbc	r24, r20
    a5ac:	95 0b       	sbc	r25, r21
    a5ae:	64 58       	subi	r22, 0x84	; 132
    a5b0:	77 40       	sbci	r23, 0x07	; 7
    a5b2:	80 40       	sbci	r24, 0x00	; 0
    a5b4:	90 40       	sbci	r25, 0x00	; 0
    a5b6:	08 f4       	brcc	.+2      	; 0xa5ba <irCommTasks+0xb64>
    a5b8:	67 ca       	rjmp	.-2866   	; 0x9a88 <irCommTasks+0x32>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    a5ba:	82 e0       	ldi	r24, 0x02	; 2
    a5bc:	80 93 d2 04 	sts	0x04D2, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    a5c0:	10 93 d5 04 	sts	0x04D5, r17
    a5c4:	61 ca       	rjmp	.-2878   	; 0x9a88 <irCommTasks+0x32>
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
    a5c6:	80 e0       	ldi	r24, 0x00	; 0
    a5c8:	94 e0       	ldi	r25, 0x04	; 4
    a5ca:	90 93 0b 05 	sts	0x050B, r25
    a5ce:	80 93 0a 05 	sts	0x050A, r24
				irCommTempMax = 0;
    a5d2:	10 92 09 05 	sts	0x0509, r1
    a5d6:	10 92 08 05 	sts	0x0508, r1
				irCommShiftCount = 0;
    a5da:	10 92 0c 05 	sts	0x050C, r1
				irCommComputeShift = 1;												
    a5de:	00 93 0d 05 	sts	0x050D, r16
    a5e2:	c0 90 21 05 	lds	r12, 0x0521
    a5e6:	d0 90 22 05 	lds	r13, 0x0522
    a5ea:	cc 0c       	add	r12, r12
    a5ec:	dd 1c       	adc	r13, r13
    a5ee:	79 e3       	ldi	r23, 0x39	; 57
    a5f0:	a7 2e       	mov	r10, r23
    a5f2:	7b e0       	ldi	r23, 0x0B	; 11
    a5f4:	b7 2e       	mov	r11, r23
    a5f6:	e5 01       	movw	r28, r10
    a5f8:	ee 24       	eor	r14, r14
    a5fa:	ff 24       	eor	r15, r15
    a5fc:	87 01       	movw	r16, r14
    a5fe:	60 90 4d 08 	lds	r6, 0x084D
    a602:	70 90 4e 08 	lds	r7, 0x084E
    a606:	90 90 ed 04 	lds	r9, 0x04ED
    a60a:	88 24       	eor	r8, r8
    a60c:	83 94       	inc	r8
    a60e:	55 24       	eor	r5, r5
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
    a610:	62 e0       	ldi	r22, 0x02	; 2
    a612:	36 2e       	mov	r3, r22
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    a614:	22 24       	eor	r2, r2
    a616:	23 94       	inc	r2
    a618:	0e c0       	rjmp	.+28     	; 0xa636 <irCommTasks+0xbe0>
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    a61a:	f2 e0       	ldi	r31, 0x02	; 2
    a61c:	8f 16       	cp	r8, r31
    a61e:	09 f4       	brne	.+2      	; 0xa622 <irCommTasks+0xbcc>
    a620:	7f c0       	rjmp	.+254    	; 0xa720 <irCommTasks+0xcca>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    a622:	80 e1       	ldi	r24, 0x10	; 16
    a624:	90 e0       	ldi	r25, 0x00	; 0
    a626:	c8 0e       	add	r12, r24
    a628:	d9 1e       	adc	r13, r25
    a62a:	22 96       	adiw	r28, 0x02	; 2
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a62c:	9b e0       	ldi	r25, 0x0B	; 11
    a62e:	c1 36       	cpi	r28, 0x61	; 97
    a630:	d9 07       	cpc	r29, r25
    a632:	09 f4       	brne	.+2      	; 0xa636 <irCommTasks+0xbe0>
    a634:	aa c0       	rjmp	.+340    	; 0xa78a <irCommTasks+0xd34>
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    a636:	f3 01       	movw	r30, r6
    a638:	ec 0d       	add	r30, r12
    a63a:	fd 1d       	adc	r31, r13
    a63c:	20 81       	ld	r18, Z
    a63e:	31 81       	ldd	r19, Z+1	; 0x01
    a640:	39 83       	std	Y+1, r19	; 0x01
    a642:	28 83       	st	Y, r18

					if(irCommMaxSensorSignalIndexTemp>39) {
    a644:	b7 e2       	ldi	r27, 0x27	; 39
    a646:	b9 15       	cp	r27, r9
    a648:	10 f4       	brcc	.+4      	; 0xa64e <irCommTasks+0xbf8>
    a64a:	57 e2       	ldi	r21, 0x27	; 39
    a64c:	95 2e       	mov	r9, r21
						irCommMaxSensorSignalIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
    a64e:	e9 2d       	mov	r30, r9
    a650:	f0 e0       	ldi	r31, 0x00	; 0
    a652:	ee 0f       	add	r30, r30
    a654:	ff 1f       	adc	r31, r31
    a656:	e5 59       	subi	r30, 0x95	; 149
    a658:	f7 4f       	sbci	r31, 0xF7	; 247
    a65a:	31 83       	std	Z+1, r19	; 0x01
    a65c:	20 83       	st	Z, r18
					irCommMaxSensorSignalIndexTemp++;					
    a65e:	93 94       	inc	r9
    a660:	90 92 ed 04 	sts	0x04ED, r9

					irCommProxSum += irCommMaxSensorSignal[i];
    a664:	c9 01       	movw	r24, r18
    a666:	aa 27       	eor	r26, r26
    a668:	97 fd       	sbrc	r25, 7
    a66a:	a0 95       	com	r26
    a66c:	ba 2f       	mov	r27, r26
    a66e:	e8 0e       	add	r14, r24
    a670:	f9 1e       	adc	r15, r25
    a672:	0a 1f       	adc	r16, r26
    a674:	1b 1f       	adc	r17, r27
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    a676:	e1 e0       	ldi	r30, 0x01	; 1
    a678:	8e 16       	cp	r8, r30
    a67a:	79 f6       	brne	.-98     	; 0xa61a <irCommTasks+0xbc4>
						irCommShiftCount++;								
    a67c:	45 2c       	mov	r4, r5
    a67e:	53 94       	inc	r5
    a680:	50 92 0c 05 	sts	0x050C, r5
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    a684:	60 91 0a 05 	lds	r22, 0x050A
    a688:	70 91 0b 05 	lds	r23, 0x050B
    a68c:	26 17       	cp	r18, r22
    a68e:	37 07       	cpc	r19, r23
    a690:	2c f4       	brge	.+10     	; 0xa69c <irCommTasks+0xc46>
							irCommTempMin = irCommMaxSensorSignal[i];
    a692:	30 93 0b 05 	sts	0x050B, r19
    a696:	20 93 0a 05 	sts	0x050A, r18
    a69a:	b9 01       	movw	r22, r18
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    a69c:	40 91 08 05 	lds	r20, 0x0508
    a6a0:	50 91 09 05 	lds	r21, 0x0509
    a6a4:	42 17       	cp	r20, r18
    a6a6:	53 07       	cpc	r21, r19
    a6a8:	2c f4       	brge	.+10     	; 0xa6b4 <irCommTasks+0xc5e>
							irCommTempMax = irCommMaxSensorSignal[i];
    a6aa:	30 93 09 05 	sts	0x0509, r19
    a6ae:	20 93 08 05 	sts	0x0508, r18
    a6b2:	a9 01       	movw	r20, r18
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
    a6b4:	ca 01       	movw	r24, r20
    a6b6:	86 1b       	sub	r24, r22
    a6b8:	97 0b       	sbc	r25, r23
    a6ba:	dc 01       	movw	r26, r24
    a6bc:	80 93 d6 04 	sts	0x04D6, r24
    a6c0:	90 93 d7 04 	sts	0x04D7, r25
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a6c4:	80 35       	cpi	r24, 0x50	; 80
    a6c6:	91 05       	cpc	r25, r1
    a6c8:	0c f4       	brge	.+2      	; 0xa6cc <irCommTasks+0xc76>
    a6ca:	ab cf       	rjmp	.-170    	; 0xa622 <irCommTasks+0xbcc>

							if(irCommStartDiffIndexTemp>1) {
    a6cc:	80 91 f7 04 	lds	r24, 0x04F7
    a6d0:	82 30       	cpi	r24, 0x02	; 2
    a6d2:	08 f0       	brcs	.+2      	; 0xa6d6 <irCommTasks+0xc80>
    a6d4:	81 e0       	ldi	r24, 0x01	; 1
								irCommStartDiffIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
    a6d6:	e8 2f       	mov	r30, r24
    a6d8:	f0 e0       	ldi	r31, 0x00	; 0
    a6da:	ee 0f       	add	r30, r30
    a6dc:	ff 1f       	adc	r31, r31
    a6de:	e4 54       	subi	r30, 0x44	; 68
    a6e0:	f7 4f       	sbci	r31, 0xF7	; 247
    a6e2:	a0 83       	st	Z, r26
    a6e4:	b1 83       	std	Z+1, r27	; 0x01
							irCommStartDiffIndexTemp++;
    a6e6:	8f 5f       	subi	r24, 0xFF	; 255
    a6e8:	80 93 f7 04 	sts	0x04F7, r24
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    a6ec:	24 17       	cp	r18, r20
    a6ee:	35 07       	cpc	r19, r21
    a6f0:	09 f4       	brne	.+2      	; 0xa6f4 <irCommTasks+0xc9e>
    a6f2:	2c c1       	rjmp	.+600    	; 0xa94c <irCommTasks+0xef6>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    a6f4:	26 17       	cp	r18, r22
    a6f6:	37 07       	cpc	r19, r23
    a6f8:	09 f4       	brne	.+2      	; 0xa6fc <irCommTasks+0xca6>
    a6fa:	81 c1       	rjmp	.+770    	; 0xa9fe <irCommTasks+0xfa8>
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
    a6fc:	30 93 0b 05 	sts	0x050B, r19
    a700:	20 93 0a 05 	sts	0x050A, r18
							irCommTempMax = irCommMaxSensorSignal[i];
    a704:	30 93 09 05 	sts	0x0509, r19
    a708:	20 93 08 05 	sts	0x0508, r18
							irCommComputeShift = 2;
    a70c:	30 92 0d 05 	sts	0x050D, r3
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    a710:	40 92 0c 05 	sts	0x050C, r4
							irCommRxStartPeakDuration = 0;
    a714:	10 92 1e 05 	sts	0x051E, r1
    a718:	72 e0       	ldi	r23, 0x02	; 2
    a71a:	87 2e       	mov	r8, r23
    a71c:	54 2c       	mov	r5, r4
    a71e:	81 cf       	rjmp	.-254    	; 0xa622 <irCommTasks+0xbcc>
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    a720:	80 91 1e 05 	lds	r24, 0x051E
    a724:	8f 5f       	subi	r24, 0xFF	; 255
    a726:	80 93 1e 05 	sts	0x051E, r24
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    a72a:	60 91 0a 05 	lds	r22, 0x050A
    a72e:	70 91 0b 05 	lds	r23, 0x050B
    a732:	26 17       	cp	r18, r22
    a734:	37 07       	cpc	r19, r23
    a736:	2c f4       	brge	.+10     	; 0xa742 <irCommTasks+0xcec>
							irCommTempMin = irCommMaxSensorSignal[i];
    a738:	30 93 0b 05 	sts	0x050B, r19
    a73c:	20 93 0a 05 	sts	0x050A, r18
    a740:	b9 01       	movw	r22, r18
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    a742:	40 91 08 05 	lds	r20, 0x0508
    a746:	50 91 09 05 	lds	r21, 0x0509
    a74a:	42 17       	cp	r20, r18
    a74c:	53 07       	cpc	r21, r19
    a74e:	2c f4       	brge	.+10     	; 0xa75a <irCommTasks+0xd04>
							irCommTempMax = irCommMaxSensorSignal[i];
    a750:	30 93 09 05 	sts	0x0509, r19
    a754:	20 93 08 05 	sts	0x0508, r18
    a758:	a9 01       	movw	r20, r18
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a75a:	ca 01       	movw	r24, r20
    a75c:	86 1b       	sub	r24, r22
    a75e:	97 0b       	sbc	r25, r23
    a760:	80 35       	cpi	r24, 0x50	; 80
    a762:	91 05       	cpc	r25, r1
    a764:	0c f4       	brge	.+2      	; 0xa768 <irCommTasks+0xd12>
    a766:	5d cf       	rjmp	.-326    	; 0xa622 <irCommTasks+0xbcc>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    a768:	24 17       	cp	r18, r20
    a76a:	35 07       	cpc	r19, r21
    a76c:	09 f4       	brne	.+2      	; 0xa770 <irCommTasks+0xd1a>
    a76e:	41 c1       	rjmp	.+642    	; 0xa9f2 <irCommTasks+0xf9c>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    a770:	26 17       	cp	r18, r22
    a772:	37 07       	cpc	r19, r23
    a774:	09 f0       	breq	.+2      	; 0xa778 <irCommTasks+0xd22>
    a776:	55 cf       	rjmp	.-342    	; 0xa622 <irCommTasks+0xbcc>
    a778:	80 91 1d 05 	lds	r24, 0x051D
    a77c:	88 23       	and	r24, r24
    a77e:	09 f0       	breq	.+2      	; 0xa782 <irCommTasks+0xd2c>
    a780:	50 cf       	rjmp	.-352    	; 0xa622 <irCommTasks+0xbcc>
								irCommComputeShift = 0;
    a782:	10 92 0d 05 	sts	0x050D, r1
    a786:	88 24       	eor	r8, r8
    a788:	4c cf       	rjmp	.-360    	; 0xa622 <irCommTasks+0xbcc>
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a78a:	b7 01       	movw	r22, r14
    a78c:	c8 01       	movw	r24, r16
    a78e:	e0 92 04 05 	sts	0x0504, r14
    a792:	f0 92 05 05 	sts	0x0505, r15
    a796:	00 93 06 05 	sts	0x0506, r16
    a79a:	10 93 07 05 	sts	0x0507, r17
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    a79e:	20 91 f8 04 	lds	r18, 0x04F8
    a7a2:	22 30       	cpi	r18, 0x02	; 2
    a7a4:	08 f0       	brcs	.+2      	; 0xa7a8 <irCommTasks+0xd52>
    a7a6:	21 e0       	ldi	r18, 0x01	; 1
					irCommComputeShiftIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
    a7a8:	e2 2f       	mov	r30, r18
    a7aa:	f0 e0       	ldi	r31, 0x00	; 0
    a7ac:	e4 59       	subi	r30, 0x94	; 148
    a7ae:	fa 4f       	sbci	r31, 0xFA	; 250
    a7b0:	80 82       	st	Z, r8
				irCommComputeShiftIndexTemp++;
    a7b2:	2f 5f       	subi	r18, 0xFF	; 255
    a7b4:	20 93 f8 04 	sts	0x04F8, r18
				
				if(irCommShiftCountIndexTemp>1) {
    a7b8:	20 91 f5 04 	lds	r18, 0x04F5
    a7bc:	22 30       	cpi	r18, 0x02	; 2
    a7be:	08 f0       	brcs	.+2      	; 0xa7c2 <irCommTasks+0xd6c>
    a7c0:	21 e0       	ldi	r18, 0x01	; 1
					irCommShiftCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
    a7c2:	e2 2f       	mov	r30, r18
    a7c4:	f0 e0       	ldi	r31, 0x00	; 0
    a7c6:	e5 58       	subi	r30, 0x85	; 133
    a7c8:	f4 4f       	sbci	r31, 0xF4	; 244
    a7ca:	50 82       	st	Z, r5
				irCommShiftCountIndexTemp++;
    a7cc:	2f 5f       	subi	r18, 0xFF	; 255
    a7ce:	20 93 f5 04 	sts	0x04F5, r18
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    a7d2:	20 91 f9 04 	lds	r18, 0x04F9
    a7d6:	22 30       	cpi	r18, 0x02	; 2
    a7d8:	08 f0       	brcs	.+2      	; 0xa7dc <irCommTasks+0xd86>
    a7da:	21 e0       	ldi	r18, 0x01	; 1
					irCommRxPeakHighToLowIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
    a7dc:	e2 2f       	mov	r30, r18
    a7de:	f0 e0       	ldi	r31, 0x00	; 0
    a7e0:	e7 53       	subi	r30, 0x37	; 55
    a7e2:	fa 4f       	sbci	r31, 0xFA	; 250
    a7e4:	10 91 1d 05 	lds	r17, 0x051D
    a7e8:	10 83       	st	Z, r17
				irCommRxPeakHighToLowIndexTemp++;
    a7ea:	2f 5f       	subi	r18, 0xFF	; 255
    a7ec:	20 93 f9 04 	sts	0x04F9, r18
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    a7f0:	20 91 fa 04 	lds	r18, 0x04FA
    a7f4:	22 30       	cpi	r18, 0x02	; 2
    a7f6:	08 f0       	brcs	.+2      	; 0xa7fa <irCommTasks+0xda4>
    a7f8:	21 e0       	ldi	r18, 0x01	; 1
					irCommRxStartPeakDurationIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartPeakDurationTemp[irCommRxStartPeakDurationIndexTemp] = irCommRxStartPeakDuration;
    a7fa:	e2 2f       	mov	r30, r18
    a7fc:	f0 e0       	ldi	r31, 0x00	; 0
    a7fe:	e5 5f       	subi	r30, 0xF5	; 245
    a800:	f8 4f       	sbci	r31, 0xF8	; 248
    a802:	00 91 1e 05 	lds	r16, 0x051E
    a806:	00 83       	st	Z, r16
				irCommRxStartPeakDurationIndexTemp++;
    a808:	2f 5f       	subi	r18, 0xFF	; 255
    a80a:	20 93 fa 04 	sts	0x04FA, r18
					
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    a80e:	24 e1       	ldi	r18, 0x14	; 20
    a810:	30 e0       	ldi	r19, 0x00	; 0
    a812:	40 e0       	ldi	r20, 0x00	; 0
    a814:	50 e0       	ldi	r21, 0x00	; 0
    a816:	0e 94 6f 5b 	call	0xb6de	; 0xb6de <__divmodsi4>
    a81a:	a9 01       	movw	r20, r18
    a81c:	30 93 0f 05 	sts	0x050F, r19
    a820:	20 93 0e 05 	sts	0x050E, r18

				if(irCommProxMeanIndexTemp>1) {
    a824:	80 91 f1 04 	lds	r24, 0x04F1
    a828:	82 30       	cpi	r24, 0x02	; 2
    a82a:	08 f0       	brcs	.+2      	; 0xa82e <irCommTasks+0xdd8>
    a82c:	81 e0       	ldi	r24, 0x01	; 1
					irCommProxMeanIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
    a82e:	e8 2f       	mov	r30, r24
    a830:	f0 e0       	ldi	r31, 0x00	; 0
    a832:	ee 0f       	add	r30, r30
    a834:	ff 1f       	adc	r31, r31
    a836:	e1 59       	subi	r30, 0x91	; 145
    a838:	fa 4f       	sbci	r31, 0xFA	; 250
    a83a:	51 83       	std	Z+1, r21	; 0x01
    a83c:	40 83       	st	Z, r20
				irCommProxMeanIndexTemp++;
    a83e:	8f 5f       	subi	r24, 0xFF	; 255
    a840:	80 93 f1 04 	sts	0x04F1, r24
    a844:	30 91 ee 04 	lds	r19, 0x04EE
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
    a848:	67 e2       	ldi	r22, 0x27	; 39
    a84a:	d5 01       	movw	r26, r10
    a84c:	8d 91       	ld	r24, X+
    a84e:	9c 91       	ld	r25, X
    a850:	11 97       	sbiw	r26, 0x01	; 1
    a852:	84 1b       	sub	r24, r20
    a854:	95 0b       	sbc	r25, r21
    a856:	8d 93       	st	X+, r24
    a858:	9c 93       	st	X, r25
    a85a:	27 e2       	ldi	r18, 0x27	; 39
    a85c:	36 17       	cp	r19, r22
    a85e:	08 f4       	brcc	.+2      	; 0xa862 <irCommTasks+0xe0c>
    a860:	23 2f       	mov	r18, r19

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
						irCommMaxSensorSignalFiltIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalFiltTemp[irCommMaxSensorSignalFiltIndexTemp] = irCommMaxSensorSignal[i];
    a862:	e2 2f       	mov	r30, r18
    a864:	f0 e0       	ldi	r31, 0x00	; 0
    a866:	ee 0f       	add	r30, r30
    a868:	ff 1f       	adc	r31, r31
    a86a:	e9 58       	subi	r30, 0x89	; 137
    a86c:	fa 4f       	sbci	r31, 0xFA	; 250
    a86e:	91 83       	std	Z+1, r25	; 0x01
    a870:	80 83       	st	Z, r24
					irCommMaxSensorSignalFiltIndexTemp++;
    a872:	32 2f       	mov	r19, r18
    a874:	3f 5f       	subi	r19, 0xFF	; 255
    a876:	e2 e0       	ldi	r30, 0x02	; 2
    a878:	f0 e0       	ldi	r31, 0x00	; 0
    a87a:	ae 0e       	add	r10, r30
    a87c:	bf 1e       	adc	r11, r31
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a87e:	f1 e6       	ldi	r31, 0x61	; 97
    a880:	af 16       	cp	r10, r31
    a882:	fb e0       	ldi	r31, 0x0B	; 11
    a884:	bf 06       	cpc	r11, r31
    a886:	09 f7       	brne	.-62     	; 0xa84a <irCommTasks+0xdf4>
    a888:	30 93 ee 04 	sts	0x04EE, r19
					irCommMaxSensorSignalFiltIndexTemp++;
					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    a88c:	80 91 39 0b 	lds	r24, 0x0B39
    a890:	90 91 3a 0b 	lds	r25, 0x0B3A
    a894:	18 16       	cp	r1, r24
    a896:	19 06       	cpc	r1, r25
    a898:	0c f0       	brlt	.+2      	; 0xa89c <irCommTasks+0xe46>
    a89a:	5b c1       	rjmp	.+694    	; 0xab52 <irCommTasks+0x10fc>
					irCommSignalState = 1;
    a89c:	81 e0       	ldi	r24, 0x01	; 1
    a89e:	80 93 10 05 	sts	0x0510, r24
    a8a2:	28 2f       	mov	r18, r24
				} else {
					irCommSignalState = -1;
    a8a4:	eb e3       	ldi	r30, 0x3B	; 59
    a8a6:	fb e0       	ldi	r31, 0x0B	; 11
    a8a8:	30 e0       	ldi	r19, 0x00	; 0
    a8aa:	07 c0       	rjmp	.+14     	; 0xa8ba <irCommTasks+0xe64>
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    a8ac:	27 fd       	sbrc	r18, 7
    a8ae:	0f c0       	rjmp	.+30     	; 0xa8ce <irCommTasks+0xe78>
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
							irCommSwitchCount++;
    a8b0:	32 96       	adiw	r30, 0x02	; 2
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a8b2:	8b e0       	ldi	r24, 0x0B	; 11
    a8b4:	e1 36       	cpi	r30, 0x61	; 97
    a8b6:	f8 07       	cpc	r31, r24
    a8b8:	69 f0       	breq	.+26     	; 0xa8d4 <irCommTasks+0xe7e>
					if(irCommMaxSensorSignal[i] > 0) {
    a8ba:	80 81       	ld	r24, Z
    a8bc:	91 81       	ldd	r25, Z+1	; 0x01
    a8be:	18 16       	cp	r1, r24
    a8c0:	19 06       	cpc	r1, r25
    a8c2:	a4 f3       	brlt	.-24     	; 0xa8ac <irCommTasks+0xe56>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    a8c4:	12 16       	cp	r1, r18
    a8c6:	a4 f7       	brge	.-24     	; 0xa8b0 <irCommTasks+0xe5a>
							irCommSignalState = -1;
							irCommSwitchCount++;
    a8c8:	3f 5f       	subi	r19, 0xFF	; 255
    a8ca:	2f ef       	ldi	r18, 0xFF	; 255
    a8cc:	f1 cf       	rjmp	.-30     	; 0xa8b0 <irCommTasks+0xe5a>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    a8ce:	3f 5f       	subi	r19, 0xFF	; 255
    a8d0:	21 e0       	ldi	r18, 0x01	; 1
    a8d2:	ee cf       	rjmp	.-36     	; 0xa8b0 <irCommTasks+0xe5a>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a8d4:	30 93 11 05 	sts	0x0511, r19
    a8d8:	20 93 10 05 	sts	0x0510, r18
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    a8dc:	80 91 f2 04 	lds	r24, 0x04F2
    a8e0:	82 30       	cpi	r24, 0x02	; 2
    a8e2:	08 f0       	brcs	.+2      	; 0xa8e6 <irCommTasks+0xe90>
    a8e4:	81 e0       	ldi	r24, 0x01	; 1
					irCommSwitchCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommSwitchCountTemp[irCommSwitchCountIndexTemp] = irCommSwitchCount;
    a8e6:	e8 2f       	mov	r30, r24
    a8e8:	f0 e0       	ldi	r31, 0x00	; 0
    a8ea:	ef 5a       	subi	r30, 0xAF	; 175
    a8ec:	fa 4f       	sbci	r31, 0xFA	; 250
    a8ee:	30 83       	st	Z, r19
				irCommSwitchCountIndexTemp++;
    a8f0:	8f 5f       	subi	r24, 0xFF	; 255
    a8f2:	80 93 f2 04 	sts	0x04F2, r24
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
    a8f6:	11 30       	cpi	r17, 0x01	; 1
    a8f8:	09 f4       	brne	.+2      	; 0xa8fc <irCommTasks+0xea6>
    a8fa:	03 c1       	rjmp	.+518    	; 0xab02 <irCommTasks+0x10ac>
							resetDebugVariables();				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
    a8fc:	90 91 1c 05 	lds	r25, 0x051C
    a900:	91 30       	cpi	r25, 0x01	; 1
    a902:	09 f4       	brne	.+2      	; 0xa906 <irCommTasks+0xeb0>
    a904:	3a c1       	rjmp	.+628    	; 0xab7a <irCommTasks+0x1124>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    a906:	32 30       	cpi	r19, 0x02	; 2
    a908:	09 f4       	brne	.+2      	; 0xa90c <irCommTasks+0xeb6>
    a90a:	96 c1       	rjmp	.+812    	; 0xac38 <irCommTasks+0x11e2>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    a90c:	31 30       	cpi	r19, 0x01	; 1
    a90e:	09 f4       	brne	.+2      	; 0xa912 <irCommTasks+0xebc>
    a910:	36 c2       	rjmp	.+1132   	; 0xad7e <irCommTasks+0x1328>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							currentProx = 0;
    a912:	10 92 20 02 	sts	0x0220, r1
							adcSaveDataTo = SKIP_SAMPLE;
    a916:	85 e0       	ldi	r24, 0x05	; 5
    a918:	80 93 b5 02 	sts	0x02B5, r24
							adcSamplingState = 0;
    a91c:	10 92 b6 02 	sts	0x02B6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    a920:	10 92 d4 04 	sts	0x04D4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;
    a924:	81 e0       	ldi	r24, 0x01	; 1
    a926:	80 93 d5 04 	sts	0x04D5, r24

							if(irCommSyncStateIndexTemp>1) {
    a92a:	90 91 fd 04 	lds	r25, 0x04FD
    a92e:	92 30       	cpi	r25, 0x02	; 2
    a930:	08 f0       	brcs	.+2      	; 0xa934 <irCommTasks+0xede>
    a932:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 15;
    a934:	e9 2f       	mov	r30, r25
    a936:	f0 e0       	ldi	r31, 0x00	; 0
    a938:	e6 59       	subi	r30, 0x96	; 150
    a93a:	fa 4f       	sbci	r31, 0xFA	; 250
    a93c:	8f e0       	ldi	r24, 0x0F	; 15
    a93e:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    a940:	9f 5f       	subi	r25, 0xFF	; 255
    a942:	90 93 fd 04 	sts	0x04FD, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    a946:	0e 94 82 4c 	call	0x9904	; 0x9904 <resetDebugVariables>
    a94a:	9e c8       	rjmp	.-3780   	; 0x9a88 <irCommTasks+0x32>
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
							irCommStartDiffIndexTemp++;
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    a94c:	10 92 1d 05 	sts	0x051D, r1
    a950:	d5 ce       	rjmp	.-598    	; 0xa6fc <irCommTasks+0xca6>
						}
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
    a952:	80 91 1c 05 	lds	r24, 0x051C
    a956:	81 30       	cpi	r24, 0x01	; 1
    a958:	09 f4       	brne	.+2      	; 0xa95c <irCommTasks+0xf06>
    a95a:	3d c1       	rjmp	.+634    	; 0xabd6 <irCommTasks+0x1180>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    a95c:	10 92 1c 05 	sts	0x051C, r1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					//updateRedLed(0);
					currentProx = 0;
    a960:	10 92 20 02 	sts	0x0220, r1
					adcSaveDataTo = SKIP_SAMPLE;
    a964:	85 e0       	ldi	r24, 0x05	; 5
    a966:	80 93 b5 02 	sts	0x02B5, r24
					adcSamplingState = 0;
    a96a:	10 92 b6 02 	sts	0x02B6, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;					
    a96e:	10 92 d4 04 	sts	0x04D4, r1
					irCommState = IRCOMM_RX_IDLE_STATE;
    a972:	81 e0       	ldi	r24, 0x01	; 1
    a974:	80 93 d5 04 	sts	0x04D5, r24

					//irCommState = IRCOMM_RX_DEBUG;
					//irCommAdcRxState = 12;
					//break;

					resetDebugVariables();
    a978:	0e 94 82 4c 	call	0x9904	; 0x9904 <resetDebugVariables>
    a97c:	85 c8       	rjmp	.-3830   	; 0x9a88 <irCommTasks+0x32>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a97e:	30 93 11 05 	sts	0x0511, r19
    a982:	20 93 10 05 	sts	0x0510, r18
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    a986:	36 30       	cpi	r19, 0x06	; 6
    a988:	08 f4       	brcc	.+2      	; 0xa98c <irCommTasks+0xf36>
    a98a:	63 c0       	rjmp	.+198    	; 0xaa52 <irCommTasks+0xffc>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    a98c:	20 91 12 05 	lds	r18, 0x0512
    a990:	e2 2f       	mov	r30, r18
    a992:	f0 e0       	ldi	r31, 0x00	; 0
    a994:	e0 5a       	subi	r30, 0xA0	; 160
    a996:	fa 4f       	sbci	r31, 0xFA	; 250
    a998:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    a99a:	28 30       	cpi	r18, 0x08	; 8
    a99c:	28 f4       	brcc	.+10     	; 0xa9a8 <irCommTasks+0xf52>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    a99e:	80 91 14 05 	lds	r24, 0x0514
    a9a2:	88 0f       	add	r24, r24
    a9a4:	80 93 14 05 	sts	0x0514, r24
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    a9a8:	90 91 ff 04 	lds	r25, 0x04FF
    a9ac:	9a 30       	cpi	r25, 0x0A	; 10
    a9ae:	20 f0       	brcs	.+8      	; 0xa9b8 <irCommTasks+0xf62>
					irCommRxBitReceivedIndexTemp = 9;
    a9b0:	89 e0       	ldi	r24, 0x09	; 9
    a9b2:	80 93 ff 04 	sts	0x04FF, r24
    a9b6:	99 e0       	ldi	r25, 0x09	; 9
					//updateRedLed(0);
				}
				irCommRxBitReceivedTemp[irCommRxBitReceivedIndexTemp] = irCommRxBitReceived[irCommRxBitCount];
    a9b8:	a9 2f       	mov	r26, r25
    a9ba:	b0 e0       	ldi	r27, 0x00	; 0
    a9bc:	a1 5a       	subi	r26, 0xA1	; 161
    a9be:	b7 4f       	sbci	r27, 0xF7	; 247
    a9c0:	e2 2f       	mov	r30, r18
    a9c2:	f0 e0       	ldi	r31, 0x00	; 0
    a9c4:	e0 5a       	subi	r30, 0xA0	; 160
    a9c6:	fa 4f       	sbci	r31, 0xFA	; 250
    a9c8:	80 81       	ld	r24, Z
    a9ca:	8c 93       	st	X, r24
				irCommRxBitReceivedIndexTemp++;
    a9cc:	9f 5f       	subi	r25, 0xFF	; 255
    a9ce:	90 93 ff 04 	sts	0x04FF, r25

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
    a9d2:	82 2f       	mov	r24, r18
    a9d4:	8f 5f       	subi	r24, 0xFF	; 255
    a9d6:	80 93 12 05 	sts	0x0512, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    a9da:	8a 30       	cpi	r24, 0x0A	; 10
    a9dc:	09 f4       	brne	.+2      	; 0xa9e0 <irCommTasks+0xf8a>
    a9de:	f2 c0       	rjmp	.+484    	; 0xabc4 <irCommTasks+0x116e>
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    a9e0:	85 e0       	ldi	r24, 0x05	; 5
    a9e2:	80 93 d5 04 	sts	0x04D5, r24

					if(irCommStateIndexTemp>13) {
    a9e6:	90 91 fc 04 	lds	r25, 0x04FC
    a9ea:	9e 30       	cpi	r25, 0x0E	; 14
    a9ec:	08 f0       	brcs	.+2      	; 0xa9f0 <irCommTasks+0xf9a>
    a9ee:	bd cb       	rjmp	.-2182   	; 0xa16a <irCommTasks+0x714>
    a9f0:	c0 cb       	rjmp	.-2176   	; 0xa172 <irCommTasks+0x71c>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    a9f2:	80 91 1d 05 	lds	r24, 0x051D
    a9f6:	81 30       	cpi	r24, 0x01	; 1
    a9f8:	09 f0       	breq	.+2      	; 0xa9fc <irCommTasks+0xfa6>
    a9fa:	ba ce       	rjmp	.-652    	; 0xa770 <irCommTasks+0xd1a>
    a9fc:	c2 ce       	rjmp	.-636    	; 0xa782 <irCommTasks+0xd2c>
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    a9fe:	20 92 1d 05 	sts	0x051D, r2
    aa02:	7c ce       	rjmp	.-776    	; 0xa6fc <irCommTasks+0xca6>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    aa04:	2f 5f       	subi	r18, 0xFF	; 255
    aa06:	f7 c8       	rjmp	.-3602   	; 0x9bf6 <irCommTasks+0x1a0>
    aa08:	2f 5f       	subi	r18, 0xFF	; 255
    aa0a:	e8 c8       	rjmp	.-3632   	; 0x9bdc <irCommTasks+0x186>
    aa0c:	2f 5f       	subi	r18, 0xFF	; 255
    aa0e:	d5 c8       	rjmp	.-3670   	; 0x9bba <irCommTasks+0x164>
    aa10:	2f 5f       	subi	r18, 0xFF	; 255
    aa12:	c0 c8       	rjmp	.-3712   	; 0x9b94 <irCommTasks+0x13e>
    aa14:	2f 5f       	subi	r18, 0xFF	; 255
    aa16:	ad c8       	rjmp	.-3750   	; 0x9b72 <irCommTasks+0x11c>
    aa18:	2f 5f       	subi	r18, 0xFF	; 255
    aa1a:	9c c8       	rjmp	.-3784   	; 0x9b54 <irCommTasks+0xfe>
    aa1c:	20 91 2b 05 	lds	r18, 0x052B
    aa20:	2f 5f       	subi	r18, 0xFF	; 255
    aa22:	8b c8       	rjmp	.-3818   	; 0x9b3a <irCommTasks+0xe4>
    aa24:	81 e0       	ldi	r24, 0x01	; 1
    aa26:	80 93 2b 05 	sts	0x052B, r24
    aa2a:	7a c8       	rjmp	.-3852   	; 0x9b20 <irCommTasks+0xca>

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
    aa2c:	80 ef       	ldi	r24, 0xF0	; 240
    aa2e:	90 e0       	ldi	r25, 0x00	; 0
    aa30:	90 93 2f 05 	sts	0x052F, r25
    aa34:	80 93 2e 05 	sts	0x052E, r24
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
    aa38:	81 e0       	ldi	r24, 0x01	; 1
    aa3a:	80 93 30 05 	sts	0x0530, r24
    aa3e:	bc cb       	rjmp	.-2184   	; 0xa1b8 <irCommTasks+0x762>

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
						irCommRxNumReceivingSensors++;
    aa40:	40 91 23 05 	lds	r20, 0x0523
    aa44:	4f 5f       	subi	r20, 0xFF	; 255
    aa46:	40 93 23 05 	sts	0x0523, r20
    aa4a:	c0 c9       	rjmp	.-3200   	; 0x9dcc <irCommTasks+0x376>
				if(irCommTxBitCount == 0) {
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
						PORTA = 0xAA;
					} else {
						PORTA = 0x55;
    aa4c:	85 e5       	ldi	r24, 0x55	; 85
    aa4e:	82 b9       	out	0x02, r24	; 2
    aa50:	bc cb       	rjmp	.-2184   	; 0xa1ca <irCommTasks+0x774>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    aa52:	33 30       	cpi	r19, 0x03	; 3
    aa54:	08 f4       	brcc	.+2      	; 0xaa58 <irCommTasks+0x1002>
    aa56:	84 cf       	rjmp	.-248    	; 0xa960 <irCommTasks+0xf0a>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    aa58:	20 91 12 05 	lds	r18, 0x0512
    aa5c:	e2 2f       	mov	r30, r18
    aa5e:	f0 e0       	ldi	r31, 0x00	; 0
    aa60:	e0 5a       	subi	r30, 0xA0	; 160
    aa62:	fa 4f       	sbci	r31, 0xFA	; 250
    aa64:	81 e0       	ldi	r24, 0x01	; 1
    aa66:	80 83       	st	Z, r24
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    aa68:	28 30       	cpi	r18, 0x08	; 8
    aa6a:	08 f0       	brcs	.+2      	; 0xaa6e <irCommTasks+0x1018>
    aa6c:	9d cf       	rjmp	.-198    	; 0xa9a8 <irCommTasks+0xf52>
						irCommRxCrc++;
    aa6e:	80 91 03 05 	lds	r24, 0x0503
    aa72:	8f 5f       	subi	r24, 0xFF	; 255
    aa74:	80 93 03 05 	sts	0x0503, r24
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    aa78:	80 91 14 05 	lds	r24, 0x0514
    aa7c:	88 0f       	add	r24, r24
						irCommRxByte += 1;
    aa7e:	8f 5f       	subi	r24, 0xFF	; 255
    aa80:	80 93 14 05 	sts	0x0514, r24
    aa84:	91 cf       	rjmp	.-222    	; 0xa9a8 <irCommTasks+0xf52>
								irCommRxMaxSensor = 0;
							}
							i++;
						}
					} else {	// listen from the same sensor when a start bit is detected
						irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    aa86:	40 91 21 05 	lds	r20, 0x0521
    aa8a:	50 91 22 05 	lds	r21, 0x0522
    aa8e:	fa 01       	movw	r30, r20
    aa90:	ee 0f       	add	r30, r30
    aa92:	ff 1f       	adc	r31, r31
    aa94:	de 01       	movw	r26, r28
    aa96:	ae 0f       	add	r26, r30
    aa98:	bf 1f       	adc	r27, r31
    aa9a:	e6 0f       	add	r30, r22
    aa9c:	f7 1f       	adc	r31, r23
    aa9e:	8d 91       	ld	r24, X+
    aaa0:	9c 91       	ld	r25, X
    aaa2:	20 81       	ld	r18, Z
    aaa4:	31 81       	ldd	r19, Z+1	; 0x01
    aaa6:	82 1b       	sub	r24, r18
    aaa8:	93 0b       	sbc	r25, r19
    aaaa:	90 93 20 05 	sts	0x0520, r25
    aaae:	80 93 1f 05 	sts	0x051F, r24
    aab2:	fa ca       	rjmp	.-2572   	; 0xa0a8 <irCommTasks+0x652>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    aab4:	10 92 1c 05 	sts	0x051C, r1
						currentProx = 0;
    aab8:	10 92 20 02 	sts	0x0220, r1
						adcSaveDataTo = SKIP_SAMPLE;
    aabc:	85 e0       	ldi	r24, 0x05	; 5
    aabe:	80 93 b5 02 	sts	0x02B5, r24
						adcSamplingState = 0;
    aac2:	10 92 b6 02 	sts	0x02B6, r1
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    aac6:	10 92 d4 04 	sts	0x04D4, r1
						irCommState = IRCOMM_RX_IDLE_STATE;
    aaca:	81 e0       	ldi	r24, 0x01	; 1
    aacc:	80 93 d5 04 	sts	0x04D5, r24
						resetDebugVariables();
    aad0:	0e 94 82 4c 	call	0x9904	; 0x9904 <resetDebugVariables>
					//}			
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
    aad4:	80 91 21 05 	lds	r24, 0x0521
    aad8:	90 91 22 05 	lds	r25, 0x0522
    aadc:	87 30       	cpi	r24, 0x07	; 7
    aade:	91 05       	cpc	r25, r1
    aae0:	0c f0       	brlt	.+2      	; 0xaae4 <irCommTasks+0x108e>
    aae2:	8d c0       	rjmp	.+282    	; 0xabfe <irCommTasks+0x11a8>
						irCommRxMaxSensor++;
    aae4:	01 96       	adiw	r24, 0x01	; 1
    aae6:	90 93 22 05 	sts	0x0522, r25
    aaea:	80 93 21 05 	sts	0x0521, r24
    aaee:	c0 91 4a 05 	lds	r28, 0x054A
    aaf2:	d0 91 4b 05 	lds	r29, 0x054B
    aaf6:	60 91 36 05 	lds	r22, 0x0536
    aafa:	70 91 37 05 	lds	r23, 0x0537
    aafe:	ac 01       	movw	r20, r24
    ab00:	d3 ca       	rjmp	.-2650   	; 0xa0a8 <irCommTasks+0x652>
				irCommSwitchCountIndexTemp++;
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    ab02:	80 91 1c 05 	lds	r24, 0x051C
    ab06:	81 30       	cpi	r24, 0x01	; 1
    ab08:	09 f4       	brne	.+2      	; 0xab0c <irCommTasks+0x10b6>
    ab0a:	14 c1       	rjmp	.+552    	; 0xad34 <irCommTasks+0x12de>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    ab0c:	32 30       	cpi	r19, 0x02	; 2
    ab0e:	09 f4       	brne	.+2      	; 0xab12 <irCommTasks+0x10bc>
    ab10:	6b c1       	rjmp	.+726    	; 0xade8 <irCommTasks+0x1392>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
    ab12:	31 30       	cpi	r19, 0x01	; 1
    ab14:	09 f4       	brne	.+2      	; 0xab18 <irCommTasks+0x10c2>
    ab16:	88 c1       	rjmp	.+784    	; 0xae28 <irCommTasks+0x13d2>
								irCommState = IRCOMM_RX_IDLE_STATE;

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							currentProx = 0;
    ab18:	10 92 20 02 	sts	0x0220, r1
							adcSaveDataTo = SKIP_SAMPLE;
    ab1c:	85 e0       	ldi	r24, 0x05	; 5
    ab1e:	80 93 b5 02 	sts	0x02B5, r24
							adcSamplingState = 0;
    ab22:	10 92 b6 02 	sts	0x02B6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    ab26:	10 92 d4 04 	sts	0x04D4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    ab2a:	10 93 d5 04 	sts	0x04D5, r17

							if(irCommSyncStateIndexTemp>1) {
    ab2e:	90 91 fd 04 	lds	r25, 0x04FD
    ab32:	92 30       	cpi	r25, 0x02	; 2
    ab34:	08 f0       	brcs	.+2      	; 0xab38 <irCommTasks+0x10e2>
    ab36:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 11;
    ab38:	e9 2f       	mov	r30, r25
    ab3a:	f0 e0       	ldi	r31, 0x00	; 0
    ab3c:	e6 59       	subi	r30, 0x96	; 150
    ab3e:	fa 4f       	sbci	r31, 0xFA	; 250
    ab40:	8b e0       	ldi	r24, 0x0B	; 11
    ab42:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    ab44:	9f 5f       	subi	r25, 0xFF	; 255
    ab46:	90 93 fd 04 	sts	0x04FD, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    ab4a:	0e 94 82 4c 	call	0x9904	; 0x9904 <resetDebugVariables>
    ab4e:	0c 94 44 4d 	jmp	0x9a88	; 0x9a88 <irCommTasks+0x32>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    ab52:	8f ef       	ldi	r24, 0xFF	; 255
    ab54:	80 93 10 05 	sts	0x0510, r24
    ab58:	28 2f       	mov	r18, r24
    ab5a:	a4 ce       	rjmp	.-696    	; 0xa8a4 <irCommTasks+0xe4e>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    ab5c:	8c e3       	ldi	r24, 0x3C	; 60
    ab5e:	90 e0       	ldi	r25, 0x00	; 0
    ab60:	90 93 2f 05 	sts	0x052F, r25
    ab64:	80 93 2e 05 	sts	0x052E, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    ab68:	84 e0       	ldi	r24, 0x04	; 4
    ab6a:	80 93 30 05 	sts	0x0530, r24
    ab6e:	24 cb       	rjmp	.-2488   	; 0xa1b8 <irCommTasks+0x762>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    ab70:	8f ef       	ldi	r24, 0xFF	; 255
    ab72:	80 93 10 05 	sts	0x0510, r24
    ab76:	28 2f       	mov	r18, r24
    ab78:	f8 c8       	rjmp	.-3600   	; 0x9d6a <irCommTasks+0x314>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    ab7a:	32 30       	cpi	r19, 0x02	; 2
    ab7c:	09 f4       	brne	.+2      	; 0xab80 <irCommTasks+0x112a>
    ab7e:	29 c1       	rjmp	.+594    	; 0xadd2 <irCommTasks+0x137c>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    ab80:	31 30       	cpi	r19, 0x01	; 1
    ab82:	09 f4       	brne	.+2      	; 0xab86 <irCommTasks+0x1130>
    ab84:	9a c1       	rjmp	.+820    	; 0xaeba <irCommTasks+0x1464>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    ab86:	10 92 1c 05 	sts	0x051C, r1
							currentProx = 0;
    ab8a:	10 92 20 02 	sts	0x0220, r1
							adcSaveDataTo = SKIP_SAMPLE;
    ab8e:	85 e0       	ldi	r24, 0x05	; 5
    ab90:	80 93 b5 02 	sts	0x02B5, r24
							adcSamplingState = 0;
    ab94:	10 92 b6 02 	sts	0x02B6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    ab98:	10 92 d4 04 	sts	0x04D4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    ab9c:	90 93 d5 04 	sts	0x04D5, r25

							if(irCommSyncStateIndexTemp>1) {
    aba0:	90 91 fd 04 	lds	r25, 0x04FD
    aba4:	92 30       	cpi	r25, 0x02	; 2
    aba6:	08 f0       	brcs	.+2      	; 0xabaa <irCommTasks+0x1154>
    aba8:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 13;
    abaa:	e9 2f       	mov	r30, r25
    abac:	f0 e0       	ldi	r31, 0x00	; 0
    abae:	e6 59       	subi	r30, 0x96	; 150
    abb0:	fa 4f       	sbci	r31, 0xFA	; 250
    abb2:	8d e0       	ldi	r24, 0x0D	; 13
    abb4:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    abb6:	9f 5f       	subi	r25, 0xFF	; 255
    abb8:	90 93 fd 04 	sts	0x04FD, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    abbc:	0e 94 82 4c 	call	0x9904	; 0x9904 <resetDebugVariables>
    abc0:	0c 94 44 4d 	jmp	0x9a88	; 0x9a88 <irCommTasks+0x32>

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    abc4:	87 e0       	ldi	r24, 0x07	; 7
    abc6:	80 93 d5 04 	sts	0x04D5, r24

					if(irCommStateIndexTemp>13) {
    abca:	90 91 fc 04 	lds	r25, 0x04FC
    abce:	9e 30       	cpi	r25, 0x0E	; 14
    abd0:	08 f0       	brcs	.+2      	; 0xabd4 <irCommTasks+0x117e>
    abd2:	cb ca       	rjmp	.-2666   	; 0xa16a <irCommTasks+0x714>
    abd4:	ce ca       	rjmp	.-2660   	; 0xa172 <irCommTasks+0x71c>
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
    abd6:	47 30       	cpi	r20, 0x07	; 7
    abd8:	51 05       	cpc	r21, r1
    abda:	0c f0       	brlt	.+2      	; 0xabde <irCommTasks+0x1188>
    abdc:	f5 c0       	rjmp	.+490    	; 0xadc8 <irCommTasks+0x1372>
							irCommRxMaxSensor++;
    abde:	4f 5f       	subi	r20, 0xFF	; 255
    abe0:	5f 4f       	sbci	r21, 0xFF	; 255
    abe2:	50 93 22 05 	sts	0x0522, r21
    abe6:	40 93 21 05 	sts	0x0521, r20
    abea:	b8 ce       	rjmp	.-656    	; 0xa95c <irCommTasks+0xf06>
					if(irCommRxStartBitDetected==0) {
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    abec:	10 92 22 05 	sts	0x0522, r1
    abf0:	10 92 21 05 	sts	0x0521, r1
    abf4:	40 91 21 05 	lds	r20, 0x0521
    abf8:	50 91 22 05 	lds	r21, 0x0522
    abfc:	5e c9       	rjmp	.-3396   	; 0x9eba <irCommTasks+0x464>
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
    abfe:	10 92 22 05 	sts	0x0522, r1
    ac02:	10 92 21 05 	sts	0x0521, r1
    ac06:	c0 91 4a 05 	lds	r28, 0x054A
    ac0a:	d0 91 4b 05 	lds	r29, 0x054B
    ac0e:	60 91 36 05 	lds	r22, 0x0536
    ac12:	70 91 37 05 	lds	r23, 0x0537
    ac16:	40 e0       	ldi	r20, 0x00	; 0
    ac18:	50 e0       	ldi	r21, 0x00	; 0
    ac1a:	46 ca       	rjmp	.-2932   	; 0xa0a8 <irCommTasks+0x652>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    ac1c:	4f 5f       	subi	r20, 0xFF	; 255
    ac1e:	5f 4f       	sbci	r21, 0xFF	; 255
    ac20:	50 93 22 05 	sts	0x0522, r21
    ac24:	40 93 21 05 	sts	0x0521, r20
    ac28:	86 c9       	rjmp	.-3316   	; 0x9f36 <irCommTasks+0x4e0>
    ac2a:	4f 5f       	subi	r20, 0xFF	; 255
    ac2c:	5f 4f       	sbci	r21, 0xFF	; 255
    ac2e:	50 93 22 05 	sts	0x0522, r21
    ac32:	40 93 21 05 	sts	0x0521, r20
    ac36:	60 c9       	rjmp	.-3392   	; 0x9ef8 <irCommTasks+0x4a2>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    ac38:	90 91 fd 04 	lds	r25, 0x04FD
    ac3c:	92 30       	cpi	r25, 0x02	; 2
    ac3e:	08 f0       	brcs	.+2      	; 0xac42 <irCommTasks+0x11ec>
    ac40:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 1;
    ac42:	e9 2f       	mov	r30, r25
    ac44:	f0 e0       	ldi	r31, 0x00	; 0
    ac46:	e6 59       	subi	r30, 0x96	; 150
    ac48:	fa 4f       	sbci	r31, 0xFA	; 250
    ac4a:	81 e0       	ldi	r24, 0x01	; 1
    ac4c:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    ac4e:	9f 5f       	subi	r25, 0xFF	; 255
    ac50:	90 93 fd 04 	sts	0x04FD, r25

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    ac54:	95 2d       	mov	r25, r5
    ac56:	96 5f       	subi	r25, 0xF6	; 246
    ac58:	90 93 0c 05 	sts	0x050C, r25
							irCommRxPeakHighToLow = 0;
    ac5c:	10 92 1d 05 	sts	0x051D, r1
							irCommRxStartBitDetected = 0;
    ac60:	10 92 1c 05 	sts	0x051C, r1
							irCommSecondBitSkipped = 0;
    ac64:	10 92 15 05 	sts	0x0515, r1
							irCommShiftCounter = 0;
    ac68:	10 92 16 05 	sts	0x0516, r1
							irCommRxBitCount = 0;	
    ac6c:	10 92 12 05 	sts	0x0512, r1
							irCommRxCrc = 0;	
    ac70:	10 92 03 05 	sts	0x0503, r1
							irCommRxByte = 0;
    ac74:	10 92 14 05 	sts	0x0514, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    ac78:	84 e0       	ldi	r24, 0x04	; 4
    ac7a:	80 93 d5 04 	sts	0x04D5, r24
    ac7e:	59 2e       	mov	r5, r25
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    ac80:	90 91 fc 04 	lds	r25, 0x04FC
    ac84:	9e 30       	cpi	r25, 0x0E	; 14
    ac86:	20 f0       	brcs	.+8      	; 0xac90 <irCommTasks+0x123a>
					irCommStateIndexTemp = 13;
    ac88:	8d e0       	ldi	r24, 0x0D	; 13
    ac8a:	80 93 fc 04 	sts	0x04FC, r24
    ac8e:	9d e0       	ldi	r25, 0x0D	; 13
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
    ac90:	80 91 d5 04 	lds	r24, 0x04D5
    ac94:	e9 2f       	mov	r30, r25
    ac96:	f0 e0       	ldi	r31, 0x00	; 0
    ac98:	e4 5c       	subi	r30, 0xC4	; 196
    ac9a:	fa 4f       	sbci	r31, 0xFA	; 250
    ac9c:	80 83       	st	Z, r24
				irCommStateIndexTemp++;
    ac9e:	9f 5f       	subi	r25, 0xFF	; 255
    aca0:	90 93 fc 04 	sts	0x04FC, r25
				
				if(irCommShiftCountFinalIndexTemp>1) {
    aca4:	80 91 f6 04 	lds	r24, 0x04F6
    aca8:	82 30       	cpi	r24, 0x02	; 2
    acaa:	08 f0       	brcs	.+2      	; 0xacae <irCommTasks+0x1258>
    acac:	81 e0       	ldi	r24, 0x01	; 1
					irCommShiftCountFinalIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
    acae:	e8 2f       	mov	r30, r24
    acb0:	f0 e0       	ldi	r31, 0x00	; 0
    acb2:	eb 5c       	subi	r30, 0xCB	; 203
    acb4:	f4 4f       	sbci	r31, 0xF4	; 244
    acb6:	50 82       	st	Z, r5
				irCommShiftCountFinalIndexTemp++;
    acb8:	8f 5f       	subi	r24, 0xFF	; 255
    acba:	80 93 f6 04 	sts	0x04F6, r24
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    acbe:	90 91 fb 04 	lds	r25, 0x04FB
    acc2:	92 30       	cpi	r25, 0x02	; 2
    acc4:	08 f0       	brcs	.+2      	; 0xacc8 <irCommTasks+0x1272>
    acc6:	91 e0       	ldi	r25, 0x01	; 1
					irCommRxStartBitDetectedIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartBitDetectedTemp[irCommRxStartBitDetectedIndexTemp] = irCommRxStartBitDetected;
    acc8:	e9 2f       	mov	r30, r25
    acca:	f0 e0       	ldi	r31, 0x00	; 0
    accc:	eb 58       	subi	r30, 0x8B	; 139
    acce:	fa 4f       	sbci	r31, 0xFA	; 250
    acd0:	80 91 1c 05 	lds	r24, 0x051C
    acd4:	80 83       	st	Z, r24
				irCommRxStartBitDetectedIndexTemp++;			
    acd6:	9f 5f       	subi	r25, 0xFF	; 255
    acd8:	90 93 fb 04 	sts	0x04FB, r25
    acdc:	0c 94 44 4d 	jmp	0x9a88	; 0x9a88 <irCommTasks+0x32>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    ace0:	4f 5f       	subi	r20, 0xFF	; 255
    ace2:	5f 4f       	sbci	r21, 0xFF	; 255
    ace4:	50 93 22 05 	sts	0x0522, r21
    ace8:	40 93 21 05 	sts	0x0521, r20
    acec:	43 c9       	rjmp	.-3450   	; 0x9f74 <irCommTasks+0x51e>
    acee:	4f 5f       	subi	r20, 0xFF	; 255
    acf0:	5f 4f       	sbci	r21, 0xFF	; 255
    acf2:	50 93 22 05 	sts	0x0522, r21
    acf6:	40 93 21 05 	sts	0x0521, r20
    acfa:	5b c9       	rjmp	.-3402   	; 0x9fb2 <irCommTasks+0x55c>
    acfc:	4f 5f       	subi	r20, 0xFF	; 255
    acfe:	5f 4f       	sbci	r21, 0xFF	; 255
    ad00:	50 93 22 05 	sts	0x0522, r21
    ad04:	40 93 21 05 	sts	0x0521, r20
    ad08:	73 c9       	rjmp	.-3354   	; 0x9ff0 <irCommTasks+0x59a>
    ad0a:	4f 5f       	subi	r20, 0xFF	; 255
    ad0c:	5f 4f       	sbci	r21, 0xFF	; 255
    ad0e:	50 93 22 05 	sts	0x0522, r21
    ad12:	40 93 21 05 	sts	0x0521, r20
    ad16:	8b c9       	rjmp	.-3306   	; 0xa02e <irCommTasks+0x5d8>
							} else {
								irCommRxMaxSensor = 0;
    ad18:	10 92 22 05 	sts	0x0522, r1
    ad1c:	10 92 21 05 	sts	0x0521, r1
    ad20:	40 e0       	ldi	r20, 0x00	; 0
    ad22:	50 e0       	ldi	r21, 0x00	; 0
    ad24:	c1 c9       	rjmp	.-3198   	; 0xa0a8 <irCommTasks+0x652>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    ad26:	4f 5f       	subi	r20, 0xFF	; 255
    ad28:	5f 4f       	sbci	r21, 0xFF	; 255
    ad2a:	50 93 22 05 	sts	0x0522, r21
    ad2e:	40 93 21 05 	sts	0x0521, r20
    ad32:	9c c9       	rjmp	.-3272   	; 0xa06c <irCommTasks+0x616>
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    ad34:	32 30       	cpi	r19, 0x02	; 2
    ad36:	09 f4       	brne	.+2      	; 0xad3a <irCommTasks+0x12e4>
    ad38:	f4 c0       	rjmp	.+488    	; 0xaf22 <irCommTasks+0x14cc>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    ad3a:	31 30       	cpi	r19, 0x01	; 1
    ad3c:	09 f4       	brne	.+2      	; 0xad40 <irCommTasks+0x12ea>
    ad3e:	0d c1       	rjmp	.+538    	; 0xaf5a <irCommTasks+0x1504>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    ad40:	10 92 1c 05 	sts	0x051C, r1
							currentProx = 0;
    ad44:	10 92 20 02 	sts	0x0220, r1
							adcSaveDataTo = SKIP_SAMPLE;
    ad48:	85 e0       	ldi	r24, 0x05	; 5
    ad4a:	80 93 b5 02 	sts	0x02B5, r24
							adcSamplingState = 0;
    ad4e:	10 92 b6 02 	sts	0x02B6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    ad52:	10 92 d4 04 	sts	0x04D4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    ad56:	10 93 d5 04 	sts	0x04D5, r17

							if(irCommSyncStateIndexTemp>1) {
    ad5a:	90 91 fd 04 	lds	r25, 0x04FD
    ad5e:	92 30       	cpi	r25, 0x02	; 2
    ad60:	08 f0       	brcs	.+2      	; 0xad64 <irCommTasks+0x130e>
    ad62:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 12;
    ad64:	e9 2f       	mov	r30, r25
    ad66:	f0 e0       	ldi	r31, 0x00	; 0
    ad68:	e6 59       	subi	r30, 0x96	; 150
    ad6a:	fa 4f       	sbci	r31, 0xFA	; 250
    ad6c:	8c e0       	ldi	r24, 0x0C	; 12
    ad6e:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    ad70:	9f 5f       	subi	r25, 0xFF	; 255
    ad72:	90 93 fd 04 	sts	0x04FD, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    ad76:	0e 94 82 4c 	call	0x9904	; 0x9904 <resetDebugVariables>
    ad7a:	0c 94 44 4d 	jmp	0x9a88	; 0x9a88 <irCommTasks+0x32>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    ad7e:	0b 30       	cpi	r16, 0x0B	; 11
    ad80:	08 f4       	brcc	.+2      	; 0xad84 <irCommTasks+0x132e>
    ad82:	76 c0       	rjmp	.+236    	; 0xae70 <irCommTasks+0x141a>
								currentProx = 0;
    ad84:	10 92 20 02 	sts	0x0220, r1
								adcSaveDataTo = SKIP_SAMPLE;
    ad88:	85 e0       	ldi	r24, 0x05	; 5
    ad8a:	80 93 b5 02 	sts	0x02B5, r24
								adcSamplingState = 0;
    ad8e:	10 92 b6 02 	sts	0x02B6, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    ad92:	10 92 d4 04 	sts	0x04D4, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    ad96:	30 93 d5 04 	sts	0x04D5, r19

								if(irCommSyncStateIndexTemp>1) {
    ad9a:	90 91 fd 04 	lds	r25, 0x04FD
    ad9e:	92 30       	cpi	r25, 0x02	; 2
    ada0:	08 f0       	brcs	.+2      	; 0xada4 <irCommTasks+0x134e>
    ada2:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 14;
    ada4:	e9 2f       	mov	r30, r25
    ada6:	f0 e0       	ldi	r31, 0x00	; 0
    ada8:	e6 59       	subi	r30, 0x96	; 150
    adaa:	fa 4f       	sbci	r31, 0xFA	; 250
    adac:	8e e0       	ldi	r24, 0x0E	; 14
    adae:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    adb0:	9f 5f       	subi	r25, 0xFF	; 255
    adb2:	90 93 fd 04 	sts	0x04FD, r25
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateRedLed(0);
								//break;

								resetDebugVariables();				
    adb6:	0e 94 82 4c 	call	0x9904	; 0x9904 <resetDebugVariables>
    adba:	0c 94 44 4d 	jmp	0x9a88	; 0x9a88 <irCommTasks+0x32>
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    adbe:	b0 93 20 05 	sts	0x0520, r27
    adc2:	a0 93 1f 05 	sts	0x051F, r26
    adc6:	70 c9       	rjmp	.-3360   	; 0xa0a8 <irCommTasks+0x652>
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    adc8:	10 92 22 05 	sts	0x0522, r1
    adcc:	10 92 21 05 	sts	0x0521, r1
    add0:	c5 cd       	rjmp	.-1142   	; 0xa95c <irCommTasks+0xf06>
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    add2:	90 91 fd 04 	lds	r25, 0x04FD
    add6:	92 30       	cpi	r25, 0x02	; 2
    add8:	08 f0       	brcs	.+2      	; 0xaddc <irCommTasks+0x1386>
    adda:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    addc:	e9 2f       	mov	r30, r25
    adde:	f0 e0       	ldi	r31, 0x00	; 0
    ade0:	e6 59       	subi	r30, 0x96	; 150
    ade2:	fa 4f       	sbci	r31, 0xFA	; 250
    ade4:	85 e0       	ldi	r24, 0x05	; 5
    ade6:	32 cf       	rjmp	.-412    	; 0xac4c <irCommTasks+0x11f6>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommRxStartPeakDuration<=3) {	// peak due to sensors sampling detected
    ade8:	04 30       	cpi	r16, 0x04	; 4
    adea:	08 f0       	brcs	.+2      	; 0xadee <irCommTasks+0x1398>
    adec:	89 c0       	rjmp	.+274    	; 0xaf00 <irCommTasks+0x14aa>
								currentProx = 0;
    adee:	10 92 20 02 	sts	0x0220, r1
								adcSaveDataTo = SKIP_SAMPLE;
    adf2:	85 e0       	ldi	r24, 0x05	; 5
    adf4:	80 93 b5 02 	sts	0x02B5, r24
								adcSamplingState = 0;
    adf8:	10 92 b6 02 	sts	0x02B6, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    adfc:	10 92 d4 04 	sts	0x04D4, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    ae00:	10 93 d5 04 	sts	0x04D5, r17

								if(irCommSyncStateIndexTemp>1) {
    ae04:	90 91 fd 04 	lds	r25, 0x04FD
    ae08:	92 30       	cpi	r25, 0x02	; 2
    ae0a:	08 f0       	brcs	.+2      	; 0xae0e <irCommTasks+0x13b8>
    ae0c:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 16;
    ae0e:	e9 2f       	mov	r30, r25
    ae10:	f0 e0       	ldi	r31, 0x00	; 0
    ae12:	e6 59       	subi	r30, 0x96	; 150
    ae14:	fa 4f       	sbci	r31, 0xFA	; 250
    ae16:	80 e1       	ldi	r24, 0x10	; 16
    ae18:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    ae1a:	9f 5f       	subi	r25, 0xFF	; 255
    ae1c:	90 93 fd 04 	sts	0x04FD, r25
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateGreenLed(0);
								//break;

								resetDebugVariables();
    ae20:	0e 94 82 4c 	call	0x9904	; 0x9904 <resetDebugVariables>
    ae24:	0c 94 44 4d 	jmp	0x9a88	; 0x9a88 <irCommTasks+0x32>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    ae28:	30 93 1c 05 	sts	0x051C, r19
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    ae2c:	0b 30       	cpi	r16, 0x0B	; 11
    ae2e:	08 f4       	brcc	.+2      	; 0xae32 <irCommTasks+0x13dc>
    ae30:	83 c0       	rjmp	.+262    	; 0xaf38 <irCommTasks+0x14e2>
								if(irCommSyncStateIndexTemp>1) {
    ae32:	90 91 fd 04 	lds	r25, 0x04FD
    ae36:	92 30       	cpi	r25, 0x02	; 2
    ae38:	08 f0       	brcs	.+2      	; 0xae3c <irCommTasks+0x13e6>
    ae3a:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 4;
    ae3c:	e9 2f       	mov	r30, r25
    ae3e:	f0 e0       	ldi	r31, 0x00	; 0
    ae40:	e6 59       	subi	r30, 0x96	; 150
    ae42:	fa 4f       	sbci	r31, 0xFA	; 250
    ae44:	84 e0       	ldi	r24, 0x04	; 4
    ae46:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    ae48:	9f 5f       	subi	r25, 0xFF	; 255
    ae4a:	90 93 fd 04 	sts	0x04FD, r25

								//irCommShiftCount = irCommShiftCount;
								irCommRxPeakHighToLow = 0;
    ae4e:	10 92 1d 05 	sts	0x051D, r1
								irCommRxStartBitDetected = 0;
    ae52:	10 92 1c 05 	sts	0x051C, r1
								irCommSecondBitSkipped = 0;
    ae56:	10 92 15 05 	sts	0x0515, r1
								irCommShiftCounter = 0;
    ae5a:	10 92 16 05 	sts	0x0516, r1
								irCommRxBitCount = 0;	
    ae5e:	10 92 12 05 	sts	0x0512, r1
								irCommRxCrc = 0;	
    ae62:	10 92 03 05 	sts	0x0503, r1
								irCommRxByte = 0;
    ae66:	10 92 14 05 	sts	0x0514, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    ae6a:	80 93 d5 04 	sts	0x04D5, r24
    ae6e:	08 cf       	rjmp	.-496    	; 0xac80 <irCommTasks+0x122a>
								//break;

								resetDebugVariables();				
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    ae70:	90 91 fd 04 	lds	r25, 0x04FD
    ae74:	92 30       	cpi	r25, 0x02	; 2
    ae76:	08 f0       	brcs	.+2      	; 0xae7a <irCommTasks+0x1424>
    ae78:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 7;
    ae7a:	e9 2f       	mov	r30, r25
    ae7c:	f0 e0       	ldi	r31, 0x00	; 0
    ae7e:	e6 59       	subi	r30, 0x96	; 150
    ae80:	fa 4f       	sbci	r31, 0xFA	; 250
    ae82:	87 e0       	ldi	r24, 0x07	; 7
    ae84:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    ae86:	9f 5f       	subi	r25, 0xFF	; 255
    ae88:	90 93 fd 04 	sts	0x04FD, r25

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
    ae8c:	84 e1       	ldi	r24, 0x14	; 20
    ae8e:	80 93 0c 05 	sts	0x050C, r24
								irCommRxPeakHighToLow = 0;
    ae92:	10 92 1d 05 	sts	0x051D, r1
								irCommRxStartBitDetected = 0;
    ae96:	10 92 1c 05 	sts	0x051C, r1
								irCommSecondBitSkipped = 0;
    ae9a:	10 92 15 05 	sts	0x0515, r1
								irCommShiftCounter = 0;
    ae9e:	10 92 16 05 	sts	0x0516, r1
								irCommRxBitCount = 0;	
    aea2:	10 92 12 05 	sts	0x0512, r1
								irCommRxCrc = 0;	
    aea6:	10 92 03 05 	sts	0x0503, r1
								irCommRxByte = 0;
    aeaa:	10 92 14 05 	sts	0x0514, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    aeae:	84 e0       	ldi	r24, 0x04	; 4
    aeb0:	80 93 d5 04 	sts	0x04D5, r24
    aeb4:	04 e1       	ldi	r16, 0x14	; 20
    aeb6:	50 2e       	mov	r5, r16
    aeb8:	e3 ce       	rjmp	.-570    	; 0xac80 <irCommTasks+0x122a>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    aeba:	90 91 fd 04 	lds	r25, 0x04FD
    aebe:	92 30       	cpi	r25, 0x02	; 2
    aec0:	08 f0       	brcs	.+2      	; 0xaec4 <irCommTasks+0x146e>
    aec2:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 8;
    aec4:	e9 2f       	mov	r30, r25
    aec6:	f0 e0       	ldi	r31, 0x00	; 0
    aec8:	e6 59       	subi	r30, 0x96	; 150
    aeca:	fa 4f       	sbci	r31, 0xFA	; 250
    aecc:	88 e0       	ldi	r24, 0x08	; 8
    aece:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    aed0:	9f 5f       	subi	r25, 0xFF	; 255
    aed2:	90 93 fd 04 	sts	0x04FD, r25

							irCommShiftCount = 0;
    aed6:	10 92 0c 05 	sts	0x050C, r1
							irCommRxPeakHighToLow = 0;
    aeda:	10 92 1d 05 	sts	0x051D, r1
							irCommRxStartBitDetected = 0;
    aede:	10 92 1c 05 	sts	0x051C, r1
							irCommSecondBitSkipped = 0;
    aee2:	10 92 15 05 	sts	0x0515, r1
							irCommShiftCounter = 0;
    aee6:	10 92 16 05 	sts	0x0516, r1
							irCommRxBitCount = 0;	
    aeea:	10 92 12 05 	sts	0x0512, r1
							irCommRxCrc = 0;	
    aeee:	10 92 03 05 	sts	0x0503, r1
							irCommRxByte = 0;
    aef2:	10 92 14 05 	sts	0x0514, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    aef6:	85 e0       	ldi	r24, 0x05	; 5
    aef8:	80 93 d5 04 	sts	0x04D5, r24
    aefc:	55 24       	eor	r5, r5
    aefe:	c0 ce       	rjmp	.-640    	; 0xac80 <irCommTasks+0x122a>
								//break;

								resetDebugVariables();
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    af00:	90 91 fd 04 	lds	r25, 0x04FD
    af04:	92 30       	cpi	r25, 0x02	; 2
    af06:	08 f0       	brcs	.+2      	; 0xaf0a <irCommTasks+0x14b4>
    af08:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 3;
    af0a:	e9 2f       	mov	r30, r25
    af0c:	f0 e0       	ldi	r31, 0x00	; 0
    af0e:	e6 59       	subi	r30, 0x96	; 150
    af10:	fa 4f       	sbci	r31, 0xFA	; 250
    af12:	83 e0       	ldi	r24, 0x03	; 3
    af14:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    af16:	9f 5f       	subi	r25, 0xFF	; 255
    af18:	90 93 fd 04 	sts	0x04FD, r25

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    af1c:	95 2d       	mov	r25, r5
    af1e:	9c 5e       	subi	r25, 0xEC	; 236
    af20:	9b ce       	rjmp	.-714    	; 0xac58 <irCommTasks+0x1202>

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    af22:	90 91 fd 04 	lds	r25, 0x04FD
    af26:	92 30       	cpi	r25, 0x02	; 2
    af28:	08 f0       	brcs	.+2      	; 0xaf2c <irCommTasks+0x14d6>
    af2a:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 6;
    af2c:	e9 2f       	mov	r30, r25
    af2e:	f0 e0       	ldi	r31, 0x00	; 0
    af30:	e6 59       	subi	r30, 0x96	; 150
    af32:	fa 4f       	sbci	r31, 0xFA	; 250
    af34:	86 e0       	ldi	r24, 0x06	; 6
    af36:	cb cf       	rjmp	.-106    	; 0xaece <irCommTasks+0x1478>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							} else {
								currentProx = 0;
    af38:	10 92 20 02 	sts	0x0220, r1
								adcSaveDataTo = SKIP_SAMPLE;
    af3c:	85 e0       	ldi	r24, 0x05	; 5
    af3e:	80 93 b5 02 	sts	0x02B5, r24
								adcSamplingState = 0;
    af42:	10 92 b6 02 	sts	0x02B6, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    af46:	10 92 d4 04 	sts	0x04D4, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    af4a:	30 93 d5 04 	sts	0x04D5, r19

								irCommSyncStateIndexTemp++;
    af4e:	80 91 fd 04 	lds	r24, 0x04FD
    af52:	8f 5f       	subi	r24, 0xFF	; 255
    af54:	80 93 fd 04 	sts	0x04FD, r24
    af58:	93 ce       	rjmp	.-730    	; 0xac80 <irCommTasks+0x122a>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    af5a:	90 91 fd 04 	lds	r25, 0x04FD
    af5e:	92 30       	cpi	r25, 0x02	; 2
    af60:	08 f0       	brcs	.+2      	; 0xaf64 <irCommTasks+0x150e>
    af62:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 2;
    af64:	e9 2f       	mov	r30, r25
    af66:	f0 e0       	ldi	r31, 0x00	; 0
    af68:	e6 59       	subi	r30, 0x96	; 150
    af6a:	fa 4f       	sbci	r31, 0xFA	; 250
    af6c:	82 e0       	ldi	r24, 0x02	; 2
    af6e:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    af70:	9f 5f       	subi	r25, 0xFF	; 255
    af72:	90 93 fd 04 	sts	0x04FD, r25

							//irCommShiftCount = irCommShiftCount;
							irCommRxPeakHighToLow = 0;
    af76:	10 92 1d 05 	sts	0x051D, r1
							irCommRxStartBitDetected = 0;
    af7a:	10 92 1c 05 	sts	0x051C, r1
							irCommSecondBitSkipped = 0;
    af7e:	10 92 15 05 	sts	0x0515, r1
							irCommShiftCounter = 0;
    af82:	10 92 16 05 	sts	0x0516, r1
							irCommRxBitCount = 0;	
    af86:	10 92 12 05 	sts	0x0512, r1
							irCommRxCrc = 0;	
    af8a:	10 92 03 05 	sts	0x0503, r1
							irCommRxByte = 0;
    af8e:	10 92 14 05 	sts	0x0514, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    af92:	84 e0       	ldi	r24, 0x04	; 4
    af94:	80 93 d5 04 	sts	0x04D5, r24
    af98:	73 ce       	rjmp	.-794    	; 0xac80 <irCommTasks+0x122a>

0000af9a <irCommInitVars>:
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    af9a:	e0 91 37 0b 	lds	r30, 0x0B37
    af9e:	f0 91 38 0b 	lds	r31, 0x0B38
    afa2:	80 e1       	ldi	r24, 0x10	; 16
    afa4:	df 01       	movw	r26, r30
    afa6:	1d 92       	st	X+, r1
    afa8:	8a 95       	dec	r24
    afaa:	e9 f7       	brne	.-6      	; 0xafa6 <irCommInitVars+0xc>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    afac:	80 91 c7 05 	lds	r24, 0x05C7
    afb0:	90 91 c8 05 	lds	r25, 0x05C8
    afb4:	6f ef       	ldi	r22, 0xFF	; 255
    afb6:	70 e0       	ldi	r23, 0x00	; 0
    afb8:	40 e1       	ldi	r20, 0x10	; 16
    afba:	50 e0       	ldi	r21, 0x00	; 0
    afbc:	0e 94 17 5c 	call	0xb82e	; 0xb82e <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    afc0:	10 92 d4 04 	sts	0x04D4, r1
}
    afc4:	08 95       	ret

0000afc6 <irCommInit>:

void irCommInit() {
	irCommProxValuesAdc = irCommProxValuesBuff1;
    afc6:	8b ec       	ldi	r24, 0xCB	; 203
    afc8:	95 e0       	ldi	r25, 0x05	; 5
    afca:	90 93 6a 08 	sts	0x086A, r25
    afce:	80 93 69 08 	sts	0x0869, r24
	irCommProxValuesCurr = irCommProxValuesBuff2;
    afd2:	8d e0       	ldi	r24, 0x0D	; 13
    afd4:	97 e0       	ldi	r25, 0x07	; 7
    afd6:	90 93 4e 08 	sts	0x084E, r25
    afda:	80 93 4d 08 	sts	0x084D, r24
	irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    afde:	e8 e7       	ldi	r30, 0x78	; 120
    afe0:	f9 e0       	ldi	r31, 0x09	; 9
    afe2:	f0 93 38 0b 	sts	0x0B38, r31
    afe6:	e0 93 37 0b 	sts	0x0B37, r30
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    afea:	86 e6       	ldi	r24, 0x66	; 102
    afec:	9b e0       	ldi	r25, 0x0B	; 11
    afee:	90 93 4b 05 	sts	0x054B, r25
    aff2:	80 93 4a 05 	sts	0x054A, r24
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    aff6:	8f e4       	ldi	r24, 0x4F	; 79
    aff8:	98 e0       	ldi	r25, 0x08	; 8
    affa:	90 93 c8 05 	sts	0x05C8, r25
    affe:	80 93 c7 05 	sts	0x05C7, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    b002:	22 ed       	ldi	r18, 0xD2	; 210
    b004:	38 e0       	ldi	r19, 0x08	; 8
    b006:	30 93 37 05 	sts	0x0537, r19
    b00a:	20 93 36 05 	sts	0x0536, r18
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    b00e:	20 e1       	ldi	r18, 0x10	; 16
    b010:	df 01       	movw	r26, r30
    b012:	1d 92       	st	X+, r1
    b014:	2a 95       	dec	r18
    b016:	e9 f7       	brne	.-6      	; 0xb012 <irCommInit+0x4c>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    b018:	6f ef       	ldi	r22, 0xFF	; 255
    b01a:	70 e0       	ldi	r23, 0x00	; 0
    b01c:	40 e1       	ldi	r20, 0x10	; 16
    b01e:	50 e0       	ldi	r21, 0x00	; 0
    b020:	0e 94 17 5c 	call	0xb82e	; 0xb82e <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    b024:	10 92 d4 04 	sts	0x04D4, r1
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    b028:	81 e0       	ldi	r24, 0x01	; 1
    b02a:	80 93 d2 04 	sts	0x04D2, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    b02e:	80 93 d5 04 	sts	0x04D5, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    b032:	80 93 d3 04 	sts	0x04D3, r24
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
	irCommInitVars();
	irCommInitReceiver();
}
    b036:	08 95       	ret

0000b038 <__subsf3>:
    b038:	50 58       	subi	r21, 0x80	; 128

0000b03a <__addsf3>:
    b03a:	bb 27       	eor	r27, r27
    b03c:	aa 27       	eor	r26, r26
    b03e:	0e d0       	rcall	.+28     	; 0xb05c <__addsf3x>
    b040:	27 c2       	rjmp	.+1102   	; 0xb490 <__fp_round>
    b042:	f0 d1       	rcall	.+992    	; 0xb424 <__fp_pscA>
    b044:	30 f0       	brcs	.+12     	; 0xb052 <__addsf3+0x18>
    b046:	f5 d1       	rcall	.+1002   	; 0xb432 <__fp_pscB>
    b048:	20 f0       	brcs	.+8      	; 0xb052 <__addsf3+0x18>
    b04a:	31 f4       	brne	.+12     	; 0xb058 <__addsf3+0x1e>
    b04c:	9f 3f       	cpi	r25, 0xFF	; 255
    b04e:	11 f4       	brne	.+4      	; 0xb054 <__addsf3+0x1a>
    b050:	1e f4       	brtc	.+6      	; 0xb058 <__addsf3+0x1e>
    b052:	c0 c1       	rjmp	.+896    	; 0xb3d4 <__fp_nan>
    b054:	0e f4       	brtc	.+2      	; 0xb058 <__addsf3+0x1e>
    b056:	e0 95       	com	r30
    b058:	e7 fb       	bst	r30, 7
    b05a:	b6 c1       	rjmp	.+876    	; 0xb3c8 <__fp_inf>

0000b05c <__addsf3x>:
    b05c:	e9 2f       	mov	r30, r25
    b05e:	3a d2       	rcall	.+1140   	; 0xb4d4 <__fp_split3>
    b060:	80 f3       	brcs	.-32     	; 0xb042 <__addsf3+0x8>
    b062:	ba 17       	cp	r27, r26
    b064:	62 07       	cpc	r22, r18
    b066:	73 07       	cpc	r23, r19
    b068:	84 07       	cpc	r24, r20
    b06a:	95 07       	cpc	r25, r21
    b06c:	18 f0       	brcs	.+6      	; 0xb074 <__addsf3x+0x18>
    b06e:	71 f4       	brne	.+28     	; 0xb08c <__addsf3x+0x30>
    b070:	9e f5       	brtc	.+102    	; 0xb0d8 <__addsf3x+0x7c>
    b072:	52 c2       	rjmp	.+1188   	; 0xb518 <__fp_zero>
    b074:	0e f4       	brtc	.+2      	; 0xb078 <__addsf3x+0x1c>
    b076:	e0 95       	com	r30
    b078:	0b 2e       	mov	r0, r27
    b07a:	ba 2f       	mov	r27, r26
    b07c:	a0 2d       	mov	r26, r0
    b07e:	0b 01       	movw	r0, r22
    b080:	b9 01       	movw	r22, r18
    b082:	90 01       	movw	r18, r0
    b084:	0c 01       	movw	r0, r24
    b086:	ca 01       	movw	r24, r20
    b088:	a0 01       	movw	r20, r0
    b08a:	11 24       	eor	r1, r1
    b08c:	ff 27       	eor	r31, r31
    b08e:	59 1b       	sub	r21, r25
    b090:	99 f0       	breq	.+38     	; 0xb0b8 <__addsf3x+0x5c>
    b092:	59 3f       	cpi	r21, 0xF9	; 249
    b094:	50 f4       	brcc	.+20     	; 0xb0aa <__addsf3x+0x4e>
    b096:	50 3e       	cpi	r21, 0xE0	; 224
    b098:	68 f1       	brcs	.+90     	; 0xb0f4 <__addsf3x+0x98>
    b09a:	1a 16       	cp	r1, r26
    b09c:	f0 40       	sbci	r31, 0x00	; 0
    b09e:	a2 2f       	mov	r26, r18
    b0a0:	23 2f       	mov	r18, r19
    b0a2:	34 2f       	mov	r19, r20
    b0a4:	44 27       	eor	r20, r20
    b0a6:	58 5f       	subi	r21, 0xF8	; 248
    b0a8:	f3 cf       	rjmp	.-26     	; 0xb090 <__addsf3x+0x34>
    b0aa:	46 95       	lsr	r20
    b0ac:	37 95       	ror	r19
    b0ae:	27 95       	ror	r18
    b0b0:	a7 95       	ror	r26
    b0b2:	f0 40       	sbci	r31, 0x00	; 0
    b0b4:	53 95       	inc	r21
    b0b6:	c9 f7       	brne	.-14     	; 0xb0aa <__addsf3x+0x4e>
    b0b8:	7e f4       	brtc	.+30     	; 0xb0d8 <__addsf3x+0x7c>
    b0ba:	1f 16       	cp	r1, r31
    b0bc:	ba 0b       	sbc	r27, r26
    b0be:	62 0b       	sbc	r22, r18
    b0c0:	73 0b       	sbc	r23, r19
    b0c2:	84 0b       	sbc	r24, r20
    b0c4:	ba f0       	brmi	.+46     	; 0xb0f4 <__addsf3x+0x98>
    b0c6:	91 50       	subi	r25, 0x01	; 1
    b0c8:	a1 f0       	breq	.+40     	; 0xb0f2 <__addsf3x+0x96>
    b0ca:	ff 0f       	add	r31, r31
    b0cc:	bb 1f       	adc	r27, r27
    b0ce:	66 1f       	adc	r22, r22
    b0d0:	77 1f       	adc	r23, r23
    b0d2:	88 1f       	adc	r24, r24
    b0d4:	c2 f7       	brpl	.-16     	; 0xb0c6 <__addsf3x+0x6a>
    b0d6:	0e c0       	rjmp	.+28     	; 0xb0f4 <__addsf3x+0x98>
    b0d8:	ba 0f       	add	r27, r26
    b0da:	62 1f       	adc	r22, r18
    b0dc:	73 1f       	adc	r23, r19
    b0de:	84 1f       	adc	r24, r20
    b0e0:	48 f4       	brcc	.+18     	; 0xb0f4 <__addsf3x+0x98>
    b0e2:	87 95       	ror	r24
    b0e4:	77 95       	ror	r23
    b0e6:	67 95       	ror	r22
    b0e8:	b7 95       	ror	r27
    b0ea:	f7 95       	ror	r31
    b0ec:	9e 3f       	cpi	r25, 0xFE	; 254
    b0ee:	08 f0       	brcs	.+2      	; 0xb0f2 <__addsf3x+0x96>
    b0f0:	b3 cf       	rjmp	.-154    	; 0xb058 <__addsf3+0x1e>
    b0f2:	93 95       	inc	r25
    b0f4:	88 0f       	add	r24, r24
    b0f6:	08 f0       	brcs	.+2      	; 0xb0fa <__addsf3x+0x9e>
    b0f8:	99 27       	eor	r25, r25
    b0fa:	ee 0f       	add	r30, r30
    b0fc:	97 95       	ror	r25
    b0fe:	87 95       	ror	r24
    b100:	08 95       	ret
    b102:	90 d1       	rcall	.+800    	; 0xb424 <__fp_pscA>
    b104:	58 f0       	brcs	.+22     	; 0xb11c <__addsf3x+0xc0>
    b106:	80 e8       	ldi	r24, 0x80	; 128
    b108:	91 e0       	ldi	r25, 0x01	; 1
    b10a:	09 f4       	brne	.+2      	; 0xb10e <__addsf3x+0xb2>
    b10c:	9e ef       	ldi	r25, 0xFE	; 254
    b10e:	91 d1       	rcall	.+802    	; 0xb432 <__fp_pscB>
    b110:	28 f0       	brcs	.+10     	; 0xb11c <__addsf3x+0xc0>
    b112:	40 e8       	ldi	r20, 0x80	; 128
    b114:	51 e0       	ldi	r21, 0x01	; 1
    b116:	59 f4       	brne	.+22     	; 0xb12e <atan2+0xe>
    b118:	5e ef       	ldi	r21, 0xFE	; 254
    b11a:	09 c0       	rjmp	.+18     	; 0xb12e <atan2+0xe>
    b11c:	5b c1       	rjmp	.+694    	; 0xb3d4 <__fp_nan>
    b11e:	fc c1       	rjmp	.+1016   	; 0xb518 <__fp_zero>

0000b120 <atan2>:
    b120:	e9 2f       	mov	r30, r25
    b122:	e0 78       	andi	r30, 0x80	; 128
    b124:	d7 d1       	rcall	.+942    	; 0xb4d4 <__fp_split3>
    b126:	68 f3       	brcs	.-38     	; 0xb102 <__addsf3x+0xa6>
    b128:	09 2e       	mov	r0, r25
    b12a:	05 2a       	or	r0, r21
    b12c:	c1 f3       	breq	.-16     	; 0xb11e <__addsf3x+0xc2>
    b12e:	26 17       	cp	r18, r22
    b130:	37 07       	cpc	r19, r23
    b132:	48 07       	cpc	r20, r24
    b134:	59 07       	cpc	r21, r25
    b136:	38 f0       	brcs	.+14     	; 0xb146 <atan2+0x26>
    b138:	0e 2e       	mov	r0, r30
    b13a:	07 f8       	bld	r0, 7
    b13c:	e0 25       	eor	r30, r0
    b13e:	69 f0       	breq	.+26     	; 0xb15a <atan2+0x3a>
    b140:	e0 25       	eor	r30, r0
    b142:	e0 64       	ori	r30, 0x40	; 64
    b144:	0a c0       	rjmp	.+20     	; 0xb15a <atan2+0x3a>
    b146:	ef 63       	ori	r30, 0x3F	; 63
    b148:	07 f8       	bld	r0, 7
    b14a:	00 94       	com	r0
    b14c:	07 fa       	bst	r0, 7
    b14e:	db 01       	movw	r26, r22
    b150:	b9 01       	movw	r22, r18
    b152:	9d 01       	movw	r18, r26
    b154:	dc 01       	movw	r26, r24
    b156:	ca 01       	movw	r24, r20
    b158:	ad 01       	movw	r20, r26
    b15a:	ef 93       	push	r30
    b15c:	4a d0       	rcall	.+148    	; 0xb1f2 <__divsf3_pse>
    b15e:	98 d1       	rcall	.+816    	; 0xb490 <__fp_round>
    b160:	0a d0       	rcall	.+20     	; 0xb176 <atan>
    b162:	5f 91       	pop	r21
    b164:	55 23       	and	r21, r21
    b166:	31 f0       	breq	.+12     	; 0xb174 <atan2+0x54>
    b168:	2b ed       	ldi	r18, 0xDB	; 219
    b16a:	3f e0       	ldi	r19, 0x0F	; 15
    b16c:	49 e4       	ldi	r20, 0x49	; 73
    b16e:	50 fd       	sbrc	r21, 0
    b170:	49 ec       	ldi	r20, 0xC9	; 201
    b172:	63 cf       	rjmp	.-314    	; 0xb03a <__addsf3>
    b174:	08 95       	ret

0000b176 <atan>:
    b176:	df 93       	push	r29
    b178:	dd 27       	eor	r29, r29
    b17a:	b9 2f       	mov	r27, r25
    b17c:	bf 77       	andi	r27, 0x7F	; 127
    b17e:	40 e8       	ldi	r20, 0x80	; 128
    b180:	5f e3       	ldi	r21, 0x3F	; 63
    b182:	16 16       	cp	r1, r22
    b184:	17 06       	cpc	r1, r23
    b186:	48 07       	cpc	r20, r24
    b188:	5b 07       	cpc	r21, r27
    b18a:	10 f4       	brcc	.+4      	; 0xb190 <atan+0x1a>
    b18c:	d9 2f       	mov	r29, r25
    b18e:	cf d1       	rcall	.+926    	; 0xb52e <inverse>
    b190:	9f 93       	push	r25
    b192:	8f 93       	push	r24
    b194:	7f 93       	push	r23
    b196:	6f 93       	push	r22
    b198:	3a d2       	rcall	.+1140   	; 0xb60e <square>
    b19a:	ee e4       	ldi	r30, 0x4E	; 78
    b19c:	f1 e0       	ldi	r31, 0x01	; 1
    b19e:	1d d1       	rcall	.+570    	; 0xb3da <__fp_powser>
    b1a0:	77 d1       	rcall	.+750    	; 0xb490 <__fp_round>
    b1a2:	2f 91       	pop	r18
    b1a4:	3f 91       	pop	r19
    b1a6:	4f 91       	pop	r20
    b1a8:	5f 91       	pop	r21
    b1aa:	d4 d1       	rcall	.+936    	; 0xb554 <__mulsf3x>
    b1ac:	dd 23       	and	r29, r29
    b1ae:	49 f0       	breq	.+18     	; 0xb1c2 <atan+0x4c>
    b1b0:	90 58       	subi	r25, 0x80	; 128
    b1b2:	a2 ea       	ldi	r26, 0xA2	; 162
    b1b4:	2a ed       	ldi	r18, 0xDA	; 218
    b1b6:	3f e0       	ldi	r19, 0x0F	; 15
    b1b8:	49 ec       	ldi	r20, 0xC9	; 201
    b1ba:	5f e3       	ldi	r21, 0x3F	; 63
    b1bc:	d0 78       	andi	r29, 0x80	; 128
    b1be:	5d 27       	eor	r21, r29
    b1c0:	4d df       	rcall	.-358    	; 0xb05c <__addsf3x>
    b1c2:	df 91       	pop	r29
    b1c4:	65 c1       	rjmp	.+714    	; 0xb490 <__fp_round>

0000b1c6 <__cmpsf2>:
    b1c6:	dc d0       	rcall	.+440    	; 0xb380 <__fp_cmp>
    b1c8:	08 f4       	brcc	.+2      	; 0xb1cc <__cmpsf2+0x6>
    b1ca:	81 e0       	ldi	r24, 0x01	; 1
    b1cc:	08 95       	ret

0000b1ce <cos>:
    b1ce:	39 d1       	rcall	.+626    	; 0xb442 <__fp_rempio2>
    b1d0:	e3 95       	inc	r30
    b1d2:	6f c1       	rjmp	.+734    	; 0xb4b2 <__fp_sinus>

0000b1d4 <__divsf3>:
    b1d4:	0c d0       	rcall	.+24     	; 0xb1ee <__divsf3x>
    b1d6:	5c c1       	rjmp	.+696    	; 0xb490 <__fp_round>
    b1d8:	2c d1       	rcall	.+600    	; 0xb432 <__fp_pscB>
    b1da:	40 f0       	brcs	.+16     	; 0xb1ec <__divsf3+0x18>
    b1dc:	23 d1       	rcall	.+582    	; 0xb424 <__fp_pscA>
    b1de:	30 f0       	brcs	.+12     	; 0xb1ec <__divsf3+0x18>
    b1e0:	21 f4       	brne	.+8      	; 0xb1ea <__divsf3+0x16>
    b1e2:	5f 3f       	cpi	r21, 0xFF	; 255
    b1e4:	19 f0       	breq	.+6      	; 0xb1ec <__divsf3+0x18>
    b1e6:	f0 c0       	rjmp	.+480    	; 0xb3c8 <__fp_inf>
    b1e8:	51 11       	cpse	r21, r1
    b1ea:	97 c1       	rjmp	.+814    	; 0xb51a <__fp_szero>
    b1ec:	f3 c0       	rjmp	.+486    	; 0xb3d4 <__fp_nan>

0000b1ee <__divsf3x>:
    b1ee:	72 d1       	rcall	.+740    	; 0xb4d4 <__fp_split3>
    b1f0:	98 f3       	brcs	.-26     	; 0xb1d8 <__divsf3+0x4>

0000b1f2 <__divsf3_pse>:
    b1f2:	99 23       	and	r25, r25
    b1f4:	c9 f3       	breq	.-14     	; 0xb1e8 <__divsf3+0x14>
    b1f6:	55 23       	and	r21, r21
    b1f8:	b1 f3       	breq	.-20     	; 0xb1e6 <__divsf3+0x12>
    b1fa:	95 1b       	sub	r25, r21
    b1fc:	55 0b       	sbc	r21, r21
    b1fe:	bb 27       	eor	r27, r27
    b200:	aa 27       	eor	r26, r26
    b202:	62 17       	cp	r22, r18
    b204:	73 07       	cpc	r23, r19
    b206:	84 07       	cpc	r24, r20
    b208:	38 f0       	brcs	.+14     	; 0xb218 <__divsf3_pse+0x26>
    b20a:	9f 5f       	subi	r25, 0xFF	; 255
    b20c:	5f 4f       	sbci	r21, 0xFF	; 255
    b20e:	22 0f       	add	r18, r18
    b210:	33 1f       	adc	r19, r19
    b212:	44 1f       	adc	r20, r20
    b214:	aa 1f       	adc	r26, r26
    b216:	a9 f3       	breq	.-22     	; 0xb202 <__divsf3_pse+0x10>
    b218:	33 d0       	rcall	.+102    	; 0xb280 <__divsf3_pse+0x8e>
    b21a:	0e 2e       	mov	r0, r30
    b21c:	3a f0       	brmi	.+14     	; 0xb22c <__divsf3_pse+0x3a>
    b21e:	e0 e8       	ldi	r30, 0x80	; 128
    b220:	30 d0       	rcall	.+96     	; 0xb282 <__divsf3_pse+0x90>
    b222:	91 50       	subi	r25, 0x01	; 1
    b224:	50 40       	sbci	r21, 0x00	; 0
    b226:	e6 95       	lsr	r30
    b228:	00 1c       	adc	r0, r0
    b22a:	ca f7       	brpl	.-14     	; 0xb21e <__divsf3_pse+0x2c>
    b22c:	29 d0       	rcall	.+82     	; 0xb280 <__divsf3_pse+0x8e>
    b22e:	fe 2f       	mov	r31, r30
    b230:	27 d0       	rcall	.+78     	; 0xb280 <__divsf3_pse+0x8e>
    b232:	66 0f       	add	r22, r22
    b234:	77 1f       	adc	r23, r23
    b236:	88 1f       	adc	r24, r24
    b238:	bb 1f       	adc	r27, r27
    b23a:	26 17       	cp	r18, r22
    b23c:	37 07       	cpc	r19, r23
    b23e:	48 07       	cpc	r20, r24
    b240:	ab 07       	cpc	r26, r27
    b242:	b0 e8       	ldi	r27, 0x80	; 128
    b244:	09 f0       	breq	.+2      	; 0xb248 <__divsf3_pse+0x56>
    b246:	bb 0b       	sbc	r27, r27
    b248:	80 2d       	mov	r24, r0
    b24a:	bf 01       	movw	r22, r30
    b24c:	ff 27       	eor	r31, r31
    b24e:	93 58       	subi	r25, 0x83	; 131
    b250:	5f 4f       	sbci	r21, 0xFF	; 255
    b252:	2a f0       	brmi	.+10     	; 0xb25e <__divsf3_pse+0x6c>
    b254:	9e 3f       	cpi	r25, 0xFE	; 254
    b256:	51 05       	cpc	r21, r1
    b258:	68 f0       	brcs	.+26     	; 0xb274 <__divsf3_pse+0x82>
    b25a:	b6 c0       	rjmp	.+364    	; 0xb3c8 <__fp_inf>
    b25c:	5e c1       	rjmp	.+700    	; 0xb51a <__fp_szero>
    b25e:	5f 3f       	cpi	r21, 0xFF	; 255
    b260:	ec f3       	brlt	.-6      	; 0xb25c <__divsf3_pse+0x6a>
    b262:	98 3e       	cpi	r25, 0xE8	; 232
    b264:	dc f3       	brlt	.-10     	; 0xb25c <__divsf3_pse+0x6a>
    b266:	86 95       	lsr	r24
    b268:	77 95       	ror	r23
    b26a:	67 95       	ror	r22
    b26c:	b7 95       	ror	r27
    b26e:	f7 95       	ror	r31
    b270:	9f 5f       	subi	r25, 0xFF	; 255
    b272:	c9 f7       	brne	.-14     	; 0xb266 <__divsf3_pse+0x74>
    b274:	88 0f       	add	r24, r24
    b276:	91 1d       	adc	r25, r1
    b278:	96 95       	lsr	r25
    b27a:	87 95       	ror	r24
    b27c:	97 f9       	bld	r25, 7
    b27e:	08 95       	ret
    b280:	e1 e0       	ldi	r30, 0x01	; 1
    b282:	66 0f       	add	r22, r22
    b284:	77 1f       	adc	r23, r23
    b286:	88 1f       	adc	r24, r24
    b288:	bb 1f       	adc	r27, r27
    b28a:	62 17       	cp	r22, r18
    b28c:	73 07       	cpc	r23, r19
    b28e:	84 07       	cpc	r24, r20
    b290:	ba 07       	cpc	r27, r26
    b292:	20 f0       	brcs	.+8      	; 0xb29c <__divsf3_pse+0xaa>
    b294:	62 1b       	sub	r22, r18
    b296:	73 0b       	sbc	r23, r19
    b298:	84 0b       	sbc	r24, r20
    b29a:	ba 0b       	sbc	r27, r26
    b29c:	ee 1f       	adc	r30, r30
    b29e:	88 f7       	brcc	.-30     	; 0xb282 <__divsf3_pse+0x90>
    b2a0:	e0 95       	com	r30
    b2a2:	08 95       	ret

0000b2a4 <__fixsfsi>:
    b2a4:	04 d0       	rcall	.+8      	; 0xb2ae <__fixunssfsi>
    b2a6:	68 94       	set
    b2a8:	b1 11       	cpse	r27, r1
    b2aa:	37 c1       	rjmp	.+622    	; 0xb51a <__fp_szero>
    b2ac:	08 95       	ret

0000b2ae <__fixunssfsi>:
    b2ae:	1a d1       	rcall	.+564    	; 0xb4e4 <__fp_splitA>
    b2b0:	88 f0       	brcs	.+34     	; 0xb2d4 <__fixunssfsi+0x26>
    b2b2:	9f 57       	subi	r25, 0x7F	; 127
    b2b4:	90 f0       	brcs	.+36     	; 0xb2da <__fixunssfsi+0x2c>
    b2b6:	b9 2f       	mov	r27, r25
    b2b8:	99 27       	eor	r25, r25
    b2ba:	b7 51       	subi	r27, 0x17	; 23
    b2bc:	a0 f0       	brcs	.+40     	; 0xb2e6 <__fixunssfsi+0x38>
    b2be:	d1 f0       	breq	.+52     	; 0xb2f4 <__fixunssfsi+0x46>
    b2c0:	66 0f       	add	r22, r22
    b2c2:	77 1f       	adc	r23, r23
    b2c4:	88 1f       	adc	r24, r24
    b2c6:	99 1f       	adc	r25, r25
    b2c8:	1a f0       	brmi	.+6      	; 0xb2d0 <__fixunssfsi+0x22>
    b2ca:	ba 95       	dec	r27
    b2cc:	c9 f7       	brne	.-14     	; 0xb2c0 <__fixunssfsi+0x12>
    b2ce:	12 c0       	rjmp	.+36     	; 0xb2f4 <__fixunssfsi+0x46>
    b2d0:	b1 30       	cpi	r27, 0x01	; 1
    b2d2:	81 f0       	breq	.+32     	; 0xb2f4 <__fixunssfsi+0x46>
    b2d4:	21 d1       	rcall	.+578    	; 0xb518 <__fp_zero>
    b2d6:	b1 e0       	ldi	r27, 0x01	; 1
    b2d8:	08 95       	ret
    b2da:	1e c1       	rjmp	.+572    	; 0xb518 <__fp_zero>
    b2dc:	67 2f       	mov	r22, r23
    b2de:	78 2f       	mov	r23, r24
    b2e0:	88 27       	eor	r24, r24
    b2e2:	b8 5f       	subi	r27, 0xF8	; 248
    b2e4:	39 f0       	breq	.+14     	; 0xb2f4 <__fixunssfsi+0x46>
    b2e6:	b9 3f       	cpi	r27, 0xF9	; 249
    b2e8:	cc f3       	brlt	.-14     	; 0xb2dc <__fixunssfsi+0x2e>
    b2ea:	86 95       	lsr	r24
    b2ec:	77 95       	ror	r23
    b2ee:	67 95       	ror	r22
    b2f0:	b3 95       	inc	r27
    b2f2:	d9 f7       	brne	.-10     	; 0xb2ea <__fixunssfsi+0x3c>
    b2f4:	3e f4       	brtc	.+14     	; 0xb304 <__fixunssfsi+0x56>
    b2f6:	90 95       	com	r25
    b2f8:	80 95       	com	r24
    b2fa:	70 95       	com	r23
    b2fc:	61 95       	neg	r22
    b2fe:	7f 4f       	sbci	r23, 0xFF	; 255
    b300:	8f 4f       	sbci	r24, 0xFF	; 255
    b302:	9f 4f       	sbci	r25, 0xFF	; 255
    b304:	08 95       	ret

0000b306 <__floatunsisf>:
    b306:	e8 94       	clt
    b308:	09 c0       	rjmp	.+18     	; 0xb31c <__floatsisf+0x12>

0000b30a <__floatsisf>:
    b30a:	97 fb       	bst	r25, 7
    b30c:	3e f4       	brtc	.+14     	; 0xb31c <__floatsisf+0x12>
    b30e:	90 95       	com	r25
    b310:	80 95       	com	r24
    b312:	70 95       	com	r23
    b314:	61 95       	neg	r22
    b316:	7f 4f       	sbci	r23, 0xFF	; 255
    b318:	8f 4f       	sbci	r24, 0xFF	; 255
    b31a:	9f 4f       	sbci	r25, 0xFF	; 255
    b31c:	99 23       	and	r25, r25
    b31e:	a9 f0       	breq	.+42     	; 0xb34a <__floatsisf+0x40>
    b320:	f9 2f       	mov	r31, r25
    b322:	96 e9       	ldi	r25, 0x96	; 150
    b324:	bb 27       	eor	r27, r27
    b326:	93 95       	inc	r25
    b328:	f6 95       	lsr	r31
    b32a:	87 95       	ror	r24
    b32c:	77 95       	ror	r23
    b32e:	67 95       	ror	r22
    b330:	b7 95       	ror	r27
    b332:	f1 11       	cpse	r31, r1
    b334:	f8 cf       	rjmp	.-16     	; 0xb326 <__floatsisf+0x1c>
    b336:	fa f4       	brpl	.+62     	; 0xb376 <__floatsisf+0x6c>
    b338:	bb 0f       	add	r27, r27
    b33a:	11 f4       	brne	.+4      	; 0xb340 <__floatsisf+0x36>
    b33c:	60 ff       	sbrs	r22, 0
    b33e:	1b c0       	rjmp	.+54     	; 0xb376 <__floatsisf+0x6c>
    b340:	6f 5f       	subi	r22, 0xFF	; 255
    b342:	7f 4f       	sbci	r23, 0xFF	; 255
    b344:	8f 4f       	sbci	r24, 0xFF	; 255
    b346:	9f 4f       	sbci	r25, 0xFF	; 255
    b348:	16 c0       	rjmp	.+44     	; 0xb376 <__floatsisf+0x6c>
    b34a:	88 23       	and	r24, r24
    b34c:	11 f0       	breq	.+4      	; 0xb352 <__floatsisf+0x48>
    b34e:	96 e9       	ldi	r25, 0x96	; 150
    b350:	11 c0       	rjmp	.+34     	; 0xb374 <__floatsisf+0x6a>
    b352:	77 23       	and	r23, r23
    b354:	21 f0       	breq	.+8      	; 0xb35e <__floatsisf+0x54>
    b356:	9e e8       	ldi	r25, 0x8E	; 142
    b358:	87 2f       	mov	r24, r23
    b35a:	76 2f       	mov	r23, r22
    b35c:	05 c0       	rjmp	.+10     	; 0xb368 <__floatsisf+0x5e>
    b35e:	66 23       	and	r22, r22
    b360:	71 f0       	breq	.+28     	; 0xb37e <__floatsisf+0x74>
    b362:	96 e8       	ldi	r25, 0x86	; 134
    b364:	86 2f       	mov	r24, r22
    b366:	70 e0       	ldi	r23, 0x00	; 0
    b368:	60 e0       	ldi	r22, 0x00	; 0
    b36a:	2a f0       	brmi	.+10     	; 0xb376 <__floatsisf+0x6c>
    b36c:	9a 95       	dec	r25
    b36e:	66 0f       	add	r22, r22
    b370:	77 1f       	adc	r23, r23
    b372:	88 1f       	adc	r24, r24
    b374:	da f7       	brpl	.-10     	; 0xb36c <__floatsisf+0x62>
    b376:	88 0f       	add	r24, r24
    b378:	96 95       	lsr	r25
    b37a:	87 95       	ror	r24
    b37c:	97 f9       	bld	r25, 7
    b37e:	08 95       	ret

0000b380 <__fp_cmp>:
    b380:	99 0f       	add	r25, r25
    b382:	00 08       	sbc	r0, r0
    b384:	55 0f       	add	r21, r21
    b386:	aa 0b       	sbc	r26, r26
    b388:	e0 e8       	ldi	r30, 0x80	; 128
    b38a:	fe ef       	ldi	r31, 0xFE	; 254
    b38c:	16 16       	cp	r1, r22
    b38e:	17 06       	cpc	r1, r23
    b390:	e8 07       	cpc	r30, r24
    b392:	f9 07       	cpc	r31, r25
    b394:	c0 f0       	brcs	.+48     	; 0xb3c6 <__fp_cmp+0x46>
    b396:	12 16       	cp	r1, r18
    b398:	13 06       	cpc	r1, r19
    b39a:	e4 07       	cpc	r30, r20
    b39c:	f5 07       	cpc	r31, r21
    b39e:	98 f0       	brcs	.+38     	; 0xb3c6 <__fp_cmp+0x46>
    b3a0:	62 1b       	sub	r22, r18
    b3a2:	73 0b       	sbc	r23, r19
    b3a4:	84 0b       	sbc	r24, r20
    b3a6:	95 0b       	sbc	r25, r21
    b3a8:	39 f4       	brne	.+14     	; 0xb3b8 <__fp_cmp+0x38>
    b3aa:	0a 26       	eor	r0, r26
    b3ac:	61 f0       	breq	.+24     	; 0xb3c6 <__fp_cmp+0x46>
    b3ae:	23 2b       	or	r18, r19
    b3b0:	24 2b       	or	r18, r20
    b3b2:	25 2b       	or	r18, r21
    b3b4:	21 f4       	brne	.+8      	; 0xb3be <__fp_cmp+0x3e>
    b3b6:	08 95       	ret
    b3b8:	0a 26       	eor	r0, r26
    b3ba:	09 f4       	brne	.+2      	; 0xb3be <__fp_cmp+0x3e>
    b3bc:	a1 40       	sbci	r26, 0x01	; 1
    b3be:	a6 95       	lsr	r26
    b3c0:	8f ef       	ldi	r24, 0xFF	; 255
    b3c2:	81 1d       	adc	r24, r1
    b3c4:	81 1d       	adc	r24, r1
    b3c6:	08 95       	ret

0000b3c8 <__fp_inf>:
    b3c8:	97 f9       	bld	r25, 7
    b3ca:	9f 67       	ori	r25, 0x7F	; 127
    b3cc:	80 e8       	ldi	r24, 0x80	; 128
    b3ce:	70 e0       	ldi	r23, 0x00	; 0
    b3d0:	60 e0       	ldi	r22, 0x00	; 0
    b3d2:	08 95       	ret

0000b3d4 <__fp_nan>:
    b3d4:	9f ef       	ldi	r25, 0xFF	; 255
    b3d6:	80 ec       	ldi	r24, 0xC0	; 192
    b3d8:	08 95       	ret

0000b3da <__fp_powser>:
    b3da:	df 93       	push	r29
    b3dc:	cf 93       	push	r28
    b3de:	1f 93       	push	r17
    b3e0:	0f 93       	push	r16
    b3e2:	ff 92       	push	r15
    b3e4:	ef 92       	push	r14
    b3e6:	df 92       	push	r13
    b3e8:	7b 01       	movw	r14, r22
    b3ea:	8c 01       	movw	r16, r24
    b3ec:	68 94       	set
    b3ee:	05 c0       	rjmp	.+10     	; 0xb3fa <__fp_powser+0x20>
    b3f0:	da 2e       	mov	r13, r26
    b3f2:	ef 01       	movw	r28, r30
    b3f4:	af d0       	rcall	.+350    	; 0xb554 <__mulsf3x>
    b3f6:	fe 01       	movw	r30, r28
    b3f8:	e8 94       	clt
    b3fa:	a5 91       	lpm	r26, Z+
    b3fc:	25 91       	lpm	r18, Z+
    b3fe:	35 91       	lpm	r19, Z+
    b400:	45 91       	lpm	r20, Z+
    b402:	55 91       	lpm	r21, Z+
    b404:	ae f3       	brts	.-22     	; 0xb3f0 <__fp_powser+0x16>
    b406:	ef 01       	movw	r28, r30
    b408:	29 de       	rcall	.-942    	; 0xb05c <__addsf3x>
    b40a:	fe 01       	movw	r30, r28
    b40c:	97 01       	movw	r18, r14
    b40e:	a8 01       	movw	r20, r16
    b410:	da 94       	dec	r13
    b412:	79 f7       	brne	.-34     	; 0xb3f2 <__fp_powser+0x18>
    b414:	df 90       	pop	r13
    b416:	ef 90       	pop	r14
    b418:	ff 90       	pop	r15
    b41a:	0f 91       	pop	r16
    b41c:	1f 91       	pop	r17
    b41e:	cf 91       	pop	r28
    b420:	df 91       	pop	r29
    b422:	08 95       	ret

0000b424 <__fp_pscA>:
    b424:	00 24       	eor	r0, r0
    b426:	0a 94       	dec	r0
    b428:	16 16       	cp	r1, r22
    b42a:	17 06       	cpc	r1, r23
    b42c:	18 06       	cpc	r1, r24
    b42e:	09 06       	cpc	r0, r25
    b430:	08 95       	ret

0000b432 <__fp_pscB>:
    b432:	00 24       	eor	r0, r0
    b434:	0a 94       	dec	r0
    b436:	12 16       	cp	r1, r18
    b438:	13 06       	cpc	r1, r19
    b43a:	14 06       	cpc	r1, r20
    b43c:	05 06       	cpc	r0, r21
    b43e:	08 95       	ret
    b440:	c9 cf       	rjmp	.-110    	; 0xb3d4 <__fp_nan>

0000b442 <__fp_rempio2>:
    b442:	50 d0       	rcall	.+160    	; 0xb4e4 <__fp_splitA>
    b444:	e8 f3       	brcs	.-6      	; 0xb440 <__fp_pscB+0xe>
    b446:	e8 94       	clt
    b448:	e0 e0       	ldi	r30, 0x00	; 0
    b44a:	bb 27       	eor	r27, r27
    b44c:	9f 57       	subi	r25, 0x7F	; 127
    b44e:	f0 f0       	brcs	.+60     	; 0xb48c <__fp_rempio2+0x4a>
    b450:	2a ed       	ldi	r18, 0xDA	; 218
    b452:	3f e0       	ldi	r19, 0x0F	; 15
    b454:	49 ec       	ldi	r20, 0xC9	; 201
    b456:	06 c0       	rjmp	.+12     	; 0xb464 <__fp_rempio2+0x22>
    b458:	ee 0f       	add	r30, r30
    b45a:	bb 0f       	add	r27, r27
    b45c:	66 1f       	adc	r22, r22
    b45e:	77 1f       	adc	r23, r23
    b460:	88 1f       	adc	r24, r24
    b462:	28 f0       	brcs	.+10     	; 0xb46e <__fp_rempio2+0x2c>
    b464:	b2 3a       	cpi	r27, 0xA2	; 162
    b466:	62 07       	cpc	r22, r18
    b468:	73 07       	cpc	r23, r19
    b46a:	84 07       	cpc	r24, r20
    b46c:	28 f0       	brcs	.+10     	; 0xb478 <__fp_rempio2+0x36>
    b46e:	b2 5a       	subi	r27, 0xA2	; 162
    b470:	62 0b       	sbc	r22, r18
    b472:	73 0b       	sbc	r23, r19
    b474:	84 0b       	sbc	r24, r20
    b476:	e3 95       	inc	r30
    b478:	9a 95       	dec	r25
    b47a:	72 f7       	brpl	.-36     	; 0xb458 <__fp_rempio2+0x16>
    b47c:	80 38       	cpi	r24, 0x80	; 128
    b47e:	30 f4       	brcc	.+12     	; 0xb48c <__fp_rempio2+0x4a>
    b480:	9a 95       	dec	r25
    b482:	bb 0f       	add	r27, r27
    b484:	66 1f       	adc	r22, r22
    b486:	77 1f       	adc	r23, r23
    b488:	88 1f       	adc	r24, r24
    b48a:	d2 f7       	brpl	.-12     	; 0xb480 <__fp_rempio2+0x3e>
    b48c:	90 48       	sbci	r25, 0x80	; 128
    b48e:	c4 c0       	rjmp	.+392    	; 0xb618 <__fp_mpack_finite>

0000b490 <__fp_round>:
    b490:	09 2e       	mov	r0, r25
    b492:	03 94       	inc	r0
    b494:	00 0c       	add	r0, r0
    b496:	11 f4       	brne	.+4      	; 0xb49c <__fp_round+0xc>
    b498:	88 23       	and	r24, r24
    b49a:	52 f0       	brmi	.+20     	; 0xb4b0 <__fp_round+0x20>
    b49c:	bb 0f       	add	r27, r27
    b49e:	40 f4       	brcc	.+16     	; 0xb4b0 <__fp_round+0x20>
    b4a0:	bf 2b       	or	r27, r31
    b4a2:	11 f4       	brne	.+4      	; 0xb4a8 <__fp_round+0x18>
    b4a4:	60 ff       	sbrs	r22, 0
    b4a6:	04 c0       	rjmp	.+8      	; 0xb4b0 <__fp_round+0x20>
    b4a8:	6f 5f       	subi	r22, 0xFF	; 255
    b4aa:	7f 4f       	sbci	r23, 0xFF	; 255
    b4ac:	8f 4f       	sbci	r24, 0xFF	; 255
    b4ae:	9f 4f       	sbci	r25, 0xFF	; 255
    b4b0:	08 95       	ret

0000b4b2 <__fp_sinus>:
    b4b2:	ef 93       	push	r30
    b4b4:	e0 ff       	sbrs	r30, 0
    b4b6:	06 c0       	rjmp	.+12     	; 0xb4c4 <__fp_sinus+0x12>
    b4b8:	a2 ea       	ldi	r26, 0xA2	; 162
    b4ba:	2a ed       	ldi	r18, 0xDA	; 218
    b4bc:	3f e0       	ldi	r19, 0x0F	; 15
    b4be:	49 ec       	ldi	r20, 0xC9	; 201
    b4c0:	5f eb       	ldi	r21, 0xBF	; 191
    b4c2:	cc dd       	rcall	.-1128   	; 0xb05c <__addsf3x>
    b4c4:	e5 df       	rcall	.-54     	; 0xb490 <__fp_round>
    b4c6:	0f 90       	pop	r0
    b4c8:	03 94       	inc	r0
    b4ca:	01 fc       	sbrc	r0, 1
    b4cc:	90 58       	subi	r25, 0x80	; 128
    b4ce:	eb e7       	ldi	r30, 0x7B	; 123
    b4d0:	f1 e0       	ldi	r31, 0x01	; 1
    b4d2:	ae c0       	rjmp	.+348    	; 0xb630 <__fp_powsodd>

0000b4d4 <__fp_split3>:
    b4d4:	57 fd       	sbrc	r21, 7
    b4d6:	90 58       	subi	r25, 0x80	; 128
    b4d8:	44 0f       	add	r20, r20
    b4da:	55 1f       	adc	r21, r21
    b4dc:	59 f0       	breq	.+22     	; 0xb4f4 <__fp_splitA+0x10>
    b4de:	5f 3f       	cpi	r21, 0xFF	; 255
    b4e0:	71 f0       	breq	.+28     	; 0xb4fe <__fp_splitA+0x1a>
    b4e2:	47 95       	ror	r20

0000b4e4 <__fp_splitA>:
    b4e4:	88 0f       	add	r24, r24
    b4e6:	97 fb       	bst	r25, 7
    b4e8:	99 1f       	adc	r25, r25
    b4ea:	61 f0       	breq	.+24     	; 0xb504 <__fp_splitA+0x20>
    b4ec:	9f 3f       	cpi	r25, 0xFF	; 255
    b4ee:	79 f0       	breq	.+30     	; 0xb50e <__fp_splitA+0x2a>
    b4f0:	87 95       	ror	r24
    b4f2:	08 95       	ret
    b4f4:	12 16       	cp	r1, r18
    b4f6:	13 06       	cpc	r1, r19
    b4f8:	14 06       	cpc	r1, r20
    b4fa:	55 1f       	adc	r21, r21
    b4fc:	f2 cf       	rjmp	.-28     	; 0xb4e2 <__fp_split3+0xe>
    b4fe:	46 95       	lsr	r20
    b500:	f1 df       	rcall	.-30     	; 0xb4e4 <__fp_splitA>
    b502:	08 c0       	rjmp	.+16     	; 0xb514 <__fp_splitA+0x30>
    b504:	16 16       	cp	r1, r22
    b506:	17 06       	cpc	r1, r23
    b508:	18 06       	cpc	r1, r24
    b50a:	99 1f       	adc	r25, r25
    b50c:	f1 cf       	rjmp	.-30     	; 0xb4f0 <__fp_splitA+0xc>
    b50e:	86 95       	lsr	r24
    b510:	71 05       	cpc	r23, r1
    b512:	61 05       	cpc	r22, r1
    b514:	08 94       	sec
    b516:	08 95       	ret

0000b518 <__fp_zero>:
    b518:	e8 94       	clt

0000b51a <__fp_szero>:
    b51a:	bb 27       	eor	r27, r27
    b51c:	66 27       	eor	r22, r22
    b51e:	77 27       	eor	r23, r23
    b520:	cb 01       	movw	r24, r22
    b522:	97 f9       	bld	r25, 7
    b524:	08 95       	ret

0000b526 <__gesf2>:
    b526:	2c df       	rcall	.-424    	; 0xb380 <__fp_cmp>
    b528:	08 f4       	brcc	.+2      	; 0xb52c <__gesf2+0x6>
    b52a:	8f ef       	ldi	r24, 0xFF	; 255
    b52c:	08 95       	ret

0000b52e <inverse>:
    b52e:	9b 01       	movw	r18, r22
    b530:	ac 01       	movw	r20, r24
    b532:	60 e0       	ldi	r22, 0x00	; 0
    b534:	70 e0       	ldi	r23, 0x00	; 0
    b536:	80 e8       	ldi	r24, 0x80	; 128
    b538:	9f e3       	ldi	r25, 0x3F	; 63
    b53a:	4c ce       	rjmp	.-872    	; 0xb1d4 <__divsf3>

0000b53c <__mulsf3>:
    b53c:	0b d0       	rcall	.+22     	; 0xb554 <__mulsf3x>
    b53e:	a8 cf       	rjmp	.-176    	; 0xb490 <__fp_round>
    b540:	71 df       	rcall	.-286    	; 0xb424 <__fp_pscA>
    b542:	28 f0       	brcs	.+10     	; 0xb54e <__mulsf3+0x12>
    b544:	76 df       	rcall	.-276    	; 0xb432 <__fp_pscB>
    b546:	18 f0       	brcs	.+6      	; 0xb54e <__mulsf3+0x12>
    b548:	95 23       	and	r25, r21
    b54a:	09 f0       	breq	.+2      	; 0xb54e <__mulsf3+0x12>
    b54c:	3d cf       	rjmp	.-390    	; 0xb3c8 <__fp_inf>
    b54e:	42 cf       	rjmp	.-380    	; 0xb3d4 <__fp_nan>
    b550:	11 24       	eor	r1, r1
    b552:	e3 cf       	rjmp	.-58     	; 0xb51a <__fp_szero>

0000b554 <__mulsf3x>:
    b554:	bf df       	rcall	.-130    	; 0xb4d4 <__fp_split3>
    b556:	a0 f3       	brcs	.-24     	; 0xb540 <__mulsf3+0x4>

0000b558 <__mulsf3_pse>:
    b558:	95 9f       	mul	r25, r21
    b55a:	d1 f3       	breq	.-12     	; 0xb550 <__mulsf3+0x14>
    b55c:	95 0f       	add	r25, r21
    b55e:	50 e0       	ldi	r21, 0x00	; 0
    b560:	55 1f       	adc	r21, r21
    b562:	62 9f       	mul	r22, r18
    b564:	f0 01       	movw	r30, r0
    b566:	72 9f       	mul	r23, r18
    b568:	bb 27       	eor	r27, r27
    b56a:	f0 0d       	add	r31, r0
    b56c:	b1 1d       	adc	r27, r1
    b56e:	63 9f       	mul	r22, r19
    b570:	aa 27       	eor	r26, r26
    b572:	f0 0d       	add	r31, r0
    b574:	b1 1d       	adc	r27, r1
    b576:	aa 1f       	adc	r26, r26
    b578:	64 9f       	mul	r22, r20
    b57a:	66 27       	eor	r22, r22
    b57c:	b0 0d       	add	r27, r0
    b57e:	a1 1d       	adc	r26, r1
    b580:	66 1f       	adc	r22, r22
    b582:	82 9f       	mul	r24, r18
    b584:	22 27       	eor	r18, r18
    b586:	b0 0d       	add	r27, r0
    b588:	a1 1d       	adc	r26, r1
    b58a:	62 1f       	adc	r22, r18
    b58c:	73 9f       	mul	r23, r19
    b58e:	b0 0d       	add	r27, r0
    b590:	a1 1d       	adc	r26, r1
    b592:	62 1f       	adc	r22, r18
    b594:	83 9f       	mul	r24, r19
    b596:	a0 0d       	add	r26, r0
    b598:	61 1d       	adc	r22, r1
    b59a:	22 1f       	adc	r18, r18
    b59c:	74 9f       	mul	r23, r20
    b59e:	33 27       	eor	r19, r19
    b5a0:	a0 0d       	add	r26, r0
    b5a2:	61 1d       	adc	r22, r1
    b5a4:	23 1f       	adc	r18, r19
    b5a6:	84 9f       	mul	r24, r20
    b5a8:	60 0d       	add	r22, r0
    b5aa:	21 1d       	adc	r18, r1
    b5ac:	82 2f       	mov	r24, r18
    b5ae:	76 2f       	mov	r23, r22
    b5b0:	6a 2f       	mov	r22, r26
    b5b2:	11 24       	eor	r1, r1
    b5b4:	9f 57       	subi	r25, 0x7F	; 127
    b5b6:	50 40       	sbci	r21, 0x00	; 0
    b5b8:	8a f0       	brmi	.+34     	; 0xb5dc <__mulsf3_pse+0x84>
    b5ba:	e1 f0       	breq	.+56     	; 0xb5f4 <__mulsf3_pse+0x9c>
    b5bc:	88 23       	and	r24, r24
    b5be:	4a f0       	brmi	.+18     	; 0xb5d2 <__mulsf3_pse+0x7a>
    b5c0:	ee 0f       	add	r30, r30
    b5c2:	ff 1f       	adc	r31, r31
    b5c4:	bb 1f       	adc	r27, r27
    b5c6:	66 1f       	adc	r22, r22
    b5c8:	77 1f       	adc	r23, r23
    b5ca:	88 1f       	adc	r24, r24
    b5cc:	91 50       	subi	r25, 0x01	; 1
    b5ce:	50 40       	sbci	r21, 0x00	; 0
    b5d0:	a9 f7       	brne	.-22     	; 0xb5bc <__mulsf3_pse+0x64>
    b5d2:	9e 3f       	cpi	r25, 0xFE	; 254
    b5d4:	51 05       	cpc	r21, r1
    b5d6:	70 f0       	brcs	.+28     	; 0xb5f4 <__mulsf3_pse+0x9c>
    b5d8:	f7 ce       	rjmp	.-530    	; 0xb3c8 <__fp_inf>
    b5da:	9f cf       	rjmp	.-194    	; 0xb51a <__fp_szero>
    b5dc:	5f 3f       	cpi	r21, 0xFF	; 255
    b5de:	ec f3       	brlt	.-6      	; 0xb5da <__mulsf3_pse+0x82>
    b5e0:	98 3e       	cpi	r25, 0xE8	; 232
    b5e2:	dc f3       	brlt	.-10     	; 0xb5da <__mulsf3_pse+0x82>
    b5e4:	86 95       	lsr	r24
    b5e6:	77 95       	ror	r23
    b5e8:	67 95       	ror	r22
    b5ea:	b7 95       	ror	r27
    b5ec:	f7 95       	ror	r31
    b5ee:	e7 95       	ror	r30
    b5f0:	9f 5f       	subi	r25, 0xFF	; 255
    b5f2:	c1 f7       	brne	.-16     	; 0xb5e4 <__mulsf3_pse+0x8c>
    b5f4:	fe 2b       	or	r31, r30
    b5f6:	88 0f       	add	r24, r24
    b5f8:	91 1d       	adc	r25, r1
    b5fa:	96 95       	lsr	r25
    b5fc:	87 95       	ror	r24
    b5fe:	97 f9       	bld	r25, 7
    b600:	08 95       	ret

0000b602 <sin>:
    b602:	9f 93       	push	r25
    b604:	1e df       	rcall	.-452    	; 0xb442 <__fp_rempio2>
    b606:	0f 90       	pop	r0
    b608:	07 fc       	sbrc	r0, 7
    b60a:	ee 5f       	subi	r30, 0xFE	; 254
    b60c:	52 cf       	rjmp	.-348    	; 0xb4b2 <__fp_sinus>

0000b60e <square>:
    b60e:	9b 01       	movw	r18, r22
    b610:	ac 01       	movw	r20, r24
    b612:	94 cf       	rjmp	.-216    	; 0xb53c <__mulsf3>

0000b614 <__fp_mpack>:
    b614:	9f 3f       	cpi	r25, 0xFF	; 255
    b616:	31 f0       	breq	.+12     	; 0xb624 <__fp_mpack_finite+0xc>

0000b618 <__fp_mpack_finite>:
    b618:	91 50       	subi	r25, 0x01	; 1
    b61a:	20 f4       	brcc	.+8      	; 0xb624 <__fp_mpack_finite+0xc>
    b61c:	87 95       	ror	r24
    b61e:	77 95       	ror	r23
    b620:	67 95       	ror	r22
    b622:	b7 95       	ror	r27
    b624:	88 0f       	add	r24, r24
    b626:	91 1d       	adc	r25, r1
    b628:	96 95       	lsr	r25
    b62a:	87 95       	ror	r24
    b62c:	97 f9       	bld	r25, 7
    b62e:	08 95       	ret

0000b630 <__fp_powsodd>:
    b630:	9f 93       	push	r25
    b632:	8f 93       	push	r24
    b634:	7f 93       	push	r23
    b636:	6f 93       	push	r22
    b638:	ff 93       	push	r31
    b63a:	ef 93       	push	r30
    b63c:	9b 01       	movw	r18, r22
    b63e:	ac 01       	movw	r20, r24
    b640:	7d df       	rcall	.-262    	; 0xb53c <__mulsf3>
    b642:	ef 91       	pop	r30
    b644:	ff 91       	pop	r31
    b646:	c9 de       	rcall	.-622    	; 0xb3da <__fp_powser>
    b648:	2f 91       	pop	r18
    b64a:	3f 91       	pop	r19
    b64c:	4f 91       	pop	r20
    b64e:	5f 91       	pop	r21
    b650:	75 cf       	rjmp	.-278    	; 0xb53c <__mulsf3>

0000b652 <__mulsi3>:
    b652:	62 9f       	mul	r22, r18
    b654:	d0 01       	movw	r26, r0
    b656:	73 9f       	mul	r23, r19
    b658:	f0 01       	movw	r30, r0
    b65a:	82 9f       	mul	r24, r18
    b65c:	e0 0d       	add	r30, r0
    b65e:	f1 1d       	adc	r31, r1
    b660:	64 9f       	mul	r22, r20
    b662:	e0 0d       	add	r30, r0
    b664:	f1 1d       	adc	r31, r1
    b666:	92 9f       	mul	r25, r18
    b668:	f0 0d       	add	r31, r0
    b66a:	83 9f       	mul	r24, r19
    b66c:	f0 0d       	add	r31, r0
    b66e:	74 9f       	mul	r23, r20
    b670:	f0 0d       	add	r31, r0
    b672:	65 9f       	mul	r22, r21
    b674:	f0 0d       	add	r31, r0
    b676:	99 27       	eor	r25, r25
    b678:	72 9f       	mul	r23, r18
    b67a:	b0 0d       	add	r27, r0
    b67c:	e1 1d       	adc	r30, r1
    b67e:	f9 1f       	adc	r31, r25
    b680:	63 9f       	mul	r22, r19
    b682:	b0 0d       	add	r27, r0
    b684:	e1 1d       	adc	r30, r1
    b686:	f9 1f       	adc	r31, r25
    b688:	bd 01       	movw	r22, r26
    b68a:	cf 01       	movw	r24, r30
    b68c:	11 24       	eor	r1, r1
    b68e:	08 95       	ret

0000b690 <__udivmodhi4>:
    b690:	aa 1b       	sub	r26, r26
    b692:	bb 1b       	sub	r27, r27
    b694:	51 e1       	ldi	r21, 0x11	; 17
    b696:	07 c0       	rjmp	.+14     	; 0xb6a6 <__udivmodhi4_ep>

0000b698 <__udivmodhi4_loop>:
    b698:	aa 1f       	adc	r26, r26
    b69a:	bb 1f       	adc	r27, r27
    b69c:	a6 17       	cp	r26, r22
    b69e:	b7 07       	cpc	r27, r23
    b6a0:	10 f0       	brcs	.+4      	; 0xb6a6 <__udivmodhi4_ep>
    b6a2:	a6 1b       	sub	r26, r22
    b6a4:	b7 0b       	sbc	r27, r23

0000b6a6 <__udivmodhi4_ep>:
    b6a6:	88 1f       	adc	r24, r24
    b6a8:	99 1f       	adc	r25, r25
    b6aa:	5a 95       	dec	r21
    b6ac:	a9 f7       	brne	.-22     	; 0xb698 <__udivmodhi4_loop>
    b6ae:	80 95       	com	r24
    b6b0:	90 95       	com	r25
    b6b2:	bc 01       	movw	r22, r24
    b6b4:	cd 01       	movw	r24, r26
    b6b6:	08 95       	ret

0000b6b8 <__divmodhi4>:
    b6b8:	97 fb       	bst	r25, 7
    b6ba:	09 2e       	mov	r0, r25
    b6bc:	07 26       	eor	r0, r23
    b6be:	0a d0       	rcall	.+20     	; 0xb6d4 <__divmodhi4_neg1>
    b6c0:	77 fd       	sbrc	r23, 7
    b6c2:	04 d0       	rcall	.+8      	; 0xb6cc <__divmodhi4_neg2>
    b6c4:	e5 df       	rcall	.-54     	; 0xb690 <__udivmodhi4>
    b6c6:	06 d0       	rcall	.+12     	; 0xb6d4 <__divmodhi4_neg1>
    b6c8:	00 20       	and	r0, r0
    b6ca:	1a f4       	brpl	.+6      	; 0xb6d2 <__divmodhi4_exit>

0000b6cc <__divmodhi4_neg2>:
    b6cc:	70 95       	com	r23
    b6ce:	61 95       	neg	r22
    b6d0:	7f 4f       	sbci	r23, 0xFF	; 255

0000b6d2 <__divmodhi4_exit>:
    b6d2:	08 95       	ret

0000b6d4 <__divmodhi4_neg1>:
    b6d4:	f6 f7       	brtc	.-4      	; 0xb6d2 <__divmodhi4_exit>
    b6d6:	90 95       	com	r25
    b6d8:	81 95       	neg	r24
    b6da:	9f 4f       	sbci	r25, 0xFF	; 255
    b6dc:	08 95       	ret

0000b6de <__divmodsi4>:
    b6de:	97 fb       	bst	r25, 7
    b6e0:	09 2e       	mov	r0, r25
    b6e2:	05 26       	eor	r0, r21
    b6e4:	0e d0       	rcall	.+28     	; 0xb702 <__divmodsi4_neg1>
    b6e6:	57 fd       	sbrc	r21, 7
    b6e8:	04 d0       	rcall	.+8      	; 0xb6f2 <__divmodsi4_neg2>
    b6ea:	14 d0       	rcall	.+40     	; 0xb714 <__udivmodsi4>
    b6ec:	0a d0       	rcall	.+20     	; 0xb702 <__divmodsi4_neg1>
    b6ee:	00 1c       	adc	r0, r0
    b6f0:	38 f4       	brcc	.+14     	; 0xb700 <__divmodsi4_exit>

0000b6f2 <__divmodsi4_neg2>:
    b6f2:	50 95       	com	r21
    b6f4:	40 95       	com	r20
    b6f6:	30 95       	com	r19
    b6f8:	21 95       	neg	r18
    b6fa:	3f 4f       	sbci	r19, 0xFF	; 255
    b6fc:	4f 4f       	sbci	r20, 0xFF	; 255
    b6fe:	5f 4f       	sbci	r21, 0xFF	; 255

0000b700 <__divmodsi4_exit>:
    b700:	08 95       	ret

0000b702 <__divmodsi4_neg1>:
    b702:	f6 f7       	brtc	.-4      	; 0xb700 <__divmodsi4_exit>
    b704:	90 95       	com	r25
    b706:	80 95       	com	r24
    b708:	70 95       	com	r23
    b70a:	61 95       	neg	r22
    b70c:	7f 4f       	sbci	r23, 0xFF	; 255
    b70e:	8f 4f       	sbci	r24, 0xFF	; 255
    b710:	9f 4f       	sbci	r25, 0xFF	; 255
    b712:	08 95       	ret

0000b714 <__udivmodsi4>:
    b714:	a1 e2       	ldi	r26, 0x21	; 33
    b716:	1a 2e       	mov	r1, r26
    b718:	aa 1b       	sub	r26, r26
    b71a:	bb 1b       	sub	r27, r27
    b71c:	fd 01       	movw	r30, r26
    b71e:	0d c0       	rjmp	.+26     	; 0xb73a <__udivmodsi4_ep>

0000b720 <__udivmodsi4_loop>:
    b720:	aa 1f       	adc	r26, r26
    b722:	bb 1f       	adc	r27, r27
    b724:	ee 1f       	adc	r30, r30
    b726:	ff 1f       	adc	r31, r31
    b728:	a2 17       	cp	r26, r18
    b72a:	b3 07       	cpc	r27, r19
    b72c:	e4 07       	cpc	r30, r20
    b72e:	f5 07       	cpc	r31, r21
    b730:	20 f0       	brcs	.+8      	; 0xb73a <__udivmodsi4_ep>
    b732:	a2 1b       	sub	r26, r18
    b734:	b3 0b       	sbc	r27, r19
    b736:	e4 0b       	sbc	r30, r20
    b738:	f5 0b       	sbc	r31, r21

0000b73a <__udivmodsi4_ep>:
    b73a:	66 1f       	adc	r22, r22
    b73c:	77 1f       	adc	r23, r23
    b73e:	88 1f       	adc	r24, r24
    b740:	99 1f       	adc	r25, r25
    b742:	1a 94       	dec	r1
    b744:	69 f7       	brne	.-38     	; 0xb720 <__udivmodsi4_loop>
    b746:	60 95       	com	r22
    b748:	70 95       	com	r23
    b74a:	80 95       	com	r24
    b74c:	90 95       	com	r25
    b74e:	9b 01       	movw	r18, r22
    b750:	ac 01       	movw	r20, r24
    b752:	bd 01       	movw	r22, r26
    b754:	cf 01       	movw	r24, r30
    b756:	08 95       	ret

0000b758 <do_rand>:
    b758:	af 92       	push	r10
    b75a:	bf 92       	push	r11
    b75c:	cf 92       	push	r12
    b75e:	df 92       	push	r13
    b760:	ef 92       	push	r14
    b762:	ff 92       	push	r15
    b764:	0f 93       	push	r16
    b766:	1f 93       	push	r17
    b768:	cf 93       	push	r28
    b76a:	df 93       	push	r29
    b76c:	ec 01       	movw	r28, r24
    b76e:	a8 80       	ld	r10, Y
    b770:	b9 80       	ldd	r11, Y+1	; 0x01
    b772:	ca 80       	ldd	r12, Y+2	; 0x02
    b774:	db 80       	ldd	r13, Y+3	; 0x03
    b776:	a1 14       	cp	r10, r1
    b778:	b1 04       	cpc	r11, r1
    b77a:	c1 04       	cpc	r12, r1
    b77c:	d1 04       	cpc	r13, r1
    b77e:	41 f4       	brne	.+16     	; 0xb790 <do_rand+0x38>
    b780:	84 e2       	ldi	r24, 0x24	; 36
    b782:	a8 2e       	mov	r10, r24
    b784:	89 ed       	ldi	r24, 0xD9	; 217
    b786:	b8 2e       	mov	r11, r24
    b788:	8b e5       	ldi	r24, 0x5B	; 91
    b78a:	c8 2e       	mov	r12, r24
    b78c:	87 e0       	ldi	r24, 0x07	; 7
    b78e:	d8 2e       	mov	r13, r24
    b790:	c6 01       	movw	r24, r12
    b792:	b5 01       	movw	r22, r10
    b794:	2d e1       	ldi	r18, 0x1D	; 29
    b796:	33 ef       	ldi	r19, 0xF3	; 243
    b798:	41 e0       	ldi	r20, 0x01	; 1
    b79a:	50 e0       	ldi	r21, 0x00	; 0
    b79c:	0e 94 6f 5b 	call	0xb6de	; 0xb6de <__divmodsi4>
    b7a0:	27 ea       	ldi	r18, 0xA7	; 167
    b7a2:	31 e4       	ldi	r19, 0x41	; 65
    b7a4:	40 e0       	ldi	r20, 0x00	; 0
    b7a6:	50 e0       	ldi	r21, 0x00	; 0
    b7a8:	0e 94 29 5b 	call	0xb652	; 0xb652 <__mulsi3>
    b7ac:	7b 01       	movw	r14, r22
    b7ae:	8c 01       	movw	r16, r24
    b7b0:	c6 01       	movw	r24, r12
    b7b2:	b5 01       	movw	r22, r10
    b7b4:	2d e1       	ldi	r18, 0x1D	; 29
    b7b6:	33 ef       	ldi	r19, 0xF3	; 243
    b7b8:	41 e0       	ldi	r20, 0x01	; 1
    b7ba:	50 e0       	ldi	r21, 0x00	; 0
    b7bc:	0e 94 6f 5b 	call	0xb6de	; 0xb6de <__divmodsi4>
    b7c0:	ca 01       	movw	r24, r20
    b7c2:	b9 01       	movw	r22, r18
    b7c4:	2c ee       	ldi	r18, 0xEC	; 236
    b7c6:	34 ef       	ldi	r19, 0xF4	; 244
    b7c8:	4f ef       	ldi	r20, 0xFF	; 255
    b7ca:	5f ef       	ldi	r21, 0xFF	; 255
    b7cc:	0e 94 29 5b 	call	0xb652	; 0xb652 <__mulsi3>
    b7d0:	6e 0d       	add	r22, r14
    b7d2:	7f 1d       	adc	r23, r15
    b7d4:	80 1f       	adc	r24, r16
    b7d6:	91 1f       	adc	r25, r17
    b7d8:	97 ff       	sbrs	r25, 7
    b7da:	04 c0       	rjmp	.+8      	; 0xb7e4 <do_rand+0x8c>
    b7dc:	61 50       	subi	r22, 0x01	; 1
    b7de:	70 40       	sbci	r23, 0x00	; 0
    b7e0:	80 40       	sbci	r24, 0x00	; 0
    b7e2:	90 48       	sbci	r25, 0x80	; 128
    b7e4:	68 83       	st	Y, r22
    b7e6:	79 83       	std	Y+1, r23	; 0x01
    b7e8:	8a 83       	std	Y+2, r24	; 0x02
    b7ea:	9b 83       	std	Y+3, r25	; 0x03
    b7ec:	9b 01       	movw	r18, r22
    b7ee:	3f 77       	andi	r19, 0x7F	; 127
    b7f0:	c9 01       	movw	r24, r18
    b7f2:	df 91       	pop	r29
    b7f4:	cf 91       	pop	r28
    b7f6:	1f 91       	pop	r17
    b7f8:	0f 91       	pop	r16
    b7fa:	ff 90       	pop	r15
    b7fc:	ef 90       	pop	r14
    b7fe:	df 90       	pop	r13
    b800:	cf 90       	pop	r12
    b802:	bf 90       	pop	r11
    b804:	af 90       	pop	r10
    b806:	08 95       	ret

0000b808 <rand_r>:
    b808:	0e 94 ac 5b 	call	0xb758	; 0xb758 <do_rand>
    b80c:	08 95       	ret

0000b80e <rand>:
    b80e:	86 e1       	ldi	r24, 0x16	; 22
    b810:	92 e0       	ldi	r25, 0x02	; 2
    b812:	0e 94 ac 5b 	call	0xb758	; 0xb758 <do_rand>
    b816:	08 95       	ret

0000b818 <srand>:
    b818:	a0 e0       	ldi	r26, 0x00	; 0
    b81a:	b0 e0       	ldi	r27, 0x00	; 0
    b81c:	80 93 16 02 	sts	0x0216, r24
    b820:	90 93 17 02 	sts	0x0217, r25
    b824:	a0 93 18 02 	sts	0x0218, r26
    b828:	b0 93 19 02 	sts	0x0219, r27
    b82c:	08 95       	ret

0000b82e <memset>:
    b82e:	dc 01       	movw	r26, r24
    b830:	01 c0       	rjmp	.+2      	; 0xb834 <memset+0x6>
    b832:	6d 93       	st	X+, r22
    b834:	41 50       	subi	r20, 0x01	; 1
    b836:	50 40       	sbci	r21, 0x00	; 0
    b838:	e0 f7       	brcc	.-8      	; 0xb832 <memset+0x4>
    b83a:	08 95       	ret

0000b83c <__eerd_block_m2560>:
    b83c:	dc 01       	movw	r26, r24
    b83e:	cb 01       	movw	r24, r22

0000b840 <__eerd_blraw_m2560>:
    b840:	fc 01       	movw	r30, r24
    b842:	f9 99       	sbic	0x1f, 1	; 31
    b844:	fe cf       	rjmp	.-4      	; 0xb842 <__eerd_blraw_m2560+0x2>
    b846:	06 c0       	rjmp	.+12     	; 0xb854 <__eerd_blraw_m2560+0x14>
    b848:	f2 bd       	out	0x22, r31	; 34
    b84a:	e1 bd       	out	0x21, r30	; 33
    b84c:	f8 9a       	sbi	0x1f, 0	; 31
    b84e:	31 96       	adiw	r30, 0x01	; 1
    b850:	00 b4       	in	r0, 0x20	; 32
    b852:	0d 92       	st	X+, r0
    b854:	41 50       	subi	r20, 0x01	; 1
    b856:	50 40       	sbci	r21, 0x00	; 0
    b858:	b8 f7       	brcc	.-18     	; 0xb848 <__eerd_blraw_m2560+0x8>
    b85a:	08 95       	ret

0000b85c <__eerd_byte_m2560>:
    b85c:	f9 99       	sbic	0x1f, 1	; 31
    b85e:	fe cf       	rjmp	.-4      	; 0xb85c <__eerd_byte_m2560>
    b860:	92 bd       	out	0x22, r25	; 34
    b862:	81 bd       	out	0x21, r24	; 33
    b864:	f8 9a       	sbi	0x1f, 0	; 31
    b866:	99 27       	eor	r25, r25
    b868:	80 b5       	in	r24, 0x20	; 32
    b86a:	08 95       	ret

0000b86c <__eerd_word_m2560>:
    b86c:	a8 e1       	ldi	r26, 0x18	; 24
    b86e:	b0 e0       	ldi	r27, 0x00	; 0
    b870:	42 e0       	ldi	r20, 0x02	; 2
    b872:	50 e0       	ldi	r21, 0x00	; 0
    b874:	0c 94 20 5c 	jmp	0xb840	; 0xb840 <__eerd_blraw_m2560>

0000b878 <__eeupd_block_m2560>:
    b878:	dc 01       	movw	r26, r24
    b87a:	a4 0f       	add	r26, r20
    b87c:	b5 1f       	adc	r27, r21
    b87e:	41 50       	subi	r20, 0x01	; 1
    b880:	50 40       	sbci	r21, 0x00	; 0
    b882:	48 f0       	brcs	.+18     	; 0xb896 <__eeupd_block_m2560+0x1e>
    b884:	cb 01       	movw	r24, r22
    b886:	84 0f       	add	r24, r20
    b888:	95 1f       	adc	r25, r21
    b88a:	2e 91       	ld	r18, -X
    b88c:	0e 94 4d 5c 	call	0xb89a	; 0xb89a <__eeupd_r18_m2560>
    b890:	41 50       	subi	r20, 0x01	; 1
    b892:	50 40       	sbci	r21, 0x00	; 0
    b894:	d0 f7       	brcc	.-12     	; 0xb88a <__eeupd_block_m2560+0x12>
    b896:	08 95       	ret

0000b898 <__eeupd_byte_m2560>:
    b898:	26 2f       	mov	r18, r22

0000b89a <__eeupd_r18_m2560>:
    b89a:	f9 99       	sbic	0x1f, 1	; 31
    b89c:	fe cf       	rjmp	.-4      	; 0xb89a <__eeupd_r18_m2560>
    b89e:	92 bd       	out	0x22, r25	; 34
    b8a0:	81 bd       	out	0x21, r24	; 33
    b8a2:	f8 9a       	sbi	0x1f, 0	; 31
    b8a4:	01 97       	sbiw	r24, 0x01	; 1
    b8a6:	00 b4       	in	r0, 0x20	; 32
    b8a8:	02 16       	cp	r0, r18
    b8aa:	39 f0       	breq	.+14     	; 0xb8ba <__eeupd_r18_m2560+0x20>
    b8ac:	1f ba       	out	0x1f, r1	; 31
    b8ae:	20 bd       	out	0x20, r18	; 32
    b8b0:	0f b6       	in	r0, 0x3f	; 63
    b8b2:	f8 94       	cli
    b8b4:	fa 9a       	sbi	0x1f, 2	; 31
    b8b6:	f9 9a       	sbi	0x1f, 1	; 31
    b8b8:	0f be       	out	0x3f, r0	; 63
    b8ba:	08 95       	ret

0000b8bc <__eeupd_word_m2560>:
    b8bc:	01 96       	adiw	r24, 0x01	; 1
    b8be:	27 2f       	mov	r18, r23
    b8c0:	0e 94 4d 5c 	call	0xb89a	; 0xb89a <__eeupd_r18_m2560>
    b8c4:	0c 94 4c 5c 	jmp	0xb898	; 0xb898 <__eeupd_byte_m2560>

0000b8c8 <__eewr_byte_m2560>:
    b8c8:	26 2f       	mov	r18, r22

0000b8ca <__eewr_r18_m2560>:
    b8ca:	f9 99       	sbic	0x1f, 1	; 31
    b8cc:	fe cf       	rjmp	.-4      	; 0xb8ca <__eewr_r18_m2560>
    b8ce:	1f ba       	out	0x1f, r1	; 31
    b8d0:	92 bd       	out	0x22, r25	; 34
    b8d2:	81 bd       	out	0x21, r24	; 33
    b8d4:	20 bd       	out	0x20, r18	; 32
    b8d6:	0f b6       	in	r0, 0x3f	; 63
    b8d8:	f8 94       	cli
    b8da:	fa 9a       	sbi	0x1f, 2	; 31
    b8dc:	f9 9a       	sbi	0x1f, 1	; 31
    b8de:	0f be       	out	0x3f, r0	; 63
    b8e0:	01 96       	adiw	r24, 0x01	; 1
    b8e2:	08 95       	ret

0000b8e4 <__eewr_word_m2560>:
    b8e4:	0e 94 64 5c 	call	0xb8c8	; 0xb8c8 <__eewr_byte_m2560>
    b8e8:	27 2f       	mov	r18, r23
    b8ea:	0c 94 65 5c 	jmp	0xb8ca	; 0xb8ca <__eewr_r18_m2560>

0000b8ee <_exit>:
    b8ee:	f8 94       	cli

0000b8f0 <__stop_program>:
    b8f0:	ff cf       	rjmp	.-2      	; 0xb8f0 <__stop_program>
