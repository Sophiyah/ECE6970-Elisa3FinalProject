
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  00009f4c  00009fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009f4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000963  0080023a  0080023a  0000a01a  2**0
                  ALLOC
  3 .debug_aranges 00000220  00000000  00000000  0000a01a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002718  00000000  00000000  0000a23a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004d76  00000000  00000000  0000c952  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000118e  00000000  00000000  000116c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006a2d  00000000  00000000  00012856  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008e0  00000000  00000000  00019284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001d02  00000000  00000000  00019b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000da9  00000000  00000000  0001b866  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  0001c60f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      14:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      1c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      20:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      24:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      28:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_10>
      2c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      30:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      34:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__vector_13>
      38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      3c:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__vector_15>
      40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      44:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      48:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      4c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      50:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      54:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      58:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      5c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      60:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      64:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__vector_25>
      68:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      6c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      70:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      74:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__vector_29>
      78:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      7c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      80:	0c 94 5f 23 	jmp	0x46be	; 0x46be <__vector_32>
      84:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <__vector_33>
      88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      8c:	0c 94 c8 22 	jmp	0x4590	; 0x4590 <__vector_35>
      90:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      94:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      98:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      9c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a8:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <__vector_42>
      ac:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <__vector_43>
      b0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      b4:	0c 94 fb 21 	jmp	0x43f6	; 0x43f6 <__vector_45>
      b8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      bc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      cc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      dc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      e0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      e4:	97 0a       	sbc	r9, r23
      e6:	82 0a       	sbc	r8, r18
      e8:	59 0a       	sbc	r5, r25
      ea:	3e 0a       	sbc	r3, r30
      ec:	19 0a       	sbc	r1, r25
      ee:	e3 09       	sbc	r30, r3
      f0:	b5 09       	sbc	r27, r5
      f2:	f9 09       	sbc	r31, r9
      f4:	82 09       	sbc	r24, r2
      f6:	66 09       	sbc	r22, r6
      f8:	06 09       	sbc	r16, r6
      fa:	06 09       	sbc	r16, r6
      fc:	06 09       	sbc	r16, r6
      fe:	06 09       	sbc	r16, r6
     100:	06 09       	sbc	r16, r6
     102:	06 09       	sbc	r16, r6
     104:	5a 09       	sbc	r21, r10
     106:	4f 09       	sbc	r20, r15
     108:	06 09       	sbc	r16, r6
     10a:	06 09       	sbc	r16, r6
     10c:	06 09       	sbc	r16, r6
     10e:	06 09       	sbc	r16, r6
     110:	06 09       	sbc	r16, r6
     112:	06 09       	sbc	r16, r6
     114:	06 09       	sbc	r16, r6
     116:	06 09       	sbc	r16, r6
     118:	06 09       	sbc	r16, r6
     11a:	06 09       	sbc	r16, r6
     11c:	06 09       	sbc	r16, r6
     11e:	06 09       	sbc	r16, r6
     120:	82 09       	sbc	r24, r2
     122:	59 0a       	sbc	r5, r25
     124:	43 09       	sbc	r20, r3
     126:	36 09       	sbc	r19, r6
     128:	06 09       	sbc	r16, r6
     12a:	06 09       	sbc	r16, r6
     12c:	06 09       	sbc	r16, r6
     12e:	06 09       	sbc	r16, r6
     130:	06 09       	sbc	r16, r6
     132:	06 09       	sbc	r16, r6
     134:	06 09       	sbc	r16, r6
     136:	06 09       	sbc	r16, r6
     138:	06 09       	sbc	r16, r6
     13a:	06 09       	sbc	r16, r6
     13c:	06 09       	sbc	r16, r6
     13e:	06 09       	sbc	r16, r6
     140:	19 0a       	sbc	r1, r25
     142:	b5 09       	sbc	r27, r5
     144:	06 09       	sbc	r16, r6
     146:	06 09       	sbc	r16, r6
     148:	97 0a       	sbc	r9, r23
     14a:	e3 09       	sbc	r30, r3
     14c:	26 09       	sbc	r18, r6
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ec e4       	ldi	r30, 0x4C	; 76
     1b2:	ff e9       	ldi	r31, 0x9F	; 159
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	aa 33       	cpi	r26, 0x3A	; 58
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	1b e0       	ldi	r17, 0x0B	; 11
     1c6:	aa e3       	ldi	r26, 0x3A	; 58
     1c8:	b2 e0       	ldi	r27, 0x02	; 2
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	ad 39       	cpi	r26, 0x9D	; 157
     1d0:	b1 07       	cpc	r27, r17
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
     1d8:	0c 94 a4 4f 	jmp	0x9f48	; 0x9f48 <_exit>

000001dc <__bad_interrupt>:
     1dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e0 <main>:


int main(void) {


	initPeripherals();
     1e0:	0e 94 2e 10 	call	0x205c	; 0x205c <initPeripherals>
	calibrateSensors();
     1e4:	0e 94 e1 39 	call	0x73c2	; 0x73c2 <calibrateSensors>

	initBehaviors();
     1e8:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <initBehaviors>

	initPeripherals();
     1ec:	0e 94 2e 10 	call	0x205c	; 0x205c <initPeripherals>
	calibrateSensors();
     1f0:	0e 94 e1 39 	call	0x73c2	; 0x73c2 <calibrateSensors>

	

	//GREEN_LED4_ON;
	while (1) {
      getMap();
     1f4:	0e 94 f7 4a 	call	0x95ee	; 0x95ee <getMap>
     1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <main+0x14>

000001fa <SPI_WAIT>:
#define SPI_SCK PORTB1	// SCK pin (SPI clock)
#define SPI_SS PORTB0	// SS pin (Slave Select)

// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
     1fa:	20 91 34 03 	lds	r18, 0x0334
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     202:	0d b4       	in	r0, 0x2d	; 45
     204:	07 fc       	sbrc	r0, 7
     206:	09 c0       	rjmp	.+18     	; 0x21a <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     208:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     20a:	37 e2       	ldi	r19, 0x27	; 39
     20c:	80 31       	cpi	r24, 0x10	; 16
     20e:	93 07       	cpc	r25, r19
     210:	c0 f3       	brcs	.-16     	; 0x202 <SPI_WAIT+0x8>
     212:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     214:	0d b4       	in	r0, 0x2d	; 45
     216:	07 fe       	sbrs	r0, 7
     218:	f7 cf       	rjmp	.-18     	; 0x208 <SPI_WAIT+0xe>
     21a:	20 93 34 03 	sts	0x0334, r18
			return;
		}
	}
}
     21e:	08 95       	ret

00000220 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     220:	84 b1       	in	r24, 0x04	; 4
     222:	80 7f       	andi	r24, 0xF0	; 240
     224:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     226:	84 b1       	in	r24, 0x04	; 4
     228:	87 60       	ori	r24, 0x07	; 7
     22a:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     22c:	80 e5       	ldi	r24, 0x50	; 80
     22e:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     230:	8d b5       	in	r24, 0x2d	; 45
     232:	81 60       	ori	r24, 0x01	; 1
     234:	8d bd       	out	0x2d, r24	; 45

}
     236:	08 95       	ret

00000238 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     238:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     23a:	1d bc       	out	0x2d, r1	; 45
}
     23c:	08 95       	ret

0000023e <SPI_Write_Block>:
		  }
          buffer[i] = SPDR;
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
     23e:	48 2f       	mov	r20, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
     240:	66 23       	and	r22, r22
     242:	e9 f0       	breq	.+58     	; 0x27e <SPI_Write_Block+0x40>
     244:	9c 01       	movw	r18, r24
     246:	f9 01       	movw	r30, r18
          SPDR = data[i];
     248:	80 81       	ld	r24, Z
     24a:	8e bd       	out	0x2e, r24	; 46
     24c:	20 91 34 03 	lds	r18, 0x0334
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     254:	0d b4       	in	r0, 0x2d	; 45
     256:	07 fc       	sbrc	r0, 7
     258:	09 c0       	rjmp	.+18     	; 0x26c <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     25a:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     25c:	37 e2       	ldi	r19, 0x27	; 39
     25e:	80 31       	cpi	r24, 0x10	; 16
     260:	93 07       	cpc	r25, r19
     262:	c0 f3       	brcs	.-16     	; 0x254 <SPI_Write_Block+0x16>
     264:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     266:	0d b4       	in	r0, 0x2d	; 45
     268:	07 fe       	sbrs	r0, 7
     26a:	f7 cf       	rjmp	.-18     	; 0x25a <SPI_Write_Block+0x1c>
     26c:	20 93 34 03 	sts	0x0334, r18
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     270:	22 23       	and	r18, r18
     272:	29 f4       	brne	.+10     	; 0x27e <SPI_Write_Block+0x40>
			return;
     274:	31 96       	adiw	r30, 0x01	; 1
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     276:	8e 2f       	mov	r24, r30
     278:	84 1b       	sub	r24, r20
     27a:	86 17       	cp	r24, r22
     27c:	28 f3       	brcs	.-54     	; 0x248 <SPI_Write_Block+0xa>
     27e:	08 95       	ret

00000280 <SPI_ReadWrite_Block>:

	SPCR = 0x00;
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	ec 01       	movw	r28, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
     286:	44 23       	and	r20, r20
     288:	21 f1       	breq	.+72     	; 0x2d2 <SPI_ReadWrite_Block+0x52>
     28a:	a0 e0       	ldi	r26, 0x00	; 0
     28c:	b0 e0       	ldi	r27, 0x00	; 0
          SPDR = data[i];
     28e:	fe 01       	movw	r30, r28
     290:	ea 0f       	add	r30, r26
     292:	fb 1f       	adc	r31, r27
     294:	80 81       	ld	r24, Z
     296:	8e bd       	out	0x2e, r24	; 46
     298:	80 91 34 03 	lds	r24, 0x0334
     29c:	21 e0       	ldi	r18, 0x01	; 1
     29e:	30 e0       	ldi	r19, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     2a0:	0d b4       	in	r0, 0x2d	; 45
     2a2:	07 fc       	sbrc	r0, 7
     2a4:	0a c0       	rjmp	.+20     	; 0x2ba <SPI_ReadWrite_Block+0x3a>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     2a6:	2f 5f       	subi	r18, 0xFF	; 255
     2a8:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     2aa:	97 e2       	ldi	r25, 0x27	; 39
     2ac:	20 31       	cpi	r18, 0x10	; 16
     2ae:	39 07       	cpc	r19, r25
     2b0:	b8 f3       	brcs	.-18     	; 0x2a0 <SPI_ReadWrite_Block+0x20>
     2b2:	81 e0       	ldi	r24, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     2b4:	0d b4       	in	r0, 0x2d	; 45
     2b6:	07 fe       	sbrs	r0, 7
     2b8:	f6 cf       	rjmp	.-20     	; 0x2a6 <SPI_ReadWrite_Block+0x26>
     2ba:	80 93 34 03 	sts	0x0334, r24
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     2be:	88 23       	and	r24, r24
     2c0:	41 f4       	brne	.+16     	; 0x2d2 <SPI_ReadWrite_Block+0x52>
			return;
		  }
          buffer[i] = SPDR;
     2c2:	8e b5       	in	r24, 0x2e	; 46
     2c4:	fb 01       	movw	r30, r22
     2c6:	ea 0f       	add	r30, r26
     2c8:	fb 1f       	adc	r31, r27
     2ca:	80 83       	st	Z, r24
     2cc:	11 96       	adiw	r26, 0x01	; 1
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     2ce:	a4 17       	cp	r26, r20
     2d0:	f0 f2       	brcs	.-68     	; 0x28e <SPI_ReadWrite_Block+0xe>
		  if(spiCommError) {
			return;
		  }
          buffer[i] = SPDR;
    }
}
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     2d8:	8e bd       	out	0x2e, r24	; 46
     2da:	20 91 34 03 	lds	r18, 0x0334
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     2e2:	0d b4       	in	r0, 0x2d	; 45
     2e4:	07 fc       	sbrc	r0, 7
     2e6:	09 c0       	rjmp	.+18     	; 0x2fa <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     2e8:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     2ea:	37 e2       	ldi	r19, 0x27	; 39
     2ec:	80 31       	cpi	r24, 0x10	; 16
     2ee:	93 07       	cpc	r25, r19
     2f0:	c0 f3       	brcs	.-16     	; 0x2e2 <SPI_Write_Byte+0xa>
     2f2:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     2f4:	0d b4       	in	r0, 0x2d	; 45
     2f6:	07 fe       	sbrs	r0, 7
     2f8:	f7 cf       	rjmp	.-18     	; 0x2e8 <SPI_Write_Byte+0x10>
     2fa:	20 93 34 03 	sts	0x0334, r18
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
     2fe:	8e b5       	in	r24, 0x2e	; 46
}
     300:	08 95       	ret

00000302 <rfEnableDebugMode>:
	}

}

void rfEnableDebugMode() {
	rfDebugMode = 1;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	80 93 35 03 	sts	0x0335, r24
	rfDebugCounter = 3;
     308:	83 e0       	ldi	r24, 0x03	; 3
     30a:	80 93 36 03 	sts	0x0336, r24
}
     30e:	08 95       	ret

00000310 <rfDisableDebugMode>:

void rfDisableDebugMode() {
	rfDebugMode = 0;
     310:	10 92 35 03 	sts	0x0335, r1
}
     314:	08 95       	ret

00000316 <rfDebugNextPacket>:
		rfDebugCounter = 3;
	}
}

void rfDebugNextPacket() {
	rfDebugCounter = 3;
     316:	83 e0       	ldi	r24, 0x03	; 3
     318:	80 93 36 03 	sts	0x0336, r24
}
     31c:	08 95       	ret

0000031e <flushTxFifo>:
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
     31e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     320:	81 ee       	ldi	r24, 0xE1	; 225
     322:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     326:	28 9a       	sbi	0x05, 0	; 5

}
     328:	08 95       	ret

0000032a <readPayloadWidthFromTopFifo>:
}

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
     32a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
     32c:	80 e6       	ldi	r24, 0x60	; 96
     32e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
     332:	8f ef       	ldi	r24, 0xFF	; 255
     334:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
     338:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
     33a:	08 95       	ret

0000033c <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     33c:	1f 93       	push	r17
     33e:	16 2f       	mov	r17, r22
    mirf_CSN_lo;
     340:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     342:	8f 71       	andi	r24, 0x1F	; 31
     344:	80 62       	ori	r24, 0x20	; 32
     346:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     34a:	81 2f       	mov	r24, r17
     34c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     350:	28 9a       	sbi	0x05, 0	; 5
}
     352:	1f 91       	pop	r17
     354:	08 95       	ret

00000356 <flush_rx_fifo>:
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     356:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     358:	82 ee       	ldi	r24, 0xE2	; 226
     35a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     35e:	28 9a       	sbi	0x05, 0	; 5

}
     360:	08 95       	ret

00000362 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     362:	80 91 55 05 	lds	r24, 0x0555
     366:	88 23       	and	r24, r24
     368:	11 f0       	breq	.+4      	; 0x36e <mirf_data_ready+0xc>
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	08 95       	ret
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     36e:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     370:	8f ef       	ldi	r24, 0xFF	; 255
     372:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     376:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     378:	80 74       	andi	r24, 0x40	; 64

}
     37a:	08 95       	ret

0000037c <mirf_write_register>:
    mirf_CSN_hi;
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	8b 01       	movw	r16, r22
     384:	f4 2e       	mov	r15, r20
    mirf_CSN_lo;
     386:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     388:	8f 71       	andi	r24, 0x1F	; 31
     38a:	80 62       	ori	r24, 0x20	; 32
     38c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     390:	c8 01       	movw	r24, r16
     392:	6f 2d       	mov	r22, r15
     394:	0e 94 1f 01 	call	0x23e	; 0x23e <SPI_Write_Block>
    mirf_CSN_hi;
     398:	28 9a       	sbi	0x05, 0	; 5
}
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	08 95       	ret

000003a2 <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	8b 01       	movw	r16, r22
     3aa:	f4 2e       	mov	r15, r20
    mirf_CSN_lo;
     3ac:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     3ae:	8f 71       	andi	r24, 0x1F	; 31
     3b0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     3b4:	c8 01       	movw	r24, r16
     3b6:	b8 01       	movw	r22, r16
     3b8:	4f 2d       	mov	r20, r15
     3ba:	0e 94 40 01 	call	0x280	; 0x280 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     3be:	28 9a       	sbi	0x05, 0	; 5
}
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	08 95       	ret

000003c8 <writeAckPayload>:
    mirf_CSN_hi;                    // Pull up chip select
    
    mirf_CE_hi;                     // Start transmission
}

void writeAckPayload(unsigned char *data, unsigned char size) {
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	08 2f       	mov	r16, r24
     3d4:	f9 2e       	mov	r15, r25
     3d6:	16 2f       	mov	r17, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
     3d8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     3da:	81 ee       	ldi	r24, 0xE1	; 225
     3dc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     3e0:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     3e2:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     3e4:	88 ea       	ldi	r24, 0xA8	; 168
     3e6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     3ea:	11 23       	and	r17, r17
     3ec:	59 f0       	breq	.+22     	; 0x404 <writeAckPayload+0x3c>
     3ee:	80 2f       	mov	r24, r16
     3f0:	9f 2d       	mov	r25, r15
     3f2:	9c 01       	movw	r18, r24
     3f4:	e9 01       	movw	r28, r18
		SPI_Write_Byte(data[k]);
     3f6:	89 91       	ld	r24, Y+
     3f8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     3fc:	9e 01       	movw	r18, r28
     3fe:	20 1b       	sub	r18, r16
     400:	21 17       	cp	r18, r17
     402:	c8 f3       	brcs	.-14     	; 0x3f6 <writeAckPayload+0x2e>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     404:	28 9a       	sbi	0x05, 0	; 5


}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	08 95       	ret

00000412 <readPayloadWidthFromPipe0>:
    mirf_CSN_hi;
	
	return pWidth;
}

uint8_t readPayloadWidthFromPipe0() {
     412:	df 93       	push	r29
     414:	cf 93       	push	r28
     416:	0f 92       	push	r0
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
     41c:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     41e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     420:	81 e1       	ldi	r24, 0x11	; 17
     422:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     426:	be 01       	movw	r22, r28
     428:	6f 5f       	subi	r22, 0xFF	; 255
     42a:	7f 4f       	sbci	r23, 0xFF	; 255
     42c:	cb 01       	movw	r24, r22
     42e:	41 e0       	ldi	r20, 0x01	; 1
     430:	0e 94 40 01 	call	0x280	; 0x280 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     434:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	0f 90       	pop	r0
     43a:	cf 91       	pop	r28
     43c:	df 91       	pop	r29
     43e:	08 95       	ret

00000440 <rx_fifo_is_empty>:
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}

uint8_t rx_fifo_is_empty() {
     440:	df 93       	push	r29
     442:	cf 93       	push	r28
     444:	0f 92       	push	r0
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     44a:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     44c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     44e:	87 e1       	ldi	r24, 0x17	; 23
     450:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     454:	be 01       	movw	r22, r28
     456:	6f 5f       	subi	r22, 0xFF	; 255
     458:	7f 4f       	sbci	r23, 0xFF	; 255
     45a:	cb 01       	movw	r24, r22
     45c:	41 e0       	ldi	r20, 0x01	; 1
     45e:	0e 94 40 01 	call	0x280	; 0x280 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     462:	28 9a       	sbi	0x05, 0	; 5
     464:	89 81       	ldd	r24, Y+1	; 0x01
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
}
     466:	81 70       	andi	r24, 0x01	; 1
     468:	0f 90       	pop	r0
     46a:	cf 91       	pop	r28
     46c:	df 91       	pop	r29
     46e:	08 95       	ret

00000470 <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	8c 01       	movw	r16, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     476:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     478:	80 e3       	ldi	r24, 0x30	; 48
     47a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     47e:	c8 01       	movw	r24, r16
     480:	65 e0       	ldi	r22, 0x05	; 5
     482:	0e 94 1f 01 	call	0x23e	; 0x23e <SPI_Write_Block>
    mirf_CSN_hi;
     486:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	8c 01       	movw	r16, r24
    mirf_CE_lo;
     494:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     496:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     498:	8a e2       	ldi	r24, 0x2A	; 42
     49a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     49e:	c8 01       	movw	r24, r16
     4a0:	65 e0       	ldi	r22, 0x05	; 5
     4a2:	0e 94 1f 01 	call	0x23e	; 0x23e <SPI_Write_Block>
    mirf_CSN_hi;
     4a6:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     4a8:	2c 9a       	sbi	0x05, 4	; 5
}
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	08 95       	ret

000004b0 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	ec 01       	movw	r28, r24
     4b8:	16 2f       	mov	r17, r22
    while (PTX) {}                  // Wait until last paket is send
     4ba:	80 91 55 05 	lds	r24, 0x0555
     4be:	88 23       	and	r24, r24
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <mirf_send+0xa>

    mirf_CE_lo;
     4c2:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	80 93 55 05 	sts	0x0555, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4cc:	80 e2       	ldi	r24, 0x20	; 32
     4ce:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4d2:	8a e4       	ldi	r24, 0x4A	; 74
     4d4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     4d8:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     4da:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     4dc:	81 ee       	ldi	r24, 0xE1	; 225
     4de:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     4e2:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     4e4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     4e6:	80 ea       	ldi	r24, 0xA0	; 160
     4e8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     4ec:	ce 01       	movw	r24, r28
     4ee:	61 2f       	mov	r22, r17
     4f0:	0e 94 1f 01 	call	0x23e	; 0x23e <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     4f4:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     4f6:	2c 9a       	sbi	0x05, 4	; 5
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	08 95       	ret

00000500 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	df 93       	push	r29
     506:	cf 93       	push	r28
     508:	00 d0       	rcall	.+0      	; 0x50a <mirf_config+0xa>
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     50e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     510:	80 e2       	ldi	r24, 0x20	; 32
     512:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     516:	8d e0       	ldi	r24, 0x0D	; 13
     518:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     51c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     51e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     520:	83 e2       	ldi	r24, 0x23	; 35
     522:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     52c:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
     52e:	80 91 31 03 	lds	r24, 0x0331
     532:	90 91 32 03 	lds	r25, 0x0332
     536:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
     538:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     53a:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     53c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     53e:	80 e3       	ldi	r24, 0x30	; 48
     540:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     544:	8e 01       	movw	r16, r28
     546:	0f 5f       	subi	r16, 0xFF	; 255
     548:	1f 4f       	sbci	r17, 0xFF	; 255
     54a:	c8 01       	movw	r24, r16
     54c:	63 e0       	ldi	r22, 0x03	; 3
     54e:	0e 94 1f 01 	call	0x23e	; 0x23e <SPI_Write_Block>
    mirf_CSN_hi;
     552:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     554:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     556:	8a e2       	ldi	r24, 0x2A	; 42
     558:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     55c:	c8 01       	movw	r24, r16
     55e:	63 e0       	ldi	r22, 0x03	; 3
     560:	0e 94 1f 01 	call	0x23e	; 0x23e <SPI_Write_Block>
    mirf_CSN_hi;
     564:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     566:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     568:	81 e2       	ldi	r24, 0x21	; 33
     56a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     574:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     576:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     578:	82 e2       	ldi	r24, 0x22	; 34
     57a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     584:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     586:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     588:	84 e2       	ldi	r24, 0x24	; 36
     58a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     58e:	82 e1       	ldi	r24, 0x12	; 18
     590:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     594:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     596:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     598:	85 e2       	ldi	r24, 0x25	; 37
     59a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     59e:	88 e2       	ldi	r24, 0x28	; 40
     5a0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     5a4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5a8:	81 e3       	ldi	r24, 0x31	; 49
     5aa:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5ae:	8d e0       	ldi	r24, 0x0D	; 13
     5b0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     5b4:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     5b6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     5b8:	80 e5       	ldi	r24, 0x50	; 80
     5ba:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     5be:	83 e7       	ldi	r24, 0x73	; 115
     5c0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     5c4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5c8:	8c e3       	ldi	r24, 0x3C	; 60
     5ca:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     5d4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5d6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5d8:	8d e3       	ldi	r24, 0x3D	; 61
     5da:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5de:	86 e0       	ldi	r24, 0x06	; 6
     5e0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     5e4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5e8:	80 e2       	ldi	r24, 0x20	; 32
     5ea:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5ee:	8f e0       	ldi	r24, 0x0F	; 15
     5f0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     5f4:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	cf 91       	pop	r28
     5fe:	df 91       	pop	r29
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	08 95       	ret

00000606 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     606:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     608:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     60a:	0e 94 80 02 	call	0x500	; 0x500 <mirf_config>
}
     60e:	08 95       	ret

00000610 <mirf_get_data>:

}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	8c 01       	movw	r16, r24
    mirf_CSN_lo;                               		// Pull down chip select
     616:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     618:	81 e6       	ldi	r24, 0x61	; 97
     61a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     61e:	c8 01       	movw	r24, r16
     620:	b8 01       	movw	r22, r16
     622:	4d e0       	ldi	r20, 0x0D	; 13
     624:	0e 94 40 01 	call	0x280	; 0x280 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     628:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     62a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     62c:	87 e2       	ldi	r24, 0x27	; 39
     62e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     632:	80 e4       	ldi	r24, 0x40	; 64
     634:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     638:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	08 95       	ret

00000640 <handleRFCommands>:
    SPI_Write_Byte(FLUSH_TX);
    mirf_CSN_hi;

}

void handleRFCommands() {
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	df 93       	push	r29
     646:	cf 93       	push	r28
     648:	0f 92       	push	r0
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     64e:	80 91 55 05 	lds	r24, 0x0555
     652:	88 23       	and	r24, r24
     654:	31 f0       	breq	.+12     	; 0x662 <handleRFCommands+0x22>

		

	}

}
     656:	0f 90       	pop	r0
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     662:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     664:	8f ef       	ldi	r24, 0xFF	; 255
     666:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     66a:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
     66c:	86 ff       	sbrs	r24, 6
     66e:	f3 cf       	rjmp	.-26     	; 0x656 <handleRFCommands+0x16>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
     670:	80 91 33 03 	lds	r24, 0x0333
     674:	82 60       	ori	r24, 0x02	; 2
     676:	80 93 33 03 	sts	0x0333, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     67a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     67c:	87 e2       	ldi	r24, 0x27	; 39
     67e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     682:	80 e7       	ldi	r24, 0x70	; 112
     684:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     688:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
     68a:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     68c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     68e:	87 e1       	ldi	r24, 0x17	; 23
     690:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     694:	be 01       	movw	r22, r28
     696:	6f 5f       	subi	r22, 0xFF	; 255
     698:	7f 4f       	sbci	r23, 0xFF	; 255
     69a:	cb 01       	movw	r24, r22
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	0e 94 40 01 	call	0x280	; 0x280 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     6a2:	28 9a       	sbi	0x05, 0	; 5
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	80 fd       	sbrc	r24, 0
     6a8:	d6 cf       	rjmp	.-84     	; 0x656 <handleRFCommands+0x16>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
     6aa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     6ac:	81 e6       	ldi	r24, 0x61	; 97
     6ae:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     6b2:	8a ea       	ldi	r24, 0xAA	; 170
     6b4:	99 e0       	ldi	r25, 0x09	; 9
     6b6:	bc 01       	movw	r22, r24
     6b8:	4d e0       	ldi	r20, 0x0D	; 13
     6ba:	0e 94 40 01 	call	0x280	; 0x280 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     6be:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6c0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6c2:	87 e2       	ldi	r24, 0x27	; 39
     6c4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6c8:	80 e4       	ldi	r24, 0x40	; 64
     6ca:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     6ce:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     6d0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     6d2:	82 ee       	ldi	r24, 0xE2	; 226
     6d4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     6d8:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
     6da:	80 91 35 03 	lds	r24, 0x0335
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <handleRFCommands+0xa4>
     6e2:	91 c2       	rjmp	.+1314   	; 0xc06 <handleRFCommands+0x5c6>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     6e4:	80 91 aa 09 	lds	r24, 0x09AA
     6e8:	88 23       	and	r24, r24
     6ea:	b9 f4       	brne	.+46     	; 0x71a <handleRFCommands+0xda>
     6ec:	80 91 ab 09 	lds	r24, 0x09AB
     6f0:	88 23       	and	r24, r24
     6f2:	99 f4       	brne	.+38     	; 0x71a <handleRFCommands+0xda>
     6f4:	80 91 ac 09 	lds	r24, 0x09AC
     6f8:	88 23       	and	r24, r24
     6fa:	79 f4       	brne	.+30     	; 0x71a <handleRFCommands+0xda>
     6fc:	80 91 ad 09 	lds	r24, 0x09AD
     700:	88 30       	cpi	r24, 0x08	; 8
     702:	59 f4       	brne	.+22     	; 0x71a <handleRFCommands+0xda>
     704:	80 91 ae 09 	lds	r24, 0x09AE
     708:	88 23       	and	r24, r24
     70a:	39 f4       	brne	.+14     	; 0x71a <handleRFCommands+0xda>
     70c:	80 91 af 09 	lds	r24, 0x09AF
     710:	88 23       	and	r24, r24
     712:	19 f4       	brne	.+6      	; 0x71a <handleRFCommands+0xda>

				sleep(60);
     714:	8c e3       	ldi	r24, 0x3C	; 60
     716:	0e 94 8c 10 	call	0x2118	; 0x2118 <sleep>

			}

			if(calibrateOdomFlag==0) { 
     71a:	80 91 8e 05 	lds	r24, 0x058E
     71e:	88 23       	and	r24, r24
     720:	41 f5       	brne	.+80     	; 0x772 <handleRFCommands+0x132>
				speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     722:	80 91 ae 09 	lds	r24, 0x09AE
     726:	28 2f       	mov	r18, r24
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	2f 77       	andi	r18, 0x7F	; 127
     72c:	30 70       	andi	r19, 0x00	; 0
     72e:	30 93 30 03 	sts	0x0330, r19
     732:	20 93 2f 03 	sts	0x032F, r18
				speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     736:	60 91 af 09 	lds	r22, 0x09AF
     73a:	46 2f       	mov	r20, r22
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	4f 77       	andi	r20, 0x7F	; 127
     740:	50 70       	andi	r21, 0x00	; 0
     742:	50 93 2e 03 	sts	0x032E, r21
     746:	40 93 2d 03 	sts	0x032D, r20
											// in the same range of the measured speed that is 0..800.
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
     74a:	87 fd       	sbrc	r24, 7
     74c:	27 c2       	rjmp	.+1102   	; 0xb9c <handleRFCommands+0x55c>
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
				} else {								// backward
					pwm_right_desired = -(speedr);
     74e:	88 27       	eor	r24, r24
     750:	99 27       	eor	r25, r25
     752:	82 1b       	sub	r24, r18
     754:	93 0b       	sbc	r25, r19
     756:	90 93 16 03 	sts	0x0316, r25
     75a:	80 93 15 03 	sts	0x0315, r24
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
     75e:	67 fd       	sbrc	r22, 7
     760:	83 c3       	rjmp	.+1798   	; 0xe68 <handleRFCommands+0x828>
					pwm_left_desired = speedl;
				} else {								// backward
					pwm_left_desired = -(speedl);
     762:	88 27       	eor	r24, r24
     764:	99 27       	eor	r25, r25
     766:	84 1b       	sub	r24, r20
     768:	95 0b       	sbc	r25, r21
     76a:	90 93 18 03 	sts	0x0318, r25
     76e:	80 93 17 03 	sts	0x0317, r24

			}


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
     772:	20 91 aa 09 	lds	r18, 0x09AA
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	30 93 93 09 	sts	0x0993, r19
     77c:	20 93 92 09 	sts	0x0992, r18
     780:	e0 91 ab 09 	lds	r30, 0x09AB
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	f0 93 95 09 	sts	0x0995, r31
     78a:	e0 93 94 09 	sts	0x0994, r30
     78e:	00 91 ac 09 	lds	r16, 0x09AC
     792:	10 e0       	ldi	r17, 0x00	; 0
     794:	10 93 97 09 	sts	0x0997, r17
     798:	00 93 96 09 	sts	0x0996, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     79c:	92 2f       	mov	r25, r18
     79e:	88 27       	eor	r24, r24
     7a0:	82 1b       	sub	r24, r18
     7a2:	93 0b       	sbc	r25, r19
     7a4:	64 e6       	ldi	r22, 0x64	; 100
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	0e 94 7a 4e 	call	0x9cf4	; 0x9cf4 <__udivmodhi4>
     7ac:	26 2f       	mov	r18, r22
     7ae:	20 95       	com	r18
     7b0:	20 93 08 02 	sts	0x0208, r18
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     7b4:	9e 2f       	mov	r25, r30
     7b6:	88 27       	eor	r24, r24
     7b8:	8e 1b       	sub	r24, r30
     7ba:	9f 0b       	sbc	r25, r31
     7bc:	64 e6       	ldi	r22, 0x64	; 100
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	0e 94 7a 4e 	call	0x9cf4	; 0x9cf4 <__udivmodhi4>
     7c4:	60 95       	com	r22
     7c6:	60 93 0a 02 	sts	0x020A, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     7ca:	90 2f       	mov	r25, r16
     7cc:	88 27       	eor	r24, r24
     7ce:	80 1b       	sub	r24, r16
     7d0:	91 0b       	sbc	r25, r17
     7d2:	64 e6       	ldi	r22, 0x64	; 100
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	0e 94 7a 4e 	call	0x9cf4	; 0x9cf4 <__udivmodhi4>
     7da:	60 95       	com	r22
     7dc:	60 93 09 02 	sts	0x0209, r22
			updateRedLed(pwm_red);
     7e0:	82 2f       	mov	r24, r18
     7e2:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <updateRedLed>
			updateGreenLed(pwm_green);
     7e6:	80 91 09 02 	lds	r24, 0x0209
     7ea:	0e 94 14 36 	call	0x6c28	; 0x6c28 <updateGreenLed>
			updateBlueLed(pwm_blue);
     7ee:	80 91 0a 02 	lds	r24, 0x020A
     7f2:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     7f6:	20 91 ad 09 	lds	r18, 0x09AD
     7fa:	92 2f       	mov	r25, r18
     7fc:	20 ff       	sbrs	r18, 0
     7fe:	11 c1       	rjmp	.+546    	; 0xa22 <handleRFCommands+0x3e2>
				LED_IR1_LOW;
     800:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     802:	91 ff       	sbrs	r25, 1
     804:	3c c1       	rjmp	.+632    	; 0xa7e <handleRFCommands+0x43e>
				LED_IR2_LOW;
     806:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     808:	92 ff       	sbrs	r25, 2
     80a:	36 c1       	rjmp	.+620    	; 0xa78 <handleRFCommands+0x438>
				irEnabled = 1;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	80 93 0e 02 	sts	0x020E, r24
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     812:	94 fd       	sbrc	r25, 4
     814:	e6 c1       	rjmp	.+972    	; 0xbe2 <handleRFCommands+0x5a2>
				calibrateSensors();
				resetOdometry();
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     816:	96 ff       	sbrs	r25, 6
     818:	2c c1       	rjmp	.+600    	; 0xa72 <handleRFCommands+0x432>
				obstacleAvoidanceEnabled = 1;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 94 04 	sts	0x0494, r24
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     820:	27 fd       	sbrc	r18, 7
     822:	e7 c1       	rjmp	.+974    	; 0xbf2 <handleRFCommands+0x5b2>
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
     824:	10 92 95 04 	sts	0x0495, r1
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
     828:	80 91 b0 09 	lds	r24, 0x09B0
     82c:	80 ff       	sbrs	r24, 0
     82e:	1b c1       	rjmp	.+566    	; 0xa66 <handleRFCommands+0x426>
					GREEN_LED0_ON;
     830:	80 91 0b 01 	lds	r24, 0x010B
     834:	8e 7f       	andi	r24, 0xFE	; 254
     836:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
     83a:	80 91 b0 09 	lds	r24, 0x09B0
     83e:	81 ff       	sbrs	r24, 1
     840:	0c c1       	rjmp	.+536    	; 0xa5a <handleRFCommands+0x41a>
					GREEN_LED1_ON;
     842:	80 91 0b 01 	lds	r24, 0x010B
     846:	8d 7f       	andi	r24, 0xFD	; 253
     848:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
     84c:	80 91 b0 09 	lds	r24, 0x09B0
     850:	82 ff       	sbrs	r24, 2
     852:	fd c0       	rjmp	.+506    	; 0xa4e <handleRFCommands+0x40e>
					GREEN_LED2_ON;
     854:	80 91 0b 01 	lds	r24, 0x010B
     858:	8b 7f       	andi	r24, 0xFB	; 251
     85a:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
     85e:	80 91 b0 09 	lds	r24, 0x09B0
     862:	83 ff       	sbrs	r24, 3
     864:	f2 c0       	rjmp	.+484    	; 0xa4a <handleRFCommands+0x40a>
					GREEN_LED3_ON;
     866:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
     868:	80 91 b0 09 	lds	r24, 0x09B0
     86c:	84 ff       	sbrs	r24, 4
     86e:	e7 c0       	rjmp	.+462    	; 0xa3e <handleRFCommands+0x3fe>
					GREEN_LED4_ON;
     870:	80 91 0b 01 	lds	r24, 0x010B
     874:	8f 7e       	andi	r24, 0xEF	; 239
     876:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
     87a:	80 91 b0 09 	lds	r24, 0x09B0
     87e:	85 ff       	sbrs	r24, 5
     880:	d8 c0       	rjmp	.+432    	; 0xa32 <handleRFCommands+0x3f2>
					GREEN_LED5_ON;
     882:	80 91 0b 01 	lds	r24, 0x010B
     886:	8f 7d       	andi	r24, 0xDF	; 223
     888:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
     88c:	80 91 b0 09 	lds	r24, 0x09B0
     890:	86 ff       	sbrs	r24, 6
     892:	c9 c0       	rjmp	.+402    	; 0xa26 <handleRFCommands+0x3e6>
					GREEN_LED6_ON;
     894:	80 91 0b 01 	lds	r24, 0x010B
     898:	8f 7b       	andi	r24, 0xBF	; 191
     89a:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
     89e:	80 91 b0 09 	lds	r24, 0x09B0
     8a2:	87 fd       	sbrc	r24, 7
     8a4:	aa c1       	rjmp	.+852    	; 0xbfa <handleRFCommands+0x5ba>
					GREEN_LED7_ON;
				} else {
					GREEN_LED7_OFF;
     8a6:	80 91 0b 01 	lds	r24, 0x010B
     8aa:	80 68       	ori	r24, 0x80	; 128
     8ac:	80 93 0b 01 	sts	0x010B, r24
				}

			#endif
		
			if(currentSelector == 8) {
     8b0:	80 91 70 04 	lds	r24, 0x0470
     8b4:	88 30       	cpi	r24, 0x08	; 8
     8b6:	09 f4       	brne	.+2      	; 0x8ba <handleRFCommands+0x27a>
     8b8:	76 c1       	rjmp	.+748    	; 0xba6 <handleRFCommands+0x566>

			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
     8ba:	80 91 07 02 	lds	r24, 0x0207
     8be:	80 93 e2 08 	sts	0x08E2, r24

			switch(packetId) {
     8c2:	85 30       	cpi	r24, 0x05	; 5
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <handleRFCommands+0x288>
     8c6:	74 c2       	rjmp	.+1256   	; 0xdb0 <handleRFCommands+0x770>
     8c8:	86 30       	cpi	r24, 0x06	; 6
     8ca:	08 f0       	brcs	.+2      	; 0x8ce <handleRFCommands+0x28e>
     8cc:	da c0       	rjmp	.+436    	; 0xa82 <handleRFCommands+0x442>
     8ce:	83 30       	cpi	r24, 0x03	; 3
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <handleRFCommands+0x294>
     8d2:	f4 c1       	rjmp	.+1000   	; 0xcbc <handleRFCommands+0x67c>
     8d4:	84 30       	cpi	r24, 0x04	; 4
     8d6:	09 f0       	breq	.+2      	; 0x8da <handleRFCommands+0x29a>
     8d8:	54 c0       	rjmp	.+168    	; 0x982 <handleRFCommands+0x342>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
     8da:	80 91 7d 02 	lds	r24, 0x027D
     8de:	90 91 7e 02 	lds	r25, 0x027E
     8e2:	80 93 e3 08 	sts	0x08E3, r24
					ackPayload[2] = proximityResult[4]>>8;
     8e6:	89 2f       	mov	r24, r25
     8e8:	99 0f       	add	r25, r25
     8ea:	99 0b       	sbc	r25, r25
     8ec:	80 93 e4 08 	sts	0x08E4, r24
					ackPayload[3] = proximityResult[8]&0xFF;
     8f0:	80 91 85 02 	lds	r24, 0x0285
     8f4:	90 91 86 02 	lds	r25, 0x0286
     8f8:	80 93 e5 08 	sts	0x08E5, r24
					ackPayload[4] = proximityResult[8]>>8;
     8fc:	89 2f       	mov	r24, r25
     8fe:	99 0f       	add	r25, r25
     900:	99 0b       	sbc	r25, r25
     902:	80 93 e6 08 	sts	0x08E6, r24
					ackPayload[5] = proximityResult[9]&0xFF;
     906:	80 91 87 02 	lds	r24, 0x0287
     90a:	90 91 88 02 	lds	r25, 0x0288
     90e:	80 93 e7 08 	sts	0x08E7, r24
					ackPayload[6] = proximityResult[9]>>8;
     912:	89 2f       	mov	r24, r25
     914:	99 0f       	add	r25, r25
     916:	99 0b       	sbc	r25, r25
     918:	80 93 e8 08 	sts	0x08E8, r24
					ackPayload[7] = proximityResult[10]&0xFF;
     91c:	80 91 89 02 	lds	r24, 0x0289
     920:	90 91 8a 02 	lds	r25, 0x028A
     924:	80 93 e9 08 	sts	0x08E9, r24
					ackPayload[8] = proximityResult[10]>>8;
     928:	89 2f       	mov	r24, r25
     92a:	99 0f       	add	r25, r25
     92c:	99 0b       	sbc	r25, r25
     92e:	80 93 ea 08 	sts	0x08EA, r24
					ackPayload[9] = proximityResult[11]&0xFF;
     932:	80 91 8b 02 	lds	r24, 0x028B
     936:	90 91 8c 02 	lds	r25, 0x028C
     93a:	80 93 eb 08 	sts	0x08EB, r24
					ackPayload[10] = proximityResult[11]>>8;
     93e:	89 2f       	mov	r24, r25
     940:	99 0f       	add	r25, r25
     942:	99 0b       	sbc	r25, r25
     944:	80 93 ec 08 	sts	0x08EC, r24
					ackPayload[11] = accX&0xFF;
     948:	80 91 4c 04 	lds	r24, 0x044C
     94c:	90 91 4d 04 	lds	r25, 0x044D
     950:	80 93 ed 08 	sts	0x08ED, r24
					ackPayload[12] = accX>>8;
     954:	89 2f       	mov	r24, r25
     956:	99 0f       	add	r25, r25
     958:	99 0b       	sbc	r25, r25
     95a:	80 93 ee 08 	sts	0x08EE, r24
					ackPayload[13] = accY&0xFF;
     95e:	80 91 4e 04 	lds	r24, 0x044E
     962:	90 91 4f 04 	lds	r25, 0x044F
     966:	80 93 ef 08 	sts	0x08EF, r24
					ackPayload[14] = accY>>8;
     96a:	89 2f       	mov	r24, r25
     96c:	99 0f       	add	r25, r25
     96e:	99 0b       	sbc	r25, r25
     970:	80 93 f0 08 	sts	0x08F0, r24
					ackPayload[15] = irCommand;
     974:	80 91 43 04 	lds	r24, 0x0443
     978:	80 93 f1 08 	sts	0x08F1, r24
					packetId = 5;
     97c:	85 e0       	ldi	r24, 0x05	; 5
     97e:	80 93 07 02 	sts	0x0207, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
     982:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     984:	81 ee       	ldi	r24, 0xE1	; 225
     986:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
    mirf_CSN_hi;
     98a:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     98c:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     98e:	88 ea       	ldi	r24, 0xA8	; 168
     990:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
     994:	80 91 e2 08 	lds	r24, 0x08E2
     998:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     99c:	80 91 e3 08 	lds	r24, 0x08E3
     9a0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     9a4:	80 91 e4 08 	lds	r24, 0x08E4
     9a8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     9ac:	80 91 e5 08 	lds	r24, 0x08E5
     9b0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     9b4:	80 91 e6 08 	lds	r24, 0x08E6
     9b8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     9bc:	80 91 e7 08 	lds	r24, 0x08E7
     9c0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     9c4:	80 91 e8 08 	lds	r24, 0x08E8
     9c8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     9cc:	80 91 e9 08 	lds	r24, 0x08E9
     9d0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     9d4:	80 91 ea 08 	lds	r24, 0x08EA
     9d8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     9dc:	80 91 eb 08 	lds	r24, 0x08EB
     9e0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     9e4:	80 91 ec 08 	lds	r24, 0x08EC
     9e8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     9ec:	80 91 ed 08 	lds	r24, 0x08ED
     9f0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     9f4:	80 91 ee 08 	lds	r24, 0x08EE
     9f8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     9fc:	80 91 ef 08 	lds	r24, 0x08EF
     a00:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     a04:	80 91 f0 08 	lds	r24, 0x08F0
     a08:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
     a0c:	80 91 f1 08 	lds	r24, 0x08F1
     a10:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
     a14:	28 9a       	sbi	0x05, 0	; 5

		

	}

}
     a16:	0f 90       	pop	r0
     a18:	cf 91       	pop	r28
     a1a:	df 91       	pop	r29
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	08 95       	ret


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
     a22:	44 9a       	sbi	0x08, 4	; 8
     a24:	ee ce       	rjmp	.-548    	; 0x802 <handleRFCommands+0x1c2>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GREEN_LED6_ON;
				} else {
					GREEN_LED6_OFF;
     a26:	80 91 0b 01 	lds	r24, 0x010B
     a2a:	80 64       	ori	r24, 0x40	; 64
     a2c:	80 93 0b 01 	sts	0x010B, r24
     a30:	36 cf       	rjmp	.-404    	; 0x89e <handleRFCommands+0x25e>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GREEN_LED5_ON;
				} else {
					GREEN_LED5_OFF;
     a32:	80 91 0b 01 	lds	r24, 0x010B
     a36:	80 62       	ori	r24, 0x20	; 32
     a38:	80 93 0b 01 	sts	0x010B, r24
     a3c:	27 cf       	rjmp	.-434    	; 0x88c <handleRFCommands+0x24c>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GREEN_LED4_ON;
				} else {
					GREEN_LED4_OFF;
     a3e:	80 91 0b 01 	lds	r24, 0x010B
     a42:	80 61       	ori	r24, 0x10	; 16
     a44:	80 93 0b 01 	sts	0x010B, r24
     a48:	18 cf       	rjmp	.-464    	; 0x87a <handleRFCommands+0x23a>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GREEN_LED3_ON;
				} else {
					GREEN_LED3_OFF;
     a4a:	a3 9a       	sbi	0x14, 3	; 20
     a4c:	0d cf       	rjmp	.-486    	; 0x868 <handleRFCommands+0x228>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GREEN_LED2_ON;
				} else {
					GREEN_LED2_OFF;
     a4e:	80 91 0b 01 	lds	r24, 0x010B
     a52:	84 60       	ori	r24, 0x04	; 4
     a54:	80 93 0b 01 	sts	0x010B, r24
     a58:	02 cf       	rjmp	.-508    	; 0x85e <handleRFCommands+0x21e>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GREEN_LED1_ON;
				} else {
					GREEN_LED1_OFF;
     a5a:	80 91 0b 01 	lds	r24, 0x010B
     a5e:	82 60       	ori	r24, 0x02	; 2
     a60:	80 93 0b 01 	sts	0x010B, r24
     a64:	f3 ce       	rjmp	.-538    	; 0x84c <handleRFCommands+0x20c>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GREEN_LED0_ON;
				} else {
					GREEN_LED0_OFF;
     a66:	80 91 0b 01 	lds	r24, 0x010B
     a6a:	81 60       	ori	r24, 0x01	; 1
     a6c:	80 93 0b 01 	sts	0x010B, r24
     a70:	e4 ce       	rjmp	.-568    	; 0x83a <handleRFCommands+0x1fa>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
     a72:	10 92 94 04 	sts	0x0494, r1
     a76:	d4 ce       	rjmp	.-600    	; 0x820 <handleRFCommands+0x1e0>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
     a78:	10 92 0e 02 	sts	0x020E, r1
     a7c:	ca ce       	rjmp	.-620    	; 0x812 <handleRFCommands+0x1d2>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
     a7e:	45 9a       	sbi	0x08, 5	; 8
     a80:	c3 ce       	rjmp	.-634    	; 0x808 <handleRFCommands+0x1c8>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
     a82:	86 30       	cpi	r24, 0x06	; 6
     a84:	09 f4       	brne	.+2      	; 0xa88 <handleRFCommands+0x448>
     a86:	c5 c0       	rjmp	.+394    	; 0xc12 <handleRFCommands+0x5d2>
     a88:	87 30       	cpi	r24, 0x07	; 7
     a8a:	09 f0       	breq	.+2      	; 0xa8e <handleRFCommands+0x44e>
     a8c:	7a cf       	rjmp	.-268    	; 0x982 <handleRFCommands+0x342>
					packetId = 7;
					break;


				case 7:
					ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
     a8e:	60 91 f1 02 	lds	r22, 0x02F1
     a92:	70 91 f2 02 	lds	r23, 0x02F2
     a96:	80 91 f3 02 	lds	r24, 0x02F3
     a9a:	90 91 f4 02 	lds	r25, 0x02F4
     a9e:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
     aa2:	60 93 e3 08 	sts	0x08E3, r22
					ackPayload[2] = ((signed long int)leftMotSteps)>>8;
     aa6:	27 2f       	mov	r18, r23
     aa8:	38 2f       	mov	r19, r24
     aaa:	49 2f       	mov	r20, r25
     aac:	55 27       	eor	r21, r21
     aae:	47 fd       	sbrc	r20, 7
     ab0:	5a 95       	dec	r21
     ab2:	20 93 e4 08 	sts	0x08E4, r18
					ackPayload[3] = ((signed long int)leftMotSteps)>>16;
     ab6:	9c 01       	movw	r18, r24
     ab8:	55 27       	eor	r21, r21
     aba:	37 fd       	sbrc	r19, 7
     abc:	50 95       	com	r21
     abe:	45 2f       	mov	r20, r21
     ac0:	20 93 e5 08 	sts	0x08E5, r18
					ackPayload[4] = ((signed long int)leftMotSteps)>>24;
     ac4:	69 2f       	mov	r22, r25
     ac6:	99 27       	eor	r25, r25
     ac8:	67 fd       	sbrc	r22, 7
     aca:	90 95       	com	r25
     acc:	79 2f       	mov	r23, r25
     ace:	89 2f       	mov	r24, r25
     ad0:	60 93 e6 08 	sts	0x08E6, r22
					ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
     ad4:	60 91 ed 02 	lds	r22, 0x02ED
     ad8:	70 91 ee 02 	lds	r23, 0x02EE
     adc:	80 91 ef 02 	lds	r24, 0x02EF
     ae0:	90 91 f0 02 	lds	r25, 0x02F0
     ae4:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
     ae8:	60 93 e7 08 	sts	0x08E7, r22
					ackPayload[6] = ((signed long int)rightMotSteps)>>8;
     aec:	27 2f       	mov	r18, r23
     aee:	38 2f       	mov	r19, r24
     af0:	49 2f       	mov	r20, r25
     af2:	55 27       	eor	r21, r21
     af4:	47 fd       	sbrc	r20, 7
     af6:	5a 95       	dec	r21
     af8:	20 93 e8 08 	sts	0x08E8, r18
					ackPayload[7] = ((signed long int)rightMotSteps)>>16;
     afc:	9c 01       	movw	r18, r24
     afe:	55 27       	eor	r21, r21
     b00:	37 fd       	sbrc	r19, 7
     b02:	50 95       	com	r21
     b04:	45 2f       	mov	r20, r21
     b06:	20 93 e9 08 	sts	0x08E9, r18
					ackPayload[8] = ((signed long int)rightMotSteps)>>24;
     b0a:	69 2f       	mov	r22, r25
     b0c:	99 27       	eor	r25, r25
     b0e:	67 fd       	sbrc	r22, 7
     b10:	90 95       	com	r25
     b12:	79 2f       	mov	r23, r25
     b14:	89 2f       	mov	r24, r25
     b16:	60 93 ea 08 	sts	0x08EA, r22
					lastTheta = theta;
     b1a:	60 91 97 04 	lds	r22, 0x0497
     b1e:	70 91 98 04 	lds	r23, 0x0498
     b22:	80 91 99 04 	lds	r24, 0x0499
     b26:	90 91 9a 04 	lds	r25, 0x049A
     b2a:	60 93 9b 04 	sts	0x049B, r22
     b2e:	70 93 9c 04 	sts	0x049C, r23
     b32:	80 93 9d 04 	sts	0x049D, r24
     b36:	90 93 9e 04 	sts	0x049E, r25
					ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e4       	ldi	r19, 0x40	; 64
     b3e:	4f e0       	ldi	r20, 0x0F	; 15
     b40:	54 e4       	ldi	r21, 0x44	; 68
     b42:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
     b46:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
     b4a:	60 93 eb 08 	sts	0x08EB, r22
					ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
     b4e:	67 2f       	mov	r22, r23
     b50:	77 0f       	add	r23, r23
     b52:	77 0b       	sbc	r23, r23
     b54:	60 93 ec 08 	sts	0x08EC, r22
					ackPayload[11] = ((unsigned int)xPos)&0xFF;
     b58:	60 91 9f 04 	lds	r22, 0x049F
     b5c:	70 91 a0 04 	lds	r23, 0x04A0
     b60:	80 91 a1 04 	lds	r24, 0x04A1
     b64:	90 91 a2 04 	lds	r25, 0x04A2
     b68:	0e 94 b1 4c 	call	0x9962	; 0x9962 <__fixunssfsi>
     b6c:	60 93 ed 08 	sts	0x08ED, r22
					ackPayload[12] = ((unsigned int)xPos)>>8;
     b70:	70 93 ee 08 	sts	0x08EE, r23
					ackPayload[13] = ((unsigned int)yPos)&0xFF;
     b74:	60 91 a3 04 	lds	r22, 0x04A3
     b78:	70 91 a4 04 	lds	r23, 0x04A4
     b7c:	80 91 a5 04 	lds	r24, 0x04A5
     b80:	90 91 a6 04 	lds	r25, 0x04A6
     b84:	0e 94 b1 4c 	call	0x9962	; 0x9962 <__fixunssfsi>
     b88:	60 93 ef 08 	sts	0x08EF, r22
					ackPayload[14] = ((unsigned int)yPos)>>8;
     b8c:	70 93 f0 08 	sts	0x08F0, r23
					//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
					//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					ackPayload[15] = 0;
     b90:	10 92 f1 08 	sts	0x08F1, r1
					packetId = 3;
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	80 93 07 02 	sts	0x0207, r24
     b9a:	f3 ce       	rjmp	.-538    	; 0x982 <handleRFCommands+0x342>
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
     b9c:	30 93 16 03 	sts	0x0316, r19
     ba0:	20 93 15 03 	sts	0x0315, r18
     ba4:	dc cd       	rjmp	.-1096   	; 0x75e <handleRFCommands+0x11e>
				}

			#endif
		
			if(currentSelector == 8) {
				if(calibrateOdomFlag==0) {
     ba6:	80 91 8e 05 	lds	r24, 0x058E
     baa:	88 23       	and	r24, r24
     bac:	09 f0       	breq	.+2      	; 0xbb0 <handleRFCommands+0x570>
     bae:	85 ce       	rjmp	.-758    	; 0x8ba <handleRFCommands+0x27a>
					if((rfData[7]&0b00000001)==0b00000001) {
     bb0:	80 91 b1 09 	lds	r24, 0x09B1
     bb4:	80 ff       	sbrs	r24, 0
     bb6:	81 ce       	rjmp	.-766    	; 0x8ba <handleRFCommands+0x27a>
						calibrateSensors();
     bb8:	0e 94 e1 39 	call	0x73c2	; 0x73c2 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	93 e0       	ldi	r25, 0x03	; 3
     bc0:	90 93 86 02 	sts	0x0286, r25
     bc4:	80 93 85 02 	sts	0x0285, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
     bc8:	90 93 8c 02 	sts	0x028C, r25
     bcc:	80 93 8b 02 	sts	0x028B, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
     bd0:	86 e0       	ldi	r24, 0x06	; 6
     bd2:	80 93 81 0b 	sts	0x0B81, r24
						calibVelIndex = 1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 db 08 	sts	0x08DB, r24
						calibrateOdomFlag = 1;
     bdc:	80 93 8e 05 	sts	0x058E, r24
     be0:	6c ce       	rjmp	.-808    	; 0x8ba <handleRFCommands+0x27a>
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				calibrateSensors();
     be2:	0e 94 e1 39 	call	0x73c2	; 0x73c2 <calibrateSensors>
				resetOdometry();
     be6:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <resetOdometry>
     bea:	20 91 ad 09 	lds	r18, 0x09AD
     bee:	92 2f       	mov	r25, r18
     bf0:	12 ce       	rjmp	.-988    	; 0x816 <handleRFCommands+0x1d6>
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 95 04 	sts	0x0495, r24
     bf8:	17 ce       	rjmp	.-978    	; 0x828 <handleRFCommands+0x1e8>
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
					GREEN_LED7_ON;
     bfa:	80 91 0b 01 	lds	r24, 0x010B
     bfe:	8f 77       	andi	r24, 0x7F	; 127
     c00:	80 93 0b 01 	sts	0x010B, r24
     c04:	55 ce       	rjmp	.-854    	; 0x8b0 <handleRFCommands+0x270>

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {

			writeAckPayload(ackPayload, 16);
     c06:	82 ee       	ldi	r24, 0xE2	; 226
     c08:	98 e0       	ldi	r25, 0x08	; 8
     c0a:	60 e1       	ldi	r22, 0x10	; 16
     c0c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <writeAckPayload>
     c10:	22 cd       	rjmp	.-1468   	; 0x656 <handleRFCommands+0x16>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
     c12:	80 91 55 02 	lds	r24, 0x0255
     c16:	90 91 56 02 	lds	r25, 0x0256
     c1a:	80 93 e3 08 	sts	0x08E3, r24
					ackPayload[2] = proximityValue[8]>>8;
     c1e:	80 91 55 02 	lds	r24, 0x0255
     c22:	90 91 56 02 	lds	r25, 0x0256
     c26:	90 93 e4 08 	sts	0x08E4, r25
					ackPayload[3] = proximityValue[16]&0xFF;
     c2a:	80 91 65 02 	lds	r24, 0x0265
     c2e:	90 91 66 02 	lds	r25, 0x0266
     c32:	80 93 e5 08 	sts	0x08E5, r24
					ackPayload[4] = proximityValue[16]>>8;
     c36:	80 91 65 02 	lds	r24, 0x0265
     c3a:	90 91 66 02 	lds	r25, 0x0266
     c3e:	90 93 e6 08 	sts	0x08E6, r25
					ackPayload[5] = proximityValue[18]&0xFF;
     c42:	80 91 69 02 	lds	r24, 0x0269
     c46:	90 91 6a 02 	lds	r25, 0x026A
     c4a:	80 93 e7 08 	sts	0x08E7, r24
					ackPayload[6] = proximityValue[18]>>8;
     c4e:	80 91 69 02 	lds	r24, 0x0269
     c52:	90 91 6a 02 	lds	r25, 0x026A
     c56:	90 93 e8 08 	sts	0x08E8, r25
					ackPayload[7] = proximityValue[20]&0xFF;
     c5a:	80 91 6d 02 	lds	r24, 0x026D
     c5e:	90 91 6e 02 	lds	r25, 0x026E
     c62:	80 93 e9 08 	sts	0x08E9, r24
					ackPayload[8] = proximityValue[20]>>8;
     c66:	80 91 6d 02 	lds	r24, 0x026D
     c6a:	90 91 6e 02 	lds	r25, 0x026E
     c6e:	90 93 ea 08 	sts	0x08EA, r25
					ackPayload[9] = proximityValue[22]&0xFF;
     c72:	80 91 71 02 	lds	r24, 0x0271
     c76:	90 91 72 02 	lds	r25, 0x0272
     c7a:	80 93 eb 08 	sts	0x08EB, r24
					ackPayload[10] = proximityValue[22]>>8;
     c7e:	80 91 71 02 	lds	r24, 0x0271
     c82:	90 91 72 02 	lds	r25, 0x0272
     c86:	90 93 ec 08 	sts	0x08EC, r25
					ackPayload[11] = accZ&0xFF;
     c8a:	80 91 50 04 	lds	r24, 0x0450
     c8e:	90 91 51 04 	lds	r25, 0x0451
     c92:	80 93 ed 08 	sts	0x08ED, r24
					ackPayload[12] = accZ>>8;	
     c96:	89 2f       	mov	r24, r25
     c98:	99 0f       	add	r25, r25
     c9a:	99 0b       	sbc	r25, r25
     c9c:	80 93 ee 08 	sts	0x08EE, r24
					ackPayload[13] = batteryLevel&0xFF;
     ca0:	80 91 d9 02 	lds	r24, 0x02D9
     ca4:	90 91 da 02 	lds	r25, 0x02DA
     ca8:	80 93 ef 08 	sts	0x08EF, r24
					ackPayload[14] = batteryLevel>>8;
     cac:	90 93 f0 08 	sts	0x08F0, r25
					ackPayload[15] = 0;
     cb0:	10 92 f1 08 	sts	0x08F1, r1
					packetId = 7;
     cb4:	87 e0       	ldi	r24, 0x07	; 7
     cb6:	80 93 07 02 	sts	0x0207, r24
     cba:	63 ce       	rjmp	.-826    	; 0x982 <handleRFCommands+0x342>
			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
     cbc:	80 91 75 02 	lds	r24, 0x0275
     cc0:	90 91 76 02 	lds	r25, 0x0276
     cc4:	80 93 e3 08 	sts	0x08E3, r24
					ackPayload[2] = proximityResult[0]>>8;
     cc8:	89 2f       	mov	r24, r25
     cca:	99 0f       	add	r25, r25
     ccc:	99 0b       	sbc	r25, r25
     cce:	80 93 e4 08 	sts	0x08E4, r24
					ackPayload[3] = proximityResult[1]&0xFF;
     cd2:	80 91 77 02 	lds	r24, 0x0277
     cd6:	90 91 78 02 	lds	r25, 0x0278
     cda:	80 93 e5 08 	sts	0x08E5, r24
					ackPayload[4] = proximityResult[1]>>8;
     cde:	89 2f       	mov	r24, r25
     ce0:	99 0f       	add	r25, r25
     ce2:	99 0b       	sbc	r25, r25
     ce4:	80 93 e6 08 	sts	0x08E6, r24
					ackPayload[5] = proximityResult[2]&0xFF;
     ce8:	80 91 79 02 	lds	r24, 0x0279
     cec:	90 91 7a 02 	lds	r25, 0x027A
     cf0:	80 93 e7 08 	sts	0x08E7, r24
					ackPayload[6] = proximityResult[2]>>8;
     cf4:	89 2f       	mov	r24, r25
     cf6:	99 0f       	add	r25, r25
     cf8:	99 0b       	sbc	r25, r25
     cfa:	80 93 e8 08 	sts	0x08E8, r24
					ackPayload[7] = proximityResult[3]&0xFF;
     cfe:	80 91 7b 02 	lds	r24, 0x027B
     d02:	90 91 7c 02 	lds	r25, 0x027C
     d06:	80 93 e9 08 	sts	0x08E9, r24
					ackPayload[8] = proximityResult[3]>>8;
     d0a:	89 2f       	mov	r24, r25
     d0c:	99 0f       	add	r25, r25
     d0e:	99 0b       	sbc	r25, r25
     d10:	80 93 ea 08 	sts	0x08EA, r24
					ackPayload[9] = proximityResult[5]&0xFF;
     d14:	80 91 7f 02 	lds	r24, 0x027F
     d18:	90 91 80 02 	lds	r25, 0x0280
     d1c:	80 93 eb 08 	sts	0x08EB, r24
					ackPayload[10] = proximityResult[5]>>8;
     d20:	89 2f       	mov	r24, r25
     d22:	99 0f       	add	r25, r25
     d24:	99 0b       	sbc	r25, r25
     d26:	80 93 ec 08 	sts	0x08EC, r24
					ackPayload[11] = proximityResult[6]&0xFF;
     d2a:	80 91 81 02 	lds	r24, 0x0281
     d2e:	90 91 82 02 	lds	r25, 0x0282
     d32:	80 93 ed 08 	sts	0x08ED, r24
					ackPayload[12] = proximityResult[6]>>8;
     d36:	89 2f       	mov	r24, r25
     d38:	99 0f       	add	r25, r25
     d3a:	99 0b       	sbc	r25, r25
     d3c:	80 93 ee 08 	sts	0x08EE, r24
					ackPayload[13] = proximityResult[7]&0xFF;
     d40:	80 91 83 02 	lds	r24, 0x0283
     d44:	90 91 84 02 	lds	r25, 0x0284
     d48:	80 93 ef 08 	sts	0x08EF, r24
					ackPayload[14] = proximityResult[7]>>8;
     d4c:	89 2f       	mov	r24, r25
     d4e:	99 0f       	add	r25, r25
     d50:	99 0b       	sbc	r25, r25
     d52:	80 93 f0 08 	sts	0x08F0, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     d56:	20 91 03 01 	lds	r18, 0x0103
     d5a:	80 91 03 01 	lds	r24, 0x0103
     d5e:	40 91 03 01 	lds	r20, 0x0103
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	80 72       	andi	r24, 0x20	; 32
     d66:	90 70       	andi	r25, 0x00	; 0
     d68:	95 95       	asr	r25
     d6a:	87 95       	ror	r24
     d6c:	95 95       	asr	r25
     d6e:	87 95       	ror	r24
     d70:	95 95       	asr	r25
     d72:	87 95       	ror	r24
     d74:	95 95       	asr	r25
     d76:	87 95       	ror	r24
     d78:	95 95       	asr	r25
     d7a:	87 95       	ror	r24
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	44 1f       	adc	r20, r20
     d82:	44 27       	eor	r20, r20
     d84:	44 1f       	adc	r20, r20
     d86:	44 0f       	add	r20, r20
     d88:	44 0f       	add	r20, r20
     d8a:	48 2b       	or	r20, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	20 71       	andi	r18, 0x10	; 16
     d90:	30 70       	andi	r19, 0x00	; 0
     d92:	35 95       	asr	r19
     d94:	27 95       	ror	r18
     d96:	35 95       	asr	r19
     d98:	27 95       	ror	r18
     d9a:	35 95       	asr	r19
     d9c:	27 95       	ror	r18
     d9e:	35 95       	asr	r19
     da0:	27 95       	ror	r18
     da2:	42 2b       	or	r20, r18
     da4:	40 93 f1 08 	sts	0x08F1, r20
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
     da8:	84 e0       	ldi	r24, 0x04	; 4
     daa:	80 93 07 02 	sts	0x0207, r24
     dae:	e9 cd       	rjmp	.-1070   	; 0x982 <handleRFCommands+0x342>
					ackPayload[15] = irCommand;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
     db0:	80 91 45 02 	lds	r24, 0x0245
     db4:	90 91 46 02 	lds	r25, 0x0246
     db8:	80 93 e3 08 	sts	0x08E3, r24
					ackPayload[2] = proximityValue[0]>>8;
     dbc:	80 91 45 02 	lds	r24, 0x0245
     dc0:	90 91 46 02 	lds	r25, 0x0246
     dc4:	90 93 e4 08 	sts	0x08E4, r25
					ackPayload[3] = proximityValue[2]&0xFF;
     dc8:	80 91 49 02 	lds	r24, 0x0249
     dcc:	90 91 4a 02 	lds	r25, 0x024A
     dd0:	80 93 e5 08 	sts	0x08E5, r24
					ackPayload[4] = proximityValue[2]>>8;
     dd4:	80 91 49 02 	lds	r24, 0x0249
     dd8:	90 91 4a 02 	lds	r25, 0x024A
     ddc:	90 93 e6 08 	sts	0x08E6, r25
					ackPayload[5] = proximityValue[4]&0xFF;
     de0:	80 91 4d 02 	lds	r24, 0x024D
     de4:	90 91 4e 02 	lds	r25, 0x024E
     de8:	80 93 e7 08 	sts	0x08E7, r24
					ackPayload[6] = proximityValue[4]>>8;
     dec:	80 91 4d 02 	lds	r24, 0x024D
     df0:	90 91 4e 02 	lds	r25, 0x024E
     df4:	90 93 e8 08 	sts	0x08E8, r25
					ackPayload[7] = proximityValue[6]&0xFF;
     df8:	80 91 51 02 	lds	r24, 0x0251
     dfc:	90 91 52 02 	lds	r25, 0x0252
     e00:	80 93 e9 08 	sts	0x08E9, r24
					ackPayload[8] = proximityValue[6]>>8;
     e04:	80 91 51 02 	lds	r24, 0x0251
     e08:	90 91 52 02 	lds	r25, 0x0252
     e0c:	90 93 ea 08 	sts	0x08EA, r25
					ackPayload[9] = proximityValue[10]&0xFF;
     e10:	80 91 59 02 	lds	r24, 0x0259
     e14:	90 91 5a 02 	lds	r25, 0x025A
     e18:	80 93 eb 08 	sts	0x08EB, r24
					ackPayload[10] = proximityValue[10]>>8;
     e1c:	80 91 59 02 	lds	r24, 0x0259
     e20:	90 91 5a 02 	lds	r25, 0x025A
     e24:	90 93 ec 08 	sts	0x08EC, r25
					ackPayload[11] = proximityValue[12]&0xFF;
     e28:	80 91 5d 02 	lds	r24, 0x025D
     e2c:	90 91 5e 02 	lds	r25, 0x025E
     e30:	80 93 ed 08 	sts	0x08ED, r24
					ackPayload[12] = proximityValue[12]>>8;
     e34:	80 91 5d 02 	lds	r24, 0x025D
     e38:	90 91 5e 02 	lds	r25, 0x025E
     e3c:	90 93 ee 08 	sts	0x08EE, r25
					ackPayload[13] = proximityValue[14]&0xFF;
     e40:	80 91 61 02 	lds	r24, 0x0261
     e44:	90 91 62 02 	lds	r25, 0x0262
     e48:	80 93 ef 08 	sts	0x08EF, r24
					ackPayload[14] = proximityValue[14]>>8;
     e4c:	80 91 61 02 	lds	r24, 0x0261
     e50:	90 91 62 02 	lds	r25, 0x0262
     e54:	90 93 f0 08 	sts	0x08F0, r25
					ackPayload[15] = currentSelector;
     e58:	80 91 70 04 	lds	r24, 0x0470
     e5c:	80 93 f1 08 	sts	0x08F1, r24
					packetId = 6;
     e60:	86 e0       	ldi	r24, 0x06	; 6
     e62:	80 93 07 02 	sts	0x0207, r24
     e66:	8d cd       	rjmp	.-1254   	; 0x982 <handleRFCommands+0x342>
				} else {								// backward
					pwm_right_desired = -(speedr);
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
					pwm_left_desired = speedl;
     e68:	50 93 18 03 	sts	0x0318, r21
     e6c:	40 93 17 03 	sts	0x0317, r20
     e70:	80 cc       	rjmp	.-1792   	; 0x772 <handleRFCommands+0x132>

00000e72 <rfDebugSendData>:
void rfDisableDebugMode() {
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
     e72:	90 91 36 03 	lds	r25, 0x0336
     e76:	90 93 e2 08 	sts	0x08E2, r25
	while(rfData[0] != rfDebugCounter) {
     e7a:	80 91 aa 09 	lds	r24, 0x09AA
     e7e:	98 17       	cp	r25, r24
     e80:	41 f0       	breq	.+16     	; 0xe92 <rfDebugSendData+0x20>
		handleRFCommands();
     e82:	0e 94 20 03 	call	0x640	; 0x640 <handleRFCommands>
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
	while(rfData[0] != rfDebugCounter) {
     e86:	90 91 aa 09 	lds	r25, 0x09AA
     e8a:	80 91 36 03 	lds	r24, 0x0336
     e8e:	98 17       	cp	r25, r24
     e90:	c1 f7       	brne	.-16     	; 0xe82 <rfDebugSendData+0x10>
		handleRFCommands();
	}
	ackPayload[0] = 0x00;
     e92:	10 92 e2 08 	sts	0x08E2, r1
	if(rfDebugCounter < 255) {
     e96:	9f 3f       	cpi	r25, 0xFF	; 255
     e98:	21 f0       	breq	.+8      	; 0xea2 <rfDebugSendData+0x30>
		rfDebugCounter++;
     e9a:	9f 5f       	subi	r25, 0xFF	; 255
     e9c:	90 93 36 03 	sts	0x0336, r25
     ea0:	08 95       	ret
	} else {
		rfDebugCounter = 3;
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	80 93 36 03 	sts	0x0336, r24
     ea8:	08 95       	ret

00000eaa <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29

	PCICR = 0;
     eae:	e8 e6       	ldi	r30, 0x68	; 104
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	10 82       	st	Z, r1
	PCMSK1 = 0;
     eb4:	ac e6       	ldi	r26, 0x6C	; 108
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	1c 92       	st	X, r1
	TCCR2A = 0;
     eba:	20 eb       	ldi	r18, 0xB0	; 176
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	e9 01       	movw	r28, r18
     ec0:	18 82       	st	Y, r1
	TCCR2B = 0;
     ec2:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
     ec6:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
     eca:	80 81       	ld	r24, Z
     ecc:	82 60       	ori	r24, 0x02	; 2
     ece:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
     ed0:	8c 91       	ld	r24, X
     ed2:	80 68       	ori	r24, 0x80	; 128
     ed4:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
     ed6:	88 81       	ld	r24, Y
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	88 83       	st	Y, r24

}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	08 95       	ret

00000ee2 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
     eee:	80 91 0e 02 	lds	r24, 0x020E
     ef2:	88 23       	and	r24, r24
     ef4:	21 f1       	breq	.+72     	; 0xf3e <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
     ef6:	80 91 03 01 	lds	r24, 0x0103
     efa:	86 fd       	sbrc	r24, 6
     efc:	20 c0       	rjmp	.+64     	; 0xf3e <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
     efe:	80 91 68 00 	lds	r24, 0x0068
     f02:	8d 7f       	andi	r24, 0xFD	; 253
     f04:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
     f08:	80 91 6c 00 	lds	r24, 0x006C
     f0c:	8f 77       	andi	r24, 0x7F	; 127
     f0e:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 0f 02 	sts	0x020F, r24
			OCR2A = 13;									// output compare register
     f18:	8d e0       	ldi	r24, 0x0D	; 13
     f1a:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
     f1e:	80 91 b1 00 	lds	r24, 0x00B1
     f22:	86 60       	ori	r24, 0x06	; 6
     f24:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
     f28:	80 91 70 00 	lds	r24, 0x0070
     f2c:	82 60       	ori	r24, 0x02	; 2
     f2e:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
     f32:	10 92 3c 02 	sts	0x023C, r1
     f36:	10 92 3d 02 	sts	0x023D, r1
     f3a:	10 92 3e 02 	sts	0x023E, r1

		}

	}
	
}
     f3e:	8f 91       	pop	r24
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <__vector_13>:

ISR(TIMER2_COMPA_vect) {
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	4f 93       	push	r20
     f5a:	5f 93       	push	r21
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
     f60:	80 91 b1 00 	lds	r24, 0x00B1
     f64:	88 7f       	andi	r24, 0xF8	; 248
     f66:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
     f6a:	80 91 0f 02 	lds	r24, 0x020F
     f6e:	88 23       	and	r24, r24
     f70:	59 f1       	breq	.+86     	; 0xfc8 <__vector_13+0x7e>

			if(REMOTE) {					// if high it is a glitch
     f72:	80 91 03 01 	lds	r24, 0x0103
     f76:	86 fd       	sbrc	r24, 6
     f78:	69 c0       	rjmp	.+210    	; 0x104c <__vector_13+0x102>
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
     f7a:	10 92 0f 02 	sts	0x020F, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
     f7e:	83 e3       	ldi	r24, 0x33	; 51
     f80:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
     f84:	80 91 b1 00 	lds	r24, 0x00B1
     f88:	86 60       	ori	r24, 0x06	; 6
     f8a:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
     f8e:	80 91 70 00 	lds	r24, 0x0070
     f92:	82 60       	ori	r24, 0x02	; 2
     f94:	80 93 70 00 	sts	0x0070, r24

			} 

		}
	
		if(i!=-1) {
     f98:	80 91 01 02 	lds	r24, 0x0201
     f9c:	90 91 02 02 	lds	r25, 0x0202
     fa0:	2f ef       	ldi	r18, 0xFF	; 255
     fa2:	8f 3f       	cpi	r24, 0xFF	; 255
     fa4:	92 07       	cpc	r25, r18
     fa6:	29 f0       	breq	.+10     	; 0xfb2 <__vector_13+0x68>

			i++;
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	90 93 02 02 	sts	0x0202, r25
     fae:	80 93 01 02 	sts	0x0201, r24

		}

}
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	5f 91       	pop	r21
     fb8:	4f 91       	pop	r20
     fba:	3f 91       	pop	r19
     fbc:	2f 91       	pop	r18
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti
			}

		} else {


			if (i == -1) { 						// start bit confirmed
     fc8:	40 91 01 02 	lds	r20, 0x0201
     fcc:	50 91 02 02 	lds	r21, 0x0202
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	4f 3f       	cpi	r20, 0xFF	; 255
     fd4:	58 07       	cpc	r21, r24
     fd6:	09 f4       	brne	.+2      	; 0xfda <__vector_13+0x90>
     fd8:	4a c0       	rjmp	.+148    	; 0x106e <__vector_13+0x124>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
     fda:	41 30       	cpi	r20, 0x01	; 1
     fdc:	51 05       	cpc	r21, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <__vector_13+0x98>
     fe0:	80 c0       	rjmp	.+256    	; 0x10e2 <__vector_13+0x198>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
     fe2:	ca 01       	movw	r24, r20
     fe4:	02 97       	sbiw	r24, 0x02	; 2
     fe6:	05 97       	sbiw	r24, 0x05	; 5
     fe8:	08 f4       	brcc	.+2      	; 0xfec <__vector_13+0xa2>
     fea:	50 c0       	rjmp	.+160    	; 0x108c <__vector_13+0x142>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
     fec:	ca 01       	movw	r24, r20
     fee:	07 97       	sbiw	r24, 0x07	; 7
     ff0:	06 97       	sbiw	r24, 0x06	; 6
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <__vector_13+0xac>
     ff4:	ab c0       	rjmp	.+342    	; 0x114c <__vector_13+0x202>

				OCR2A = 54;
     ff6:	86 e3       	ldi	r24, 0x36	; 54
     ff8:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);
     ffc:	80 91 b1 00 	lds	r24, 0x00B1
    1000:	86 60       	ori	r24, 0x06	; 6
    1002:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    1006:	80 91 70 00 	lds	r24, 0x0070
    100a:	82 60       	ori	r24, 0x02	; 2
    100c:	80 93 70 00 	sts	0x0070, r24

				unsigned char temp = REMOTE;
    1010:	20 91 03 01 	lds	r18, 0x0103
				temp <<= 6+6-i;
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	20 74       	andi	r18, 0x40	; 64
    1018:	30 70       	andi	r19, 0x00	; 0
    101a:	00 24       	eor	r0, r0
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	00 1c       	adc	r0, r0
    1022:	22 0f       	add	r18, r18
    1024:	33 1f       	adc	r19, r19
    1026:	00 1c       	adc	r0, r0
    1028:	23 2f       	mov	r18, r19
    102a:	30 2d       	mov	r19, r0
    102c:	8c e0       	ldi	r24, 0x0C	; 12
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	84 1b       	sub	r24, r20
    1032:	95 0b       	sbc	r25, r21
    1034:	02 c0       	rjmp	.+4      	; 0x103a <__vector_13+0xf0>
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	8a 95       	dec	r24
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <__vector_13+0xec>
				data_temp += temp;
    103e:	80 91 3c 02 	lds	r24, 0x023C
    1042:	82 0f       	add	r24, r18
    1044:	80 93 3c 02 	sts	0x023C, r24

			} 

		}
	
		if(i!=-1) {
    1048:	ca 01       	movw	r24, r20
    104a:	ae cf       	rjmp	.-164    	; 0xfa8 <__vector_13+0x5e>
	
		if(checkGlitch) {					// if checking this is a glitch

			if(REMOTE) {					// if high it is a glitch

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    104c:	80 91 68 00 	lds	r24, 0x0068
    1050:	82 60       	ori	r24, 0x02	; 2
    1052:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1056:	80 91 6c 00 	lds	r24, 0x006C
    105a:	80 68       	ori	r24, 0x80	; 128
    105c:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	9f ef       	ldi	r25, 0xFF	; 255
    1064:	90 93 02 02 	sts	0x0202, r25
    1068:	80 93 01 02 	sts	0x0201, r24
    106c:	a2 cf       	rjmp	.-188    	; 0xfb2 <__vector_13+0x68>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    106e:	80 91 03 01 	lds	r24, 0x0103
    1072:	86 ff       	sbrs	r24, 6
    1074:	54 c0       	rjmp	.+168    	; 0x111e <__vector_13+0x1d4>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1076:	80 91 68 00 	lds	r24, 0x0068
    107a:	82 60       	ori	r24, 0x02	; 2
    107c:	80 93 68 00 	sts	0x0068, r24
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1080:	80 91 6c 00 	lds	r24, 0x006C
    1084:	80 68       	ori	r24, 0x80	; 128
    1086:	80 93 6c 00 	sts	0x006C, r24
    108a:	93 cf       	rjmp	.-218    	; 0xfb2 <__vector_13+0x68>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    108c:	86 e3       	ldi	r24, 0x36	; 54
    108e:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1092:	80 91 b1 00 	lds	r24, 0x00B1
    1096:	86 60       	ori	r24, 0x06	; 6
    1098:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    109c:	80 91 70 00 	lds	r24, 0x0070
    10a0:	82 60       	ori	r24, 0x02	; 2
    10a2:	80 93 70 00 	sts	0x0070, r24

				unsigned char temp = REMOTE;
    10a6:	20 91 03 01 	lds	r18, 0x0103
				temp <<= 6-i;
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	20 74       	andi	r18, 0x40	; 64
    10ae:	30 70       	andi	r19, 0x00	; 0
    10b0:	00 24       	eor	r0, r0
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	00 1c       	adc	r0, r0
    10b8:	22 0f       	add	r18, r18
    10ba:	33 1f       	adc	r19, r19
    10bc:	00 1c       	adc	r0, r0
    10be:	23 2f       	mov	r18, r19
    10c0:	30 2d       	mov	r19, r0
    10c2:	86 e0       	ldi	r24, 0x06	; 6
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	84 1b       	sub	r24, r20
    10c8:	95 0b       	sbc	r25, r21
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <__vector_13+0x186>
    10cc:	22 0f       	add	r18, r18
    10ce:	33 1f       	adc	r19, r19
    10d0:	8a 95       	dec	r24
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <__vector_13+0x182>
				address_temp += temp;
    10d4:	80 91 3d 02 	lds	r24, 0x023D
    10d8:	82 0f       	add	r24, r18
    10da:	80 93 3d 02 	sts	0x023D, r24

			} 

		}
	
		if(i!=-1) {
    10de:	ca 01       	movw	r24, r20
    10e0:	63 cf       	rjmp	.-314    	; 0xfa8 <__vector_13+0x5e>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    10e2:	80 91 03 01 	lds	r24, 0x0103
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	80 74       	andi	r24, 0x40	; 64
    10ea:	90 70       	andi	r25, 0x00	; 0
    10ec:	08 2e       	mov	r0, r24
    10ee:	89 2f       	mov	r24, r25
    10f0:	00 0c       	add	r0, r0
    10f2:	88 1f       	adc	r24, r24
    10f4:	99 0b       	sbc	r25, r25
    10f6:	00 0c       	add	r0, r0
    10f8:	88 1f       	adc	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	80 93 3e 02 	sts	0x023E, r24
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    1100:	86 e3       	ldi	r24, 0x36	; 54
    1102:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1106:	80 91 b1 00 	lds	r24, 0x00B1
    110a:	86 60       	ori	r24, 0x06	; 6
    110c:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1110:	80 91 70 00 	lds	r24, 0x0070
    1114:	82 60       	ori	r24, 0x02	; 2
    1116:	80 93 70 00 	sts	0x0070, r24

			} 

		}
	
		if(i!=-1) {
    111a:	ca 01       	movw	r24, r20
    111c:	45 cf       	rjmp	.-374    	; 0xfa8 <__vector_13+0x5e>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    111e:	8c e1       	ldi	r24, 0x1C	; 28
    1120:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1124:	80 91 b1 00 	lds	r24, 0x00B1
    1128:	86 60       	ori	r24, 0x06	; 6
    112a:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    112e:	80 91 70 00 	lds	r24, 0x0070
    1132:	82 60       	ori	r24, 0x02	; 2
    1134:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    1138:	10 92 3c 02 	sts	0x023C, r1
    113c:	10 92 3d 02 	sts	0x023D, r1
    1140:	10 92 3e 02 	sts	0x023E, r1
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	50 e0       	ldi	r21, 0x00	; 0

			} 

		}
	
		if(i!=-1) {
    1148:	ca 01       	movw	r24, r20
    114a:	2e cf       	rjmp	.-420    	; 0xfa8 <__vector_13+0x5e>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    114c:	4d 30       	cpi	r20, 0x0D	; 13
    114e:	51 05       	cpc	r21, r1
    1150:	09 f0       	breq	.+2      	; 0x1154 <__vector_13+0x20a>
    1152:	7a cf       	rjmp	.-268    	; 0x1048 <__vector_13+0xfe>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    1154:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    1158:	80 91 68 00 	lds	r24, 0x0068
    115c:	82 60       	ori	r24, 0x02	; 2
    115e:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    1162:	80 91 6c 00 	lds	r24, 0x006C
    1166:	80 68       	ori	r24, 0x80	; 128
    1168:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	9f ef       	ldi	r25, 0xFF	; 255
    1170:	90 93 02 02 	sts	0x0202, r25
    1174:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    1178:	80 91 3e 02 	lds	r24, 0x023E
    117c:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    1180:	80 91 3d 02 	lds	r24, 0x023D
    1184:	80 93 3a 02 	sts	0x023A, r24
				data_ir = data_temp;
    1188:	80 91 3c 02 	lds	r24, 0x023C
    118c:	80 93 3b 02 	sts	0x023B, r24
				command_received=1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 93 44 04 	sts	0x0444, r24
    1196:	0d cf       	rjmp	.-486    	; 0xfb2 <__vector_13+0x68>

00001198 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    1198:	80 91 00 02 	lds	r24, 0x0200
    119c:	08 95       	ret

0000119e <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    119e:	80 91 3a 02 	lds	r24, 0x023A
    11a2:	08 95       	ret

000011a4 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    11a4:	80 91 3b 02 	lds	r24, 0x023B
    11a8:	08 95       	ret

000011aa <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    11aa:	80 91 0e 02 	lds	r24, 0x020E
    11ae:	88 23       	and	r24, r24
    11b0:	21 f0       	breq	.+8      	; 0x11ba <handleIRRemoteCommands+0x10>

		if(command_received) {
    11b2:	80 91 44 04 	lds	r24, 0x0444
    11b6:	88 23       	and	r24, r24
    11b8:	09 f4       	brne	.+2      	; 0x11bc <handleIRRemoteCommands+0x12>
    11ba:	08 95       	ret

			command_received = 0;
    11bc:	10 92 44 04 	sts	0x0444, r1
			
			if((getTime100MicroSec() - lastCmdTime) < PAUSE_200_MSEC) {
    11c0:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    11c4:	20 91 47 04 	lds	r18, 0x0447
    11c8:	30 91 48 04 	lds	r19, 0x0448
    11cc:	40 91 49 04 	lds	r20, 0x0449
    11d0:	50 91 4a 04 	lds	r21, 0x044A
    11d4:	62 1b       	sub	r22, r18
    11d6:	73 0b       	sbc	r23, r19
    11d8:	84 0b       	sbc	r24, r20
    11da:	95 0b       	sbc	r25, r21
    11dc:	63 58       	subi	r22, 0x83	; 131
    11de:	77 40       	sbci	r23, 0x07	; 7
    11e0:	80 40       	sbci	r24, 0x00	; 0
    11e2:	90 40       	sbci	r25, 0x00	; 0
    11e4:	50 f3       	brcs	.-44     	; 0x11ba <handleIRRemoteCommands+0x10>
				return;
			}

			lastCmdTime = getTime100MicroSec();
    11e6:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    11ea:	60 93 47 04 	sts	0x0447, r22
    11ee:	70 93 48 04 	sts	0x0448, r23
    11f2:	80 93 49 04 	sts	0x0449, r24
    11f6:	90 93 4a 04 	sts	0x044A, r25
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    11fa:	80 91 3b 02 	lds	r24, 0x023B
				return;
			}

			lastCmdTime = getTime100MicroSec();

            irCommand = ir_remote_get_data();
    11fe:	80 93 43 04 	sts	0x0443, r24

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    1202:	e8 2f       	mov	r30, r24
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	e5 33       	cpi	r30, 0x35	; 53
    1208:	f1 05       	cpc	r31, r1
    120a:	c0 f0       	brcs	.+48     	; 0x123c <handleIRRemoteCommands+0x92>
    120c:	40 91 15 03 	lds	r20, 0x0315
    1210:	50 91 16 03 	lds	r21, 0x0316
    1214:	20 91 17 03 	lds	r18, 0x0317
    1218:	30 91 18 03 	lds	r19, 0x0318
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    121c:	ca 01       	movw	r24, r20
    121e:	64 2f       	mov	r22, r20
    1220:	89 2f       	mov	r24, r25
    1222:	57 fd       	sbrc	r21, 7
    1224:	b7 c1       	rjmp	.+878    	; 0x1594 <handleIRRemoteCommands+0x3ea>
				speedr = pwm_right_desired;
    1226:	60 93 2f 03 	sts	0x032F, r22
    122a:	80 93 30 03 	sts	0x0330, r24
			} else {
				speedr = (-pwm_right_desired);
			}
			if(pwm_left_desired >= 0) {
    122e:	37 fd       	sbrc	r19, 7
    1230:	a8 c1       	rjmp	.+848    	; 0x1582 <handleIRRemoteCommands+0x3d8>
				speedl = pwm_left_desired;
    1232:	30 93 2e 03 	sts	0x032E, r19
    1236:	20 93 2d 03 	sts	0x032D, r18
    123a:	08 95       	ret

            irCommand = ir_remote_get_data();

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    123c:	ee 58       	subi	r30, 0x8E	; 142
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	ee 0f       	add	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	05 90       	lpm	r0, Z+
    1246:	f4 91       	lpm	r31, Z+
    1248:	e0 2d       	mov	r30, r0
    124a:	19 94       	eijmp
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    124c:	80 91 46 04 	lds	r24, 0x0446
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	83 70       	andi	r24, 0x03	; 3
    1256:	90 70       	andi	r25, 0x00	; 0
    1258:	80 93 46 04 	sts	0x0446, r24
					switch(behaviorState) {
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	09 f4       	brne	.+2      	; 0x1262 <handleIRRemoteCommands+0xb8>
    1260:	ca c1       	rjmp	.+916    	; 0x15f6 <handleIRRemoteCommands+0x44c>
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	08 f0       	brcs	.+2      	; 0x1268 <handleIRRemoteCommands+0xbe>
    1266:	bb c1       	rjmp	.+886    	; 0x15de <handleIRRemoteCommands+0x434>
						case 0:
							obstacleAvoidanceEnabled = 0;
    1268:	10 92 94 04 	sts	0x0494, r1
							cliffAvoidanceEnabled = 0;
    126c:	10 92 95 04 	sts	0x0495, r1
    1270:	40 91 15 03 	lds	r20, 0x0315
    1274:	50 91 16 03 	lds	r21, 0x0316
    1278:	20 91 17 03 	lds	r18, 0x0317
    127c:	30 91 18 03 	lds	r19, 0x0318
    1280:	cd cf       	rjmp	.-102    	; 0x121c <handleIRRemoteCommands+0x72>
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    1282:	10 92 94 04 	sts	0x0494, r1
							cliffAvoidanceEnabled = 1;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	80 93 95 04 	sts	0x0495, r24
    128c:	40 91 15 03 	lds	r20, 0x0315
    1290:	50 91 16 03 	lds	r21, 0x0316
    1294:	20 91 17 03 	lds	r18, 0x0317
    1298:	30 91 18 03 	lds	r19, 0x0318
    129c:	bf cf       	rjmp	.-130    	; 0x121c <handleIRRemoteCommands+0x72>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    129e:	10 92 94 04 	sts	0x0494, r1
    12a2:	40 91 15 03 	lds	r20, 0x0315
    12a6:	50 91 16 03 	lds	r21, 0x0316
    12aa:	20 91 17 03 	lds	r18, 0x0317
    12ae:	30 91 18 03 	lds	r19, 0x0318
    12b2:	b4 cf       	rjmp	.-152    	; 0x121c <handleIRRemoteCommands+0x72>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	80 93 94 04 	sts	0x0494, r24
    12ba:	40 91 15 03 	lds	r20, 0x0315
    12be:	50 91 16 03 	lds	r21, 0x0316
    12c2:	20 91 17 03 	lds	r18, 0x0317
    12c6:	30 91 18 03 	lds	r19, 0x0318
    12ca:	a8 cf       	rjmp	.-176    	; 0x121c <handleIRRemoteCommands+0x72>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    12cc:	20 91 17 03 	lds	r18, 0x0317
    12d0:	30 91 18 03 	lds	r19, 0x0318
    12d4:	22 50       	subi	r18, 0x02	; 2
    12d6:	30 40       	sbci	r19, 0x00	; 0
    12d8:	30 93 18 03 	sts	0x0318, r19
    12dc:	20 93 17 03 	sts	0x0317, r18
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	21 38       	cpi	r18, 0x81	; 129
    12e4:	38 07       	cpc	r19, r24
    12e6:	0c f0       	brlt	.+2      	; 0x12ea <handleIRRemoteCommands+0x140>
    12e8:	5a c1       	rjmp	.+692    	; 0x159e <handleIRRemoteCommands+0x3f4>
    12ea:	81 e8       	ldi	r24, 0x81	; 129
    12ec:	9f ef       	ldi	r25, 0xFF	; 255
    12ee:	90 93 18 03 	sts	0x0318, r25
    12f2:	80 93 17 03 	sts	0x0317, r24
    12f6:	40 91 15 03 	lds	r20, 0x0315
    12fa:	50 91 16 03 	lds	r21, 0x0316
    12fe:	21 e8       	ldi	r18, 0x81	; 129
    1300:	3f ef       	ldi	r19, 0xFF	; 255
    1302:	8c cf       	rjmp	.-232    	; 0x121c <handleIRRemoteCommands+0x72>
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    1304:	40 91 15 03 	lds	r20, 0x0315
    1308:	50 91 16 03 	lds	r21, 0x0316
    130c:	80 91 13 03 	lds	r24, 0x0313
    1310:	90 91 14 03 	lds	r25, 0x0314
    1314:	48 17       	cp	r20, r24
    1316:	59 07       	cpc	r21, r25
    1318:	0c f0       	brlt	.+2      	; 0x131c <handleIRRemoteCommands+0x172>
    131a:	5b c1       	rjmp	.+694    	; 0x15d2 <handleIRRemoteCommands+0x428>
    131c:	9a 01       	movw	r18, r20
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired -= STEP_MOTORS;
    131e:	42 50       	subi	r20, 0x02	; 2
    1320:	50 40       	sbci	r21, 0x00	; 0
    1322:	50 93 16 03 	sts	0x0316, r21
    1326:	40 93 15 03 	sts	0x0315, r20
					pwm_left_desired -= STEP_MOTORS;
    132a:	22 50       	subi	r18, 0x02	; 2
    132c:	30 40       	sbci	r19, 0x00	; 0
    132e:	30 93 18 03 	sts	0x0318, r19
    1332:	20 93 17 03 	sts	0x0317, r18
	                if (pwm_right_desired < -127) pwm_right_desired = -127;
    1336:	8f ef       	ldi	r24, 0xFF	; 255
    1338:	41 38       	cpi	r20, 0x81	; 129
    133a:	58 07       	cpc	r21, r24
    133c:	44 f4       	brge	.+16     	; 0x134e <handleIRRemoteCommands+0x1a4>
    133e:	81 e8       	ldi	r24, 0x81	; 129
    1340:	9f ef       	ldi	r25, 0xFF	; 255
    1342:	90 93 16 03 	sts	0x0316, r25
    1346:	80 93 15 03 	sts	0x0315, r24
    134a:	41 e8       	ldi	r20, 0x81	; 129
    134c:	5f ef       	ldi	r21, 0xFF	; 255
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	21 38       	cpi	r18, 0x81	; 129
    1352:	38 07       	cpc	r19, r24
    1354:	0c f0       	brlt	.+2      	; 0x1358 <handleIRRemoteCommands+0x1ae>
    1356:	62 cf       	rjmp	.-316    	; 0x121c <handleIRRemoteCommands+0x72>
				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
					pwm_left_desired -= STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    1358:	81 e8       	ldi	r24, 0x81	; 129
    135a:	9f ef       	ldi	r25, 0xFF	; 255
    135c:	90 93 18 03 	sts	0x0318, r25
    1360:	80 93 17 03 	sts	0x0317, r24
    1364:	21 e8       	ldi	r18, 0x81	; 129
    1366:	3f ef       	ldi	r19, 0xFF	; 255
    1368:	59 cf       	rjmp	.-334    	; 0x121c <handleIRRemoteCommands+0x72>
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    136a:	40 91 15 03 	lds	r20, 0x0315
    136e:	50 91 16 03 	lds	r21, 0x0316
    1372:	42 50       	subi	r20, 0x02	; 2
    1374:	50 40       	sbci	r21, 0x00	; 0
    1376:	50 93 16 03 	sts	0x0316, r21
    137a:	40 93 15 03 	sts	0x0315, r20
					pwm_left_desired += STEP_MOTORS;
    137e:	60 91 17 03 	lds	r22, 0x0317
    1382:	70 91 18 03 	lds	r23, 0x0318
    1386:	6e 5f       	subi	r22, 0xFE	; 254
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	9b 01       	movw	r18, r22
    138c:	70 93 18 03 	sts	0x0318, r23
    1390:	60 93 17 03 	sts	0x0317, r22
                	if (pwm_right_desired<-127) pwm_right_desired=-127;
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	41 38       	cpi	r20, 0x81	; 129
    1398:	58 07       	cpc	r21, r24
    139a:	44 f4       	brge	.+16     	; 0x13ac <handleIRRemoteCommands+0x202>
    139c:	81 e8       	ldi	r24, 0x81	; 129
    139e:	9f ef       	ldi	r25, 0xFF	; 255
    13a0:	90 93 16 03 	sts	0x0316, r25
    13a4:	80 93 15 03 	sts	0x0315, r24
    13a8:	41 e8       	ldi	r20, 0x81	; 129
    13aa:	5f ef       	ldi	r21, 0xFF	; 255
                	if (pwm_left_desired>127) pwm_left_desired=127;
    13ac:	60 38       	cpi	r22, 0x80	; 128
    13ae:	71 05       	cpc	r23, r1
    13b0:	0c f4       	brge	.+2      	; 0x13b4 <handleIRRemoteCommands+0x20a>
    13b2:	34 cf       	rjmp	.-408    	; 0x121c <handleIRRemoteCommands+0x72>
    13b4:	8f e7       	ldi	r24, 0x7F	; 127
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	90 93 18 03 	sts	0x0318, r25
    13bc:	80 93 17 03 	sts	0x0317, r24
    13c0:	2f e7       	ldi	r18, 0x7F	; 127
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	2b cf       	rjmp	.-426    	; 0x121c <handleIRRemoteCommands+0x72>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    13c6:	10 92 16 03 	sts	0x0316, r1
    13ca:	10 92 15 03 	sts	0x0315, r1
					pwm_left_desired = 0;
    13ce:	10 92 18 03 	sts	0x0318, r1
    13d2:	10 92 17 03 	sts	0x0317, r1
					if(currentSelector == 8) {
    13d6:	80 91 70 04 	lds	r24, 0x0470
    13da:	88 30       	cpi	r24, 0x08	; 8
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <handleIRRemoteCommands+0x236>
    13de:	18 c1       	rjmp	.+560    	; 0x1610 <handleIRRemoteCommands+0x466>
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    13e0:	60 91 15 03 	lds	r22, 0x0315
    13e4:	80 91 16 03 	lds	r24, 0x0316
    13e8:	20 91 17 03 	lds	r18, 0x0317
    13ec:	30 91 18 03 	lds	r19, 0x0318
    13f0:	1a cf       	rjmp	.-460    	; 0x1226 <handleIRRemoteCommands+0x7c>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    13f2:	40 91 15 03 	lds	r20, 0x0315
    13f6:	50 91 16 03 	lds	r21, 0x0316
    13fa:	42 50       	subi	r20, 0x02	; 2
    13fc:	50 40       	sbci	r21, 0x00	; 0
    13fe:	50 93 16 03 	sts	0x0316, r21
    1402:	40 93 15 03 	sts	0x0315, r20
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
    1406:	2f ef       	ldi	r18, 0xFF	; 255
    1408:	41 38       	cpi	r20, 0x81	; 129
    140a:	52 07       	cpc	r21, r18
    140c:	0c f0       	brlt	.+2      	; 0x1410 <handleIRRemoteCommands+0x266>
    140e:	02 cf       	rjmp	.-508    	; 0x1214 <handleIRRemoteCommands+0x6a>
    1410:	81 e8       	ldi	r24, 0x81	; 129
    1412:	9f ef       	ldi	r25, 0xFF	; 255
    1414:	90 93 16 03 	sts	0x0316, r25
    1418:	80 93 15 03 	sts	0x0315, r24
    141c:	8f e7       	ldi	r24, 0x7F	; 127
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	20 91 17 03 	lds	r18, 0x0317
    1424:	30 91 18 03 	lds	r19, 0x0318

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    1428:	90 93 30 03 	sts	0x0330, r25
    142c:	80 93 2f 03 	sts	0x032F, r24
    1430:	fe ce       	rjmp	.-516    	; 0x122e <handleIRRemoteCommands+0x84>
                	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    1432:	40 91 15 03 	lds	r20, 0x0315
    1436:	50 91 16 03 	lds	r21, 0x0316
    143a:	4e 5f       	subi	r20, 0xFE	; 254
    143c:	5f 4f       	sbci	r21, 0xFF	; 255
    143e:	50 93 16 03 	sts	0x0316, r21
    1442:	40 93 15 03 	sts	0x0315, r20
					pwm_left_desired -= STEP_MOTORS;
    1446:	60 91 17 03 	lds	r22, 0x0317
    144a:	70 91 18 03 	lds	r23, 0x0318
    144e:	62 50       	subi	r22, 0x02	; 2
    1450:	70 40       	sbci	r23, 0x00	; 0
    1452:	9b 01       	movw	r18, r22
    1454:	70 93 18 03 	sts	0x0318, r23
    1458:	60 93 17 03 	sts	0x0317, r22
	                if (pwm_right_desired>127) pwm_right_desired=127;
    145c:	40 38       	cpi	r20, 0x80	; 128
    145e:	51 05       	cpc	r21, r1
    1460:	44 f0       	brlt	.+16     	; 0x1472 <handleIRRemoteCommands+0x2c8>
    1462:	8f e7       	ldi	r24, 0x7F	; 127
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	90 93 16 03 	sts	0x0316, r25
    146a:	80 93 15 03 	sts	0x0315, r24
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	50 e0       	ldi	r21, 0x00	; 0
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    1472:	61 58       	subi	r22, 0x81	; 129
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	0c f0       	brlt	.+2      	; 0x147a <handleIRRemoteCommands+0x2d0>
    1478:	d1 ce       	rjmp	.-606    	; 0x121c <handleIRRemoteCommands+0x72>
    147a:	6e cf       	rjmp	.-292    	; 0x1358 <handleIRRemoteCommands+0x1ae>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    147c:	20 91 17 03 	lds	r18, 0x0317
    1480:	30 91 18 03 	lds	r19, 0x0318
    1484:	2e 5f       	subi	r18, 0xFE	; 254
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	30 93 18 03 	sts	0x0318, r19
    148c:	20 93 17 03 	sts	0x0317, r18
	               	if (pwm_left_desired>127) pwm_left_desired=127;
    1490:	20 38       	cpi	r18, 0x80	; 128
    1492:	31 05       	cpc	r19, r1
    1494:	0c f4       	brge	.+2      	; 0x1498 <handleIRRemoteCommands+0x2ee>
    1496:	83 c0       	rjmp	.+262    	; 0x159e <handleIRRemoteCommands+0x3f4>
    1498:	8f e7       	ldi	r24, 0x7F	; 127
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	90 93 18 03 	sts	0x0318, r25
    14a0:	80 93 17 03 	sts	0x0317, r24
    14a4:	40 91 15 03 	lds	r20, 0x0315
    14a8:	50 91 16 03 	lds	r21, 0x0316
    14ac:	2f e7       	ldi	r18, 0x7F	; 127
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	b5 ce       	rjmp	.-662    	; 0x121c <handleIRRemoteCommands+0x72>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    14b2:	40 91 15 03 	lds	r20, 0x0315
    14b6:	50 91 16 03 	lds	r21, 0x0316
    14ba:	20 91 17 03 	lds	r18, 0x0317
    14be:	30 91 18 03 	lds	r19, 0x0318
    14c2:	24 17       	cp	r18, r20
    14c4:	35 07       	cpc	r19, r21
    14c6:	0c f0       	brlt	.+2      	; 0x14ca <handleIRRemoteCommands+0x320>
    14c8:	82 c0       	rjmp	.+260    	; 0x15ce <handleIRRemoteCommands+0x424>
    14ca:	9a 01       	movw	r18, r20
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    14cc:	4e 5f       	subi	r20, 0xFE	; 254
    14ce:	5f 4f       	sbci	r21, 0xFF	; 255
    14d0:	50 93 16 03 	sts	0x0316, r21
    14d4:	40 93 15 03 	sts	0x0315, r20
					pwm_left_desired += STEP_MOTORS;
    14d8:	2e 5f       	subi	r18, 0xFE	; 254
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	30 93 18 03 	sts	0x0318, r19
    14e0:	20 93 17 03 	sts	0x0317, r18
	                if (pwm_right_desired > 127) pwm_right_desired = 127;
    14e4:	40 38       	cpi	r20, 0x80	; 128
    14e6:	51 05       	cpc	r21, r1
    14e8:	44 f0       	brlt	.+16     	; 0x14fa <handleIRRemoteCommands+0x350>
    14ea:	8f e7       	ldi	r24, 0x7F	; 127
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	90 93 16 03 	sts	0x0316, r25
    14f2:	80 93 15 03 	sts	0x0315, r24
    14f6:	4f e7       	ldi	r20, 0x7F	; 127
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
    14fa:	20 38       	cpi	r18, 0x80	; 128
    14fc:	31 05       	cpc	r19, r1
    14fe:	0c f4       	brge	.+2      	; 0x1502 <handleIRRemoteCommands+0x358>
    1500:	8d ce       	rjmp	.-742    	; 0x121c <handleIRRemoteCommands+0x72>
    1502:	58 cf       	rjmp	.-336    	; 0x13b4 <handleIRRemoteCommands+0x20a>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    1504:	40 91 15 03 	lds	r20, 0x0315
    1508:	50 91 16 03 	lds	r21, 0x0316
    150c:	4e 5f       	subi	r20, 0xFE	; 254
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	50 93 16 03 	sts	0x0316, r21
    1514:	40 93 15 03 	sts	0x0315, r20
	                if (pwm_right_desired>127) pwm_right_desired=127;
    1518:	40 38       	cpi	r20, 0x80	; 128
    151a:	51 05       	cpc	r21, r1
    151c:	0c f4       	brge	.+2      	; 0x1520 <handleIRRemoteCommands+0x376>
    151e:	7a ce       	rjmp	.-780    	; 0x1214 <handleIRRemoteCommands+0x6a>
    1520:	8f e7       	ldi	r24, 0x7F	; 127
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	90 93 16 03 	sts	0x0316, r25
    1528:	80 93 15 03 	sts	0x0315, r24
    152c:	59 cf       	rjmp	.-334    	; 0x13e0 <handleIRRemoteCommands+0x236>
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    152e:	80 91 45 04 	lds	r24, 0x0445
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	65 e0       	ldi	r22, 0x05	; 5
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__divmodhi4>
    153e:	80 93 45 04 	sts	0x0445, r24

					if(colorState==0) {			// turn on blue and off all IRs
    1542:	88 23       	and	r24, r24
    1544:	89 f5       	brne	.+98     	; 0x15a8 <handleIRRemoteCommands+0x3fe>
						LED_IR1_HIGH;
    1546:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    1548:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    154a:	10 92 0a 02 	sts	0x020A, r1
						pwm_green = MAX_LEDS_PWM;
    154e:	8f ef       	ldi	r24, 0xFF	; 255
    1550:	80 93 09 02 	sts	0x0209, r24
						pwm_red = MAX_LEDS_PWM;
    1554:	80 93 08 02 	sts	0x0208, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    1558:	80 91 08 02 	lds	r24, 0x0208
    155c:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <updateRedLed>
					updateGreenLed(pwm_green);
    1560:	80 91 09 02 	lds	r24, 0x0209
    1564:	0e 94 14 36 	call	0x6c28	; 0x6c28 <updateGreenLed>
					updateBlueLed(pwm_blue);
    1568:	80 91 0a 02 	lds	r24, 0x020A
    156c:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <updateBlueLed>
    1570:	40 91 15 03 	lds	r20, 0x0315
    1574:	50 91 16 03 	lds	r21, 0x0316
    1578:	20 91 17 03 	lds	r18, 0x0317
    157c:	30 91 18 03 	lds	r19, 0x0318
    1580:	4d ce       	rjmp	.-870    	; 0x121c <handleIRRemoteCommands+0x72>
				speedr = (-pwm_right_desired);
			}
			if(pwm_left_desired >= 0) {
				speedl = pwm_left_desired;
			} else {
				speedl = (-pwm_left_desired);
    1582:	88 27       	eor	r24, r24
    1584:	99 27       	eor	r25, r25
    1586:	82 1b       	sub	r24, r18
    1588:	93 0b       	sbc	r25, r19
    158a:	90 93 2e 03 	sts	0x032E, r25
    158e:	80 93 2d 03 	sts	0x032D, r24
    1592:	08 95       	ret

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    1594:	88 27       	eor	r24, r24
    1596:	99 27       	eor	r25, r25
    1598:	84 1b       	sub	r24, r20
    159a:	95 0b       	sbc	r25, r21
    159c:	45 cf       	rjmp	.-374    	; 0x1428 <handleIRRemoteCommands+0x27e>
    159e:	40 91 15 03 	lds	r20, 0x0315
    15a2:	50 91 16 03 	lds	r21, 0x0316
    15a6:	3a ce       	rjmp	.-908    	; 0x121c <handleIRRemoteCommands+0x72>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	09 f4       	brne	.+2      	; 0x15ae <handleIRRemoteCommands+0x404>
    15ac:	4e c0       	rjmp	.+156    	; 0x164a <handleIRRemoteCommands+0x4a0>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <handleIRRemoteCommands+0x40a>
    15b2:	53 c0       	rjmp	.+166    	; 0x165a <handleIRRemoteCommands+0x4b0>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	09 f4       	brne	.+2      	; 0x15ba <handleIRRemoteCommands+0x410>
    15b8:	5a c0       	rjmp	.+180    	; 0x166e <handleIRRemoteCommands+0x4c4>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
    15ba:	84 30       	cpi	r24, 0x04	; 4
    15bc:	69 f6       	brne	.-102    	; 0x1558 <handleIRRemoteCommands+0x3ae>
						pwm_blue = MAX_LEDS_PWM;
    15be:	8f ef       	ldi	r24, 0xFF	; 255
    15c0:	80 93 0a 02 	sts	0x020A, r24
						pwm_green = MAX_LEDS_PWM;
    15c4:	80 93 09 02 	sts	0x0209, r24
						pwm_red = MAX_LEDS_PWM;
    15c8:	80 93 08 02 	sts	0x0208, r24
    15cc:	c5 cf       	rjmp	.-118    	; 0x1558 <handleIRRemoteCommands+0x3ae>
    15ce:	a9 01       	movw	r20, r18
    15d0:	7d cf       	rjmp	.-262    	; 0x14cc <handleIRRemoteCommands+0x322>
				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    15d2:	20 91 17 03 	lds	r18, 0x0317
    15d6:	30 91 18 03 	lds	r19, 0x0318
    15da:	a9 01       	movw	r20, r18
    15dc:	a0 ce       	rjmp	.-704    	; 0x131e <handleIRRemoteCommands+0x174>
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
					switch(behaviorState) {
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <handleIRRemoteCommands+0x43a>
    15e2:	4f ce       	rjmp	.-866    	; 0x1282 <handleIRRemoteCommands+0xd8>
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	09 f0       	breq	.+2      	; 0x15ea <handleIRRemoteCommands+0x440>
    15e8:	51 ce       	rjmp	.-862    	; 0x128c <handleIRRemoteCommands+0xe2>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 93 94 04 	sts	0x0494, r24
							cliffAvoidanceEnabled = 1;
    15f0:	80 93 95 04 	sts	0x0495, r24
    15f4:	0b ce       	rjmp	.-1002   	; 0x120c <handleIRRemoteCommands+0x62>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    15f6:	80 93 94 04 	sts	0x0494, r24
							cliffAvoidanceEnabled = 0;
    15fa:	10 92 95 04 	sts	0x0495, r1
    15fe:	40 91 15 03 	lds	r20, 0x0315
    1602:	50 91 16 03 	lds	r21, 0x0316
    1606:	20 91 17 03 	lds	r18, 0x0317
    160a:	30 91 18 03 	lds	r19, 0x0318
    160e:	06 ce       	rjmp	.-1012   	; 0x121c <handleIRRemoteCommands+0x72>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    1610:	0e 94 e1 39 	call	0x73c2	; 0x73c2 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	93 e0       	ldi	r25, 0x03	; 3
    1618:	90 93 86 02 	sts	0x0286, r25
    161c:	80 93 85 02 	sts	0x0285, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    1620:	90 93 8c 02 	sts	0x028C, r25
    1624:	80 93 8b 02 	sts	0x028B, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    1628:	86 e0       	ldi	r24, 0x06	; 6
    162a:	80 93 81 0b 	sts	0x0B81, r24
						calibVelIndex = 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	80 93 db 08 	sts	0x08DB, r24
						calibrateOdomFlag = 1;
    1634:	80 93 8e 05 	sts	0x058E, r24
    1638:	40 91 15 03 	lds	r20, 0x0315
    163c:	50 91 16 03 	lds	r21, 0x0316
    1640:	20 91 17 03 	lds	r18, 0x0317
    1644:	30 91 18 03 	lds	r19, 0x0318
    1648:	e9 cd       	rjmp	.-1070   	; 0x121c <handleIRRemoteCommands+0x72>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	80 93 0a 02 	sts	0x020A, r24
						pwm_green = 0;
    1650:	10 92 09 02 	sts	0x0209, r1
						pwm_red = MAX_LEDS_PWM;
    1654:	80 93 08 02 	sts	0x0208, r24
    1658:	7f cf       	rjmp	.-258    	; 0x1558 <handleIRRemoteCommands+0x3ae>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    165a:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    165c:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    165e:	8f ef       	ldi	r24, 0xFF	; 255
    1660:	80 93 0a 02 	sts	0x020A, r24
						pwm_green = MAX_LEDS_PWM;
    1664:	80 93 09 02 	sts	0x0209, r24
						pwm_red = 0;
    1668:	10 92 08 02 	sts	0x0208, r1
    166c:	75 cf       	rjmp	.-278    	; 0x1558 <handleIRRemoteCommands+0x3ae>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    166e:	10 92 0a 02 	sts	0x020A, r1
						pwm_green = 0;
    1672:	10 92 09 02 	sts	0x0209, r1
						pwm_red = 0;
    1676:	10 92 08 02 	sts	0x0208, r1
    167a:	6e cf       	rjmp	.-292    	; 0x1558 <handleIRRemoteCommands+0x3ae>

0000167c <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    167c:	08 95       	ret

0000167e <start_speed_control_right>:

void start_speed_control_right(signed int *pwm_right) {
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	ec 01       	movw	r28, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    168c:	88 81       	ld	r24, Y
    168e:	99 81       	ldd	r25, Y+1	; 0x01
    1690:	89 2b       	or	r24, r25
    1692:	09 f4       	brne	.+2      	; 0x1696 <start_speed_control_right+0x18>
    1694:	b2 c0       	rjmp	.+356    	; 0x17fa <start_speed_control_right+0x17c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1696:	e0 90 47 0b 	lds	r14, 0x0B47
    169a:	f0 90 48 0b 	lds	r15, 0x0B48
    169e:	f0 92 e1 08 	sts	0x08E1, r15
    16a2:	e0 92 e0 08 	sts	0x08E0, r14
	if(*pwm_right >= 0) {
    16a6:	28 81       	ld	r18, Y
    16a8:	39 81       	ldd	r19, Y+1	; 0x01
    16aa:	37 fd       	sbrc	r19, 7
    16ac:	e4 c0       	rjmp	.+456    	; 0x1876 <start_speed_control_right+0x1f8>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    16ae:	80 91 0f 03 	lds	r24, 0x030F
    16b2:	90 91 10 03 	lds	r25, 0x0310
    16b6:	28 1b       	sub	r18, r24
    16b8:	39 0b       	sbc	r19, r25
    16ba:	30 93 48 0b 	sts	0x0B48, r19
    16be:	20 93 47 0b 	sts	0x0B47, r18
    16c2:	f9 01       	movw	r30, r18
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    16c4:	20 91 27 03 	lds	r18, 0x0327
    16c8:	30 91 28 03 	lds	r19, 0x0328
    16cc:	2e 0f       	add	r18, r30
    16ce:	3f 1f       	adc	r19, r31
    16d0:	30 93 28 03 	sts	0x0328, r19
    16d4:	20 93 27 03 	sts	0x0327, r18

	if(delta_right_speed_sum > I_LIMIT) {
    16d8:	86 e0       	ldi	r24, 0x06	; 6
    16da:	21 34       	cpi	r18, 0x41	; 65
    16dc:	38 07       	cpc	r19, r24
    16de:	0c f4       	brge	.+2      	; 0x16e2 <start_speed_control_right+0x64>
    16e0:	ad c0       	rjmp	.+346    	; 0x183c <start_speed_control_right+0x1be>
		delta_right_speed_sum = I_LIMIT;
    16e2:	80 e4       	ldi	r24, 0x40	; 64
    16e4:	96 e0       	ldi	r25, 0x06	; 6
    16e6:	90 93 28 03 	sts	0x0328, r25
    16ea:	80 93 27 03 	sts	0x0327, r24
    16ee:	20 e4       	ldi	r18, 0x40	; 64
    16f0:	36 e0       	ldi	r19, 0x06	; 6
		delta_right_speed_sum = -I_LIMIT;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    16f2:	08 81       	ld	r16, Y
    16f4:	19 81       	ldd	r17, Y+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);
    16f6:	c9 01       	movw	r24, r18
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	82 0f       	add	r24, r18
    16fe:	93 1f       	adc	r25, r19
    1700:	ac 01       	movw	r20, r24
    1702:	66 27       	eor	r22, r22
    1704:	57 fd       	sbrc	r21, 7
    1706:	60 95       	com	r22
    1708:	76 2f       	mov	r23, r22
    170a:	cf 01       	movw	r24, r30
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	9f 01       	movw	r18, r30
    1712:	22 0f       	add	r18, r18
    1714:	33 1f       	adc	r19, r19
    1716:	22 0f       	add	r18, r18
    1718:	33 1f       	adc	r19, r19
    171a:	22 0f       	add	r18, r18
    171c:	33 1f       	adc	r19, r19
    171e:	82 0f       	add	r24, r18
    1720:	93 1f       	adc	r25, r19
    1722:	aa 27       	eor	r26, r26
    1724:	97 fd       	sbrc	r25, 7
    1726:	a0 95       	com	r26
    1728:	ba 2f       	mov	r27, r26
    172a:	48 0f       	add	r20, r24
    172c:	59 1f       	adc	r21, r25
    172e:	6a 1f       	adc	r22, r26
    1730:	7b 1f       	adc	r23, r27
    1732:	ee 19       	sub	r30, r14
    1734:	ff 09       	sbc	r31, r15
    1736:	ee 0f       	add	r30, r30
    1738:	ff 1f       	adc	r31, r31
    173a:	cf 01       	movw	r24, r30
    173c:	aa 27       	eor	r26, r26
    173e:	97 fd       	sbrc	r25, 7
    1740:	a0 95       	com	r26
    1742:	ba 2f       	mov	r27, r26
    1744:	48 0f       	add	r20, r24
    1746:	59 1f       	adc	r21, r25
    1748:	6a 1f       	adc	r22, r26
    174a:	7b 1f       	adc	r23, r27
    174c:	c8 01       	movw	r24, r16
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	aa 27       	eor	r26, r26
    175c:	97 fd       	sbrc	r25, 7
    175e:	a0 95       	com	r26
    1760:	ba 2f       	mov	r27, r26
    1762:	48 0f       	add	r20, r24
    1764:	59 1f       	adc	r21, r25
    1766:	6a 1f       	adc	r22, r26
    1768:	7b 1f       	adc	r23, r27
    176a:	40 93 1d 03 	sts	0x031D, r20
    176e:	50 93 1e 03 	sts	0x031E, r21
    1772:	60 93 1f 03 	sts	0x031F, r22
    1776:	70 93 20 03 	sts	0x0320, r23

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    177a:	77 fd       	sbrc	r23, 7
    177c:	6d c0       	rjmp	.+218    	; 0x1858 <start_speed_control_right+0x1da>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    177e:	14 16       	cp	r1, r20
    1780:	15 06       	cpc	r1, r21
    1782:	16 06       	cpc	r1, r22
    1784:	17 06       	cpc	r1, r23
    1786:	14 f4       	brge	.+4      	; 0x178c <start_speed_control_right+0x10e>
    1788:	17 fd       	sbrc	r17, 7
    178a:	68 c0       	rjmp	.+208    	; 0x185c <start_speed_control_right+0x1de>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    178c:	41 5c       	subi	r20, 0xC1	; 193
    178e:	5d 45       	sbci	r21, 0x5D	; 93
    1790:	60 40       	sbci	r22, 0x00	; 0
    1792:	70 40       	sbci	r23, 0x00	; 0
    1794:	0c f4       	brge	.+2      	; 0x1798 <start_speed_control_right+0x11a>
    1796:	80 c0       	rjmp	.+256    	; 0x1898 <start_speed_control_right+0x21a>
    1798:	80 ec       	ldi	r24, 0xC0	; 192
    179a:	9d e5       	ldi	r25, 0x5D	; 93
    179c:	a0 e0       	ldi	r26, 0x00	; 0
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	80 93 1d 03 	sts	0x031D, r24
    17a4:	90 93 1e 03 	sts	0x031E, r25
    17a8:	a0 93 1f 03 	sts	0x031F, r26
    17ac:	b0 93 20 03 	sts	0x0320, r27
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    17b0:	24 e0       	ldi	r18, 0x04	; 4
    17b2:	b5 95       	asr	r27
    17b4:	a7 95       	ror	r26
    17b6:	97 95       	ror	r25
    17b8:	87 95       	ror	r24
    17ba:	2a 95       	dec	r18
    17bc:	d1 f7       	brne	.-12     	; 0x17b2 <start_speed_control_right+0x134>
    17be:	9c 01       	movw	r18, r24
    17c0:	99 83       	std	Y+1, r25	; 0x01
    17c2:	88 83       	st	Y, r24

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    17c4:	80 91 05 03 	lds	r24, 0x0305
    17c8:	90 91 06 03 	lds	r25, 0x0306
    17cc:	18 16       	cp	r1, r24
    17ce:	19 06       	cpc	r1, r25
    17d0:	0c f0       	brlt	.+2      	; 0x17d4 <start_speed_control_right+0x156>
    17d2:	5d c0       	rjmp	.+186    	; 0x188e <start_speed_control_right+0x210>
		*pwm_right += 1;
    17d4:	c9 01       	movw	r24, r18
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	99 83       	std	Y+1, r25	; 0x01
    17da:	88 83       	st	Y, r24
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    17dc:	22 e0       	ldi	r18, 0x02	; 2
    17de:	80 30       	cpi	r24, 0x00	; 0
    17e0:	92 07       	cpc	r25, r18
    17e2:	f4 f0       	brlt	.+60     	; 0x1820 <start_speed_control_right+0x1a2>
    17e4:	8f ef       	ldi	r24, 0xFF	; 255
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	99 83       	std	Y+1, r25	; 0x01
    17ea:	88 83       	st	Y, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	ff 90       	pop	r15
    17f6:	ef 90       	pop	r14
    17f8:	08 95       	ret
void start_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    17fa:	10 92 28 03 	sts	0x0328, r1
    17fe:	10 92 27 03 	sts	0x0327, r1
		delta_right_speed_current = 0;
    1802:	10 92 48 0b 	sts	0x0B48, r1
    1806:	10 92 47 0b 	sts	0x0B47, r1
		delta_right_speed_prev = 0;
    180a:	10 92 e1 08 	sts	0x08E1, r1
    180e:	10 92 e0 08 	sts	0x08E0, r1
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	08 95       	ret
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1820:	81 50       	subi	r24, 0x01	; 1
    1822:	9e 4f       	sbci	r25, 0xFE	; 254
    1824:	1c f7       	brge	.-58     	; 0x17ec <start_speed_control_right+0x16e>
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	9e ef       	ldi	r25, 0xFE	; 254
    182a:	99 83       	std	Y+1, r25	; 0x01
    182c:	88 83       	st	Y, r24

}
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	ff 90       	pop	r15
    1838:	ef 90       	pop	r14
    183a:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT) {
		delta_right_speed_sum = I_LIMIT;
	}else if(delta_right_speed_sum < -I_LIMIT) {
    183c:	89 ef       	ldi	r24, 0xF9	; 249
    183e:	20 3c       	cpi	r18, 0xC0	; 192
    1840:	38 07       	cpc	r19, r24
    1842:	0c f0       	brlt	.+2      	; 0x1846 <start_speed_control_right+0x1c8>
    1844:	56 cf       	rjmp	.-340    	; 0x16f2 <start_speed_control_right+0x74>
		delta_right_speed_sum = -I_LIMIT;
    1846:	80 ec       	ldi	r24, 0xC0	; 192
    1848:	99 ef       	ldi	r25, 0xF9	; 249
    184a:	90 93 28 03 	sts	0x0328, r25
    184e:	80 93 27 03 	sts	0x0327, r24
    1852:	20 ec       	ldi	r18, 0xC0	; 192
    1854:	39 ef       	ldi	r19, 0xF9	; 249
    1856:	4d cf       	rjmp	.-358    	; 0x16f2 <start_speed_control_right+0x74>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1858:	17 fd       	sbrc	r17, 7
    185a:	98 cf       	rjmp	.-208    	; 0x178c <start_speed_control_right+0x10e>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    185c:	10 92 1d 03 	sts	0x031D, r1
    1860:	10 92 1e 03 	sts	0x031E, r1
    1864:	10 92 1f 03 	sts	0x031F, r1
    1868:	10 92 20 03 	sts	0x0320, r1
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a0 e0       	ldi	r26, 0x00	; 0
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	9d cf       	rjmp	.-198    	; 0x17b0 <start_speed_control_right+0x132>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1876:	80 91 0f 03 	lds	r24, 0x030F
    187a:	90 91 10 03 	lds	r25, 0x0310
    187e:	28 0f       	add	r18, r24
    1880:	39 1f       	adc	r19, r25
    1882:	30 93 48 0b 	sts	0x0B48, r19
    1886:	20 93 47 0b 	sts	0x0B47, r18
    188a:	f9 01       	movw	r30, r18
    188c:	1b cf       	rjmp	.-458    	; 0x16c4 <start_speed_control_right+0x46>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    188e:	c9 01       	movw	r24, r18
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	99 83       	std	Y+1, r25	; 0x01
    1894:	88 83       	st	Y, r24
    1896:	a2 cf       	rjmp	.-188    	; 0x17dc <start_speed_control_right+0x15e>
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1898:	80 91 1d 03 	lds	r24, 0x031D
    189c:	90 91 1e 03 	lds	r25, 0x031E
    18a0:	a0 91 1f 03 	lds	r26, 0x031F
    18a4:	b0 91 20 03 	lds	r27, 0x0320
    18a8:	80 34       	cpi	r24, 0x40	; 64
    18aa:	22 ea       	ldi	r18, 0xA2	; 162
    18ac:	92 07       	cpc	r25, r18
    18ae:	2f ef       	ldi	r18, 0xFF	; 255
    18b0:	a2 07       	cpc	r26, r18
    18b2:	2f ef       	ldi	r18, 0xFF	; 255
    18b4:	b2 07       	cpc	r27, r18
    18b6:	0c f0       	brlt	.+2      	; 0x18ba <start_speed_control_right+0x23c>
    18b8:	7b cf       	rjmp	.-266    	; 0x17b0 <start_speed_control_right+0x132>
    18ba:	80 e4       	ldi	r24, 0x40	; 64
    18bc:	92 ea       	ldi	r25, 0xA2	; 162
    18be:	af ef       	ldi	r26, 0xFF	; 255
    18c0:	bf ef       	ldi	r27, 0xFF	; 255
    18c2:	80 93 1d 03 	sts	0x031D, r24
    18c6:	90 93 1e 03 	sts	0x031E, r25
    18ca:	a0 93 1f 03 	sts	0x031F, r26
    18ce:	b0 93 20 03 	sts	0x0320, r27
    18d2:	6e cf       	rjmp	.-292    	; 0x17b0 <start_speed_control_right+0x132>

000018d4 <start_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_speed_control_left(signed int *pwm_left) {
    18d4:	ef 92       	push	r14
    18d6:	ff 92       	push	r15
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	ec 01       	movw	r28, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    18e2:	88 81       	ld	r24, Y
    18e4:	99 81       	ldd	r25, Y+1	; 0x01
    18e6:	89 2b       	or	r24, r25
    18e8:	09 f4       	brne	.+2      	; 0x18ec <start_speed_control_left+0x18>
    18ea:	b2 c0       	rjmp	.+356    	; 0x1a50 <start_speed_control_left+0x17c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    18ec:	e0 90 93 05 	lds	r14, 0x0593
    18f0:	f0 90 94 05 	lds	r15, 0x0594
    18f4:	f0 92 a9 09 	sts	0x09A9, r15
    18f8:	e0 92 a8 09 	sts	0x09A8, r14
	if(*pwm_left >= 0) {
    18fc:	28 81       	ld	r18, Y
    18fe:	39 81       	ldd	r19, Y+1	; 0x01
    1900:	37 fd       	sbrc	r19, 7
    1902:	e4 c0       	rjmp	.+456    	; 0x1acc <start_speed_control_left+0x1f8>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1904:	80 91 0d 03 	lds	r24, 0x030D
    1908:	90 91 0e 03 	lds	r25, 0x030E
    190c:	28 1b       	sub	r18, r24
    190e:	39 0b       	sbc	r19, r25
    1910:	30 93 94 05 	sts	0x0594, r19
    1914:	20 93 93 05 	sts	0x0593, r18
    1918:	f9 01       	movw	r30, r18
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    191a:	20 91 25 03 	lds	r18, 0x0325
    191e:	30 91 26 03 	lds	r19, 0x0326
    1922:	2e 0f       	add	r18, r30
    1924:	3f 1f       	adc	r19, r31
    1926:	30 93 26 03 	sts	0x0326, r19
    192a:	20 93 25 03 	sts	0x0325, r18

	if(delta_left_speed_sum > I_LIMIT) {
    192e:	86 e0       	ldi	r24, 0x06	; 6
    1930:	21 34       	cpi	r18, 0x41	; 65
    1932:	38 07       	cpc	r19, r24
    1934:	0c f4       	brge	.+2      	; 0x1938 <start_speed_control_left+0x64>
    1936:	ad c0       	rjmp	.+346    	; 0x1a92 <start_speed_control_left+0x1be>
		delta_left_speed_sum = I_LIMIT;
    1938:	80 e4       	ldi	r24, 0x40	; 64
    193a:	96 e0       	ldi	r25, 0x06	; 6
    193c:	90 93 26 03 	sts	0x0326, r25
    1940:	80 93 25 03 	sts	0x0325, r24
    1944:	20 e4       	ldi	r18, 0x40	; 64
    1946:	36 e0       	ldi	r19, 0x06	; 6
		delta_left_speed_sum = -I_LIMIT;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    1948:	08 81       	ld	r16, Y
    194a:	19 81       	ldd	r17, Y+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);
    194c:	c9 01       	movw	r24, r18
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	82 0f       	add	r24, r18
    1954:	93 1f       	adc	r25, r19
    1956:	ac 01       	movw	r20, r24
    1958:	66 27       	eor	r22, r22
    195a:	57 fd       	sbrc	r21, 7
    195c:	60 95       	com	r22
    195e:	76 2f       	mov	r23, r22
    1960:	cf 01       	movw	r24, r30
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	9f 01       	movw	r18, r30
    1968:	22 0f       	add	r18, r18
    196a:	33 1f       	adc	r19, r19
    196c:	22 0f       	add	r18, r18
    196e:	33 1f       	adc	r19, r19
    1970:	22 0f       	add	r18, r18
    1972:	33 1f       	adc	r19, r19
    1974:	82 0f       	add	r24, r18
    1976:	93 1f       	adc	r25, r19
    1978:	aa 27       	eor	r26, r26
    197a:	97 fd       	sbrc	r25, 7
    197c:	a0 95       	com	r26
    197e:	ba 2f       	mov	r27, r26
    1980:	48 0f       	add	r20, r24
    1982:	59 1f       	adc	r21, r25
    1984:	6a 1f       	adc	r22, r26
    1986:	7b 1f       	adc	r23, r27
    1988:	ee 19       	sub	r30, r14
    198a:	ff 09       	sbc	r31, r15
    198c:	ee 0f       	add	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	cf 01       	movw	r24, r30
    1992:	aa 27       	eor	r26, r26
    1994:	97 fd       	sbrc	r25, 7
    1996:	a0 95       	com	r26
    1998:	ba 2f       	mov	r27, r26
    199a:	48 0f       	add	r20, r24
    199c:	59 1f       	adc	r21, r25
    199e:	6a 1f       	adc	r22, r26
    19a0:	7b 1f       	adc	r23, r27
    19a2:	c8 01       	movw	r24, r16
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	aa 27       	eor	r26, r26
    19b2:	97 fd       	sbrc	r25, 7
    19b4:	a0 95       	com	r26
    19b6:	ba 2f       	mov	r27, r26
    19b8:	48 0f       	add	r20, r24
    19ba:	59 1f       	adc	r21, r25
    19bc:	6a 1f       	adc	r22, r26
    19be:	7b 1f       	adc	r23, r27
    19c0:	40 93 21 03 	sts	0x0321, r20
    19c4:	50 93 22 03 	sts	0x0322, r21
    19c8:	60 93 23 03 	sts	0x0323, r22
    19cc:	70 93 24 03 	sts	0x0324, r23

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    19d0:	77 fd       	sbrc	r23, 7
    19d2:	6d c0       	rjmp	.+218    	; 0x1aae <start_speed_control_left+0x1da>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    19d4:	14 16       	cp	r1, r20
    19d6:	15 06       	cpc	r1, r21
    19d8:	16 06       	cpc	r1, r22
    19da:	17 06       	cpc	r1, r23
    19dc:	14 f4       	brge	.+4      	; 0x19e2 <start_speed_control_left+0x10e>
    19de:	17 fd       	sbrc	r17, 7
    19e0:	68 c0       	rjmp	.+208    	; 0x1ab2 <start_speed_control_left+0x1de>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    19e2:	41 5c       	subi	r20, 0xC1	; 193
    19e4:	5d 45       	sbci	r21, 0x5D	; 93
    19e6:	60 40       	sbci	r22, 0x00	; 0
    19e8:	70 40       	sbci	r23, 0x00	; 0
    19ea:	0c f4       	brge	.+2      	; 0x19ee <start_speed_control_left+0x11a>
    19ec:	80 c0       	rjmp	.+256    	; 0x1aee <start_speed_control_left+0x21a>
    19ee:	80 ec       	ldi	r24, 0xC0	; 192
    19f0:	9d e5       	ldi	r25, 0x5D	; 93
    19f2:	a0 e0       	ldi	r26, 0x00	; 0
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	80 93 21 03 	sts	0x0321, r24
    19fa:	90 93 22 03 	sts	0x0322, r25
    19fe:	a0 93 23 03 	sts	0x0323, r26
    1a02:	b0 93 24 03 	sts	0x0324, r27
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    1a06:	54 e0       	ldi	r21, 0x04	; 4
    1a08:	b5 95       	asr	r27
    1a0a:	a7 95       	ror	r26
    1a0c:	97 95       	ror	r25
    1a0e:	87 95       	ror	r24
    1a10:	5a 95       	dec	r21
    1a12:	d1 f7       	brne	.-12     	; 0x1a08 <start_speed_control_left+0x134>
    1a14:	9c 01       	movw	r18, r24
    1a16:	99 83       	std	Y+1, r25	; 0x01
    1a18:	88 83       	st	Y, r24

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    1a1a:	80 91 07 03 	lds	r24, 0x0307
    1a1e:	90 91 08 03 	lds	r25, 0x0308
    1a22:	18 16       	cp	r1, r24
    1a24:	19 06       	cpc	r1, r25
    1a26:	0c f0       	brlt	.+2      	; 0x1a2a <start_speed_control_left+0x156>
    1a28:	5d c0       	rjmp	.+186    	; 0x1ae4 <start_speed_control_left+0x210>
		*pwm_left += 1;
    1a2a:	c9 01       	movw	r24, r18
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	99 83       	std	Y+1, r25	; 0x01
    1a30:	88 83       	st	Y, r24
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1a32:	22 e0       	ldi	r18, 0x02	; 2
    1a34:	80 30       	cpi	r24, 0x00	; 0
    1a36:	92 07       	cpc	r25, r18
    1a38:	f4 f0       	brlt	.+60     	; 0x1a76 <start_speed_control_left+0x1a2>
    1a3a:	8f ef       	ldi	r24, 0xFF	; 255
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	99 83       	std	Y+1, r25	; 0x01
    1a40:	88 83       	st	Y, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	ff 90       	pop	r15
    1a4c:	ef 90       	pop	r14
    1a4e:	08 95       	ret
void start_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1a50:	10 92 26 03 	sts	0x0326, r1
    1a54:	10 92 25 03 	sts	0x0325, r1
		delta_left_speed_current = 0;
    1a58:	10 92 94 05 	sts	0x0594, r1
    1a5c:	10 92 93 05 	sts	0x0593, r1
		delta_left_speed_prev = 0;
    1a60:	10 92 a9 09 	sts	0x09A9, r1
    1a64:	10 92 a8 09 	sts	0x09A8, r1
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	ff 90       	pop	r15
    1a72:	ef 90       	pop	r14
    1a74:	08 95       	ret
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1a76:	81 50       	subi	r24, 0x01	; 1
    1a78:	9e 4f       	sbci	r25, 0xFE	; 254
    1a7a:	1c f7       	brge	.-58     	; 0x1a42 <start_speed_control_left+0x16e>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	9e ef       	ldi	r25, 0xFE	; 254
    1a80:	99 83       	std	Y+1, r25	; 0x01
    1a82:	88 83       	st	Y, r24

}
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	ff 90       	pop	r15
    1a8e:	ef 90       	pop	r14
    1a90:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT) {
		delta_left_speed_sum = I_LIMIT;
	} else if(delta_left_speed_sum < -I_LIMIT) {
    1a92:	89 ef       	ldi	r24, 0xF9	; 249
    1a94:	20 3c       	cpi	r18, 0xC0	; 192
    1a96:	38 07       	cpc	r19, r24
    1a98:	0c f0       	brlt	.+2      	; 0x1a9c <start_speed_control_left+0x1c8>
    1a9a:	56 cf       	rjmp	.-340    	; 0x1948 <start_speed_control_left+0x74>
		delta_left_speed_sum = -I_LIMIT;
    1a9c:	80 ec       	ldi	r24, 0xC0	; 192
    1a9e:	99 ef       	ldi	r25, 0xF9	; 249
    1aa0:	90 93 26 03 	sts	0x0326, r25
    1aa4:	80 93 25 03 	sts	0x0325, r24
    1aa8:	20 ec       	ldi	r18, 0xC0	; 192
    1aaa:	39 ef       	ldi	r19, 0xF9	; 249
    1aac:	4d cf       	rjmp	.-358    	; 0x1948 <start_speed_control_left+0x74>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1aae:	17 fd       	sbrc	r17, 7
    1ab0:	98 cf       	rjmp	.-208    	; 0x19e2 <start_speed_control_left+0x10e>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    1ab2:	10 92 21 03 	sts	0x0321, r1
    1ab6:	10 92 22 03 	sts	0x0322, r1
    1aba:	10 92 23 03 	sts	0x0323, r1
    1abe:	10 92 24 03 	sts	0x0324, r1
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e0       	ldi	r26, 0x00	; 0
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	9d cf       	rjmp	.-198    	; 0x1a06 <start_speed_control_left+0x132>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1acc:	80 91 0d 03 	lds	r24, 0x030D
    1ad0:	90 91 0e 03 	lds	r25, 0x030E
    1ad4:	28 0f       	add	r18, r24
    1ad6:	39 1f       	adc	r19, r25
    1ad8:	30 93 94 05 	sts	0x0594, r19
    1adc:	20 93 93 05 	sts	0x0593, r18
    1ae0:	f9 01       	movw	r30, r18
    1ae2:	1b cf       	rjmp	.-458    	; 0x191a <start_speed_control_left+0x46>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    1ae4:	c9 01       	movw	r24, r18
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	99 83       	std	Y+1, r25	; 0x01
    1aea:	88 83       	st	Y, r24
    1aec:	a2 cf       	rjmp	.-188    	; 0x1a32 <start_speed_control_left+0x15e>
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1aee:	80 91 21 03 	lds	r24, 0x0321
    1af2:	90 91 22 03 	lds	r25, 0x0322
    1af6:	a0 91 23 03 	lds	r26, 0x0323
    1afa:	b0 91 24 03 	lds	r27, 0x0324
    1afe:	80 34       	cpi	r24, 0x40	; 64
    1b00:	22 ea       	ldi	r18, 0xA2	; 162
    1b02:	92 07       	cpc	r25, r18
    1b04:	2f ef       	ldi	r18, 0xFF	; 255
    1b06:	a2 07       	cpc	r26, r18
    1b08:	2f ef       	ldi	r18, 0xFF	; 255
    1b0a:	b2 07       	cpc	r27, r18
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <start_speed_control_left+0x23c>
    1b0e:	7b cf       	rjmp	.-266    	; 0x1a06 <start_speed_control_left+0x132>
    1b10:	80 e4       	ldi	r24, 0x40	; 64
    1b12:	92 ea       	ldi	r25, 0xA2	; 162
    1b14:	af ef       	ldi	r26, 0xFF	; 255
    1b16:	bf ef       	ldi	r27, 0xFF	; 255
    1b18:	80 93 21 03 	sts	0x0321, r24
    1b1c:	90 93 22 03 	sts	0x0322, r25
    1b20:	a0 93 23 03 	sts	0x0323, r26
    1b24:	b0 93 24 03 	sts	0x0324, r27
    1b28:	6e cf       	rjmp	.-292    	; 0x1a06 <start_speed_control_left+0x132>

00001b2a <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    1b2a:	85 b7       	in	r24, 0x35	; 53
    1b2c:	80 61       	ori	r24, 0x10	; 16
    1b2e:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    1b30:	2f ef       	ldi	r18, 0xFF	; 255
    1b32:	21 b9       	out	0x01, r18	; 1
	PORTA = 0x00;			// proximity pulses turned off
    1b34:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    1b36:	87 ef       	ldi	r24, 0xF7	; 247
    1b38:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    1b3a:	80 ee       	ldi	r24, 0xE0	; 224
    1b3c:	85 b9       	out	0x05, r24	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    1b3e:	80 ef       	ldi	r24, 0xF0	; 240
    1b40:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    1b42:	80 eb       	ldi	r24, 0xB0	; 176
    1b44:	88 b9       	out	0x08, r24	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    1b46:	8c ef       	ldi	r24, 0xFC	; 252
    1b48:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x03;			// default for unused pins is 0
    1b4a:	83 e0       	ldi	r24, 0x03	; 3
    1b4c:	8b b9       	out	0x0b, r24	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    1b4e:	2d b9       	out	0x0d, r18	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1b50:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    1b52:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    1b54:	23 bb       	out	0x13, r18	; 19
	if(hardwareRevision == HW_REV_3_0) {
    1b56:	90 91 73 04 	lds	r25, 0x0473
    1b5a:	99 23       	and	r25, r25
    1b5c:	99 f4       	brne	.+38     	; 0x1b84 <initPortsIO+0x5a>
		PORTG = 0x00;		// default for unused pins is 0
    1b5e:	14 ba       	out	0x14, r1	; 20
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1b60:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1b64:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1b68:	8f e0       	ldi	r24, 0x0F	; 15
    1b6a:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
    1b6e:	80 91 05 01 	lds	r24, 0x0105
    1b72:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1b76:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1b7a:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    1b7e:	10 92 0b 01 	sts	0x010B, r1
    1b82:	08 95       	ret

	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    1b84:	91 30       	cpi	r25, 0x01	; 1
    1b86:	89 f4       	brne	.+34     	; 0x1baa <initPortsIO+0x80>
		PORTG = 0x00;		// default for unused pins is 0
    1b88:	14 ba       	out	0x14, r1	; 20
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1b8a:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1b8e:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1b92:	8f e0       	ldi	r24, 0x0F	; 15
    1b94:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
    1b98:	80 93 05 01 	sts	0x0105, r24
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1b9c:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1ba0:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    1ba4:	10 92 0b 01 	sts	0x010B, r1
    1ba8:	08 95       	ret
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1baa:	92 30       	cpi	r25, 0x02	; 2
    1bac:	99 f4       	brne	.+38     	; 0x1bd4 <initPortsIO+0xaa>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    1bae:	88 e0       	ldi	r24, 0x08	; 8
    1bb0:	84 bb       	out	0x14, r24	; 20
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1bb2:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1bb6:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1bba:	8f e0       	ldi	r24, 0x0F	; 15
    1bbc:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
    1bc0:	80 93 05 01 	sts	0x0105, r24
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1bc4:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1bc8:	20 93 0a 01 	sts	0x010A, r18
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    1bcc:	87 ef       	ldi	r24, 0xF7	; 247
    1bce:	80 93 0b 01 	sts	0x010B, r24
    1bd2:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1bd4:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1bd8:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1bdc:	8f e0       	ldi	r24, 0x0F	; 15
    1bde:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1be2:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1be6:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
    1bea:	99 23       	and	r25, r25
    1bec:	41 f2       	breq	.-112    	; 0x1b7e <initPortsIO+0x54>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    1bee:	91 30       	cpi	r25, 0x01	; 1
    1bf0:	31 f2       	breq	.-116    	; 0x1b7e <initPortsIO+0x54>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1bf2:	92 30       	cpi	r25, 0x02	; 2
    1bf4:	59 f3       	breq	.-42     	; 0x1bcc <initPortsIO+0xa2>
    1bf6:	08 95       	ret

00001bf8 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    1bf8:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    1bfc:	10 92 bc 00 	sts	0x00BC, r1
}
    1c00:	08 95       	ret

00001c02 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    1c02:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    1c04:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    1c06:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    1c10:	08 95       	ret

00001c12 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    1c12:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1c14:	84 ea       	ldi	r24, 0xA4	; 164
    1c16:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1c1a:	80 91 bc 00 	lds	r24, 0x00BC
    1c1e:	87 ff       	sbrs	r24, 7
    1c20:	fc cf       	rjmp	.-8      	; 0x1c1a <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1c22:	80 91 b9 00 	lds	r24, 0x00B9
    1c26:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1c28:	88 30       	cpi	r24, 0x08	; 8
    1c2a:	21 f0       	breq	.+8      	; 0x1c34 <i2c_start+0x22>
    1c2c:	80 31       	cpi	r24, 0x10	; 16
    1c2e:	11 f0       	breq	.+4      	; 0x1c34 <i2c_start+0x22>
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	08 95       	ret
		//usartTransmit(twst);
		return 1;
	}

	// send device address
	TWDR = address;
    1c34:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c38:	84 e8       	ldi	r24, 0x84	; 132
    1c3a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1c3e:	80 91 bc 00 	lds	r24, 0x00BC
    1c42:	87 ff       	sbrs	r24, 7
    1c44:	fc cf       	rjmp	.-8      	; 0x1c3e <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1c46:	90 91 b9 00 	lds	r25, 0x00B9
    1c4a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1c4c:	98 31       	cpi	r25, 0x18	; 24
    1c4e:	29 f0       	breq	.+10     	; 0x1c5a <i2c_start+0x48>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 34       	cpi	r25, 0x40	; 64
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <i2c_start+0x46>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}

	return 0;

}/* i2c_start */
    1c58:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	08 95       	ret

00001c5e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    1c5e:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1c60:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1c62:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1c64:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1c66:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1c6a:	80 91 bc 00 	lds	r24, 0x00BC
    1c6e:	87 ff       	sbrs	r24, 7
    1c70:	fc cf       	rjmp	.-8      	; 0x1c6a <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1c72:	80 91 b9 00 	lds	r24, 0x00B9
    1c76:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1c78:	88 30       	cpi	r24, 0x08	; 8
    1c7a:	11 f0       	breq	.+4      	; 0x1c80 <i2c_start_wait+0x22>
    1c7c:	80 31       	cpi	r24, 0x10	; 16
    1c7e:	99 f7       	brne	.-26     	; 0x1c66 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
    1c80:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1c84:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1c88:	80 91 bc 00 	lds	r24, 0x00BC
    1c8c:	87 ff       	sbrs	r24, 7
    1c8e:	fc cf       	rjmp	.-8      	; 0x1c88 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1c90:	80 91 b9 00 	lds	r24, 0x00B9
    1c94:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1c96:	80 32       	cpi	r24, 0x20	; 32
    1c98:	11 f0       	breq	.+4      	; 0x1c9e <i2c_start_wait+0x40>
    1c9a:	88 35       	cpi	r24, 0x58	; 88
    1c9c:	39 f4       	brne	.+14     	; 0x1cac <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1c9e:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1ca2:	80 91 bc 00 	lds	r24, 0x00BC
    1ca6:	84 fd       	sbrc	r24, 4
    1ca8:	fc cf       	rjmp	.-8      	; 0x1ca2 <i2c_start_wait+0x44>
    1caa:	dd cf       	rjmp	.-70     	; 0x1c66 <i2c_start_wait+0x8>
    1cac:	08 95       	ret

00001cae <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1cae:	84 e9       	ldi	r24, 0x94	; 148
    1cb0:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1cb4:	80 91 bc 00 	lds	r24, 0x00BC
    1cb8:	84 fd       	sbrc	r24, 4
    1cba:	fc cf       	rjmp	.-8      	; 0x1cb4 <i2c_stop+0x6>

}/* i2c_stop */
    1cbc:	08 95       	ret

00001cbe <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1cbe:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cc2:	84 e8       	ldi	r24, 0x84	; 132
    1cc4:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1cc8:	80 91 bc 00 	lds	r24, 0x00BC
    1ccc:	87 ff       	sbrs	r24, 7
    1cce:	fc cf       	rjmp	.-8      	; 0x1cc8 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1cd0:	80 91 b9 00 	lds	r24, 0x00B9
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	88 7f       	andi	r24, 0xF8	; 248
    1cd8:	88 32       	cpi	r24, 0x28	; 40
    1cda:	09 f0       	breq	.+2      	; 0x1cde <i2c_write+0x20>
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1cde:	89 2f       	mov	r24, r25
    1ce0:	08 95       	ret

00001ce2 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1ce2:	84 ec       	ldi	r24, 0xC4	; 196
    1ce4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    1ce8:	80 91 bc 00 	lds	r24, 0x00BC
    1cec:	87 ff       	sbrs	r24, 7
    1cee:	fc cf       	rjmp	.-8      	; 0x1ce8 <i2c_readAck+0x6>

    return TWDR;
    1cf0:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    1cf4:	08 95       	ret

00001cf6 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cf6:	84 e8       	ldi	r24, 0x84	; 132
    1cf8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    1cfc:	80 91 bc 00 	lds	r24, 0x00BC
    1d00:	87 ff       	sbrs	r24, 7
    1d02:	fc cf       	rjmp	.-8      	; 0x1cfc <i2c_readNak+0x6>
	
    return TWDR;
    1d04:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    1d08:	08 95       	ret

00001d0a <i2c_rep_start>:
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    1d0a:	98 2f       	mov	r25, r24
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1d0c:	84 ea       	ldi	r24, 0xA4	; 164
    1d0e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1d12:	80 91 bc 00 	lds	r24, 0x00BC
    1d16:	87 ff       	sbrs	r24, 7
    1d18:	fc cf       	rjmp	.-8      	; 0x1d12 <i2c_rep_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1d1a:	80 91 b9 00 	lds	r24, 0x00B9
    1d1e:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1d20:	88 30       	cpi	r24, 0x08	; 8
    1d22:	21 f0       	breq	.+8      	; 0x1d2c <i2c_rep_start+0x22>
    1d24:	80 31       	cpi	r24, 0x10	; 16
    1d26:	11 f0       	breq	.+4      	; 0x1d2c <i2c_rep_start+0x22>
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	08 95       	ret
		//usartTransmit(twst);
		return 1;
	}

	// send device address
	TWDR = address;
    1d2c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d30:	84 e8       	ldi	r24, 0x84	; 132
    1d32:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1d36:	80 91 bc 00 	lds	r24, 0x00BC
    1d3a:	87 ff       	sbrs	r24, 7
    1d3c:	fc cf       	rjmp	.-8      	; 0x1d36 <i2c_rep_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1d3e:	90 91 b9 00 	lds	r25, 0x00B9
    1d42:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1d44:	98 31       	cpi	r25, 0x18	; 24
    1d46:	29 f0       	breq	.+10     	; 0x1d52 <i2c_rep_start+0x48>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 34       	cpi	r25, 0x40	; 64
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <i2c_rep_start+0x46>
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1d50:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	08 95       	ret

00001d56 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    1d56:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    1d5a:	80 e1       	ldi	r24, 0x10	; 16
    1d5c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    1d60:	e0 ec       	ldi	r30, 0xC0	; 192
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	82 60       	ori	r24, 0x02	; 2
    1d68:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    1d6a:	e1 ec       	ldi	r30, 0xC1	; 193
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	88 69       	ori	r24, 0x98	; 152
    1d72:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    1d74:	e2 ec       	ldi	r30, 0xC2	; 194
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	86 60       	ori	r24, 0x06	; 6
    1d7c:	80 83       	st	Z, r24



}
    1d7e:	08 95       	ret

00001d80 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    1d80:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    1d84:	80 e1       	ldi	r24, 0x10	; 16
    1d86:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    1d8a:	e8 ec       	ldi	r30, 0xC8	; 200
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	82 60       	ori	r24, 0x02	; 2
    1d92:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    1d94:	e9 ec       	ldi	r30, 0xC9	; 201
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	88 61       	ori	r24, 0x18	; 24
    1d9c:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    1d9e:	ea ec       	ldi	r30, 0xCA	; 202
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	86 60       	ori	r24, 0x06	; 6
    1da6:	80 83       	st	Z, r24

}
    1da8:	08 95       	ret

00001daa <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    1daa:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    1dae:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    1db2:	10 92 c2 00 	sts	0x00C2, r1

}
    1db6:	08 95       	ret

00001db8 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {
    1db8:	98 2f       	mov	r25, r24

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    1dba:	80 91 c0 00 	lds	r24, 0x00C0
    1dbe:	85 ff       	sbrs	r24, 5
    1dc0:	fc cf       	rjmp	.-8      	; 0x1dba <usart0Transmit+0x2>
	UDR0 = data;						// put data into buffer, sends the data
    1dc2:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
    1dc6:	66 23       	and	r22, r22
    1dc8:	21 f0       	breq	.+8      	; 0x1dd2 <usart0Transmit+0x1a>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    1dca:	80 91 c0 00 	lds	r24, 0x00C0
    1dce:	86 ff       	sbrs	r24, 6
    1dd0:	fc cf       	rjmp	.-8      	; 0x1dca <usart0Transmit+0x12>
    1dd2:	08 95       	ret

00001dd4 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {
    1dd4:	98 2f       	mov	r25, r24

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    1dd6:	80 91 c8 00 	lds	r24, 0x00C8
    1dda:	85 ff       	sbrs	r24, 5
    1ddc:	fc cf       	rjmp	.-8      	; 0x1dd6 <usart1Transmit+0x2>
	UDR1 = data;						// put data into buffer, sends the data
    1dde:	90 93 ce 00 	sts	0x00CE, r25
	if(isBlocking) {
    1de2:	66 23       	and	r22, r22
    1de4:	21 f0       	breq	.+8      	; 0x1dee <usart1Transmit+0x1a>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    1de6:	80 91 c8 00 	lds	r24, 0x00C8
    1dea:	86 ff       	sbrs	r24, 6
    1dec:	fc cf       	rjmp	.-8      	; 0x1de6 <usart1Transmit+0x12>
    1dee:	08 95       	ret

00001df0 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    1df0:	80 91 c0 00 	lds	r24, 0x00C0
    1df4:	80 95       	com	r24
		return 0;
	} else {
		return 1;
	}

}
    1df6:	88 1f       	adc	r24, r24
    1df8:	88 27       	eor	r24, r24
    1dfa:	88 1f       	adc	r24, r24
    1dfc:	08 95       	ret

00001dfe <usart0Receive>:

unsigned char usart0Receive() {
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    1e02:	80 91 c0 00 	lds	r24, 0x00C0
    1e06:	87 fd       	sbrc	r24, 7
    1e08:	0a c0       	rjmp	.+20     	; 0x1e1e <usart0Receive+0x20>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    1e0a:	2f 5f       	subi	r18, 0xFF	; 255
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    1e0e:	27 39       	cpi	r18, 0x97	; 151
    1e10:	31 05       	cpc	r19, r1
    1e12:	b9 f7       	brne	.-18     	; 0x1e02 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	80 93 3a 03 	sts	0x033A, r24
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	08 95       	ret
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    1e1e:	80 91 c6 00 	lds	r24, 0x00C6

}
    1e22:	08 95       	ret

00001e24 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    1e24:	1f 92       	push	r1
    1e26:	0f 92       	push	r0
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	0f 92       	push	r0
    1e2c:	0b b6       	in	r0, 0x3b	; 59
    1e2e:	0f 92       	push	r0
    1e30:	11 24       	eor	r1, r1
    1e32:	2f 93       	push	r18
    1e34:	3f 93       	push	r19
    1e36:	4f 93       	push	r20
    1e38:	5f 93       	push	r21
    1e3a:	6f 93       	push	r22
    1e3c:	7f 93       	push	r23
    1e3e:	8f 93       	push	r24
    1e40:	9f 93       	push	r25
    1e42:	af 93       	push	r26
    1e44:	bf 93       	push	r27
    1e46:	ef 93       	push	r30
    1e48:	ff 93       	push	r31

	char receivedByte = UDR0;
    1e4a:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    1e4e:	80 91 70 04 	lds	r24, 0x0470
    1e52:	8e 30       	cpi	r24, 0x0E	; 14
    1e54:	c1 f1       	breq	.+112    	; 0x1ec6 <__vector_25+0xa2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    1e56:	8f 30       	cpi	r24, 0x0F	; 15
    1e58:	31 f1       	breq	.+76     	; 0x1ea6 <__vector_25+0x82>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    1e5a:	80 91 0d 02 	lds	r24, 0x020D
    1e5e:	88 23       	and	r24, r24
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <__vector_25+0x40>
    1e62:	46 c0       	rjmp	.+140    	; 0x1ef0 <__vector_25+0xcc>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    1e64:	80 91 3f 04 	lds	r24, 0x043F
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <__vector_25+0x4a>
    1e6c:	46 c0       	rjmp	.+140    	; 0x1efa <__vector_25+0xd6>
    1e6e:	82 30       	cpi	r24, 0x02	; 2
    1e70:	61 f5       	brne	.+88     	; 0x1eca <__vector_25+0xa6>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    1e72:	40 91 41 04 	lds	r20, 0x0441
    1e76:	44 23       	and	r20, r20
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <__vector_25+0x58>
    1e7a:	5e c0       	rjmp	.+188    	; 0x1f38 <__vector_25+0x114>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    1e7c:	41 30       	cpi	r20, 0x01	; 1
    1e7e:	29 f5       	brne	.+74     	; 0x1eca <__vector_25+0xa6>
						rfAddress |= ((unsigned int)receivedByte<<8);
    1e80:	39 2f       	mov	r19, r25
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	80 91 31 03 	lds	r24, 0x0331
    1e88:	90 91 32 03 	lds	r25, 0x0332
    1e8c:	82 2b       	or	r24, r18
    1e8e:	93 2b       	or	r25, r19
    1e90:	90 93 32 03 	sts	0x0332, r25
    1e94:	80 93 31 03 	sts	0x0331, r24
						addressReceived = 1;
    1e98:	40 93 40 04 	sts	0x0440, r20
						menuState = 0;
    1e9c:	10 92 41 04 	sts	0x0441, r1
						chooseMenu = 1;
    1ea0:	40 93 0d 02 	sts	0x020D, r20
    1ea4:	12 c0       	rjmp	.+36     	; 0x1eca <__vector_25+0xa6>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    1ea6:	9b 32       	cpi	r25, 0x2B	; 43
    1ea8:	89 f1       	breq	.+98     	; 0x1f0c <__vector_25+0xe8>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    1eaa:	9d 32       	cpi	r25, 0x2D	; 45
    1eac:	e9 f1       	breq	.+122    	; 0x1f28 <__vector_25+0x104>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    1eae:	97 36       	cpi	r25, 0x67	; 103
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <__vector_25+0x90>
    1eb2:	4a c0       	rjmp	.+148    	; 0x1f48 <__vector_25+0x124>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    1eb4:	93 37       	cpi	r25, 0x73	; 115
    1eb6:	49 f4       	brne	.+18     	; 0x1eca <__vector_25+0xa6>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    1eb8:	8d ef       	ldi	r24, 0xFD	; 253
    1eba:	9f e0       	ldi	r25, 0x0F	; 15
    1ebc:	60 91 70 05 	lds	r22, 0x0570
    1ec0:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <__eewr_byte_m2560>
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <__vector_25+0xa6>

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    1ec6:	9a 3a       	cpi	r25, 0xAA	; 170
    1ec8:	59 f1       	breq	.+86     	; 0x1f20 <__vector_25+0xfc>
			}
		}

	}

}
    1eca:	ff 91       	pop	r31
    1ecc:	ef 91       	pop	r30
    1ece:	bf 91       	pop	r27
    1ed0:	af 91       	pop	r26
    1ed2:	9f 91       	pop	r25
    1ed4:	8f 91       	pop	r24
    1ed6:	7f 91       	pop	r23
    1ed8:	6f 91       	pop	r22
    1eda:	5f 91       	pop	r21
    1edc:	4f 91       	pop	r20
    1ede:	3f 91       	pop	r19
    1ee0:	2f 91       	pop	r18
    1ee2:	0f 90       	pop	r0
    1ee4:	0b be       	out	0x3b, r0	; 59
    1ee6:	0f 90       	pop	r0
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	0f 90       	pop	r0
    1eec:	1f 90       	pop	r1
    1eee:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    1ef0:	10 92 0d 02 	sts	0x020D, r1
			menuChoice = receivedByte;
    1ef4:	90 93 3f 04 	sts	0x043F, r25
    1ef8:	e8 cf       	rjmp	.-48     	; 0x1eca <__vector_25+0xa6>
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    1efa:	9a 3a       	cpi	r25, 0xAA	; 170
    1efc:	91 f1       	breq	.+100    	; 0x1f62 <__vector_25+0x13e>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    1efe:	95 35       	cpi	r25, 0x55	; 85
    1f00:	21 f7       	brne	.-56     	; 0x1eca <__vector_25+0xa6>
						chooseMenu = 1;
    1f02:	80 93 0d 02 	sts	0x020D, r24
						menuChoice = 0;
    1f06:	10 92 3f 04 	sts	0x043F, r1
    1f0a:	df cf       	rjmp	.-66     	; 0x1eca <__vector_25+0xa6>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    1f0c:	80 91 70 05 	lds	r24, 0x0570
    1f10:	8f 3f       	cpi	r24, 0xFF	; 255
    1f12:	19 f0       	breq	.+6      	; 0x1f1a <__vector_25+0xf6>
				currentOsccal++;
    1f14:	8f 5f       	subi	r24, 0xFF	; 255
    1f16:	80 93 70 05 	sts	0x0570, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    1f1a:	80 93 66 00 	sts	0x0066, r24
    1f1e:	d5 cf       	rjmp	.-86     	; 0x1eca <__vector_25+0xa6>
	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	80 93 f8 04 	sts	0x04F8, r24
    1f26:	d1 cf       	rjmp	.-94     	; 0x1eca <__vector_25+0xa6>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    1f28:	80 91 70 05 	lds	r24, 0x0570
    1f2c:	88 23       	and	r24, r24
    1f2e:	a9 f3       	breq	.-22     	; 0x1f1a <__vector_25+0xf6>
				currentOsccal--;	
    1f30:	81 50       	subi	r24, 0x01	; 1
    1f32:	80 93 70 05 	sts	0x0570, r24
    1f36:	f1 cf       	rjmp	.-30     	; 0x1f1a <__vector_25+0xf6>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    1f38:	90 93 31 03 	sts	0x0331, r25
    1f3c:	10 92 32 03 	sts	0x0332, r1
						menuState = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	80 93 41 04 	sts	0x0441, r24
    1f46:	c1 cf       	rjmp	.-126    	; 0x1eca <__vector_25+0xa6>
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
    1f48:	80 91 43 04 	lds	r24, 0x0443
    1f4c:	61 e0       	ldi	r22, 0x01	; 1
    1f4e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
			currentOsccal = OSCCAL;
    1f52:	80 91 66 00 	lds	r24, 0x0066
    1f56:	80 93 70 05 	sts	0x0570, r24
			usart0Transmit(currentOsccal,1);
    1f5a:	61 e0       	ldi	r22, 0x01	; 1
    1f5c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    1f60:	b4 cf       	rjmp	.-152    	; 0x1eca <__vector_25+0xa6>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    1f62:	80 93 42 04 	sts	0x0442, r24
    1f66:	b1 cf       	rjmp	.-158    	; 0x1eca <__vector_25+0xa6>

00001f68 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    1f68:	86 b1       	in	r24, 0x06	; 6
    1f6a:	46 b1       	in	r20, 0x06	; 6
    1f6c:	26 b1       	in	r18, 0x06	; 6
    1f6e:	66 b1       	in	r22, 0x06	; 6
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	28 70       	andi	r18, 0x08	; 8
    1f74:	30 70       	andi	r19, 0x00	; 0
    1f76:	35 95       	asr	r19
    1f78:	27 95       	ror	r18
    1f7a:	35 95       	asr	r19
    1f7c:	27 95       	ror	r18
    1f7e:	35 95       	asr	r19
    1f80:	27 95       	ror	r18
    1f82:	22 0f       	add	r18, r18
    1f84:	33 1f       	adc	r19, r19
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	44 70       	andi	r20, 0x04	; 4
    1f8a:	50 70       	andi	r21, 0x00	; 0
    1f8c:	55 95       	asr	r21
    1f8e:	47 95       	ror	r20
    1f90:	55 95       	asr	r21
    1f92:	47 95       	ror	r20
    1f94:	24 0f       	add	r18, r20
    1f96:	35 1f       	adc	r19, r21
    1f98:	22 0f       	add	r18, r18
    1f9a:	33 1f       	adc	r19, r19
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	62 70       	andi	r22, 0x02	; 2
    1fa0:	70 70       	andi	r23, 0x00	; 0
    1fa2:	75 95       	asr	r23
    1fa4:	67 95       	ror	r22
    1fa6:	26 0f       	add	r18, r22
    1fa8:	37 1f       	adc	r19, r23
    1faa:	22 0f       	add	r18, r18
    1fac:	33 1f       	adc	r19, r19
    1fae:	81 70       	andi	r24, 0x01	; 1
}
    1fb0:	82 0f       	add	r24, r18
    1fb2:	08 95       	ret

00001fb4 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    1fb4:	1f 92       	push	r1
    1fb6:	0f 92       	push	r0
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	0f 92       	push	r0
    1fbc:	11 24       	eor	r1, r1

}
    1fbe:	0f 90       	pop	r0
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	0f 90       	pop	r0
    1fc4:	1f 90       	pop	r1
    1fc6:	18 95       	reti

00001fc8 <getTime100MicroSec>:
	pwm_left = 0;
	initPeripherals();

}

unsigned long int getTime100MicroSec() {
    1fc8:	60 91 6c 04 	lds	r22, 0x046C
    1fcc:	70 91 6d 04 	lds	r23, 0x046D
	return clockTick;
}
    1fd0:	80 91 6e 04 	lds	r24, 0x046E
    1fd4:	90 91 6f 04 	lds	r25, 0x046F
    1fd8:	08 95       	ret

00001fda <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	80 93 db 02 	sts	0x02DB, r24
}
    1fe0:	08 95       	ret

00001fe2 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a0 e0       	ldi	r26, 0x00	; 0
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	80 93 f1 02 	sts	0x02F1, r24
    1fee:	90 93 f2 02 	sts	0x02F2, r25
    1ff2:	a0 93 f3 02 	sts	0x02F3, r26
    1ff6:	b0 93 f4 02 	sts	0x02F4, r27
	rightMotSteps = 0;
    1ffa:	80 93 ed 02 	sts	0x02ED, r24
    1ffe:	90 93 ee 02 	sts	0x02EE, r25
    2002:	a0 93 ef 02 	sts	0x02EF, r26
    2006:	b0 93 f0 02 	sts	0x02F0, r27
	theta = 0;
    200a:	80 93 97 04 	sts	0x0497, r24
    200e:	90 93 98 04 	sts	0x0498, r25
    2012:	a0 93 99 04 	sts	0x0499, r26
    2016:	b0 93 9a 04 	sts	0x049A, r27
	xPos = 0;
    201a:	80 93 9f 04 	sts	0x049F, r24
    201e:	90 93 a0 04 	sts	0x04A0, r25
    2022:	a0 93 a1 04 	sts	0x04A1, r26
    2026:	b0 93 a2 04 	sts	0x04A2, r27
	yPos = 0;
    202a:	80 93 a3 04 	sts	0x04A3, r24
    202e:	90 93 a4 04 	sts	0x04A4, r25
    2032:	a0 93 a5 04 	sts	0x04A5, r26
    2036:	b0 93 a6 04 	sts	0x04A6, r27
	rightDist = 0;
    203a:	80 93 bf 04 	sts	0x04BF, r24
    203e:	90 93 c0 04 	sts	0x04C0, r25
    2042:	a0 93 c1 04 	sts	0x04C1, r26
    2046:	b0 93 c2 04 	sts	0x04C2, r27
	leftDist = 0;
    204a:	80 93 bb 04 	sts	0x04BB, r24
    204e:	90 93 bc 04 	sts	0x04BC, r25
    2052:	a0 93 bd 04 	sts	0x04BD, r26
    2056:	b0 93 be 04 	sts	0x04BE, r27
}
    205a:	08 95       	ret

0000205c <initPeripherals>:
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    205c:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    205e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    2060:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    2062:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    2066:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    206a:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    206e:	8e ef       	ldi	r24, 0xFE	; 254
    2070:	9f e0       	ldi	r25, 0x0F	; 15
    2072:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <__eerd_word_m2560>
    2076:	90 93 32 03 	sts	0x0332, r25
    207a:	80 93 31 03 	sts	0x0331, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    207e:	8d ef       	ldi	r24, 0xFD	; 253
    2080:	9f e0       	ldi	r25, 0x0F	; 15
    2082:	0e 94 60 4f 	call	0x9ec0	; 0x9ec0 <__eerd_byte_m2560>
    2086:	98 2f       	mov	r25, r24
    2088:	80 93 70 05 	sts	0x0570, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    208c:	81 50       	subi	r24, 0x01	; 1
    208e:	8e 3f       	cpi	r24, 0xFE	; 254
    2090:	b0 f5       	brcc	.+108    	; 0x20fe <initPeripherals+0xa2>
		OSCCAL = currentOsccal;
    2092:	90 93 66 00 	sts	0x0066, r25
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    2096:	20 91 31 03 	lds	r18, 0x0331
    209a:	30 91 32 03 	lds	r19, 0x0332
    209e:	c9 01       	movw	r24, r18
    20a0:	81 58       	subi	r24, 0x81	; 129
    20a2:	9c 40       	sbci	r25, 0x0C	; 12
    20a4:	03 97       	sbiw	r24, 0x03	; 3
    20a6:	10 f4       	brcc	.+4      	; 0x20ac <initPeripherals+0x50>
		hardwareRevision = HW_REV_3_0;
    20a8:	10 92 73 04 	sts	0x0473, r1
	}

	if(rfAddress == 3200) {
    20ac:	8c e0       	ldi	r24, 0x0C	; 12
    20ae:	20 38       	cpi	r18, 0x80	; 128
    20b0:	38 07       	cpc	r19, r24
    20b2:	71 f1       	breq	.+92     	; 0x2110 <initPeripherals+0xb4>
		hardwareRevision = HW_REV_3_0_1;
	}

	if(rfAddress > 3203) {
    20b4:	24 58       	subi	r18, 0x84	; 132
    20b6:	3c 40       	sbci	r19, 0x0C	; 12
    20b8:	18 f0       	brcs	.+6      	; 0x20c0 <initPeripherals+0x64>
		hardwareRevision = HW_REV_3_1;
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	80 93 73 04 	sts	0x0473, r24
	}

	initCalibration();
    20c0:	0e 94 ce 31 	call	0x639c	; 0x639c <initCalibration>
	initPortsIO();
    20c4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <initPortsIO>
	initAdc();
    20c8:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <initAdc>
	initMotors();
    20cc:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <initMotors>
	initRGBleds();
    20d0:	0e 94 c1 35 	call	0x6b82	; 0x6b82 <initRGBleds>
	initSPI();
    20d4:	0e 94 10 01 	call	0x220	; 0x220 <initSPI>
	mirf_init();
    20d8:	0e 94 03 03 	call	0x606	; 0x606 <mirf_init>
	if(spiCommError==0) {
    20dc:	80 91 34 03 	lds	r24, 0x0334
    20e0:	88 23       	and	r24, r24
    20e2:	29 f4       	brne	.+10     	; 0x20ee <initPeripherals+0x92>
		rfFlags |= 1;
    20e4:	80 91 33 03 	lds	r24, 0x0333
    20e8:	81 60       	ori	r24, 0x01	; 1
    20ea:	80 93 33 03 	sts	0x0333, r24
	}
	initUsart0();
    20ee:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <initUsart0>
	initAccelerometer();
    20f2:	0e 94 95 3e 	call	0x7d2a	; 0x7d2a <initAccelerometer>
	init_ir_remote_control();
    20f6:	0e 94 55 07 	call	0xeaa	; 0xeaa <init_ir_remote_control>

	sei();			// enable global interrupts
    20fa:	78 94       	sei

	
}
    20fc:	08 95       	ret
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    20fe:	60 91 66 00 	lds	r22, 0x0066
    2102:	60 93 70 05 	sts	0x0570, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    2106:	8d ef       	ldi	r24, 0xFD	; 253
    2108:	9f e0       	ldi	r25, 0x0F	; 15
    210a:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <__eewr_byte_m2560>
    210e:	c3 cf       	rjmp	.-122    	; 0x2096 <initPeripherals+0x3a>
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
		hardwareRevision = HW_REV_3_0_1;
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	80 93 73 04 	sts	0x0473, r24
    2116:	d4 cf       	rjmp	.-88     	; 0x20c0 <initPeripherals+0x64>

00002118 <sleep>:
// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {

}

void sleep(unsigned char seconds) {
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    211c:	9e e1       	ldi	r25, 0x1E	; 30
    211e:	89 9f       	mul	r24, r25
    2120:	e0 01       	movw	r28, r0
    2122:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2124:	80 91 68 00 	lds	r24, 0x0068
    2128:	8d 7f       	andi	r24, 0xFD	; 253
    212a:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    212e:	80 91 6c 00 	lds	r24, 0x006C
    2132:	8f 77       	andi	r24, 0x7F	; 127
    2134:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    2138:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    213a:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    213e:	80 91 7a 00 	lds	r24, 0x007A
    2142:	80 61       	ori	r24, 0x10	; 16
    2144:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2148:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    214c:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2150:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    2154:	88 b3       	in	r24, 0x18	; 24
    2156:	87 60       	ori	r24, 0x07	; 7
    2158:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    215a:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    215e:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    2162:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    2166:	89 b3       	in	r24, 0x19	; 25
    2168:	87 60       	ori	r24, 0x07	; 7
    216a:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    216c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    2170:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    2174:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <closeUsart>
	closeSPI();
    2178:	0e 94 1c 01 	call	0x238	; 0x238 <closeSPI>
	i2c_close();
    217c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_close>

	// set port pins
	initPortsIO();
    2180:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    2184:	83 b7       	in	r24, 0x33	; 51
    2186:	8f 60       	ori	r24, 0x0F	; 15
    2188:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    2190:	80 91 b0 00 	lds	r24, 0x00B0
    2194:	8d 7f       	andi	r24, 0xFD	; 253
    2196:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    219a:	80 91 b1 00 	lds	r24, 0x00B1
    219e:	87 60       	ori	r24, 0x07	; 7
    21a0:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    21a4:	20 97       	sbiw	r28, 0x00	; 0
    21a6:	19 f0       	breq	.+6      	; 0x21ae <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    21a8:	88 95       	sleep
		pause--;
    21aa:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    21ac:	e9 f7       	brne	.-6      	; 0x21a8 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    21ae:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    21b0:	80 91 b1 00 	lds	r24, 0x00B1
    21b4:	88 7f       	andi	r24, 0xF8	; 248
    21b6:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    21ba:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    21be:	80 91 b0 00 	lds	r24, 0x00B0
    21c2:	82 60       	ori	r24, 0x02	; 2
    21c4:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	80 93 08 02 	sts	0x0208, r24
	pwm_green = 255;
    21ce:	80 93 09 02 	sts	0x0209, r24
	pwm_blue = 255;
    21d2:	80 93 0a 02 	sts	0x020A, r24
	pwm_right = 0;
    21d6:	10 92 12 03 	sts	0x0312, r1
    21da:	10 92 11 03 	sts	0x0311, r1
	pwm_left = 0;
    21de:	10 92 14 03 	sts	0x0314, r1
    21e2:	10 92 13 03 	sts	0x0313, r1
	initPeripherals();
    21e6:	0e 94 2e 10 	call	0x205c	; 0x205c <initPeripherals>

}
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	08 95       	ret

000021f0 <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    21f0:	ea e7       	ldi	r30, 0x7A	; 122
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	10 82       	st	Z, r1
	ADCSRB = 0;
    21f6:	2b e7       	ldi	r18, 0x7B	; 123
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	d9 01       	movw	r26, r18
    21fc:	1c 92       	st	X, r1
	ADMUX = 0;
    21fe:	ac e7       	ldi	r26, 0x7C	; 124
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	1c 92       	st	X, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    2204:	80 81       	ld	r24, Z
    2206:	86 60       	ori	r24, 0x06	; 6
    2208:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    220a:	8c 91       	ld	r24, X
    220c:	80 64       	ori	r24, 0x40	; 64
    220e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    2210:	80 81       	ld	r24, Z
    2212:	80 62       	ori	r24, 0x20	; 32
    2214:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    2216:	d9 01       	movw	r26, r18
    2218:	8c 91       	ld	r24, X
    221a:	88 7f       	andi	r24, 0xF8	; 248
    221c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    221e:	80 81       	ld	r24, Z
    2220:	88 60       	ori	r24, 0x08	; 8
    2222:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    2224:	80 81       	ld	r24, Z
    2226:	80 68       	ori	r24, 0x80	; 128
    2228:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    222a:	80 81       	ld	r24, Z
    222c:	80 64       	ori	r24, 0x40	; 64
    222e:	80 83       	st	Z, r24

}
    2230:	08 95       	ret

00002232 <__vector_29>:

ISR(ADC_vect) {
    2232:	1f 92       	push	r1
    2234:	0f 92       	push	r0
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	0f 92       	push	r0
    223a:	0b b6       	in	r0, 0x3b	; 59
    223c:	0f 92       	push	r0
    223e:	11 24       	eor	r1, r1
    2240:	1f 93       	push	r17
    2242:	2f 93       	push	r18
    2244:	3f 93       	push	r19
    2246:	4f 93       	push	r20
    2248:	5f 93       	push	r21
    224a:	6f 93       	push	r22
    224c:	7f 93       	push	r23
    224e:	8f 93       	push	r24
    2250:	9f 93       	push	r25
    2252:	af 93       	push	r26
    2254:	bf 93       	push	r27
    2256:	ef 93       	push	r30
    2258:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
    225a:	80 91 6c 04 	lds	r24, 0x046C
    225e:	90 91 6d 04 	lds	r25, 0x046D
    2262:	a0 91 6e 04 	lds	r26, 0x046E
    2266:	b0 91 6f 04 	lds	r27, 0x046F
    226a:	8f 3f       	cpi	r24, 0xFF	; 255
    226c:	2f ef       	ldi	r18, 0xFF	; 255
    226e:	92 07       	cpc	r25, r18
    2270:	2f ef       	ldi	r18, 0xFF	; 255
    2272:	a2 07       	cpc	r26, r18
    2274:	2f ef       	ldi	r18, 0xFF	; 255
    2276:	b2 07       	cpc	r27, r18
    2278:	09 f4       	brne	.+2      	; 0x227c <__vector_29+0x4a>
    227a:	b9 c0       	rjmp	.+370    	; 0x23ee <__vector_29+0x1bc>
		clockTick = 0;
	} else {
		clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	a1 1d       	adc	r26, r1
    2280:	b1 1d       	adc	r27, r1
    2282:	80 93 6c 04 	sts	0x046C, r24
    2286:	90 93 6d 04 	sts	0x046D, r25
    228a:	a0 93 6e 04 	sts	0x046E, r26
    228e:	b0 93 6f 04 	sts	0x046F, r27
	}								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    2292:	80 91 78 00 	lds	r24, 0x0078
    2296:	48 2f       	mov	r20, r24
    2298:	50 e0       	ldi	r21, 0x00	; 0
	value = (ADCH<<8) | value;
    229a:	20 91 79 00 	lds	r18, 0x0079
    229e:	92 2f       	mov	r25, r18
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	48 2b       	or	r20, r24
    22a4:	59 2b       	or	r21, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    22a6:	80 91 d5 02 	lds	r24, 0x02D5
    22aa:	82 30       	cpi	r24, 0x02	; 2
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <__vector_29+0x7e>
    22ae:	bd c1       	rjmp	.+890    	; 0x262a <__vector_29+0x3f8>
    22b0:	83 30       	cpi	r24, 0x03	; 3
    22b2:	08 f4       	brcc	.+2      	; 0x22b6 <__vector_29+0x84>
    22b4:	4c c0       	rjmp	.+152    	; 0x234e <__vector_29+0x11c>
    22b6:	84 30       	cpi	r24, 0x04	; 4
    22b8:	09 f4       	brne	.+2      	; 0x22bc <__vector_29+0x8a>
    22ba:	e0 c1       	rjmp	.+960    	; 0x267c <__vector_29+0x44a>
    22bc:	84 30       	cpi	r24, 0x04	; 4
    22be:	08 f0       	brcs	.+2      	; 0x22c2 <__vector_29+0x90>
    22c0:	2f c1       	rjmp	.+606    	; 0x2520 <__vector_29+0x2ee>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    22c2:	80 91 fd 02 	lds	r24, 0x02FD
    22c6:	90 91 fe 02 	lds	r25, 0x02FE
    22ca:	48 0f       	add	r20, r24
    22cc:	59 1f       	adc	r21, r25
			left_current_avg = left_current_avg >> 1;
    22ce:	56 95       	lsr	r21
    22d0:	47 95       	ror	r20
    22d2:	50 93 fe 02 	sts	0x02FE, r21
    22d6:	40 93 fd 02 	sts	0x02FD, r20
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    22da:	90 91 f4 04 	lds	r25, 0x04F4
    22de:	92 30       	cpi	r25, 0x02	; 2
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <__vector_29+0xb2>
    22e2:	4b c0       	rjmp	.+150    	; 0x237a <__vector_29+0x148>
		switch(irCommAdcTxState) {
    22e4:	80 91 44 05 	lds	r24, 0x0544
    22e8:	81 30       	cpi	r24, 0x01	; 1
    22ea:	09 f4       	brne	.+2      	; 0x22ee <__vector_29+0xbc>
    22ec:	7b c2       	rjmp	.+1270   	; 0x27e4 <__vector_29+0x5b2>
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	08 f0       	brcs	.+2      	; 0x22f4 <__vector_29+0xc2>
    22f2:	f1 c1       	rjmp	.+994    	; 0x26d6 <__vector_29+0x4a4>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    22f4:	80 91 46 05 	lds	r24, 0x0546
    22f8:	81 30       	cpi	r24, 0x01	; 1
    22fa:	09 f4       	brne	.+2      	; 0x22fe <__vector_29+0xcc>
    22fc:	07 c3       	rjmp	.+1550   	; 0x290c <__vector_29+0x6da>
    22fe:	90 91 d6 02 	lds	r25, 0x02D6
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    2302:	80 91 3f 02 	lds	r24, 0x023F
    2306:	88 30       	cpi	r24, 0x08	; 8
    2308:	08 f0       	brcs	.+2      	; 0x230c <__vector_29+0xda>
    230a:	50 c1       	rjmp	.+672    	; 0x25ac <__vector_29+0x37a>
		ADCSRB &= ~(1 << MUX5);
    230c:	80 91 7b 00 	lds	r24, 0x007B
    2310:	87 7f       	andi	r24, 0xF7	; 247
    2312:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + currentAdChannel;
    2316:	80 91 3f 02 	lds	r24, 0x023F
    231a:	80 5c       	subi	r24, 0xC0	; 192
    231c:	80 93 7c 00 	sts	0x007C, r24
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    2320:	92 30       	cpi	r25, 0x02	; 2
    2322:	09 f4       	brne	.+2      	; 0x2326 <__vector_29+0xf4>
    2324:	50 c1       	rjmp	.+672    	; 0x25c6 <__vector_29+0x394>

	}

	//LED_BLUE_OFF;

}
    2326:	ff 91       	pop	r31
    2328:	ef 91       	pop	r30
    232a:	bf 91       	pop	r27
    232c:	af 91       	pop	r26
    232e:	9f 91       	pop	r25
    2330:	8f 91       	pop	r24
    2332:	7f 91       	pop	r23
    2334:	6f 91       	pop	r22
    2336:	5f 91       	pop	r21
    2338:	4f 91       	pop	r20
    233a:	3f 91       	pop	r19
    233c:	2f 91       	pop	r18
    233e:	1f 91       	pop	r17
    2340:	0f 90       	pop	r0
    2342:	0b be       	out	0x3b, r0	; 59
    2344:	0f 90       	pop	r0
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	0f 90       	pop	r0
    234a:	1f 90       	pop	r1
    234c:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    234e:	88 23       	and	r24, r24
    2350:	09 f4       	brne	.+2      	; 0x2354 <__vector_29+0x122>
    2352:	56 c0       	rjmp	.+172    	; 0x2400 <__vector_29+0x1ce>
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	61 f4       	brne	.+24     	; 0x2370 <__vector_29+0x13e>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    2358:	80 91 ff 02 	lds	r24, 0x02FF
    235c:	90 91 00 03 	lds	r25, 0x0300
    2360:	48 0f       	add	r20, r24
    2362:	59 1f       	adc	r21, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    2364:	56 95       	lsr	r21
    2366:	47 95       	ror	r20
    2368:	50 93 00 03 	sts	0x0300, r21
    236c:	40 93 ff 02 	sts	0x02FF, r20
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    2370:	90 91 f4 04 	lds	r25, 0x04F4
    2374:	92 30       	cpi	r25, 0x02	; 2
    2376:	09 f4       	brne	.+2      	; 0x237a <__vector_29+0x148>
    2378:	b5 cf       	rjmp	.-150    	; 0x22e4 <__vector_29+0xb2>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    237a:	91 30       	cpi	r25, 0x01	; 1
    237c:	09 f4       	brne	.+2      	; 0x2380 <__vector_29+0x14e>
    237e:	34 c1       	rjmp	.+616    	; 0x25e8 <__vector_29+0x3b6>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    2380:	99 23       	and	r25, r25
    2382:	09 f0       	breq	.+2      	; 0x2386 <__vector_29+0x154>
    2384:	bc cf       	rjmp	.-136    	; 0x22fe <__vector_29+0xcc>
		switch(adcSamplingState) {
    2386:	90 91 d6 02 	lds	r25, 0x02D6
    238a:	92 30       	cpi	r25, 0x02	; 2
    238c:	09 f4       	brne	.+2      	; 0x2390 <__vector_29+0x15e>
    238e:	32 c3       	rjmp	.+1636   	; 0x29f4 <__vector_29+0x7c2>
    2390:	93 30       	cpi	r25, 0x03	; 3
    2392:	08 f0       	brcs	.+2      	; 0x2396 <__vector_29+0x164>
    2394:	d5 c1       	rjmp	.+938    	; 0x2740 <__vector_29+0x50e>
    2396:	99 23       	and	r25, r25
    2398:	09 f4       	brne	.+2      	; 0x239c <__vector_29+0x16a>
    239a:	71 c2       	rjmp	.+1250   	; 0x287e <__vector_29+0x64c>
    239c:	91 30       	cpi	r25, 0x01	; 1
    239e:	09 f0       	breq	.+2      	; 0x23a2 <__vector_29+0x170>
    23a0:	b0 cf       	rjmp	.-160    	; 0x2302 <__vector_29+0xd0>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    23a2:	80 91 41 02 	lds	r24, 0x0241
    23a6:	80 93 3f 02 	sts	0x023F, r24
				leftChannelPhase = leftMotorPhase;
    23aa:	80 91 44 02 	lds	r24, 0x0244
    23ae:	80 93 d8 02 	sts	0x02D8, r24
				adcSaveDataTo = SAVE_TO_PROX;
    23b2:	10 92 d5 02 	sts	0x02D5, r1
				adcSamplingState = 2;
    23b6:	82 e0       	ldi	r24, 0x02	; 2
    23b8:	80 93 d6 02 	sts	0x02D6, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    23bc:	10 91 f2 04 	lds	r17, 0x04F2
    23c0:	11 30       	cpi	r17, 0x01	; 1
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <__vector_29+0x194>
    23c4:	10 c4       	rjmp	.+2080   	; 0x2be6 <__vector_29+0x9b4>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    23c6:	12 30       	cpi	r17, 0x02	; 2
    23c8:	09 f0       	breq	.+2      	; 0x23cc <__vector_29+0x19a>
    23ca:	99 cf       	rjmp	.-206    	; 0x22fe <__vector_29+0xcc>
    23cc:	80 91 40 02 	lds	r24, 0x0240
    23d0:	87 31       	cpi	r24, 0x17	; 23
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <__vector_29+0x1a4>
    23d4:	94 cf       	rjmp	.-216    	; 0x22fe <__vector_29+0xcc>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    23d6:	10 93 f4 04 	sts	0x04F4, r17
					if(irCommTxByteEnqueued==1) {
    23da:	80 91 46 05 	lds	r24, 0x0546
    23de:	81 30       	cpi	r24, 0x01	; 1
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <__vector_29+0x1b2>
    23e2:	94 c2       	rjmp	.+1320   	; 0x290c <__vector_29+0x6da>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    23e4:	10 92 f4 04 	sts	0x04F4, r1
    23e8:	90 91 d6 02 	lds	r25, 0x02D6
    23ec:	8a cf       	rjmp	.-236    	; 0x2302 <__vector_29+0xd0>


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
		clockTick = 0;
    23ee:	10 92 6c 04 	sts	0x046C, r1
    23f2:	10 92 6d 04 	sts	0x046D, r1
    23f6:	10 92 6e 04 	sts	0x046E, r1
    23fa:	10 92 6f 04 	sts	0x046F, r1
    23fe:	49 cf       	rjmp	.-366    	; 0x2292 <__vector_29+0x60>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2400:	60 91 40 02 	lds	r22, 0x0240
    2404:	6e 30       	cpi	r22, 0x0E	; 14
    2406:	09 f4       	brne	.+2      	; 0x240a <__vector_29+0x1d8>
    2408:	d1 c2       	rjmp	.+1442   	; 0x29ac <__vector_29+0x77a>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    240a:	e6 2f       	mov	r30, r22
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	df 01       	movw	r26, r30
    2410:	aa 0f       	add	r26, r26
    2412:	bb 1f       	adc	r27, r27
    2414:	ab 5b       	subi	r26, 0xBB	; 187
    2416:	bd 4f       	sbci	r27, 0xFD	; 253
    2418:	11 96       	adiw	r26, 0x01	; 1
    241a:	5c 93       	st	X, r21
    241c:	4e 93       	st	-X, r20
			}

			if(currentProx & 0x01) {
    241e:	60 ff       	sbrs	r22, 0
    2420:	72 c0       	rjmp	.+228    	; 0x2506 <__vector_29+0x2d4>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    2422:	ee 0f       	add	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	ed 5b       	subi	r30, 0xBD	; 189
    2428:	fd 4f       	sbci	r31, 0xFD	; 253
    242a:	40 81       	ld	r20, Z
    242c:	51 81       	ldd	r21, Z+1	; 0x01
    242e:	2d 91       	ld	r18, X+
    2430:	3c 91       	ld	r19, X
    2432:	86 2f       	mov	r24, r22
    2434:	86 95       	lsr	r24
    2436:	a8 2f       	mov	r26, r24
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	42 1b       	sub	r20, r18
    243c:	53 0b       	sbc	r21, r19
    243e:	aa 0f       	add	r26, r26
    2440:	bb 1f       	adc	r27, r27
    2442:	fd 01       	movw	r30, r26
    2444:	e3 57       	subi	r30, 0x73	; 115
    2446:	fd 4f       	sbci	r31, 0xFD	; 253
    2448:	80 81       	ld	r24, Z
    244a:	91 81       	ldd	r25, Z+1	; 0x01
    244c:	48 1b       	sub	r20, r24
    244e:	59 0b       	sbc	r21, r25
    2450:	fd 01       	movw	r30, r26
    2452:	eb 58       	subi	r30, 0x8B	; 139
    2454:	fd 4f       	sbci	r31, 0xFD	; 253
    2456:	51 83       	std	Z+1, r21	; 0x01
    2458:	40 83       	st	Z, r20
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    245a:	57 fd       	sbrc	r21, 7
    245c:	e8 c2       	rjmp	.+1488   	; 0x2a2e <__vector_29+0x7fc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    245e:	41 50       	subi	r20, 0x01	; 1
    2460:	54 40       	sbci	r21, 0x04	; 4
    2462:	24 f0       	brlt	.+8      	; 0x246c <__vector_29+0x23a>
					proximityResult[currentProx>>1] = 1024;
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	94 e0       	ldi	r25, 0x04	; 4
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    246c:	60 31       	cpi	r22, 0x10	; 16
    246e:	70 f4       	brcc	.+28     	; 0x248c <__vector_29+0x25a>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    2470:	fd 01       	movw	r30, r26
    2472:	eb 58       	subi	r30, 0x8B	; 139
    2474:	fd 4f       	sbci	r31, 0xFD	; 253
    2476:	01 90       	ld	r0, Z+
    2478:	f0 81       	ld	r31, Z
    247a:	e0 2d       	mov	r30, r0
    247c:	ec 33       	cpi	r30, 0x3C	; 60
    247e:	f1 05       	cpc	r31, r1
    2480:	0c f0       	brlt	.+2      	; 0x2484 <__vector_29+0x252>
    2482:	f4 c2       	rjmp	.+1512   	; 0x2a6c <__vector_29+0x83a>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    2484:	a3 52       	subi	r26, 0x23	; 35
    2486:	bd 4f       	sbci	r27, 0xFD	; 253
    2488:	ed 93       	st	X+, r30
    248a:	fc 93       	st	X, r31
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    248c:	80 91 95 04 	lds	r24, 0x0495
    2490:	88 23       	and	r24, r24
    2492:	09 f4       	brne	.+2      	; 0x2496 <__vector_29+0x264>
    2494:	06 c2       	rjmp	.+1036   	; 0x28a2 <__vector_29+0x670>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    2496:	80 91 85 02 	lds	r24, 0x0285
    249a:	90 91 86 02 	lds	r25, 0x0286
    249e:	84 5a       	subi	r24, 0xA4	; 164
    24a0:	91 40       	sbci	r25, 0x01	; 1
    24a2:	b4 f0       	brlt	.+44     	; 0x24d0 <__vector_29+0x29e>
    24a4:	80 91 87 02 	lds	r24, 0x0287
    24a8:	90 91 88 02 	lds	r25, 0x0288
    24ac:	84 5a       	subi	r24, 0xA4	; 164
    24ae:	91 40       	sbci	r25, 0x01	; 1
    24b0:	7c f0       	brlt	.+30     	; 0x24d0 <__vector_29+0x29e>
    24b2:	80 91 89 02 	lds	r24, 0x0289
    24b6:	90 91 8a 02 	lds	r25, 0x028A
    24ba:	84 5a       	subi	r24, 0xA4	; 164
    24bc:	91 40       	sbci	r25, 0x01	; 1
    24be:	44 f0       	brlt	.+16     	; 0x24d0 <__vector_29+0x29e>
    24c0:	80 91 8b 02 	lds	r24, 0x028B
    24c4:	90 91 8c 02 	lds	r25, 0x028C
    24c8:	84 5a       	subi	r24, 0xA4	; 164
    24ca:	91 40       	sbci	r25, 0x01	; 1
    24cc:	0c f0       	brlt	.+2      	; 0x24d0 <__vector_29+0x29e>
    24ce:	e9 c1       	rjmp	.+978    	; 0x28a2 <__vector_29+0x670>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	80 93 96 04 	sts	0x0496, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    24d6:	10 92 14 03 	sts	0x0314, r1
    24da:	10 92 13 03 	sts	0x0313, r1
						OCR4A = 0;
    24de:	10 92 a9 00 	sts	0x00A9, r1
    24e2:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    24e6:	10 92 ab 00 	sts	0x00AB, r1
    24ea:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    24ee:	10 92 12 03 	sts	0x0312, r1
    24f2:	10 92 11 03 	sts	0x0311, r1
						OCR3A = 0;
    24f6:	10 92 99 00 	sts	0x0099, r1
    24fa:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    24fe:	10 92 9b 00 	sts	0x009B, r1
    2502:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    2506:	86 2f       	mov	r24, r22
    2508:	8f 5f       	subi	r24, 0xFF	; 255
    250a:	80 93 40 02 	sts	0x0240, r24
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    250e:	88 31       	cpi	r24, 0x18	; 24
    2510:	08 f4       	brcc	.+2      	; 0x2514 <__vector_29+0x2e2>
    2512:	2e cf       	rjmp	.-420    	; 0x2370 <__vector_29+0x13e>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    2514:	10 92 40 02 	sts	0x0240, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	80 93 dc 02 	sts	0x02DC, r24
    251e:	28 cf       	rjmp	.-432    	; 0x2370 <__vector_29+0x13e>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2520:	86 30       	cpi	r24, 0x06	; 6
    2522:	09 f0       	breq	.+2      	; 0x2526 <__vector_29+0x2f4>
    2524:	25 cf       	rjmp	.-438    	; 0x2370 <__vector_29+0x13e>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    2526:	80 91 22 05 	lds	r24, 0x0522
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	20 91 40 02 	lds	r18, 0x0240
    2530:	88 0f       	add	r24, r24
    2532:	99 1f       	adc	r25, r25
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	82 0f       	add	r24, r18
    253e:	91 1d       	adc	r25, r1
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	e0 91 89 08 	lds	r30, 0x0889
    2548:	f0 91 8a 08 	lds	r31, 0x088A
    254c:	e8 0f       	add	r30, r24
    254e:	f9 1f       	adc	r31, r25
    2550:	51 83       	std	Z+1, r21	; 0x01
    2552:	40 83       	st	Z, r20
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    2554:	20 91 40 02 	lds	r18, 0x0240
    2558:	82 2f       	mov	r24, r18
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	e0 91 57 0b 	lds	r30, 0x0B57
    2564:	f0 91 58 0b 	lds	r31, 0x0B58
    2568:	e8 0f       	add	r30, r24
    256a:	f9 1f       	adc	r31, r25
    256c:	80 81       	ld	r24, Z
    256e:	91 81       	ldd	r25, Z+1	; 0x01
    2570:	84 17       	cp	r24, r20
    2572:	95 07       	cpc	r25, r21
    2574:	20 f4       	brcc	.+8      	; 0x257e <__vector_29+0x34c>
				irCommMaxSensorValueAdc[currentProx] = value;
    2576:	51 83       	std	Z+1, r21	; 0x01
    2578:	40 83       	st	Z, r20
    257a:	20 91 40 02 	lds	r18, 0x0240
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    257e:	82 2f       	mov	r24, r18
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	e0 91 e7 05 	lds	r30, 0x05E7
    258a:	f0 91 e8 05 	lds	r31, 0x05E8
    258e:	e8 0f       	add	r30, r24
    2590:	f9 1f       	adc	r31, r25
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	48 17       	cp	r20, r24
    2598:	59 07       	cpc	r21, r25
    259a:	20 f4       	brcc	.+8      	; 0x25a4 <__vector_29+0x372>
				irCommMinSensorValueAdc[currentProx] = value;
    259c:	51 83       	std	Z+1, r21	; 0x01
    259e:	40 83       	st	Z, r20
    25a0:	20 91 40 02 	lds	r18, 0x0240
			}
			currentProx++;
    25a4:	2f 5f       	subi	r18, 0xFF	; 255
    25a6:	20 93 40 02 	sts	0x0240, r18
    25aa:	e2 ce       	rjmp	.-572    	; 0x2370 <__vector_29+0x13e>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    25ac:	80 91 7b 00 	lds	r24, 0x007B
    25b0:	88 60       	ori	r24, 0x08	; 8
    25b2:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + (currentAdChannel-8);
    25b6:	80 91 3f 02 	lds	r24, 0x023F
    25ba:	88 5c       	subi	r24, 0xC8	; 200
    25bc:	80 93 7c 00 	sts	0x007C, r24
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    25c0:	92 30       	cpi	r25, 0x02	; 2
    25c2:	09 f0       	breq	.+2      	; 0x25c6 <__vector_29+0x394>
    25c4:	b0 ce       	rjmp	.-672    	; 0x2326 <__vector_29+0xf4>
    25c6:	80 91 f4 04 	lds	r24, 0x04F4
    25ca:	88 23       	and	r24, r24
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <__vector_29+0x39e>
    25ce:	ab ce       	rjmp	.-682    	; 0x2326 <__vector_29+0xf4>

		if(hardwareRevision == HW_REV_3_0) {
    25d0:	80 91 73 04 	lds	r24, 0x0473
    25d4:	88 23       	and	r24, r24
    25d6:	09 f0       	breq	.+2      	; 0x25da <__vector_29+0x3a8>
    25d8:	ab c0       	rjmp	.+342    	; 0x2730 <__vector_29+0x4fe>
			PORTJ &= 0xF0;
    25da:	80 91 05 01 	lds	r24, 0x0105
    25de:	80 7f       	andi	r24, 0xF0	; 240
    25e0:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    25e4:	12 b8       	out	0x02, r1	; 2
    25e6:	9f ce       	rjmp	.-706    	; 0x2326 <__vector_29+0xf4>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    25e8:	20 91 21 05 	lds	r18, 0x0521
    25ec:	26 30       	cpi	r18, 0x06	; 6
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <__vector_29+0x3c0>
    25f0:	4e c2       	rjmp	.+1180   	; 0x2a8e <__vector_29+0x85c>
    25f2:	27 30       	cpi	r18, 0x07	; 7
    25f4:	08 f0       	brcs	.+2      	; 0x25f8 <__vector_29+0x3c6>
    25f6:	d4 c0       	rjmp	.+424    	; 0x27a0 <__vector_29+0x56e>
    25f8:	22 30       	cpi	r18, 0x02	; 2
    25fa:	09 f4       	brne	.+2      	; 0x25fe <__vector_29+0x3cc>
    25fc:	55 c2       	rjmp	.+1194   	; 0x2aa8 <__vector_29+0x876>
    25fe:	23 30       	cpi	r18, 0x03	; 3
    2600:	08 f4       	brcc	.+2      	; 0x2604 <__vector_29+0x3d2>
    2602:	70 c1       	rjmp	.+736    	; 0x28e4 <__vector_29+0x6b2>
    2604:	24 30       	cpi	r18, 0x04	; 4
    2606:	09 f4       	brne	.+2      	; 0x260a <__vector_29+0x3d8>
    2608:	d5 c2       	rjmp	.+1450   	; 0x2bb4 <__vector_29+0x982>
    260a:	25 30       	cpi	r18, 0x05	; 5
    260c:	08 f4       	brcc	.+2      	; 0x2610 <__vector_29+0x3de>
    260e:	c4 c2       	rjmp	.+1416   	; 0x2b98 <__vector_29+0x966>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    2610:	80 91 40 02 	lds	r24, 0x0240
    2614:	8f 5f       	subi	r24, 0xFF	; 255
    2616:	80 93 3f 02 	sts	0x023F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    261a:	86 e0       	ldi	r24, 0x06	; 6
    261c:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 6;
    2620:	80 93 21 05 	sts	0x0521, r24
    2624:	90 91 d6 02 	lds	r25, 0x02D6
    2628:	6c ce       	rjmp	.-808    	; 0x2302 <__vector_29+0xd0>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    262a:	80 91 05 02 	lds	r24, 0x0205
    262e:	88 23       	and	r24, r24
    2630:	09 f4       	brne	.+2      	; 0x2634 <__vector_29+0x402>
    2632:	9e ce       	rjmp	.-708    	; 0x2370 <__vector_29+0x13e>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    2634:	63 99       	sbic	0x0c, 3	; 12
    2636:	9c ce       	rjmp	.-712    	; 0x2370 <__vector_29+0x13e>
    2638:	64 99       	sbic	0x0c, 4	; 12
    263a:	9a ce       	rjmp	.-716    	; 0x2370 <__vector_29+0x13e>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    263c:	28 2f       	mov	r18, r24
    263e:	2f 5f       	subi	r18, 0xFF	; 255
    2640:	20 93 05 02 	sts	0x0205, r18
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    2644:	25 30       	cpi	r18, 0x05	; 5
    2646:	08 f4       	brcc	.+2      	; 0x264a <__vector_29+0x418>
    2648:	93 ce       	rjmp	.-730    	; 0x2370 <__vector_29+0x13e>
					if(pwm_right != 0) {
    264a:	80 91 11 03 	lds	r24, 0x0311
    264e:	90 91 12 03 	lds	r25, 0x0312
    2652:	89 2b       	or	r24, r25
    2654:	51 f0       	breq	.+20     	; 0x266a <__vector_29+0x438>
						right_vel_sum += value;
    2656:	80 91 0b 03 	lds	r24, 0x030B
    265a:	90 91 0c 03 	lds	r25, 0x030C
    265e:	84 0f       	add	r24, r20
    2660:	95 1f       	adc	r25, r21
    2662:	90 93 0c 03 	sts	0x030C, r25
    2666:	80 93 0b 03 	sts	0x030B, r24
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    266a:	28 30       	cpi	r18, 0x08	; 8
    266c:	09 f0       	breq	.+2      	; 0x2670 <__vector_29+0x43e>
    266e:	80 ce       	rjmp	.-768    	; 0x2370 <__vector_29+0x13e>
						firstSampleRight = 0;
    2670:	10 92 05 02 	sts	0x0205, r1
						compute_right_vel = 1;
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	80 93 04 02 	sts	0x0204, r24
    267a:	7a ce       	rjmp	.-780    	; 0x2370 <__vector_29+0x13e>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    267c:	90 91 06 02 	lds	r25, 0x0206
    2680:	99 23       	and	r25, r25
    2682:	09 f4       	brne	.+2      	; 0x2686 <__vector_29+0x454>
    2684:	75 ce       	rjmp	.-790    	; 0x2370 <__vector_29+0x13e>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    2686:	80 91 00 01 	lds	r24, 0x0100
    268a:	83 fd       	sbrc	r24, 3
    268c:	71 ce       	rjmp	.-798    	; 0x2370 <__vector_29+0x13e>
    268e:	80 91 00 01 	lds	r24, 0x0100
    2692:	84 fd       	sbrc	r24, 4
    2694:	6d ce       	rjmp	.-806    	; 0x2370 <__vector_29+0x13e>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    2696:	29 2f       	mov	r18, r25
    2698:	2f 5f       	subi	r18, 0xFF	; 255
    269a:	20 93 06 02 	sts	0x0206, r18
				if(firstSampleLeft > 4) {
    269e:	25 30       	cpi	r18, 0x05	; 5
    26a0:	08 f4       	brcc	.+2      	; 0x26a4 <__vector_29+0x472>
    26a2:	66 ce       	rjmp	.-820    	; 0x2370 <__vector_29+0x13e>
					if(pwm_left != 0) {
    26a4:	80 91 13 03 	lds	r24, 0x0313
    26a8:	90 91 14 03 	lds	r25, 0x0314
    26ac:	89 2b       	or	r24, r25
    26ae:	51 f0       	breq	.+20     	; 0x26c4 <__vector_29+0x492>
						left_vel_sum += value;
    26b0:	80 91 09 03 	lds	r24, 0x0309
    26b4:	90 91 0a 03 	lds	r25, 0x030A
    26b8:	84 0f       	add	r24, r20
    26ba:	95 1f       	adc	r25, r21
    26bc:	90 93 0a 03 	sts	0x030A, r25
    26c0:	80 93 09 03 	sts	0x0309, r24
					}
					if(firstSampleLeft==8) {
    26c4:	28 30       	cpi	r18, 0x08	; 8
    26c6:	09 f0       	breq	.+2      	; 0x26ca <__vector_29+0x498>
    26c8:	53 ce       	rjmp	.-858    	; 0x2370 <__vector_29+0x13e>
						firstSampleLeft = 0;
    26ca:	10 92 06 02 	sts	0x0206, r1
						compute_left_vel = 1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	80 93 03 02 	sts	0x0203, r24
    26d4:	4d ce       	rjmp	.-870    	; 0x2370 <__vector_29+0x13e>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    26d6:	83 30       	cpi	r24, 0x03	; 3
    26d8:	09 f4       	brne	.+2      	; 0x26dc <__vector_29+0x4aa>
    26da:	ab c0       	rjmp	.+342    	; 0x2832 <__vector_29+0x600>
    26dc:	84 30       	cpi	r24, 0x04	; 4
    26de:	09 f0       	breq	.+2      	; 0x26e2 <__vector_29+0x4b0>
    26e0:	0e ce       	rjmp	.-996    	; 0x22fe <__vector_29+0xcc>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    26e2:	80 91 52 05 	lds	r24, 0x0552
    26e6:	8f 5f       	subi	r24, 0xFF	; 255
    26e8:	80 93 52 05 	sts	0x0552, r24
				if(irCommTxDurationCycle == irCommTxDuration) {
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	20 91 4e 05 	lds	r18, 0x054E
    26f2:	30 91 4f 05 	lds	r19, 0x054F
    26f6:	82 17       	cp	r24, r18
    26f8:	93 07       	cpc	r25, r19
    26fa:	09 f4       	brne	.+2      	; 0x26fe <__vector_29+0x4cc>
    26fc:	0c c1       	rjmp	.+536    	; 0x2916 <__vector_29+0x6e4>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    26fe:	80 91 41 02 	lds	r24, 0x0241
    2702:	80 93 3f 02 	sts	0x023F, r24
				leftChannelPhase = leftMotorPhase;
    2706:	80 91 44 02 	lds	r24, 0x0244
    270a:	80 93 d8 02 	sts	0x02D8, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    270e:	80 91 d7 02 	lds	r24, 0x02D7
    2712:	88 23       	and	r24, r24
    2714:	09 f4       	brne	.+2      	; 0x2718 <__vector_29+0x4e6>
    2716:	d3 c0       	rjmp	.+422    	; 0x28be <__vector_29+0x68c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2718:	81 30       	cpi	r24, 0x01	; 1
    271a:	09 f4       	brne	.+2      	; 0x271e <__vector_29+0x4ec>
    271c:	c2 c2       	rjmp	.+1412   	; 0x2ca2 <__vector_29+0xa70>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    271e:	85 e0       	ldi	r24, 0x05	; 5
    2720:	80 93 d5 02 	sts	0x02D5, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    2724:	83 e0       	ldi	r24, 0x03	; 3
    2726:	80 93 44 05 	sts	0x0544, r24
    272a:	90 91 d6 02 	lds	r25, 0x02D6
    272e:	e9 cd       	rjmp	.-1070   	; 0x2302 <__vector_29+0xd0>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	09 f0       	breq	.+2      	; 0x2736 <__vector_29+0x504>
    2734:	73 c1       	rjmp	.+742    	; 0x2a1c <__vector_29+0x7ea>
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
			PORTJ = 0xFF;
    2736:	8f ef       	ldi	r24, 0xFF	; 255
    2738:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    273c:	12 b8       	out	0x02, r1	; 2
    273e:	f3 cd       	rjmp	.-1050   	; 0x2326 <__vector_29+0xf4>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    2740:	93 30       	cpi	r25, 0x03	; 3
    2742:	09 f4       	brne	.+2      	; 0x2746 <__vector_29+0x514>
    2744:	43 c1       	rjmp	.+646    	; 0x29cc <__vector_29+0x79a>
    2746:	94 30       	cpi	r25, 0x04	; 4
    2748:	09 f0       	breq	.+2      	; 0x274c <__vector_29+0x51a>
    274a:	db cd       	rjmp	.-1098   	; 0x2302 <__vector_29+0xd0>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    274c:	80 91 42 02 	lds	r24, 0x0242
    2750:	80 93 3f 02 	sts	0x023F, r24
				rightChannelPhase = rightMotorPhase;
    2754:	80 91 43 02 	lds	r24, 0x0243
    2758:	80 93 d7 02 	sts	0x02D7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    275c:	80 91 d8 02 	lds	r24, 0x02D8
    2760:	88 23       	and	r24, r24
    2762:	09 f0       	breq	.+2      	; 0x2766 <__vector_29+0x534>
    2764:	75 c1       	rjmp	.+746    	; 0x2a50 <__vector_29+0x81e>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	80 93 d5 02 	sts	0x02D5, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    276c:	10 92 d6 02 	sts	0x02D6, r1

				if(currentProx==14 && measBattery==1) {
    2770:	20 91 40 02 	lds	r18, 0x0240
    2774:	2e 30       	cpi	r18, 0x0E	; 14
    2776:	09 f4       	brne	.+2      	; 0x277a <__vector_29+0x548>
    2778:	2b c2       	rjmp	.+1110   	; 0x2bd0 <__vector_29+0x99e>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    277a:	42 2f       	mov	r20, r18
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	20 ff       	sbrs	r18, 0
    2780:	be cd       	rjmp	.-1156   	; 0x22fe <__vector_29+0xcc>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    2782:	20 31       	cpi	r18, 0x10	; 16
    2784:	08 f0       	brcs	.+2      	; 0x2788 <__vector_29+0x556>
    2786:	58 c2       	rjmp	.+1200   	; 0x2c38 <__vector_29+0xa06>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    2788:	26 95       	lsr	r18
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <__vector_29+0x562>
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	2a 95       	dec	r18
    2796:	e2 f7       	brpl	.-8      	; 0x2790 <__vector_29+0x55e>
    2798:	82 b9       	out	0x02, r24	; 2
    279a:	90 91 d6 02 	lds	r25, 0x02D6
    279e:	b1 cd       	rjmp	.-1182   	; 0x2302 <__vector_29+0xd0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    27a0:	29 30       	cpi	r18, 0x09	; 9
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <__vector_29+0x574>
    27a4:	8f c1       	rjmp	.+798    	; 0x2ac4 <__vector_29+0x892>
    27a6:	2a 30       	cpi	r18, 0x0A	; 10
    27a8:	08 f0       	brcs	.+2      	; 0x27ac <__vector_29+0x57a>
    27aa:	8d c0       	rjmp	.+282    	; 0x28c6 <__vector_29+0x694>
    27ac:	27 30       	cpi	r18, 0x07	; 7
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <__vector_29+0x580>
    27b0:	e2 c1       	rjmp	.+964    	; 0x2b76 <__vector_29+0x944>
    27b2:	28 30       	cpi	r18, 0x08	; 8
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <__vector_29+0x586>
    27b6:	a3 cd       	rjmp	.-1210   	; 0x22fe <__vector_29+0xcc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    27b8:	80 91 42 02 	lds	r24, 0x0242
    27bc:	80 93 3f 02 	sts	0x023F, r24
				rightChannelPhase = rightMotorPhase;
    27c0:	80 91 43 02 	lds	r24, 0x0243
    27c4:	80 93 d7 02 	sts	0x02D7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    27c8:	80 91 d8 02 	lds	r24, 0x02D8
    27cc:	88 23       	and	r24, r24
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <__vector_29+0x5a0>
    27d0:	7e c2       	rjmp	.+1276   	; 0x2cce <__vector_29+0xa9c>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    27d2:	83 e0       	ldi	r24, 0x03	; 3
    27d4:	80 93 d5 02 	sts	0x02D5, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    27d8:	89 e0       	ldi	r24, 0x09	; 9
    27da:	80 93 21 05 	sts	0x0521, r24
    27de:	90 91 d6 02 	lds	r25, 0x02D6
    27e2:	8f cd       	rjmp	.-1250   	; 0x2302 <__vector_29+0xd0>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    27e4:	80 91 73 04 	lds	r24, 0x0473
    27e8:	88 23       	and	r24, r24
    27ea:	09 f4       	brne	.+2      	; 0x27ee <__vector_29+0x5bc>
    27ec:	5d c0       	rjmp	.+186    	; 0x28a8 <__vector_29+0x676>
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    27ee:	81 30       	cpi	r24, 0x01	; 1
    27f0:	09 f0       	breq	.+2      	; 0x27f4 <__vector_29+0x5c2>
    27f2:	1e c2       	rjmp	.+1084   	; 0x2c30 <__vector_29+0x9fe>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
    27f4:	8f ef       	ldi	r24, 0xFF	; 255
    27f6:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    27fa:	12 b8       	out	0x02, r1	; 2
				}
				currentAdChannel = currentMotLeftChannel;
    27fc:	80 91 41 02 	lds	r24, 0x0241
    2800:	80 93 3f 02 	sts	0x023F, r24
				leftChannelPhase = leftMotorPhase;
    2804:	80 91 44 02 	lds	r24, 0x0244
    2808:	80 93 d8 02 	sts	0x02D8, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    280c:	85 e0       	ldi	r24, 0x05	; 5
    280e:	80 93 d5 02 	sts	0x02D5, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    2812:	80 93 f5 04 	sts	0x04F5, r24
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	80 93 44 05 	sts	0x0544, r24
				if(irCommTxSensorGroup==0) {
    281c:	80 91 54 05 	lds	r24, 0x0554
    2820:	88 23       	and	r24, r24
    2822:	09 f0       	breq	.+2      	; 0x2826 <__vector_29+0x5f4>
    2824:	ff c0       	rjmp	.+510    	; 0x2a24 <__vector_29+0x7f2>
					irCommTxSensorGroup = 1;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	80 93 54 05 	sts	0x0554, r24
    282c:	90 91 d6 02 	lds	r25, 0x02D6
    2830:	68 cd       	rjmp	.-1328   	; 0x2302 <__vector_29+0xd0>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    2832:	80 91 52 05 	lds	r24, 0x0552
    2836:	8f 5f       	subi	r24, 0xFF	; 255
    2838:	80 93 52 05 	sts	0x0552, r24
				if(irCommTxDurationCycle == irCommTxDuration) {
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	20 91 4e 05 	lds	r18, 0x054E
    2842:	30 91 4f 05 	lds	r19, 0x054F
    2846:	82 17       	cp	r24, r18
    2848:	93 07       	cpc	r25, r19
    284a:	09 f4       	brne	.+2      	; 0x284e <__vector_29+0x61c>
    284c:	93 c0       	rjmp	.+294    	; 0x2974 <__vector_29+0x742>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    284e:	80 91 42 02 	lds	r24, 0x0242
    2852:	80 93 3f 02 	sts	0x023F, r24
				rightChannelPhase = rightMotorPhase;
    2856:	80 91 43 02 	lds	r24, 0x0243
    285a:	80 93 d7 02 	sts	0x02D7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    285e:	80 91 d8 02 	lds	r24, 0x02D8
    2862:	88 23       	and	r24, r24
    2864:	41 f1       	breq	.+80     	; 0x28b6 <__vector_29+0x684>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2866:	81 30       	cpi	r24, 0x01	; 1
    2868:	09 f4       	brne	.+2      	; 0x286c <__vector_29+0x63a>
    286a:	1f c2       	rjmp	.+1086   	; 0x2caa <__vector_29+0xa78>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    286c:	85 e0       	ldi	r24, 0x05	; 5
    286e:	80 93 d5 02 	sts	0x02D5, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    2872:	84 e0       	ldi	r24, 0x04	; 4
    2874:	80 93 44 05 	sts	0x0544, r24
    2878:	90 91 d6 02 	lds	r25, 0x02D6
    287c:	42 cd       	rjmp	.-1404   	; 0x2302 <__vector_29+0xd0>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    287e:	80 91 40 02 	lds	r24, 0x0240
    2882:	86 95       	lsr	r24
    2884:	80 93 3f 02 	sts	0x023F, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    2888:	80 91 d7 02 	lds	r24, 0x02D7
    288c:	88 23       	and	r24, r24
    288e:	09 f0       	breq	.+2      	; 0x2892 <__vector_29+0x660>
    2890:	e6 c0       	rjmp	.+460    	; 0x2a5e <__vector_29+0x82c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	80 93 d5 02 	sts	0x02D5, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	80 93 d6 02 	sts	0x02D6, r24
    289e:	91 e0       	ldi	r25, 0x01	; 1
    28a0:	30 cd       	rjmp	.-1440   	; 0x2302 <__vector_29+0xd0>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    28a2:	10 92 96 04 	sts	0x0496, r1
    28a6:	2f ce       	rjmp	.-930    	; 0x2506 <__vector_29+0x2d4>
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
    28a8:	80 91 05 01 	lds	r24, 0x0105
    28ac:	80 7f       	andi	r24, 0xF0	; 240
    28ae:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    28b2:	12 b8       	out	0x02, r1	; 2
    28b4:	a3 cf       	rjmp	.-186    	; 0x27fc <__vector_29+0x5ca>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	80 93 d5 02 	sts	0x02D5, r24
    28bc:	da cf       	rjmp	.-76     	; 0x2872 <__vector_29+0x640>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	80 93 d5 02 	sts	0x02D5, r24
    28c4:	2f cf       	rjmp	.-418    	; 0x2724 <__vector_29+0x4f2>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    28c6:	2b 30       	cpi	r18, 0x0B	; 11
    28c8:	09 f4       	brne	.+2      	; 0x28cc <__vector_29+0x69a>
    28ca:	47 c1       	rjmp	.+654    	; 0x2b5a <__vector_29+0x928>
    28cc:	2b 30       	cpi	r18, 0x0B	; 11
    28ce:	08 f4       	brcc	.+2      	; 0x28d2 <__vector_29+0x6a0>
    28d0:	1a c1       	rjmp	.+564    	; 0x2b06 <__vector_29+0x8d4>
    28d2:	2c 30       	cpi	r18, 0x0C	; 12
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <__vector_29+0x6a6>
    28d6:	13 cd       	rjmp	.-1498   	; 0x22fe <__vector_29+0xcc>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    28d8:	85 e0       	ldi	r24, 0x05	; 5
    28da:	80 93 d5 02 	sts	0x02D5, r24
    28de:	90 91 d6 02 	lds	r25, 0x02D6
    28e2:	0f cd       	rjmp	.-1506   	; 0x2302 <__vector_29+0xd0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    28e4:	22 23       	and	r18, r18
    28e6:	09 f4       	brne	.+2      	; 0x28ea <__vector_29+0x6b8>
    28e8:	02 c1       	rjmp	.+516    	; 0x2aee <__vector_29+0x8bc>
    28ea:	21 30       	cpi	r18, 0x01	; 1
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <__vector_29+0x6be>
    28ee:	07 cd       	rjmp	.-1522   	; 0x22fe <__vector_29+0xcc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    28f0:	80 91 40 02 	lds	r24, 0x0240
    28f4:	8f 5f       	subi	r24, 0xFF	; 255
    28f6:	80 93 3f 02 	sts	0x023F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    28fa:	86 e0       	ldi	r24, 0x06	; 6
    28fc:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 2;
    2900:	82 e0       	ldi	r24, 0x02	; 2
    2902:	80 93 21 05 	sts	0x0521, r24
    2906:	90 91 d6 02 	lds	r25, 0x02D6
    290a:	fb cc       	rjmp	.-1546   	; 0x2302 <__vector_29+0xd0>
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    290c:	80 93 44 05 	sts	0x0544, r24
    2910:	90 91 d6 02 	lds	r25, 0x02D6
    2914:	f6 cc       	rjmp	.-1556   	; 0x2302 <__vector_29+0xd0>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    2916:	10 92 52 05 	sts	0x0552, r1
					if(irCommTxPulseState == 0) {
    291a:	80 91 4d 05 	lds	r24, 0x054D
    291e:	88 23       	and	r24, r24
    2920:	09 f0       	breq	.+2      	; 0x2924 <__vector_29+0x6f2>
    2922:	9f c1       	rjmp	.+830    	; 0x2c62 <__vector_29+0xa30>
						irCommTxPulseState = 1;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	80 93 4d 05 	sts	0x054D, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    292a:	80 91 54 05 	lds	r24, 0x0554
    292e:	88 23       	and	r24, r24
    2930:	09 f0       	breq	.+2      	; 0x2934 <__vector_29+0x702>
    2932:	01 c2       	rjmp	.+1026   	; 0x2d36 <__vector_29+0xb04>
							PORTA = 0xAA;
    2934:	8a ea       	ldi	r24, 0xAA	; 170
    2936:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    2938:	80 91 51 05 	lds	r24, 0x0551
    293c:	8f 5f       	subi	r24, 0xFF	; 255
    293e:	80 93 51 05 	sts	0x0551, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    2942:	90 91 50 05 	lds	r25, 0x0550
    2946:	89 17       	cp	r24, r25
    2948:	09 f0       	breq	.+2      	; 0x294c <__vector_29+0x71a>
    294a:	d9 ce       	rjmp	.-590    	; 0x26fe <__vector_29+0x4cc>
						irCommTxBitCount++;
    294c:	80 91 4c 05 	lds	r24, 0x054C
    2950:	8f 5f       	subi	r24, 0xFF	; 255
    2952:	80 93 4c 05 	sts	0x054C, r24
						if(irCommTxBitCount==12) {
    2956:	8c 30       	cpi	r24, 0x0C	; 12
    2958:	09 f4       	brne	.+2      	; 0x295c <__vector_29+0x72a>
    295a:	73 c2       	rjmp	.+1254   	; 0x2e42 <__vector_29+0xc10>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommInitReceiver();
							PORTA = 0x00;
							irCommTxLastTransmissionTime = getTime100MicroSec();
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	80 93 f5 04 	sts	0x04F5, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    2962:	82 e0       	ldi	r24, 0x02	; 2
    2964:	80 93 44 05 	sts	0x0544, r24
						adcSaveDataTo = SKIP_SAMPLE;
    2968:	85 e0       	ldi	r24, 0x05	; 5
    296a:	80 93 d5 02 	sts	0x02D5, r24
    296e:	90 91 d6 02 	lds	r25, 0x02D6
    2972:	c7 cc       	rjmp	.-1650   	; 0x2302 <__vector_29+0xd0>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    2974:	10 92 52 05 	sts	0x0552, r1
					if(irCommTxPulseState == 0) {
    2978:	80 91 4d 05 	lds	r24, 0x054D
    297c:	88 23       	and	r24, r24
    297e:	09 f0       	breq	.+2      	; 0x2982 <__vector_29+0x750>
    2980:	74 c1       	rjmp	.+744    	; 0x2c6a <__vector_29+0xa38>
						irCommTxPulseState = 1;
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	80 93 4d 05 	sts	0x054D, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    2988:	80 91 54 05 	lds	r24, 0x0554
    298c:	88 23       	and	r24, r24
    298e:	09 f0       	breq	.+2      	; 0x2992 <__vector_29+0x760>
    2990:	d5 c1       	rjmp	.+938    	; 0x2d3c <__vector_29+0xb0a>
							PORTA = 0xAA;
    2992:	8a ea       	ldi	r24, 0xAA	; 170
    2994:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    2996:	80 91 51 05 	lds	r24, 0x0551
    299a:	8f 5f       	subi	r24, 0xFF	; 255
    299c:	80 93 51 05 	sts	0x0551, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    29a0:	90 91 50 05 	lds	r25, 0x0550
    29a4:	89 17       	cp	r24, r25
    29a6:	09 f0       	breq	.+2      	; 0x29aa <__vector_29+0x778>
    29a8:	52 cf       	rjmp	.-348    	; 0x284e <__vector_29+0x61c>
    29aa:	d0 cf       	rjmp	.-96     	; 0x294c <__vector_29+0x71a>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    29ac:	80 91 db 02 	lds	r24, 0x02DB
    29b0:	82 30       	cpi	r24, 0x02	; 2
    29b2:	09 f0       	breq	.+2      	; 0x29b6 <__vector_29+0x784>
    29b4:	2a cd       	rjmp	.-1452   	; 0x240a <__vector_29+0x1d8>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    29b6:	50 93 da 02 	sts	0x02DA, r21
    29ba:	40 93 d9 02 	sts	0x02D9, r20
				measBattery = 0;
    29be:	10 92 db 02 	sts	0x02DB, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    29c2:	46 98       	cbi	0x08, 6	; 8
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    29c4:	8f e0       	ldi	r24, 0x0F	; 15
    29c6:	80 93 40 02 	sts	0x0240, r24
    29ca:	d2 cc       	rjmp	.-1628   	; 0x2370 <__vector_29+0x13e>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    29cc:	80 91 41 02 	lds	r24, 0x0241
    29d0:	80 93 3f 02 	sts	0x023F, r24
				leftChannelPhase = leftMotorPhase;
    29d4:	80 91 44 02 	lds	r24, 0x0244
    29d8:	80 93 d8 02 	sts	0x02D8, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    29dc:	80 91 d7 02 	lds	r24, 0x02D7
    29e0:	88 23       	and	r24, r24
    29e2:	41 f5       	brne	.+80     	; 0x2a34 <__vector_29+0x802>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	80 93 d5 02 	sts	0x02D5, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    29ea:	84 e0       	ldi	r24, 0x04	; 4
    29ec:	80 93 d6 02 	sts	0x02D6, r24
    29f0:	94 e0       	ldi	r25, 0x04	; 4
    29f2:	87 cc       	rjmp	.-1778   	; 0x2302 <__vector_29+0xd0>
					}
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    29f4:	80 91 42 02 	lds	r24, 0x0242
    29f8:	80 93 3f 02 	sts	0x023F, r24
				rightChannelPhase = rightMotorPhase;
    29fc:	80 91 43 02 	lds	r24, 0x0243
    2a00:	80 93 d7 02 	sts	0x02D7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    2a04:	80 91 d8 02 	lds	r24, 0x02D8
    2a08:	88 23       	and	r24, r24
    2a0a:	d9 f4       	brne	.+54     	; 0x2a42 <__vector_29+0x810>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2a0c:	83 e0       	ldi	r24, 0x03	; 3
    2a0e:	80 93 d5 02 	sts	0x02D5, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    2a12:	83 e0       	ldi	r24, 0x03	; 3
    2a14:	80 93 d6 02 	sts	0x02D6, r24
    2a18:	93 e0       	ldi	r25, 0x03	; 3
    2a1a:	73 cc       	rjmp	.-1818   	; 0x2302 <__vector_29+0xd0>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    2a1c:	82 30       	cpi	r24, 0x02	; 2
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <__vector_29+0x7f0>
    2a20:	8a ce       	rjmp	.-748    	; 0x2736 <__vector_29+0x504>
    2a22:	81 cc       	rjmp	.-1790   	; 0x2326 <__vector_29+0xf4>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    2a24:	10 92 54 05 	sts	0x0554, r1
    2a28:	90 91 d6 02 	lds	r25, 0x02D6
    2a2c:	6a cc       	rjmp	.-1836   	; 0x2302 <__vector_29+0xd0>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    2a2e:	11 82       	std	Z+1, r1	; 0x01
    2a30:	10 82       	st	Z, r1
    2a32:	1c cd       	rjmp	.-1480   	; 0x246c <__vector_29+0x23a>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2a34:	81 30       	cpi	r24, 0x01	; 1
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <__vector_29+0x808>
    2a38:	60 c1       	rjmp	.+704    	; 0x2cfa <__vector_29+0xac8>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2a3a:	85 e0       	ldi	r24, 0x05	; 5
    2a3c:	80 93 d5 02 	sts	0x02D5, r24
    2a40:	d4 cf       	rjmp	.-88     	; 0x29ea <__vector_29+0x7b8>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2a42:	81 30       	cpi	r24, 0x01	; 1
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <__vector_29+0x816>
    2a46:	51 c1       	rjmp	.+674    	; 0x2cea <__vector_29+0xab8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2a48:	85 e0       	ldi	r24, 0x05	; 5
    2a4a:	80 93 d5 02 	sts	0x02D5, r24
    2a4e:	e1 cf       	rjmp	.-62     	; 0x2a12 <__vector_29+0x7e0>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2a50:	81 30       	cpi	r24, 0x01	; 1
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <__vector_29+0x824>
    2a54:	56 c1       	rjmp	.+684    	; 0x2d02 <__vector_29+0xad0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2a56:	85 e0       	ldi	r24, 0x05	; 5
    2a58:	80 93 d5 02 	sts	0x02D5, r24
    2a5c:	87 ce       	rjmp	.-754    	; 0x276c <__vector_29+0x53a>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2a5e:	81 30       	cpi	r24, 0x01	; 1
    2a60:	09 f4       	brne	.+2      	; 0x2a64 <__vector_29+0x832>
    2a62:	47 c1       	rjmp	.+654    	; 0x2cf2 <__vector_29+0xac0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2a64:	85 e0       	ldi	r24, 0x05	; 5
    2a66:	80 93 d5 02 	sts	0x02D5, r24
    2a6a:	16 cf       	rjmp	.-468    	; 0x2898 <__vector_29+0x666>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    2a6c:	cf 01       	movw	r24, r30
    2a6e:	cc 96       	adiw	r24, 0x3c	; 60
    2a70:	95 95       	asr	r25
    2a72:	87 95       	ror	r24
    2a74:	88 37       	cpi	r24, 0x78	; 120
    2a76:	91 05       	cpc	r25, r1
    2a78:	0c f0       	brlt	.+2      	; 0x2a7c <__vector_29+0x84a>
    2a7a:	fb c0       	rjmp	.+502    	; 0x2c72 <__vector_29+0xa40>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    2a7c:	a3 52       	subi	r26, 0x23	; 35
    2a7e:	bd 4f       	sbci	r27, 0xFD	; 253
    2a80:	fc 97       	sbiw	r30, 0x3c	; 60
    2a82:	f5 95       	asr	r31
    2a84:	e7 95       	ror	r30
    2a86:	fc 96       	adiw	r30, 0x3c	; 60
    2a88:	ed 93       	st	X+, r30
    2a8a:	fc 93       	st	X, r31
    2a8c:	ff cc       	rjmp	.-1538   	; 0x248c <__vector_29+0x25a>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    2a8e:	80 91 40 02 	lds	r24, 0x0240
    2a92:	8f 5f       	subi	r24, 0xFF	; 255
    2a94:	80 93 3f 02 	sts	0x023F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2a98:	20 93 d5 02 	sts	0x02D5, r18
				irCommAdcRxState = 7;
    2a9c:	87 e0       	ldi	r24, 0x07	; 7
    2a9e:	80 93 21 05 	sts	0x0521, r24
    2aa2:	90 91 d6 02 	lds	r25, 0x02D6
    2aa6:	2d cc       	rjmp	.-1958   	; 0x2302 <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    2aa8:	80 91 40 02 	lds	r24, 0x0240
    2aac:	8f 5f       	subi	r24, 0xFF	; 255
    2aae:	80 93 3f 02 	sts	0x023F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2ab2:	86 e0       	ldi	r24, 0x06	; 6
    2ab4:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 3;
    2ab8:	83 e0       	ldi	r24, 0x03	; 3
    2aba:	80 93 21 05 	sts	0x0521, r24
    2abe:	90 91 d6 02 	lds	r25, 0x02D6
    2ac2:	1f cc       	rjmp	.-1986   	; 0x2302 <__vector_29+0xd0>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    2ac4:	80 91 41 02 	lds	r24, 0x0241
    2ac8:	80 93 3f 02 	sts	0x023F, r24
				leftChannelPhase = leftMotorPhase;
    2acc:	80 91 44 02 	lds	r24, 0x0244
    2ad0:	80 93 d8 02 	sts	0x02D8, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    2ad4:	80 91 d7 02 	lds	r24, 0x02D7
    2ad8:	88 23       	and	r24, r24
    2ada:	09 f0       	breq	.+2      	; 0x2ade <__vector_29+0x8ac>
    2adc:	f1 c0       	rjmp	.+482    	; 0x2cc0 <__vector_29+0xa8e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2ade:	90 93 d5 02 	sts	0x02D5, r25
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 10;
    2ae2:	8a e0       	ldi	r24, 0x0A	; 10
    2ae4:	80 93 21 05 	sts	0x0521, r24
    2ae8:	90 91 d6 02 	lds	r25, 0x02D6
    2aec:	0a cc       	rjmp	.-2028   	; 0x2302 <__vector_29+0xd0>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    2aee:	10 92 40 02 	sts	0x0240, r1
				currentAdChannel = currentProx+1;				
    2af2:	90 93 3f 02 	sts	0x023F, r25
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2af6:	86 e0       	ldi	r24, 0x06	; 6
    2af8:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 1;
    2afc:	90 93 21 05 	sts	0x0521, r25
    2b00:	90 91 d6 02 	lds	r25, 0x02D6
    2b04:	fe cb       	rjmp	.-2052   	; 0x2302 <__vector_29+0xd0>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    2b06:	80 91 42 02 	lds	r24, 0x0242
    2b0a:	80 93 3f 02 	sts	0x023F, r24
				rightChannelPhase = rightMotorPhase;
    2b0e:	80 91 43 02 	lds	r24, 0x0243
    2b12:	80 93 d7 02 	sts	0x02D7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    2b16:	80 91 d8 02 	lds	r24, 0x02D8
    2b1a:	88 23       	and	r24, r24
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <__vector_29+0x8ee>
    2b1e:	c9 c0       	rjmp	.+402    	; 0x2cb2 <__vector_29+0xa80>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2b20:	83 e0       	ldi	r24, 0x03	; 3
    2b22:	80 93 d5 02 	sts	0x02D5, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    2b26:	80 91 3b 05 	lds	r24, 0x053B
    2b2a:	8e 3f       	cpi	r24, 0xFE	; 254
    2b2c:	18 f4       	brcc	.+6      	; 0x2b34 <__vector_29+0x902>
					irCommRxBitSkipped++;
    2b2e:	8f 5f       	subi	r24, 0xFF	; 255
    2b30:	80 93 3b 05 	sts	0x053B, r24
				}
				irCommRxWindowSamples++;
    2b34:	90 91 22 05 	lds	r25, 0x0522
    2b38:	9f 5f       	subi	r25, 0xFF	; 255
    2b3a:	90 93 22 05 	sts	0x0522, r25
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    2b3e:	80 91 f5 04 	lds	r24, 0x04F5
    2b42:	84 30       	cpi	r24, 0x04	; 4
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <__vector_29+0x916>
    2b46:	fd c0       	rjmp	.+506    	; 0x2d42 <__vector_29+0xb10>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    2b48:	94 31       	cpi	r25, 0x14	; 20
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <__vector_29+0x91c>
    2b4c:	16 c1       	rjmp	.+556    	; 0x2d7a <__vector_29+0xb48>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    2b4e:	8b e0       	ldi	r24, 0x0B	; 11
    2b50:	80 93 21 05 	sts	0x0521, r24
    2b54:	90 91 d6 02 	lds	r25, 0x02D6
    2b58:	d4 cb       	rjmp	.-2136   	; 0x2302 <__vector_29+0xd0>
				break;

			case 11:
				currentAdChannel = 0;	// prox0
    2b5a:	10 92 3f 02 	sts	0x023F, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    2b5e:	80 91 d7 02 	lds	r24, 0x02D7
    2b62:	88 23       	and	r24, r24
    2b64:	09 f0       	breq	.+2      	; 0x2b68 <__vector_29+0x936>
    2b66:	ba c0       	rjmp	.+372    	; 0x2cdc <__vector_29+0xaaa>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2b68:	90 93 d5 02 	sts	0x02D5, r25
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 0;
    2b6c:	10 92 21 05 	sts	0x0521, r1
    2b70:	90 91 d6 02 	lds	r25, 0x02D6
    2b74:	c6 cb       	rjmp	.-2164   	; 0x2302 <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    2b76:	80 91 41 02 	lds	r24, 0x0241
    2b7a:	80 93 3f 02 	sts	0x023F, r24
				leftChannelPhase = leftMotorPhase;
    2b7e:	80 91 44 02 	lds	r24, 0x0244
    2b82:	80 93 d8 02 	sts	0x02D8, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2b86:	86 e0       	ldi	r24, 0x06	; 6
    2b88:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 8;
    2b8c:	88 e0       	ldi	r24, 0x08	; 8
    2b8e:	80 93 21 05 	sts	0x0521, r24
    2b92:	90 91 d6 02 	lds	r25, 0x02D6
    2b96:	b5 cb       	rjmp	.-2198   	; 0x2302 <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    2b98:	80 91 40 02 	lds	r24, 0x0240
    2b9c:	8f 5f       	subi	r24, 0xFF	; 255
    2b9e:	80 93 3f 02 	sts	0x023F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2ba2:	86 e0       	ldi	r24, 0x06	; 6
    2ba4:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 4;
    2ba8:	84 e0       	ldi	r24, 0x04	; 4
    2baa:	80 93 21 05 	sts	0x0521, r24
    2bae:	90 91 d6 02 	lds	r25, 0x02D6
    2bb2:	a7 cb       	rjmp	.-2226   	; 0x2302 <__vector_29+0xd0>
				break;

			case 4:
				currentAdChannel = currentProx+1;
    2bb4:	80 91 40 02 	lds	r24, 0x0240
    2bb8:	8f 5f       	subi	r24, 0xFF	; 255
    2bba:	80 93 3f 02 	sts	0x023F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2bbe:	86 e0       	ldi	r24, 0x06	; 6
    2bc0:	80 93 d5 02 	sts	0x02D5, r24
				irCommAdcRxState = 5;
    2bc4:	85 e0       	ldi	r24, 0x05	; 5
    2bc6:	80 93 21 05 	sts	0x0521, r24
    2bca:	90 91 d6 02 	lds	r25, 0x02D6
    2bce:	99 cb       	rjmp	.-2254   	; 0x2302 <__vector_29+0xd0>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    2bd0:	80 91 db 02 	lds	r24, 0x02DB
    2bd4:	81 30       	cpi	r24, 0x01	; 1
    2bd6:	09 f0       	breq	.+2      	; 0x2bda <__vector_29+0x9a8>
    2bd8:	d0 cd       	rjmp	.-1120   	; 0x277a <__vector_29+0x548>
					measBattery=2;
    2bda:	82 e0       	ldi	r24, 0x02	; 2
    2bdc:	80 93 db 02 	sts	0x02DB, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    2be0:	46 9a       	sbi	0x08, 6	; 8
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	8e cb       	rjmp	.-2276   	; 0x2302 <__vector_29+0xd0>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    2be6:	80 91 40 02 	lds	r24, 0x0240
    2bea:	87 31       	cpi	r24, 0x17	; 23
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <__vector_29+0x9be>
    2bee:	eb cb       	rjmp	.-2090   	; 0x23c6 <__vector_29+0x194>
					currentAdChannel = 0;	// prox0					
    2bf0:	10 92 3f 02 	sts	0x023F, r1
					measBattery = 0;
    2bf4:	10 92 db 02 	sts	0x02DB, r1
					irCommAdcRxState = 0;					
    2bf8:	10 92 21 05 	sts	0x0521, r1
					irCommRxWindowSamples = 0;
    2bfc:	10 92 22 05 	sts	0x0522, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    2c00:	e0 91 57 0b 	lds	r30, 0x0B57
    2c04:	f0 91 58 0b 	lds	r31, 0x0B58
    2c08:	80 e1       	ldi	r24, 0x10	; 16
    2c0a:	df 01       	movw	r26, r30
    2c0c:	1d 92       	st	X+, r1
    2c0e:	8a 95       	dec	r24
    2c10:	e9 f7       	brne	.-6      	; 0x2c0c <__vector_29+0x9da>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    2c12:	80 91 e7 05 	lds	r24, 0x05E7
    2c16:	90 91 e8 05 	lds	r25, 0x05E8
    2c1a:	6f ef       	ldi	r22, 0xFF	; 255
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	40 e1       	ldi	r20, 0x10	; 16
    2c20:	50 e0       	ldi	r21, 0x00	; 0
    2c22:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;					
    2c26:	10 93 f4 04 	sts	0x04F4, r17
    2c2a:	10 91 f2 04 	lds	r17, 0x04F2
    2c2e:	cb cb       	rjmp	.-2154   	; 0x23c6 <__vector_29+0x194>
				if(hardwareRevision == HW_REV_3_0_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    2c30:	82 30       	cpi	r24, 0x02	; 2
    2c32:	09 f4       	brne	.+2      	; 0x2c36 <__vector_29+0xa04>
    2c34:	df cd       	rjmp	.-1090   	; 0x27f4 <__vector_29+0x5c2>
    2c36:	e2 cd       	rjmp	.-1084   	; 0x27fc <__vector_29+0x5ca>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    2c38:	80 91 73 04 	lds	r24, 0x0473
    2c3c:	88 23       	and	r24, r24
    2c3e:	09 f0       	breq	.+2      	; 0x2c42 <__vector_29+0xa10>
    2c40:	63 c0       	rjmp	.+198    	; 0x2d08 <__vector_29+0xad6>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    2c42:	40 51       	subi	r20, 0x10	; 16
    2c44:	50 40       	sbci	r21, 0x00	; 0
    2c46:	55 95       	asr	r21
    2c48:	47 95       	ror	r20
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <__vector_29+0xa22>
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	4a 95       	dec	r20
    2c56:	e2 f7       	brpl	.-8      	; 0x2c50 <__vector_29+0xa1e>
    2c58:	80 93 05 01 	sts	0x0105, r24
    2c5c:	90 91 d6 02 	lds	r25, 0x02D6
    2c60:	50 cb       	rjmp	.-2400   	; 0x2302 <__vector_29+0xd0>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    2c62:	10 92 4d 05 	sts	0x054D, r1
						PORTA = 0x00;
    2c66:	12 b8       	out	0x02, r1	; 2
    2c68:	67 ce       	rjmp	.-818    	; 0x2938 <__vector_29+0x706>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    2c6a:	10 92 4d 05 	sts	0x054D, r1
						PORTA = 0x00;
    2c6e:	12 b8       	out	0x02, r1	; 2
    2c70:	92 ce       	rjmp	.-732    	; 0x2996 <__vector_29+0x764>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    2c72:	cf 01       	movw	r24, r30
    2c74:	84 5d       	subi	r24, 0xD4	; 212
    2c76:	9e 4f       	sbci	r25, 0xFE	; 254
    2c78:	95 95       	asr	r25
    2c7a:	87 95       	ror	r24
    2c7c:	95 95       	asr	r25
    2c7e:	87 95       	ror	r24
    2c80:	84 3b       	cpi	r24, 0xB4	; 180
    2c82:	91 05       	cpc	r25, r1
    2c84:	0c f0       	brlt	.+2      	; 0x2c88 <__vector_29+0xa56>
    2c86:	6a c0       	rjmp	.+212    	; 0x2d5c <__vector_29+0xb2a>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    2c88:	a3 52       	subi	r26, 0x23	; 35
    2c8a:	bd 4f       	sbci	r27, 0xFD	; 253
    2c8c:	e4 5b       	subi	r30, 0xB4	; 180
    2c8e:	f0 40       	sbci	r31, 0x00	; 0
    2c90:	f5 95       	asr	r31
    2c92:	e7 95       	ror	r30
    2c94:	f5 95       	asr	r31
    2c96:	e7 95       	ror	r30
    2c98:	e8 58       	subi	r30, 0x88	; 136
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	ed 93       	st	X+, r30
    2c9e:	fc 93       	st	X, r31
    2ca0:	f5 cb       	rjmp	.-2070   	; 0x248c <__vector_29+0x25a>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	80 93 d5 02 	sts	0x02D5, r24
    2ca8:	3d cd       	rjmp	.-1414   	; 0x2724 <__vector_29+0x4f2>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2caa:	84 e0       	ldi	r24, 0x04	; 4
    2cac:	80 93 d5 02 	sts	0x02D5, r24
    2cb0:	e0 cd       	rjmp	.-1088   	; 0x2872 <__vector_29+0x640>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2cb2:	81 30       	cpi	r24, 0x01	; 1
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <__vector_29+0xa86>
    2cb6:	c1 c0       	rjmp	.+386    	; 0x2e3a <__vector_29+0xc08>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2cb8:	85 e0       	ldi	r24, 0x05	; 5
    2cba:	80 93 d5 02 	sts	0x02D5, r24
    2cbe:	33 cf       	rjmp	.-410    	; 0x2b26 <__vector_29+0x8f4>
			case 9:
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2cc0:	81 30       	cpi	r24, 0x01	; 1
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <__vector_29+0xa94>
    2cc4:	ae c0       	rjmp	.+348    	; 0x2e22 <__vector_29+0xbf0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2cc6:	85 e0       	ldi	r24, 0x05	; 5
    2cc8:	80 93 d5 02 	sts	0x02D5, r24
    2ccc:	0a cf       	rjmp	.-492    	; 0x2ae2 <__vector_29+0x8b0>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2cce:	81 30       	cpi	r24, 0x01	; 1
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <__vector_29+0xaa2>
    2cd2:	ab c0       	rjmp	.+342    	; 0x2e2a <__vector_29+0xbf8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2cd4:	85 e0       	ldi	r24, 0x05	; 5
    2cd6:	80 93 d5 02 	sts	0x02D5, r24
    2cda:	7e cd       	rjmp	.-1284   	; 0x27d8 <__vector_29+0x5a6>

			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2cdc:	81 30       	cpi	r24, 0x01	; 1
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <__vector_29+0xab0>
    2ce0:	a8 c0       	rjmp	.+336    	; 0x2e32 <__vector_29+0xc00>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2ce2:	85 e0       	ldi	r24, 0x05	; 5
    2ce4:	80 93 d5 02 	sts	0x02D5, r24
    2ce8:	41 cf       	rjmp	.-382    	; 0x2b6c <__vector_29+0x93a>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2cea:	84 e0       	ldi	r24, 0x04	; 4
    2cec:	80 93 d5 02 	sts	0x02D5, r24
    2cf0:	90 ce       	rjmp	.-736    	; 0x2a12 <__vector_29+0x7e0>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	80 93 d5 02 	sts	0x02D5, r24
    2cf8:	cf cd       	rjmp	.-1122   	; 0x2898 <__vector_29+0x666>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2cfa:	82 e0       	ldi	r24, 0x02	; 2
    2cfc:	80 93 d5 02 	sts	0x02D5, r24
    2d00:	74 ce       	rjmp	.-792    	; 0x29ea <__vector_29+0x7b8>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2d02:	90 93 d5 02 	sts	0x02D5, r25
    2d06:	32 cd       	rjmp	.-1436   	; 0x276c <__vector_29+0x53a>
					} else {
						if(hardwareRevision == HW_REV_3_0) {
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    2d08:	81 30       	cpi	r24, 0x01	; 1
    2d0a:	09 f0       	breq	.+2      	; 0x2d0e <__vector_29+0xadc>
    2d0c:	b1 c0       	rjmp	.+354    	; 0x2e70 <__vector_29+0xc3e>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2d0e:	20 91 05 01 	lds	r18, 0x0105
    2d12:	40 51       	subi	r20, 0x10	; 16
    2d14:	50 40       	sbci	r21, 0x00	; 0
    2d16:	55 95       	asr	r21
    2d18:	47 95       	ror	r20
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <__vector_29+0xaf2>
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	4a 95       	dec	r20
    2d26:	e2 f7       	brpl	.-8      	; 0x2d20 <__vector_29+0xaee>
    2d28:	80 95       	com	r24
    2d2a:	82 23       	and	r24, r18
    2d2c:	80 93 05 01 	sts	0x0105, r24
    2d30:	90 91 d6 02 	lds	r25, 0x02D6
    2d34:	e6 ca       	rjmp	.-2612   	; 0x2302 <__vector_29+0xd0>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    2d36:	85 e5       	ldi	r24, 0x55	; 85
    2d38:	82 b9       	out	0x02, r24	; 2
    2d3a:	fe cd       	rjmp	.-1028   	; 0x2938 <__vector_29+0x706>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    2d3c:	85 e5       	ldi	r24, 0x55	; 85
    2d3e:	82 b9       	out	0x02, r24	; 2
    2d40:	2a ce       	rjmp	.-940    	; 0x2996 <__vector_29+0x764>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    2d42:	10 92 22 05 	sts	0x0522, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    2d46:	90 91 3b 05 	lds	r25, 0x053B
    2d4a:	80 91 2c 05 	lds	r24, 0x052C
    2d4e:	98 17       	cp	r25, r24
    2d50:	08 f4       	brcc	.+2      	; 0x2d54 <__vector_29+0xb22>
    2d52:	fd ce       	rjmp	.-518    	; 0x2b4e <__vector_29+0x91c>
						irCommState = IRCOMM_RX_WAITING_BIT;
    2d54:	85 e0       	ldi	r24, 0x05	; 5
    2d56:	80 93 f5 04 	sts	0x04F5, r24
    2d5a:	f9 ce       	rjmp	.-526    	; 0x2b4e <__vector_29+0x91c>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    2d5c:	a3 52       	subi	r26, 0x23	; 35
    2d5e:	bd 4f       	sbci	r27, 0xFD	; 253
    2d60:	e4 5a       	subi	r30, 0xA4	; 164
    2d62:	f1 40       	sbci	r31, 0x01	; 1
    2d64:	f5 95       	asr	r31
    2d66:	e7 95       	ror	r30
    2d68:	f5 95       	asr	r31
    2d6a:	e7 95       	ror	r30
    2d6c:	f5 95       	asr	r31
    2d6e:	e7 95       	ror	r30
    2d70:	ec 54       	subi	r30, 0x4C	; 76
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	ed 93       	st	X+, r30
    2d76:	fc 93       	st	X, r31
    2d78:	89 cb       	rjmp	.-2286   	; 0x248c <__vector_29+0x25a>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    2d7a:	10 92 22 05 	sts	0x0522, r1
					irCommTempPointer = irCommProxValuesCurr;
    2d7e:	20 91 6d 08 	lds	r18, 0x086D
    2d82:	30 91 6e 08 	lds	r19, 0x086E
					irCommProxValuesCurr = irCommProxValuesAdc;
    2d86:	80 91 89 08 	lds	r24, 0x0889
    2d8a:	90 91 8a 08 	lds	r25, 0x088A
    2d8e:	90 93 6e 08 	sts	0x086E, r25
    2d92:	80 93 6d 08 	sts	0x086D, r24
					irCommProxValuesAdc = irCommTempPointer;
    2d96:	30 93 8a 08 	sts	0x088A, r19
    2d9a:	20 93 89 08 	sts	0x0889, r18
					irCommTempPointer = irCommMaxSensorValueCurr;
    2d9e:	40 91 6a 05 	lds	r20, 0x056A
    2da2:	50 91 6b 05 	lds	r21, 0x056B
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    2da6:	80 91 57 0b 	lds	r24, 0x0B57
    2daa:	90 91 58 0b 	lds	r25, 0x0B58
    2dae:	90 93 6b 05 	sts	0x056B, r25
    2db2:	80 93 6a 05 	sts	0x056A, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    2db6:	40 93 57 0b 	sts	0x0B57, r20
    2dba:	50 93 58 0b 	sts	0x0B58, r21
					irCommTempPointer = irCommMinSensorValueCurr;
    2dbe:	20 91 56 05 	lds	r18, 0x0556
    2dc2:	30 91 57 05 	lds	r19, 0x0557
    2dc6:	30 93 99 0b 	sts	0x0B99, r19
    2dca:	20 93 98 0b 	sts	0x0B98, r18
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    2dce:	80 91 e7 05 	lds	r24, 0x05E7
    2dd2:	90 91 e8 05 	lds	r25, 0x05E8
    2dd6:	90 93 57 05 	sts	0x0557, r25
    2dda:	80 93 56 05 	sts	0x0556, r24
					irCommMinSensorValueAdc = irCommTempPointer;
    2dde:	30 93 e8 05 	sts	0x05E8, r19
    2de2:	20 93 e7 05 	sts	0x05E7, r18
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    2de6:	fa 01       	movw	r30, r20
    2de8:	80 e1       	ldi	r24, 0x10	; 16
    2dea:	df 01       	movw	r26, r30
    2dec:	1d 92       	st	X+, r1
    2dee:	8a 95       	dec	r24
    2df0:	e9 f7       	brne	.-6      	; 0x2dec <__vector_29+0xbba>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    2df2:	80 91 e7 05 	lds	r24, 0x05E7
    2df6:	90 91 e8 05 	lds	r25, 0x05E8
    2dfa:	6f ef       	ldi	r22, 0xFF	; 255
    2dfc:	70 e0       	ldi	r23, 0x00	; 0
    2dfe:	40 e1       	ldi	r20, 0x10	; 16
    2e00:	50 e0       	ldi	r21, 0x00	; 0
    2e02:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    2e06:	80 91 f5 04 	lds	r24, 0x04F5
    2e0a:	81 30       	cpi	r24, 0x01	; 1
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <__vector_29+0xbde>
    2e0e:	45 c0       	rjmp	.+138    	; 0x2e9a <__vector_29+0xc68>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    2e10:	80 91 f5 04 	lds	r24, 0x04F5
    2e14:	85 30       	cpi	r24, 0x05	; 5
    2e16:	09 f0       	breq	.+2      	; 0x2e1a <__vector_29+0xbe8>
    2e18:	9a ce       	rjmp	.-716    	; 0x2b4e <__vector_29+0x91c>
						irCommState = IRCOMM_RX_READ_BIT;
    2e1a:	86 e0       	ldi	r24, 0x06	; 6
    2e1c:	80 93 f5 04 	sts	0x04F5, r24
    2e20:	96 ce       	rjmp	.-724    	; 0x2b4e <__vector_29+0x91c>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2e22:	82 e0       	ldi	r24, 0x02	; 2
    2e24:	80 93 d5 02 	sts	0x02D5, r24
    2e28:	5c ce       	rjmp	.-840    	; 0x2ae2 <__vector_29+0x8b0>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2e2a:	84 e0       	ldi	r24, 0x04	; 4
    2e2c:	80 93 d5 02 	sts	0x02D5, r24
    2e30:	d3 cc       	rjmp	.-1626   	; 0x27d8 <__vector_29+0x5a6>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2e32:	82 e0       	ldi	r24, 0x02	; 2
    2e34:	80 93 d5 02 	sts	0x02D5, r24
    2e38:	99 ce       	rjmp	.-718    	; 0x2b6c <__vector_29+0x93a>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2e3a:	84 e0       	ldi	r24, 0x04	; 4
    2e3c:	80 93 d5 02 	sts	0x02D5, r24
    2e40:	72 ce       	rjmp	.-796    	; 0x2b26 <__vector_29+0x8f4>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	80 93 f5 04 	sts	0x04F5, r24
							irCommTxByteEnqueued = 0;
    2e48:	10 92 46 05 	sts	0x0546, r1
							adcSamplingState = 0;
    2e4c:	10 92 d6 02 	sts	0x02D6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    2e50:	10 92 f4 04 	sts	0x04F4, r1
							irCommInitReceiver();
    2e54:	0e 94 00 3f 	call	0x7e00	; 0x7e00 <irCommInitReceiver>
							PORTA = 0x00;
    2e58:	12 b8       	out	0x02, r1	; 2
							irCommTxLastTransmissionTime = getTime100MicroSec();
    2e5a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    2e5e:	60 93 47 05 	sts	0x0547, r22
    2e62:	70 93 48 05 	sts	0x0548, r23
    2e66:	80 93 49 05 	sts	0x0549, r24
    2e6a:	90 93 4a 05 	sts	0x054A, r25
    2e6e:	79 cd       	rjmp	.-1294   	; 0x2962 <__vector_29+0x730>

						if(hardwareRevision == HW_REV_3_0_1) {
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    2e70:	82 30       	cpi	r24, 0x02	; 2
    2e72:	09 f0       	breq	.+2      	; 0x2e76 <__vector_29+0xc44>
    2e74:	44 ca       	rjmp	.-2936   	; 0x22fe <__vector_29+0xcc>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2e76:	20 91 05 01 	lds	r18, 0x0105
    2e7a:	40 51       	subi	r20, 0x10	; 16
    2e7c:	50 40       	sbci	r21, 0x00	; 0
    2e7e:	55 95       	asr	r21
    2e80:	47 95       	ror	r20
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	02 c0       	rjmp	.+4      	; 0x2e8c <__vector_29+0xc5a>
    2e88:	88 0f       	add	r24, r24
    2e8a:	99 1f       	adc	r25, r25
    2e8c:	4a 95       	dec	r20
    2e8e:	e2 f7       	brpl	.-8      	; 0x2e88 <__vector_29+0xc56>
    2e90:	80 95       	com	r24
    2e92:	82 23       	and	r24, r18
    2e94:	80 93 05 01 	sts	0x0105, r24
    2e98:	32 ca       	rjmp	.-2972   	; 0x22fe <__vector_29+0xcc>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    2e9a:	82 e0       	ldi	r24, 0x02	; 2
    2e9c:	80 93 f5 04 	sts	0x04F5, r24
						irCommRxBitSkipped = 0;
    2ea0:	10 92 3b 05 	sts	0x053B, r1
    2ea4:	b5 cf       	rjmp	.-150    	; 0x2e10 <__vector_29+0xbde>

00002ea6 <initMotors>:

#include "motors.h"

void initMotors() {
    2ea6:	0f 93       	push	r16
    2ea8:	1f 93       	push	r17
    2eaa:	cf 93       	push	r28
    2eac:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    2eae:	e0 e9       	ldi	r30, 0x90	; 144
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	10 82       	st	Z, r1
	TCCR3B = 0;
    2eb4:	a1 e9       	ldi	r26, 0x91	; 145
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	1c 92       	st	X, r1
	TIMSK3 = 0;
    2eba:	21 e7       	ldi	r18, 0x71	; 113
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	e9 01       	movw	r28, r18
    2ec0:	18 82       	st	Y, r1
	TCCR4A = 0;
    2ec2:	40 ea       	ldi	r20, 0xA0	; 160
    2ec4:	50 e0       	ldi	r21, 0x00	; 0
    2ec6:	ea 01       	movw	r28, r20
    2ec8:	18 82       	st	Y, r1
	TCCR4B = 0;
    2eca:	61 ea       	ldi	r22, 0xA1	; 161
    2ecc:	70 e0       	ldi	r23, 0x00	; 0
    2ece:	eb 01       	movw	r28, r22
    2ed0:	18 82       	st	Y, r1
	TIMSK4 = 0;
    2ed2:	02 e7       	ldi	r16, 0x72	; 114
    2ed4:	10 e0       	ldi	r17, 0x00	; 0
    2ed6:	e8 01       	movw	r28, r16
    2ed8:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    2eda:	80 81       	ld	r24, Z
    2edc:	83 68       	ori	r24, 0x83	; 131
    2ede:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    2ee0:	80 81       	ld	r24, Z
    2ee2:	83 60       	ori	r24, 0x03	; 3
    2ee4:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2ee6:	8c 91       	ld	r24, X
    2ee8:	8b 60       	ori	r24, 0x0B	; 11
    2eea:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    2eec:	80 91 11 03 	lds	r24, 0x0311
    2ef0:	90 91 12 03 	lds	r25, 0x0312
    2ef4:	90 93 99 00 	sts	0x0099, r25
    2ef8:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    2efc:	10 92 9b 00 	sts	0x009B, r1
    2f00:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    2f04:	d9 01       	movw	r26, r18
    2f06:	8c 91       	ld	r24, X
    2f08:	81 60       	ori	r24, 0x01	; 1
    2f0a:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2f0c:	80 81       	ld	r24, Z
    2f0e:	8f 75       	andi	r24, 0x5F	; 95
    2f10:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2f12:	8e b1       	in	r24, 0x0e	; 14
    2f14:	87 7e       	andi	r24, 0xE7	; 231
    2f16:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    2f18:	ea 01       	movw	r28, r20
    2f1a:	88 81       	ld	r24, Y
    2f1c:	83 68       	ori	r24, 0x83	; 131
    2f1e:	88 83       	st	Y, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2f20:	fb 01       	movw	r30, r22
    2f22:	80 81       	ld	r24, Z
    2f24:	8b 60       	ori	r24, 0x0B	; 11
    2f26:	80 83       	st	Z, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    2f28:	80 91 13 03 	lds	r24, 0x0313
    2f2c:	90 91 14 03 	lds	r25, 0x0314
    2f30:	90 93 a9 00 	sts	0x00A9, r25
    2f34:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    2f38:	10 92 ab 00 	sts	0x00AB, r1
    2f3c:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    2f40:	d8 01       	movw	r26, r16
    2f42:	8c 91       	ld	r24, X
    2f44:	81 60       	ori	r24, 0x01	; 1
    2f46:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2f48:	88 81       	ld	r24, Y
    2f4a:	8f 75       	andi	r24, 0x5F	; 95
    2f4c:	88 83       	st	Y, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2f4e:	e2 e0       	ldi	r30, 0x02	; 2
    2f50:	f1 e0       	ldi	r31, 0x01	; 1
    2f52:	80 81       	ld	r24, Z
    2f54:	87 7e       	andi	r24, 0xE7	; 231
    2f56:	80 83       	st	Z, r24


}
    2f58:	df 91       	pop	r29
    2f5a:	cf 91       	pop	r28
    2f5c:	1f 91       	pop	r17
    2f5e:	0f 91       	pop	r16
    2f60:	08 95       	ret

00002f62 <cast_speed>:

signed int cast_speed(signed int vel) {
    2f62:	2e ef       	ldi	r18, 0xFE	; 254
    2f64:	81 30       	cpi	r24, 0x01	; 1
    2f66:	92 07       	cpc	r25, r18
    2f68:	14 f4       	brge	.+4      	; 0x2f6e <cast_speed+0xc>
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	9e ef       	ldi	r25, 0xFE	; 254
    2f6e:	9c 01       	movw	r18, r24
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	20 30       	cpi	r18, 0x00	; 0
    2f74:	38 07       	cpc	r19, r24
    2f76:	14 f0       	brlt	.+4      	; 0x2f7c <cast_speed+0x1a>
    2f78:	2f ef       	ldi	r18, 0xFF	; 255
    2f7a:	31 e0       	ldi	r19, 0x01	; 1
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    2f7c:	c9 01       	movw	r24, r18
    2f7e:	08 95       	ret

00002f80 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    2f80:	28 2f       	mov	r18, r24
    2f82:	33 27       	eor	r19, r19
    2f84:	27 fd       	sbrc	r18, 7
    2f86:	30 95       	com	r19
    2f88:	37 fd       	sbrc	r19, 7
    2f8a:	29 c0       	rjmp	.+82     	; 0x2fde <setLeftSpeed+0x5e>
    2f8c:	30 93 2e 03 	sts	0x032E, r19
    2f90:	20 93 2d 03 	sts	0x032D, r18

    if(vel >= 0) {
    2f94:	87 fd       	sbrc	r24, 7
    2f96:	1a c0       	rjmp	.+52     	; 0x2fcc <setLeftSpeed+0x4c>
        pwm_left_desired = speedl;
    2f98:	30 93 18 03 	sts	0x0318, r19
    2f9c:	20 93 17 03 	sts	0x0317, r18
    2fa0:	c9 01       	movw	r24, r18
    } else {
        pwm_left_desired = -(speedl);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2fa2:	22 e0       	ldi	r18, 0x02	; 2
    2fa4:	80 30       	cpi	r24, 0x00	; 0
    2fa6:	92 07       	cpc	r25, r18
    2fa8:	3c f0       	brlt	.+14     	; 0x2fb8 <setLeftSpeed+0x38>
    2faa:	8f ef       	ldi	r24, 0xFF	; 255
    2fac:	91 e0       	ldi	r25, 0x01	; 1
    2fae:	90 93 18 03 	sts	0x0318, r25
    2fb2:	80 93 17 03 	sts	0x0317, r24
    2fb6:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2fb8:	81 50       	subi	r24, 0x01	; 1
    2fba:	9e 4f       	sbci	r25, 0xFE	; 254
    2fbc:	34 f4       	brge	.+12     	; 0x2fca <setLeftSpeed+0x4a>
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	9e ef       	ldi	r25, 0xFE	; 254
    2fc2:	90 93 18 03 	sts	0x0318, r25
    2fc6:	80 93 17 03 	sts	0x0317, r24
    2fca:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    2fcc:	88 27       	eor	r24, r24
    2fce:	99 27       	eor	r25, r25
    2fd0:	82 1b       	sub	r24, r18
    2fd2:	93 0b       	sbc	r25, r19
    2fd4:	90 93 18 03 	sts	0x0318, r25
    2fd8:	80 93 17 03 	sts	0x0317, r24
    2fdc:	e2 cf       	rjmp	.-60     	; 0x2fa2 <setLeftSpeed+0x22>
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    2fde:	30 95       	com	r19
    2fe0:	21 95       	neg	r18
    2fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe4:	d3 cf       	rjmp	.-90     	; 0x2f8c <setLeftSpeed+0xc>

00002fe6 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    2fe6:	28 2f       	mov	r18, r24
    2fe8:	33 27       	eor	r19, r19
    2fea:	27 fd       	sbrc	r18, 7
    2fec:	30 95       	com	r19
    2fee:	37 fd       	sbrc	r19, 7
    2ff0:	29 c0       	rjmp	.+82     	; 0x3044 <setRightSpeed+0x5e>
    2ff2:	30 93 30 03 	sts	0x0330, r19
    2ff6:	20 93 2f 03 	sts	0x032F, r18

    if(vel >= 0) {
    2ffa:	87 fd       	sbrc	r24, 7
    2ffc:	1a c0       	rjmp	.+52     	; 0x3032 <setRightSpeed+0x4c>
        pwm_right_desired = speedr;
    2ffe:	30 93 16 03 	sts	0x0316, r19
    3002:	20 93 15 03 	sts	0x0315, r18
    3006:	c9 01       	movw	r24, r18
    } else {
        pwm_right_desired = -(speedr);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    3008:	22 e0       	ldi	r18, 0x02	; 2
    300a:	80 30       	cpi	r24, 0x00	; 0
    300c:	92 07       	cpc	r25, r18
    300e:	3c f0       	brlt	.+14     	; 0x301e <setRightSpeed+0x38>
    3010:	8f ef       	ldi	r24, 0xFF	; 255
    3012:	91 e0       	ldi	r25, 0x01	; 1
    3014:	90 93 16 03 	sts	0x0316, r25
    3018:	80 93 15 03 	sts	0x0315, r24
    301c:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    301e:	81 50       	subi	r24, 0x01	; 1
    3020:	9e 4f       	sbci	r25, 0xFE	; 254
    3022:	34 f4       	brge	.+12     	; 0x3030 <setRightSpeed+0x4a>
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	9e ef       	ldi	r25, 0xFE	; 254
    3028:	90 93 16 03 	sts	0x0316, r25
    302c:	80 93 15 03 	sts	0x0315, r24
    3030:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    3032:	88 27       	eor	r24, r24
    3034:	99 27       	eor	r25, r25
    3036:	82 1b       	sub	r24, r18
    3038:	93 0b       	sbc	r25, r19
    303a:	90 93 16 03 	sts	0x0316, r25
    303e:	80 93 15 03 	sts	0x0315, r24
    3042:	e2 cf       	rjmp	.-60     	; 0x3008 <setRightSpeed+0x22>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    3044:	30 95       	com	r19
    3046:	21 95       	neg	r18
    3048:	3f 4f       	sbci	r19, 0xFF	; 255
    304a:	d3 cf       	rjmp	.-90     	; 0x2ff2 <setRightSpeed+0xc>

0000304c <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    304c:	80 91 73 05 	lds	r24, 0x0573
    3050:	88 23       	and	r24, r24
    3052:	09 f0       	breq	.+2      	; 0x3056 <updateOdomData+0xa>
    3054:	3f c0       	rjmp	.+126    	; 0x30d4 <updateOdomData+0x88>
        if(calibVelIndex>1) {
    3056:	e0 91 db 08 	lds	r30, 0x08DB
    305a:	e2 30       	cpi	r30, 0x02	; 2
    305c:	08 f4       	brcc	.+2      	; 0x3060 <updateOdomData+0x14>
    305e:	77 c0       	rjmp	.+238    	; 0x314e <updateOdomData+0x102>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    3060:	4e 2f       	mov	r20, r30
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	fa 01       	movw	r30, r20
    3066:	ee 0f       	add	r30, r30
    3068:	ff 1f       	adc	r31, r31
    306a:	ee 0f       	add	r30, r30
    306c:	ff 1f       	adc	r31, r31
    306e:	ee 0f       	add	r30, r30
    3070:	ff 1f       	adc	r31, r31
    3072:	ee 0f       	add	r30, r30
    3074:	ff 1f       	adc	r31, r31
    3076:	ec 51       	subi	r30, 0x1C	; 28
    3078:	f7 4f       	sbci	r31, 0xF7	; 247
    307a:	80 81       	ld	r24, Z
    307c:	91 81       	ldd	r25, Z+1	; 0x01
    307e:	20 91 96 0b 	lds	r18, 0x0B96
    3082:	30 91 97 0b 	lds	r19, 0x0B97
    3086:	82 17       	cp	r24, r18
    3088:	93 07       	cpc	r25, r19
    308a:	34 f0       	brlt	.+12     	; 0x3098 <updateOdomData+0x4c>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	90 93 97 0b 	sts	0x0B97, r25
    3092:	80 93 96 0b 	sts	0x0B96, r24
    3096:	9c 01       	movw	r18, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    3098:	fa 01       	movw	r30, r20
    309a:	31 97       	sbiw	r30, 0x01	; 1
    309c:	df 01       	movw	r26, r30
    309e:	a2 95       	swap	r26
    30a0:	b2 95       	swap	r27
    30a2:	b0 7f       	andi	r27, 0xF0	; 240
    30a4:	ba 27       	eor	r27, r26
    30a6:	a0 7f       	andi	r26, 0xF0	; 240
    30a8:	ba 27       	eor	r27, r26
    30aa:	ae 5f       	subi	r26, 0xFE	; 254
    30ac:	b6 4f       	sbci	r27, 0xF6	; 246
    30ae:	80 91 dc 04 	lds	r24, 0x04DC
    30b2:	90 91 dd 04 	lds	r25, 0x04DD
    30b6:	8d 93       	st	X+, r24
    30b8:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][1] = tempVel;
    30ba:	ee 0f       	add	r30, r30
    30bc:	ff 1f       	adc	r31, r31
    30be:	ee 0f       	add	r30, r30
    30c0:	ff 1f       	adc	r31, r31
    30c2:	ee 0f       	add	r30, r30
    30c4:	ff 1f       	adc	r31, r31
    30c6:	ee 0f       	add	r30, r30
    30c8:	ff 1f       	adc	r31, r31
    30ca:	ec 5f       	subi	r30, 0xFC	; 252
    30cc:	f6 4f       	sbci	r31, 0xF6	; 246
    30ce:	31 83       	std	Z+1, r19	; 0x01
    30d0:	20 83       	st	Z, r18
    30d2:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    30d4:	81 30       	cpi	r24, 0x01	; 1
    30d6:	31 f0       	breq	.+12     	; 0x30e4 <updateOdomData+0x98>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    30d8:	82 30       	cpi	r24, 0x02	; 2
    30da:	09 f4       	brne	.+2      	; 0x30de <updateOdomData+0x92>
    30dc:	70 c0       	rjmp	.+224    	; 0x31be <updateOdomData+0x172>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    30de:	83 30       	cpi	r24, 0x03	; 3
    30e0:	e9 f1       	breq	.+122    	; 0x315c <updateOdomData+0x110>
    30e2:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    30e4:	e0 91 db 08 	lds	r30, 0x08DB
    30e8:	e2 30       	cpi	r30, 0x02	; 2
    30ea:	08 f4       	brcc	.+2      	; 0x30ee <updateOdomData+0xa2>
    30ec:	9e c0       	rjmp	.+316    	; 0x322a <updateOdomData+0x1de>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    30ee:	4e 2f       	mov	r20, r30
    30f0:	50 e0       	ldi	r21, 0x00	; 0
    30f2:	fa 01       	movw	r30, r20
    30f4:	e2 95       	swap	r30
    30f6:	f2 95       	swap	r31
    30f8:	f0 7f       	andi	r31, 0xF0	; 240
    30fa:	fe 27       	eor	r31, r30
    30fc:	e0 7f       	andi	r30, 0xF0	; 240
    30fe:	fe 27       	eor	r31, r30
    3100:	ee 51       	subi	r30, 0x1E	; 30
    3102:	f7 4f       	sbci	r31, 0xF7	; 247
    3104:	86 81       	ldd	r24, Z+6	; 0x06
    3106:	97 81       	ldd	r25, Z+7	; 0x07
    3108:	20 91 96 0b 	lds	r18, 0x0B96
    310c:	30 91 97 0b 	lds	r19, 0x0B97
    3110:	82 17       	cp	r24, r18
    3112:	93 07       	cpc	r25, r19
    3114:	34 f0       	brlt	.+12     	; 0x3122 <updateOdomData+0xd6>
                tempVel = calibration[calibVelIndex-2][3]+1;
    3116:	01 96       	adiw	r24, 0x01	; 1
    3118:	90 93 97 0b 	sts	0x0B97, r25
    311c:	80 93 96 0b 	sts	0x0B96, r24
    3120:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    3122:	fa 01       	movw	r30, r20
    3124:	31 97       	sbiw	r30, 0x01	; 1
    3126:	e2 95       	swap	r30
    3128:	f2 95       	swap	r31
    312a:	f0 7f       	andi	r31, 0xF0	; 240
    312c:	fe 27       	eor	r31, r30
    312e:	e0 7f       	andi	r30, 0xF0	; 240
    3130:	fe 27       	eor	r31, r30
    3132:	df 01       	movw	r26, r30
    3134:	aa 5f       	subi	r26, 0xFA	; 250
    3136:	b6 4f       	sbci	r27, 0xF6	; 246
    3138:	80 91 de 04 	lds	r24, 0x04DE
    313c:	90 91 df 04 	lds	r25, 0x04DF
    3140:	8d 93       	st	X+, r24
    3142:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][3] = tempVel;
    3144:	ee 5f       	subi	r30, 0xFE	; 254
    3146:	f6 4f       	sbci	r31, 0xF6	; 246
    3148:	37 83       	std	Z+7, r19	; 0x07
    314a:	26 83       	std	Z+6, r18	; 0x06
    314c:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    314e:	4e 2f       	mov	r20, r30
    3150:	50 e0       	ldi	r21, 0x00	; 0
    3152:	20 91 96 0b 	lds	r18, 0x0B96
    3156:	30 91 97 0b 	lds	r19, 0x0B97
    315a:	9e cf       	rjmp	.-196    	; 0x3098 <updateOdomData+0x4c>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    315c:	e0 91 db 08 	lds	r30, 0x08DB
    3160:	e2 30       	cpi	r30, 0x02	; 2
    3162:	08 f4       	brcc	.+2      	; 0x3166 <updateOdomData+0x11a>
    3164:	70 c0       	rjmp	.+224    	; 0x3246 <updateOdomData+0x1fa>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    3166:	4e 2f       	mov	r20, r30
    3168:	50 e0       	ldi	r21, 0x00	; 0
    316a:	fa 01       	movw	r30, r20
    316c:	e2 95       	swap	r30
    316e:	f2 95       	swap	r31
    3170:	f0 7f       	andi	r31, 0xF0	; 240
    3172:	fe 27       	eor	r31, r30
    3174:	e0 7f       	andi	r30, 0xF0	; 240
    3176:	fe 27       	eor	r31, r30
    3178:	ee 51       	subi	r30, 0x1E	; 30
    317a:	f7 4f       	sbci	r31, 0xF7	; 247
    317c:	86 85       	ldd	r24, Z+14	; 0x0e
    317e:	97 85       	ldd	r25, Z+15	; 0x0f
    3180:	20 91 96 0b 	lds	r18, 0x0B96
    3184:	30 91 97 0b 	lds	r19, 0x0B97
    3188:	82 17       	cp	r24, r18
    318a:	93 07       	cpc	r25, r19
    318c:	34 f0       	brlt	.+12     	; 0x319a <updateOdomData+0x14e>
                tempVel = calibration[calibVelIndex-2][7]+1;
    318e:	01 96       	adiw	r24, 0x01	; 1
    3190:	90 93 97 0b 	sts	0x0B97, r25
    3194:	80 93 96 0b 	sts	0x0B96, r24
    3198:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    319a:	fa 01       	movw	r30, r20
    319c:	e2 95       	swap	r30
    319e:	f2 95       	swap	r31
    31a0:	f0 7f       	andi	r31, 0xF0	; 240
    31a2:	fe 27       	eor	r31, r30
    31a4:	e0 7f       	andi	r30, 0xF0	; 240
    31a6:	fe 27       	eor	r31, r30
    31a8:	ee 50       	subi	r30, 0x0E	; 14
    31aa:	f7 4f       	sbci	r31, 0xF7	; 247
    31ac:	80 91 de 04 	lds	r24, 0x04DE
    31b0:	90 91 df 04 	lds	r25, 0x04DF
    31b4:	95 87       	std	Z+13, r25	; 0x0d
    31b6:	84 87       	std	Z+12, r24	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    31b8:	37 87       	std	Z+15, r19	; 0x0f
    31ba:	26 87       	std	Z+14, r18	; 0x0e
    31bc:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    31be:	e0 91 db 08 	lds	r30, 0x08DB
    31c2:	e2 30       	cpi	r30, 0x02	; 2
    31c4:	c8 f1       	brcs	.+114    	; 0x3238 <updateOdomData+0x1ec>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    31c6:	4e 2f       	mov	r20, r30
    31c8:	50 e0       	ldi	r21, 0x00	; 0
    31ca:	fa 01       	movw	r30, r20
    31cc:	e2 95       	swap	r30
    31ce:	f2 95       	swap	r31
    31d0:	f0 7f       	andi	r31, 0xF0	; 240
    31d2:	fe 27       	eor	r31, r30
    31d4:	e0 7f       	andi	r30, 0xF0	; 240
    31d6:	fe 27       	eor	r31, r30
    31d8:	ee 51       	subi	r30, 0x1E	; 30
    31da:	f7 4f       	sbci	r31, 0xF7	; 247
    31dc:	82 85       	ldd	r24, Z+10	; 0x0a
    31de:	93 85       	ldd	r25, Z+11	; 0x0b
    31e0:	20 91 96 0b 	lds	r18, 0x0B96
    31e4:	30 91 97 0b 	lds	r19, 0x0B97
    31e8:	82 17       	cp	r24, r18
    31ea:	93 07       	cpc	r25, r19
    31ec:	34 f0       	brlt	.+12     	; 0x31fa <updateOdomData+0x1ae>
                tempVel = calibration[calibVelIndex-2][5]+1;
    31ee:	01 96       	adiw	r24, 0x01	; 1
    31f0:	90 93 97 0b 	sts	0x0B97, r25
    31f4:	80 93 96 0b 	sts	0x0B96, r24
    31f8:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    31fa:	fa 01       	movw	r30, r20
    31fc:	31 97       	sbiw	r30, 0x01	; 1
    31fe:	ee 0f       	add	r30, r30
    3200:	ff 1f       	adc	r31, r31
    3202:	ee 0f       	add	r30, r30
    3204:	ff 1f       	adc	r31, r31
    3206:	ee 0f       	add	r30, r30
    3208:	ff 1f       	adc	r31, r31
    320a:	ee 0f       	add	r30, r30
    320c:	ff 1f       	adc	r31, r31
    320e:	df 01       	movw	r26, r30
    3210:	a6 5f       	subi	r26, 0xF6	; 246
    3212:	b6 4f       	sbci	r27, 0xF6	; 246
    3214:	80 91 dc 04 	lds	r24, 0x04DC
    3218:	90 91 dd 04 	lds	r25, 0x04DD
    321c:	8d 93       	st	X+, r24
    321e:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][5] = tempVel;
    3220:	ee 5f       	subi	r30, 0xFE	; 254
    3222:	f6 4f       	sbci	r31, 0xF6	; 246
    3224:	33 87       	std	Z+11, r19	; 0x0b
    3226:	22 87       	std	Z+10, r18	; 0x0a
    3228:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    322a:	4e 2f       	mov	r20, r30
    322c:	50 e0       	ldi	r21, 0x00	; 0
    322e:	20 91 96 0b 	lds	r18, 0x0B96
    3232:	30 91 97 0b 	lds	r19, 0x0B97
    3236:	75 cf       	rjmp	.-278    	; 0x3122 <updateOdomData+0xd6>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    3238:	4e 2f       	mov	r20, r30
    323a:	50 e0       	ldi	r21, 0x00	; 0
    323c:	20 91 96 0b 	lds	r18, 0x0B96
    3240:	30 91 97 0b 	lds	r19, 0x0B97
    3244:	da cf       	rjmp	.-76     	; 0x31fa <updateOdomData+0x1ae>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    3246:	4e 2f       	mov	r20, r30
    3248:	50 e0       	ldi	r21, 0x00	; 0
    324a:	20 91 96 0b 	lds	r18, 0x0B96
    324e:	30 91 97 0b 	lds	r19, 0x0B97
    3252:	a3 cf       	rjmp	.-186    	; 0x319a <updateOdomData+0x14e>

00003254 <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    3254:	8f 92       	push	r8
    3256:	9f 92       	push	r9
    3258:	af 92       	push	r10
    325a:	bf 92       	push	r11
    325c:	cf 92       	push	r12
    325e:	df 92       	push	r13
    3260:	ef 92       	push	r14
    3262:	ff 92       	push	r15
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	46 2f       	mov	r20, r22
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    326e:	9c 01       	movw	r18, r24
    3270:	22 0f       	add	r18, r18
    3272:	33 1f       	adc	r19, r19
    3274:	22 0f       	add	r18, r18
    3276:	33 1f       	adc	r19, r19
    3278:	28 0f       	add	r18, r24
    327a:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    327c:	21 15       	cp	r18, r1
    327e:	31 05       	cpc	r19, r1
    3280:	09 f4       	brne	.+2      	; 0x3284 <getInputFromSpeed+0x30>
    3282:	92 c0       	rjmp	.+292    	; 0x33a8 <getInputFromSpeed+0x154>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    3284:	86 2f       	mov	r24, r22
    3286:	82 50       	subi	r24, 0x02	; 2
    3288:	82 30       	cpi	r24, 0x02	; 2
    328a:	08 f4       	brcc	.+2      	; 0x328e <getInputFromSpeed+0x3a>
    328c:	9d c0       	rjmp	.+314    	; 0x33c8 <getInputFromSpeed+0x174>
    328e:	44 23       	and	r20, r20
    3290:	09 f0       	breq	.+2      	; 0x3294 <getInputFromSpeed+0x40>
    3292:	77 c0       	rjmp	.+238    	; 0x3382 <getInputFromSpeed+0x12e>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    3294:	60 91 04 09 	lds	r22, 0x0904
    3298:	70 91 05 09 	lds	r23, 0x0905
    329c:	62 17       	cp	r22, r18
    329e:	73 07       	cpc	r23, r19
    32a0:	0c f0       	brlt	.+2      	; 0x32a4 <getInputFromSpeed+0x50>
    32a2:	99 c0       	rjmp	.+306    	; 0x33d6 <getInputFromSpeed+0x182>
    32a4:	80 91 14 09 	lds	r24, 0x0914
    32a8:	90 91 15 09 	lds	r25, 0x0915
    32ac:	82 17       	cp	r24, r18
    32ae:	93 07       	cpc	r25, r19
    32b0:	0c f0       	brlt	.+2      	; 0x32b4 <getInputFromSpeed+0x60>
    32b2:	1e c2       	rjmp	.+1084   	; 0x36f0 <getInputFromSpeed+0x49c>
    32b4:	80 91 24 09 	lds	r24, 0x0924
    32b8:	90 91 25 09 	lds	r25, 0x0925
    32bc:	82 17       	cp	r24, r18
    32be:	93 07       	cpc	r25, r19
    32c0:	0c f0       	brlt	.+2      	; 0x32c4 <getInputFromSpeed+0x70>
    32c2:	66 c3       	rjmp	.+1740   	; 0x3990 <getInputFromSpeed+0x73c>
    32c4:	80 91 34 09 	lds	r24, 0x0934
    32c8:	90 91 35 09 	lds	r25, 0x0935
    32cc:	82 17       	cp	r24, r18
    32ce:	93 07       	cpc	r25, r19
    32d0:	0c f0       	brlt	.+2      	; 0x32d4 <getInputFromSpeed+0x80>
    32d2:	5b c3       	rjmp	.+1718   	; 0x398a <getInputFromSpeed+0x736>
    32d4:	80 91 44 09 	lds	r24, 0x0944
    32d8:	90 91 45 09 	lds	r25, 0x0945
    32dc:	82 17       	cp	r24, r18
    32de:	93 07       	cpc	r25, r19
    32e0:	0c f0       	brlt	.+2      	; 0x32e4 <getInputFromSpeed+0x90>
    32e2:	59 c3       	rjmp	.+1714   	; 0x3996 <getInputFromSpeed+0x742>
    32e4:	80 91 54 09 	lds	r24, 0x0954
    32e8:	90 91 55 09 	lds	r25, 0x0955
    32ec:	82 17       	cp	r24, r18
    32ee:	93 07       	cpc	r25, r19
    32f0:	0c f0       	brlt	.+2      	; 0x32f4 <getInputFromSpeed+0xa0>
    32f2:	54 c3       	rjmp	.+1704   	; 0x399c <getInputFromSpeed+0x748>
    32f4:	80 91 64 09 	lds	r24, 0x0964
    32f8:	90 91 65 09 	lds	r25, 0x0965
    32fc:	82 17       	cp	r24, r18
    32fe:	93 07       	cpc	r25, r19
    3300:	0c f0       	brlt	.+2      	; 0x3304 <getInputFromSpeed+0xb0>
    3302:	52 c3       	rjmp	.+1700   	; 0x39a8 <getInputFromSpeed+0x754>
    3304:	80 91 74 09 	lds	r24, 0x0974
    3308:	90 91 75 09 	lds	r25, 0x0975
    330c:	82 17       	cp	r24, r18
    330e:	93 07       	cpc	r25, r19
    3310:	0c f0       	brlt	.+2      	; 0x3314 <getInputFromSpeed+0xc0>
    3312:	47 c3       	rjmp	.+1678   	; 0x39a2 <getInputFromSpeed+0x74e>
    3314:	80 91 84 09 	lds	r24, 0x0984
    3318:	90 91 85 09 	lds	r25, 0x0985
    331c:	82 17       	cp	r24, r18
    331e:	93 07       	cpc	r25, r19
    3320:	0c f0       	brlt	.+2      	; 0x3324 <getInputFromSpeed+0xd0>
    3322:	45 c3       	rjmp	.+1674   	; 0x39ae <getInputFromSpeed+0x75a>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    3324:	b9 01       	movw	r22, r18
    3326:	88 27       	eor	r24, r24
    3328:	77 fd       	sbrc	r23, 7
    332a:	80 95       	com	r24
    332c:	98 2f       	mov	r25, r24
    332e:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3332:	7b 01       	movw	r14, r22
    3334:	8c 01       	movw	r16, r24
    3336:	60 91 82 09 	lds	r22, 0x0982
    333a:	70 91 83 09 	lds	r23, 0x0983
    333e:	88 27       	eor	r24, r24
    3340:	77 fd       	sbrc	r23, 7
    3342:	80 95       	com	r24
    3344:	98 2f       	mov	r25, r24
    3346:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    334a:	9b 01       	movw	r18, r22
    334c:	ac 01       	movw	r20, r24
    334e:	c8 01       	movw	r24, r16
    3350:	b7 01       	movw	r22, r14
    3352:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    3356:	7b 01       	movw	r14, r22
    3358:	8c 01       	movw	r16, r24
    335a:	60 91 84 09 	lds	r22, 0x0984
    335e:	70 91 85 09 	lds	r23, 0x0985
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    3362:	88 27       	eor	r24, r24
    3364:	77 fd       	sbrc	r23, 7
    3366:	80 95       	com	r24
    3368:	98 2f       	mov	r25, r24
    336a:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    336e:	9b 01       	movw	r18, r22
    3370:	ac 01       	movw	r20, r24
    3372:	c8 01       	movw	r24, r16
    3374:	b7 01       	movw	r22, r14
    3376:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    337a:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    337e:	9b 01       	movw	r18, r22
    3380:	15 c0       	rjmp	.+42     	; 0x33ac <getInputFromSpeed+0x158>
    3382:	43 30       	cpi	r20, 0x03	; 3
    3384:	c1 f1       	breq	.+112    	; 0x33f6 <getInputFromSpeed+0x1a2>
    3386:	42 30       	cpi	r20, 0x02	; 2
    3388:	09 f4       	brne	.+2      	; 0x338c <getInputFromSpeed+0x138>
    338a:	24 c1       	rjmp	.+584    	; 0x35d4 <getInputFromSpeed+0x380>
    338c:	41 30       	cpi	r20, 0x01	; 1
    338e:	09 f4       	brne	.+2      	; 0x3392 <getInputFromSpeed+0x13e>
    3390:	ac c0       	rjmp	.+344    	; 0x34ea <getInputFromSpeed+0x296>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    3392:	44 23       	and	r20, r20
    3394:	39 f2       	breq	.-114    	; 0x3324 <getInputFromSpeed+0xd0>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    3396:	41 30       	cpi	r20, 0x01	; 1
    3398:	09 f4       	brne	.+2      	; 0x339c <getInputFromSpeed+0x148>
    339a:	ef c0       	rjmp	.+478    	; 0x357a <getInputFromSpeed+0x326>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    339c:	42 30       	cpi	r20, 0x02	; 2
    339e:	09 f4       	brne	.+2      	; 0x33a2 <getInputFromSpeed+0x14e>
    33a0:	61 c1       	rjmp	.+706    	; 0x3664 <getInputFromSpeed+0x410>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    33a2:	43 30       	cpi	r20, 0x03	; 3
    33a4:	09 f4       	brne	.+2      	; 0x33a8 <getInputFromSpeed+0x154>
    33a6:	6f c0       	rjmp	.+222    	; 0x3486 <getInputFromSpeed+0x232>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
            temp = -temp;
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
        }        
    }
    
    return temp;
}
    33ac:	c9 01       	movw	r24, r18
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	1f 91       	pop	r17
    33b4:	0f 91       	pop	r16
    33b6:	ff 90       	pop	r15
    33b8:	ef 90       	pop	r14
    33ba:	df 90       	pop	r13
    33bc:	cf 90       	pop	r12
    33be:	bf 90       	pop	r11
    33c0:	af 90       	pop	r10
    33c2:	9f 90       	pop	r9
    33c4:	8f 90       	pop	r8
    33c6:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    33c8:	30 95       	com	r19
    33ca:	21 95       	neg	r18
    33cc:	3f 4f       	sbci	r19, 0xFF	; 255
    33ce:	44 23       	and	r20, r20
    33d0:	09 f4       	brne	.+2      	; 0x33d4 <getInputFromSpeed+0x180>
    33d2:	60 cf       	rjmp	.-320    	; 0x3294 <getInputFromSpeed+0x40>
    33d4:	d6 cf       	rjmp	.-84     	; 0x3382 <getInputFromSpeed+0x12e>
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
    33d6:	80 91 02 09 	lds	r24, 0x0902
    33da:	90 91 03 09 	lds	r25, 0x0903
    33de:	ac 01       	movw	r20, r24
    33e0:	24 9f       	mul	r18, r20
    33e2:	c0 01       	movw	r24, r0
    33e4:	25 9f       	mul	r18, r21
    33e6:	90 0d       	add	r25, r0
    33e8:	34 9f       	mul	r19, r20
    33ea:	90 0d       	add	r25, r0
    33ec:	11 24       	eor	r1, r1
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    33ee:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__divmodhi4>
    33f2:	9b 01       	movw	r18, r22
    33f4:	db cf       	rjmp	.-74     	; 0x33ac <getInputFromSpeed+0x158>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    33f6:	60 91 10 09 	lds	r22, 0x0910
    33fa:	70 91 11 09 	lds	r23, 0x0911
    33fe:	62 17       	cp	r22, r18
    3400:	73 07       	cpc	r23, r19
    3402:	0c f0       	brlt	.+2      	; 0x3406 <getInputFromSpeed+0x1b2>
    3404:	62 c1       	rjmp	.+708    	; 0x36ca <getInputFromSpeed+0x476>
    3406:	80 91 20 09 	lds	r24, 0x0920
    340a:	90 91 21 09 	lds	r25, 0x0921
    340e:	82 17       	cp	r24, r18
    3410:	93 07       	cpc	r25, r19
    3412:	0c f0       	brlt	.+2      	; 0x3416 <getInputFromSpeed+0x1c2>
    3414:	6d c1       	rjmp	.+730    	; 0x36f0 <getInputFromSpeed+0x49c>
    3416:	80 91 30 09 	lds	r24, 0x0930
    341a:	90 91 31 09 	lds	r25, 0x0931
    341e:	82 17       	cp	r24, r18
    3420:	93 07       	cpc	r25, r19
    3422:	0c f0       	brlt	.+2      	; 0x3426 <getInputFromSpeed+0x1d2>
    3424:	b5 c2       	rjmp	.+1386   	; 0x3990 <getInputFromSpeed+0x73c>
    3426:	80 91 40 09 	lds	r24, 0x0940
    342a:	90 91 41 09 	lds	r25, 0x0941
    342e:	82 17       	cp	r24, r18
    3430:	93 07       	cpc	r25, r19
    3432:	0c f0       	brlt	.+2      	; 0x3436 <getInputFromSpeed+0x1e2>
    3434:	aa c2       	rjmp	.+1364   	; 0x398a <getInputFromSpeed+0x736>
    3436:	80 91 50 09 	lds	r24, 0x0950
    343a:	90 91 51 09 	lds	r25, 0x0951
    343e:	82 17       	cp	r24, r18
    3440:	93 07       	cpc	r25, r19
    3442:	0c f0       	brlt	.+2      	; 0x3446 <getInputFromSpeed+0x1f2>
    3444:	a8 c2       	rjmp	.+1360   	; 0x3996 <getInputFromSpeed+0x742>
    3446:	80 91 60 09 	lds	r24, 0x0960
    344a:	90 91 61 09 	lds	r25, 0x0961
    344e:	82 17       	cp	r24, r18
    3450:	93 07       	cpc	r25, r19
    3452:	0c f0       	brlt	.+2      	; 0x3456 <getInputFromSpeed+0x202>
    3454:	a3 c2       	rjmp	.+1350   	; 0x399c <getInputFromSpeed+0x748>
    3456:	80 91 70 09 	lds	r24, 0x0970
    345a:	90 91 71 09 	lds	r25, 0x0971
    345e:	82 17       	cp	r24, r18
    3460:	93 07       	cpc	r25, r19
    3462:	0c f0       	brlt	.+2      	; 0x3466 <getInputFromSpeed+0x212>
    3464:	a1 c2       	rjmp	.+1346   	; 0x39a8 <getInputFromSpeed+0x754>
    3466:	80 91 80 09 	lds	r24, 0x0980
    346a:	90 91 81 09 	lds	r25, 0x0981
    346e:	82 17       	cp	r24, r18
    3470:	93 07       	cpc	r25, r19
    3472:	0c f0       	brlt	.+2      	; 0x3476 <getInputFromSpeed+0x222>
    3474:	96 c2       	rjmp	.+1324   	; 0x39a2 <getInputFromSpeed+0x74e>
    3476:	80 91 90 09 	lds	r24, 0x0990
    347a:	90 91 91 09 	lds	r25, 0x0991
    347e:	82 17       	cp	r24, r18
    3480:	93 07       	cpc	r25, r19
    3482:	0c f0       	brlt	.+2      	; 0x3486 <getInputFromSpeed+0x232>
    3484:	94 c2       	rjmp	.+1320   	; 0x39ae <getInputFromSpeed+0x75a>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    3486:	b9 01       	movw	r22, r18
    3488:	88 27       	eor	r24, r24
    348a:	77 fd       	sbrc	r23, 7
    348c:	80 95       	com	r24
    348e:	98 2f       	mov	r25, r24
    3490:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3494:	7b 01       	movw	r14, r22
    3496:	8c 01       	movw	r16, r24
    3498:	60 91 8e 09 	lds	r22, 0x098E
    349c:	70 91 8f 09 	lds	r23, 0x098F
    34a0:	88 27       	eor	r24, r24
    34a2:	77 fd       	sbrc	r23, 7
    34a4:	80 95       	com	r24
    34a6:	98 2f       	mov	r25, r24
    34a8:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    34ac:	9b 01       	movw	r18, r22
    34ae:	ac 01       	movw	r20, r24
    34b0:	c8 01       	movw	r24, r16
    34b2:	b7 01       	movw	r22, r14
    34b4:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    34b8:	7b 01       	movw	r14, r22
    34ba:	8c 01       	movw	r16, r24
    34bc:	60 91 90 09 	lds	r22, 0x0990
    34c0:	70 91 91 09 	lds	r23, 0x0991
    34c4:	88 27       	eor	r24, r24
    34c6:	77 fd       	sbrc	r23, 7
    34c8:	80 95       	com	r24
    34ca:	98 2f       	mov	r25, r24
    34cc:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    34d0:	9b 01       	movw	r18, r22
    34d2:	ac 01       	movw	r20, r24
    34d4:	c8 01       	movw	r24, r16
    34d6:	b7 01       	movw	r22, r14
    34d8:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    34dc:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
            temp = -temp;
    34e0:	22 27       	eor	r18, r18
    34e2:	33 27       	eor	r19, r19
    34e4:	26 1b       	sub	r18, r22
    34e6:	37 0b       	sbc	r19, r23
    34e8:	61 cf       	rjmp	.-318    	; 0x33ac <getInputFromSpeed+0x158>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    34ea:	60 91 08 09 	lds	r22, 0x0908
    34ee:	70 91 09 09 	lds	r23, 0x0909
    34f2:	62 17       	cp	r22, r18
    34f4:	73 07       	cpc	r23, r19
    34f6:	0c f0       	brlt	.+2      	; 0x34fa <getInputFromSpeed+0x2a6>
    34f8:	60 c0       	rjmp	.+192    	; 0x35ba <getInputFromSpeed+0x366>
    34fa:	80 91 18 09 	lds	r24, 0x0918
    34fe:	90 91 19 09 	lds	r25, 0x0919
    3502:	82 17       	cp	r24, r18
    3504:	93 07       	cpc	r25, r19
    3506:	0c f0       	brlt	.+2      	; 0x350a <getInputFromSpeed+0x2b6>
    3508:	f3 c0       	rjmp	.+486    	; 0x36f0 <getInputFromSpeed+0x49c>
    350a:	80 91 28 09 	lds	r24, 0x0928
    350e:	90 91 29 09 	lds	r25, 0x0929
    3512:	82 17       	cp	r24, r18
    3514:	93 07       	cpc	r25, r19
    3516:	0c f0       	brlt	.+2      	; 0x351a <getInputFromSpeed+0x2c6>
    3518:	3b c2       	rjmp	.+1142   	; 0x3990 <getInputFromSpeed+0x73c>
    351a:	80 91 38 09 	lds	r24, 0x0938
    351e:	90 91 39 09 	lds	r25, 0x0939
    3522:	82 17       	cp	r24, r18
    3524:	93 07       	cpc	r25, r19
    3526:	0c f0       	brlt	.+2      	; 0x352a <getInputFromSpeed+0x2d6>
    3528:	30 c2       	rjmp	.+1120   	; 0x398a <getInputFromSpeed+0x736>
    352a:	80 91 48 09 	lds	r24, 0x0948
    352e:	90 91 49 09 	lds	r25, 0x0949
    3532:	82 17       	cp	r24, r18
    3534:	93 07       	cpc	r25, r19
    3536:	0c f0       	brlt	.+2      	; 0x353a <getInputFromSpeed+0x2e6>
    3538:	2e c2       	rjmp	.+1116   	; 0x3996 <getInputFromSpeed+0x742>
    353a:	80 91 58 09 	lds	r24, 0x0958
    353e:	90 91 59 09 	lds	r25, 0x0959
    3542:	82 17       	cp	r24, r18
    3544:	93 07       	cpc	r25, r19
    3546:	0c f0       	brlt	.+2      	; 0x354a <getInputFromSpeed+0x2f6>
    3548:	29 c2       	rjmp	.+1106   	; 0x399c <getInputFromSpeed+0x748>
    354a:	80 91 68 09 	lds	r24, 0x0968
    354e:	90 91 69 09 	lds	r25, 0x0969
    3552:	82 17       	cp	r24, r18
    3554:	93 07       	cpc	r25, r19
    3556:	0c f0       	brlt	.+2      	; 0x355a <getInputFromSpeed+0x306>
    3558:	27 c2       	rjmp	.+1102   	; 0x39a8 <getInputFromSpeed+0x754>
    355a:	80 91 78 09 	lds	r24, 0x0978
    355e:	90 91 79 09 	lds	r25, 0x0979
    3562:	82 17       	cp	r24, r18
    3564:	93 07       	cpc	r25, r19
    3566:	0c f0       	brlt	.+2      	; 0x356a <getInputFromSpeed+0x316>
    3568:	1c c2       	rjmp	.+1080   	; 0x39a2 <getInputFromSpeed+0x74e>
    356a:	80 91 88 09 	lds	r24, 0x0988
    356e:	90 91 89 09 	lds	r25, 0x0989
    3572:	82 17       	cp	r24, r18
    3574:	93 07       	cpc	r25, r19
    3576:	0c f0       	brlt	.+2      	; 0x357a <getInputFromSpeed+0x326>
    3578:	1a c2       	rjmp	.+1076   	; 0x39ae <getInputFromSpeed+0x75a>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    357a:	b9 01       	movw	r22, r18
    357c:	88 27       	eor	r24, r24
    357e:	77 fd       	sbrc	r23, 7
    3580:	80 95       	com	r24
    3582:	98 2f       	mov	r25, r24
    3584:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3588:	7b 01       	movw	r14, r22
    358a:	8c 01       	movw	r16, r24
    358c:	60 91 86 09 	lds	r22, 0x0986
    3590:	70 91 87 09 	lds	r23, 0x0987
    3594:	88 27       	eor	r24, r24
    3596:	77 fd       	sbrc	r23, 7
    3598:	80 95       	com	r24
    359a:	98 2f       	mov	r25, r24
    359c:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    35a0:	9b 01       	movw	r18, r22
    35a2:	ac 01       	movw	r20, r24
    35a4:	c8 01       	movw	r24, r16
    35a6:	b7 01       	movw	r22, r14
    35a8:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    35ac:	7b 01       	movw	r14, r22
    35ae:	8c 01       	movw	r16, r24
    35b0:	60 91 88 09 	lds	r22, 0x0988
    35b4:	70 91 89 09 	lds	r23, 0x0989
    35b8:	d4 ce       	rjmp	.-600    	; 0x3362 <getInputFromSpeed+0x10e>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    35ba:	80 91 06 09 	lds	r24, 0x0906
    35be:	90 91 07 09 	lds	r25, 0x0907
    35c2:	fc 01       	movw	r30, r24
    35c4:	2e 9f       	mul	r18, r30
    35c6:	c0 01       	movw	r24, r0
    35c8:	2f 9f       	mul	r18, r31
    35ca:	90 0d       	add	r25, r0
    35cc:	3e 9f       	mul	r19, r30
    35ce:	90 0d       	add	r25, r0
    35d0:	11 24       	eor	r1, r1
    35d2:	0d cf       	rjmp	.-486    	; 0x33ee <getInputFromSpeed+0x19a>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    35d4:	60 91 0c 09 	lds	r22, 0x090C
    35d8:	70 91 0d 09 	lds	r23, 0x090D
    35dc:	62 17       	cp	r22, r18
    35de:	73 07       	cpc	r23, r19
    35e0:	0c f0       	brlt	.+2      	; 0x35e4 <getInputFromSpeed+0x390>
    35e2:	60 c0       	rjmp	.+192    	; 0x36a4 <getInputFromSpeed+0x450>
    35e4:	80 91 1c 09 	lds	r24, 0x091C
    35e8:	90 91 1d 09 	lds	r25, 0x091D
    35ec:	82 17       	cp	r24, r18
    35ee:	93 07       	cpc	r25, r19
    35f0:	0c f0       	brlt	.+2      	; 0x35f4 <getInputFromSpeed+0x3a0>
    35f2:	7e c0       	rjmp	.+252    	; 0x36f0 <getInputFromSpeed+0x49c>
    35f4:	80 91 2c 09 	lds	r24, 0x092C
    35f8:	90 91 2d 09 	lds	r25, 0x092D
    35fc:	82 17       	cp	r24, r18
    35fe:	93 07       	cpc	r25, r19
    3600:	0c f0       	brlt	.+2      	; 0x3604 <getInputFromSpeed+0x3b0>
    3602:	c6 c1       	rjmp	.+908    	; 0x3990 <getInputFromSpeed+0x73c>
    3604:	80 91 3c 09 	lds	r24, 0x093C
    3608:	90 91 3d 09 	lds	r25, 0x093D
    360c:	82 17       	cp	r24, r18
    360e:	93 07       	cpc	r25, r19
    3610:	0c f0       	brlt	.+2      	; 0x3614 <getInputFromSpeed+0x3c0>
    3612:	bb c1       	rjmp	.+886    	; 0x398a <getInputFromSpeed+0x736>
    3614:	80 91 4c 09 	lds	r24, 0x094C
    3618:	90 91 4d 09 	lds	r25, 0x094D
    361c:	82 17       	cp	r24, r18
    361e:	93 07       	cpc	r25, r19
    3620:	0c f0       	brlt	.+2      	; 0x3624 <getInputFromSpeed+0x3d0>
    3622:	b9 c1       	rjmp	.+882    	; 0x3996 <getInputFromSpeed+0x742>
    3624:	80 91 5c 09 	lds	r24, 0x095C
    3628:	90 91 5d 09 	lds	r25, 0x095D
    362c:	82 17       	cp	r24, r18
    362e:	93 07       	cpc	r25, r19
    3630:	0c f0       	brlt	.+2      	; 0x3634 <getInputFromSpeed+0x3e0>
    3632:	b4 c1       	rjmp	.+872    	; 0x399c <getInputFromSpeed+0x748>
    3634:	80 91 6c 09 	lds	r24, 0x096C
    3638:	90 91 6d 09 	lds	r25, 0x096D
    363c:	82 17       	cp	r24, r18
    363e:	93 07       	cpc	r25, r19
    3640:	0c f0       	brlt	.+2      	; 0x3644 <getInputFromSpeed+0x3f0>
    3642:	b2 c1       	rjmp	.+868    	; 0x39a8 <getInputFromSpeed+0x754>
    3644:	80 91 7c 09 	lds	r24, 0x097C
    3648:	90 91 7d 09 	lds	r25, 0x097D
    364c:	82 17       	cp	r24, r18
    364e:	93 07       	cpc	r25, r19
    3650:	0c f0       	brlt	.+2      	; 0x3654 <getInputFromSpeed+0x400>
    3652:	a7 c1       	rjmp	.+846    	; 0x39a2 <getInputFromSpeed+0x74e>
    3654:	80 91 8c 09 	lds	r24, 0x098C
    3658:	90 91 8d 09 	lds	r25, 0x098D
    365c:	82 17       	cp	r24, r18
    365e:	93 07       	cpc	r25, r19
    3660:	0c f0       	brlt	.+2      	; 0x3664 <getInputFromSpeed+0x410>
    3662:	a5 c1       	rjmp	.+842    	; 0x39ae <getInputFromSpeed+0x75a>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    3664:	b9 01       	movw	r22, r18
    3666:	88 27       	eor	r24, r24
    3668:	77 fd       	sbrc	r23, 7
    366a:	80 95       	com	r24
    366c:	98 2f       	mov	r25, r24
    366e:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3672:	7b 01       	movw	r14, r22
    3674:	8c 01       	movw	r16, r24
    3676:	60 91 8a 09 	lds	r22, 0x098A
    367a:	70 91 8b 09 	lds	r23, 0x098B
    367e:	88 27       	eor	r24, r24
    3680:	77 fd       	sbrc	r23, 7
    3682:	80 95       	com	r24
    3684:	98 2f       	mov	r25, r24
    3686:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    368a:	9b 01       	movw	r18, r22
    368c:	ac 01       	movw	r20, r24
    368e:	c8 01       	movw	r24, r16
    3690:	b7 01       	movw	r22, r14
    3692:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    3696:	7b 01       	movw	r14, r22
    3698:	8c 01       	movw	r16, r24
    369a:	60 91 8c 09 	lds	r22, 0x098C
    369e:	70 91 8d 09 	lds	r23, 0x098D
    36a2:	10 cf       	rjmp	.-480    	; 0x34c4 <getInputFromSpeed+0x270>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    36a4:	80 91 0a 09 	lds	r24, 0x090A
    36a8:	90 91 0b 09 	lds	r25, 0x090B
    36ac:	ac 01       	movw	r20, r24
    36ae:	24 9f       	mul	r18, r20
    36b0:	c0 01       	movw	r24, r0
    36b2:	25 9f       	mul	r18, r21
    36b4:	90 0d       	add	r25, r0
    36b6:	34 9f       	mul	r19, r20
    36b8:	90 0d       	add	r25, r0
    36ba:	11 24       	eor	r1, r1
    36bc:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__divmodhi4>
            temp = -temp;
    36c0:	22 27       	eor	r18, r18
    36c2:	33 27       	eor	r19, r19
    36c4:	26 1b       	sub	r18, r22
    36c6:	37 0b       	sbc	r19, r23
    36c8:	71 ce       	rjmp	.-798    	; 0x33ac <getInputFromSpeed+0x158>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
    36ca:	80 91 0e 09 	lds	r24, 0x090E
    36ce:	90 91 0f 09 	lds	r25, 0x090F
    36d2:	fc 01       	movw	r30, r24
    36d4:	2e 9f       	mul	r18, r30
    36d6:	c0 01       	movw	r24, r0
    36d8:	2f 9f       	mul	r18, r31
    36da:	90 0d       	add	r25, r0
    36dc:	3e 9f       	mul	r19, r30
    36de:	90 0d       	add	r25, r0
    36e0:	11 24       	eor	r1, r1
    36e2:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__divmodhi4>
            temp = -temp;
    36e6:	22 27       	eor	r18, r18
    36e8:	33 27       	eor	r19, r19
    36ea:	26 1b       	sub	r18, r22
    36ec:	37 0b       	sbc	r19, r23
    36ee:	5e ce       	rjmp	.-836    	; 0x33ac <getInputFromSpeed+0x158>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    36f0:	c1 e0       	ldi	r28, 0x01	; 1
    36f2:	d0 e0       	ldi	r29, 0x00	; 0
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    36f4:	c9 30       	cpi	r28, 0x09	; 9
    36f6:	d1 05       	cpc	r29, r1
    36f8:	09 f4       	brne	.+2      	; 0x36fc <getInputFromSpeed+0x4a8>
    36fa:	4b ce       	rjmp	.-874    	; 0x3392 <getInputFromSpeed+0x13e>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    36fc:	44 23       	and	r20, r20
    36fe:	09 f0       	breq	.+2      	; 0x3702 <getInputFromSpeed+0x4ae>
    3700:	59 c0       	rjmp	.+178    	; 0x37b4 <getInputFromSpeed+0x560>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    3702:	fe 01       	movw	r30, r28
    3704:	31 97       	sbiw	r30, 0x01	; 1
    3706:	ee 0f       	add	r30, r30
    3708:	ff 1f       	adc	r31, r31
    370a:	ee 0f       	add	r30, r30
    370c:	ff 1f       	adc	r31, r31
    370e:	ee 0f       	add	r30, r30
    3710:	ff 1f       	adc	r31, r31
    3712:	ee 0f       	add	r30, r30
    3714:	ff 1f       	adc	r31, r31
    3716:	df 01       	movw	r26, r30
    3718:	ac 5f       	subi	r26, 0xFC	; 252
    371a:	b6 4f       	sbci	r27, 0xF6	; 246
    371c:	cd 90       	ld	r12, X+
    371e:	dc 90       	ld	r13, X
    3720:	ee 5f       	subi	r30, 0xFE	; 254
    3722:	f6 4f       	sbci	r31, 0xF6	; 246
    3724:	a0 80       	ld	r10, Z
    3726:	b1 80       	ldd	r11, Z+1	; 0x01
    3728:	2c 19       	sub	r18, r12
    372a:	3d 09       	sbc	r19, r13
    372c:	b9 01       	movw	r22, r18
    372e:	88 27       	eor	r24, r24
    3730:	77 fd       	sbrc	r23, 7
    3732:	80 95       	com	r24
    3734:	98 2f       	mov	r25, r24
    3736:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    373a:	7b 01       	movw	r14, r22
    373c:	8c 01       	movw	r16, r24
    373e:	fe 01       	movw	r30, r28
    3740:	e2 95       	swap	r30
    3742:	f2 95       	swap	r31
    3744:	f0 7f       	andi	r31, 0xF0	; 240
    3746:	fe 27       	eor	r31, r30
    3748:	e0 7f       	andi	r30, 0xF0	; 240
    374a:	fe 27       	eor	r31, r30
    374c:	ee 5f       	subi	r30, 0xFE	; 254
    374e:	f6 4f       	sbci	r31, 0xF6	; 246
    3750:	60 81       	ld	r22, Z
    3752:	71 81       	ldd	r23, Z+1	; 0x01
    3754:	6a 19       	sub	r22, r10
    3756:	7b 09       	sbc	r23, r11
    3758:	88 27       	eor	r24, r24
    375a:	77 fd       	sbrc	r23, 7
    375c:	80 95       	com	r24
    375e:	98 2f       	mov	r25, r24
    3760:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3764:	9b 01       	movw	r18, r22
    3766:	ac 01       	movw	r20, r24
    3768:	c8 01       	movw	r24, r16
    376a:	b7 01       	movw	r22, r14
    376c:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    3770:	7b 01       	movw	r14, r22
    3772:	8c 01       	movw	r16, r24
    3774:	cc 0f       	add	r28, r28
    3776:	dd 1f       	adc	r29, r29
    3778:	cc 0f       	add	r28, r28
    377a:	dd 1f       	adc	r29, r29
    377c:	cc 0f       	add	r28, r28
    377e:	dd 1f       	adc	r29, r29
    3780:	cc 0f       	add	r28, r28
    3782:	dd 1f       	adc	r29, r29
    3784:	cc 5f       	subi	r28, 0xFC	; 252
    3786:	d6 4f       	sbci	r29, 0xF6	; 246
    3788:	68 81       	ld	r22, Y
    378a:	79 81       	ldd	r23, Y+1	; 0x01
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    378c:	6c 19       	sub	r22, r12
    378e:	7d 09       	sbc	r23, r13
    3790:	88 27       	eor	r24, r24
    3792:	77 fd       	sbrc	r23, 7
    3794:	80 95       	com	r24
    3796:	98 2f       	mov	r25, r24
    3798:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    379c:	9b 01       	movw	r18, r22
    379e:	ac 01       	movw	r20, r24
    37a0:	c8 01       	movw	r24, r16
    37a2:	b7 01       	movw	r22, r14
    37a4:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    37a8:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    37ac:	9b 01       	movw	r18, r22
    37ae:	2a 0d       	add	r18, r10
    37b0:	3b 1d       	adc	r19, r11
    37b2:	fc cd       	rjmp	.-1032   	; 0x33ac <getInputFromSpeed+0x158>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    37b4:	41 30       	cpi	r20, 0x01	; 1
    37b6:	09 f4       	brne	.+2      	; 0x37ba <getInputFromSpeed+0x566>
    37b8:	4e c0       	rjmp	.+156    	; 0x3856 <getInputFromSpeed+0x602>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    37ba:	42 30       	cpi	r20, 0x02	; 2
    37bc:	09 f4       	brne	.+2      	; 0x37c0 <getInputFromSpeed+0x56c>
    37be:	89 c0       	rjmp	.+274    	; 0x38d2 <getInputFromSpeed+0x67e>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    37c0:	43 30       	cpi	r20, 0x03	; 3
    37c2:	09 f0       	breq	.+2      	; 0x37c6 <getInputFromSpeed+0x572>
    37c4:	f1 cd       	rjmp	.-1054   	; 0x33a8 <getInputFromSpeed+0x154>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    37c6:	c2 95       	swap	r28
    37c8:	d2 95       	swap	r29
    37ca:	d0 7f       	andi	r29, 0xF0	; 240
    37cc:	dc 27       	eor	r29, r28
    37ce:	c0 7f       	andi	r28, 0xF0	; 240
    37d0:	dc 27       	eor	r29, r28
    37d2:	fe 01       	movw	r30, r28
    37d4:	ee 50       	subi	r30, 0x0E	; 14
    37d6:	f7 4f       	sbci	r31, 0xF7	; 247
    37d8:	a6 84       	ldd	r10, Z+14	; 0x0e
    37da:	b7 84       	ldd	r11, Z+15	; 0x0f
    37dc:	84 84       	ldd	r8, Z+12	; 0x0c
    37de:	95 84       	ldd	r9, Z+13	; 0x0d
    37e0:	2a 19       	sub	r18, r10
    37e2:	3b 09       	sbc	r19, r11
    37e4:	b9 01       	movw	r22, r18
    37e6:	88 27       	eor	r24, r24
    37e8:	77 fd       	sbrc	r23, 7
    37ea:	80 95       	com	r24
    37ec:	98 2f       	mov	r25, r24
    37ee:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    37f2:	6b 01       	movw	r12, r22
    37f4:	7c 01       	movw	r14, r24
    37f6:	8e 01       	movw	r16, r28
    37f8:	0e 5f       	subi	r16, 0xFE	; 254
    37fa:	16 4f       	sbci	r17, 0xF6	; 246
    37fc:	f8 01       	movw	r30, r16
    37fe:	64 85       	ldd	r22, Z+12	; 0x0c
    3800:	75 85       	ldd	r23, Z+13	; 0x0d
    3802:	68 19       	sub	r22, r8
    3804:	79 09       	sbc	r23, r9
    3806:	88 27       	eor	r24, r24
    3808:	77 fd       	sbrc	r23, 7
    380a:	80 95       	com	r24
    380c:	98 2f       	mov	r25, r24
    380e:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3812:	9b 01       	movw	r18, r22
    3814:	ac 01       	movw	r20, r24
    3816:	c7 01       	movw	r24, r14
    3818:	b6 01       	movw	r22, r12
    381a:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    381e:	6b 01       	movw	r12, r22
    3820:	7c 01       	movw	r14, r24
    3822:	f8 01       	movw	r30, r16
    3824:	66 85       	ldd	r22, Z+14	; 0x0e
    3826:	77 85       	ldd	r23, Z+15	; 0x0f
    3828:	6a 19       	sub	r22, r10
    382a:	7b 09       	sbc	r23, r11
    382c:	88 27       	eor	r24, r24
    382e:	77 fd       	sbrc	r23, 7
    3830:	80 95       	com	r24
    3832:	98 2f       	mov	r25, r24
    3834:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3838:	9b 01       	movw	r18, r22
    383a:	ac 01       	movw	r20, r24
    383c:	c7 01       	movw	r24, r14
    383e:	b6 01       	movw	r22, r12
    3840:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    3844:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    3848:	68 0d       	add	r22, r8
    384a:	79 1d       	adc	r23, r9
            temp = -temp;
    384c:	22 27       	eor	r18, r18
    384e:	33 27       	eor	r19, r19
    3850:	26 1b       	sub	r18, r22
    3852:	37 0b       	sbc	r19, r23
    3854:	ab cd       	rjmp	.-1194   	; 0x33ac <getInputFromSpeed+0x158>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    3856:	fe 01       	movw	r30, r28
    3858:	31 97       	sbiw	r30, 0x01	; 1
    385a:	e2 95       	swap	r30
    385c:	f2 95       	swap	r31
    385e:	f0 7f       	andi	r31, 0xF0	; 240
    3860:	fe 27       	eor	r31, r30
    3862:	e0 7f       	andi	r30, 0xF0	; 240
    3864:	fe 27       	eor	r31, r30
    3866:	df 01       	movw	r26, r30
    3868:	ae 5f       	subi	r26, 0xFE	; 254
    386a:	b6 4f       	sbci	r27, 0xF6	; 246
    386c:	16 96       	adiw	r26, 0x06	; 6
    386e:	cd 90       	ld	r12, X+
    3870:	dc 90       	ld	r13, X
    3872:	17 97       	sbiw	r26, 0x07	; 7
    3874:	ea 5f       	subi	r30, 0xFA	; 250
    3876:	f6 4f       	sbci	r31, 0xF6	; 246
    3878:	a0 80       	ld	r10, Z
    387a:	b1 80       	ldd	r11, Z+1	; 0x01
    387c:	2c 19       	sub	r18, r12
    387e:	3d 09       	sbc	r19, r13
    3880:	b9 01       	movw	r22, r18
    3882:	88 27       	eor	r24, r24
    3884:	77 fd       	sbrc	r23, 7
    3886:	80 95       	com	r24
    3888:	98 2f       	mov	r25, r24
    388a:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    388e:	7b 01       	movw	r14, r22
    3890:	8c 01       	movw	r16, r24
    3892:	c2 95       	swap	r28
    3894:	d2 95       	swap	r29
    3896:	d0 7f       	andi	r29, 0xF0	; 240
    3898:	dc 27       	eor	r29, r28
    389a:	c0 7f       	andi	r28, 0xF0	; 240
    389c:	dc 27       	eor	r29, r28
    389e:	fe 01       	movw	r30, r28
    38a0:	ea 5f       	subi	r30, 0xFA	; 250
    38a2:	f6 4f       	sbci	r31, 0xF6	; 246
    38a4:	60 81       	ld	r22, Z
    38a6:	71 81       	ldd	r23, Z+1	; 0x01
    38a8:	6a 19       	sub	r22, r10
    38aa:	7b 09       	sbc	r23, r11
    38ac:	88 27       	eor	r24, r24
    38ae:	77 fd       	sbrc	r23, 7
    38b0:	80 95       	com	r24
    38b2:	98 2f       	mov	r25, r24
    38b4:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    38b8:	9b 01       	movw	r18, r22
    38ba:	ac 01       	movw	r20, r24
    38bc:	c8 01       	movw	r24, r16
    38be:	b7 01       	movw	r22, r14
    38c0:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    38c4:	7b 01       	movw	r14, r22
    38c6:	8c 01       	movw	r16, r24
    38c8:	ce 5f       	subi	r28, 0xFE	; 254
    38ca:	d6 4f       	sbci	r29, 0xF6	; 246
    38cc:	6e 81       	ldd	r22, Y+6	; 0x06
    38ce:	7f 81       	ldd	r23, Y+7	; 0x07
    38d0:	5d cf       	rjmp	.-326    	; 0x378c <getInputFromSpeed+0x538>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    38d2:	de 01       	movw	r26, r28
    38d4:	11 97       	sbiw	r26, 0x01	; 1
    38d6:	fd 01       	movw	r30, r26
    38d8:	e2 95       	swap	r30
    38da:	f2 95       	swap	r31
    38dc:	f0 7f       	andi	r31, 0xF0	; 240
    38de:	fe 27       	eor	r31, r30
    38e0:	e0 7f       	andi	r30, 0xF0	; 240
    38e2:	fe 27       	eor	r31, r30
    38e4:	ee 5f       	subi	r30, 0xFE	; 254
    38e6:	f6 4f       	sbci	r31, 0xF6	; 246
    38e8:	c2 84       	ldd	r12, Z+10	; 0x0a
    38ea:	d3 84       	ldd	r13, Z+11	; 0x0b
    38ec:	aa 0f       	add	r26, r26
    38ee:	bb 1f       	adc	r27, r27
    38f0:	aa 0f       	add	r26, r26
    38f2:	bb 1f       	adc	r27, r27
    38f4:	aa 0f       	add	r26, r26
    38f6:	bb 1f       	adc	r27, r27
    38f8:	aa 0f       	add	r26, r26
    38fa:	bb 1f       	adc	r27, r27
    38fc:	a6 5f       	subi	r26, 0xF6	; 246
    38fe:	b6 4f       	sbci	r27, 0xF6	; 246
    3900:	ad 90       	ld	r10, X+
    3902:	bc 90       	ld	r11, X
    3904:	2c 19       	sub	r18, r12
    3906:	3d 09       	sbc	r19, r13
    3908:	b9 01       	movw	r22, r18
    390a:	88 27       	eor	r24, r24
    390c:	77 fd       	sbrc	r23, 7
    390e:	80 95       	com	r24
    3910:	98 2f       	mov	r25, r24
    3912:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3916:	7b 01       	movw	r14, r22
    3918:	8c 01       	movw	r16, r24
    391a:	cc 0f       	add	r28, r28
    391c:	dd 1f       	adc	r29, r29
    391e:	cc 0f       	add	r28, r28
    3920:	dd 1f       	adc	r29, r29
    3922:	cc 0f       	add	r28, r28
    3924:	dd 1f       	adc	r29, r29
    3926:	cc 0f       	add	r28, r28
    3928:	dd 1f       	adc	r29, r29
    392a:	fe 01       	movw	r30, r28
    392c:	e6 5f       	subi	r30, 0xF6	; 246
    392e:	f6 4f       	sbci	r31, 0xF6	; 246
    3930:	60 81       	ld	r22, Z
    3932:	71 81       	ldd	r23, Z+1	; 0x01
    3934:	6a 19       	sub	r22, r10
    3936:	7b 09       	sbc	r23, r11
    3938:	88 27       	eor	r24, r24
    393a:	77 fd       	sbrc	r23, 7
    393c:	80 95       	com	r24
    393e:	98 2f       	mov	r25, r24
    3940:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3944:	9b 01       	movw	r18, r22
    3946:	ac 01       	movw	r20, r24
    3948:	c8 01       	movw	r24, r16
    394a:	b7 01       	movw	r22, r14
    394c:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    3950:	7b 01       	movw	r14, r22
    3952:	8c 01       	movw	r16, r24
    3954:	ce 5f       	subi	r28, 0xFE	; 254
    3956:	d6 4f       	sbci	r29, 0xF6	; 246
    3958:	6a 85       	ldd	r22, Y+10	; 0x0a
    395a:	7b 85       	ldd	r23, Y+11	; 0x0b
    395c:	6c 19       	sub	r22, r12
    395e:	7d 09       	sbc	r23, r13
    3960:	88 27       	eor	r24, r24
    3962:	77 fd       	sbrc	r23, 7
    3964:	80 95       	com	r24
    3966:	98 2f       	mov	r25, r24
    3968:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    396c:	9b 01       	movw	r18, r22
    396e:	ac 01       	movw	r20, r24
    3970:	c8 01       	movw	r24, r16
    3972:	b7 01       	movw	r22, r14
    3974:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    3978:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    397c:	6a 0d       	add	r22, r10
    397e:	7b 1d       	adc	r23, r11
            temp = -temp;
    3980:	22 27       	eor	r18, r18
    3982:	33 27       	eor	r19, r19
    3984:	26 1b       	sub	r18, r22
    3986:	37 0b       	sbc	r19, r23
    3988:	11 cd       	rjmp	.-1502   	; 0x33ac <getInputFromSpeed+0x158>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    398a:	c3 e0       	ldi	r28, 0x03	; 3
    398c:	d0 e0       	ldi	r29, 0x00	; 0
    398e:	b2 ce       	rjmp	.-668    	; 0x36f4 <getInputFromSpeed+0x4a0>
    3990:	c2 e0       	ldi	r28, 0x02	; 2
    3992:	d0 e0       	ldi	r29, 0x00	; 0
    3994:	af ce       	rjmp	.-674    	; 0x36f4 <getInputFromSpeed+0x4a0>
    3996:	c4 e0       	ldi	r28, 0x04	; 4
    3998:	d0 e0       	ldi	r29, 0x00	; 0
    399a:	ac ce       	rjmp	.-680    	; 0x36f4 <getInputFromSpeed+0x4a0>
    399c:	c5 e0       	ldi	r28, 0x05	; 5
    399e:	d0 e0       	ldi	r29, 0x00	; 0
    39a0:	a9 ce       	rjmp	.-686    	; 0x36f4 <getInputFromSpeed+0x4a0>
    39a2:	c7 e0       	ldi	r28, 0x07	; 7
    39a4:	d0 e0       	ldi	r29, 0x00	; 0
    39a6:	a6 ce       	rjmp	.-692    	; 0x36f4 <getInputFromSpeed+0x4a0>
    39a8:	c6 e0       	ldi	r28, 0x06	; 6
    39aa:	d0 e0       	ldi	r29, 0x00	; 0
    39ac:	a3 ce       	rjmp	.-698    	; 0x36f4 <getInputFromSpeed+0x4a0>
    39ae:	c8 e0       	ldi	r28, 0x08	; 8
    39b0:	d0 e0       	ldi	r29, 0x00	; 0
    39b2:	a0 ce       	rjmp	.-704    	; 0x36f4 <getInputFromSpeed+0x4a0>

000039b4 <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    39b4:	8f 92       	push	r8
    39b6:	9f 92       	push	r9
    39b8:	af 92       	push	r10
    39ba:	bf 92       	push	r11
    39bc:	cf 92       	push	r12
    39be:	df 92       	push	r13
    39c0:	ef 92       	push	r14
    39c2:	ff 92       	push	r15
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    39cc:	c0 91 0f 03 	lds	r28, 0x030F
    39d0:	d0 91 10 03 	lds	r29, 0x0310
    39d4:	80 91 11 03 	lds	r24, 0x0311
    39d8:	90 91 12 03 	lds	r25, 0x0312
    39dc:	97 fd       	sbrc	r25, 7
    39de:	ea c0       	rjmp	.+468    	; 0x3bb4 <getRightSpeedFromInput+0x200>
    39e0:	60 91 06 09 	lds	r22, 0x0906
    39e4:	70 91 07 09 	lds	r23, 0x0907
    39e8:	6c 17       	cp	r22, r28
    39ea:	7d 07       	cpc	r23, r29
    39ec:	0c f0       	brlt	.+2      	; 0x39f0 <getRightSpeedFromInput+0x3c>
    39ee:	67 c1       	rjmp	.+718    	; 0x3cbe <getRightSpeedFromInput+0x30a>
    39f0:	88 24       	eor	r8, r8
    39f2:	8a 94       	dec	r8
    39f4:	98 2c       	mov	r9, r8
    39f6:	80 91 16 09 	lds	r24, 0x0916
    39fa:	90 91 17 09 	lds	r25, 0x0917
    39fe:	8c 17       	cp	r24, r28
    3a00:	9d 07       	cpc	r25, r29
    3a02:	4c f0       	brlt	.+18     	; 0x3a16 <getRightSpeedFromInput+0x62>
    3a04:	80 e0       	ldi	r24, 0x00	; 0
    3a06:	9f ef       	ldi	r25, 0xFF	; 255
    3a08:	89 16       	cp	r8, r25
    3a0a:	9f ef       	ldi	r25, 0xFF	; 255
    3a0c:	99 06       	cpc	r9, r25
    3a0e:	09 f4       	brne	.+2      	; 0x3a12 <getRightSpeedFromInput+0x5e>
    3a10:	75 c1       	rjmp	.+746    	; 0x3cfc <getRightSpeedFromInput+0x348>
    3a12:	88 2e       	mov	r8, r24
    3a14:	99 24       	eor	r9, r9
    3a16:	80 91 26 09 	lds	r24, 0x0926
    3a1a:	90 91 27 09 	lds	r25, 0x0927
    3a1e:	8c 17       	cp	r24, r28
    3a20:	9d 07       	cpc	r25, r29
    3a22:	34 f0       	brlt	.+12     	; 0x3a30 <getRightSpeedFromInput+0x7c>
    3a24:	ef ef       	ldi	r30, 0xFF	; 255
    3a26:	8e 16       	cp	r8, r30
    3a28:	ef ef       	ldi	r30, 0xFF	; 255
    3a2a:	9e 06       	cpc	r9, r30
    3a2c:	09 f4       	brne	.+2      	; 0x3a30 <getRightSpeedFromInput+0x7c>
    3a2e:	62 c1       	rjmp	.+708    	; 0x3cf4 <getRightSpeedFromInput+0x340>
    3a30:	80 91 36 09 	lds	r24, 0x0936
    3a34:	90 91 37 09 	lds	r25, 0x0937
    3a38:	8c 17       	cp	r24, r28
    3a3a:	9d 07       	cpc	r25, r29
    3a3c:	34 f0       	brlt	.+12     	; 0x3a4a <getRightSpeedFromInput+0x96>
    3a3e:	ff ef       	ldi	r31, 0xFF	; 255
    3a40:	8f 16       	cp	r8, r31
    3a42:	ff ef       	ldi	r31, 0xFF	; 255
    3a44:	9f 06       	cpc	r9, r31
    3a46:	09 f4       	brne	.+2      	; 0x3a4a <getRightSpeedFromInput+0x96>
    3a48:	51 c1       	rjmp	.+674    	; 0x3cec <getRightSpeedFromInput+0x338>
    3a4a:	80 91 46 09 	lds	r24, 0x0946
    3a4e:	90 91 47 09 	lds	r25, 0x0947
    3a52:	8c 17       	cp	r24, r28
    3a54:	9d 07       	cpc	r25, r29
    3a56:	34 f0       	brlt	.+12     	; 0x3a64 <getRightSpeedFromInput+0xb0>
    3a58:	2f ef       	ldi	r18, 0xFF	; 255
    3a5a:	82 16       	cp	r8, r18
    3a5c:	2f ef       	ldi	r18, 0xFF	; 255
    3a5e:	92 06       	cpc	r9, r18
    3a60:	09 f4       	brne	.+2      	; 0x3a64 <getRightSpeedFromInput+0xb0>
    3a62:	40 c1       	rjmp	.+640    	; 0x3ce4 <getRightSpeedFromInput+0x330>
    3a64:	80 91 56 09 	lds	r24, 0x0956
    3a68:	90 91 57 09 	lds	r25, 0x0957
    3a6c:	8c 17       	cp	r24, r28
    3a6e:	9d 07       	cpc	r25, r29
    3a70:	34 f0       	brlt	.+12     	; 0x3a7e <getRightSpeedFromInput+0xca>
    3a72:	3f ef       	ldi	r19, 0xFF	; 255
    3a74:	83 16       	cp	r8, r19
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	93 06       	cpc	r9, r19
    3a7a:	09 f4       	brne	.+2      	; 0x3a7e <getRightSpeedFromInput+0xca>
    3a7c:	2f c1       	rjmp	.+606    	; 0x3cdc <getRightSpeedFromInput+0x328>
    3a7e:	80 91 66 09 	lds	r24, 0x0966
    3a82:	90 91 67 09 	lds	r25, 0x0967
    3a86:	8c 17       	cp	r24, r28
    3a88:	9d 07       	cpc	r25, r29
    3a8a:	34 f0       	brlt	.+12     	; 0x3a98 <getRightSpeedFromInput+0xe4>
    3a8c:	8f ef       	ldi	r24, 0xFF	; 255
    3a8e:	88 16       	cp	r8, r24
    3a90:	8f ef       	ldi	r24, 0xFF	; 255
    3a92:	98 06       	cpc	r9, r24
    3a94:	09 f4       	brne	.+2      	; 0x3a98 <getRightSpeedFromInput+0xe4>
    3a96:	1e c1       	rjmp	.+572    	; 0x3cd4 <getRightSpeedFromInput+0x320>
    3a98:	80 91 76 09 	lds	r24, 0x0976
    3a9c:	90 91 77 09 	lds	r25, 0x0977
    3aa0:	8c 17       	cp	r24, r28
    3aa2:	9d 07       	cpc	r25, r29
    3aa4:	34 f0       	brlt	.+12     	; 0x3ab2 <getRightSpeedFromInput+0xfe>
    3aa6:	9f ef       	ldi	r25, 0xFF	; 255
    3aa8:	89 16       	cp	r8, r25
    3aaa:	9f ef       	ldi	r25, 0xFF	; 255
    3aac:	99 06       	cpc	r9, r25
    3aae:	09 f4       	brne	.+2      	; 0x3ab2 <getRightSpeedFromInput+0xfe>
    3ab0:	0d c1       	rjmp	.+538    	; 0x3ccc <getRightSpeedFromInput+0x318>
    3ab2:	c0 90 86 09 	lds	r12, 0x0986
    3ab6:	d0 90 87 09 	lds	r13, 0x0987
    3aba:	cc 16       	cp	r12, r28
    3abc:	dd 06       	cpc	r13, r29
    3abe:	34 f0       	brlt	.+12     	; 0x3acc <getRightSpeedFromInput+0x118>
    3ac0:	ef ef       	ldi	r30, 0xFF	; 255
    3ac2:	8e 16       	cp	r8, r30
    3ac4:	ef ef       	ldi	r30, 0xFF	; 255
    3ac6:	9e 06       	cpc	r9, r30
    3ac8:	09 f4       	brne	.+2      	; 0x3acc <getRightSpeedFromInput+0x118>
    3aca:	fc c0       	rjmp	.+504    	; 0x3cc4 <getRightSpeedFromInput+0x310>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    3acc:	20 97       	sbiw	r28, 0x00	; 0
    3ace:	09 f4       	brne	.+2      	; 0x3ad2 <getRightSpeedFromInput+0x11e>
    3ad0:	60 c0       	rjmp	.+192    	; 0x3b92 <getRightSpeedFromInput+0x1de>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    3ad2:	81 14       	cp	r8, r1
    3ad4:	91 04       	cpc	r9, r1
    3ad6:	09 f4       	brne	.+2      	; 0x3ada <getRightSpeedFromInput+0x126>
    3ad8:	42 c1       	rjmp	.+644    	; 0x3d5e <getRightSpeedFromInput+0x3aa>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    3ada:	3f ef       	ldi	r19, 0xFF	; 255
    3adc:	83 16       	cp	r8, r19
    3ade:	3f ef       	ldi	r19, 0xFF	; 255
    3ae0:	93 06       	cpc	r9, r19
    3ae2:	09 f4       	brne	.+2      	; 0x3ae6 <getRightSpeedFromInput+0x132>
    3ae4:	0d c1       	rjmp	.+538    	; 0x3d00 <getRightSpeedFromInput+0x34c>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    3ae6:	f4 01       	movw	r30, r8
    3ae8:	31 97       	sbiw	r30, 0x01	; 1
    3aea:	e2 95       	swap	r30
    3aec:	f2 95       	swap	r31
    3aee:	f0 7f       	andi	r31, 0xF0	; 240
    3af0:	fe 27       	eor	r31, r30
    3af2:	e0 7f       	andi	r30, 0xF0	; 240
    3af4:	fe 27       	eor	r31, r30
    3af6:	df 01       	movw	r26, r30
    3af8:	aa 5f       	subi	r26, 0xFA	; 250
    3afa:	b6 4f       	sbci	r27, 0xF6	; 246
    3afc:	cd 90       	ld	r12, X+
    3afe:	dc 90       	ld	r13, X
    3b00:	ee 5f       	subi	r30, 0xFE	; 254
    3b02:	f6 4f       	sbci	r31, 0xF6	; 246
    3b04:	a6 80       	ldd	r10, Z+6	; 0x06
    3b06:	b7 80       	ldd	r11, Z+7	; 0x07
    3b08:	cc 19       	sub	r28, r12
    3b0a:	dd 09       	sbc	r29, r13
    3b0c:	be 01       	movw	r22, r28
    3b0e:	88 27       	eor	r24, r24
    3b10:	77 fd       	sbrc	r23, 7
    3b12:	80 95       	com	r24
    3b14:	98 2f       	mov	r25, r24
    3b16:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3b1a:	7b 01       	movw	r14, r22
    3b1c:	8c 01       	movw	r16, r24
    3b1e:	82 94       	swap	r8
    3b20:	92 94       	swap	r9
    3b22:	b0 ef       	ldi	r27, 0xF0	; 240
    3b24:	9b 22       	and	r9, r27
    3b26:	98 24       	eor	r9, r8
    3b28:	8b 22       	and	r8, r27
    3b2a:	98 24       	eor	r9, r8
    3b2c:	f4 01       	movw	r30, r8
    3b2e:	ee 5f       	subi	r30, 0xFE	; 254
    3b30:	f6 4f       	sbci	r31, 0xF6	; 246
    3b32:	66 81       	ldd	r22, Z+6	; 0x06
    3b34:	77 81       	ldd	r23, Z+7	; 0x07
    3b36:	6a 19       	sub	r22, r10
    3b38:	7b 09       	sbc	r23, r11
    3b3a:	88 27       	eor	r24, r24
    3b3c:	77 fd       	sbrc	r23, 7
    3b3e:	80 95       	com	r24
    3b40:	98 2f       	mov	r25, r24
    3b42:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3b46:	9b 01       	movw	r18, r22
    3b48:	ac 01       	movw	r20, r24
    3b4a:	c8 01       	movw	r24, r16
    3b4c:	b7 01       	movw	r22, r14
    3b4e:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    3b52:	7b 01       	movw	r14, r22
    3b54:	8c 01       	movw	r16, r24
    3b56:	86 e0       	ldi	r24, 0x06	; 6
    3b58:	99 e0       	ldi	r25, 0x09	; 9
    3b5a:	88 0e       	add	r8, r24
    3b5c:	99 1e       	adc	r9, r25
    3b5e:	f4 01       	movw	r30, r8
    3b60:	60 81       	ld	r22, Z
    3b62:	71 81       	ldd	r23, Z+1	; 0x01
    3b64:	6c 19       	sub	r22, r12
    3b66:	7d 09       	sbc	r23, r13
    3b68:	88 27       	eor	r24, r24
    3b6a:	77 fd       	sbrc	r23, 7
    3b6c:	80 95       	com	r24
    3b6e:	98 2f       	mov	r25, r24
    3b70:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3b74:	9b 01       	movw	r18, r22
    3b76:	ac 01       	movw	r20, r24
    3b78:	c8 01       	movw	r24, r16
    3b7a:	b7 01       	movw	r22, r14
    3b7c:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    3b80:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    3b84:	6a 0d       	add	r22, r10
    3b86:	7b 1d       	adc	r23, r11
    3b88:	70 93 e3 04 	sts	0x04E3, r23
    3b8c:	60 93 e2 04 	sts	0x04E2, r22
    3b90:	04 c0       	rjmp	.+8      	; 0x3b9a <getRightSpeedFromInput+0x1e6>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    3b92:	10 92 e3 04 	sts	0x04E3, r1
    3b96:	10 92 e2 04 	sts	0x04E2, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	1f 91       	pop	r17
    3ba0:	0f 91       	pop	r16
    3ba2:	ff 90       	pop	r15
    3ba4:	ef 90       	pop	r14
    3ba6:	df 90       	pop	r13
    3ba8:	cf 90       	pop	r12
    3baa:	bf 90       	pop	r11
    3bac:	af 90       	pop	r10
    3bae:	9f 90       	pop	r9
    3bb0:	8f 90       	pop	r8
    3bb2:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    3bb4:	60 91 0e 09 	lds	r22, 0x090E
    3bb8:	70 91 0f 09 	lds	r23, 0x090F
    3bbc:	6c 17       	cp	r22, r28
    3bbe:	7d 07       	cpc	r23, r29
    3bc0:	0c f0       	brlt	.+2      	; 0x3bc4 <getRightSpeedFromInput+0x210>
    3bc2:	2b c1       	rjmp	.+598    	; 0x3e1a <getRightSpeedFromInput+0x466>
    3bc4:	0f ef       	ldi	r16, 0xFF	; 255
    3bc6:	1f ef       	ldi	r17, 0xFF	; 255
    3bc8:	80 91 1e 09 	lds	r24, 0x091E
    3bcc:	90 91 1f 09 	lds	r25, 0x091F
    3bd0:	8c 17       	cp	r24, r28
    3bd2:	9d 07       	cpc	r25, r29
    3bd4:	2c f0       	brlt	.+10     	; 0x3be0 <getRightSpeedFromInput+0x22c>
    3bd6:	2f ef       	ldi	r18, 0xFF	; 255
    3bd8:	0f 3f       	cpi	r16, 0xFF	; 255
    3bda:	12 07       	cpc	r17, r18
    3bdc:	09 f4       	brne	.+2      	; 0x3be0 <getRightSpeedFromInput+0x22c>
    3bde:	20 c1       	rjmp	.+576    	; 0x3e20 <getRightSpeedFromInput+0x46c>
    3be0:	80 91 2e 09 	lds	r24, 0x092E
    3be4:	90 91 2f 09 	lds	r25, 0x092F
    3be8:	8c 17       	cp	r24, r28
    3bea:	9d 07       	cpc	r25, r29
    3bec:	2c f0       	brlt	.+10     	; 0x3bf8 <getRightSpeedFromInput+0x244>
    3bee:	3f ef       	ldi	r19, 0xFF	; 255
    3bf0:	0f 3f       	cpi	r16, 0xFF	; 255
    3bf2:	13 07       	cpc	r17, r19
    3bf4:	09 f4       	brne	.+2      	; 0x3bf8 <getRightSpeedFromInput+0x244>
    3bf6:	26 c1       	rjmp	.+588    	; 0x3e44 <getRightSpeedFromInput+0x490>
    3bf8:	80 91 3e 09 	lds	r24, 0x093E
    3bfc:	90 91 3f 09 	lds	r25, 0x093F
    3c00:	8c 17       	cp	r24, r28
    3c02:	9d 07       	cpc	r25, r29
    3c04:	2c f0       	brlt	.+10     	; 0x3c10 <getRightSpeedFromInput+0x25c>
    3c06:	8f ef       	ldi	r24, 0xFF	; 255
    3c08:	0f 3f       	cpi	r16, 0xFF	; 255
    3c0a:	18 07       	cpc	r17, r24
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <getRightSpeedFromInput+0x25c>
    3c0e:	17 c1       	rjmp	.+558    	; 0x3e3e <getRightSpeedFromInput+0x48a>
    3c10:	80 91 4e 09 	lds	r24, 0x094E
    3c14:	90 91 4f 09 	lds	r25, 0x094F
    3c18:	8c 17       	cp	r24, r28
    3c1a:	9d 07       	cpc	r25, r29
    3c1c:	2c f0       	brlt	.+10     	; 0x3c28 <getRightSpeedFromInput+0x274>
    3c1e:	9f ef       	ldi	r25, 0xFF	; 255
    3c20:	0f 3f       	cpi	r16, 0xFF	; 255
    3c22:	19 07       	cpc	r17, r25
    3c24:	09 f4       	brne	.+2      	; 0x3c28 <getRightSpeedFromInput+0x274>
    3c26:	08 c1       	rjmp	.+528    	; 0x3e38 <getRightSpeedFromInput+0x484>
    3c28:	80 91 5e 09 	lds	r24, 0x095E
    3c2c:	90 91 5f 09 	lds	r25, 0x095F
    3c30:	8c 17       	cp	r24, r28
    3c32:	9d 07       	cpc	r25, r29
    3c34:	2c f0       	brlt	.+10     	; 0x3c40 <getRightSpeedFromInput+0x28c>
    3c36:	ef ef       	ldi	r30, 0xFF	; 255
    3c38:	0f 3f       	cpi	r16, 0xFF	; 255
    3c3a:	1e 07       	cpc	r17, r30
    3c3c:	09 f4       	brne	.+2      	; 0x3c40 <getRightSpeedFromInput+0x28c>
    3c3e:	f9 c0       	rjmp	.+498    	; 0x3e32 <getRightSpeedFromInput+0x47e>
    3c40:	80 91 6e 09 	lds	r24, 0x096E
    3c44:	90 91 6f 09 	lds	r25, 0x096F
    3c48:	8c 17       	cp	r24, r28
    3c4a:	9d 07       	cpc	r25, r29
    3c4c:	2c f0       	brlt	.+10     	; 0x3c58 <getRightSpeedFromInput+0x2a4>
    3c4e:	ff ef       	ldi	r31, 0xFF	; 255
    3c50:	0f 3f       	cpi	r16, 0xFF	; 255
    3c52:	1f 07       	cpc	r17, r31
    3c54:	09 f4       	brne	.+2      	; 0x3c58 <getRightSpeedFromInput+0x2a4>
    3c56:	ea c0       	rjmp	.+468    	; 0x3e2c <getRightSpeedFromInput+0x478>
    3c58:	80 91 7e 09 	lds	r24, 0x097E
    3c5c:	90 91 7f 09 	lds	r25, 0x097F
    3c60:	8c 17       	cp	r24, r28
    3c62:	9d 07       	cpc	r25, r29
    3c64:	2c f0       	brlt	.+10     	; 0x3c70 <getRightSpeedFromInput+0x2bc>
    3c66:	2f ef       	ldi	r18, 0xFF	; 255
    3c68:	0f 3f       	cpi	r16, 0xFF	; 255
    3c6a:	12 07       	cpc	r17, r18
    3c6c:	09 f4       	brne	.+2      	; 0x3c70 <getRightSpeedFromInput+0x2bc>
    3c6e:	db c0       	rjmp	.+438    	; 0x3e26 <getRightSpeedFromInput+0x472>
    3c70:	c0 90 8e 09 	lds	r12, 0x098E
    3c74:	d0 90 8f 09 	lds	r13, 0x098F
    3c78:	cc 16       	cp	r12, r28
    3c7a:	dd 06       	cpc	r13, r29
    3c7c:	2c f0       	brlt	.+10     	; 0x3c88 <getRightSpeedFromInput+0x2d4>
    3c7e:	3f ef       	ldi	r19, 0xFF	; 255
    3c80:	0f 3f       	cpi	r16, 0xFF	; 255
    3c82:	13 07       	cpc	r17, r19
    3c84:	09 f4       	brne	.+2      	; 0x3c88 <getRightSpeedFromInput+0x2d4>
    3c86:	7e c0       	rjmp	.+252    	; 0x3d84 <getRightSpeedFromInput+0x3d0>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    3c88:	01 15       	cp	r16, r1
    3c8a:	11 05       	cpc	r17, r1
    3c8c:	09 f0       	breq	.+2      	; 0x3c90 <getRightSpeedFromInput+0x2dc>
    3c8e:	7c c0       	rjmp	.+248    	; 0x3d88 <getRightSpeedFromInput+0x3d4>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    3c90:	80 91 10 09 	lds	r24, 0x0910
    3c94:	90 91 11 09 	lds	r25, 0x0911
    3c98:	9c 01       	movw	r18, r24
    3c9a:	c2 9f       	mul	r28, r18
    3c9c:	c0 01       	movw	r24, r0
    3c9e:	c3 9f       	mul	r28, r19
    3ca0:	90 0d       	add	r25, r0
    3ca2:	d2 9f       	mul	r29, r18
    3ca4:	90 0d       	add	r25, r0
    3ca6:	11 24       	eor	r1, r1
    3ca8:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__divmodhi4>
    3cac:	cb 01       	movw	r24, r22
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    3cae:	90 95       	com	r25
    3cb0:	81 95       	neg	r24
    3cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb4:	90 93 e3 04 	sts	0x04E3, r25
    3cb8:	80 93 e2 04 	sts	0x04E2, r24
    3cbc:	6e cf       	rjmp	.-292    	; 0x3b9a <getRightSpeedFromInput+0x1e6>

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    3cbe:	88 24       	eor	r8, r8
    3cc0:	99 24       	eor	r9, r9
    3cc2:	99 ce       	rjmp	.-718    	; 0x39f6 <getRightSpeedFromInput+0x42>
    3cc4:	88 e0       	ldi	r24, 0x08	; 8
    3cc6:	88 2e       	mov	r8, r24
    3cc8:	91 2c       	mov	r9, r1
    3cca:	00 cf       	rjmp	.-512    	; 0x3acc <getRightSpeedFromInput+0x118>
    3ccc:	97 e0       	ldi	r25, 0x07	; 7
    3cce:	89 2e       	mov	r8, r25
    3cd0:	91 2c       	mov	r9, r1
    3cd2:	ef ce       	rjmp	.-546    	; 0x3ab2 <getRightSpeedFromInput+0xfe>
    3cd4:	26 e0       	ldi	r18, 0x06	; 6
    3cd6:	82 2e       	mov	r8, r18
    3cd8:	91 2c       	mov	r9, r1
    3cda:	de ce       	rjmp	.-580    	; 0x3a98 <getRightSpeedFromInput+0xe4>
    3cdc:	35 e0       	ldi	r19, 0x05	; 5
    3cde:	83 2e       	mov	r8, r19
    3ce0:	91 2c       	mov	r9, r1
    3ce2:	cd ce       	rjmp	.-614    	; 0x3a7e <getRightSpeedFromInput+0xca>
    3ce4:	44 e0       	ldi	r20, 0x04	; 4
    3ce6:	84 2e       	mov	r8, r20
    3ce8:	91 2c       	mov	r9, r1
    3cea:	bc ce       	rjmp	.-648    	; 0x3a64 <getRightSpeedFromInput+0xb0>
    3cec:	53 e0       	ldi	r21, 0x03	; 3
    3cee:	85 2e       	mov	r8, r21
    3cf0:	91 2c       	mov	r9, r1
    3cf2:	ab ce       	rjmp	.-682    	; 0x3a4a <getRightSpeedFromInput+0x96>
    3cf4:	e2 e0       	ldi	r30, 0x02	; 2
    3cf6:	8e 2e       	mov	r8, r30
    3cf8:	91 2c       	mov	r9, r1
    3cfa:	9a ce       	rjmp	.-716    	; 0x3a30 <getRightSpeedFromInput+0x7c>
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	89 ce       	rjmp	.-750    	; 0x3a12 <getRightSpeedFromInput+0x5e>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    3d00:	60 91 88 09 	lds	r22, 0x0988
    3d04:	70 91 89 09 	lds	r23, 0x0989
    3d08:	88 27       	eor	r24, r24
    3d0a:	77 fd       	sbrc	r23, 7
    3d0c:	80 95       	com	r24
    3d0e:	98 2f       	mov	r25, r24
    3d10:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3d14:	7b 01       	movw	r14, r22
    3d16:	8c 01       	movw	r16, r24
    3d18:	be 01       	movw	r22, r28
    3d1a:	88 27       	eor	r24, r24
    3d1c:	77 fd       	sbrc	r23, 7
    3d1e:	80 95       	com	r24
    3d20:	98 2f       	mov	r25, r24
    3d22:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3d26:	9b 01       	movw	r18, r22
    3d28:	ac 01       	movw	r20, r24
    3d2a:	c8 01       	movw	r24, r16
    3d2c:	b7 01       	movw	r22, r14
    3d2e:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    3d32:	7b 01       	movw	r14, r22
    3d34:	8c 01       	movw	r16, r24
    3d36:	b6 01       	movw	r22, r12
    3d38:	88 27       	eor	r24, r24
    3d3a:	77 fd       	sbrc	r23, 7
    3d3c:	80 95       	com	r24
    3d3e:	98 2f       	mov	r25, r24
    3d40:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3d44:	9b 01       	movw	r18, r22
    3d46:	ac 01       	movw	r20, r24
    3d48:	c8 01       	movw	r24, r16
    3d4a:	b7 01       	movw	r22, r14
    3d4c:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    3d50:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    3d54:	70 93 e3 04 	sts	0x04E3, r23
    3d58:	60 93 e2 04 	sts	0x04E2, r22
    3d5c:	1e cf       	rjmp	.-452    	; 0x3b9a <getRightSpeedFromInput+0x1e6>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    3d5e:	80 91 08 09 	lds	r24, 0x0908
    3d62:	90 91 09 09 	lds	r25, 0x0909
    3d66:	9c 01       	movw	r18, r24
    3d68:	c2 9f       	mul	r28, r18
    3d6a:	c0 01       	movw	r24, r0
    3d6c:	c3 9f       	mul	r28, r19
    3d6e:	90 0d       	add	r25, r0
    3d70:	d2 9f       	mul	r29, r18
    3d72:	90 0d       	add	r25, r0
    3d74:	11 24       	eor	r1, r1
    3d76:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__divmodhi4>
    3d7a:	70 93 e3 04 	sts	0x04E3, r23
    3d7e:	60 93 e2 04 	sts	0x04E2, r22
    3d82:	0b cf       	rjmp	.-490    	; 0x3b9a <getRightSpeedFromInput+0x1e6>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    3d84:	08 e0       	ldi	r16, 0x08	; 8
    3d86:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    3d88:	3f ef       	ldi	r19, 0xFF	; 255
    3d8a:	0f 3f       	cpi	r16, 0xFF	; 255
    3d8c:	13 07       	cpc	r17, r19
    3d8e:	09 f4       	brne	.+2      	; 0x3d92 <getRightSpeedFromInput+0x3de>
    3d90:	5c c0       	rjmp	.+184    	; 0x3e4a <getRightSpeedFromInput+0x496>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    3d92:	02 95       	swap	r16
    3d94:	12 95       	swap	r17
    3d96:	10 7f       	andi	r17, 0xF0	; 240
    3d98:	10 27       	eor	r17, r16
    3d9a:	00 7f       	andi	r16, 0xF0	; 240
    3d9c:	10 27       	eor	r17, r16
    3d9e:	f8 01       	movw	r30, r16
    3da0:	ee 50       	subi	r30, 0x0E	; 14
    3da2:	f7 4f       	sbci	r31, 0xF7	; 247
    3da4:	a4 84       	ldd	r10, Z+12	; 0x0c
    3da6:	b5 84       	ldd	r11, Z+13	; 0x0d
    3da8:	86 84       	ldd	r8, Z+14	; 0x0e
    3daa:	97 84       	ldd	r9, Z+15	; 0x0f
    3dac:	ca 19       	sub	r28, r10
    3dae:	db 09       	sbc	r29, r11
    3db0:	be 01       	movw	r22, r28
    3db2:	88 27       	eor	r24, r24
    3db4:	77 fd       	sbrc	r23, 7
    3db6:	80 95       	com	r24
    3db8:	98 2f       	mov	r25, r24
    3dba:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3dbe:	6b 01       	movw	r12, r22
    3dc0:	7c 01       	movw	r14, r24
    3dc2:	0e 5f       	subi	r16, 0xFE	; 254
    3dc4:	16 4f       	sbci	r17, 0xF6	; 246
    3dc6:	f8 01       	movw	r30, r16
    3dc8:	66 85       	ldd	r22, Z+14	; 0x0e
    3dca:	77 85       	ldd	r23, Z+15	; 0x0f
    3dcc:	68 19       	sub	r22, r8
    3dce:	79 09       	sbc	r23, r9
    3dd0:	88 27       	eor	r24, r24
    3dd2:	77 fd       	sbrc	r23, 7
    3dd4:	80 95       	com	r24
    3dd6:	98 2f       	mov	r25, r24
    3dd8:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3ddc:	9b 01       	movw	r18, r22
    3dde:	ac 01       	movw	r20, r24
    3de0:	c7 01       	movw	r24, r14
    3de2:	b6 01       	movw	r22, r12
    3de4:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    3de8:	6b 01       	movw	r12, r22
    3dea:	7c 01       	movw	r14, r24
    3dec:	f8 01       	movw	r30, r16
    3dee:	64 85       	ldd	r22, Z+12	; 0x0c
    3df0:	75 85       	ldd	r23, Z+13	; 0x0d
    3df2:	6a 19       	sub	r22, r10
    3df4:	7b 09       	sbc	r23, r11
    3df6:	88 27       	eor	r24, r24
    3df8:	77 fd       	sbrc	r23, 7
    3dfa:	80 95       	com	r24
    3dfc:	98 2f       	mov	r25, r24
    3dfe:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3e02:	9b 01       	movw	r18, r22
    3e04:	ac 01       	movw	r20, r24
    3e06:	c7 01       	movw	r24, r14
    3e08:	b6 01       	movw	r22, r12
    3e0a:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    3e0e:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    3e12:	68 0d       	add	r22, r8
    3e14:	79 1d       	adc	r23, r9
    3e16:	cb 01       	movw	r24, r22
    3e18:	4a cf       	rjmp	.-364    	; 0x3cae <getRightSpeedFromInput+0x2fa>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    3e1a:	00 e0       	ldi	r16, 0x00	; 0
    3e1c:	10 e0       	ldi	r17, 0x00	; 0
    3e1e:	d4 ce       	rjmp	.-600    	; 0x3bc8 <getRightSpeedFromInput+0x214>
    3e20:	01 e0       	ldi	r16, 0x01	; 1
    3e22:	10 e0       	ldi	r17, 0x00	; 0
    3e24:	dd ce       	rjmp	.-582    	; 0x3be0 <getRightSpeedFromInput+0x22c>
    3e26:	07 e0       	ldi	r16, 0x07	; 7
    3e28:	10 e0       	ldi	r17, 0x00	; 0
    3e2a:	22 cf       	rjmp	.-444    	; 0x3c70 <getRightSpeedFromInput+0x2bc>
    3e2c:	06 e0       	ldi	r16, 0x06	; 6
    3e2e:	10 e0       	ldi	r17, 0x00	; 0
    3e30:	13 cf       	rjmp	.-474    	; 0x3c58 <getRightSpeedFromInput+0x2a4>
    3e32:	05 e0       	ldi	r16, 0x05	; 5
    3e34:	10 e0       	ldi	r17, 0x00	; 0
    3e36:	04 cf       	rjmp	.-504    	; 0x3c40 <getRightSpeedFromInput+0x28c>
    3e38:	04 e0       	ldi	r16, 0x04	; 4
    3e3a:	10 e0       	ldi	r17, 0x00	; 0
    3e3c:	f5 ce       	rjmp	.-534    	; 0x3c28 <getRightSpeedFromInput+0x274>
    3e3e:	03 e0       	ldi	r16, 0x03	; 3
    3e40:	10 e0       	ldi	r17, 0x00	; 0
    3e42:	e6 ce       	rjmp	.-564    	; 0x3c10 <getRightSpeedFromInput+0x25c>
    3e44:	02 e0       	ldi	r16, 0x02	; 2
    3e46:	10 e0       	ldi	r17, 0x00	; 0
    3e48:	d7 ce       	rjmp	.-594    	; 0x3bf8 <getRightSpeedFromInput+0x244>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    3e4a:	60 91 90 09 	lds	r22, 0x0990
    3e4e:	70 91 91 09 	lds	r23, 0x0991
    3e52:	88 27       	eor	r24, r24
    3e54:	77 fd       	sbrc	r23, 7
    3e56:	80 95       	com	r24
    3e58:	98 2f       	mov	r25, r24
    3e5a:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3e5e:	7b 01       	movw	r14, r22
    3e60:	8c 01       	movw	r16, r24
    3e62:	be 01       	movw	r22, r28
    3e64:	88 27       	eor	r24, r24
    3e66:	77 fd       	sbrc	r23, 7
    3e68:	80 95       	com	r24
    3e6a:	98 2f       	mov	r25, r24
    3e6c:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3e70:	9b 01       	movw	r18, r22
    3e72:	ac 01       	movw	r20, r24
    3e74:	c8 01       	movw	r24, r16
    3e76:	b7 01       	movw	r22, r14
    3e78:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    3e7c:	7b 01       	movw	r14, r22
    3e7e:	8c 01       	movw	r16, r24
    3e80:	b6 01       	movw	r22, r12
    3e82:	88 27       	eor	r24, r24
    3e84:	77 fd       	sbrc	r23, 7
    3e86:	80 95       	com	r24
    3e88:	98 2f       	mov	r25, r24
    3e8a:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    3e8e:	9b 01       	movw	r18, r22
    3e90:	ac 01       	movw	r20, r24
    3e92:	c8 01       	movw	r24, r16
    3e94:	b7 01       	movw	r22, r14
    3e96:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    3e9a:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	06 cf       	rjmp	.-500    	; 0x3cae <getRightSpeedFromInput+0x2fa>

00003ea2 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    3ea2:	8f 92       	push	r8
    3ea4:	9f 92       	push	r9
    3ea6:	af 92       	push	r10
    3ea8:	bf 92       	push	r11
    3eaa:	cf 92       	push	r12
    3eac:	df 92       	push	r13
    3eae:	ef 92       	push	r14
    3eb0:	ff 92       	push	r15
    3eb2:	0f 93       	push	r16
    3eb4:	1f 93       	push	r17
    3eb6:	cf 93       	push	r28
    3eb8:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    3eba:	c0 91 0d 03 	lds	r28, 0x030D
    3ebe:	d0 91 0e 03 	lds	r29, 0x030E
    3ec2:	80 91 13 03 	lds	r24, 0x0313
    3ec6:	90 91 14 03 	lds	r25, 0x0314
    3eca:	97 fd       	sbrc	r25, 7
    3ecc:	f3 c0       	rjmp	.+486    	; 0x40b4 <getLeftSpeedFromInput+0x212>
    3ece:	60 91 02 09 	lds	r22, 0x0902
    3ed2:	70 91 03 09 	lds	r23, 0x0903
    3ed6:	6c 17       	cp	r22, r28
    3ed8:	7d 07       	cpc	r23, r29
    3eda:	0c f0       	brlt	.+2      	; 0x3ede <getLeftSpeedFromInput+0x3c>
    3edc:	79 c1       	rjmp	.+754    	; 0x41d0 <getLeftSpeedFromInput+0x32e>
    3ede:	88 24       	eor	r8, r8
    3ee0:	8a 94       	dec	r8
    3ee2:	98 2c       	mov	r9, r8
    3ee4:	80 91 12 09 	lds	r24, 0x0912
    3ee8:	90 91 13 09 	lds	r25, 0x0913
    3eec:	8c 17       	cp	r24, r28
    3eee:	9d 07       	cpc	r25, r29
    3ef0:	4c f0       	brlt	.+18     	; 0x3f04 <getLeftSpeedFromInput+0x62>
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
    3ef4:	9f ef       	ldi	r25, 0xFF	; 255
    3ef6:	89 16       	cp	r8, r25
    3ef8:	9f ef       	ldi	r25, 0xFF	; 255
    3efa:	99 06       	cpc	r9, r25
    3efc:	09 f4       	brne	.+2      	; 0x3f00 <getLeftSpeedFromInput+0x5e>
    3efe:	87 c1       	rjmp	.+782    	; 0x420e <getLeftSpeedFromInput+0x36c>
    3f00:	88 2e       	mov	r8, r24
    3f02:	99 24       	eor	r9, r9
    3f04:	80 91 22 09 	lds	r24, 0x0922
    3f08:	90 91 23 09 	lds	r25, 0x0923
    3f0c:	8c 17       	cp	r24, r28
    3f0e:	9d 07       	cpc	r25, r29
    3f10:	34 f0       	brlt	.+12     	; 0x3f1e <getLeftSpeedFromInput+0x7c>
    3f12:	ef ef       	ldi	r30, 0xFF	; 255
    3f14:	8e 16       	cp	r8, r30
    3f16:	ef ef       	ldi	r30, 0xFF	; 255
    3f18:	9e 06       	cpc	r9, r30
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <getLeftSpeedFromInput+0x7c>
    3f1c:	74 c1       	rjmp	.+744    	; 0x4206 <getLeftSpeedFromInput+0x364>
    3f1e:	80 91 32 09 	lds	r24, 0x0932
    3f22:	90 91 33 09 	lds	r25, 0x0933
    3f26:	8c 17       	cp	r24, r28
    3f28:	9d 07       	cpc	r25, r29
    3f2a:	34 f0       	brlt	.+12     	; 0x3f38 <getLeftSpeedFromInput+0x96>
    3f2c:	ff ef       	ldi	r31, 0xFF	; 255
    3f2e:	8f 16       	cp	r8, r31
    3f30:	ff ef       	ldi	r31, 0xFF	; 255
    3f32:	9f 06       	cpc	r9, r31
    3f34:	09 f4       	brne	.+2      	; 0x3f38 <getLeftSpeedFromInput+0x96>
    3f36:	63 c1       	rjmp	.+710    	; 0x41fe <getLeftSpeedFromInput+0x35c>
    3f38:	80 91 42 09 	lds	r24, 0x0942
    3f3c:	90 91 43 09 	lds	r25, 0x0943
    3f40:	8c 17       	cp	r24, r28
    3f42:	9d 07       	cpc	r25, r29
    3f44:	34 f0       	brlt	.+12     	; 0x3f52 <getLeftSpeedFromInput+0xb0>
    3f46:	2f ef       	ldi	r18, 0xFF	; 255
    3f48:	82 16       	cp	r8, r18
    3f4a:	2f ef       	ldi	r18, 0xFF	; 255
    3f4c:	92 06       	cpc	r9, r18
    3f4e:	09 f4       	brne	.+2      	; 0x3f52 <getLeftSpeedFromInput+0xb0>
    3f50:	52 c1       	rjmp	.+676    	; 0x41f6 <getLeftSpeedFromInput+0x354>
    3f52:	80 91 52 09 	lds	r24, 0x0952
    3f56:	90 91 53 09 	lds	r25, 0x0953
    3f5a:	8c 17       	cp	r24, r28
    3f5c:	9d 07       	cpc	r25, r29
    3f5e:	34 f0       	brlt	.+12     	; 0x3f6c <getLeftSpeedFromInput+0xca>
    3f60:	3f ef       	ldi	r19, 0xFF	; 255
    3f62:	83 16       	cp	r8, r19
    3f64:	3f ef       	ldi	r19, 0xFF	; 255
    3f66:	93 06       	cpc	r9, r19
    3f68:	09 f4       	brne	.+2      	; 0x3f6c <getLeftSpeedFromInput+0xca>
    3f6a:	41 c1       	rjmp	.+642    	; 0x41ee <getLeftSpeedFromInput+0x34c>
    3f6c:	80 91 62 09 	lds	r24, 0x0962
    3f70:	90 91 63 09 	lds	r25, 0x0963
    3f74:	8c 17       	cp	r24, r28
    3f76:	9d 07       	cpc	r25, r29
    3f78:	34 f0       	brlt	.+12     	; 0x3f86 <getLeftSpeedFromInput+0xe4>
    3f7a:	8f ef       	ldi	r24, 0xFF	; 255
    3f7c:	88 16       	cp	r8, r24
    3f7e:	8f ef       	ldi	r24, 0xFF	; 255
    3f80:	98 06       	cpc	r9, r24
    3f82:	09 f4       	brne	.+2      	; 0x3f86 <getLeftSpeedFromInput+0xe4>
    3f84:	30 c1       	rjmp	.+608    	; 0x41e6 <getLeftSpeedFromInput+0x344>
    3f86:	80 91 72 09 	lds	r24, 0x0972
    3f8a:	90 91 73 09 	lds	r25, 0x0973
    3f8e:	8c 17       	cp	r24, r28
    3f90:	9d 07       	cpc	r25, r29
    3f92:	34 f0       	brlt	.+12     	; 0x3fa0 <getLeftSpeedFromInput+0xfe>
    3f94:	9f ef       	ldi	r25, 0xFF	; 255
    3f96:	89 16       	cp	r8, r25
    3f98:	9f ef       	ldi	r25, 0xFF	; 255
    3f9a:	99 06       	cpc	r9, r25
    3f9c:	09 f4       	brne	.+2      	; 0x3fa0 <getLeftSpeedFromInput+0xfe>
    3f9e:	1f c1       	rjmp	.+574    	; 0x41de <getLeftSpeedFromInput+0x33c>
    3fa0:	c0 90 82 09 	lds	r12, 0x0982
    3fa4:	d0 90 83 09 	lds	r13, 0x0983
    3fa8:	cc 16       	cp	r12, r28
    3faa:	dd 06       	cpc	r13, r29
    3fac:	34 f0       	brlt	.+12     	; 0x3fba <getLeftSpeedFromInput+0x118>
    3fae:	ef ef       	ldi	r30, 0xFF	; 255
    3fb0:	8e 16       	cp	r8, r30
    3fb2:	ef ef       	ldi	r30, 0xFF	; 255
    3fb4:	9e 06       	cpc	r9, r30
    3fb6:	09 f4       	brne	.+2      	; 0x3fba <getLeftSpeedFromInput+0x118>
    3fb8:	0e c1       	rjmp	.+540    	; 0x41d6 <getLeftSpeedFromInput+0x334>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    3fba:	20 97       	sbiw	r28, 0x00	; 0
    3fbc:	09 f4       	brne	.+2      	; 0x3fc0 <getLeftSpeedFromInput+0x11e>
    3fbe:	69 c0       	rjmp	.+210    	; 0x4092 <getLeftSpeedFromInput+0x1f0>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    3fc0:	81 14       	cp	r8, r1
    3fc2:	91 04       	cpc	r9, r1
    3fc4:	09 f4       	brne	.+2      	; 0x3fc8 <getLeftSpeedFromInput+0x126>
    3fc6:	54 c1       	rjmp	.+680    	; 0x4270 <getLeftSpeedFromInput+0x3ce>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    3fc8:	3f ef       	ldi	r19, 0xFF	; 255
    3fca:	83 16       	cp	r8, r19
    3fcc:	3f ef       	ldi	r19, 0xFF	; 255
    3fce:	93 06       	cpc	r9, r19
    3fd0:	09 f4       	brne	.+2      	; 0x3fd4 <getLeftSpeedFromInput+0x132>
    3fd2:	1f c1       	rjmp	.+574    	; 0x4212 <getLeftSpeedFromInput+0x370>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    3fd4:	d4 01       	movw	r26, r8
    3fd6:	11 97       	sbiw	r26, 0x01	; 1
    3fd8:	fd 01       	movw	r30, r26
    3fda:	e2 95       	swap	r30
    3fdc:	f2 95       	swap	r31
    3fde:	f0 7f       	andi	r31, 0xF0	; 240
    3fe0:	fe 27       	eor	r31, r30
    3fe2:	e0 7f       	andi	r30, 0xF0	; 240
    3fe4:	fe 27       	eor	r31, r30
    3fe6:	ee 5f       	subi	r30, 0xFE	; 254
    3fe8:	f6 4f       	sbci	r31, 0xF6	; 246
    3fea:	c0 80       	ld	r12, Z
    3fec:	d1 80       	ldd	r13, Z+1	; 0x01
    3fee:	aa 0f       	add	r26, r26
    3ff0:	bb 1f       	adc	r27, r27
    3ff2:	aa 0f       	add	r26, r26
    3ff4:	bb 1f       	adc	r27, r27
    3ff6:	aa 0f       	add	r26, r26
    3ff8:	bb 1f       	adc	r27, r27
    3ffa:	aa 0f       	add	r26, r26
    3ffc:	bb 1f       	adc	r27, r27
    3ffe:	ac 5f       	subi	r26, 0xFC	; 252
    4000:	b6 4f       	sbci	r27, 0xF6	; 246
    4002:	ad 90       	ld	r10, X+
    4004:	bc 90       	ld	r11, X
    4006:	cc 19       	sub	r28, r12
    4008:	dd 09       	sbc	r29, r13
    400a:	be 01       	movw	r22, r28
    400c:	88 27       	eor	r24, r24
    400e:	77 fd       	sbrc	r23, 7
    4010:	80 95       	com	r24
    4012:	98 2f       	mov	r25, r24
    4014:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    4018:	7b 01       	movw	r14, r22
    401a:	8c 01       	movw	r16, r24
    401c:	88 0c       	add	r8, r8
    401e:	99 1c       	adc	r9, r9
    4020:	88 0c       	add	r8, r8
    4022:	99 1c       	adc	r9, r9
    4024:	88 0c       	add	r8, r8
    4026:	99 1c       	adc	r9, r9
    4028:	88 0c       	add	r8, r8
    402a:	99 1c       	adc	r9, r9
    402c:	f4 01       	movw	r30, r8
    402e:	ec 5f       	subi	r30, 0xFC	; 252
    4030:	f6 4f       	sbci	r31, 0xF6	; 246
    4032:	60 81       	ld	r22, Z
    4034:	71 81       	ldd	r23, Z+1	; 0x01
    4036:	6a 19       	sub	r22, r10
    4038:	7b 09       	sbc	r23, r11
    403a:	88 27       	eor	r24, r24
    403c:	77 fd       	sbrc	r23, 7
    403e:	80 95       	com	r24
    4040:	98 2f       	mov	r25, r24
    4042:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    4046:	9b 01       	movw	r18, r22
    4048:	ac 01       	movw	r20, r24
    404a:	c8 01       	movw	r24, r16
    404c:	b7 01       	movw	r22, r14
    404e:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    4052:	7b 01       	movw	r14, r22
    4054:	8c 01       	movw	r16, r24
    4056:	82 e0       	ldi	r24, 0x02	; 2
    4058:	99 e0       	ldi	r25, 0x09	; 9
    405a:	88 0e       	add	r8, r24
    405c:	99 1e       	adc	r9, r25
    405e:	f4 01       	movw	r30, r8
    4060:	60 81       	ld	r22, Z
    4062:	71 81       	ldd	r23, Z+1	; 0x01
    4064:	6c 19       	sub	r22, r12
    4066:	7d 09       	sbc	r23, r13
    4068:	88 27       	eor	r24, r24
    406a:	77 fd       	sbrc	r23, 7
    406c:	80 95       	com	r24
    406e:	98 2f       	mov	r25, r24
    4070:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    4074:	9b 01       	movw	r18, r22
    4076:	ac 01       	movw	r20, r24
    4078:	c8 01       	movw	r24, r16
    407a:	b7 01       	movw	r22, r14
    407c:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    4080:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    4084:	6a 0d       	add	r22, r10
    4086:	7b 1d       	adc	r23, r11
    4088:	70 93 e1 04 	sts	0x04E1, r23
    408c:	60 93 e0 04 	sts	0x04E0, r22
    4090:	04 c0       	rjmp	.+8      	; 0x409a <getLeftSpeedFromInput+0x1f8>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    4092:	10 92 e1 04 	sts	0x04E1, r1
    4096:	10 92 e0 04 	sts	0x04E0, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    409a:	df 91       	pop	r29
    409c:	cf 91       	pop	r28
    409e:	1f 91       	pop	r17
    40a0:	0f 91       	pop	r16
    40a2:	ff 90       	pop	r15
    40a4:	ef 90       	pop	r14
    40a6:	df 90       	pop	r13
    40a8:	cf 90       	pop	r12
    40aa:	bf 90       	pop	r11
    40ac:	af 90       	pop	r10
    40ae:	9f 90       	pop	r9
    40b0:	8f 90       	pop	r8
    40b2:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    40b4:	60 91 0a 09 	lds	r22, 0x090A
    40b8:	70 91 0b 09 	lds	r23, 0x090B
    40bc:	6c 17       	cp	r22, r28
    40be:	7d 07       	cpc	r23, r29
    40c0:	0c f0       	brlt	.+2      	; 0x40c4 <getLeftSpeedFromInput+0x222>
    40c2:	4e c1       	rjmp	.+668    	; 0x4360 <getLeftSpeedFromInput+0x4be>
    40c4:	88 24       	eor	r8, r8
    40c6:	8a 94       	dec	r8
    40c8:	98 2c       	mov	r9, r8
    40ca:	80 91 1a 09 	lds	r24, 0x091A
    40ce:	90 91 1b 09 	lds	r25, 0x091B
    40d2:	8c 17       	cp	r24, r28
    40d4:	9d 07       	cpc	r25, r29
    40d6:	34 f0       	brlt	.+12     	; 0x40e4 <getLeftSpeedFromInput+0x242>
    40d8:	2f ef       	ldi	r18, 0xFF	; 255
    40da:	82 16       	cp	r8, r18
    40dc:	2f ef       	ldi	r18, 0xFF	; 255
    40de:	92 06       	cpc	r9, r18
    40e0:	09 f4       	brne	.+2      	; 0x40e4 <getLeftSpeedFromInput+0x242>
    40e2:	41 c1       	rjmp	.+642    	; 0x4366 <getLeftSpeedFromInput+0x4c4>
    40e4:	80 91 2a 09 	lds	r24, 0x092A
    40e8:	90 91 2b 09 	lds	r25, 0x092B
    40ec:	8c 17       	cp	r24, r28
    40ee:	9d 07       	cpc	r25, r29
    40f0:	34 f0       	brlt	.+12     	; 0x40fe <getLeftSpeedFromInput+0x25c>
    40f2:	3f ef       	ldi	r19, 0xFF	; 255
    40f4:	83 16       	cp	r8, r19
    40f6:	3f ef       	ldi	r19, 0xFF	; 255
    40f8:	93 06       	cpc	r9, r19
    40fa:	09 f4       	brne	.+2      	; 0x40fe <getLeftSpeedFromInput+0x25c>
    40fc:	4c c1       	rjmp	.+664    	; 0x4396 <getLeftSpeedFromInput+0x4f4>
    40fe:	80 91 3a 09 	lds	r24, 0x093A
    4102:	90 91 3b 09 	lds	r25, 0x093B
    4106:	8c 17       	cp	r24, r28
    4108:	9d 07       	cpc	r25, r29
    410a:	34 f0       	brlt	.+12     	; 0x4118 <getLeftSpeedFromInput+0x276>
    410c:	8f ef       	ldi	r24, 0xFF	; 255
    410e:	88 16       	cp	r8, r24
    4110:	8f ef       	ldi	r24, 0xFF	; 255
    4112:	98 06       	cpc	r9, r24
    4114:	09 f4       	brne	.+2      	; 0x4118 <getLeftSpeedFromInput+0x276>
    4116:	3b c1       	rjmp	.+630    	; 0x438e <getLeftSpeedFromInput+0x4ec>
    4118:	80 91 4a 09 	lds	r24, 0x094A
    411c:	90 91 4b 09 	lds	r25, 0x094B
    4120:	8c 17       	cp	r24, r28
    4122:	9d 07       	cpc	r25, r29
    4124:	34 f0       	brlt	.+12     	; 0x4132 <getLeftSpeedFromInput+0x290>
    4126:	9f ef       	ldi	r25, 0xFF	; 255
    4128:	89 16       	cp	r8, r25
    412a:	9f ef       	ldi	r25, 0xFF	; 255
    412c:	99 06       	cpc	r9, r25
    412e:	09 f4       	brne	.+2      	; 0x4132 <getLeftSpeedFromInput+0x290>
    4130:	2a c1       	rjmp	.+596    	; 0x4386 <getLeftSpeedFromInput+0x4e4>
    4132:	80 91 5a 09 	lds	r24, 0x095A
    4136:	90 91 5b 09 	lds	r25, 0x095B
    413a:	8c 17       	cp	r24, r28
    413c:	9d 07       	cpc	r25, r29
    413e:	34 f0       	brlt	.+12     	; 0x414c <getLeftSpeedFromInput+0x2aa>
    4140:	ef ef       	ldi	r30, 0xFF	; 255
    4142:	8e 16       	cp	r8, r30
    4144:	ef ef       	ldi	r30, 0xFF	; 255
    4146:	9e 06       	cpc	r9, r30
    4148:	09 f4       	brne	.+2      	; 0x414c <getLeftSpeedFromInput+0x2aa>
    414a:	19 c1       	rjmp	.+562    	; 0x437e <getLeftSpeedFromInput+0x4dc>
    414c:	80 91 6a 09 	lds	r24, 0x096A
    4150:	90 91 6b 09 	lds	r25, 0x096B
    4154:	8c 17       	cp	r24, r28
    4156:	9d 07       	cpc	r25, r29
    4158:	34 f0       	brlt	.+12     	; 0x4166 <getLeftSpeedFromInput+0x2c4>
    415a:	ff ef       	ldi	r31, 0xFF	; 255
    415c:	8f 16       	cp	r8, r31
    415e:	ff ef       	ldi	r31, 0xFF	; 255
    4160:	9f 06       	cpc	r9, r31
    4162:	09 f4       	brne	.+2      	; 0x4166 <getLeftSpeedFromInput+0x2c4>
    4164:	08 c1       	rjmp	.+528    	; 0x4376 <getLeftSpeedFromInput+0x4d4>
    4166:	80 91 7a 09 	lds	r24, 0x097A
    416a:	90 91 7b 09 	lds	r25, 0x097B
    416e:	8c 17       	cp	r24, r28
    4170:	9d 07       	cpc	r25, r29
    4172:	34 f0       	brlt	.+12     	; 0x4180 <getLeftSpeedFromInput+0x2de>
    4174:	2f ef       	ldi	r18, 0xFF	; 255
    4176:	82 16       	cp	r8, r18
    4178:	2f ef       	ldi	r18, 0xFF	; 255
    417a:	92 06       	cpc	r9, r18
    417c:	09 f4       	brne	.+2      	; 0x4180 <getLeftSpeedFromInput+0x2de>
    417e:	f7 c0       	rjmp	.+494    	; 0x436e <getLeftSpeedFromInput+0x4cc>
    4180:	c0 90 8a 09 	lds	r12, 0x098A
    4184:	d0 90 8b 09 	lds	r13, 0x098B
    4188:	cc 16       	cp	r12, r28
    418a:	dd 06       	cpc	r13, r29
    418c:	34 f0       	brlt	.+12     	; 0x419a <getLeftSpeedFromInput+0x2f8>
    418e:	3f ef       	ldi	r19, 0xFF	; 255
    4190:	83 16       	cp	r8, r19
    4192:	3f ef       	ldi	r19, 0xFF	; 255
    4194:	93 06       	cpc	r9, r19
    4196:	09 f4       	brne	.+2      	; 0x419a <getLeftSpeedFromInput+0x2f8>
    4198:	7e c0       	rjmp	.+252    	; 0x4296 <getLeftSpeedFromInput+0x3f4>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    419a:	81 14       	cp	r8, r1
    419c:	91 04       	cpc	r9, r1
    419e:	09 f0       	breq	.+2      	; 0x41a2 <getLeftSpeedFromInput+0x300>
    41a0:	7d c0       	rjmp	.+250    	; 0x429c <getLeftSpeedFromInput+0x3fa>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    41a2:	80 91 0c 09 	lds	r24, 0x090C
    41a6:	90 91 0d 09 	lds	r25, 0x090D
    41aa:	9c 01       	movw	r18, r24
    41ac:	c2 9f       	mul	r28, r18
    41ae:	c0 01       	movw	r24, r0
    41b0:	c3 9f       	mul	r28, r19
    41b2:	90 0d       	add	r25, r0
    41b4:	d2 9f       	mul	r29, r18
    41b6:	90 0d       	add	r25, r0
    41b8:	11 24       	eor	r1, r1
    41ba:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__divmodhi4>
    41be:	cb 01       	movw	r24, r22
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    41c0:	90 95       	com	r25
    41c2:	81 95       	neg	r24
    41c4:	9f 4f       	sbci	r25, 0xFF	; 255
    41c6:	90 93 e1 04 	sts	0x04E1, r25
    41ca:	80 93 e0 04 	sts	0x04E0, r24
    41ce:	65 cf       	rjmp	.-310    	; 0x409a <getLeftSpeedFromInput+0x1f8>

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    41d0:	88 24       	eor	r8, r8
    41d2:	99 24       	eor	r9, r9
    41d4:	87 ce       	rjmp	.-754    	; 0x3ee4 <getLeftSpeedFromInput+0x42>
    41d6:	e8 e0       	ldi	r30, 0x08	; 8
    41d8:	8e 2e       	mov	r8, r30
    41da:	91 2c       	mov	r9, r1
    41dc:	ee ce       	rjmp	.-548    	; 0x3fba <getLeftSpeedFromInput+0x118>
    41de:	f7 e0       	ldi	r31, 0x07	; 7
    41e0:	8f 2e       	mov	r8, r31
    41e2:	91 2c       	mov	r9, r1
    41e4:	dd ce       	rjmp	.-582    	; 0x3fa0 <getLeftSpeedFromInput+0xfe>
    41e6:	a6 e0       	ldi	r26, 0x06	; 6
    41e8:	8a 2e       	mov	r8, r26
    41ea:	91 2c       	mov	r9, r1
    41ec:	cc ce       	rjmp	.-616    	; 0x3f86 <getLeftSpeedFromInput+0xe4>
    41ee:	b5 e0       	ldi	r27, 0x05	; 5
    41f0:	8b 2e       	mov	r8, r27
    41f2:	91 2c       	mov	r9, r1
    41f4:	bb ce       	rjmp	.-650    	; 0x3f6c <getLeftSpeedFromInput+0xca>
    41f6:	14 e0       	ldi	r17, 0x04	; 4
    41f8:	81 2e       	mov	r8, r17
    41fa:	91 2c       	mov	r9, r1
    41fc:	aa ce       	rjmp	.-684    	; 0x3f52 <getLeftSpeedFromInput+0xb0>
    41fe:	03 e0       	ldi	r16, 0x03	; 3
    4200:	80 2e       	mov	r8, r16
    4202:	91 2c       	mov	r9, r1
    4204:	99 ce       	rjmp	.-718    	; 0x3f38 <getLeftSpeedFromInput+0x96>
    4206:	82 e0       	ldi	r24, 0x02	; 2
    4208:	88 2e       	mov	r8, r24
    420a:	91 2c       	mov	r9, r1
    420c:	88 ce       	rjmp	.-752    	; 0x3f1e <getLeftSpeedFromInput+0x7c>
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	77 ce       	rjmp	.-786    	; 0x3f00 <getLeftSpeedFromInput+0x5e>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    4212:	60 91 84 09 	lds	r22, 0x0984
    4216:	70 91 85 09 	lds	r23, 0x0985
    421a:	88 27       	eor	r24, r24
    421c:	77 fd       	sbrc	r23, 7
    421e:	80 95       	com	r24
    4220:	98 2f       	mov	r25, r24
    4222:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    4226:	7b 01       	movw	r14, r22
    4228:	8c 01       	movw	r16, r24
    422a:	be 01       	movw	r22, r28
    422c:	88 27       	eor	r24, r24
    422e:	77 fd       	sbrc	r23, 7
    4230:	80 95       	com	r24
    4232:	98 2f       	mov	r25, r24
    4234:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    4238:	9b 01       	movw	r18, r22
    423a:	ac 01       	movw	r20, r24
    423c:	c8 01       	movw	r24, r16
    423e:	b7 01       	movw	r22, r14
    4240:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    4244:	7b 01       	movw	r14, r22
    4246:	8c 01       	movw	r16, r24
    4248:	b6 01       	movw	r22, r12
    424a:	88 27       	eor	r24, r24
    424c:	77 fd       	sbrc	r23, 7
    424e:	80 95       	com	r24
    4250:	98 2f       	mov	r25, r24
    4252:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    4256:	9b 01       	movw	r18, r22
    4258:	ac 01       	movw	r20, r24
    425a:	c8 01       	movw	r24, r16
    425c:	b7 01       	movw	r22, r14
    425e:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    4262:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    4266:	70 93 e1 04 	sts	0x04E1, r23
    426a:	60 93 e0 04 	sts	0x04E0, r22
    426e:	15 cf       	rjmp	.-470    	; 0x409a <getLeftSpeedFromInput+0x1f8>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    4270:	80 91 04 09 	lds	r24, 0x0904
    4274:	90 91 05 09 	lds	r25, 0x0905
    4278:	9c 01       	movw	r18, r24
    427a:	c2 9f       	mul	r28, r18
    427c:	c0 01       	movw	r24, r0
    427e:	c3 9f       	mul	r28, r19
    4280:	90 0d       	add	r25, r0
    4282:	d2 9f       	mul	r29, r18
    4284:	90 0d       	add	r25, r0
    4286:	11 24       	eor	r1, r1
    4288:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__divmodhi4>
    428c:	70 93 e1 04 	sts	0x04E1, r23
    4290:	60 93 e0 04 	sts	0x04E0, r22
    4294:	02 cf       	rjmp	.-508    	; 0x409a <getLeftSpeedFromInput+0x1f8>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    4296:	98 e0       	ldi	r25, 0x08	; 8
    4298:	89 2e       	mov	r8, r25
    429a:	91 2c       	mov	r9, r1
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    429c:	3f ef       	ldi	r19, 0xFF	; 255
    429e:	83 16       	cp	r8, r19
    42a0:	3f ef       	ldi	r19, 0xFF	; 255
    42a2:	93 06       	cpc	r9, r19
    42a4:	09 f4       	brne	.+2      	; 0x42a8 <getLeftSpeedFromInput+0x406>
    42a6:	7b c0       	rjmp	.+246    	; 0x439e <getLeftSpeedFromInput+0x4fc>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    42a8:	f4 01       	movw	r30, r8
    42aa:	31 97       	sbiw	r30, 0x01	; 1
    42ac:	ee 0f       	add	r30, r30
    42ae:	ff 1f       	adc	r31, r31
    42b0:	ee 0f       	add	r30, r30
    42b2:	ff 1f       	adc	r31, r31
    42b4:	ee 0f       	add	r30, r30
    42b6:	ff 1f       	adc	r31, r31
    42b8:	ee 0f       	add	r30, r30
    42ba:	ff 1f       	adc	r31, r31
    42bc:	df 01       	movw	r26, r30
    42be:	a6 5f       	subi	r26, 0xF6	; 246
    42c0:	b6 4f       	sbci	r27, 0xF6	; 246
    42c2:	cd 90       	ld	r12, X+
    42c4:	dc 90       	ld	r13, X
    42c6:	ee 5f       	subi	r30, 0xFE	; 254
    42c8:	f6 4f       	sbci	r31, 0xF6	; 246
    42ca:	a2 84       	ldd	r10, Z+10	; 0x0a
    42cc:	b3 84       	ldd	r11, Z+11	; 0x0b
    42ce:	cc 19       	sub	r28, r12
    42d0:	dd 09       	sbc	r29, r13
    42d2:	be 01       	movw	r22, r28
    42d4:	88 27       	eor	r24, r24
    42d6:	77 fd       	sbrc	r23, 7
    42d8:	80 95       	com	r24
    42da:	98 2f       	mov	r25, r24
    42dc:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    42e0:	7b 01       	movw	r14, r22
    42e2:	8c 01       	movw	r16, r24
    42e4:	f4 01       	movw	r30, r8
    42e6:	e2 95       	swap	r30
    42e8:	f2 95       	swap	r31
    42ea:	f0 7f       	andi	r31, 0xF0	; 240
    42ec:	fe 27       	eor	r31, r30
    42ee:	e0 7f       	andi	r30, 0xF0	; 240
    42f0:	fe 27       	eor	r31, r30
    42f2:	ee 5f       	subi	r30, 0xFE	; 254
    42f4:	f6 4f       	sbci	r31, 0xF6	; 246
    42f6:	62 85       	ldd	r22, Z+10	; 0x0a
    42f8:	73 85       	ldd	r23, Z+11	; 0x0b
    42fa:	6a 19       	sub	r22, r10
    42fc:	7b 09       	sbc	r23, r11
    42fe:	88 27       	eor	r24, r24
    4300:	77 fd       	sbrc	r23, 7
    4302:	80 95       	com	r24
    4304:	98 2f       	mov	r25, r24
    4306:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    430a:	9b 01       	movw	r18, r22
    430c:	ac 01       	movw	r20, r24
    430e:	c8 01       	movw	r24, r16
    4310:	b7 01       	movw	r22, r14
    4312:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    4316:	7b 01       	movw	r14, r22
    4318:	8c 01       	movw	r16, r24
    431a:	88 0c       	add	r8, r8
    431c:	99 1c       	adc	r9, r9
    431e:	88 0c       	add	r8, r8
    4320:	99 1c       	adc	r9, r9
    4322:	88 0c       	add	r8, r8
    4324:	99 1c       	adc	r9, r9
    4326:	88 0c       	add	r8, r8
    4328:	99 1c       	adc	r9, r9
    432a:	8a e0       	ldi	r24, 0x0A	; 10
    432c:	99 e0       	ldi	r25, 0x09	; 9
    432e:	88 0e       	add	r8, r24
    4330:	99 1e       	adc	r9, r25
    4332:	f4 01       	movw	r30, r8
    4334:	60 81       	ld	r22, Z
    4336:	71 81       	ldd	r23, Z+1	; 0x01
    4338:	6c 19       	sub	r22, r12
    433a:	7d 09       	sbc	r23, r13
    433c:	88 27       	eor	r24, r24
    433e:	77 fd       	sbrc	r23, 7
    4340:	80 95       	com	r24
    4342:	98 2f       	mov	r25, r24
    4344:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    4348:	9b 01       	movw	r18, r22
    434a:	ac 01       	movw	r20, r24
    434c:	c8 01       	movw	r24, r16
    434e:	b7 01       	movw	r22, r14
    4350:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    4354:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    4358:	6a 0d       	add	r22, r10
    435a:	7b 1d       	adc	r23, r11
    435c:	cb 01       	movw	r24, r22
    435e:	30 cf       	rjmp	.-416    	; 0x41c0 <getLeftSpeedFromInput+0x31e>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    4360:	88 24       	eor	r8, r8
    4362:	99 24       	eor	r9, r9
    4364:	b2 ce       	rjmp	.-668    	; 0x40ca <getLeftSpeedFromInput+0x228>
    4366:	a1 e0       	ldi	r26, 0x01	; 1
    4368:	8a 2e       	mov	r8, r26
    436a:	91 2c       	mov	r9, r1
    436c:	bb ce       	rjmp	.-650    	; 0x40e4 <getLeftSpeedFromInput+0x242>
    436e:	27 e0       	ldi	r18, 0x07	; 7
    4370:	82 2e       	mov	r8, r18
    4372:	91 2c       	mov	r9, r1
    4374:	05 cf       	rjmp	.-502    	; 0x4180 <getLeftSpeedFromInput+0x2de>
    4376:	36 e0       	ldi	r19, 0x06	; 6
    4378:	83 2e       	mov	r8, r19
    437a:	91 2c       	mov	r9, r1
    437c:	f4 ce       	rjmp	.-536    	; 0x4166 <getLeftSpeedFromInput+0x2c4>
    437e:	45 e0       	ldi	r20, 0x05	; 5
    4380:	84 2e       	mov	r8, r20
    4382:	91 2c       	mov	r9, r1
    4384:	e3 ce       	rjmp	.-570    	; 0x414c <getLeftSpeedFromInput+0x2aa>
    4386:	54 e0       	ldi	r21, 0x04	; 4
    4388:	85 2e       	mov	r8, r21
    438a:	91 2c       	mov	r9, r1
    438c:	d2 ce       	rjmp	.-604    	; 0x4132 <getLeftSpeedFromInput+0x290>
    438e:	e3 e0       	ldi	r30, 0x03	; 3
    4390:	8e 2e       	mov	r8, r30
    4392:	91 2c       	mov	r9, r1
    4394:	c1 ce       	rjmp	.-638    	; 0x4118 <getLeftSpeedFromInput+0x276>
    4396:	f2 e0       	ldi	r31, 0x02	; 2
    4398:	8f 2e       	mov	r8, r31
    439a:	91 2c       	mov	r9, r1
    439c:	b0 ce       	rjmp	.-672    	; 0x40fe <getLeftSpeedFromInput+0x25c>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    439e:	60 91 8c 09 	lds	r22, 0x098C
    43a2:	70 91 8d 09 	lds	r23, 0x098D
    43a6:	88 27       	eor	r24, r24
    43a8:	77 fd       	sbrc	r23, 7
    43aa:	80 95       	com	r24
    43ac:	98 2f       	mov	r25, r24
    43ae:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    43b2:	7b 01       	movw	r14, r22
    43b4:	8c 01       	movw	r16, r24
    43b6:	be 01       	movw	r22, r28
    43b8:	88 27       	eor	r24, r24
    43ba:	77 fd       	sbrc	r23, 7
    43bc:	80 95       	com	r24
    43be:	98 2f       	mov	r25, r24
    43c0:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    43c4:	9b 01       	movw	r18, r22
    43c6:	ac 01       	movw	r20, r24
    43c8:	c8 01       	movw	r24, r16
    43ca:	b7 01       	movw	r22, r14
    43cc:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    43d0:	7b 01       	movw	r14, r22
    43d2:	8c 01       	movw	r16, r24
    43d4:	b6 01       	movw	r22, r12
    43d6:	88 27       	eor	r24, r24
    43d8:	77 fd       	sbrc	r23, 7
    43da:	80 95       	com	r24
    43dc:	98 2f       	mov	r25, r24
    43de:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    43e2:	9b 01       	movw	r18, r22
    43e4:	ac 01       	movw	r20, r24
    43e6:	c8 01       	movw	r24, r16
    43e8:	b7 01       	movw	r22, r14
    43ea:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    43ee:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    43f2:	cb 01       	movw	r24, r22
    43f4:	e5 ce       	rjmp	.-566    	; 0x41c0 <getLeftSpeedFromInput+0x31e>

000043f6 <__vector_45>:

}


// Motor left
ISR(TIMER4_OVF_vect) {
    43f6:	1f 92       	push	r1
    43f8:	0f 92       	push	r0
    43fa:	0f b6       	in	r0, 0x3f	; 63
    43fc:	0f 92       	push	r0
    43fe:	11 24       	eor	r1, r1
    4400:	8f 93       	push	r24
    4402:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    4404:	80 91 96 04 	lds	r24, 0x0496
    4408:	88 23       	and	r24, r24
    440a:	c1 f1       	breq	.+112    	; 0x447c <__vector_45+0x86>
		pwm_left = 0;
    440c:	10 92 14 03 	sts	0x0314, r1
    4410:	10 92 13 03 	sts	0x0313, r1
		OCR4A = 0;
    4414:	10 92 a9 00 	sts	0x00A9, r1
    4418:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    441c:	10 92 ab 00 	sts	0x00AB, r1
    4420:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    4424:	10 92 fe 02 	sts	0x02FE, r1
    4428:	10 92 fd 02 	sts	0x02FD, r1


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    442c:	80 91 07 03 	lds	r24, 0x0307
    4430:	90 91 08 03 	lds	r25, 0x0308
    4434:	97 fd       	sbrc	r25, 7
    4436:	79 c0       	rjmp	.+242    	; 0x452a <__vector_45+0x134>
			leftMotorPhase = PASSIVE_PHASE;
    4438:	81 e0       	ldi	r24, 0x01	; 1
    443a:	80 93 44 02 	sts	0x0244, r24
			currentMotLeftChannel = 14;
    443e:	8e e0       	ldi	r24, 0x0E	; 14
    4440:	80 93 41 02 	sts	0x0241, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	80 93 06 02 	sts	0x0206, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    444a:	80 91 a0 00 	lds	r24, 0x00A0
    444e:	8f 75       	andi	r24, 0x5F	; 95
    4450:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4454:	80 91 02 01 	lds	r24, 0x0102
    4458:	87 7e       	andi	r24, 0xE7	; 231
    445a:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    445e:	80 91 72 00 	lds	r24, 0x0072
    4462:	89 7f       	andi	r24, 0xF9	; 249
    4464:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    4468:	89 b3       	in	r24, 0x19	; 25
    446a:	86 60       	ori	r24, 0x06	; 6
    446c:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    446e:	9f 91       	pop	r25
    4470:	8f 91       	pop	r24
    4472:	0f 90       	pop	r0
    4474:	0f be       	out	0x3f, r0	; 63
    4476:	0f 90       	pop	r0
    4478:	1f 90       	pop	r1
    447a:	18 95       	reti
		pwm_left = 0;
		OCR4A = 0;
		OCR4B = 0;
	}

	left_current_avg = 0;
    447c:	10 92 fe 02 	sts	0x02FE, r1
    4480:	10 92 fd 02 	sts	0x02FD, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    4484:	80 91 13 03 	lds	r24, 0x0313
    4488:	90 91 14 03 	lds	r25, 0x0314
    448c:	00 97       	sbiw	r24, 0x00	; 0
    448e:	71 f2       	breq	.-100    	; 0x442c <__vector_45+0x36>
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    4490:	18 16       	cp	r1, r24
    4492:	19 06       	cpc	r1, r25
    4494:	2c f5       	brge	.+74     	; 0x44e0 <__vector_45+0xea>
		leftMotorPhase = ACTIVE_PHASE;
    4496:	10 92 44 02 	sts	0x0244, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    449a:	8f e0       	ldi	r24, 0x0F	; 15
    449c:	80 93 41 02 	sts	0x0241, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    44a0:	80 91 a0 00 	lds	r24, 0x00A0
    44a4:	8f 7d       	andi	r24, 0xDF	; 223
    44a6:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    44aa:	80 91 72 00 	lds	r24, 0x0072
    44ae:	8b 7f       	andi	r24, 0xFB	; 251
    44b0:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    44b4:	80 91 02 01 	lds	r24, 0x0102
    44b8:	8f 7e       	andi	r24, 0xEF	; 239
    44ba:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    44be:	80 91 a0 00 	lds	r24, 0x00A0
    44c2:	80 68       	ori	r24, 0x80	; 128
    44c4:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    44c8:	80 91 72 00 	lds	r24, 0x0072
    44cc:	82 60       	ori	r24, 0x02	; 2
    44ce:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    44d2:	9f 91       	pop	r25
    44d4:	8f 91       	pop	r24
    44d6:	0f 90       	pop	r0
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	0f 90       	pop	r0
    44dc:	1f 90       	pop	r1
    44de:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    44e0:	10 92 44 02 	sts	0x0244, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    44e4:	8e e0       	ldi	r24, 0x0E	; 14
    44e6:	80 93 41 02 	sts	0x0241, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    44ea:	80 91 a0 00 	lds	r24, 0x00A0
    44ee:	8f 77       	andi	r24, 0x7F	; 127
    44f0:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    44f4:	80 91 72 00 	lds	r24, 0x0072
    44f8:	8d 7f       	andi	r24, 0xFD	; 253
    44fa:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    44fe:	80 91 02 01 	lds	r24, 0x0102
    4502:	87 7f       	andi	r24, 0xF7	; 247
    4504:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    4508:	80 91 a0 00 	lds	r24, 0x00A0
    450c:	80 62       	ori	r24, 0x20	; 32
    450e:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    4512:	80 91 72 00 	lds	r24, 0x0072
    4516:	84 60       	ori	r24, 0x04	; 4
    4518:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    451c:	9f 91       	pop	r25
    451e:	8f 91       	pop	r24
    4520:	0f 90       	pop	r0
    4522:	0f be       	out	0x3f, r0	; 63
    4524:	0f 90       	pop	r0
    4526:	1f 90       	pop	r1
    4528:	18 95       	reti

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	80 93 44 02 	sts	0x0244, r24
			currentMotLeftChannel = 15;
    4530:	8f e0       	ldi	r24, 0x0F	; 15
    4532:	80 93 41 02 	sts	0x0241, r24
    4536:	86 cf       	rjmp	.-244    	; 0x4444 <__vector_45+0x4e>

00004538 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    4538:	1f 92       	push	r1
    453a:	0f 92       	push	r0
    453c:	0f b6       	in	r0, 0x3f	; 63
    453e:	0f 92       	push	r0
    4540:	11 24       	eor	r1, r1
    4542:	8f 93       	push	r24
    4544:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    4546:	91 e0       	ldi	r25, 0x01	; 1
    4548:	90 93 44 02 	sts	0x0244, r25
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    454c:	8e e0       	ldi	r24, 0x0E	; 14
    454e:	80 93 41 02 	sts	0x0241, r24

	firstSampleLeft = 1;
    4552:	90 93 06 02 	sts	0x0206, r25

//	LED_GREEN_OFF;

}
    4556:	9f 91       	pop	r25
    4558:	8f 91       	pop	r24
    455a:	0f 90       	pop	r0
    455c:	0f be       	out	0x3f, r0	; 63
    455e:	0f 90       	pop	r0
    4560:	1f 90       	pop	r1
    4562:	18 95       	reti

00004564 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    4564:	1f 92       	push	r1
    4566:	0f 92       	push	r0
    4568:	0f b6       	in	r0, 0x3f	; 63
    456a:	0f 92       	push	r0
    456c:	11 24       	eor	r1, r1
    456e:	8f 93       	push	r24
    4570:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    4572:	91 e0       	ldi	r25, 0x01	; 1
    4574:	90 93 44 02 	sts	0x0244, r25
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    4578:	8f e0       	ldi	r24, 0x0F	; 15
    457a:	80 93 41 02 	sts	0x0241, r24

	firstSampleLeft = 1;
    457e:	90 93 06 02 	sts	0x0206, r25

//	LED_GREEN_OFF;

}
    4582:	9f 91       	pop	r25
    4584:	8f 91       	pop	r24
    4586:	0f 90       	pop	r0
    4588:	0f be       	out	0x3f, r0	; 63
    458a:	0f 90       	pop	r0
    458c:	1f 90       	pop	r1
    458e:	18 95       	reti

00004590 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    4590:	1f 92       	push	r1
    4592:	0f 92       	push	r0
    4594:	0f b6       	in	r0, 0x3f	; 63
    4596:	0f 92       	push	r0
    4598:	11 24       	eor	r1, r1
    459a:	8f 93       	push	r24
    459c:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    459e:	80 91 96 04 	lds	r24, 0x0496
    45a2:	88 23       	and	r24, r24
    45a4:	b1 f1       	breq	.+108    	; 0x4612 <__vector_35+0x82>
		pwm_right = 0;
    45a6:	10 92 12 03 	sts	0x0312, r1
    45aa:	10 92 11 03 	sts	0x0311, r1
		OCR3A = 0;
    45ae:	10 92 99 00 	sts	0x0099, r1
    45b2:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    45b6:	10 92 9b 00 	sts	0x009B, r1
    45ba:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    45be:	10 92 00 03 	sts	0x0300, r1
    45c2:	10 92 ff 02 	sts	0x02FF, r1
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    45c6:	80 91 05 03 	lds	r24, 0x0305
    45ca:	90 91 06 03 	lds	r25, 0x0306
    45ce:	97 fd       	sbrc	r25, 7
    45d0:	6f c0       	rjmp	.+222    	; 0x46b0 <__vector_35+0x120>
			rightMotorPhase = PASSIVE_PHASE;
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	80 93 43 02 	sts	0x0243, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    45d8:	8c e0       	ldi	r24, 0x0C	; 12
    45da:	80 93 42 02 	sts	0x0242, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    45de:	81 e0       	ldi	r24, 0x01	; 1
    45e0:	80 93 05 02 	sts	0x0205, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    45e4:	80 91 90 00 	lds	r24, 0x0090
    45e8:	8f 75       	andi	r24, 0x5F	; 95
    45ea:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    45ee:	8e b1       	in	r24, 0x0e	; 14
    45f0:	87 7e       	andi	r24, 0xE7	; 231
    45f2:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    45f4:	80 91 71 00 	lds	r24, 0x0071
    45f8:	89 7f       	andi	r24, 0xF9	; 249
    45fa:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    45fe:	88 b3       	in	r24, 0x18	; 24
    4600:	86 60       	ori	r24, 0x06	; 6
    4602:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    4604:	9f 91       	pop	r25
    4606:	8f 91       	pop	r24
    4608:	0f 90       	pop	r0
    460a:	0f be       	out	0x3f, r0	; 63
    460c:	0f 90       	pop	r0
    460e:	1f 90       	pop	r1
    4610:	18 95       	reti
		pwm_right = 0;
		OCR3A = 0;
		OCR3B = 0;
	}

	right_current_avg = 0;
    4612:	10 92 00 03 	sts	0x0300, r1
    4616:	10 92 ff 02 	sts	0x02FF, r1


	if(pwm_right == 0) {
    461a:	80 91 11 03 	lds	r24, 0x0311
    461e:	90 91 12 03 	lds	r25, 0x0312
    4622:	00 97       	sbiw	r24, 0x00	; 0
    4624:	81 f2       	breq	.-96     	; 0x45c6 <__vector_35+0x36>
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    4626:	18 16       	cp	r1, r24
    4628:	19 06       	cpc	r1, r25
    462a:	0c f5       	brge	.+66     	; 0x466e <__vector_35+0xde>
		rightMotorPhase = ACTIVE_PHASE;
    462c:	10 92 43 02 	sts	0x0243, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    4630:	8d e0       	ldi	r24, 0x0D	; 13
    4632:	80 93 42 02 	sts	0x0242, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    4636:	80 91 90 00 	lds	r24, 0x0090
    463a:	8f 7d       	andi	r24, 0xDF	; 223
    463c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    4640:	80 91 71 00 	lds	r24, 0x0071
    4644:	8b 7f       	andi	r24, 0xFB	; 251
    4646:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    464a:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    464c:	80 91 90 00 	lds	r24, 0x0090
    4650:	80 68       	ori	r24, 0x80	; 128
    4652:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    4656:	80 91 71 00 	lds	r24, 0x0071
    465a:	82 60       	ori	r24, 0x02	; 2
    465c:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    4660:	9f 91       	pop	r25
    4662:	8f 91       	pop	r24
    4664:	0f 90       	pop	r0
    4666:	0f be       	out	0x3f, r0	; 63
    4668:	0f 90       	pop	r0
    466a:	1f 90       	pop	r1
    466c:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    466e:	10 92 43 02 	sts	0x0243, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    4672:	8c e0       	ldi	r24, 0x0C	; 12
    4674:	80 93 42 02 	sts	0x0242, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    4678:	80 91 90 00 	lds	r24, 0x0090
    467c:	8f 77       	andi	r24, 0x7F	; 127
    467e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    4682:	80 91 71 00 	lds	r24, 0x0071
    4686:	8d 7f       	andi	r24, 0xFD	; 253
    4688:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    468c:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    468e:	80 91 90 00 	lds	r24, 0x0090
    4692:	80 62       	ori	r24, 0x20	; 32
    4694:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    4698:	80 91 71 00 	lds	r24, 0x0071
    469c:	84 60       	ori	r24, 0x04	; 4
    469e:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    46a2:	9f 91       	pop	r25
    46a4:	8f 91       	pop	r24
    46a6:	0f 90       	pop	r0
    46a8:	0f be       	out	0x3f, r0	; 63
    46aa:	0f 90       	pop	r0
    46ac:	1f 90       	pop	r1
    46ae:	18 95       	reti
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    46b0:	81 e0       	ldi	r24, 0x01	; 1
    46b2:	80 93 43 02 	sts	0x0243, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    46b6:	8d e0       	ldi	r24, 0x0D	; 13
    46b8:	80 93 42 02 	sts	0x0242, r24
    46bc:	90 cf       	rjmp	.-224    	; 0x45de <__vector_35+0x4e>

000046be <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    46be:	1f 92       	push	r1
    46c0:	0f 92       	push	r0
    46c2:	0f b6       	in	r0, 0x3f	; 63
    46c4:	0f 92       	push	r0
    46c6:	11 24       	eor	r1, r1
    46c8:	8f 93       	push	r24
    46ca:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    46cc:	91 e0       	ldi	r25, 0x01	; 1
    46ce:	90 93 43 02 	sts	0x0243, r25
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    46d2:	8c e0       	ldi	r24, 0x0C	; 12
    46d4:	80 93 42 02 	sts	0x0242, r24

	firstSampleRight = 1;
    46d8:	90 93 05 02 	sts	0x0205, r25

//	LED_RED_OFF;

}
    46dc:	9f 91       	pop	r25
    46de:	8f 91       	pop	r24
    46e0:	0f 90       	pop	r0
    46e2:	0f be       	out	0x3f, r0	; 63
    46e4:	0f 90       	pop	r0
    46e6:	1f 90       	pop	r1
    46e8:	18 95       	reti

000046ea <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    46ea:	1f 92       	push	r1
    46ec:	0f 92       	push	r0
    46ee:	0f b6       	in	r0, 0x3f	; 63
    46f0:	0f 92       	push	r0
    46f2:	11 24       	eor	r1, r1
    46f4:	8f 93       	push	r24
    46f6:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    46f8:	91 e0       	ldi	r25, 0x01	; 1
    46fa:	90 93 43 02 	sts	0x0243, r25
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    46fe:	8d e0       	ldi	r24, 0x0D	; 13
    4700:	80 93 42 02 	sts	0x0242, r24

	firstSampleRight = 1;
    4704:	90 93 05 02 	sts	0x0205, r25

//	LED_RED_OFF;
}
    4708:	9f 91       	pop	r25
    470a:	8f 91       	pop	r24
    470c:	0f 90       	pop	r0
    470e:	0f be       	out	0x3f, r0	; 63
    4710:	0f 90       	pop	r0
    4712:	1f 90       	pop	r1
    4714:	18 95       	reti

00004716 <handleSoftAcceleration>:

// Handle "soft acceleration" that basically increase or decrease the current speed
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
    4716:	9f 92       	push	r9
    4718:	af 92       	push	r10
    471a:	bf 92       	push	r11
    471c:	cf 92       	push	r12
    471e:	df 92       	push	r13
    4720:	ef 92       	push	r14
    4722:	ff 92       	push	r15
    4724:	0f 93       	push	r16
    4726:	1f 93       	push	r17
		
	if(calibrateOdomFlag==0) {
    4728:	80 91 8e 05 	lds	r24, 0x058E
    472c:	88 23       	and	r24, r24
    472e:	51 f0       	breq	.+20     	; 0x4744 <handleSoftAcceleration+0x2e>
			}

		}
	}

}
    4730:	1f 91       	pop	r17
    4732:	0f 91       	pop	r16
    4734:	ff 90       	pop	r15
    4736:	ef 90       	pop	r14
    4738:	df 90       	pop	r13
    473a:	cf 90       	pop	r12
    473c:	bf 90       	pop	r11
    473e:	af 90       	pop	r10
    4740:	9f 90       	pop	r9
    4742:	08 95       	ret
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    4744:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    4748:	8b 01       	movw	r16, r22
    474a:	9c 01       	movw	r18, r24
    474c:	40 e0       	ldi	r20, 0x00	; 0
    474e:	50 e0       	ldi	r21, 0x00	; 0
    4750:	60 e0       	ldi	r22, 0x00	; 0
    4752:	70 e0       	ldi	r23, 0x00	; 0
    4754:	80 91 84 04 	lds	r24, 0x0484
    4758:	90 91 85 04 	lds	r25, 0x0485
    475c:	f0 91 86 04 	lds	r31, 0x0486
    4760:	b0 91 87 04 	lds	r27, 0x0487
    4764:	e0 90 88 04 	lds	r14, 0x0488
    4768:	c0 90 89 04 	lds	r12, 0x0489
    476c:	a0 90 8a 04 	lds	r10, 0x048A
    4770:	a0 91 8b 04 	lds	r26, 0x048B
    4774:	90 2e       	mov	r9, r16
    4776:	98 1a       	sub	r9, r24
    4778:	e1 e0       	ldi	r30, 0x01	; 1
    477a:	09 15       	cp	r16, r9
    477c:	08 f0       	brcs	.+2      	; 0x4780 <handleSoftAcceleration+0x6a>
    477e:	08 c1       	rjmp	.+528    	; 0x4990 <handleSoftAcceleration+0x27a>
    4780:	81 2f       	mov	r24, r17
    4782:	89 1b       	sub	r24, r25
    4784:	91 e0       	ldi	r25, 0x01	; 1
    4786:	18 17       	cp	r17, r24
    4788:	08 f0       	brcs	.+2      	; 0x478c <handleSoftAcceleration+0x76>
    478a:	fa c0       	rjmp	.+500    	; 0x4980 <handleSoftAcceleration+0x26a>
    478c:	f8 2e       	mov	r15, r24
    478e:	fe 1a       	sub	r15, r30
    4790:	e1 e0       	ldi	r30, 0x01	; 1
    4792:	8f 15       	cp	r24, r15
    4794:	08 f0       	brcs	.+2      	; 0x4798 <handleSoftAcceleration+0x82>
    4796:	eb c0       	rjmp	.+470    	; 0x496e <handleSoftAcceleration+0x258>
    4798:	9e 2b       	or	r25, r30
    479a:	82 2f       	mov	r24, r18
    479c:	8f 1b       	sub	r24, r31
    479e:	e1 e0       	ldi	r30, 0x01	; 1
    47a0:	28 17       	cp	r18, r24
    47a2:	08 f0       	brcs	.+2      	; 0x47a6 <handleSoftAcceleration+0x90>
    47a4:	dc c0       	rjmp	.+440    	; 0x495e <handleSoftAcceleration+0x248>
    47a6:	b8 2e       	mov	r11, r24
    47a8:	b9 1a       	sub	r11, r25
    47aa:	91 e0       	ldi	r25, 0x01	; 1
    47ac:	8b 15       	cp	r24, r11
    47ae:	08 f0       	brcs	.+2      	; 0x47b2 <handleSoftAcceleration+0x9c>
    47b0:	cd c0       	rjmp	.+410    	; 0x494c <handleSoftAcceleration+0x236>
    47b2:	e9 2b       	or	r30, r25
    47b4:	83 2f       	mov	r24, r19
    47b6:	8b 1b       	sub	r24, r27
    47b8:	91 e0       	ldi	r25, 0x01	; 1
    47ba:	38 17       	cp	r19, r24
    47bc:	08 f0       	brcs	.+2      	; 0x47c0 <handleSoftAcceleration+0xaa>
    47be:	be c0       	rjmp	.+380    	; 0x493c <handleSoftAcceleration+0x226>
    47c0:	d8 2e       	mov	r13, r24
    47c2:	de 1a       	sub	r13, r30
    47c4:	e1 e0       	ldi	r30, 0x01	; 1
    47c6:	8d 15       	cp	r24, r13
    47c8:	08 f0       	brcs	.+2      	; 0x47cc <handleSoftAcceleration+0xb6>
    47ca:	af c0       	rjmp	.+350    	; 0x492a <handleSoftAcceleration+0x214>
    47cc:	9e 2b       	or	r25, r30
    47ce:	8e 2d       	mov	r24, r14
    47d0:	81 95       	neg	r24
    47d2:	e1 e0       	ldi	r30, 0x01	; 1
    47d4:	48 17       	cp	r20, r24
    47d6:	08 f0       	brcs	.+2      	; 0x47da <handleSoftAcceleration+0xc4>
    47d8:	a0 c0       	rjmp	.+320    	; 0x491a <handleSoftAcceleration+0x204>
    47da:	b8 2f       	mov	r27, r24
    47dc:	b9 1b       	sub	r27, r25
    47de:	91 e0       	ldi	r25, 0x01	; 1
    47e0:	8b 17       	cp	r24, r27
    47e2:	08 f0       	brcs	.+2      	; 0x47e6 <handleSoftAcceleration+0xd0>
    47e4:	91 c0       	rjmp	.+290    	; 0x4908 <handleSoftAcceleration+0x1f2>
    47e6:	e9 2b       	or	r30, r25
    47e8:	8c 2d       	mov	r24, r12
    47ea:	81 95       	neg	r24
    47ec:	f1 e0       	ldi	r31, 0x01	; 1
    47ee:	58 17       	cp	r21, r24
    47f0:	08 f0       	brcs	.+2      	; 0x47f4 <handleSoftAcceleration+0xde>
    47f2:	81 c0       	rjmp	.+258    	; 0x48f6 <handleSoftAcceleration+0x1e0>
    47f4:	98 2f       	mov	r25, r24
    47f6:	9e 1b       	sub	r25, r30
    47f8:	e9 2f       	mov	r30, r25
    47fa:	91 e0       	ldi	r25, 0x01	; 1
    47fc:	8e 17       	cp	r24, r30
    47fe:	08 f0       	brcs	.+2      	; 0x4802 <handleSoftAcceleration+0xec>
    4800:	71 c0       	rjmp	.+226    	; 0x48e4 <handleSoftAcceleration+0x1ce>
    4802:	f9 2b       	or	r31, r25
    4804:	8a 2d       	mov	r24, r10
    4806:	81 95       	neg	r24
    4808:	91 e0       	ldi	r25, 0x01	; 1
    480a:	68 17       	cp	r22, r24
    480c:	08 f0       	brcs	.+2      	; 0x4810 <handleSoftAcceleration+0xfa>
    480e:	62 c0       	rjmp	.+196    	; 0x48d4 <handleSoftAcceleration+0x1be>
    4810:	38 2f       	mov	r19, r24
    4812:	3f 1b       	sub	r19, r31
    4814:	21 e0       	ldi	r18, 0x01	; 1
    4816:	83 17       	cp	r24, r19
    4818:	08 f0       	brcs	.+2      	; 0x481c <handleSoftAcceleration+0x106>
    481a:	55 c0       	rjmp	.+170    	; 0x48c6 <handleSoftAcceleration+0x1b0>
    481c:	92 2b       	or	r25, r18
    481e:	a1 95       	neg	r26
    4820:	a9 17       	cp	r26, r25
    4822:	09 f4       	brne	.+2      	; 0x4826 <handleSoftAcceleration+0x110>
    4824:	bd c0       	rjmp	.+378    	; 0x49a0 <handleSoftAcceleration+0x28a>
			speedStepCounter = getTime100MicroSec();
    4826:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    482a:	9b 01       	movw	r18, r22
    482c:	ac 01       	movw	r20, r24
    482e:	60 93 84 04 	sts	0x0484, r22
    4832:	30 93 85 04 	sts	0x0485, r19
    4836:	40 93 86 04 	sts	0x0486, r20
    483a:	50 93 87 04 	sts	0x0487, r21
    483e:	10 92 88 04 	sts	0x0488, r1
    4842:	10 92 89 04 	sts	0x0489, r1
    4846:	10 92 8a 04 	sts	0x048A, r1
    484a:	10 92 8b 04 	sts	0x048B, r1

			if(softAccEnabled) {
    484e:	80 91 8c 04 	lds	r24, 0x048C
    4852:	88 23       	and	r24, r24
    4854:	09 f4       	brne	.+2      	; 0x4858 <handleSoftAcceleration+0x142>
    4856:	bf c0       	rjmp	.+382    	; 0x49d6 <handleSoftAcceleration+0x2c0>
				if(pwm_right_desired == 0) {
    4858:	20 91 15 03 	lds	r18, 0x0315
    485c:	30 91 16 03 	lds	r19, 0x0316
    4860:	21 15       	cp	r18, r1
    4862:	31 05       	cpc	r19, r1
    4864:	09 f0       	breq	.+2      	; 0x4868 <handleSoftAcceleration+0x152>
    4866:	c8 c0       	rjmp	.+400    	; 0x49f8 <handleSoftAcceleration+0x2e2>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    4868:	10 92 1a 03 	sts	0x031A, r1
    486c:	10 92 19 03 	sts	0x0319, r1
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    4870:	20 91 17 03 	lds	r18, 0x0317
    4874:	30 91 18 03 	lds	r19, 0x0318
    4878:	21 15       	cp	r18, r1
    487a:	31 05       	cpc	r19, r1
    487c:	09 f4       	brne	.+2      	; 0x4880 <handleSoftAcceleration+0x16a>
    487e:	de c0       	rjmp	.+444    	; 0x4a3c <handleSoftAcceleration+0x326>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    4880:	40 91 1b 03 	lds	r20, 0x031B
    4884:	50 91 1c 03 	lds	r21, 0x031C
    4888:	42 9f       	mul	r20, r18
    488a:	c0 01       	movw	r24, r0
    488c:	43 9f       	mul	r20, r19
    488e:	90 0d       	add	r25, r0
    4890:	52 9f       	mul	r21, r18
    4892:	90 0d       	add	r25, r0
    4894:	11 24       	eor	r1, r1
    4896:	97 fd       	sbrc	r25, 7
    4898:	d1 c0       	rjmp	.+418    	; 0x4a3c <handleSoftAcceleration+0x326>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    489a:	42 17       	cp	r20, r18
    489c:	53 07       	cpc	r21, r19
    489e:	0c f0       	brlt	.+2      	; 0x48a2 <handleSoftAcceleration+0x18c>
    48a0:	d2 c0       	rjmp	.+420    	; 0x4a46 <handleSoftAcceleration+0x330>
					pwm_intermediate_left_desired += speedStep;
    48a2:	80 91 13 02 	lds	r24, 0x0213
    48a6:	ba 01       	movw	r22, r20
    48a8:	68 0f       	add	r22, r24
    48aa:	71 1d       	adc	r23, r1
    48ac:	70 93 1c 03 	sts	0x031C, r23
    48b0:	60 93 1b 03 	sts	0x031B, r22
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    48b4:	26 17       	cp	r18, r22
    48b6:	37 07       	cpc	r19, r23
    48b8:	0c f0       	brlt	.+2      	; 0x48bc <handleSoftAcceleration+0x1a6>
    48ba:	3a cf       	rjmp	.-396    	; 0x4730 <handleSoftAcceleration+0x1a>
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired -= speedStep;
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
    48bc:	30 93 1c 03 	sts	0x031C, r19
    48c0:	20 93 1b 03 	sts	0x031B, r18
    48c4:	35 cf       	rjmp	.-406    	; 0x4730 <handleSoftAcceleration+0x1a>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    48c6:	20 e0       	ldi	r18, 0x00	; 0
    48c8:	92 2b       	or	r25, r18
    48ca:	a1 95       	neg	r26
    48cc:	a9 17       	cp	r26, r25
    48ce:	09 f0       	breq	.+2      	; 0x48d2 <handleSoftAcceleration+0x1bc>
    48d0:	aa cf       	rjmp	.-172    	; 0x4826 <handleSoftAcceleration+0x110>
    48d2:	66 c0       	rjmp	.+204    	; 0x49a0 <handleSoftAcceleration+0x28a>
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	38 2f       	mov	r19, r24
    48d8:	3f 1b       	sub	r19, r31
    48da:	21 e0       	ldi	r18, 0x01	; 1
    48dc:	83 17       	cp	r24, r19
    48de:	08 f4       	brcc	.+2      	; 0x48e2 <handleSoftAcceleration+0x1cc>
    48e0:	9d cf       	rjmp	.-198    	; 0x481c <handleSoftAcceleration+0x106>
    48e2:	f1 cf       	rjmp	.-30     	; 0x48c6 <handleSoftAcceleration+0x1b0>
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	f9 2b       	or	r31, r25
    48e8:	8a 2d       	mov	r24, r10
    48ea:	81 95       	neg	r24
    48ec:	91 e0       	ldi	r25, 0x01	; 1
    48ee:	68 17       	cp	r22, r24
    48f0:	08 f4       	brcc	.+2      	; 0x48f4 <handleSoftAcceleration+0x1de>
    48f2:	8e cf       	rjmp	.-228    	; 0x4810 <handleSoftAcceleration+0xfa>
    48f4:	ef cf       	rjmp	.-34     	; 0x48d4 <handleSoftAcceleration+0x1be>
    48f6:	f0 e0       	ldi	r31, 0x00	; 0
    48f8:	98 2f       	mov	r25, r24
    48fa:	9e 1b       	sub	r25, r30
    48fc:	e9 2f       	mov	r30, r25
    48fe:	91 e0       	ldi	r25, 0x01	; 1
    4900:	8e 17       	cp	r24, r30
    4902:	08 f4       	brcc	.+2      	; 0x4906 <handleSoftAcceleration+0x1f0>
    4904:	7e cf       	rjmp	.-260    	; 0x4802 <handleSoftAcceleration+0xec>
    4906:	ee cf       	rjmp	.-36     	; 0x48e4 <handleSoftAcceleration+0x1ce>
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	e9 2b       	or	r30, r25
    490c:	8c 2d       	mov	r24, r12
    490e:	81 95       	neg	r24
    4910:	f1 e0       	ldi	r31, 0x01	; 1
    4912:	58 17       	cp	r21, r24
    4914:	08 f4       	brcc	.+2      	; 0x4918 <handleSoftAcceleration+0x202>
    4916:	6e cf       	rjmp	.-292    	; 0x47f4 <handleSoftAcceleration+0xde>
    4918:	ee cf       	rjmp	.-36     	; 0x48f6 <handleSoftAcceleration+0x1e0>
    491a:	e0 e0       	ldi	r30, 0x00	; 0
    491c:	b8 2f       	mov	r27, r24
    491e:	b9 1b       	sub	r27, r25
    4920:	91 e0       	ldi	r25, 0x01	; 1
    4922:	8b 17       	cp	r24, r27
    4924:	08 f4       	brcc	.+2      	; 0x4928 <handleSoftAcceleration+0x212>
    4926:	5f cf       	rjmp	.-322    	; 0x47e6 <handleSoftAcceleration+0xd0>
    4928:	ef cf       	rjmp	.-34     	; 0x4908 <handleSoftAcceleration+0x1f2>
    492a:	e0 e0       	ldi	r30, 0x00	; 0
    492c:	9e 2b       	or	r25, r30
    492e:	8e 2d       	mov	r24, r14
    4930:	81 95       	neg	r24
    4932:	e1 e0       	ldi	r30, 0x01	; 1
    4934:	48 17       	cp	r20, r24
    4936:	08 f4       	brcc	.+2      	; 0x493a <handleSoftAcceleration+0x224>
    4938:	50 cf       	rjmp	.-352    	; 0x47da <handleSoftAcceleration+0xc4>
    493a:	ef cf       	rjmp	.-34     	; 0x491a <handleSoftAcceleration+0x204>
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	d8 2e       	mov	r13, r24
    4940:	de 1a       	sub	r13, r30
    4942:	e1 e0       	ldi	r30, 0x01	; 1
    4944:	8d 15       	cp	r24, r13
    4946:	08 f4       	brcc	.+2      	; 0x494a <handleSoftAcceleration+0x234>
    4948:	41 cf       	rjmp	.-382    	; 0x47cc <handleSoftAcceleration+0xb6>
    494a:	ef cf       	rjmp	.-34     	; 0x492a <handleSoftAcceleration+0x214>
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	e9 2b       	or	r30, r25
    4950:	83 2f       	mov	r24, r19
    4952:	8b 1b       	sub	r24, r27
    4954:	91 e0       	ldi	r25, 0x01	; 1
    4956:	38 17       	cp	r19, r24
    4958:	08 f4       	brcc	.+2      	; 0x495c <handleSoftAcceleration+0x246>
    495a:	32 cf       	rjmp	.-412    	; 0x47c0 <handleSoftAcceleration+0xaa>
    495c:	ef cf       	rjmp	.-34     	; 0x493c <handleSoftAcceleration+0x226>
    495e:	e0 e0       	ldi	r30, 0x00	; 0
    4960:	b8 2e       	mov	r11, r24
    4962:	b9 1a       	sub	r11, r25
    4964:	91 e0       	ldi	r25, 0x01	; 1
    4966:	8b 15       	cp	r24, r11
    4968:	08 f4       	brcc	.+2      	; 0x496c <handleSoftAcceleration+0x256>
    496a:	23 cf       	rjmp	.-442    	; 0x47b2 <handleSoftAcceleration+0x9c>
    496c:	ef cf       	rjmp	.-34     	; 0x494c <handleSoftAcceleration+0x236>
    496e:	e0 e0       	ldi	r30, 0x00	; 0
    4970:	9e 2b       	or	r25, r30
    4972:	82 2f       	mov	r24, r18
    4974:	8f 1b       	sub	r24, r31
    4976:	e1 e0       	ldi	r30, 0x01	; 1
    4978:	28 17       	cp	r18, r24
    497a:	08 f4       	brcc	.+2      	; 0x497e <handleSoftAcceleration+0x268>
    497c:	14 cf       	rjmp	.-472    	; 0x47a6 <handleSoftAcceleration+0x90>
    497e:	ef cf       	rjmp	.-34     	; 0x495e <handleSoftAcceleration+0x248>
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	f8 2e       	mov	r15, r24
    4984:	fe 1a       	sub	r15, r30
    4986:	e1 e0       	ldi	r30, 0x01	; 1
    4988:	8f 15       	cp	r24, r15
    498a:	08 f4       	brcc	.+2      	; 0x498e <handleSoftAcceleration+0x278>
    498c:	05 cf       	rjmp	.-502    	; 0x4798 <handleSoftAcceleration+0x82>
    498e:	ef cf       	rjmp	.-34     	; 0x496e <handleSoftAcceleration+0x258>
    4990:	e0 e0       	ldi	r30, 0x00	; 0
    4992:	81 2f       	mov	r24, r17
    4994:	89 1b       	sub	r24, r25
    4996:	91 e0       	ldi	r25, 0x01	; 1
    4998:	18 17       	cp	r17, r24
    499a:	08 f4       	brcc	.+2      	; 0x499e <handleSoftAcceleration+0x288>
    499c:	f7 ce       	rjmp	.-530    	; 0x478c <handleSoftAcceleration+0x76>
    499e:	f0 cf       	rjmp	.-32     	; 0x4980 <handleSoftAcceleration+0x26a>
    49a0:	33 23       	and	r19, r19
    49a2:	09 f0       	breq	.+2      	; 0x49a6 <handleSoftAcceleration+0x290>
    49a4:	40 cf       	rjmp	.-384    	; 0x4826 <handleSoftAcceleration+0x110>
    49a6:	ee 23       	and	r30, r30
    49a8:	09 f0       	breq	.+2      	; 0x49ac <handleSoftAcceleration+0x296>
    49aa:	3d cf       	rjmp	.-390    	; 0x4826 <handleSoftAcceleration+0x110>
    49ac:	bb 23       	and	r27, r27
    49ae:	09 f0       	breq	.+2      	; 0x49b2 <handleSoftAcceleration+0x29c>
    49b0:	3a cf       	rjmp	.-396    	; 0x4826 <handleSoftAcceleration+0x110>
    49b2:	dd 20       	and	r13, r13
    49b4:	09 f0       	breq	.+2      	; 0x49b8 <handleSoftAcceleration+0x2a2>
    49b6:	37 cf       	rjmp	.-402    	; 0x4826 <handleSoftAcceleration+0x110>
    49b8:	bb 20       	and	r11, r11
    49ba:	09 f0       	breq	.+2      	; 0x49be <handleSoftAcceleration+0x2a8>
    49bc:	34 cf       	rjmp	.-408    	; 0x4826 <handleSoftAcceleration+0x110>
    49be:	61 e0       	ldi	r22, 0x01	; 1
    49c0:	6f 15       	cp	r22, r15
    49c2:	08 f4       	brcc	.+2      	; 0x49c6 <handleSoftAcceleration+0x2b0>
    49c4:	30 cf       	rjmp	.-416    	; 0x4826 <handleSoftAcceleration+0x110>
    49c6:	f6 16       	cp	r15, r22
    49c8:	09 f0       	breq	.+2      	; 0x49cc <handleSoftAcceleration+0x2b6>
    49ca:	b2 ce       	rjmp	.-668    	; 0x4730 <handleSoftAcceleration+0x1a>
    49cc:	7f e8       	ldi	r23, 0x8F	; 143
    49ce:	79 15       	cp	r23, r9
    49d0:	08 f0       	brcs	.+2      	; 0x49d4 <handleSoftAcceleration+0x2be>
    49d2:	ae ce       	rjmp	.-676    	; 0x4730 <handleSoftAcceleration+0x1a>
    49d4:	28 cf       	rjmp	.-432    	; 0x4826 <handleSoftAcceleration+0x110>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    49d6:	80 91 15 03 	lds	r24, 0x0315
    49da:	90 91 16 03 	lds	r25, 0x0316
    49de:	90 93 1a 03 	sts	0x031A, r25
    49e2:	80 93 19 03 	sts	0x0319, r24
				pwm_intermediate_left_desired = pwm_left_desired;
    49e6:	80 91 17 03 	lds	r24, 0x0317
    49ea:	90 91 18 03 	lds	r25, 0x0318
    49ee:	90 93 1c 03 	sts	0x031C, r25
    49f2:	80 93 1b 03 	sts	0x031B, r24
    49f6:	9c ce       	rjmp	.-712    	; 0x4730 <handleSoftAcceleration+0x1a>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    49f8:	40 91 19 03 	lds	r20, 0x0319
    49fc:	50 91 1a 03 	lds	r21, 0x031A
    4a00:	42 9f       	mul	r20, r18
    4a02:	c0 01       	movw	r24, r0
    4a04:	43 9f       	mul	r20, r19
    4a06:	90 0d       	add	r25, r0
    4a08:	52 9f       	mul	r21, r18
    4a0a:	90 0d       	add	r25, r0
    4a0c:	11 24       	eor	r1, r1
    4a0e:	97 fd       	sbrc	r25, 7
    4a10:	2b cf       	rjmp	.-426    	; 0x4868 <handleSoftAcceleration+0x152>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    4a12:	42 17       	cp	r20, r18
    4a14:	53 07       	cpc	r21, r19
    4a16:	4c f5       	brge	.+82     	; 0x4a6a <handleSoftAcceleration+0x354>
					pwm_intermediate_right_desired += speedStep;
    4a18:	80 91 13 02 	lds	r24, 0x0213
    4a1c:	ba 01       	movw	r22, r20
    4a1e:	68 0f       	add	r22, r24
    4a20:	71 1d       	adc	r23, r1
    4a22:	70 93 1a 03 	sts	0x031A, r23
    4a26:	60 93 19 03 	sts	0x0319, r22
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    4a2a:	26 17       	cp	r18, r22
    4a2c:	37 07       	cpc	r19, r23
    4a2e:	0c f0       	brlt	.+2      	; 0x4a32 <handleSoftAcceleration+0x31c>
    4a30:	1f cf       	rjmp	.-450    	; 0x4870 <handleSoftAcceleration+0x15a>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    4a32:	30 93 1a 03 	sts	0x031A, r19
    4a36:	20 93 19 03 	sts	0x0319, r18
    4a3a:	1a cf       	rjmp	.-460    	; 0x4870 <handleSoftAcceleration+0x15a>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    4a3c:	10 92 1c 03 	sts	0x031C, r1
    4a40:	10 92 1b 03 	sts	0x031B, r1
    4a44:	75 ce       	rjmp	.-790    	; 0x4730 <handleSoftAcceleration+0x1a>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    4a46:	24 17       	cp	r18, r20
    4a48:	35 07       	cpc	r19, r21
    4a4a:	0c f0       	brlt	.+2      	; 0x4a4e <handleSoftAcceleration+0x338>
    4a4c:	71 ce       	rjmp	.-798    	; 0x4730 <handleSoftAcceleration+0x1a>
					pwm_intermediate_left_desired -= speedStep;
    4a4e:	80 91 13 02 	lds	r24, 0x0213
    4a52:	ba 01       	movw	r22, r20
    4a54:	68 1b       	sub	r22, r24
    4a56:	71 09       	sbc	r23, r1
    4a58:	70 93 1c 03 	sts	0x031C, r23
    4a5c:	60 93 1b 03 	sts	0x031B, r22
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    4a60:	62 17       	cp	r22, r18
    4a62:	73 07       	cpc	r23, r19
    4a64:	0c f0       	brlt	.+2      	; 0x4a68 <handleSoftAcceleration+0x352>
    4a66:	64 ce       	rjmp	.-824    	; 0x4730 <handleSoftAcceleration+0x1a>
    4a68:	29 cf       	rjmp	.-430    	; 0x48bc <handleSoftAcceleration+0x1a6>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    4a6a:	24 17       	cp	r18, r20
    4a6c:	35 07       	cpc	r19, r21
    4a6e:	0c f0       	brlt	.+2      	; 0x4a72 <handleSoftAcceleration+0x35c>
    4a70:	ff ce       	rjmp	.-514    	; 0x4870 <handleSoftAcceleration+0x15a>
					pwm_intermediate_right_desired -= speedStep;
    4a72:	80 91 13 02 	lds	r24, 0x0213
    4a76:	ba 01       	movw	r22, r20
    4a78:	68 1b       	sub	r22, r24
    4a7a:	71 09       	sbc	r23, r1
    4a7c:	70 93 1a 03 	sts	0x031A, r23
    4a80:	60 93 19 03 	sts	0x0319, r22
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    4a84:	62 17       	cp	r22, r18
    4a86:	73 07       	cpc	r23, r19
    4a88:	0c f0       	brlt	.+2      	; 0x4a8c <handleSoftAcceleration+0x376>
    4a8a:	f2 ce       	rjmp	.-540    	; 0x4870 <handleSoftAcceleration+0x15a>
    4a8c:	d2 cf       	rjmp	.-92     	; 0x4a32 <handleSoftAcceleration+0x31c>

00004a8e <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    4a8e:	2f 92       	push	r2
    4a90:	3f 92       	push	r3
    4a92:	4f 92       	push	r4
    4a94:	5f 92       	push	r5
    4a96:	6f 92       	push	r6
    4a98:	7f 92       	push	r7
    4a9a:	8f 92       	push	r8
    4a9c:	9f 92       	push	r9
    4a9e:	af 92       	push	r10
    4aa0:	bf 92       	push	r11
    4aa2:	cf 92       	push	r12
    4aa4:	df 92       	push	r13
    4aa6:	ef 92       	push	r14
    4aa8:	ff 92       	push	r15
    4aaa:	0f 93       	push	r16
    4aac:	1f 93       	push	r17
    4aae:	cf 93       	push	r28
    4ab0:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    4ab2:	74 e1       	ldi	r23, 0x14	; 20
    4ab4:	87 2e       	mov	r8, r23
    4ab6:	91 2c       	mov	r9, r1
    4ab8:	90 92 03 09 	sts	0x0903, r9
    4abc:	80 92 02 09 	sts	0x0902, r8
    calibration[1][0] = 40;
    4ac0:	88 e2       	ldi	r24, 0x28	; 40
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	90 93 13 09 	sts	0x0913, r25
    4ac8:	80 93 12 09 	sts	0x0912, r24
    calibration[2][0] = 59;
    4acc:	8b e3       	ldi	r24, 0x3B	; 59
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	90 93 23 09 	sts	0x0923, r25
    4ad4:	80 93 22 09 	sts	0x0922, r24
    calibration[3][0] = 79;
    4ad8:	8f e4       	ldi	r24, 0x4F	; 79
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	90 93 33 09 	sts	0x0933, r25
    4ae0:	80 93 32 09 	sts	0x0932, r24
    calibration[4][0] = 100;
    4ae4:	84 e6       	ldi	r24, 0x64	; 100
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	90 93 43 09 	sts	0x0943, r25
    4aec:	80 93 42 09 	sts	0x0942, r24
    calibration[5][0] = 120;
    4af0:	c8 e7       	ldi	r28, 0x78	; 120
    4af2:	d0 e0       	ldi	r29, 0x00	; 0
    4af4:	d0 93 53 09 	sts	0x0953, r29
    4af8:	c0 93 52 09 	sts	0x0952, r28
    calibration[6][0] = 139;
    4afc:	6b e8       	ldi	r22, 0x8B	; 139
    4afe:	e6 2e       	mov	r14, r22
    4b00:	f1 2c       	mov	r15, r1
    4b02:	f0 92 63 09 	sts	0x0963, r15
    4b06:	e0 92 62 09 	sts	0x0962, r14
    calibration[7][0] = 159;
    4b0a:	8f e9       	ldi	r24, 0x9F	; 159
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	90 93 73 09 	sts	0x0973, r25
    4b12:	80 93 72 09 	sts	0x0972, r24
	calibration[8][0] = 180;
    4b16:	54 eb       	ldi	r21, 0xB4	; 180
    4b18:	a5 2e       	mov	r10, r21
    4b1a:	b1 2c       	mov	r11, r1
    4b1c:	b0 92 83 09 	sts	0x0983, r11
    4b20:	a0 92 82 09 	sts	0x0982, r10
    calibration[0][1] = 19;    	// real speed measured in mm/s
    4b24:	23 e1       	ldi	r18, 0x13	; 19
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	30 93 05 09 	sts	0x0905, r19
    4b2c:	20 93 04 09 	sts	0x0904, r18
    calibration[1][1] = 47;
    4b30:	8f e2       	ldi	r24, 0x2F	; 47
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	90 93 15 09 	sts	0x0915, r25
    4b38:	80 93 14 09 	sts	0x0914, r24
    calibration[2][1] = 72;
    4b3c:	88 e4       	ldi	r24, 0x48	; 72
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	90 93 25 09 	sts	0x0925, r25
    4b44:	80 93 24 09 	sts	0x0924, r24
    calibration[3][1] = 91;
    4b48:	8b e5       	ldi	r24, 0x5B	; 91
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	90 93 35 09 	sts	0x0935, r25
    4b50:	80 93 34 09 	sts	0x0934, r24
    calibration[4][1] = 109;
    4b54:	8d e6       	ldi	r24, 0x6D	; 109
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	90 93 45 09 	sts	0x0945, r25
    4b5c:	80 93 44 09 	sts	0x0944, r24
    calibration[5][1] = 125;
    4b60:	4d e7       	ldi	r20, 0x7D	; 125
    4b62:	c4 2e       	mov	r12, r20
    4b64:	d1 2c       	mov	r13, r1
    4b66:	d0 92 55 09 	sts	0x0955, r13
    4b6a:	c0 92 54 09 	sts	0x0954, r12
    calibration[6][1] = 143;
    4b6e:	8f e8       	ldi	r24, 0x8F	; 143
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	90 93 65 09 	sts	0x0965, r25
    4b76:	80 93 64 09 	sts	0x0964, r24
    calibration[7][1] = 160;
    4b7a:	40 ea       	ldi	r20, 0xA0	; 160
    4b7c:	50 e0       	ldi	r21, 0x00	; 0
    4b7e:	50 93 75 09 	sts	0x0975, r21
    4b82:	40 93 74 09 	sts	0x0974, r20
	calibration[8][1] = 174;
    4b86:	8e ea       	ldi	r24, 0xAE	; 174
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	90 93 85 09 	sts	0x0985, r25
    4b8e:	80 93 84 09 	sts	0x0984, r24
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    4b92:	30 93 07 09 	sts	0x0907, r19
    4b96:	20 93 06 09 	sts	0x0906, r18
    calibration[1][2] = 39;
    4b9a:	67 e2       	ldi	r22, 0x27	; 39
    4b9c:	70 e0       	ldi	r23, 0x00	; 0
    4b9e:	70 93 17 09 	sts	0x0917, r23
    4ba2:	60 93 16 09 	sts	0x0916, r22
    calibration[2][2] = 60;
    4ba6:	0c e3       	ldi	r16, 0x3C	; 60
    4ba8:	10 e0       	ldi	r17, 0x00	; 0
    4baa:	10 93 27 09 	sts	0x0927, r17
    4bae:	00 93 26 09 	sts	0x0926, r16
    calibration[3][2] = 80;
    4bb2:	20 e5       	ldi	r18, 0x50	; 80
    4bb4:	22 2e       	mov	r2, r18
    4bb6:	31 2c       	mov	r3, r1
    4bb8:	30 92 37 09 	sts	0x0937, r3
    4bbc:	20 92 36 09 	sts	0x0936, r2
    calibration[4][2] = 99;
    4bc0:	a3 e6       	ldi	r26, 0x63	; 99
    4bc2:	b0 e0       	ldi	r27, 0x00	; 0
    4bc4:	b0 93 47 09 	sts	0x0947, r27
    4bc8:	a0 93 46 09 	sts	0x0946, r26
    calibration[5][2] = 119;
    4bcc:	27 e7       	ldi	r18, 0x77	; 119
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	30 93 57 09 	sts	0x0957, r19
    4bd4:	20 93 56 09 	sts	0x0956, r18
    calibration[6][2] = 140;
    4bd8:	ec e8       	ldi	r30, 0x8C	; 140
    4bda:	f0 e0       	ldi	r31, 0x00	; 0
    4bdc:	f0 93 67 09 	sts	0x0967, r31
    4be0:	e0 93 66 09 	sts	0x0966, r30
    calibration[7][2] = 160;
    4be4:	50 93 77 09 	sts	0x0977, r21
    4be8:	40 93 76 09 	sts	0x0976, r20
	calibration[8][2] = 180;
    4bec:	b0 92 87 09 	sts	0x0987, r11
    4bf0:	a0 92 86 09 	sts	0x0986, r10
    calibration[0][3] = 23;    	// real speed measured in mm/s
    4bf4:	87 e1       	ldi	r24, 0x17	; 23
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	90 93 09 09 	sts	0x0909, r25
    4bfc:	80 93 08 09 	sts	0x0908, r24
    calibration[1][3] = 46;
    4c00:	9e e2       	ldi	r25, 0x2E	; 46
    4c02:	49 2e       	mov	r4, r25
    4c04:	51 2c       	mov	r5, r1
    4c06:	50 92 19 09 	sts	0x0919, r5
    4c0a:	40 92 18 09 	sts	0x0918, r4
    calibration[2][3] = 64;
    4c0e:	80 e4       	ldi	r24, 0x40	; 64
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	90 93 29 09 	sts	0x0929, r25
    4c16:	80 93 28 09 	sts	0x0928, r24
    calibration[3][3] = 81;
    4c1a:	81 e5       	ldi	r24, 0x51	; 81
    4c1c:	68 2e       	mov	r6, r24
    4c1e:	71 2c       	mov	r7, r1
    4c20:	70 92 39 09 	sts	0x0939, r7
    4c24:	60 92 38 09 	sts	0x0938, r6
    calibration[4][3] = 97;
    4c28:	81 e6       	ldi	r24, 0x61	; 97
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	90 93 49 09 	sts	0x0949, r25
    4c30:	80 93 48 09 	sts	0x0948, r24
    calibration[5][3] = 112;
    4c34:	80 e7       	ldi	r24, 0x70	; 112
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	90 93 59 09 	sts	0x0959, r25
    4c3c:	80 93 58 09 	sts	0x0958, r24
    calibration[6][3] = 125;
    4c40:	d0 92 69 09 	sts	0x0969, r13
    4c44:	c0 92 68 09 	sts	0x0968, r12
    calibration[7][3] = 139;
    4c48:	f0 92 79 09 	sts	0x0979, r15
    4c4c:	e0 92 78 09 	sts	0x0978, r14
	calibration[8][3] = 152;
    4c50:	88 e9       	ldi	r24, 0x98	; 152
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	90 93 89 09 	sts	0x0989, r25
    4c58:	80 93 88 09 	sts	0x0988, r24
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    4c5c:	90 92 0b 09 	sts	0x090B, r9
    4c60:	80 92 0a 09 	sts	0x090A, r8
    calibration[1][4] = 39;
    4c64:	70 93 1b 09 	sts	0x091B, r23
    4c68:	60 93 1a 09 	sts	0x091A, r22
    calibration[2][4] = 60;
    4c6c:	10 93 2b 09 	sts	0x092B, r17
    4c70:	00 93 2a 09 	sts	0x092A, r16
    calibration[3][4] = 79;
    4c74:	8f e4       	ldi	r24, 0x4F	; 79
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	90 93 3b 09 	sts	0x093B, r25
    4c7c:	80 93 3a 09 	sts	0x093A, r24
    calibration[4][4] = 99;
    4c80:	b0 93 4b 09 	sts	0x094B, r27
    4c84:	a0 93 4a 09 	sts	0x094A, r26
    calibration[5][4] = 120;
    4c88:	d0 93 5b 09 	sts	0x095B, r29
    4c8c:	c0 93 5a 09 	sts	0x095A, r28
    calibration[6][4] = 140;
    4c90:	f0 93 6b 09 	sts	0x096B, r31
    4c94:	e0 93 6a 09 	sts	0x096A, r30
    calibration[7][4] = 160;
    4c98:	50 93 7b 09 	sts	0x097B, r21
    4c9c:	40 93 7a 09 	sts	0x097A, r20
	calibration[8][4] = 179;
    4ca0:	83 eb       	ldi	r24, 0xB3	; 179
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	90 93 8b 09 	sts	0x098B, r25
    4ca8:	80 93 8a 09 	sts	0x098A, r24
    calibration[0][5] = 18;    	// real speed measured in mm/s
    4cac:	82 e1       	ldi	r24, 0x12	; 18
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	90 93 0d 09 	sts	0x090D, r25
    4cb4:	80 93 0c 09 	sts	0x090C, r24
    calibration[1][5] = 45;
    4cb8:	8d e2       	ldi	r24, 0x2D	; 45
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	90 93 1d 09 	sts	0x091D, r25
    4cc0:	80 93 1c 09 	sts	0x091C, r24
    calibration[2][5] = 68;
    4cc4:	84 e4       	ldi	r24, 0x44	; 68
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
    4cc8:	90 93 2d 09 	sts	0x092D, r25
    4ccc:	80 93 2c 09 	sts	0x092C, r24
    calibration[3][5] = 87;
    4cd0:	87 e5       	ldi	r24, 0x57	; 87
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	90 93 3d 09 	sts	0x093D, r25
    4cd8:	80 93 3c 09 	sts	0x093C, r24
    calibration[4][5] = 105;
    4cdc:	89 e6       	ldi	r24, 0x69	; 105
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	90 93 4d 09 	sts	0x094D, r25
    4ce4:	80 93 4c 09 	sts	0x094C, r24
    calibration[5][5] = 119;
    4ce8:	30 93 5d 09 	sts	0x095D, r19
    4cec:	20 93 5c 09 	sts	0x095C, r18
    calibration[6][5] = 137;
    4cf0:	89 e8       	ldi	r24, 0x89	; 137
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	90 93 6d 09 	sts	0x096D, r25
    4cf8:	80 93 6c 09 	sts	0x096C, r24
    calibration[7][5] = 151;
    4cfc:	87 e9       	ldi	r24, 0x97	; 151
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	90 93 7d 09 	sts	0x097D, r25
    4d04:	80 93 7c 09 	sts	0x097C, r24
	calibration[8][5] = 168;
    4d08:	88 ea       	ldi	r24, 0xA8	; 168
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	90 93 8d 09 	sts	0x098D, r25
    4d10:	80 93 8c 09 	sts	0x098C, r24
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    4d14:	90 92 0f 09 	sts	0x090F, r9
    4d18:	80 92 0e 09 	sts	0x090E, r8
    calibration[1][6] = 39;
    4d1c:	70 93 1f 09 	sts	0x091F, r23
    4d20:	60 93 1e 09 	sts	0x091E, r22
    calibration[2][6] = 59;
    4d24:	8b e3       	ldi	r24, 0x3B	; 59
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	90 93 2f 09 	sts	0x092F, r25
    4d2c:	80 93 2e 09 	sts	0x092E, r24
    calibration[3][6] = 80;
    4d30:	30 92 3f 09 	sts	0x093F, r3
    4d34:	20 92 3e 09 	sts	0x093E, r2
    calibration[4][6] = 100;
    4d38:	84 e6       	ldi	r24, 0x64	; 100
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	90 93 4f 09 	sts	0x094F, r25
    4d40:	80 93 4e 09 	sts	0x094E, r24
    calibration[5][6] = 119;
    4d44:	30 93 5f 09 	sts	0x095F, r19
    4d48:	20 93 5e 09 	sts	0x095E, r18
    calibration[6][6] = 139;
    4d4c:	f0 92 6f 09 	sts	0x096F, r15
    4d50:	e0 92 6e 09 	sts	0x096E, r14
    calibration[7][6] = 160;
    4d54:	50 93 7f 09 	sts	0x097F, r21
    4d58:	40 93 7e 09 	sts	0x097E, r20
	calibration[8][6] = 180;
    4d5c:	b0 92 8f 09 	sts	0x098F, r11
    4d60:	a0 92 8e 09 	sts	0x098E, r10
    calibration[0][7] = 22;    	// real speed measured in mm/s
    4d64:	86 e1       	ldi	r24, 0x16	; 22
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	90 93 11 09 	sts	0x0911, r25
    4d6c:	80 93 10 09 	sts	0x0910, r24
    calibration[1][7] = 46;
    4d70:	50 92 21 09 	sts	0x0921, r5
    4d74:	40 92 20 09 	sts	0x0920, r4
    calibration[2][7] = 65;
    4d78:	81 e4       	ldi	r24, 0x41	; 65
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	90 93 31 09 	sts	0x0931, r25
    4d80:	80 93 30 09 	sts	0x0930, r24
    calibration[3][7] = 81;
    4d84:	70 92 41 09 	sts	0x0941, r7
    4d88:	60 92 40 09 	sts	0x0940, r6
    calibration[4][7] = 96;
    4d8c:	80 e6       	ldi	r24, 0x60	; 96
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	90 93 51 09 	sts	0x0951, r25
    4d94:	80 93 50 09 	sts	0x0950, r24
    calibration[5][7] = 111;
    4d98:	8f e6       	ldi	r24, 0x6F	; 111
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	90 93 61 09 	sts	0x0961, r25
    4da0:	80 93 60 09 	sts	0x0960, r24
    calibration[6][7] = 125;
    4da4:	d0 92 71 09 	sts	0x0971, r13
    4da8:	c0 92 70 09 	sts	0x0970, r12
    calibration[7][7] = 139;
    4dac:	f0 92 81 09 	sts	0x0981, r15
    4db0:	e0 92 80 09 	sts	0x0980, r14
	calibration[8][7] = 153;
    4db4:	89 e9       	ldi	r24, 0x99	; 153
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	90 93 91 09 	sts	0x0991, r25
    4dbc:	80 93 90 09 	sts	0x0990, r24

    writeCalibrationToFlash();
    4dc0:	0e 94 ea 3e 	call	0x7dd4	; 0x7dd4 <writeCalibrationToFlash>
}
    4dc4:	df 91       	pop	r29
    4dc6:	cf 91       	pop	r28
    4dc8:	1f 91       	pop	r17
    4dca:	0f 91       	pop	r16
    4dcc:	ff 90       	pop	r15
    4dce:	ef 90       	pop	r14
    4dd0:	df 90       	pop	r13
    4dd2:	cf 90       	pop	r12
    4dd4:	bf 90       	pop	r11
    4dd6:	af 90       	pop	r10
    4dd8:	9f 90       	pop	r9
    4dda:	8f 90       	pop	r8
    4ddc:	7f 90       	pop	r7
    4dde:	6f 90       	pop	r6
    4de0:	5f 90       	pop	r5
    4de2:	4f 90       	pop	r4
    4de4:	3f 90       	pop	r3
    4de6:	2f 90       	pop	r2
    4de8:	08 95       	ret

00004dea <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    4dea:	80 91 81 0b 	lds	r24, 0x0B81
    4dee:	84 30       	cpi	r24, 0x04	; 4
    4df0:	09 f4       	brne	.+2      	; 0x4df4 <handleCalibration+0xa>
    4df2:	cf c1       	rjmp	.+926    	; 0x5192 <handleCalibration+0x3a8>
    4df4:	85 30       	cpi	r24, 0x05	; 5
    4df6:	80 f0       	brcs	.+32     	; 0x4e18 <handleCalibration+0x2e>
    4df8:	86 30       	cpi	r24, 0x06	; 6
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <handleCalibration+0x14>
    4dfc:	60 c2       	rjmp	.+1216   	; 0x52be <handleCalibration+0x4d4>
    4dfe:	86 30       	cpi	r24, 0x06	; 6
    4e00:	b0 f5       	brcc	.+108    	; 0x4e6e <handleCalibration+0x84>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
    4e02:	80 91 db 08 	lds	r24, 0x08DB
    4e06:	8f 5f       	subi	r24, 0xFF	; 255
    4e08:	80 93 db 08 	sts	0x08DB, r24
            if(calibVelIndex == 10) {
    4e0c:	8a 30       	cpi	r24, 0x0A	; 10
    4e0e:	09 f4       	brne	.+2      	; 0x4e12 <handleCalibration+0x28>
    4e10:	b7 c2       	rjmp	.+1390   	; 0x5380 <handleCalibration+0x596>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = CALIBRATION_STATE_SET_SPEED;
    4e12:	10 92 81 0b 	sts	0x0B81, r1
    4e16:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4e18:	81 30       	cpi	r24, 0x01	; 1
    4e1a:	09 f4       	brne	.+2      	; 0x4e1e <handleCalibration+0x34>
    4e1c:	6b c1       	rjmp	.+726    	; 0x50f4 <handleCalibration+0x30a>
    4e1e:	81 30       	cpi	r24, 0x01	; 1
    4e20:	08 f0       	brcs	.+2      	; 0x4e24 <handleCalibration+0x3a>
    4e22:	73 c0       	rjmp	.+230    	; 0x4f0a <handleCalibration+0x120>
			}
			break;


    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    4e24:	80 91 73 05 	lds	r24, 0x0573
    4e28:	88 23       	and	r24, r24
    4e2a:	09 f0       	breq	.+2      	; 0x4e2e <handleCalibration+0x44>
    4e2c:	56 c2       	rjmp	.+1196   	; 0x52da <handleCalibration+0x4f0>
				pwm_intermediate_right_desired = 0;
    4e2e:	10 92 1a 03 	sts	0x031A, r1
    4e32:	10 92 19 03 	sts	0x0319, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    4e36:	80 91 db 08 	lds	r24, 0x08DB
    4e3a:	25 e0       	ldi	r18, 0x05	; 5
    4e3c:	82 9f       	mul	r24, r18
    4e3e:	c0 01       	movw	r24, r0
    4e40:	11 24       	eor	r1, r1
    4e42:	88 0f       	add	r24, r24
    4e44:	99 1f       	adc	r25, r25
    4e46:	88 0f       	add	r24, r24
    4e48:	99 1f       	adc	r25, r25
    4e4a:	90 93 1c 03 	sts	0x031C, r25
    4e4e:	80 93 1b 03 	sts	0x031B, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = CALIBRATION_STATE_START_MEASURE;
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	80 93 81 0b 	sts	0x0B81, r24
            timeoutOdometry = getTime100MicroSec();
    4e58:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    4e5c:	60 93 51 0b 	sts	0x0B51, r22
    4e60:	70 93 52 0b 	sts	0x0B52, r23
    4e64:	80 93 53 0b 	sts	0x0B53, r24
    4e68:	90 93 54 0b 	sts	0x0B54, r25
    4e6c:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4e6e:	87 30       	cpi	r24, 0x07	; 7
    4e70:	09 f4       	brne	.+2      	; 0x4e74 <handleCalibration+0x8a>
    4e72:	f8 c1       	rjmp	.+1008   	; 0x5264 <handleCalibration+0x47a>
    4e74:	88 30       	cpi	r24, 0x08	; 8
    4e76:	79 f6       	brne	.-98     	; 0x4e16 <handleCalibration+0x2c>
	            timeoutOdometry = getTime100MicroSec();
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved.
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4e78:	80 91 73 05 	lds	r24, 0x0573
    4e7c:	88 23       	and	r24, r24
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <handleCalibration+0x98>
    4e80:	d9 c0       	rjmp	.+434    	; 0x5034 <handleCalibration+0x24a>
    4e82:	82 30       	cpi	r24, 0x02	; 2
    4e84:	09 f4       	brne	.+2      	; 0x4e88 <handleCalibration+0x9e>
    4e86:	d6 c0       	rjmp	.+428    	; 0x5034 <handleCalibration+0x24a>
				}
				if(proximityResult[8] > maxGround) {
					maxGround = proximityResult[8];
				}
			} else {
				if(proximityResult[11] < minGround) {
    4e88:	20 91 8b 02 	lds	r18, 0x028B
    4e8c:	30 91 8c 02 	lds	r19, 0x028C
    4e90:	80 91 ec 04 	lds	r24, 0x04EC
    4e94:	90 91 ed 04 	lds	r25, 0x04ED
    4e98:	28 17       	cp	r18, r24
    4e9a:	39 07       	cpc	r19, r25
    4e9c:	24 f4       	brge	.+8      	; 0x4ea6 <handleCalibration+0xbc>
					minGround = proximityResult[11];
    4e9e:	30 93 ed 04 	sts	0x04ED, r19
    4ea2:	20 93 ec 04 	sts	0x04EC, r18
				}
				if(proximityResult[11] > maxGround) {
    4ea6:	80 91 ee 04 	lds	r24, 0x04EE
    4eaa:	90 91 ef 04 	lds	r25, 0x04EF
    4eae:	82 17       	cp	r24, r18
    4eb0:	93 07       	cpc	r25, r19
    4eb2:	24 f4       	brge	.+8      	; 0x4ebc <handleCalibration+0xd2>
					maxGround = proximityResult[11];
    4eb4:	30 93 ef 04 	sts	0x04EF, r19
    4eb8:	20 93 ee 04 	sts	0x04EE, r18
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_5_SEC) {    // the robot seems to be still, go to next velcoity
    4ebc:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    4ec0:	20 91 51 0b 	lds	r18, 0x0B51
    4ec4:	30 91 52 0b 	lds	r19, 0x0B52
    4ec8:	40 91 53 0b 	lds	r20, 0x0B53
    4ecc:	50 91 54 0b 	lds	r21, 0x0B54
    4ed0:	62 1b       	sub	r22, r18
    4ed2:	73 0b       	sbc	r23, r19
    4ed4:	84 0b       	sbc	r24, r20
    4ed6:	95 0b       	sbc	r25, r21
    4ed8:	6e 5c       	subi	r22, 0xCE	; 206
    4eda:	7b 4b       	sbci	r23, 0xBB	; 187
    4edc:	80 40       	sbci	r24, 0x00	; 0
    4ede:	90 40       	sbci	r25, 0x00	; 0
    4ee0:	08 f4       	brcc	.+2      	; 0x4ee4 <handleCalibration+0xfa>
    4ee2:	99 cf       	rjmp	.-206    	; 0x4e16 <handleCalibration+0x2c>
				calibrationThr = (minGround + maxGround)>>1;	// Take the average of the 2 as the reference threshold value.
    4ee4:	80 91 ee 04 	lds	r24, 0x04EE
    4ee8:	90 91 ef 04 	lds	r25, 0x04EF
    4eec:	20 91 ec 04 	lds	r18, 0x04EC
    4ef0:	30 91 ed 04 	lds	r19, 0x04ED
    4ef4:	82 0f       	add	r24, r18
    4ef6:	93 1f       	adc	r25, r19
    4ef8:	95 95       	asr	r25
    4efa:	87 95       	ror	r24
    4efc:	90 93 f1 04 	sts	0x04F1, r25
    4f00:	80 93 f0 04 	sts	0x04F0, r24
				//calibrationThrLow = calibrationThr - ((maxGround-minGround)>>2);	// Use an histeresys between max and min (not needed...).
				//calibrationThrHigh = calibrationThr + ((maxGround-minGround)>>2);
                calibState = CALIBRATION_STATE_SET_SPEED;
    4f04:	10 92 81 0b 	sts	0x0B81, r1
    4f08:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4f0a:	82 30       	cpi	r24, 0x02	; 2
    4f0c:	09 f4       	brne	.+2      	; 0x4f10 <handleCalibration+0x126>
    4f0e:	7d c1       	rjmp	.+762    	; 0x520a <handleCalibration+0x420>
    4f10:	83 30       	cpi	r24, 0x03	; 3
    4f12:	09 f0       	breq	.+2      	; 0x4f16 <handleCalibration+0x12c>
    4f14:	80 cf       	rjmp	.-256    	; 0x4e16 <handleCalibration+0x2c>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4f16:	80 91 73 05 	lds	r24, 0x0573
    4f1a:	88 23       	and	r24, r24
    4f1c:	09 f4       	brne	.+2      	; 0x4f20 <handleCalibration+0x136>
    4f1e:	97 c0       	rjmp	.+302    	; 0x504e <handleCalibration+0x264>
    4f20:	82 30       	cpi	r24, 0x02	; 2
    4f22:	09 f4       	brne	.+2      	; 0x4f26 <handleCalibration+0x13c>
    4f24:	94 c0       	rjmp	.+296    	; 0x504e <handleCalibration+0x264>
                    updateOdomData();
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    4f26:	20 91 8b 02 	lds	r18, 0x028B
    4f2a:	30 91 8c 02 	lds	r19, 0x028C
    4f2e:	80 91 f0 04 	lds	r24, 0x04F0
    4f32:	90 91 f1 04 	lds	r25, 0x04F1
    4f36:	28 17       	cp	r18, r24
    4f38:	39 07       	cpc	r19, r25
    4f3a:	0c f0       	brlt	.+2      	; 0x4f3e <handleCalibration+0x154>
    4f3c:	55 c0       	rjmp	.+170    	; 0x4fe8 <handleCalibration+0x1fe>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    4f3e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    4f42:	20 91 6c 05 	lds	r18, 0x056C
    4f46:	30 91 6d 05 	lds	r19, 0x056D
    4f4a:	40 91 6e 05 	lds	r20, 0x056E
    4f4e:	50 91 6f 05 	lds	r21, 0x056F
    4f52:	62 1b       	sub	r22, r18
    4f54:	73 0b       	sbc	r23, r19
    4f56:	84 0b       	sbc	r24, r20
    4f58:	95 0b       	sbc	r25, r21
    4f5a:	60 93 6c 05 	sts	0x056C, r22
    4f5e:	70 93 6d 05 	sts	0x056D, r23
    4f62:	80 93 6e 05 	sts	0x056E, r24
    4f66:	90 93 6f 05 	sts	0x056F, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    4f6a:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <__floatunsisf>
    4f6e:	20 e0       	ldi	r18, 0x00	; 0
    4f70:	30 e0       	ldi	r19, 0x00	; 0
    4f72:	40 ed       	ldi	r20, 0xD0	; 208
    4f74:	52 e4       	ldi	r21, 0x42	; 66
    4f76:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    4f7a:	20 e0       	ldi	r18, 0x00	; 0
    4f7c:	34 e2       	ldi	r19, 0x24	; 36
    4f7e:	44 e7       	ldi	r20, 0x74	; 116
    4f80:	59 e4       	ldi	r21, 0x49	; 73
    4f82:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    4f86:	9b 01       	movw	r18, r22
    4f88:	ac 01       	movw	r20, r24
    4f8a:	64 e1       	ldi	r22, 0x14	; 20
    4f8c:	7e e2       	ldi	r23, 0x2E	; 46
    4f8e:	88 e7       	ldi	r24, 0x78	; 120
    4f90:	93 e4       	ldi	r25, 0x43	; 67
    4f92:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    4f96:	0e 94 b1 4c 	call	0x9962	; 0x9962 <__fixunssfsi>
    4f9a:	70 93 97 0b 	sts	0x0B97, r23
    4f9e:	60 93 96 0b 	sts	0x0B96, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    4fa2:	20 91 da 04 	lds	r18, 0x04DA
    4fa6:	30 91 db 04 	lds	r19, 0x04DB
    4faa:	40 e0       	ldi	r20, 0x00	; 0
    4fac:	50 e0       	ldi	r21, 0x00	; 0
    4fae:	60 91 d4 04 	lds	r22, 0x04D4
    4fb2:	70 91 d5 04 	lds	r23, 0x04D5
    4fb6:	80 91 d6 04 	lds	r24, 0x04D6
    4fba:	90 91 d7 04 	lds	r25, 0x04D7
    4fbe:	0e 94 a1 4e 	call	0x9d42	; 0x9d42 <__divmodsi4>
    4fc2:	30 93 df 04 	sts	0x04DF, r19
    4fc6:	20 93 de 04 	sts	0x04DE, r18
					updateOdomData();
    4fca:	0e 94 26 18 	call	0x304c	; 0x304c <updateOdomData>
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
    4fce:	84 e0       	ldi	r24, 0x04	; 4
    4fd0:	80 93 81 0b 	sts	0x0B81, r24
                    timeoutOdometry = getTime100MicroSec();;
    4fd4:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    4fd8:	60 93 51 0b 	sts	0x0B51, r22
    4fdc:	70 93 52 0b 	sts	0x0B52, r23
    4fe0:	80 93 53 0b 	sts	0x0B53, r24
    4fe4:	90 93 54 0b 	sts	0x0B54, r25
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    4fe8:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    4fec:	20 91 51 0b 	lds	r18, 0x0B51
    4ff0:	30 91 52 0b 	lds	r19, 0x0B52
    4ff4:	40 91 53 0b 	lds	r20, 0x0B53
    4ff8:	50 91 54 0b 	lds	r21, 0x0B54
    4ffc:	62 1b       	sub	r22, r18
    4ffe:	73 0b       	sbc	r23, r19
    5000:	84 0b       	sbc	r24, r20
    5002:	95 0b       	sbc	r25, r21
    5004:	6c 59       	subi	r22, 0x9C	; 156
    5006:	7d 4c       	sbci	r23, 0xCD	; 205
    5008:	88 40       	sbci	r24, 0x08	; 8
    500a:	90 40       	sbci	r25, 0x00	; 0
    500c:	08 f4       	brcc	.+2      	; 0x5010 <handleCalibration+0x226>
    500e:	03 cf       	rjmp	.-506    	; 0x4e16 <handleCalibration+0x2c>
            	tempVel = 0;
    5010:	10 92 97 0b 	sts	0x0B97, r1
    5014:	10 92 96 0b 	sts	0x0B96, r1
				avgLeftSpeed = 0;
    5018:	10 92 dd 04 	sts	0x04DD, r1
    501c:	10 92 dc 04 	sts	0x04DC, r1
				avgRightSpeed = 0;
    5020:	10 92 df 04 	sts	0x04DF, r1
    5024:	10 92 de 04 	sts	0x04DE, r1
                updateOdomData();
    5028:	0e 94 26 18 	call	0x304c	; 0x304c <updateOdomData>
                calibState = CALIBRATION_STATE_NEXT;
    502c:	85 e0       	ldi	r24, 0x05	; 5
    502e:	80 93 81 0b 	sts	0x0B81, r24
    5032:	08 95       	ret
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved.
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < minGround) {
    5034:	20 91 85 02 	lds	r18, 0x0285
    5038:	30 91 86 02 	lds	r19, 0x0286
    503c:	80 91 ec 04 	lds	r24, 0x04EC
    5040:	90 91 ed 04 	lds	r25, 0x04ED
    5044:	28 17       	cp	r18, r24
    5046:	39 07       	cpc	r19, r25
    5048:	0c f0       	brlt	.+2      	; 0x504c <handleCalibration+0x262>
    504a:	2d cf       	rjmp	.-422    	; 0x4ea6 <handleCalibration+0xbc>
    504c:	28 cf       	rjmp	.-432    	; 0x4e9e <handleCalibration+0xb4>
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {	
    504e:	20 91 85 02 	lds	r18, 0x0285
    5052:	30 91 86 02 	lds	r19, 0x0286
    5056:	80 91 f0 04 	lds	r24, 0x04F0
    505a:	90 91 f1 04 	lds	r25, 0x04F1
    505e:	28 17       	cp	r18, r24
    5060:	39 07       	cpc	r19, r25
    5062:	0c f0       	brlt	.+2      	; 0x5066 <handleCalibration+0x27c>
    5064:	c1 cf       	rjmp	.-126    	; 0x4fe8 <handleCalibration+0x1fe>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    5066:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    506a:	20 91 6c 05 	lds	r18, 0x056C
    506e:	30 91 6d 05 	lds	r19, 0x056D
    5072:	40 91 6e 05 	lds	r20, 0x056E
    5076:	50 91 6f 05 	lds	r21, 0x056F
    507a:	62 1b       	sub	r22, r18
    507c:	73 0b       	sbc	r23, r19
    507e:	84 0b       	sbc	r24, r20
    5080:	95 0b       	sbc	r25, r21
    5082:	60 93 6c 05 	sts	0x056C, r22
    5086:	70 93 6d 05 	sts	0x056D, r23
    508a:	80 93 6e 05 	sts	0x056E, r24
    508e:	90 93 6f 05 	sts	0x056F, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    5092:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <__floatunsisf>
    5096:	20 e0       	ldi	r18, 0x00	; 0
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	40 ed       	ldi	r20, 0xD0	; 208
    509c:	52 e4       	ldi	r21, 0x42	; 66
    509e:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    50a2:	20 e0       	ldi	r18, 0x00	; 0
    50a4:	34 e2       	ldi	r19, 0x24	; 36
    50a6:	44 e7       	ldi	r20, 0x74	; 116
    50a8:	59 e4       	ldi	r21, 0x49	; 73
    50aa:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    50ae:	9b 01       	movw	r18, r22
    50b0:	ac 01       	movw	r20, r24
    50b2:	64 e1       	ldi	r22, 0x14	; 20
    50b4:	7e e2       	ldi	r23, 0x2E	; 46
    50b6:	88 e7       	ldi	r24, 0x78	; 120
    50b8:	93 e4       	ldi	r25, 0x43	; 67
    50ba:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    50be:	0e 94 b1 4c 	call	0x9962	; 0x9962 <__fixunssfsi>
    50c2:	70 93 97 0b 	sts	0x0B97, r23
    50c6:	60 93 96 0b 	sts	0x0B96, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    50ca:	20 91 d8 04 	lds	r18, 0x04D8
    50ce:	30 91 d9 04 	lds	r19, 0x04D9
    50d2:	40 e0       	ldi	r20, 0x00	; 0
    50d4:	50 e0       	ldi	r21, 0x00	; 0
    50d6:	60 91 d0 04 	lds	r22, 0x04D0
    50da:	70 91 d1 04 	lds	r23, 0x04D1
    50de:	80 91 d2 04 	lds	r24, 0x04D2
    50e2:	90 91 d3 04 	lds	r25, 0x04D3
    50e6:	0e 94 a1 4e 	call	0x9d42	; 0x9d42 <__divmodsi4>
    50ea:	30 93 dd 04 	sts	0x04DD, r19
    50ee:	20 93 dc 04 	sts	0x04DC, r18
    50f2:	6b cf       	rjmp	.-298    	; 0x4fca <handleCalibration+0x1e0>
            calibState = CALIBRATION_STATE_START_MEASURE;
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    50f4:	80 91 73 05 	lds	r24, 0x0573
    50f8:	88 23       	and	r24, r24
    50fa:	91 f1       	breq	.+100    	; 0x5160 <handleCalibration+0x376>
    50fc:	82 30       	cpi	r24, 0x02	; 2
    50fe:	81 f1       	breq	.+96     	; 0x5160 <handleCalibration+0x376>
                    timeOdometry = getTime100MicroSec();;
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    5100:	20 91 8b 02 	lds	r18, 0x028B
    5104:	30 91 8c 02 	lds	r19, 0x028C
    5108:	80 91 f0 04 	lds	r24, 0x04F0
    510c:	90 91 f1 04 	lds	r25, 0x04F1
    5110:	28 17       	cp	r18, r24
    5112:	39 07       	cpc	r19, r25
    5114:	0c f0       	brlt	.+2      	; 0x5118 <handleCalibration+0x32e>
    5116:	68 cf       	rjmp	.-304    	; 0x4fe8 <handleCalibration+0x1fe>
					rightSumCount = 0;
    5118:	10 92 db 04 	sts	0x04DB, r1
    511c:	10 92 da 04 	sts	0x04DA, r1
					rightSpeedSumOdom = 0;
    5120:	10 92 d4 04 	sts	0x04D4, r1
    5124:	10 92 d5 04 	sts	0x04D5, r1
    5128:	10 92 d6 04 	sts	0x04D6, r1
    512c:	10 92 d7 04 	sts	0x04D7, r1
                    timeOdometry = getTime100MicroSec();;
    5130:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    5134:	60 93 6c 05 	sts	0x056C, r22
    5138:	70 93 6d 05 	sts	0x056D, r23
    513c:	80 93 6e 05 	sts	0x056E, r24
    5140:	90 93 6f 05 	sts	0x056F, r25
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
    5144:	82 e0       	ldi	r24, 0x02	; 2
    5146:	80 93 81 0b 	sts	0x0B81, r24
                    timeoutOdometry = getTime100MicroSec();;
    514a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    514e:	60 93 51 0b 	sts	0x0B51, r22
    5152:	70 93 52 0b 	sts	0x0B52, r23
    5156:	80 93 53 0b 	sts	0x0B53, r24
    515a:	90 93 54 0b 	sts	0x0B54, r25
    515e:	44 cf       	rjmp	.-376    	; 0x4fe8 <handleCalibration+0x1fe>
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {				
    5160:	20 91 85 02 	lds	r18, 0x0285
    5164:	30 91 86 02 	lds	r19, 0x0286
    5168:	80 91 f0 04 	lds	r24, 0x04F0
    516c:	90 91 f1 04 	lds	r25, 0x04F1
    5170:	28 17       	cp	r18, r24
    5172:	39 07       	cpc	r19, r25
    5174:	0c f0       	brlt	.+2      	; 0x5178 <handleCalibration+0x38e>
    5176:	38 cf       	rjmp	.-400    	; 0x4fe8 <handleCalibration+0x1fe>
                	leftSumCount = 0;
    5178:	10 92 d9 04 	sts	0x04D9, r1
    517c:	10 92 d8 04 	sts	0x04D8, r1
                    leftSpeedSumOdom = 0;
    5180:	10 92 d0 04 	sts	0x04D0, r1
    5184:	10 92 d1 04 	sts	0x04D1, r1
    5188:	10 92 d2 04 	sts	0x04D2, r1
    518c:	10 92 d3 04 	sts	0x04D3, r1
    5190:	cf cf       	rjmp	.-98     	; 0x5130 <handleCalibration+0x346>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5192:	80 91 73 05 	lds	r24, 0x0573
    5196:	88 23       	and	r24, r24
    5198:	61 f1       	breq	.+88     	; 0x51f2 <handleCalibration+0x408>
    519a:	82 30       	cpi	r24, 0x02	; 2
    519c:	51 f1       	breq	.+84     	; 0x51f2 <handleCalibration+0x408>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_NEXT;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    519e:	20 91 8b 02 	lds	r18, 0x028B
    51a2:	30 91 8c 02 	lds	r19, 0x028C
    51a6:	80 91 f0 04 	lds	r24, 0x04F0
    51aa:	90 91 f1 04 	lds	r25, 0x04F1
    51ae:	82 17       	cp	r24, r18
    51b0:	93 07       	cpc	r25, r19
    51b2:	1c f4       	brge	.+6      	; 0x51ba <handleCalibration+0x3d0>
					calibState = CALIBRATION_STATE_NEXT;
    51b4:	85 e0       	ldi	r24, 0x05	; 5
    51b6:	80 93 81 0b 	sts	0x0B81, r24
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    51ba:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    51be:	20 91 51 0b 	lds	r18, 0x0B51
    51c2:	30 91 52 0b 	lds	r19, 0x0B52
    51c6:	40 91 53 0b 	lds	r20, 0x0B53
    51ca:	50 91 54 0b 	lds	r21, 0x0B54
    51ce:	62 1b       	sub	r22, r18
    51d0:	73 0b       	sbc	r23, r19
    51d2:	84 0b       	sbc	r24, r20
    51d4:	95 0b       	sbc	r25, r21
    51d6:	6c 59       	subi	r22, 0x9C	; 156
    51d8:	7d 4c       	sbci	r23, 0xCD	; 205
    51da:	88 40       	sbci	r24, 0x08	; 8
    51dc:	90 40       	sbci	r25, 0x00	; 0
    51de:	08 f4       	brcc	.+2      	; 0x51e2 <handleCalibration+0x3f8>
    51e0:	1a ce       	rjmp	.-972    	; 0x4e16 <handleCalibration+0x2c>
            	tempVel = 0;
    51e2:	10 92 97 0b 	sts	0x0B97, r1
    51e6:	10 92 96 0b 	sts	0x0B96, r1
                //updateOdomData();
                calibState = CALIBRATION_STATE_NEXT;
    51ea:	85 e0       	ldi	r24, 0x05	; 5
    51ec:	80 93 81 0b 	sts	0x0B81, r24
    51f0:	08 95       	ret
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    51f2:	20 91 85 02 	lds	r18, 0x0285
    51f6:	30 91 86 02 	lds	r19, 0x0286
    51fa:	80 91 f0 04 	lds	r24, 0x04F0
    51fe:	90 91 f1 04 	lds	r25, 0x04F1
    5202:	82 17       	cp	r24, r18
    5204:	93 07       	cpc	r25, r19
    5206:	cc f6       	brge	.-78     	; 0x51ba <handleCalibration+0x3d0>
    5208:	d5 cf       	rjmp	.-86     	; 0x51b4 <handleCalibration+0x3ca>
                calibState = CALIBRATION_STATE_NEXT;
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    520a:	80 91 73 05 	lds	r24, 0x0573
    520e:	88 23       	and	r24, r24
    5210:	e1 f0       	breq	.+56     	; 0x524a <handleCalibration+0x460>
    5212:	82 30       	cpi	r24, 0x02	; 2
    5214:	d1 f0       	breq	.+52     	; 0x524a <handleCalibration+0x460>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    5216:	20 91 8b 02 	lds	r18, 0x028B
    521a:	30 91 8c 02 	lds	r19, 0x028C
    521e:	80 91 f0 04 	lds	r24, 0x04F0
    5222:	90 91 f1 04 	lds	r25, 0x04F1
    5226:	82 17       	cp	r24, r18
    5228:	93 07       	cpc	r25, r19
    522a:	0c f0       	brlt	.+2      	; 0x522e <handleCalibration+0x444>
    522c:	dd ce       	rjmp	.-582    	; 0x4fe8 <handleCalibration+0x1fe>
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
    522e:	83 e0       	ldi	r24, 0x03	; 3
    5230:	80 93 81 0b 	sts	0x0B81, r24
                    timeoutOdometry = getTime100MicroSec();;
    5234:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    5238:	60 93 51 0b 	sts	0x0B51, r22
    523c:	70 93 52 0b 	sts	0x0B52, r23
    5240:	80 93 53 0b 	sts	0x0B53, r24
    5244:	90 93 54 0b 	sts	0x0B54, r25
    5248:	cf ce       	rjmp	.-610    	; 0x4fe8 <handleCalibration+0x1fe>
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    524a:	20 91 85 02 	lds	r18, 0x0285
    524e:	30 91 86 02 	lds	r19, 0x0286
    5252:	80 91 f0 04 	lds	r24, 0x04F0
    5256:	90 91 f1 04 	lds	r25, 0x04F1
    525a:	82 17       	cp	r24, r18
    525c:	93 07       	cpc	r25, r19
    525e:	0c f0       	brlt	.+2      	; 0x5262 <handleCalibration+0x478>
    5260:	c3 ce       	rjmp	.-634    	; 0x4fe8 <handleCalibration+0x1fe>
    5262:	e5 cf       	rjmp	.-54     	; 0x522e <handleCalibration+0x444>
			calibState = CALIBRATION_STATE_FIND_THRS_1;
			break;
		
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line securily (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
    5264:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    5268:	20 91 51 0b 	lds	r18, 0x0B51
    526c:	30 91 52 0b 	lds	r19, 0x0B52
    5270:	40 91 53 0b 	lds	r20, 0x0B53
    5274:	50 91 54 0b 	lds	r21, 0x0B54
    5278:	62 1b       	sub	r22, r18
    527a:	73 0b       	sbc	r23, r19
    527c:	84 0b       	sbc	r24, r20
    527e:	95 0b       	sbc	r25, r21
    5280:	60 59       	subi	r22, 0x90	; 144
    5282:	75 42       	sbci	r23, 0x25	; 37
    5284:	80 40       	sbci	r24, 0x00	; 0
    5286:	90 40       	sbci	r25, 0x00	; 0
    5288:	08 f4       	brcc	.+2      	; 0x528c <handleCalibration+0x4a2>
    528a:	c5 cd       	rjmp	.-1142   	; 0x4e16 <handleCalibration+0x2c>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
    528c:	80 91 73 05 	lds	r24, 0x0573
    5290:	88 23       	and	r24, r24
    5292:	09 f4       	brne	.+2      	; 0x5296 <handleCalibration+0x4ac>
    5294:	40 c0       	rjmp	.+128    	; 0x5316 <handleCalibration+0x52c>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    5296:	81 30       	cpi	r24, 0x01	; 1
    5298:	09 f4       	brne	.+2      	; 0x529c <handleCalibration+0x4b2>
    529a:	a1 c0       	rjmp	.+322    	; 0x53de <handleCalibration+0x5f4>
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
					pwm_intermediate_left_desired = 0;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    529c:	82 30       	cpi	r24, 0x02	; 2
    529e:	09 f4       	brne	.+2      	; 0x52a2 <handleCalibration+0x4b8>
    52a0:	a9 c0       	rjmp	.+338    	; 0x53f4 <handleCalibration+0x60a>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
	        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    52a2:	83 30       	cpi	r24, 0x03	; 3
    52a4:	09 f0       	breq	.+2      	; 0x52a8 <handleCalibration+0x4be>
    52a6:	41 c0       	rjmp	.+130    	; 0x532a <handleCalibration+0x540>
					pwm_intermediate_right_desired = -((INDEX_STEP*3)<<2);
    52a8:	84 ec       	ldi	r24, 0xC4	; 196
    52aa:	9f ef       	ldi	r25, 0xFF	; 255
    52ac:	90 93 1a 03 	sts	0x031A, r25
    52b0:	80 93 19 03 	sts	0x0319, r24
					pwm_intermediate_left_desired = 0;
    52b4:	10 92 1c 03 	sts	0x031C, r1
    52b8:	10 92 1b 03 	sts	0x031B, r1
    52bc:	36 c0       	rjmp	.+108    	; 0x532a <handleCalibration+0x540>

void handleCalibration() {

	switch(calibState) {
		case CALIBRATION_STATE_FIND_THRS_0:
			timeoutOdometry = getTime100MicroSec();
    52be:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    52c2:	60 93 51 0b 	sts	0x0B51, r22
    52c6:	70 93 52 0b 	sts	0x0B52, r23
    52ca:	80 93 53 0b 	sts	0x0B53, r24
    52ce:	90 93 54 0b 	sts	0x0B54, r25
			calibState = CALIBRATION_STATE_FIND_THRS_1;
    52d2:	87 e0       	ldi	r24, 0x07	; 7
    52d4:	80 93 81 0b 	sts	0x0B81, r24
    52d8:	08 95       	ret

    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    52da:	81 30       	cpi	r24, 0x01	; 1
    52dc:	f1 f1       	breq	.+124    	; 0x535a <handleCalibration+0x570>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    52de:	82 30       	cpi	r24, 0x02	; 2
    52e0:	09 f4       	brne	.+2      	; 0x52e4 <handleCalibration+0x4fa>
    52e2:	67 c0       	rjmp	.+206    	; 0x53b2 <handleCalibration+0x5c8>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    52e4:	83 30       	cpi	r24, 0x03	; 3
    52e6:	09 f0       	breq	.+2      	; 0x52ea <handleCalibration+0x500>
    52e8:	b4 cd       	rjmp	.-1176   	; 0x4e52 <handleCalibration+0x68>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    52ea:	80 91 db 08 	lds	r24, 0x08DB
    52ee:	25 e0       	ldi	r18, 0x05	; 5
    52f0:	82 9f       	mul	r24, r18
    52f2:	c0 01       	movw	r24, r0
    52f4:	11 24       	eor	r1, r1
    52f6:	88 0f       	add	r24, r24
    52f8:	99 1f       	adc	r25, r25
    52fa:	88 0f       	add	r24, r24
    52fc:	99 1f       	adc	r25, r25
    52fe:	90 95       	com	r25
    5300:	81 95       	neg	r24
    5302:	9f 4f       	sbci	r25, 0xFF	; 255
    5304:	90 93 1a 03 	sts	0x031A, r25
    5308:	80 93 19 03 	sts	0x0319, r24
				pwm_intermediate_left_desired = 0;
    530c:	10 92 1c 03 	sts	0x031C, r1
    5310:	10 92 1b 03 	sts	0x031B, r1
    5314:	9e cd       	rjmp	.-1220   	; 0x4e52 <handleCalibration+0x68>
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line securily (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = 0;
    5316:	10 92 1a 03 	sts	0x031A, r1
    531a:	10 92 19 03 	sts	0x0319, r1
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
    531e:	8c e3       	ldi	r24, 0x3C	; 60
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	90 93 1c 03 	sts	0x031C, r25
    5326:	80 93 1b 03 	sts	0x031B, r24
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
	        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
					pwm_intermediate_right_desired = -((INDEX_STEP*3)<<2);
					pwm_intermediate_left_desired = 0;
				}               
				minGround = 1023;
    532a:	8f ef       	ldi	r24, 0xFF	; 255
    532c:	93 e0       	ldi	r25, 0x03	; 3
    532e:	90 93 ed 04 	sts	0x04ED, r25
    5332:	80 93 ec 04 	sts	0x04EC, r24
				maxGround = 0;
    5336:	10 92 ef 04 	sts	0x04EF, r1
    533a:	10 92 ee 04 	sts	0x04EE, r1
	            calibState = CALIBRATION_STATE_FIND_THRS_2;
    533e:	88 e0       	ldi	r24, 0x08	; 8
    5340:	80 93 81 0b 	sts	0x0B81, r24
	            timeoutOdometry = getTime100MicroSec();
    5344:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    5348:	60 93 51 0b 	sts	0x0B51, r22
    534c:	70 93 52 0b 	sts	0x0B52, r23
    5350:	80 93 53 0b 	sts	0x0B53, r24
    5354:	90 93 54 0b 	sts	0x0B54, r25
    5358:	08 95       	ret
    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    535a:	80 91 db 08 	lds	r24, 0x08DB
    535e:	25 e0       	ldi	r18, 0x05	; 5
    5360:	82 9f       	mul	r24, r18
    5362:	c0 01       	movw	r24, r0
    5364:	11 24       	eor	r1, r1
    5366:	88 0f       	add	r24, r24
    5368:	99 1f       	adc	r25, r25
    536a:	88 0f       	add	r24, r24
    536c:	99 1f       	adc	r25, r25
    536e:	90 93 1a 03 	sts	0x031A, r25
    5372:	80 93 19 03 	sts	0x0319, r24
				pwm_intermediate_left_desired = 0;
    5376:	10 92 1c 03 	sts	0x031C, r1
    537a:	10 92 1b 03 	sts	0x031B, r1
    537e:	69 cd       	rjmp	.-1326   	; 0x4e52 <handleCalibration+0x68>
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    5380:	91 e0       	ldi	r25, 0x01	; 1
    5382:	90 93 db 08 	sts	0x08DB, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    5386:	80 91 73 05 	lds	r24, 0x0573
    538a:	88 23       	and	r24, r24
    538c:	21 f4       	brne	.+8      	; 0x5396 <handleCalibration+0x5ac>
                	calibWheel = LEFT_WHEEL_BW_SC;
    538e:	82 e0       	ldi	r24, 0x02	; 2
    5390:	80 93 73 05 	sts	0x0573, r24
    5394:	3e cd       	rjmp	.-1412   	; 0x4e12 <handleCalibration+0x28>
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    5396:	81 30       	cpi	r24, 0x01	; 1
    5398:	c1 f1       	breq	.+112    	; 0x540a <handleCalibration+0x620>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    539a:	82 30       	cpi	r24, 0x02	; 2
    539c:	d1 f1       	breq	.+116    	; 0x5412 <handleCalibration+0x628>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
					break;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    539e:	83 30       	cpi	r24, 0x03	; 3
    53a0:	09 f0       	breq	.+2      	; 0x53a4 <handleCalibration+0x5ba>
    53a2:	37 cd       	rjmp	.-1426   	; 0x4e12 <handleCalibration+0x28>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    53a4:	10 92 73 05 	sts	0x0573, r1
					// red off
					writeCalibrationToFlash();
    53a8:	0e 94 ea 3e 	call	0x7dd4	; 0x7dd4 <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    53ac:	10 92 8e 05 	sts	0x058E, r1
    53b0:	30 cd       	rjmp	.-1440   	; 0x4e12 <handleCalibration+0x28>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    53b2:	10 92 1a 03 	sts	0x031A, r1
    53b6:	10 92 19 03 	sts	0x0319, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    53ba:	80 91 db 08 	lds	r24, 0x08DB
    53be:	25 e0       	ldi	r18, 0x05	; 5
    53c0:	82 9f       	mul	r24, r18
    53c2:	c0 01       	movw	r24, r0
    53c4:	11 24       	eor	r1, r1
    53c6:	88 0f       	add	r24, r24
    53c8:	99 1f       	adc	r25, r25
    53ca:	88 0f       	add	r24, r24
    53cc:	99 1f       	adc	r25, r25
    53ce:	90 95       	com	r25
    53d0:	81 95       	neg	r24
    53d2:	9f 4f       	sbci	r25, 0xFF	; 255
    53d4:	90 93 1c 03 	sts	0x031C, r25
    53d8:	80 93 1b 03 	sts	0x031B, r24
    53dc:	3a cd       	rjmp	.-1420   	; 0x4e52 <handleCalibration+0x68>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
    53de:	8c e3       	ldi	r24, 0x3C	; 60
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	90 93 1a 03 	sts	0x031A, r25
    53e6:	80 93 19 03 	sts	0x0319, r24
					pwm_intermediate_left_desired = 0;
    53ea:	10 92 1c 03 	sts	0x031C, r1
    53ee:	10 92 1b 03 	sts	0x031B, r1
    53f2:	9b cf       	rjmp	.-202    	; 0x532a <handleCalibration+0x540>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
					pwm_intermediate_right_desired = 0;
    53f4:	10 92 1a 03 	sts	0x031A, r1
    53f8:	10 92 19 03 	sts	0x0319, r1
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
    53fc:	84 ec       	ldi	r24, 0xC4	; 196
    53fe:	9f ef       	ldi	r25, 0xFF	; 255
    5400:	90 93 1c 03 	sts	0x031C, r25
    5404:	80 93 1b 03 	sts	0x031B, r24
    5408:	90 cf       	rjmp	.-224    	; 0x532a <handleCalibration+0x540>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    540a:	83 e0       	ldi	r24, 0x03	; 3
    540c:	80 93 73 05 	sts	0x0573, r24
    5410:	00 cd       	rjmp	.-1536   	; 0x4e12 <handleCalibration+0x28>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    5412:	90 93 73 05 	sts	0x0573, r25
					calibrateOdomFlag = 0;
    5416:	10 92 8e 05 	sts	0x058E, r1
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
    541a:	86 e0       	ldi	r24, 0x06	; 6
    541c:	80 93 81 0b 	sts	0x0B81, r24
    5420:	08 95       	ret

00005422 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    5422:	2f 92       	push	r2
    5424:	3f 92       	push	r3
    5426:	4f 92       	push	r4
    5428:	5f 92       	push	r5
    542a:	6f 92       	push	r6
    542c:	7f 92       	push	r7
    542e:	8f 92       	push	r8
    5430:	9f 92       	push	r9
    5432:	af 92       	push	r10
    5434:	bf 92       	push	r11
    5436:	cf 92       	push	r12
    5438:	df 92       	push	r13
    543a:	ef 92       	push	r14
    543c:	ff 92       	push	r15
    543e:	0f 93       	push	r16
    5440:	1f 93       	push	r17
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
    5442:	40 91 8e 05 	lds	r20, 0x058E
    5446:	44 23       	and	r20, r20
    5448:	09 f4       	brne	.+2      	; 0x544c <handleMotorsWithSpeedController+0x2a>
    544a:	4e c2       	rjmp	.+1180   	; 0x58e8 <handleMotorsWithSpeedController+0x4c6>
    544c:	20 91 19 03 	lds	r18, 0x0319
    5450:	30 91 1a 03 	lds	r19, 0x031A

void handleMotorsWithSpeedController() {

	handleSoftAcceleration();

	if(calibrateOdomFlag==1) {
    5454:	41 30       	cpi	r20, 0x01	; 1
    5456:	09 f4       	brne	.+2      	; 0x545a <handleMotorsWithSpeedController+0x38>
    5458:	0c c3       	rjmp	.+1560   	; 0x5a72 <handleMotorsWithSpeedController+0x650>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    545a:	37 fd       	sbrc	r19, 7
    545c:	81 c1       	rjmp	.+770    	; 0x5760 <handleMotorsWithSpeedController+0x33e>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    545e:	c9 01       	movw	r24, r18
    5460:	61 e0       	ldi	r22, 0x01	; 1
    5462:	0e 94 2a 19 	call	0x3254	; 0x3254 <getInputFromSpeed>
    5466:	90 93 2a 03 	sts	0x032A, r25
    546a:	80 93 29 03 	sts	0x0329, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    546e:	80 91 1b 03 	lds	r24, 0x031B
    5472:	90 91 1c 03 	lds	r25, 0x031C
    5476:	97 fd       	sbrc	r25, 7
    5478:	81 c1       	rjmp	.+770    	; 0x577c <handleMotorsWithSpeedController+0x35a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    547a:	60 e0       	ldi	r22, 0x00	; 0
    547c:	0e 94 2a 19 	call	0x3254	; 0x3254 <getInputFromSpeed>
    5480:	90 93 2c 03 	sts	0x032C, r25
    5484:	80 93 2b 03 	sts	0x032B, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    5488:	80 91 94 04 	lds	r24, 0x0494
    548c:	88 23       	and	r24, r24
    548e:	09 f0       	breq	.+2      	; 0x5492 <handleMotorsWithSpeedController+0x70>
    5490:	81 c1       	rjmp	.+770    	; 0x5794 <handleMotorsWithSpeedController+0x372>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    5492:	80 91 2b 03 	lds	r24, 0x032B
    5496:	90 91 2c 03 	lds	r25, 0x032C
    549a:	90 93 08 03 	sts	0x0308, r25
    549e:	80 93 07 03 	sts	0x0307, r24
	pwm_right_desired_to_control = pwm_right_working;
    54a2:	80 91 29 03 	lds	r24, 0x0329
    54a6:	90 91 2a 03 	lds	r25, 0x032A
    54aa:	90 93 06 03 	sts	0x0306, r25
    54ae:	80 93 05 03 	sts	0x0305, r24

	if(compute_left_vel) {
    54b2:	80 91 03 02 	lds	r24, 0x0203
    54b6:	88 23       	and	r24, r24
    54b8:	09 f4       	brne	.+2      	; 0x54bc <handleMotorsWithSpeedController+0x9a>
    54ba:	a2 c0       	rjmp	.+324    	; 0x5600 <handleMotorsWithSpeedController+0x1de>

		last_left_vel = left_vel_sum>>2;
    54bc:	20 91 09 03 	lds	r18, 0x0309
    54c0:	30 91 0a 03 	lds	r19, 0x030A
    54c4:	36 95       	lsr	r19
    54c6:	27 95       	ror	r18
    54c8:	36 95       	lsr	r19
    54ca:	27 95       	ror	r18
    54cc:	30 93 0e 03 	sts	0x030E, r19
    54d0:	20 93 0d 03 	sts	0x030D, r18
		compute_left_vel = 0;
    54d4:	10 92 03 02 	sts	0x0203, r1
		left_vel_sum = 0;
    54d8:	10 92 0a 03 	sts	0x030A, r1
    54dc:	10 92 09 03 	sts	0x0309, r1
		
		if(calibrateOdomFlag==1) {
    54e0:	80 91 8e 05 	lds	r24, 0x058E
    54e4:	81 30       	cpi	r24, 0x01	; 1
    54e6:	09 f4       	brne	.+2      	; 0x54ea <handleMotorsWithSpeedController+0xc8>
    54e8:	95 c3       	rjmp	.+1834   	; 0x5c14 <handleMotorsWithSpeedController+0x7f2>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    54ea:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    54ee:	80 91 bb 04 	lds	r24, 0x04BB
    54f2:	90 91 bc 04 	lds	r25, 0x04BC
    54f6:	a0 91 bd 04 	lds	r26, 0x04BD
    54fa:	b0 91 be 04 	lds	r27, 0x04BE
    54fe:	80 93 c3 04 	sts	0x04C3, r24
    5502:	90 93 c4 04 	sts	0x04C4, r25
    5506:	a0 93 c5 04 	sts	0x04C5, r26
    550a:	b0 93 c6 04 	sts	0x04C6, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    550e:	60 91 e0 04 	lds	r22, 0x04E0
    5512:	70 91 e1 04 	lds	r23, 0x04E1
    5516:	88 27       	eor	r24, r24
    5518:	77 fd       	sbrc	r23, 7
    551a:	80 95       	com	r24
    551c:	98 2f       	mov	r25, r24
    551e:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    5522:	7b 01       	movw	r14, r22
    5524:	8c 01       	movw	r16, r24
    5526:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    552a:	20 91 e4 04 	lds	r18, 0x04E4
    552e:	30 91 e5 04 	lds	r19, 0x04E5
    5532:	40 91 e6 04 	lds	r20, 0x04E6
    5536:	50 91 e7 04 	lds	r21, 0x04E7
    553a:	62 1b       	sub	r22, r18
    553c:	73 0b       	sbc	r23, r19
    553e:	84 0b       	sbc	r24, r20
    5540:	95 0b       	sbc	r25, r21
    5542:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <__floatunsisf>
    5546:	20 e0       	ldi	r18, 0x00	; 0
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	40 ed       	ldi	r20, 0xD0	; 208
    554c:	52 e4       	ldi	r21, 0x42	; 66
    554e:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    5552:	9b 01       	movw	r18, r22
    5554:	ac 01       	movw	r20, r24
    5556:	c8 01       	movw	r24, r16
    5558:	b7 01       	movw	r22, r14
    555a:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    555e:	20 e0       	ldi	r18, 0x00	; 0
    5560:	34 e2       	ldi	r19, 0x24	; 36
    5562:	44 e7       	ldi	r20, 0x74	; 116
    5564:	59 e4       	ldi	r21, 0x49	; 73
    5566:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    556a:	9b 01       	movw	r18, r22
    556c:	ac 01       	movw	r20, r24
    556e:	60 91 bb 04 	lds	r22, 0x04BB
    5572:	70 91 bc 04 	lds	r23, 0x04BC
    5576:	80 91 bd 04 	lds	r24, 0x04BD
    557a:	90 91 be 04 	lds	r25, 0x04BE
    557e:	0e 94 7b 4b 	call	0x96f6	; 0x96f6 <__addsf3>
    5582:	60 93 bb 04 	sts	0x04BB, r22
    5586:	70 93 bc 04 	sts	0x04BC, r23
    558a:	80 93 bd 04 	sts	0x04BD, r24
    558e:	90 93 be 04 	sts	0x04BE, r25
		timeLeftOdom = getTime100MicroSec();
    5592:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    5596:	60 93 e4 04 	sts	0x04E4, r22
    559a:	70 93 e5 04 	sts	0x04E5, r23
    559e:	80 93 e6 04 	sts	0x04E6, r24
    55a2:	90 93 e7 04 	sts	0x04E7, r25
		leftMotSteps = (signed long int)leftDist;
    55a6:	60 91 bb 04 	lds	r22, 0x04BB
    55aa:	70 91 bc 04 	lds	r23, 0x04BC
    55ae:	80 91 bd 04 	lds	r24, 0x04BD
    55b2:	90 91 be 04 	lds	r25, 0x04BE
    55b6:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    55ba:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    55be:	60 93 f1 02 	sts	0x02F1, r22
    55c2:	70 93 f2 02 	sts	0x02F2, r23
    55c6:	80 93 f3 02 	sts	0x02F3, r24
    55ca:	90 93 f4 02 	sts	0x02F4, r25
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/

		start_speed_control_left(&pwm_left_working);
    55ce:	8b e2       	ldi	r24, 0x2B	; 43
    55d0:	93 e0       	ldi	r25, 0x03	; 3
    55d2:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <start_speed_control_left>

		pwm_left = pwm_left_working;
    55d6:	20 91 2b 03 	lds	r18, 0x032B
    55da:	30 91 2c 03 	lds	r19, 0x032C
    55de:	30 93 14 03 	sts	0x0314, r19
    55e2:	20 93 13 03 	sts	0x0313, r18

		if(pwm_left > 0) {
    55e6:	12 16       	cp	r1, r18
    55e8:	13 06       	cpc	r1, r19
    55ea:	0c f0       	brlt	.+2      	; 0x55ee <handleMotorsWithSpeedController+0x1cc>
    55ec:	36 c3       	rjmp	.+1644   	; 0x5c5a <handleMotorsWithSpeedController+0x838>
			OCR4A = (unsigned int)pwm_left;
    55ee:	30 93 a9 00 	sts	0x00A9, r19
    55f2:	20 93 a8 00 	sts	0x00A8, r18
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    55f6:	80 91 cb 04 	lds	r24, 0x04CB
    55fa:	8f 5f       	subi	r24, 0xFF	; 255
    55fc:	80 93 cb 04 	sts	0x04CB, r24

	}

	if(compute_right_vel) {
    5600:	80 91 04 02 	lds	r24, 0x0204
    5604:	88 23       	and	r24, r24
    5606:	09 f0       	breq	.+2      	; 0x560a <handleMotorsWithSpeedController+0x1e8>
    5608:	cc c0       	rjmp	.+408    	; 0x57a2 <handleMotorsWithSpeedController+0x380>
    560a:	80 91 cb 04 	lds	r24, 0x04CB

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    560e:	82 30       	cpi	r24, 0x02	; 2
    5610:	08 f4       	brcc	.+2      	; 0x5614 <handleMotorsWithSpeedController+0x1f2>
    5612:	95 c0       	rjmp	.+298    	; 0x573e <handleMotorsWithSpeedController+0x31c>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    5614:	10 92 cb 04 	sts	0x04CB, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    5618:	20 90 bf 04 	lds	r2, 0x04BF
    561c:	30 90 c0 04 	lds	r3, 0x04C0
    5620:	40 90 c1 04 	lds	r4, 0x04C1
    5624:	50 90 c2 04 	lds	r5, 0x04C2
    5628:	60 90 bb 04 	lds	r6, 0x04BB
    562c:	70 90 bc 04 	lds	r7, 0x04BC
    5630:	80 90 bd 04 	lds	r8, 0x04BD
    5634:	90 90 be 04 	lds	r9, 0x04BE
    5638:	c2 01       	movw	r24, r4
    563a:	b1 01       	movw	r22, r2
    563c:	20 91 c7 04 	lds	r18, 0x04C7
    5640:	30 91 c8 04 	lds	r19, 0x04C8
    5644:	40 91 c9 04 	lds	r20, 0x04C9
    5648:	50 91 ca 04 	lds	r21, 0x04CA
    564c:	0e 94 7a 4b 	call	0x96f4	; 0x96f4 <__subsf3>
    5650:	7b 01       	movw	r14, r22
    5652:	8c 01       	movw	r16, r24
    5654:	c4 01       	movw	r24, r8
    5656:	b3 01       	movw	r22, r6
    5658:	20 91 c3 04 	lds	r18, 0x04C3
    565c:	30 91 c4 04 	lds	r19, 0x04C4
    5660:	40 91 c5 04 	lds	r20, 0x04C5
    5664:	50 91 c6 04 	lds	r21, 0x04C6
    5668:	0e 94 7a 4b 	call	0x96f4	; 0x96f4 <__subsf3>
    566c:	9b 01       	movw	r18, r22
    566e:	ac 01       	movw	r20, r24
    5670:	c8 01       	movw	r24, r16
    5672:	b7 01       	movw	r22, r14
    5674:	0e 94 7b 4b 	call	0x96f6	; 0x96f6 <__addsf3>
    5678:	20 e0       	ldi	r18, 0x00	; 0
    567a:	30 e0       	ldi	r19, 0x00	; 0
    567c:	40 e0       	ldi	r20, 0x00	; 0
    567e:	5f e3       	ldi	r21, 0x3F	; 63
    5680:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    5684:	5b 01       	movw	r10, r22
    5686:	6c 01       	movw	r12, r24
    5688:	60 93 a7 04 	sts	0x04A7, r22
    568c:	70 93 a8 04 	sts	0x04A8, r23
    5690:	80 93 a9 04 	sts	0x04A9, r24
    5694:	90 93 aa 04 	sts	0x04AA, r25

		if(robotPosition == HORIZONTAL_POS) {
    5698:	80 91 12 02 	lds	r24, 0x0212
    569c:	81 30       	cpi	r24, 0x01	; 1
    569e:	09 f4       	brne	.+2      	; 0x56a2 <handleMotorsWithSpeedController+0x280>
    56a0:	f5 c1       	rjmp	.+1002   	; 0x5a8c <handleMotorsWithSpeedController+0x66a>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    56a2:	80 91 cc 04 	lds	r24, 0x04CC
    56a6:	90 91 cd 04 	lds	r25, 0x04CD
    56aa:	a0 91 ce 04 	lds	r26, 0x04CE
    56ae:	b0 91 cf 04 	lds	r27, 0x04CF
    56b2:	80 93 97 04 	sts	0x0497, r24
    56b6:	90 93 98 04 	sts	0x0498, r25
    56ba:	a0 93 99 04 	sts	0x0499, r26
    56be:	b0 93 9a 04 	sts	0x049A, r27
    56c2:	7c 01       	movw	r14, r24
    56c4:	8d 01       	movw	r16, r26
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    56c6:	c8 01       	movw	r24, r16
    56c8:	b7 01       	movw	r22, r14
    56ca:	0e 94 41 4c 	call	0x9882	; 0x9882 <cos>
    56ce:	9b 01       	movw	r18, r22
    56d0:	ac 01       	movw	r20, r24
    56d2:	c6 01       	movw	r24, r12
    56d4:	b5 01       	movw	r22, r10
    56d6:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    56da:	9b 01       	movw	r18, r22
    56dc:	ac 01       	movw	r20, r24
    56de:	60 91 9f 04 	lds	r22, 0x049F
    56e2:	70 91 a0 04 	lds	r23, 0x04A0
    56e6:	80 91 a1 04 	lds	r24, 0x04A1
    56ea:	90 91 a2 04 	lds	r25, 0x04A2
    56ee:	0e 94 7b 4b 	call	0x96f6	; 0x96f6 <__addsf3>
    56f2:	60 93 9f 04 	sts	0x049F, r22
    56f6:	70 93 a0 04 	sts	0x04A0, r23
    56fa:	80 93 a1 04 	sts	0x04A1, r24
    56fe:	90 93 a2 04 	sts	0x04A2, r25
		yPos = yPos + sin(theta)*deltaDist;
    5702:	c8 01       	movw	r24, r16
    5704:	b7 01       	movw	r22, r14
    5706:	0e 94 33 4e 	call	0x9c66	; 0x9c66 <sin>
    570a:	9b 01       	movw	r18, r22
    570c:	ac 01       	movw	r20, r24
    570e:	c6 01       	movw	r24, r12
    5710:	b5 01       	movw	r22, r10
    5712:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    5716:	9b 01       	movw	r18, r22
    5718:	ac 01       	movw	r20, r24
    571a:	60 91 a3 04 	lds	r22, 0x04A3
    571e:	70 91 a4 04 	lds	r23, 0x04A4
    5722:	80 91 a5 04 	lds	r24, 0x04A5
    5726:	90 91 a6 04 	lds	r25, 0x04A6
    572a:	0e 94 7b 4b 	call	0x96f6	; 0x96f6 <__addsf3>
    572e:	60 93 a3 04 	sts	0x04A3, r22
    5732:	70 93 a4 04 	sts	0x04A4, r23
    5736:	80 93 a5 04 	sts	0x04A5, r24
    573a:	90 93 a6 04 	sts	0x04A6, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    573e:	1f 91       	pop	r17
    5740:	0f 91       	pop	r16
    5742:	ff 90       	pop	r15
    5744:	ef 90       	pop	r14
    5746:	df 90       	pop	r13
    5748:	cf 90       	pop	r12
    574a:	bf 90       	pop	r11
    574c:	af 90       	pop	r10
    574e:	9f 90       	pop	r9
    5750:	8f 90       	pop	r8
    5752:	7f 90       	pop	r7
    5754:	6f 90       	pop	r6
    5756:	5f 90       	pop	r5
    5758:	4f 90       	pop	r4
    575a:	3f 90       	pop	r3
    575c:	2f 90       	pop	r2
    575e:	08 95       	ret
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    5760:	c9 01       	movw	r24, r18
    5762:	63 e0       	ldi	r22, 0x03	; 3
    5764:	0e 94 2a 19 	call	0x3254	; 0x3254 <getInputFromSpeed>
    5768:	90 93 2a 03 	sts	0x032A, r25
    576c:	80 93 29 03 	sts	0x0329, r24
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    5770:	80 91 1b 03 	lds	r24, 0x031B
    5774:	90 91 1c 03 	lds	r25, 0x031C
    5778:	97 ff       	sbrs	r25, 7
    577a:	7f ce       	rjmp	.-770    	; 0x547a <handleMotorsWithSpeedController+0x58>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    577c:	62 e0       	ldi	r22, 0x02	; 2
    577e:	0e 94 2a 19 	call	0x3254	; 0x3254 <getInputFromSpeed>
    5782:	90 93 2c 03 	sts	0x032C, r25
    5786:	80 93 2b 03 	sts	0x032B, r24
		}
	}

	if(obstacleAvoidanceEnabled) {
    578a:	80 91 94 04 	lds	r24, 0x0494
    578e:	88 23       	and	r24, r24
    5790:	09 f4       	brne	.+2      	; 0x5794 <handleMotorsWithSpeedController+0x372>
    5792:	7f ce       	rjmp	.-770    	; 0x5492 <handleMotorsWithSpeedController+0x70>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    5794:	8b e2       	ldi	r24, 0x2B	; 43
    5796:	93 e0       	ldi	r25, 0x03	; 3
    5798:	69 e2       	ldi	r22, 0x29	; 41
    579a:	73 e0       	ldi	r23, 0x03	; 3
    579c:	0e 94 b5 33 	call	0x676a	; 0x676a <obstacleAvoidance>
    57a0:	78 ce       	rjmp	.-784    	; 0x5492 <handleMotorsWithSpeedController+0x70>

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    57a2:	20 91 0b 03 	lds	r18, 0x030B
    57a6:	30 91 0c 03 	lds	r19, 0x030C
    57aa:	36 95       	lsr	r19
    57ac:	27 95       	ror	r18
    57ae:	36 95       	lsr	r19
    57b0:	27 95       	ror	r18
    57b2:	30 93 10 03 	sts	0x0310, r19
    57b6:	20 93 0f 03 	sts	0x030F, r18
		compute_right_vel = 0;
    57ba:	10 92 04 02 	sts	0x0204, r1
		right_vel_sum = 0;
    57be:	10 92 0c 03 	sts	0x030C, r1
    57c2:	10 92 0b 03 	sts	0x030B, r1

		if(calibrateOdomFlag==1) {
    57c6:	80 91 8e 05 	lds	r24, 0x058E
    57ca:	81 30       	cpi	r24, 0x01	; 1
    57cc:	09 f4       	brne	.+2      	; 0x57d0 <handleMotorsWithSpeedController+0x3ae>
    57ce:	ff c1       	rjmp	.+1022   	; 0x5bce <handleMotorsWithSpeedController+0x7ac>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    57d0:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    57d4:	80 91 bf 04 	lds	r24, 0x04BF
    57d8:	90 91 c0 04 	lds	r25, 0x04C0
    57dc:	a0 91 c1 04 	lds	r26, 0x04C1
    57e0:	b0 91 c2 04 	lds	r27, 0x04C2
    57e4:	80 93 c7 04 	sts	0x04C7, r24
    57e8:	90 93 c8 04 	sts	0x04C8, r25
    57ec:	a0 93 c9 04 	sts	0x04C9, r26
    57f0:	b0 93 ca 04 	sts	0x04CA, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    57f4:	60 91 e2 04 	lds	r22, 0x04E2
    57f8:	70 91 e3 04 	lds	r23, 0x04E3
    57fc:	88 27       	eor	r24, r24
    57fe:	77 fd       	sbrc	r23, 7
    5800:	80 95       	com	r24
    5802:	98 2f       	mov	r25, r24
    5804:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    5808:	7b 01       	movw	r14, r22
    580a:	8c 01       	movw	r16, r24
    580c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    5810:	20 91 e8 04 	lds	r18, 0x04E8
    5814:	30 91 e9 04 	lds	r19, 0x04E9
    5818:	40 91 ea 04 	lds	r20, 0x04EA
    581c:	50 91 eb 04 	lds	r21, 0x04EB
    5820:	62 1b       	sub	r22, r18
    5822:	73 0b       	sbc	r23, r19
    5824:	84 0b       	sbc	r24, r20
    5826:	95 0b       	sbc	r25, r21
    5828:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <__floatunsisf>
    582c:	20 e0       	ldi	r18, 0x00	; 0
    582e:	30 e0       	ldi	r19, 0x00	; 0
    5830:	40 ed       	ldi	r20, 0xD0	; 208
    5832:	52 e4       	ldi	r21, 0x42	; 66
    5834:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    5838:	9b 01       	movw	r18, r22
    583a:	ac 01       	movw	r20, r24
    583c:	c8 01       	movw	r24, r16
    583e:	b7 01       	movw	r22, r14
    5840:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    5844:	20 e0       	ldi	r18, 0x00	; 0
    5846:	34 e2       	ldi	r19, 0x24	; 36
    5848:	44 e7       	ldi	r20, 0x74	; 116
    584a:	59 e4       	ldi	r21, 0x49	; 73
    584c:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    5850:	9b 01       	movw	r18, r22
    5852:	ac 01       	movw	r20, r24
    5854:	60 91 bf 04 	lds	r22, 0x04BF
    5858:	70 91 c0 04 	lds	r23, 0x04C0
    585c:	80 91 c1 04 	lds	r24, 0x04C1
    5860:	90 91 c2 04 	lds	r25, 0x04C2
    5864:	0e 94 7b 4b 	call	0x96f6	; 0x96f6 <__addsf3>
    5868:	60 93 bf 04 	sts	0x04BF, r22
    586c:	70 93 c0 04 	sts	0x04C0, r23
    5870:	80 93 c1 04 	sts	0x04C1, r24
    5874:	90 93 c2 04 	sts	0x04C2, r25
		timeRightOdom = getTime100MicroSec();
    5878:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    587c:	60 93 e8 04 	sts	0x04E8, r22
    5880:	70 93 e9 04 	sts	0x04E9, r23
    5884:	80 93 ea 04 	sts	0x04EA, r24
    5888:	90 93 eb 04 	sts	0x04EB, r25
		rightMotSteps = (signed long int)rightDist;
    588c:	60 91 bf 04 	lds	r22, 0x04BF
    5890:	70 91 c0 04 	lds	r23, 0x04C0
    5894:	80 91 c1 04 	lds	r24, 0x04C1
    5898:	90 91 c2 04 	lds	r25, 0x04C2
    589c:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    58a0:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    58a4:	60 93 ed 02 	sts	0x02ED, r22
    58a8:	70 93 ee 02 	sts	0x02EE, r23
    58ac:	80 93 ef 02 	sts	0x02EF, r24
    58b0:	90 93 f0 02 	sts	0x02F0, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		start_speed_control_right(&pwm_right_working);
    58b4:	89 e2       	ldi	r24, 0x29	; 41
    58b6:	93 e0       	ldi	r25, 0x03	; 3
    58b8:	0e 94 3f 0b 	call	0x167e	; 0x167e <start_speed_control_right>

		pwm_right = pwm_right_working;
    58bc:	20 91 29 03 	lds	r18, 0x0329
    58c0:	30 91 2a 03 	lds	r19, 0x032A
    58c4:	30 93 12 03 	sts	0x0312, r19
    58c8:	20 93 11 03 	sts	0x0311, r18

		if(pwm_right > 0) {
    58cc:	12 16       	cp	r1, r18
    58ce:	13 06       	cpc	r1, r19
    58d0:	0c f0       	brlt	.+2      	; 0x58d4 <handleMotorsWithSpeedController+0x4b2>
    58d2:	d0 c1       	rjmp	.+928    	; 0x5c74 <handleMotorsWithSpeedController+0x852>
			OCR3A = (unsigned int)pwm_right;
    58d4:	30 93 99 00 	sts	0x0099, r19
    58d8:	20 93 98 00 	sts	0x0098, r18
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    58dc:	80 91 cb 04 	lds	r24, 0x04CB
    58e0:	8f 5f       	subi	r24, 0xFF	; 255
    58e2:	80 93 cb 04 	sts	0x04CB, r24
    58e6:	93 ce       	rjmp	.-730    	; 0x560e <handleMotorsWithSpeedController+0x1ec>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    58e8:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    58ec:	8b 01       	movw	r16, r22
    58ee:	9c 01       	movw	r18, r24
    58f0:	40 e0       	ldi	r20, 0x00	; 0
    58f2:	50 e0       	ldi	r21, 0x00	; 0
    58f4:	60 e0       	ldi	r22, 0x00	; 0
    58f6:	70 e0       	ldi	r23, 0x00	; 0
    58f8:	80 91 84 04 	lds	r24, 0x0484
    58fc:	90 91 85 04 	lds	r25, 0x0485
    5900:	f0 91 86 04 	lds	r31, 0x0486
    5904:	b0 91 87 04 	lds	r27, 0x0487
    5908:	d0 90 88 04 	lds	r13, 0x0488
    590c:	b0 90 89 04 	lds	r11, 0x0489
    5910:	90 90 8a 04 	lds	r9, 0x048A
    5914:	a0 91 8b 04 	lds	r26, 0x048B
    5918:	80 2e       	mov	r8, r16
    591a:	88 1a       	sub	r8, r24
    591c:	e1 e0       	ldi	r30, 0x01	; 1
    591e:	08 15       	cp	r16, r8
    5920:	08 f0       	brcs	.+2      	; 0x5924 <handleMotorsWithSpeedController+0x502>
    5922:	30 c1       	rjmp	.+608    	; 0x5b84 <handleMotorsWithSpeedController+0x762>
    5924:	81 2f       	mov	r24, r17
    5926:	89 1b       	sub	r24, r25
    5928:	91 e0       	ldi	r25, 0x01	; 1
    592a:	18 17       	cp	r17, r24
    592c:	08 f0       	brcs	.+2      	; 0x5930 <handleMotorsWithSpeedController+0x50e>
    592e:	22 c1       	rjmp	.+580    	; 0x5b74 <handleMotorsWithSpeedController+0x752>
    5930:	e8 2e       	mov	r14, r24
    5932:	ee 1a       	sub	r14, r30
    5934:	e1 e0       	ldi	r30, 0x01	; 1
    5936:	8e 15       	cp	r24, r14
    5938:	08 f0       	brcs	.+2      	; 0x593c <handleMotorsWithSpeedController+0x51a>
    593a:	13 c1       	rjmp	.+550    	; 0x5b62 <handleMotorsWithSpeedController+0x740>
    593c:	9e 2b       	or	r25, r30
    593e:	82 2f       	mov	r24, r18
    5940:	8f 1b       	sub	r24, r31
    5942:	e1 e0       	ldi	r30, 0x01	; 1
    5944:	28 17       	cp	r18, r24
    5946:	08 f0       	brcs	.+2      	; 0x594a <handleMotorsWithSpeedController+0x528>
    5948:	04 c1       	rjmp	.+520    	; 0x5b52 <handleMotorsWithSpeedController+0x730>
    594a:	a8 2e       	mov	r10, r24
    594c:	a9 1a       	sub	r10, r25
    594e:	91 e0       	ldi	r25, 0x01	; 1
    5950:	8a 15       	cp	r24, r10
    5952:	08 f0       	brcs	.+2      	; 0x5956 <handleMotorsWithSpeedController+0x534>
    5954:	f5 c0       	rjmp	.+490    	; 0x5b40 <handleMotorsWithSpeedController+0x71e>
    5956:	e9 2b       	or	r30, r25
    5958:	83 2f       	mov	r24, r19
    595a:	8b 1b       	sub	r24, r27
    595c:	91 e0       	ldi	r25, 0x01	; 1
    595e:	38 17       	cp	r19, r24
    5960:	08 f0       	brcs	.+2      	; 0x5964 <handleMotorsWithSpeedController+0x542>
    5962:	e6 c0       	rjmp	.+460    	; 0x5b30 <handleMotorsWithSpeedController+0x70e>
    5964:	c8 2e       	mov	r12, r24
    5966:	ce 1a       	sub	r12, r30
    5968:	e1 e0       	ldi	r30, 0x01	; 1
    596a:	8c 15       	cp	r24, r12
    596c:	08 f0       	brcs	.+2      	; 0x5970 <handleMotorsWithSpeedController+0x54e>
    596e:	d7 c0       	rjmp	.+430    	; 0x5b1e <handleMotorsWithSpeedController+0x6fc>
    5970:	9e 2b       	or	r25, r30
    5972:	8d 2d       	mov	r24, r13
    5974:	81 95       	neg	r24
    5976:	e1 e0       	ldi	r30, 0x01	; 1
    5978:	48 17       	cp	r20, r24
    597a:	08 f0       	brcs	.+2      	; 0x597e <handleMotorsWithSpeedController+0x55c>
    597c:	c8 c0       	rjmp	.+400    	; 0x5b0e <handleMotorsWithSpeedController+0x6ec>
    597e:	b8 2f       	mov	r27, r24
    5980:	b9 1b       	sub	r27, r25
    5982:	91 e0       	ldi	r25, 0x01	; 1
    5984:	8b 17       	cp	r24, r27
    5986:	08 f0       	brcs	.+2      	; 0x598a <handleMotorsWithSpeedController+0x568>
    5988:	b9 c0       	rjmp	.+370    	; 0x5afc <handleMotorsWithSpeedController+0x6da>
    598a:	e9 2b       	or	r30, r25
    598c:	8b 2d       	mov	r24, r11
    598e:	81 95       	neg	r24
    5990:	f1 e0       	ldi	r31, 0x01	; 1
    5992:	58 17       	cp	r21, r24
    5994:	08 f0       	brcs	.+2      	; 0x5998 <handleMotorsWithSpeedController+0x576>
    5996:	a9 c0       	rjmp	.+338    	; 0x5aea <handleMotorsWithSpeedController+0x6c8>
    5998:	98 2f       	mov	r25, r24
    599a:	9e 1b       	sub	r25, r30
    599c:	e9 2f       	mov	r30, r25
    599e:	91 e0       	ldi	r25, 0x01	; 1
    59a0:	8e 17       	cp	r24, r30
    59a2:	08 f0       	brcs	.+2      	; 0x59a6 <handleMotorsWithSpeedController+0x584>
    59a4:	99 c0       	rjmp	.+306    	; 0x5ad8 <handleMotorsWithSpeedController+0x6b6>
    59a6:	f9 2b       	or	r31, r25
    59a8:	89 2d       	mov	r24, r9
    59aa:	81 95       	neg	r24
    59ac:	91 e0       	ldi	r25, 0x01	; 1
    59ae:	68 17       	cp	r22, r24
    59b0:	08 f0       	brcs	.+2      	; 0x59b4 <handleMotorsWithSpeedController+0x592>
    59b2:	8a c0       	rjmp	.+276    	; 0x5ac8 <handleMotorsWithSpeedController+0x6a6>
    59b4:	38 2f       	mov	r19, r24
    59b6:	3f 1b       	sub	r19, r31
    59b8:	21 e0       	ldi	r18, 0x01	; 1
    59ba:	83 17       	cp	r24, r19
    59bc:	08 f0       	brcs	.+2      	; 0x59c0 <handleMotorsWithSpeedController+0x59e>
    59be:	7d c0       	rjmp	.+250    	; 0x5aba <handleMotorsWithSpeedController+0x698>
    59c0:	92 2b       	or	r25, r18
    59c2:	a1 95       	neg	r26
    59c4:	a9 17       	cp	r26, r25
    59c6:	09 f4       	brne	.+2      	; 0x59ca <handleMotorsWithSpeedController+0x5a8>
    59c8:	e5 c0       	rjmp	.+458    	; 0x5b94 <handleMotorsWithSpeedController+0x772>
			speedStepCounter = getTime100MicroSec();
    59ca:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    59ce:	9b 01       	movw	r18, r22
    59d0:	ac 01       	movw	r20, r24
    59d2:	60 93 84 04 	sts	0x0484, r22
    59d6:	30 93 85 04 	sts	0x0485, r19
    59da:	40 93 86 04 	sts	0x0486, r20
    59de:	50 93 87 04 	sts	0x0487, r21
    59e2:	10 92 88 04 	sts	0x0488, r1
    59e6:	10 92 89 04 	sts	0x0489, r1
    59ea:	10 92 8a 04 	sts	0x048A, r1
    59ee:	10 92 8b 04 	sts	0x048B, r1

			if(softAccEnabled) {
    59f2:	80 91 8c 04 	lds	r24, 0x048C
    59f6:	88 23       	and	r24, r24
    59f8:	09 f4       	brne	.+2      	; 0x59fc <handleMotorsWithSpeedController+0x5da>
    59fa:	49 c1       	rjmp	.+658    	; 0x5c8e <handleMotorsWithSpeedController+0x86c>
				if(pwm_right_desired == 0) {
    59fc:	40 91 15 03 	lds	r20, 0x0315
    5a00:	50 91 16 03 	lds	r21, 0x0316
    5a04:	41 15       	cp	r20, r1
    5a06:	51 05       	cpc	r21, r1
    5a08:	09 f0       	breq	.+2      	; 0x5a0c <handleMotorsWithSpeedController+0x5ea>
    5a0a:	56 c1       	rjmp	.+684    	; 0x5cb8 <handleMotorsWithSpeedController+0x896>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    5a0c:	10 92 1a 03 	sts	0x031A, r1
    5a10:	10 92 19 03 	sts	0x0319, r1
    5a14:	20 e0       	ldi	r18, 0x00	; 0
    5a16:	30 e0       	ldi	r19, 0x00	; 0
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    5a18:	40 91 17 03 	lds	r20, 0x0317
    5a1c:	50 91 18 03 	lds	r21, 0x0318
    5a20:	41 15       	cp	r20, r1
    5a22:	51 05       	cpc	r21, r1
    5a24:	09 f4       	brne	.+2      	; 0x5a28 <handleMotorsWithSpeedController+0x606>
    5a26:	7f c1       	rjmp	.+766    	; 0x5d26 <handleMotorsWithSpeedController+0x904>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    5a28:	60 91 1b 03 	lds	r22, 0x031B
    5a2c:	70 91 1c 03 	lds	r23, 0x031C
    5a30:	64 9f       	mul	r22, r20
    5a32:	c0 01       	movw	r24, r0
    5a34:	65 9f       	mul	r22, r21
    5a36:	90 0d       	add	r25, r0
    5a38:	74 9f       	mul	r23, r20
    5a3a:	90 0d       	add	r25, r0
    5a3c:	11 24       	eor	r1, r1
    5a3e:	97 fd       	sbrc	r25, 7
    5a40:	72 c1       	rjmp	.+740    	; 0x5d26 <handleMotorsWithSpeedController+0x904>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    5a42:	64 17       	cp	r22, r20
    5a44:	75 07       	cpc	r23, r21
    5a46:	0c f0       	brlt	.+2      	; 0x5a4a <handleMotorsWithSpeedController+0x628>
    5a48:	75 c1       	rjmp	.+746    	; 0x5d34 <handleMotorsWithSpeedController+0x912>
					pwm_intermediate_left_desired += speedStep;
    5a4a:	80 91 13 02 	lds	r24, 0x0213
    5a4e:	fb 01       	movw	r30, r22
    5a50:	e8 0f       	add	r30, r24
    5a52:	f1 1d       	adc	r31, r1
    5a54:	f0 93 1c 03 	sts	0x031C, r31
    5a58:	e0 93 1b 03 	sts	0x031B, r30
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    5a5c:	4e 17       	cp	r20, r30
    5a5e:	5f 07       	cpc	r21, r31
    5a60:	0c f0       	brlt	.+2      	; 0x5a64 <handleMotorsWithSpeedController+0x642>
    5a62:	7b c1       	rjmp	.+758    	; 0x5d5a <handleMotorsWithSpeedController+0x938>
						pwm_intermediate_left_desired = pwm_left_desired;
    5a64:	50 93 1c 03 	sts	0x031C, r21
    5a68:	40 93 1b 03 	sts	0x031B, r20
    5a6c:	40 91 8e 05 	lds	r20, 0x058E
    5a70:	f1 cc       	rjmp	.-1566   	; 0x5454 <handleMotorsWithSpeedController+0x32>
void handleMotorsWithSpeedController() {

	handleSoftAcceleration();

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    5a72:	30 93 2a 03 	sts	0x032A, r19
    5a76:	20 93 29 03 	sts	0x0329, r18
		pwm_left_working = pwm_intermediate_left_desired;
    5a7a:	80 91 1b 03 	lds	r24, 0x031B
    5a7e:	90 91 1c 03 	lds	r25, 0x031C
    5a82:	90 93 2c 03 	sts	0x032C, r25
    5a86:	80 93 2b 03 	sts	0x032B, r24
    5a8a:	fe cc       	rjmp	.-1540   	; 0x5488 <handleMotorsWithSpeedController+0x66>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    5a8c:	c2 01       	movw	r24, r4
    5a8e:	b1 01       	movw	r22, r2
    5a90:	a4 01       	movw	r20, r8
    5a92:	93 01       	movw	r18, r6
    5a94:	0e 94 7a 4b 	call	0x96f4	; 0x96f4 <__subsf3>
    5a98:	20 e0       	ldi	r18, 0x00	; 0
    5a9a:	30 e0       	ldi	r19, 0x00	; 0
    5a9c:	4e e1       	ldi	r20, 0x1E	; 30
    5a9e:	52 e4       	ldi	r21, 0x42	; 66
    5aa0:	0e 94 44 4c 	call	0x9888	; 0x9888 <__divsf3>
    5aa4:	60 93 97 04 	sts	0x0497, r22
    5aa8:	70 93 98 04 	sts	0x0498, r23
    5aac:	80 93 99 04 	sts	0x0499, r24
    5ab0:	90 93 9a 04 	sts	0x049A, r25
    5ab4:	7b 01       	movw	r14, r22
    5ab6:	8c 01       	movw	r16, r24
    5ab8:	06 ce       	rjmp	.-1012   	; 0x56c6 <handleMotorsWithSpeedController+0x2a4>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    5aba:	20 e0       	ldi	r18, 0x00	; 0
    5abc:	92 2b       	or	r25, r18
    5abe:	a1 95       	neg	r26
    5ac0:	a9 17       	cp	r26, r25
    5ac2:	09 f0       	breq	.+2      	; 0x5ac6 <handleMotorsWithSpeedController+0x6a4>
    5ac4:	82 cf       	rjmp	.-252    	; 0x59ca <handleMotorsWithSpeedController+0x5a8>
    5ac6:	66 c0       	rjmp	.+204    	; 0x5b94 <handleMotorsWithSpeedController+0x772>
    5ac8:	90 e0       	ldi	r25, 0x00	; 0
    5aca:	38 2f       	mov	r19, r24
    5acc:	3f 1b       	sub	r19, r31
    5ace:	21 e0       	ldi	r18, 0x01	; 1
    5ad0:	83 17       	cp	r24, r19
    5ad2:	08 f4       	brcc	.+2      	; 0x5ad6 <handleMotorsWithSpeedController+0x6b4>
    5ad4:	75 cf       	rjmp	.-278    	; 0x59c0 <handleMotorsWithSpeedController+0x59e>
    5ad6:	f1 cf       	rjmp	.-30     	; 0x5aba <handleMotorsWithSpeedController+0x698>
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	f9 2b       	or	r31, r25
    5adc:	89 2d       	mov	r24, r9
    5ade:	81 95       	neg	r24
    5ae0:	91 e0       	ldi	r25, 0x01	; 1
    5ae2:	68 17       	cp	r22, r24
    5ae4:	08 f4       	brcc	.+2      	; 0x5ae8 <handleMotorsWithSpeedController+0x6c6>
    5ae6:	66 cf       	rjmp	.-308    	; 0x59b4 <handleMotorsWithSpeedController+0x592>
    5ae8:	ef cf       	rjmp	.-34     	; 0x5ac8 <handleMotorsWithSpeedController+0x6a6>
    5aea:	f0 e0       	ldi	r31, 0x00	; 0
    5aec:	98 2f       	mov	r25, r24
    5aee:	9e 1b       	sub	r25, r30
    5af0:	e9 2f       	mov	r30, r25
    5af2:	91 e0       	ldi	r25, 0x01	; 1
    5af4:	8e 17       	cp	r24, r30
    5af6:	08 f4       	brcc	.+2      	; 0x5afa <handleMotorsWithSpeedController+0x6d8>
    5af8:	56 cf       	rjmp	.-340    	; 0x59a6 <handleMotorsWithSpeedController+0x584>
    5afa:	ee cf       	rjmp	.-36     	; 0x5ad8 <handleMotorsWithSpeedController+0x6b6>
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	e9 2b       	or	r30, r25
    5b00:	8b 2d       	mov	r24, r11
    5b02:	81 95       	neg	r24
    5b04:	f1 e0       	ldi	r31, 0x01	; 1
    5b06:	58 17       	cp	r21, r24
    5b08:	08 f4       	brcc	.+2      	; 0x5b0c <handleMotorsWithSpeedController+0x6ea>
    5b0a:	46 cf       	rjmp	.-372    	; 0x5998 <handleMotorsWithSpeedController+0x576>
    5b0c:	ee cf       	rjmp	.-36     	; 0x5aea <handleMotorsWithSpeedController+0x6c8>
    5b0e:	e0 e0       	ldi	r30, 0x00	; 0
    5b10:	b8 2f       	mov	r27, r24
    5b12:	b9 1b       	sub	r27, r25
    5b14:	91 e0       	ldi	r25, 0x01	; 1
    5b16:	8b 17       	cp	r24, r27
    5b18:	08 f4       	brcc	.+2      	; 0x5b1c <handleMotorsWithSpeedController+0x6fa>
    5b1a:	37 cf       	rjmp	.-402    	; 0x598a <handleMotorsWithSpeedController+0x568>
    5b1c:	ef cf       	rjmp	.-34     	; 0x5afc <handleMotorsWithSpeedController+0x6da>
    5b1e:	e0 e0       	ldi	r30, 0x00	; 0
    5b20:	9e 2b       	or	r25, r30
    5b22:	8d 2d       	mov	r24, r13
    5b24:	81 95       	neg	r24
    5b26:	e1 e0       	ldi	r30, 0x01	; 1
    5b28:	48 17       	cp	r20, r24
    5b2a:	08 f4       	brcc	.+2      	; 0x5b2e <handleMotorsWithSpeedController+0x70c>
    5b2c:	28 cf       	rjmp	.-432    	; 0x597e <handleMotorsWithSpeedController+0x55c>
    5b2e:	ef cf       	rjmp	.-34     	; 0x5b0e <handleMotorsWithSpeedController+0x6ec>
    5b30:	90 e0       	ldi	r25, 0x00	; 0
    5b32:	c8 2e       	mov	r12, r24
    5b34:	ce 1a       	sub	r12, r30
    5b36:	e1 e0       	ldi	r30, 0x01	; 1
    5b38:	8c 15       	cp	r24, r12
    5b3a:	08 f4       	brcc	.+2      	; 0x5b3e <handleMotorsWithSpeedController+0x71c>
    5b3c:	19 cf       	rjmp	.-462    	; 0x5970 <handleMotorsWithSpeedController+0x54e>
    5b3e:	ef cf       	rjmp	.-34     	; 0x5b1e <handleMotorsWithSpeedController+0x6fc>
    5b40:	90 e0       	ldi	r25, 0x00	; 0
    5b42:	e9 2b       	or	r30, r25
    5b44:	83 2f       	mov	r24, r19
    5b46:	8b 1b       	sub	r24, r27
    5b48:	91 e0       	ldi	r25, 0x01	; 1
    5b4a:	38 17       	cp	r19, r24
    5b4c:	08 f4       	brcc	.+2      	; 0x5b50 <handleMotorsWithSpeedController+0x72e>
    5b4e:	0a cf       	rjmp	.-492    	; 0x5964 <handleMotorsWithSpeedController+0x542>
    5b50:	ef cf       	rjmp	.-34     	; 0x5b30 <handleMotorsWithSpeedController+0x70e>
    5b52:	e0 e0       	ldi	r30, 0x00	; 0
    5b54:	a8 2e       	mov	r10, r24
    5b56:	a9 1a       	sub	r10, r25
    5b58:	91 e0       	ldi	r25, 0x01	; 1
    5b5a:	8a 15       	cp	r24, r10
    5b5c:	08 f4       	brcc	.+2      	; 0x5b60 <handleMotorsWithSpeedController+0x73e>
    5b5e:	fb ce       	rjmp	.-522    	; 0x5956 <handleMotorsWithSpeedController+0x534>
    5b60:	ef cf       	rjmp	.-34     	; 0x5b40 <handleMotorsWithSpeedController+0x71e>
    5b62:	e0 e0       	ldi	r30, 0x00	; 0
    5b64:	9e 2b       	or	r25, r30
    5b66:	82 2f       	mov	r24, r18
    5b68:	8f 1b       	sub	r24, r31
    5b6a:	e1 e0       	ldi	r30, 0x01	; 1
    5b6c:	28 17       	cp	r18, r24
    5b6e:	08 f4       	brcc	.+2      	; 0x5b72 <handleMotorsWithSpeedController+0x750>
    5b70:	ec ce       	rjmp	.-552    	; 0x594a <handleMotorsWithSpeedController+0x528>
    5b72:	ef cf       	rjmp	.-34     	; 0x5b52 <handleMotorsWithSpeedController+0x730>
    5b74:	90 e0       	ldi	r25, 0x00	; 0
    5b76:	e8 2e       	mov	r14, r24
    5b78:	ee 1a       	sub	r14, r30
    5b7a:	e1 e0       	ldi	r30, 0x01	; 1
    5b7c:	8e 15       	cp	r24, r14
    5b7e:	08 f4       	brcc	.+2      	; 0x5b82 <handleMotorsWithSpeedController+0x760>
    5b80:	dd ce       	rjmp	.-582    	; 0x593c <handleMotorsWithSpeedController+0x51a>
    5b82:	ef cf       	rjmp	.-34     	; 0x5b62 <handleMotorsWithSpeedController+0x740>
    5b84:	e0 e0       	ldi	r30, 0x00	; 0
    5b86:	81 2f       	mov	r24, r17
    5b88:	89 1b       	sub	r24, r25
    5b8a:	91 e0       	ldi	r25, 0x01	; 1
    5b8c:	18 17       	cp	r17, r24
    5b8e:	08 f4       	brcc	.+2      	; 0x5b92 <handleMotorsWithSpeedController+0x770>
    5b90:	cf ce       	rjmp	.-610    	; 0x5930 <handleMotorsWithSpeedController+0x50e>
    5b92:	f0 cf       	rjmp	.-32     	; 0x5b74 <handleMotorsWithSpeedController+0x752>
    5b94:	33 23       	and	r19, r19
    5b96:	09 f0       	breq	.+2      	; 0x5b9a <handleMotorsWithSpeedController+0x778>
    5b98:	18 cf       	rjmp	.-464    	; 0x59ca <handleMotorsWithSpeedController+0x5a8>
    5b9a:	ee 23       	and	r30, r30
    5b9c:	09 f0       	breq	.+2      	; 0x5ba0 <handleMotorsWithSpeedController+0x77e>
    5b9e:	15 cf       	rjmp	.-470    	; 0x59ca <handleMotorsWithSpeedController+0x5a8>
    5ba0:	bb 23       	and	r27, r27
    5ba2:	09 f0       	breq	.+2      	; 0x5ba6 <handleMotorsWithSpeedController+0x784>
    5ba4:	12 cf       	rjmp	.-476    	; 0x59ca <handleMotorsWithSpeedController+0x5a8>
    5ba6:	cc 20       	and	r12, r12
    5ba8:	09 f0       	breq	.+2      	; 0x5bac <handleMotorsWithSpeedController+0x78a>
    5baa:	0f cf       	rjmp	.-482    	; 0x59ca <handleMotorsWithSpeedController+0x5a8>
    5bac:	aa 20       	and	r10, r10
    5bae:	09 f0       	breq	.+2      	; 0x5bb2 <handleMotorsWithSpeedController+0x790>
    5bb0:	0c cf       	rjmp	.-488    	; 0x59ca <handleMotorsWithSpeedController+0x5a8>
    5bb2:	e1 e0       	ldi	r30, 0x01	; 1
    5bb4:	ee 15       	cp	r30, r14
    5bb6:	08 f4       	brcc	.+2      	; 0x5bba <handleMotorsWithSpeedController+0x798>
    5bb8:	08 cf       	rjmp	.-496    	; 0x59ca <handleMotorsWithSpeedController+0x5a8>
    5bba:	ee 16       	cp	r14, r30
    5bbc:	09 f4       	brne	.+2      	; 0x5bc0 <handleMotorsWithSpeedController+0x79e>
    5bbe:	e4 c0       	rjmp	.+456    	; 0x5d88 <handleMotorsWithSpeedController+0x966>
    5bc0:	40 91 8e 05 	lds	r20, 0x058E
    5bc4:	20 91 19 03 	lds	r18, 0x0319
    5bc8:	30 91 1a 03 	lds	r19, 0x031A
    5bcc:	43 cc       	rjmp	.-1914   	; 0x5454 <handleMotorsWithSpeedController+0x32>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    5bce:	c9 01       	movw	r24, r18
    5bd0:	aa 27       	eor	r26, r26
    5bd2:	97 fd       	sbrc	r25, 7
    5bd4:	a0 95       	com	r26
    5bd6:	ba 2f       	mov	r27, r26
    5bd8:	20 91 d4 04 	lds	r18, 0x04D4
    5bdc:	30 91 d5 04 	lds	r19, 0x04D5
    5be0:	40 91 d6 04 	lds	r20, 0x04D6
    5be4:	50 91 d7 04 	lds	r21, 0x04D7
    5be8:	28 0f       	add	r18, r24
    5bea:	39 1f       	adc	r19, r25
    5bec:	4a 1f       	adc	r20, r26
    5bee:	5b 1f       	adc	r21, r27
    5bf0:	20 93 d4 04 	sts	0x04D4, r18
    5bf4:	30 93 d5 04 	sts	0x04D5, r19
    5bf8:	40 93 d6 04 	sts	0x04D6, r20
    5bfc:	50 93 d7 04 	sts	0x04D7, r21
			rightSumCount++;
    5c00:	80 91 da 04 	lds	r24, 0x04DA
    5c04:	90 91 db 04 	lds	r25, 0x04DB
    5c08:	01 96       	adiw	r24, 0x01	; 1
    5c0a:	90 93 db 04 	sts	0x04DB, r25
    5c0e:	80 93 da 04 	sts	0x04DA, r24
    5c12:	de cd       	rjmp	.-1092   	; 0x57d0 <handleMotorsWithSpeedController+0x3ae>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    5c14:	c9 01       	movw	r24, r18
    5c16:	aa 27       	eor	r26, r26
    5c18:	97 fd       	sbrc	r25, 7
    5c1a:	a0 95       	com	r26
    5c1c:	ba 2f       	mov	r27, r26
    5c1e:	20 91 d0 04 	lds	r18, 0x04D0
    5c22:	30 91 d1 04 	lds	r19, 0x04D1
    5c26:	40 91 d2 04 	lds	r20, 0x04D2
    5c2a:	50 91 d3 04 	lds	r21, 0x04D3
    5c2e:	28 0f       	add	r18, r24
    5c30:	39 1f       	adc	r19, r25
    5c32:	4a 1f       	adc	r20, r26
    5c34:	5b 1f       	adc	r21, r27
    5c36:	20 93 d0 04 	sts	0x04D0, r18
    5c3a:	30 93 d1 04 	sts	0x04D1, r19
    5c3e:	40 93 d2 04 	sts	0x04D2, r20
    5c42:	50 93 d3 04 	sts	0x04D3, r21
			leftSumCount++;
    5c46:	80 91 d8 04 	lds	r24, 0x04D8
    5c4a:	90 91 d9 04 	lds	r25, 0x04D9
    5c4e:	01 96       	adiw	r24, 0x01	; 1
    5c50:	90 93 d9 04 	sts	0x04D9, r25
    5c54:	80 93 d8 04 	sts	0x04D8, r24
    5c58:	48 cc       	rjmp	.-1904   	; 0x54ea <handleMotorsWithSpeedController+0xc8>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    5c5a:	21 15       	cp	r18, r1
    5c5c:	31 05       	cpc	r19, r1
    5c5e:	09 f0       	breq	.+2      	; 0x5c62 <handleMotorsWithSpeedController+0x840>
    5c60:	59 c0       	rjmp	.+178    	; 0x5d14 <handleMotorsWithSpeedController+0x8f2>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    5c62:	10 92 a9 00 	sts	0x00A9, r1
    5c66:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    5c6a:	10 92 ab 00 	sts	0x00AB, r1
    5c6e:	10 92 aa 00 	sts	0x00AA, r1
    5c72:	c1 cc       	rjmp	.-1662   	; 0x55f6 <handleMotorsWithSpeedController+0x1d4>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    5c74:	21 15       	cp	r18, r1
    5c76:	31 05       	cpc	r19, r1
    5c78:	09 f0       	breq	.+2      	; 0x5c7c <handleMotorsWithSpeedController+0x85a>
    5c7a:	43 c0       	rjmp	.+134    	; 0x5d02 <handleMotorsWithSpeedController+0x8e0>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    5c7c:	10 92 99 00 	sts	0x0099, r1
    5c80:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    5c84:	10 92 9b 00 	sts	0x009B, r1
    5c88:	10 92 9a 00 	sts	0x009A, r1
    5c8c:	27 ce       	rjmp	.-946    	; 0x58dc <handleMotorsWithSpeedController+0x4ba>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    5c8e:	20 91 15 03 	lds	r18, 0x0315
    5c92:	30 91 16 03 	lds	r19, 0x0316
    5c96:	20 93 19 03 	sts	0x0319, r18
    5c9a:	30 93 1a 03 	sts	0x031A, r19
				pwm_intermediate_left_desired = pwm_left_desired;
    5c9e:	80 91 17 03 	lds	r24, 0x0317
    5ca2:	90 91 18 03 	lds	r25, 0x0318
    5ca6:	90 93 1c 03 	sts	0x031C, r25
    5caa:	80 93 1b 03 	sts	0x031B, r24
    5cae:	40 91 8e 05 	lds	r20, 0x058E
    5cb2:	c9 01       	movw	r24, r18
    5cb4:	9c 01       	movw	r18, r24
    5cb6:	ce cb       	rjmp	.-2148   	; 0x5454 <handleMotorsWithSpeedController+0x32>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    5cb8:	20 91 19 03 	lds	r18, 0x0319
    5cbc:	30 91 1a 03 	lds	r19, 0x031A
    5cc0:	24 9f       	mul	r18, r20
    5cc2:	c0 01       	movw	r24, r0
    5cc4:	25 9f       	mul	r18, r21
    5cc6:	90 0d       	add	r25, r0
    5cc8:	34 9f       	mul	r19, r20
    5cca:	90 0d       	add	r25, r0
    5ccc:	11 24       	eor	r1, r1
    5cce:	97 fd       	sbrc	r25, 7
    5cd0:	9d ce       	rjmp	.-710    	; 0x5a0c <handleMotorsWithSpeedController+0x5ea>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    5cd2:	24 17       	cp	r18, r20
    5cd4:	35 07       	cpc	r19, r21
    5cd6:	0c f0       	brlt	.+2      	; 0x5cda <handleMotorsWithSpeedController+0x8b8>
    5cd8:	43 c0       	rjmp	.+134    	; 0x5d60 <handleMotorsWithSpeedController+0x93e>
					pwm_intermediate_right_desired += speedStep;
    5cda:	80 91 13 02 	lds	r24, 0x0213
    5cde:	b9 01       	movw	r22, r18
    5ce0:	68 0f       	add	r22, r24
    5ce2:	71 1d       	adc	r23, r1
    5ce4:	cb 01       	movw	r24, r22
    5ce6:	70 93 1a 03 	sts	0x031A, r23
    5cea:	60 93 19 03 	sts	0x0319, r22
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    5cee:	46 17       	cp	r20, r22
    5cf0:	57 07       	cpc	r21, r23
    5cf2:	0c f0       	brlt	.+2      	; 0x5cf6 <handleMotorsWithSpeedController+0x8d4>
    5cf4:	47 c0       	rjmp	.+142    	; 0x5d84 <handleMotorsWithSpeedController+0x962>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    5cf6:	50 93 1a 03 	sts	0x031A, r21
    5cfa:	40 93 19 03 	sts	0x0319, r20
    5cfe:	9a 01       	movw	r18, r20
    5d00:	8b ce       	rjmp	.-746    	; 0x5a18 <handleMotorsWithSpeedController+0x5f6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    5d02:	88 27       	eor	r24, r24
    5d04:	99 27       	eor	r25, r25
    5d06:	82 1b       	sub	r24, r18
    5d08:	93 0b       	sbc	r25, r19
    5d0a:	90 93 9b 00 	sts	0x009B, r25
    5d0e:	80 93 9a 00 	sts	0x009A, r24
    5d12:	e4 cd       	rjmp	.-1080   	; 0x58dc <handleMotorsWithSpeedController+0x4ba>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    5d14:	88 27       	eor	r24, r24
    5d16:	99 27       	eor	r25, r25
    5d18:	82 1b       	sub	r24, r18
    5d1a:	93 0b       	sbc	r25, r19
    5d1c:	90 93 ab 00 	sts	0x00AB, r25
    5d20:	80 93 aa 00 	sts	0x00AA, r24
    5d24:	68 cc       	rjmp	.-1840   	; 0x55f6 <handleMotorsWithSpeedController+0x1d4>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    5d26:	10 92 1c 03 	sts	0x031C, r1
    5d2a:	10 92 1b 03 	sts	0x031B, r1
    5d2e:	40 91 8e 05 	lds	r20, 0x058E
    5d32:	90 cb       	rjmp	.-2272   	; 0x5454 <handleMotorsWithSpeedController+0x32>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    5d34:	46 17       	cp	r20, r22
    5d36:	57 07       	cpc	r21, r23
    5d38:	84 f4       	brge	.+32     	; 0x5d5a <handleMotorsWithSpeedController+0x938>
					pwm_intermediate_left_desired -= speedStep;
    5d3a:	80 91 13 02 	lds	r24, 0x0213
    5d3e:	fb 01       	movw	r30, r22
    5d40:	e8 1b       	sub	r30, r24
    5d42:	f1 09       	sbc	r31, r1
    5d44:	f0 93 1c 03 	sts	0x031C, r31
    5d48:	e0 93 1b 03 	sts	0x031B, r30
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    5d4c:	e4 17       	cp	r30, r20
    5d4e:	f5 07       	cpc	r31, r21
    5d50:	24 f4       	brge	.+8      	; 0x5d5a <handleMotorsWithSpeedController+0x938>
						pwm_intermediate_left_desired = pwm_left_desired;
    5d52:	50 93 1c 03 	sts	0x031C, r21
    5d56:	40 93 1b 03 	sts	0x031B, r20
    5d5a:	40 91 8e 05 	lds	r20, 0x058E
    5d5e:	7a cb       	rjmp	.-2316   	; 0x5454 <handleMotorsWithSpeedController+0x32>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    5d60:	42 17       	cp	r20, r18
    5d62:	53 07       	cpc	r21, r19
    5d64:	0c f0       	brlt	.+2      	; 0x5d68 <handleMotorsWithSpeedController+0x946>
    5d66:	58 ce       	rjmp	.-848    	; 0x5a18 <handleMotorsWithSpeedController+0x5f6>
					pwm_intermediate_right_desired -= speedStep;
    5d68:	80 91 13 02 	lds	r24, 0x0213
    5d6c:	f9 01       	movw	r30, r18
    5d6e:	e8 1b       	sub	r30, r24
    5d70:	f1 09       	sbc	r31, r1
    5d72:	cf 01       	movw	r24, r30
    5d74:	f0 93 1a 03 	sts	0x031A, r31
    5d78:	e0 93 19 03 	sts	0x0319, r30
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    5d7c:	e4 17       	cp	r30, r20
    5d7e:	f5 07       	cpc	r31, r21
    5d80:	0c f4       	brge	.+2      	; 0x5d84 <handleMotorsWithSpeedController+0x962>
    5d82:	b9 cf       	rjmp	.-142    	; 0x5cf6 <handleMotorsWithSpeedController+0x8d4>
    5d84:	9c 01       	movw	r18, r24
    5d86:	48 ce       	rjmp	.-880    	; 0x5a18 <handleMotorsWithSpeedController+0x5f6>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    5d88:	ff e8       	ldi	r31, 0x8F	; 143
    5d8a:	f8 15       	cp	r31, r8
    5d8c:	08 f4       	brcc	.+2      	; 0x5d90 <handleMotorsWithSpeedController+0x96e>
    5d8e:	1d ce       	rjmp	.-966    	; 0x59ca <handleMotorsWithSpeedController+0x5a8>
    5d90:	40 91 8e 05 	lds	r20, 0x058E
    5d94:	5b cb       	rjmp	.-2378   	; 0x544c <handleMotorsWithSpeedController+0x2a>

00005d96 <handleMotorsWithNoController>:
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}

void handleMotorsWithNoController() {
    5d96:	9f 92       	push	r9
    5d98:	af 92       	push	r10
    5d9a:	bf 92       	push	r11
    5d9c:	cf 92       	push	r12
    5d9e:	df 92       	push	r13
    5da0:	ef 92       	push	r14
    5da2:	ff 92       	push	r15
    5da4:	0f 93       	push	r16
    5da6:	1f 93       	push	r17
    5da8:	cf 93       	push	r28
    5daa:	df 93       	push	r29
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
    5dac:	80 91 8e 05 	lds	r24, 0x058E
    5db0:	88 23       	and	r24, r24
    5db2:	09 f4       	brne	.+2      	; 0x5db6 <handleMotorsWithNoController+0x20>
    5db4:	c9 c0       	rjmp	.+402    	; 0x5f48 <handleMotorsWithNoController+0x1b2>
    5db6:	c0 91 19 03 	lds	r28, 0x0319
    5dba:	d0 91 1a 03 	lds	r29, 0x031A
    5dbe:	00 91 1b 03 	lds	r16, 0x031B
    5dc2:	10 91 1c 03 	lds	r17, 0x031C
void handleMotorsWithNoController() {

	handleSoftAcceleration();

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    5dc6:	80 91 03 02 	lds	r24, 0x0203
    5dca:	88 23       	and	r24, r24
    5dcc:	c9 f1       	breq	.+114    	; 0x5e40 <handleMotorsWithNoController+0xaa>
		last_left_vel = left_vel_sum>>2;
    5dce:	20 91 09 03 	lds	r18, 0x0309
    5dd2:	30 91 0a 03 	lds	r19, 0x030A
    5dd6:	36 95       	lsr	r19
    5dd8:	27 95       	ror	r18
    5dda:	36 95       	lsr	r19
    5ddc:	27 95       	ror	r18
    5dde:	30 93 0e 03 	sts	0x030E, r19
    5de2:	20 93 0d 03 	sts	0x030D, r18
		compute_left_vel = 0;
    5de6:	10 92 03 02 	sts	0x0203, r1
		left_vel_sum = 0;
    5dea:	10 92 0a 03 	sts	0x030A, r1
    5dee:	10 92 09 03 	sts	0x0309, r1

		if(pwm_left_desired >= 0) {
    5df2:	80 91 17 03 	lds	r24, 0x0317
    5df6:	90 91 18 03 	lds	r25, 0x0318
    5dfa:	97 fd       	sbrc	r25, 7
    5dfc:	35 c2       	rjmp	.+1130   	; 0x6268 <handleMotorsWithNoController+0x4d2>
			leftMotSteps += (last_left_vel>>3);
    5dfe:	35 95       	asr	r19
    5e00:	27 95       	ror	r18
    5e02:	35 95       	asr	r19
    5e04:	27 95       	ror	r18
    5e06:	35 95       	asr	r19
    5e08:	27 95       	ror	r18
    5e0a:	b9 01       	movw	r22, r18
    5e0c:	88 27       	eor	r24, r24
    5e0e:	77 fd       	sbrc	r23, 7
    5e10:	80 95       	com	r24
    5e12:	98 2f       	mov	r25, r24
    5e14:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    5e18:	9b 01       	movw	r18, r22
    5e1a:	ac 01       	movw	r20, r24
    5e1c:	60 91 f1 02 	lds	r22, 0x02F1
    5e20:	70 91 f2 02 	lds	r23, 0x02F2
    5e24:	80 91 f3 02 	lds	r24, 0x02F3
    5e28:	90 91 f4 02 	lds	r25, 0x02F4
    5e2c:	0e 94 7b 4b 	call	0x96f6	; 0x96f6 <__addsf3>
    5e30:	60 93 f1 02 	sts	0x02F1, r22
    5e34:	70 93 f2 02 	sts	0x02F2, r23
    5e38:	80 93 f3 02 	sts	0x02F3, r24
    5e3c:	90 93 f4 02 	sts	0x02F4, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    5e40:	80 91 04 02 	lds	r24, 0x0204
    5e44:	88 23       	and	r24, r24
    5e46:	c9 f1       	breq	.+114    	; 0x5eba <handleMotorsWithNoController+0x124>
		last_right_vel = right_vel_sum>>2;
    5e48:	20 91 0b 03 	lds	r18, 0x030B
    5e4c:	30 91 0c 03 	lds	r19, 0x030C
    5e50:	36 95       	lsr	r19
    5e52:	27 95       	ror	r18
    5e54:	36 95       	lsr	r19
    5e56:	27 95       	ror	r18
    5e58:	30 93 10 03 	sts	0x0310, r19
    5e5c:	20 93 0f 03 	sts	0x030F, r18
		compute_right_vel = 0;
    5e60:	10 92 04 02 	sts	0x0204, r1
		right_vel_sum = 0;
    5e64:	10 92 0c 03 	sts	0x030C, r1
    5e68:	10 92 0b 03 	sts	0x030B, r1

		if(pwm_right_desired >= 0) {
    5e6c:	80 91 15 03 	lds	r24, 0x0315
    5e70:	90 91 16 03 	lds	r25, 0x0316
    5e74:	97 fd       	sbrc	r25, 7
    5e76:	d6 c1       	rjmp	.+940    	; 0x6224 <handleMotorsWithNoController+0x48e>
			rightMotSteps += (last_right_vel>>3);
    5e78:	35 95       	asr	r19
    5e7a:	27 95       	ror	r18
    5e7c:	35 95       	asr	r19
    5e7e:	27 95       	ror	r18
    5e80:	35 95       	asr	r19
    5e82:	27 95       	ror	r18
    5e84:	b9 01       	movw	r22, r18
    5e86:	88 27       	eor	r24, r24
    5e88:	77 fd       	sbrc	r23, 7
    5e8a:	80 95       	com	r24
    5e8c:	98 2f       	mov	r25, r24
    5e8e:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    5e92:	9b 01       	movw	r18, r22
    5e94:	ac 01       	movw	r20, r24
    5e96:	60 91 ed 02 	lds	r22, 0x02ED
    5e9a:	70 91 ee 02 	lds	r23, 0x02EE
    5e9e:	80 91 ef 02 	lds	r24, 0x02EF
    5ea2:	90 91 f0 02 	lds	r25, 0x02F0
    5ea6:	0e 94 7b 4b 	call	0x96f6	; 0x96f6 <__addsf3>
    5eaa:	60 93 ed 02 	sts	0x02ED, r22
    5eae:	70 93 ee 02 	sts	0x02EE, r23
    5eb2:	80 93 ef 02 	sts	0x02EF, r24
    5eb6:	90 93 f0 02 	sts	0x02F0, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    5eba:	ce 01       	movw	r24, r28
    5ebc:	88 0f       	add	r24, r24
    5ebe:	99 1f       	adc	r25, r25
    5ec0:	88 0f       	add	r24, r24
    5ec2:	99 1f       	adc	r25, r25
    5ec4:	8c 0f       	add	r24, r28
    5ec6:	9d 1f       	adc	r25, r29
    5ec8:	90 93 2a 03 	sts	0x032A, r25
    5ecc:	80 93 29 03 	sts	0x0329, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    5ed0:	c8 01       	movw	r24, r16
    5ed2:	88 0f       	add	r24, r24
    5ed4:	99 1f       	adc	r25, r25
    5ed6:	88 0f       	add	r24, r24
    5ed8:	99 1f       	adc	r25, r25
    5eda:	80 0f       	add	r24, r16
    5edc:	91 1f       	adc	r25, r17
    5ede:	90 93 2c 03 	sts	0x032C, r25
    5ee2:	80 93 2b 03 	sts	0x032B, r24
	if(obstacleAvoidanceEnabled) {
    5ee6:	80 91 94 04 	lds	r24, 0x0494
    5eea:	88 23       	and	r24, r24
    5eec:	09 f0       	breq	.+2      	; 0x5ef0 <handleMotorsWithNoController+0x15a>
    5eee:	fe c0       	rjmp	.+508    	; 0x60ec <handleMotorsWithNoController+0x356>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    5ef0:	40 91 2b 03 	lds	r20, 0x032B
    5ef4:	50 91 2c 03 	lds	r21, 0x032C
    5ef8:	50 93 14 03 	sts	0x0314, r21
    5efc:	40 93 13 03 	sts	0x0313, r20
	pwm_right = pwm_right_working;
    5f00:	20 91 29 03 	lds	r18, 0x0329
    5f04:	30 91 2a 03 	lds	r19, 0x032A
    5f08:	30 93 12 03 	sts	0x0312, r19
    5f0c:	20 93 11 03 	sts	0x0311, r18

	if(pwm_right > 0) {
    5f10:	12 16       	cp	r1, r18
    5f12:	13 06       	cpc	r1, r19
    5f14:	0c f0       	brlt	.+2      	; 0x5f18 <handleMotorsWithNoController+0x182>
    5f16:	f1 c0       	rjmp	.+482    	; 0x60fa <handleMotorsWithNoController+0x364>
		OCR3A = (unsigned int)pwm_right;
    5f18:	30 93 99 00 	sts	0x0099, r19
    5f1c:	20 93 98 00 	sts	0x0098, r18
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    5f20:	14 16       	cp	r1, r20
    5f22:	15 06       	cpc	r1, r21
    5f24:	0c f0       	brlt	.+2      	; 0x5f28 <handleMotorsWithNoController+0x192>
    5f26:	d5 c0       	rjmp	.+426    	; 0x60d2 <handleMotorsWithNoController+0x33c>
		OCR4A = (unsigned int)pwm_left;
    5f28:	50 93 a9 00 	sts	0x00A9, r21
    5f2c:	40 93 a8 00 	sts	0x00A8, r20
	} else {
		OCR4A = 0;
		OCR4B = 0;
	}

}
    5f30:	df 91       	pop	r29
    5f32:	cf 91       	pop	r28
    5f34:	1f 91       	pop	r17
    5f36:	0f 91       	pop	r16
    5f38:	ff 90       	pop	r15
    5f3a:	ef 90       	pop	r14
    5f3c:	df 90       	pop	r13
    5f3e:	cf 90       	pop	r12
    5f40:	bf 90       	pop	r11
    5f42:	af 90       	pop	r10
    5f44:	9f 90       	pop	r9
    5f46:	08 95       	ret
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    5f48:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    5f4c:	8b 01       	movw	r16, r22
    5f4e:	9c 01       	movw	r18, r24
    5f50:	40 e0       	ldi	r20, 0x00	; 0
    5f52:	50 e0       	ldi	r21, 0x00	; 0
    5f54:	60 e0       	ldi	r22, 0x00	; 0
    5f56:	70 e0       	ldi	r23, 0x00	; 0
    5f58:	80 91 84 04 	lds	r24, 0x0484
    5f5c:	90 91 85 04 	lds	r25, 0x0485
    5f60:	f0 91 86 04 	lds	r31, 0x0486
    5f64:	b0 91 87 04 	lds	r27, 0x0487
    5f68:	e0 90 88 04 	lds	r14, 0x0488
    5f6c:	c0 90 89 04 	lds	r12, 0x0489
    5f70:	a0 90 8a 04 	lds	r10, 0x048A
    5f74:	a0 91 8b 04 	lds	r26, 0x048B
    5f78:	90 2e       	mov	r9, r16
    5f7a:	98 1a       	sub	r9, r24
    5f7c:	e1 e0       	ldi	r30, 0x01	; 1
    5f7e:	09 15       	cp	r16, r9
    5f80:	08 f0       	brcs	.+2      	; 0x5f84 <handleMotorsWithNoController+0x1ee>
    5f82:	2d c1       	rjmp	.+602    	; 0x61de <handleMotorsWithNoController+0x448>
    5f84:	81 2f       	mov	r24, r17
    5f86:	89 1b       	sub	r24, r25
    5f88:	91 e0       	ldi	r25, 0x01	; 1
    5f8a:	18 17       	cp	r17, r24
    5f8c:	08 f0       	brcs	.+2      	; 0x5f90 <handleMotorsWithNoController+0x1fa>
    5f8e:	1f c1       	rjmp	.+574    	; 0x61ce <handleMotorsWithNoController+0x438>
    5f90:	f8 2e       	mov	r15, r24
    5f92:	fe 1a       	sub	r15, r30
    5f94:	e1 e0       	ldi	r30, 0x01	; 1
    5f96:	8f 15       	cp	r24, r15
    5f98:	08 f0       	brcs	.+2      	; 0x5f9c <handleMotorsWithNoController+0x206>
    5f9a:	10 c1       	rjmp	.+544    	; 0x61bc <handleMotorsWithNoController+0x426>
    5f9c:	9e 2b       	or	r25, r30
    5f9e:	82 2f       	mov	r24, r18
    5fa0:	8f 1b       	sub	r24, r31
    5fa2:	e1 e0       	ldi	r30, 0x01	; 1
    5fa4:	28 17       	cp	r18, r24
    5fa6:	08 f0       	brcs	.+2      	; 0x5faa <handleMotorsWithNoController+0x214>
    5fa8:	01 c1       	rjmp	.+514    	; 0x61ac <handleMotorsWithNoController+0x416>
    5faa:	b8 2e       	mov	r11, r24
    5fac:	b9 1a       	sub	r11, r25
    5fae:	91 e0       	ldi	r25, 0x01	; 1
    5fb0:	8b 15       	cp	r24, r11
    5fb2:	08 f0       	brcs	.+2      	; 0x5fb6 <handleMotorsWithNoController+0x220>
    5fb4:	f2 c0       	rjmp	.+484    	; 0x619a <handleMotorsWithNoController+0x404>
    5fb6:	e9 2b       	or	r30, r25
    5fb8:	83 2f       	mov	r24, r19
    5fba:	8b 1b       	sub	r24, r27
    5fbc:	91 e0       	ldi	r25, 0x01	; 1
    5fbe:	38 17       	cp	r19, r24
    5fc0:	08 f0       	brcs	.+2      	; 0x5fc4 <handleMotorsWithNoController+0x22e>
    5fc2:	e3 c0       	rjmp	.+454    	; 0x618a <handleMotorsWithNoController+0x3f4>
    5fc4:	d8 2e       	mov	r13, r24
    5fc6:	de 1a       	sub	r13, r30
    5fc8:	e1 e0       	ldi	r30, 0x01	; 1
    5fca:	8d 15       	cp	r24, r13
    5fcc:	08 f0       	brcs	.+2      	; 0x5fd0 <handleMotorsWithNoController+0x23a>
    5fce:	d4 c0       	rjmp	.+424    	; 0x6178 <handleMotorsWithNoController+0x3e2>
    5fd0:	9e 2b       	or	r25, r30
    5fd2:	8e 2d       	mov	r24, r14
    5fd4:	81 95       	neg	r24
    5fd6:	e1 e0       	ldi	r30, 0x01	; 1
    5fd8:	48 17       	cp	r20, r24
    5fda:	08 f0       	brcs	.+2      	; 0x5fde <handleMotorsWithNoController+0x248>
    5fdc:	c5 c0       	rjmp	.+394    	; 0x6168 <handleMotorsWithNoController+0x3d2>
    5fde:	b8 2f       	mov	r27, r24
    5fe0:	b9 1b       	sub	r27, r25
    5fe2:	91 e0       	ldi	r25, 0x01	; 1
    5fe4:	8b 17       	cp	r24, r27
    5fe6:	08 f0       	brcs	.+2      	; 0x5fea <handleMotorsWithNoController+0x254>
    5fe8:	b6 c0       	rjmp	.+364    	; 0x6156 <handleMotorsWithNoController+0x3c0>
    5fea:	e9 2b       	or	r30, r25
    5fec:	8c 2d       	mov	r24, r12
    5fee:	81 95       	neg	r24
    5ff0:	f1 e0       	ldi	r31, 0x01	; 1
    5ff2:	58 17       	cp	r21, r24
    5ff4:	08 f0       	brcs	.+2      	; 0x5ff8 <handleMotorsWithNoController+0x262>
    5ff6:	a6 c0       	rjmp	.+332    	; 0x6144 <handleMotorsWithNoController+0x3ae>
    5ff8:	98 2f       	mov	r25, r24
    5ffa:	9e 1b       	sub	r25, r30
    5ffc:	e9 2f       	mov	r30, r25
    5ffe:	91 e0       	ldi	r25, 0x01	; 1
    6000:	8e 17       	cp	r24, r30
    6002:	08 f0       	brcs	.+2      	; 0x6006 <handleMotorsWithNoController+0x270>
    6004:	96 c0       	rjmp	.+300    	; 0x6132 <handleMotorsWithNoController+0x39c>
    6006:	f9 2b       	or	r31, r25
    6008:	8a 2d       	mov	r24, r10
    600a:	81 95       	neg	r24
    600c:	91 e0       	ldi	r25, 0x01	; 1
    600e:	68 17       	cp	r22, r24
    6010:	08 f0       	brcs	.+2      	; 0x6014 <handleMotorsWithNoController+0x27e>
    6012:	87 c0       	rjmp	.+270    	; 0x6122 <handleMotorsWithNoController+0x38c>
    6014:	38 2f       	mov	r19, r24
    6016:	3f 1b       	sub	r19, r31
    6018:	21 e0       	ldi	r18, 0x01	; 1
    601a:	83 17       	cp	r24, r19
    601c:	08 f0       	brcs	.+2      	; 0x6020 <handleMotorsWithNoController+0x28a>
    601e:	7a c0       	rjmp	.+244    	; 0x6114 <handleMotorsWithNoController+0x37e>
    6020:	92 2b       	or	r25, r18
    6022:	a1 95       	neg	r26
    6024:	a9 17       	cp	r26, r25
    6026:	09 f4       	brne	.+2      	; 0x602a <handleMotorsWithNoController+0x294>
    6028:	e2 c0       	rjmp	.+452    	; 0x61ee <handleMotorsWithNoController+0x458>
			speedStepCounter = getTime100MicroSec();
    602a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    602e:	9b 01       	movw	r18, r22
    6030:	ac 01       	movw	r20, r24
    6032:	60 93 84 04 	sts	0x0484, r22
    6036:	30 93 85 04 	sts	0x0485, r19
    603a:	40 93 86 04 	sts	0x0486, r20
    603e:	50 93 87 04 	sts	0x0487, r21
    6042:	10 92 88 04 	sts	0x0488, r1
    6046:	10 92 89 04 	sts	0x0489, r1
    604a:	10 92 8a 04 	sts	0x048A, r1
    604e:	10 92 8b 04 	sts	0x048B, r1

			if(softAccEnabled) {
    6052:	80 91 8c 04 	lds	r24, 0x048C
    6056:	88 23       	and	r24, r24
    6058:	09 f4       	brne	.+2      	; 0x605c <handleMotorsWithNoController+0x2c6>
    605a:	3a c1       	rjmp	.+628    	; 0x62d0 <handleMotorsWithNoController+0x53a>
				if(pwm_right_desired == 0) {
    605c:	20 91 15 03 	lds	r18, 0x0315
    6060:	30 91 16 03 	lds	r19, 0x0316
    6064:	21 15       	cp	r18, r1
    6066:	31 05       	cpc	r19, r1
    6068:	09 f0       	breq	.+2      	; 0x606c <handleMotorsWithNoController+0x2d6>
    606a:	47 c1       	rjmp	.+654    	; 0x62fa <handleMotorsWithNoController+0x564>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    606c:	10 92 1a 03 	sts	0x031A, r1
    6070:	10 92 19 03 	sts	0x0319, r1
    6074:	c0 e0       	ldi	r28, 0x00	; 0
    6076:	d0 e0       	ldi	r29, 0x00	; 0
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    6078:	20 91 17 03 	lds	r18, 0x0317
    607c:	30 91 18 03 	lds	r19, 0x0318
    6080:	21 15       	cp	r18, r1
    6082:	31 05       	cpc	r19, r1
    6084:	09 f4       	brne	.+2      	; 0x6088 <handleMotorsWithNoController+0x2f2>
    6086:	5c c1       	rjmp	.+696    	; 0x6340 <handleMotorsWithNoController+0x5aa>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    6088:	00 91 1b 03 	lds	r16, 0x031B
    608c:	10 91 1c 03 	lds	r17, 0x031C
    6090:	02 9f       	mul	r16, r18
    6092:	c0 01       	movw	r24, r0
    6094:	03 9f       	mul	r16, r19
    6096:	90 0d       	add	r25, r0
    6098:	12 9f       	mul	r17, r18
    609a:	90 0d       	add	r25, r0
    609c:	11 24       	eor	r1, r1
    609e:	97 fd       	sbrc	r25, 7
    60a0:	4f c1       	rjmp	.+670    	; 0x6340 <handleMotorsWithNoController+0x5aa>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    60a2:	02 17       	cp	r16, r18
    60a4:	13 07       	cpc	r17, r19
    60a6:	0c f0       	brlt	.+2      	; 0x60aa <handleMotorsWithNoController+0x314>
    60a8:	52 c1       	rjmp	.+676    	; 0x634e <handleMotorsWithNoController+0x5b8>
					pwm_intermediate_left_desired += speedStep;
    60aa:	80 91 13 02 	lds	r24, 0x0213
    60ae:	a8 01       	movw	r20, r16
    60b0:	48 0f       	add	r20, r24
    60b2:	51 1d       	adc	r21, r1
    60b4:	ca 01       	movw	r24, r20
    60b6:	50 93 1c 03 	sts	0x031C, r21
    60ba:	40 93 1b 03 	sts	0x031B, r20
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    60be:	24 17       	cp	r18, r20
    60c0:	35 07       	cpc	r19, r21
    60c2:	0c f0       	brlt	.+2      	; 0x60c6 <handleMotorsWithNoController+0x330>
    60c4:	18 c1       	rjmp	.+560    	; 0x62f6 <handleMotorsWithNoController+0x560>
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired -= speedStep;
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
    60c6:	30 93 1c 03 	sts	0x031C, r19
    60ca:	20 93 1b 03 	sts	0x031B, r18
    60ce:	89 01       	movw	r16, r18
    60d0:	7a ce       	rjmp	.-780    	; 0x5dc6 <handleMotorsWithNoController+0x30>
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
    60d2:	41 15       	cp	r20, r1
    60d4:	51 05       	cpc	r21, r1
    60d6:	09 f0       	breq	.+2      	; 0x60da <handleMotorsWithNoController+0x344>
    60d8:	f2 c0       	rjmp	.+484    	; 0x62be <handleMotorsWithNoController+0x528>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    60da:	10 92 a9 00 	sts	0x00A9, r1
    60de:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    60e2:	10 92 ab 00 	sts	0x00AB, r1
    60e6:	10 92 aa 00 	sts	0x00AA, r1
    60ea:	22 cf       	rjmp	.-444    	; 0x5f30 <handleMotorsWithNoController+0x19a>
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    60ec:	8b e2       	ldi	r24, 0x2B	; 43
    60ee:	93 e0       	ldi	r25, 0x03	; 3
    60f0:	69 e2       	ldi	r22, 0x29	; 41
    60f2:	73 e0       	ldi	r23, 0x03	; 3
    60f4:	0e 94 b5 33 	call	0x676a	; 0x676a <obstacleAvoidance>
    60f8:	fb ce       	rjmp	.-522    	; 0x5ef0 <handleMotorsWithNoController+0x15a>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    60fa:	21 15       	cp	r18, r1
    60fc:	31 05       	cpc	r19, r1
    60fe:	09 f0       	breq	.+2      	; 0x6102 <handleMotorsWithNoController+0x36c>
    6100:	d5 c0       	rjmp	.+426    	; 0x62ac <handleMotorsWithNoController+0x516>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    6102:	10 92 99 00 	sts	0x0099, r1
    6106:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    610a:	10 92 9b 00 	sts	0x009B, r1
    610e:	10 92 9a 00 	sts	0x009A, r1
    6112:	06 cf       	rjmp	.-500    	; 0x5f20 <handleMotorsWithNoController+0x18a>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    6114:	20 e0       	ldi	r18, 0x00	; 0
    6116:	92 2b       	or	r25, r18
    6118:	a1 95       	neg	r26
    611a:	a9 17       	cp	r26, r25
    611c:	09 f0       	breq	.+2      	; 0x6120 <handleMotorsWithNoController+0x38a>
    611e:	85 cf       	rjmp	.-246    	; 0x602a <handleMotorsWithNoController+0x294>
    6120:	66 c0       	rjmp	.+204    	; 0x61ee <handleMotorsWithNoController+0x458>
    6122:	90 e0       	ldi	r25, 0x00	; 0
    6124:	38 2f       	mov	r19, r24
    6126:	3f 1b       	sub	r19, r31
    6128:	21 e0       	ldi	r18, 0x01	; 1
    612a:	83 17       	cp	r24, r19
    612c:	08 f4       	brcc	.+2      	; 0x6130 <handleMotorsWithNoController+0x39a>
    612e:	78 cf       	rjmp	.-272    	; 0x6020 <handleMotorsWithNoController+0x28a>
    6130:	f1 cf       	rjmp	.-30     	; 0x6114 <handleMotorsWithNoController+0x37e>
    6132:	90 e0       	ldi	r25, 0x00	; 0
    6134:	f9 2b       	or	r31, r25
    6136:	8a 2d       	mov	r24, r10
    6138:	81 95       	neg	r24
    613a:	91 e0       	ldi	r25, 0x01	; 1
    613c:	68 17       	cp	r22, r24
    613e:	08 f4       	brcc	.+2      	; 0x6142 <handleMotorsWithNoController+0x3ac>
    6140:	69 cf       	rjmp	.-302    	; 0x6014 <handleMotorsWithNoController+0x27e>
    6142:	ef cf       	rjmp	.-34     	; 0x6122 <handleMotorsWithNoController+0x38c>
    6144:	f0 e0       	ldi	r31, 0x00	; 0
    6146:	98 2f       	mov	r25, r24
    6148:	9e 1b       	sub	r25, r30
    614a:	e9 2f       	mov	r30, r25
    614c:	91 e0       	ldi	r25, 0x01	; 1
    614e:	8e 17       	cp	r24, r30
    6150:	08 f4       	brcc	.+2      	; 0x6154 <handleMotorsWithNoController+0x3be>
    6152:	59 cf       	rjmp	.-334    	; 0x6006 <handleMotorsWithNoController+0x270>
    6154:	ee cf       	rjmp	.-36     	; 0x6132 <handleMotorsWithNoController+0x39c>
    6156:	90 e0       	ldi	r25, 0x00	; 0
    6158:	e9 2b       	or	r30, r25
    615a:	8c 2d       	mov	r24, r12
    615c:	81 95       	neg	r24
    615e:	f1 e0       	ldi	r31, 0x01	; 1
    6160:	58 17       	cp	r21, r24
    6162:	08 f4       	brcc	.+2      	; 0x6166 <handleMotorsWithNoController+0x3d0>
    6164:	49 cf       	rjmp	.-366    	; 0x5ff8 <handleMotorsWithNoController+0x262>
    6166:	ee cf       	rjmp	.-36     	; 0x6144 <handleMotorsWithNoController+0x3ae>
    6168:	e0 e0       	ldi	r30, 0x00	; 0
    616a:	b8 2f       	mov	r27, r24
    616c:	b9 1b       	sub	r27, r25
    616e:	91 e0       	ldi	r25, 0x01	; 1
    6170:	8b 17       	cp	r24, r27
    6172:	08 f4       	brcc	.+2      	; 0x6176 <handleMotorsWithNoController+0x3e0>
    6174:	3a cf       	rjmp	.-396    	; 0x5fea <handleMotorsWithNoController+0x254>
    6176:	ef cf       	rjmp	.-34     	; 0x6156 <handleMotorsWithNoController+0x3c0>
    6178:	e0 e0       	ldi	r30, 0x00	; 0
    617a:	9e 2b       	or	r25, r30
    617c:	8e 2d       	mov	r24, r14
    617e:	81 95       	neg	r24
    6180:	e1 e0       	ldi	r30, 0x01	; 1
    6182:	48 17       	cp	r20, r24
    6184:	08 f4       	brcc	.+2      	; 0x6188 <handleMotorsWithNoController+0x3f2>
    6186:	2b cf       	rjmp	.-426    	; 0x5fde <handleMotorsWithNoController+0x248>
    6188:	ef cf       	rjmp	.-34     	; 0x6168 <handleMotorsWithNoController+0x3d2>
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	d8 2e       	mov	r13, r24
    618e:	de 1a       	sub	r13, r30
    6190:	e1 e0       	ldi	r30, 0x01	; 1
    6192:	8d 15       	cp	r24, r13
    6194:	08 f4       	brcc	.+2      	; 0x6198 <handleMotorsWithNoController+0x402>
    6196:	1c cf       	rjmp	.-456    	; 0x5fd0 <handleMotorsWithNoController+0x23a>
    6198:	ef cf       	rjmp	.-34     	; 0x6178 <handleMotorsWithNoController+0x3e2>
    619a:	90 e0       	ldi	r25, 0x00	; 0
    619c:	e9 2b       	or	r30, r25
    619e:	83 2f       	mov	r24, r19
    61a0:	8b 1b       	sub	r24, r27
    61a2:	91 e0       	ldi	r25, 0x01	; 1
    61a4:	38 17       	cp	r19, r24
    61a6:	08 f4       	brcc	.+2      	; 0x61aa <handleMotorsWithNoController+0x414>
    61a8:	0d cf       	rjmp	.-486    	; 0x5fc4 <handleMotorsWithNoController+0x22e>
    61aa:	ef cf       	rjmp	.-34     	; 0x618a <handleMotorsWithNoController+0x3f4>
    61ac:	e0 e0       	ldi	r30, 0x00	; 0
    61ae:	b8 2e       	mov	r11, r24
    61b0:	b9 1a       	sub	r11, r25
    61b2:	91 e0       	ldi	r25, 0x01	; 1
    61b4:	8b 15       	cp	r24, r11
    61b6:	08 f4       	brcc	.+2      	; 0x61ba <handleMotorsWithNoController+0x424>
    61b8:	fe ce       	rjmp	.-516    	; 0x5fb6 <handleMotorsWithNoController+0x220>
    61ba:	ef cf       	rjmp	.-34     	; 0x619a <handleMotorsWithNoController+0x404>
    61bc:	e0 e0       	ldi	r30, 0x00	; 0
    61be:	9e 2b       	or	r25, r30
    61c0:	82 2f       	mov	r24, r18
    61c2:	8f 1b       	sub	r24, r31
    61c4:	e1 e0       	ldi	r30, 0x01	; 1
    61c6:	28 17       	cp	r18, r24
    61c8:	08 f4       	brcc	.+2      	; 0x61cc <handleMotorsWithNoController+0x436>
    61ca:	ef ce       	rjmp	.-546    	; 0x5faa <handleMotorsWithNoController+0x214>
    61cc:	ef cf       	rjmp	.-34     	; 0x61ac <handleMotorsWithNoController+0x416>
    61ce:	90 e0       	ldi	r25, 0x00	; 0
    61d0:	f8 2e       	mov	r15, r24
    61d2:	fe 1a       	sub	r15, r30
    61d4:	e1 e0       	ldi	r30, 0x01	; 1
    61d6:	8f 15       	cp	r24, r15
    61d8:	08 f4       	brcc	.+2      	; 0x61dc <handleMotorsWithNoController+0x446>
    61da:	e0 ce       	rjmp	.-576    	; 0x5f9c <handleMotorsWithNoController+0x206>
    61dc:	ef cf       	rjmp	.-34     	; 0x61bc <handleMotorsWithNoController+0x426>
    61de:	e0 e0       	ldi	r30, 0x00	; 0
    61e0:	81 2f       	mov	r24, r17
    61e2:	89 1b       	sub	r24, r25
    61e4:	91 e0       	ldi	r25, 0x01	; 1
    61e6:	18 17       	cp	r17, r24
    61e8:	08 f4       	brcc	.+2      	; 0x61ec <handleMotorsWithNoController+0x456>
    61ea:	d2 ce       	rjmp	.-604    	; 0x5f90 <handleMotorsWithNoController+0x1fa>
    61ec:	f0 cf       	rjmp	.-32     	; 0x61ce <handleMotorsWithNoController+0x438>
    61ee:	33 23       	and	r19, r19
    61f0:	09 f0       	breq	.+2      	; 0x61f4 <handleMotorsWithNoController+0x45e>
    61f2:	1b cf       	rjmp	.-458    	; 0x602a <handleMotorsWithNoController+0x294>
    61f4:	ee 23       	and	r30, r30
    61f6:	09 f0       	breq	.+2      	; 0x61fa <handleMotorsWithNoController+0x464>
    61f8:	18 cf       	rjmp	.-464    	; 0x602a <handleMotorsWithNoController+0x294>
    61fa:	bb 23       	and	r27, r27
    61fc:	09 f0       	breq	.+2      	; 0x6200 <handleMotorsWithNoController+0x46a>
    61fe:	15 cf       	rjmp	.-470    	; 0x602a <handleMotorsWithNoController+0x294>
    6200:	dd 20       	and	r13, r13
    6202:	09 f0       	breq	.+2      	; 0x6206 <handleMotorsWithNoController+0x470>
    6204:	12 cf       	rjmp	.-476    	; 0x602a <handleMotorsWithNoController+0x294>
    6206:	bb 20       	and	r11, r11
    6208:	09 f0       	breq	.+2      	; 0x620c <handleMotorsWithNoController+0x476>
    620a:	0f cf       	rjmp	.-482    	; 0x602a <handleMotorsWithNoController+0x294>
    620c:	41 e0       	ldi	r20, 0x01	; 1
    620e:	4f 15       	cp	r20, r15
    6210:	08 f4       	brcc	.+2      	; 0x6214 <handleMotorsWithNoController+0x47e>
    6212:	0b cf       	rjmp	.-490    	; 0x602a <handleMotorsWithNoController+0x294>
    6214:	f4 16       	cp	r15, r20
    6216:	09 f0       	breq	.+2      	; 0x621a <handleMotorsWithNoController+0x484>
    6218:	ce cd       	rjmp	.-1124   	; 0x5db6 <handleMotorsWithNoController+0x20>
    621a:	5f e8       	ldi	r21, 0x8F	; 143
    621c:	59 15       	cp	r21, r9
    621e:	08 f4       	brcc	.+2      	; 0x6222 <handleMotorsWithNoController+0x48c>
    6220:	04 cf       	rjmp	.-504    	; 0x602a <handleMotorsWithNoController+0x294>
    6222:	c9 cd       	rjmp	.-1134   	; 0x5db6 <handleMotorsWithNoController+0x20>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    6224:	35 95       	asr	r19
    6226:	27 95       	ror	r18
    6228:	35 95       	asr	r19
    622a:	27 95       	ror	r18
    622c:	35 95       	asr	r19
    622e:	27 95       	ror	r18
    6230:	b9 01       	movw	r22, r18
    6232:	88 27       	eor	r24, r24
    6234:	77 fd       	sbrc	r23, 7
    6236:	80 95       	com	r24
    6238:	98 2f       	mov	r25, r24
    623a:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    623e:	9b 01       	movw	r18, r22
    6240:	ac 01       	movw	r20, r24
    6242:	60 91 ed 02 	lds	r22, 0x02ED
    6246:	70 91 ee 02 	lds	r23, 0x02EE
    624a:	80 91 ef 02 	lds	r24, 0x02EF
    624e:	90 91 f0 02 	lds	r25, 0x02F0
    6252:	0e 94 7a 4b 	call	0x96f4	; 0x96f4 <__subsf3>
    6256:	60 93 ed 02 	sts	0x02ED, r22
    625a:	70 93 ee 02 	sts	0x02EE, r23
    625e:	80 93 ef 02 	sts	0x02EF, r24
    6262:	90 93 f0 02 	sts	0x02F0, r25
    6266:	29 ce       	rjmp	.-942    	; 0x5eba <handleMotorsWithNoController+0x124>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    6268:	35 95       	asr	r19
    626a:	27 95       	ror	r18
    626c:	35 95       	asr	r19
    626e:	27 95       	ror	r18
    6270:	35 95       	asr	r19
    6272:	27 95       	ror	r18
    6274:	b9 01       	movw	r22, r18
    6276:	88 27       	eor	r24, r24
    6278:	77 fd       	sbrc	r23, 7
    627a:	80 95       	com	r24
    627c:	98 2f       	mov	r25, r24
    627e:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    6282:	9b 01       	movw	r18, r22
    6284:	ac 01       	movw	r20, r24
    6286:	60 91 f1 02 	lds	r22, 0x02F1
    628a:	70 91 f2 02 	lds	r23, 0x02F2
    628e:	80 91 f3 02 	lds	r24, 0x02F3
    6292:	90 91 f4 02 	lds	r25, 0x02F4
    6296:	0e 94 7a 4b 	call	0x96f4	; 0x96f4 <__subsf3>
    629a:	60 93 f1 02 	sts	0x02F1, r22
    629e:	70 93 f2 02 	sts	0x02F2, r23
    62a2:	80 93 f3 02 	sts	0x02F3, r24
    62a6:	90 93 f4 02 	sts	0x02F4, r25
    62aa:	ca cd       	rjmp	.-1132   	; 0x5e40 <handleMotorsWithNoController+0xaa>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    62ac:	88 27       	eor	r24, r24
    62ae:	99 27       	eor	r25, r25
    62b0:	82 1b       	sub	r24, r18
    62b2:	93 0b       	sbc	r25, r19
    62b4:	90 93 9b 00 	sts	0x009B, r25
    62b8:	80 93 9a 00 	sts	0x009A, r24
    62bc:	31 ce       	rjmp	.-926    	; 0x5f20 <handleMotorsWithNoController+0x18a>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    62be:	88 27       	eor	r24, r24
    62c0:	99 27       	eor	r25, r25
    62c2:	84 1b       	sub	r24, r20
    62c4:	95 0b       	sbc	r25, r21
    62c6:	90 93 ab 00 	sts	0x00AB, r25
    62ca:	80 93 aa 00 	sts	0x00AA, r24
    62ce:	30 ce       	rjmp	.-928    	; 0x5f30 <handleMotorsWithNoController+0x19a>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    62d0:	20 91 15 03 	lds	r18, 0x0315
    62d4:	30 91 16 03 	lds	r19, 0x0316
    62d8:	20 93 19 03 	sts	0x0319, r18
    62dc:	30 93 1a 03 	sts	0x031A, r19
				pwm_intermediate_left_desired = pwm_left_desired;
    62e0:	40 91 17 03 	lds	r20, 0x0317
    62e4:	50 91 18 03 	lds	r21, 0x0318
    62e8:	40 93 1b 03 	sts	0x031B, r20
    62ec:	50 93 1c 03 	sts	0x031C, r21
    62f0:	c9 01       	movw	r24, r18
    62f2:	ec 01       	movw	r28, r24
    62f4:	ca 01       	movw	r24, r20
    62f6:	8c 01       	movw	r16, r24
    62f8:	66 cd       	rjmp	.-1332   	; 0x5dc6 <handleMotorsWithNoController+0x30>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    62fa:	c0 91 19 03 	lds	r28, 0x0319
    62fe:	d0 91 1a 03 	lds	r29, 0x031A
    6302:	c2 9f       	mul	r28, r18
    6304:	c0 01       	movw	r24, r0
    6306:	c3 9f       	mul	r28, r19
    6308:	90 0d       	add	r25, r0
    630a:	d2 9f       	mul	r29, r18
    630c:	90 0d       	add	r25, r0
    630e:	11 24       	eor	r1, r1
    6310:	97 fd       	sbrc	r25, 7
    6312:	ac ce       	rjmp	.-680    	; 0x606c <handleMotorsWithNoController+0x2d6>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    6314:	c2 17       	cp	r28, r18
    6316:	d3 07       	cpc	r29, r19
    6318:	74 f5       	brge	.+92     	; 0x6376 <handleMotorsWithNoController+0x5e0>
					pwm_intermediate_right_desired += speedStep;
    631a:	80 91 13 02 	lds	r24, 0x0213
    631e:	ae 01       	movw	r20, r28
    6320:	48 0f       	add	r20, r24
    6322:	51 1d       	adc	r21, r1
    6324:	ca 01       	movw	r24, r20
    6326:	50 93 1a 03 	sts	0x031A, r21
    632a:	40 93 19 03 	sts	0x0319, r20
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    632e:	24 17       	cp	r18, r20
    6330:	35 07       	cpc	r19, r21
    6332:	94 f5       	brge	.+100    	; 0x6398 <handleMotorsWithNoController+0x602>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    6334:	30 93 1a 03 	sts	0x031A, r19
    6338:	20 93 19 03 	sts	0x0319, r18
    633c:	e9 01       	movw	r28, r18
    633e:	9c ce       	rjmp	.-712    	; 0x6078 <handleMotorsWithNoController+0x2e2>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    6340:	10 92 1c 03 	sts	0x031C, r1
    6344:	10 92 1b 03 	sts	0x031B, r1
    6348:	00 e0       	ldi	r16, 0x00	; 0
    634a:	10 e0       	ldi	r17, 0x00	; 0
    634c:	3c cd       	rjmp	.-1416   	; 0x5dc6 <handleMotorsWithNoController+0x30>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    634e:	20 17       	cp	r18, r16
    6350:	31 07       	cpc	r19, r17
    6352:	0c f0       	brlt	.+2      	; 0x6356 <handleMotorsWithNoController+0x5c0>
    6354:	38 cd       	rjmp	.-1424   	; 0x5dc6 <handleMotorsWithNoController+0x30>
					pwm_intermediate_left_desired -= speedStep;
    6356:	80 91 13 02 	lds	r24, 0x0213
    635a:	a8 01       	movw	r20, r16
    635c:	48 1b       	sub	r20, r24
    635e:	51 09       	sbc	r21, r1
    6360:	ca 01       	movw	r24, r20
    6362:	50 93 1c 03 	sts	0x031C, r21
    6366:	40 93 1b 03 	sts	0x031B, r20
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    636a:	42 17       	cp	r20, r18
    636c:	53 07       	cpc	r21, r19
    636e:	0c f4       	brge	.+2      	; 0x6372 <handleMotorsWithNoController+0x5dc>
    6370:	aa ce       	rjmp	.-684    	; 0x60c6 <handleMotorsWithNoController+0x330>
    6372:	8c 01       	movw	r16, r24
    6374:	28 cd       	rjmp	.-1456   	; 0x5dc6 <handleMotorsWithNoController+0x30>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    6376:	2c 17       	cp	r18, r28
    6378:	3d 07       	cpc	r19, r29
    637a:	0c f0       	brlt	.+2      	; 0x637e <handleMotorsWithNoController+0x5e8>
    637c:	7d ce       	rjmp	.-774    	; 0x6078 <handleMotorsWithNoController+0x2e2>
					pwm_intermediate_right_desired -= speedStep;
    637e:	80 91 13 02 	lds	r24, 0x0213
    6382:	ae 01       	movw	r20, r28
    6384:	48 1b       	sub	r20, r24
    6386:	51 09       	sbc	r21, r1
    6388:	ca 01       	movw	r24, r20
    638a:	50 93 1a 03 	sts	0x031A, r21
    638e:	40 93 19 03 	sts	0x0319, r20
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    6392:	42 17       	cp	r20, r18
    6394:	53 07       	cpc	r21, r19
    6396:	74 f2       	brlt	.-100    	; 0x6334 <handleMotorsWithNoController+0x59e>
    6398:	ec 01       	movw	r28, r24
    639a:	6e ce       	rjmp	.-804    	; 0x6078 <handleMotorsWithNoController+0x2e2>

0000639c <initCalibration>:
	calibration[8][7] = 153;

    writeCalibrationToFlash();
}

void initCalibration() {
    639c:	2f 92       	push	r2
    639e:	3f 92       	push	r3
    63a0:	4f 92       	push	r4
    63a2:	5f 92       	push	r5
    63a4:	6f 92       	push	r6
    63a6:	7f 92       	push	r7
    63a8:	8f 92       	push	r8
    63aa:	9f 92       	push	r9
    63ac:	af 92       	push	r10
    63ae:	bf 92       	push	r11
    63b0:	cf 92       	push	r12
    63b2:	df 92       	push	r13
    63b4:	ef 92       	push	r14
    63b6:	ff 92       	push	r15
    63b8:	0f 93       	push	r16
    63ba:	1f 93       	push	r17
    63bc:	cf 93       	push	r28
    63be:	df 93       	push	r29

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    63c0:	8a e6       	ldi	r24, 0x6A	; 106
    63c2:	9f e0       	ldi	r25, 0x0F	; 15
    63c4:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    63c8:	85 55       	subi	r24, 0x55	; 85
    63ca:	9a 4a       	sbci	r25, 0xAA	; 170
    63cc:	09 f4       	brne	.+2      	; 0x63d0 <initCalibration+0x34>
    63ce:	9c c1       	rjmp	.+824    	; 0x6708 <initCalibration+0x36c>
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    63d0:	74 e1       	ldi	r23, 0x14	; 20
    63d2:	87 2e       	mov	r8, r23
    63d4:	91 2c       	mov	r9, r1
    63d6:	90 92 03 09 	sts	0x0903, r9
    63da:	80 92 02 09 	sts	0x0902, r8
    calibration[1][0] = 40;
    63de:	88 e2       	ldi	r24, 0x28	; 40
    63e0:	90 e0       	ldi	r25, 0x00	; 0
    63e2:	90 93 13 09 	sts	0x0913, r25
    63e6:	80 93 12 09 	sts	0x0912, r24
    calibration[2][0] = 59;
    63ea:	8b e3       	ldi	r24, 0x3B	; 59
    63ec:	90 e0       	ldi	r25, 0x00	; 0
    63ee:	90 93 23 09 	sts	0x0923, r25
    63f2:	80 93 22 09 	sts	0x0922, r24
    calibration[3][0] = 79;
    63f6:	8f e4       	ldi	r24, 0x4F	; 79
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	90 93 33 09 	sts	0x0933, r25
    63fe:	80 93 32 09 	sts	0x0932, r24
    calibration[4][0] = 100;
    6402:	84 e6       	ldi	r24, 0x64	; 100
    6404:	90 e0       	ldi	r25, 0x00	; 0
    6406:	90 93 43 09 	sts	0x0943, r25
    640a:	80 93 42 09 	sts	0x0942, r24
    calibration[5][0] = 120;
    640e:	c8 e7       	ldi	r28, 0x78	; 120
    6410:	d0 e0       	ldi	r29, 0x00	; 0
    6412:	d0 93 53 09 	sts	0x0953, r29
    6416:	c0 93 52 09 	sts	0x0952, r28
    calibration[6][0] = 139;
    641a:	6b e8       	ldi	r22, 0x8B	; 139
    641c:	e6 2e       	mov	r14, r22
    641e:	f1 2c       	mov	r15, r1
    6420:	f0 92 63 09 	sts	0x0963, r15
    6424:	e0 92 62 09 	sts	0x0962, r14
    calibration[7][0] = 159;
    6428:	8f e9       	ldi	r24, 0x9F	; 159
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	90 93 73 09 	sts	0x0973, r25
    6430:	80 93 72 09 	sts	0x0972, r24
	calibration[8][0] = 180;
    6434:	54 eb       	ldi	r21, 0xB4	; 180
    6436:	a5 2e       	mov	r10, r21
    6438:	b1 2c       	mov	r11, r1
    643a:	b0 92 83 09 	sts	0x0983, r11
    643e:	a0 92 82 09 	sts	0x0982, r10
    calibration[0][1] = 19;    	// real speed measured in mm/s
    6442:	23 e1       	ldi	r18, 0x13	; 19
    6444:	30 e0       	ldi	r19, 0x00	; 0
    6446:	30 93 05 09 	sts	0x0905, r19
    644a:	20 93 04 09 	sts	0x0904, r18
    calibration[1][1] = 47;
    644e:	8f e2       	ldi	r24, 0x2F	; 47
    6450:	90 e0       	ldi	r25, 0x00	; 0
    6452:	90 93 15 09 	sts	0x0915, r25
    6456:	80 93 14 09 	sts	0x0914, r24
    calibration[2][1] = 72;
    645a:	88 e4       	ldi	r24, 0x48	; 72
    645c:	90 e0       	ldi	r25, 0x00	; 0
    645e:	90 93 25 09 	sts	0x0925, r25
    6462:	80 93 24 09 	sts	0x0924, r24
    calibration[3][1] = 91;
    6466:	8b e5       	ldi	r24, 0x5B	; 91
    6468:	90 e0       	ldi	r25, 0x00	; 0
    646a:	90 93 35 09 	sts	0x0935, r25
    646e:	80 93 34 09 	sts	0x0934, r24
    calibration[4][1] = 109;
    6472:	8d e6       	ldi	r24, 0x6D	; 109
    6474:	90 e0       	ldi	r25, 0x00	; 0
    6476:	90 93 45 09 	sts	0x0945, r25
    647a:	80 93 44 09 	sts	0x0944, r24
    calibration[5][1] = 125;
    647e:	4d e7       	ldi	r20, 0x7D	; 125
    6480:	c4 2e       	mov	r12, r20
    6482:	d1 2c       	mov	r13, r1
    6484:	d0 92 55 09 	sts	0x0955, r13
    6488:	c0 92 54 09 	sts	0x0954, r12
    calibration[6][1] = 143;
    648c:	8f e8       	ldi	r24, 0x8F	; 143
    648e:	90 e0       	ldi	r25, 0x00	; 0
    6490:	90 93 65 09 	sts	0x0965, r25
    6494:	80 93 64 09 	sts	0x0964, r24
    calibration[7][1] = 160;
    6498:	40 ea       	ldi	r20, 0xA0	; 160
    649a:	50 e0       	ldi	r21, 0x00	; 0
    649c:	50 93 75 09 	sts	0x0975, r21
    64a0:	40 93 74 09 	sts	0x0974, r20
	calibration[8][1] = 174;
    64a4:	8e ea       	ldi	r24, 0xAE	; 174
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	90 93 85 09 	sts	0x0985, r25
    64ac:	80 93 84 09 	sts	0x0984, r24
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    64b0:	30 93 07 09 	sts	0x0907, r19
    64b4:	20 93 06 09 	sts	0x0906, r18
    calibration[1][2] = 39;
    64b8:	67 e2       	ldi	r22, 0x27	; 39
    64ba:	70 e0       	ldi	r23, 0x00	; 0
    64bc:	70 93 17 09 	sts	0x0917, r23
    64c0:	60 93 16 09 	sts	0x0916, r22
    calibration[2][2] = 60;
    64c4:	0c e3       	ldi	r16, 0x3C	; 60
    64c6:	10 e0       	ldi	r17, 0x00	; 0
    64c8:	10 93 27 09 	sts	0x0927, r17
    64cc:	00 93 26 09 	sts	0x0926, r16
    calibration[3][2] = 80;
    64d0:	20 e5       	ldi	r18, 0x50	; 80
    64d2:	22 2e       	mov	r2, r18
    64d4:	31 2c       	mov	r3, r1
    64d6:	30 92 37 09 	sts	0x0937, r3
    64da:	20 92 36 09 	sts	0x0936, r2
    calibration[4][2] = 99;
    64de:	a3 e6       	ldi	r26, 0x63	; 99
    64e0:	b0 e0       	ldi	r27, 0x00	; 0
    64e2:	b0 93 47 09 	sts	0x0947, r27
    64e6:	a0 93 46 09 	sts	0x0946, r26
    calibration[5][2] = 119;
    64ea:	27 e7       	ldi	r18, 0x77	; 119
    64ec:	30 e0       	ldi	r19, 0x00	; 0
    64ee:	30 93 57 09 	sts	0x0957, r19
    64f2:	20 93 56 09 	sts	0x0956, r18
    calibration[6][2] = 140;
    64f6:	ec e8       	ldi	r30, 0x8C	; 140
    64f8:	f0 e0       	ldi	r31, 0x00	; 0
    64fa:	f0 93 67 09 	sts	0x0967, r31
    64fe:	e0 93 66 09 	sts	0x0966, r30
    calibration[7][2] = 160;
    6502:	50 93 77 09 	sts	0x0977, r21
    6506:	40 93 76 09 	sts	0x0976, r20
	calibration[8][2] = 180;
    650a:	b0 92 87 09 	sts	0x0987, r11
    650e:	a0 92 86 09 	sts	0x0986, r10
    calibration[0][3] = 23;    	// real speed measured in mm/s
    6512:	87 e1       	ldi	r24, 0x17	; 23
    6514:	90 e0       	ldi	r25, 0x00	; 0
    6516:	90 93 09 09 	sts	0x0909, r25
    651a:	80 93 08 09 	sts	0x0908, r24
    calibration[1][3] = 46;
    651e:	9e e2       	ldi	r25, 0x2E	; 46
    6520:	49 2e       	mov	r4, r25
    6522:	51 2c       	mov	r5, r1
    6524:	50 92 19 09 	sts	0x0919, r5
    6528:	40 92 18 09 	sts	0x0918, r4
    calibration[2][3] = 64;
    652c:	80 e4       	ldi	r24, 0x40	; 64
    652e:	90 e0       	ldi	r25, 0x00	; 0
    6530:	90 93 29 09 	sts	0x0929, r25
    6534:	80 93 28 09 	sts	0x0928, r24
    calibration[3][3] = 81;
    6538:	81 e5       	ldi	r24, 0x51	; 81
    653a:	68 2e       	mov	r6, r24
    653c:	71 2c       	mov	r7, r1
    653e:	70 92 39 09 	sts	0x0939, r7
    6542:	60 92 38 09 	sts	0x0938, r6
    calibration[4][3] = 97;
    6546:	81 e6       	ldi	r24, 0x61	; 97
    6548:	90 e0       	ldi	r25, 0x00	; 0
    654a:	90 93 49 09 	sts	0x0949, r25
    654e:	80 93 48 09 	sts	0x0948, r24
    calibration[5][3] = 112;
    6552:	80 e7       	ldi	r24, 0x70	; 112
    6554:	90 e0       	ldi	r25, 0x00	; 0
    6556:	90 93 59 09 	sts	0x0959, r25
    655a:	80 93 58 09 	sts	0x0958, r24
    calibration[6][3] = 125;
    655e:	d0 92 69 09 	sts	0x0969, r13
    6562:	c0 92 68 09 	sts	0x0968, r12
    calibration[7][3] = 139;
    6566:	f0 92 79 09 	sts	0x0979, r15
    656a:	e0 92 78 09 	sts	0x0978, r14
	calibration[8][3] = 152;
    656e:	88 e9       	ldi	r24, 0x98	; 152
    6570:	90 e0       	ldi	r25, 0x00	; 0
    6572:	90 93 89 09 	sts	0x0989, r25
    6576:	80 93 88 09 	sts	0x0988, r24
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    657a:	90 92 0b 09 	sts	0x090B, r9
    657e:	80 92 0a 09 	sts	0x090A, r8
    calibration[1][4] = 39;
    6582:	70 93 1b 09 	sts	0x091B, r23
    6586:	60 93 1a 09 	sts	0x091A, r22
    calibration[2][4] = 60;
    658a:	10 93 2b 09 	sts	0x092B, r17
    658e:	00 93 2a 09 	sts	0x092A, r16
    calibration[3][4] = 79;
    6592:	8f e4       	ldi	r24, 0x4F	; 79
    6594:	90 e0       	ldi	r25, 0x00	; 0
    6596:	90 93 3b 09 	sts	0x093B, r25
    659a:	80 93 3a 09 	sts	0x093A, r24
    calibration[4][4] = 99;
    659e:	b0 93 4b 09 	sts	0x094B, r27
    65a2:	a0 93 4a 09 	sts	0x094A, r26
    calibration[5][4] = 120;
    65a6:	d0 93 5b 09 	sts	0x095B, r29
    65aa:	c0 93 5a 09 	sts	0x095A, r28
    calibration[6][4] = 140;
    65ae:	f0 93 6b 09 	sts	0x096B, r31
    65b2:	e0 93 6a 09 	sts	0x096A, r30
    calibration[7][4] = 160;
    65b6:	50 93 7b 09 	sts	0x097B, r21
    65ba:	40 93 7a 09 	sts	0x097A, r20
	calibration[8][4] = 179;
    65be:	83 eb       	ldi	r24, 0xB3	; 179
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	90 93 8b 09 	sts	0x098B, r25
    65c6:	80 93 8a 09 	sts	0x098A, r24
    calibration[0][5] = 18;    	// real speed measured in mm/s
    65ca:	82 e1       	ldi	r24, 0x12	; 18
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	90 93 0d 09 	sts	0x090D, r25
    65d2:	80 93 0c 09 	sts	0x090C, r24
    calibration[1][5] = 45;
    65d6:	8d e2       	ldi	r24, 0x2D	; 45
    65d8:	90 e0       	ldi	r25, 0x00	; 0
    65da:	90 93 1d 09 	sts	0x091D, r25
    65de:	80 93 1c 09 	sts	0x091C, r24
    calibration[2][5] = 68;
    65e2:	84 e4       	ldi	r24, 0x44	; 68
    65e4:	90 e0       	ldi	r25, 0x00	; 0
    65e6:	90 93 2d 09 	sts	0x092D, r25
    65ea:	80 93 2c 09 	sts	0x092C, r24
    calibration[3][5] = 87;
    65ee:	87 e5       	ldi	r24, 0x57	; 87
    65f0:	90 e0       	ldi	r25, 0x00	; 0
    65f2:	90 93 3d 09 	sts	0x093D, r25
    65f6:	80 93 3c 09 	sts	0x093C, r24
    calibration[4][5] = 105;
    65fa:	89 e6       	ldi	r24, 0x69	; 105
    65fc:	90 e0       	ldi	r25, 0x00	; 0
    65fe:	90 93 4d 09 	sts	0x094D, r25
    6602:	80 93 4c 09 	sts	0x094C, r24
    calibration[5][5] = 119;
    6606:	30 93 5d 09 	sts	0x095D, r19
    660a:	20 93 5c 09 	sts	0x095C, r18
    calibration[6][5] = 137;
    660e:	89 e8       	ldi	r24, 0x89	; 137
    6610:	90 e0       	ldi	r25, 0x00	; 0
    6612:	90 93 6d 09 	sts	0x096D, r25
    6616:	80 93 6c 09 	sts	0x096C, r24
    calibration[7][5] = 151;
    661a:	87 e9       	ldi	r24, 0x97	; 151
    661c:	90 e0       	ldi	r25, 0x00	; 0
    661e:	90 93 7d 09 	sts	0x097D, r25
    6622:	80 93 7c 09 	sts	0x097C, r24
	calibration[8][5] = 168;
    6626:	88 ea       	ldi	r24, 0xA8	; 168
    6628:	90 e0       	ldi	r25, 0x00	; 0
    662a:	90 93 8d 09 	sts	0x098D, r25
    662e:	80 93 8c 09 	sts	0x098C, r24
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    6632:	90 92 0f 09 	sts	0x090F, r9
    6636:	80 92 0e 09 	sts	0x090E, r8
    calibration[1][6] = 39;
    663a:	70 93 1f 09 	sts	0x091F, r23
    663e:	60 93 1e 09 	sts	0x091E, r22
    calibration[2][6] = 59;
    6642:	8b e3       	ldi	r24, 0x3B	; 59
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	90 93 2f 09 	sts	0x092F, r25
    664a:	80 93 2e 09 	sts	0x092E, r24
    calibration[3][6] = 80;
    664e:	30 92 3f 09 	sts	0x093F, r3
    6652:	20 92 3e 09 	sts	0x093E, r2
    calibration[4][6] = 100;
    6656:	84 e6       	ldi	r24, 0x64	; 100
    6658:	90 e0       	ldi	r25, 0x00	; 0
    665a:	90 93 4f 09 	sts	0x094F, r25
    665e:	80 93 4e 09 	sts	0x094E, r24
    calibration[5][6] = 119;
    6662:	30 93 5f 09 	sts	0x095F, r19
    6666:	20 93 5e 09 	sts	0x095E, r18
    calibration[6][6] = 139;
    666a:	f0 92 6f 09 	sts	0x096F, r15
    666e:	e0 92 6e 09 	sts	0x096E, r14
    calibration[7][6] = 160;
    6672:	50 93 7f 09 	sts	0x097F, r21
    6676:	40 93 7e 09 	sts	0x097E, r20
	calibration[8][6] = 180;
    667a:	b0 92 8f 09 	sts	0x098F, r11
    667e:	a0 92 8e 09 	sts	0x098E, r10
    calibration[0][7] = 22;    	// real speed measured in mm/s
    6682:	86 e1       	ldi	r24, 0x16	; 22
    6684:	90 e0       	ldi	r25, 0x00	; 0
    6686:	90 93 11 09 	sts	0x0911, r25
    668a:	80 93 10 09 	sts	0x0910, r24
    calibration[1][7] = 46;
    668e:	50 92 21 09 	sts	0x0921, r5
    6692:	40 92 20 09 	sts	0x0920, r4
    calibration[2][7] = 65;
    6696:	81 e4       	ldi	r24, 0x41	; 65
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	90 93 31 09 	sts	0x0931, r25
    669e:	80 93 30 09 	sts	0x0930, r24
    calibration[3][7] = 81;
    66a2:	70 92 41 09 	sts	0x0941, r7
    66a6:	60 92 40 09 	sts	0x0940, r6
    calibration[4][7] = 96;
    66aa:	80 e6       	ldi	r24, 0x60	; 96
    66ac:	90 e0       	ldi	r25, 0x00	; 0
    66ae:	90 93 51 09 	sts	0x0951, r25
    66b2:	80 93 50 09 	sts	0x0950, r24
    calibration[5][7] = 111;
    66b6:	8f e6       	ldi	r24, 0x6F	; 111
    66b8:	90 e0       	ldi	r25, 0x00	; 0
    66ba:	90 93 61 09 	sts	0x0961, r25
    66be:	80 93 60 09 	sts	0x0960, r24
    calibration[6][7] = 125;
    66c2:	d0 92 71 09 	sts	0x0971, r13
    66c6:	c0 92 70 09 	sts	0x0970, r12
    calibration[7][7] = 139;
    66ca:	f0 92 81 09 	sts	0x0981, r15
    66ce:	e0 92 80 09 	sts	0x0980, r14
	calibration[8][7] = 153;
    66d2:	89 e9       	ldi	r24, 0x99	; 153
    66d4:	90 e0       	ldi	r25, 0x00	; 0
    66d6:	90 93 91 09 	sts	0x0991, r25
    66da:	80 93 90 09 	sts	0x0990, r24

    writeCalibrationToFlash();
    66de:	0e 94 ea 3e 	call	0x7dd4	; 0x7dd4 <writeCalibrationToFlash>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    }

}
    66e2:	df 91       	pop	r29
    66e4:	cf 91       	pop	r28
    66e6:	1f 91       	pop	r17
    66e8:	0f 91       	pop	r16
    66ea:	ff 90       	pop	r15
    66ec:	ef 90       	pop	r14
    66ee:	df 90       	pop	r13
    66f0:	cf 90       	pop	r12
    66f2:	bf 90       	pop	r11
    66f4:	af 90       	pop	r10
    66f6:	9f 90       	pop	r9
    66f8:	8f 90       	pop	r8
    66fa:	7f 90       	pop	r7
    66fc:	6f 90       	pop	r6
    66fe:	5f 90       	pop	r5
    6700:	4f 90       	pop	r4
    6702:	3f 90       	pop	r3
    6704:	2f 90       	pop	r2
    6706:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    6708:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <readCalibrationFromFlash>
    670c:	ea cf       	rjmp	.-44     	; 0x66e2 <initCalibration+0x346>

0000670e <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    670e:	80 91 85 02 	lds	r24, 0x0285
    6712:	90 91 86 02 	lds	r25, 0x0286
    6716:	84 5a       	subi	r24, 0xA4	; 164
    6718:	91 40       	sbci	r25, 0x01	; 1
    671a:	b4 f0       	brlt	.+44     	; 0x6748 <cliffDetected+0x3a>
    671c:	80 91 87 02 	lds	r24, 0x0287
    6720:	90 91 88 02 	lds	r25, 0x0288
    6724:	84 5a       	subi	r24, 0xA4	; 164
    6726:	91 40       	sbci	r25, 0x01	; 1
    6728:	7c f0       	brlt	.+30     	; 0x6748 <cliffDetected+0x3a>
    672a:	80 91 89 02 	lds	r24, 0x0289
    672e:	90 91 8a 02 	lds	r25, 0x028A
    6732:	84 5a       	subi	r24, 0xA4	; 164
    6734:	91 40       	sbci	r25, 0x01	; 1
    6736:	44 f0       	brlt	.+16     	; 0x6748 <cliffDetected+0x3a>
    6738:	20 e0       	ldi	r18, 0x00	; 0
    673a:	80 91 8b 02 	lds	r24, 0x028B
    673e:	90 91 8c 02 	lds	r25, 0x028C
    6742:	84 5a       	subi	r24, 0xA4	; 164
    6744:	91 40       	sbci	r25, 0x01	; 1
    6746:	0c f4       	brge	.+2      	; 0x674a <cliffDetected+0x3c>
    6748:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		return 0;
	}


}
    674a:	82 2f       	mov	r24, r18
    674c:	08 95       	ret

0000674e <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    674e:	81 e0       	ldi	r24, 0x01	; 1
    6750:	80 93 94 04 	sts	0x0494, r24
}
    6754:	08 95       	ret

00006756 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    6756:	10 92 94 04 	sts	0x0494, r1
}
    675a:	08 95       	ret

0000675c <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    675c:	81 e0       	ldi	r24, 0x01	; 1
    675e:	80 93 95 04 	sts	0x0495, r24
}
    6762:	08 95       	ret

00006764 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    6764:	10 92 95 04 	sts	0x0495, r1
}
    6768:	08 95       	ret

0000676a <obstacleAvoidance>:

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)

}

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    676a:	2f 92       	push	r2
    676c:	3f 92       	push	r3
    676e:	4f 92       	push	r4
    6770:	5f 92       	push	r5
    6772:	6f 92       	push	r6
    6774:	7f 92       	push	r7
    6776:	8f 92       	push	r8
    6778:	9f 92       	push	r9
    677a:	af 92       	push	r10
    677c:	bf 92       	push	r11
    677e:	cf 92       	push	r12
    6780:	df 92       	push	r13
    6782:	ef 92       	push	r14
    6784:	ff 92       	push	r15
    6786:	0f 93       	push	r16
    6788:	1f 93       	push	r17
    678a:	df 93       	push	r29
    678c:	cf 93       	push	r28
    678e:	00 d0       	rcall	.+0      	; 0x6790 <obstacleAvoidance+0x26>
    6790:	00 d0       	rcall	.+0      	; 0x6792 <obstacleAvoidance+0x28>
    6792:	cd b7       	in	r28, 0x3d	; 61
    6794:	de b7       	in	r29, 0x3e	; 62
    6796:	2c 01       	movw	r4, r24
    6798:	1b 01       	movw	r2, r22
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    679a:	fc 01       	movw	r30, r24
    679c:	01 90       	ld	r0, Z+
    679e:	f0 81       	ld	r31, Z
    67a0:	e0 2d       	mov	r30, r0
    67a2:	fc 83       	std	Y+4, r31	; 0x04
    67a4:	eb 83       	std	Y+3, r30	; 0x03
    67a6:	fb 01       	movw	r30, r22
    67a8:	01 90       	ld	r0, Z+
    67aa:	f0 81       	ld	r31, Z
    67ac:	e0 2d       	mov	r30, r0
    67ae:	fa 83       	std	Y+2, r31	; 0x02
    67b0:	e9 83       	std	Y+1, r30	; 0x01

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    67b2:	80 91 dd 02 	lds	r24, 0x02DD
    67b6:	90 91 de 02 	lds	r25, 0x02DE
    67ba:	05 97       	sbiw	r24, 0x05	; 5
    67bc:	24 f4       	brge	.+8      	; 0x67c6 <obstacleAvoidance+0x5c>
			proximityResultLinear[i] = 0;
    67be:	10 92 de 02 	sts	0x02DE, r1
    67c2:	10 92 dd 02 	sts	0x02DD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    67c6:	80 91 df 02 	lds	r24, 0x02DF
    67ca:	90 91 e0 02 	lds	r25, 0x02E0
    67ce:	05 97       	sbiw	r24, 0x05	; 5
    67d0:	24 f4       	brge	.+8      	; 0x67da <obstacleAvoidance+0x70>
			proximityResultLinear[i] = 0;
    67d2:	10 92 e0 02 	sts	0x02E0, r1
    67d6:	10 92 df 02 	sts	0x02DF, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    67da:	80 91 e1 02 	lds	r24, 0x02E1
    67de:	90 91 e2 02 	lds	r25, 0x02E2
    67e2:	05 97       	sbiw	r24, 0x05	; 5
    67e4:	24 f4       	brge	.+8      	; 0x67ee <obstacleAvoidance+0x84>
			proximityResultLinear[i] = 0;
    67e6:	10 92 e2 02 	sts	0x02E2, r1
    67ea:	10 92 e1 02 	sts	0x02E1, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    67ee:	80 91 e3 02 	lds	r24, 0x02E3
    67f2:	90 91 e4 02 	lds	r25, 0x02E4
    67f6:	05 97       	sbiw	r24, 0x05	; 5
    67f8:	24 f4       	brge	.+8      	; 0x6802 <obstacleAvoidance+0x98>
			proximityResultLinear[i] = 0;
    67fa:	10 92 e4 02 	sts	0x02E4, r1
    67fe:	10 92 e3 02 	sts	0x02E3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6802:	80 91 e5 02 	lds	r24, 0x02E5
    6806:	90 91 e6 02 	lds	r25, 0x02E6
    680a:	05 97       	sbiw	r24, 0x05	; 5
    680c:	24 f4       	brge	.+8      	; 0x6816 <obstacleAvoidance+0xac>
			proximityResultLinear[i] = 0;
    680e:	10 92 e6 02 	sts	0x02E6, r1
    6812:	10 92 e5 02 	sts	0x02E5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6816:	80 91 e7 02 	lds	r24, 0x02E7
    681a:	90 91 e8 02 	lds	r25, 0x02E8
    681e:	05 97       	sbiw	r24, 0x05	; 5
    6820:	24 f4       	brge	.+8      	; 0x682a <obstacleAvoidance+0xc0>
			proximityResultLinear[i] = 0;
    6822:	10 92 e8 02 	sts	0x02E8, r1
    6826:	10 92 e7 02 	sts	0x02E7, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    682a:	80 91 e9 02 	lds	r24, 0x02E9
    682e:	90 91 ea 02 	lds	r25, 0x02EA
    6832:	05 97       	sbiw	r24, 0x05	; 5
    6834:	24 f4       	brge	.+8      	; 0x683e <obstacleAvoidance+0xd4>
			proximityResultLinear[i] = 0;
    6836:	10 92 ea 02 	sts	0x02EA, r1
    683a:	10 92 e9 02 	sts	0x02E9, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    683e:	80 91 eb 02 	lds	r24, 0x02EB
    6842:	90 91 ec 02 	lds	r25, 0x02EC
    6846:	05 97       	sbiw	r24, 0x05	; 5
    6848:	24 f4       	brge	.+8      	; 0x6852 <obstacleAvoidance+0xe8>
			proximityResultLinear[i] = 0;
    684a:	10 92 ec 02 	sts	0x02EC, r1
    684e:	10 92 eb 02 	sts	0x02EB, r1
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    6852:	a0 90 dd 02 	lds	r10, 0x02DD
    6856:	b0 90 de 02 	lds	r11, 0x02DE
    685a:	b0 94       	com	r11
    685c:	a1 94       	neg	r10
    685e:	b1 08       	sbc	r11, r1
    6860:	b3 94       	inc	r11
    6862:	80 90 df 02 	lds	r8, 0x02DF
    6866:	90 90 e0 02 	lds	r9, 0x02E0
    686a:	95 94       	asr	r9
    686c:	87 94       	ror	r8
    686e:	c0 90 e3 02 	lds	r12, 0x02E3
    6872:	d0 90 e4 02 	lds	r13, 0x02E4
    6876:	d5 94       	asr	r13
    6878:	c7 94       	ror	r12
    687a:	20 91 e5 02 	lds	r18, 0x02E5
    687e:	30 91 e6 02 	lds	r19, 0x02E6
    6882:	3e 83       	std	Y+6, r19	; 0x06
    6884:	2d 83       	std	Y+5, r18	; 0x05
    6886:	00 91 e7 02 	lds	r16, 0x02E7
    688a:	10 91 e8 02 	lds	r17, 0x02E8
    688e:	15 95       	asr	r17
    6890:	07 95       	ror	r16
    6892:	e0 90 eb 02 	lds	r14, 0x02EB
    6896:	f0 90 ec 02 	lds	r15, 0x02EC
    689a:	f5 94       	asr	r15
    689c:	e7 94       	ror	r14
    689e:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <rand>
    68a2:	ed 81       	ldd	r30, Y+5	; 0x05
    68a4:	fe 81       	ldd	r31, Y+6	; 0x06
    68a6:	7e 97       	sbiw	r30, 0x1e	; 30
    68a8:	ea 0d       	add	r30, r10
    68aa:	fb 1d       	adc	r31, r11
    68ac:	ec 0d       	add	r30, r12
    68ae:	fd 1d       	adc	r31, r13
    68b0:	e0 0f       	add	r30, r16
    68b2:	f1 1f       	adc	r31, r17
    68b4:	e8 19       	sub	r30, r8
    68b6:	f9 09       	sbc	r31, r9
    68b8:	ee 19       	sub	r30, r14
    68ba:	ff 09       	sbc	r31, r15
    68bc:	6c e3       	ldi	r22, 0x3C	; 60
    68be:	70 e0       	ldi	r23, 0x00	; 0
    68c0:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__divmodhi4>
    68c4:	e8 0f       	add	r30, r24
    68c6:	f9 1f       	adc	r31, r25
    68c8:	fe 83       	std	Y+6, r31	; 0x06
    68ca:	ed 83       	std	Y+5, r30	; 0x05
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    68cc:	60 90 df 02 	lds	r6, 0x02DF
    68d0:	70 90 e0 02 	lds	r7, 0x02E0
    68d4:	75 94       	asr	r7
    68d6:	67 94       	ror	r6
    68d8:	c0 90 e1 02 	lds	r12, 0x02E1
    68dc:	d0 90 e2 02 	lds	r13, 0x02E2
    68e0:	d5 94       	asr	r13
    68e2:	c7 94       	ror	r12
    68e4:	d5 94       	asr	r13
    68e6:	c7 94       	ror	r12
    68e8:	a0 90 e3 02 	lds	r10, 0x02E3
    68ec:	b0 90 e4 02 	lds	r11, 0x02E4
    68f0:	b5 94       	asr	r11
    68f2:	a7 94       	ror	r10
    68f4:	80 90 e7 02 	lds	r8, 0x02E7
    68f8:	90 90 e8 02 	lds	r9, 0x02E8
    68fc:	95 94       	asr	r9
    68fe:	87 94       	ror	r8
    6900:	00 91 e9 02 	lds	r16, 0x02E9
    6904:	10 91 ea 02 	lds	r17, 0x02EA
    6908:	15 95       	asr	r17
    690a:	07 95       	ror	r16
    690c:	15 95       	asr	r17
    690e:	07 95       	ror	r16
    6910:	e0 90 eb 02 	lds	r14, 0x02EB
    6914:	f0 90 ec 02 	lds	r15, 0x02EC
    6918:	f5 94       	asr	r15
    691a:	e7 94       	ror	r14
    691c:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <rand>
    6920:	93 01       	movw	r18, r6
    6922:	2c 0d       	add	r18, r12
    6924:	3d 1d       	adc	r19, r13
    6926:	2e 51       	subi	r18, 0x1E	; 30
    6928:	30 40       	sbci	r19, 0x00	; 0
    692a:	2a 0d       	add	r18, r10
    692c:	3b 1d       	adc	r19, r11
    692e:	20 1b       	sub	r18, r16
    6930:	31 0b       	sbc	r19, r17
    6932:	28 19       	sub	r18, r8
    6934:	39 09       	sbc	r19, r9
    6936:	2e 19       	sub	r18, r14
    6938:	3f 09       	sbc	r19, r15
    693a:	6c e3       	ldi	r22, 0x3C	; 60
    693c:	70 e0       	ldi	r23, 0x00	; 0
    693e:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__divmodhi4>
    6942:	28 0f       	add	r18, r24
    6944:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    6946:	8b 81       	ldd	r24, Y+3	; 0x03
    6948:	9c 81       	ldd	r25, Y+4	; 0x04
    694a:	97 fd       	sbrc	r25, 7
    694c:	db c0       	rjmp	.+438    	; 0x6b04 <obstacleAvoidance+0x39a>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    694e:	7c 01       	movw	r14, r24
    6950:	00 27       	eor	r16, r16
    6952:	f7 fc       	sbrc	r15, 7
    6954:	00 95       	com	r16
    6956:	10 2f       	mov	r17, r16
    6958:	ed 81       	ldd	r30, Y+5	; 0x05
    695a:	fe 81       	ldd	r31, Y+6	; 0x06
    695c:	3f 01       	movw	r6, r30
    695e:	88 24       	eor	r8, r8
    6960:	77 fc       	sbrc	r7, 7
    6962:	80 94       	com	r8
    6964:	98 2c       	mov	r9, r8
    6966:	59 01       	movw	r10, r18
    6968:	cc 24       	eor	r12, r12
    696a:	b7 fc       	sbrc	r11, 7
    696c:	c0 94       	com	r12
    696e:	dc 2c       	mov	r13, r12
		*pwmLeft = (signed int)res;
    6970:	c4 01       	movw	r24, r8
    6972:	b3 01       	movw	r22, r6
    6974:	6a 19       	sub	r22, r10
    6976:	7b 09       	sbc	r23, r11
    6978:	8c 09       	sbc	r24, r12
    697a:	9d 09       	sbc	r25, r13
    697c:	a8 01       	movw	r20, r16
    697e:	97 01       	movw	r18, r14
    6980:	0e 94 5b 4e 	call	0x9cb6	; 0x9cb6 <__mulsi3>
    6984:	56 e0       	ldi	r21, 0x06	; 6
    6986:	95 95       	asr	r25
    6988:	87 95       	ror	r24
    698a:	77 95       	ror	r23
    698c:	67 95       	ror	r22
    698e:	5a 95       	dec	r21
    6990:	d1 f7       	brne	.-12     	; 0x6986 <obstacleAvoidance+0x21c>
    6992:	e6 0e       	add	r14, r22
    6994:	f7 1e       	adc	r15, r23
    6996:	08 1f       	adc	r16, r24
    6998:	19 1f       	adc	r17, r25
    699a:	f2 01       	movw	r30, r4
    699c:	f1 82       	std	Z+1, r15	; 0x01
    699e:	e0 82       	st	Z, r14
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    69a0:	29 81       	ldd	r18, Y+1	; 0x01
    69a2:	3a 81       	ldd	r19, Y+2	; 0x02
    69a4:	37 fd       	sbrc	r19, 7
    69a6:	8f c0       	rjmp	.+286    	; 0x6ac6 <obstacleAvoidance+0x35c>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    69a8:	79 01       	movw	r14, r18
    69aa:	00 27       	eor	r16, r16
    69ac:	f7 fc       	sbrc	r15, 7
    69ae:	00 95       	com	r16
    69b0:	10 2f       	mov	r17, r16
		*pwmRight = (signed int)res;
    69b2:	a6 0c       	add	r10, r6
    69b4:	b7 1c       	adc	r11, r7
    69b6:	c8 1c       	adc	r12, r8
    69b8:	d9 1c       	adc	r13, r9
    69ba:	c6 01       	movw	r24, r12
    69bc:	b5 01       	movw	r22, r10
    69be:	a8 01       	movw	r20, r16
    69c0:	97 01       	movw	r18, r14
    69c2:	0e 94 5b 4e 	call	0x9cb6	; 0x9cb6 <__mulsi3>
    69c6:	36 e0       	ldi	r19, 0x06	; 6
    69c8:	95 95       	asr	r25
    69ca:	87 95       	ror	r24
    69cc:	77 95       	ror	r23
    69ce:	67 95       	ror	r22
    69d0:	3a 95       	dec	r19
    69d2:	d1 f7       	brne	.-12     	; 0x69c8 <obstacleAvoidance+0x25e>
    69d4:	6e 0d       	add	r22, r14
    69d6:	7f 1d       	adc	r23, r15
    69d8:	80 1f       	adc	r24, r16
    69da:	91 1f       	adc	r25, r17
    69dc:	ab 01       	movw	r20, r22
    69de:	f1 01       	movw	r30, r2
    69e0:	71 83       	std	Z+1, r23	; 0x01
    69e2:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    69e4:	80 91 70 04 	lds	r24, 0x0470
    69e8:	8a 30       	cpi	r24, 0x0A	; 10
    69ea:	09 f4       	brne	.+2      	; 0x69ee <obstacleAvoidance+0x284>
    69ec:	48 c0       	rjmp	.+144    	; 0x6a7e <obstacleAvoidance+0x314>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    69ee:	f2 e0       	ldi	r31, 0x02	; 2
    69f0:	40 30       	cpi	r20, 0x00	; 0
    69f2:	5f 07       	cpc	r21, r31
    69f4:	3c f0       	brlt	.+14     	; 0x6a04 <obstacleAvoidance+0x29a>
    69f6:	8f ef       	ldi	r24, 0xFF	; 255
    69f8:	91 e0       	ldi	r25, 0x01	; 1
    69fa:	f1 01       	movw	r30, r2
    69fc:	91 83       	std	Z+1, r25	; 0x01
    69fe:	80 83       	st	Z, r24
    6a00:	4f ef       	ldi	r20, 0xFF	; 255
    6a02:	51 e0       	ldi	r21, 0x01	; 1
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    6a04:	f2 01       	movw	r30, r4
    6a06:	20 81       	ld	r18, Z
    6a08:	31 81       	ldd	r19, Z+1	; 0x01
    6a0a:	f2 e0       	ldi	r31, 0x02	; 2
    6a0c:	20 30       	cpi	r18, 0x00	; 0
    6a0e:	3f 07       	cpc	r19, r31
    6a10:	54 f0       	brlt	.+20     	; 0x6a26 <obstacleAvoidance+0x2bc>
    6a12:	8f ef       	ldi	r24, 0xFF	; 255
    6a14:	91 e0       	ldi	r25, 0x01	; 1
    6a16:	f2 01       	movw	r30, r4
    6a18:	91 83       	std	Z+1, r25	; 0x01
    6a1a:	80 83       	st	Z, r24
    6a1c:	f1 01       	movw	r30, r2
    6a1e:	40 81       	ld	r20, Z
    6a20:	51 81       	ldd	r21, Z+1	; 0x01
    6a22:	2f ef       	ldi	r18, 0xFF	; 255
    6a24:	31 e0       	ldi	r19, 0x01	; 1
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    6a26:	41 50       	subi	r20, 0x01	; 1
    6a28:	5e 4f       	sbci	r21, 0xFE	; 254
    6a2a:	44 f4       	brge	.+16     	; 0x6a3c <obstacleAvoidance+0x2d2>
    6a2c:	81 e0       	ldi	r24, 0x01	; 1
    6a2e:	9e ef       	ldi	r25, 0xFE	; 254
    6a30:	f1 01       	movw	r30, r2
    6a32:	91 83       	std	Z+1, r25	; 0x01
    6a34:	80 83       	st	Z, r24
    6a36:	f2 01       	movw	r30, r4
    6a38:	20 81       	ld	r18, Z
    6a3a:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    6a3c:	21 50       	subi	r18, 0x01	; 1
    6a3e:	3e 4f       	sbci	r19, 0xFE	; 254
    6a40:	2c f4       	brge	.+10     	; 0x6a4c <obstacleAvoidance+0x2e2>
    6a42:	81 e0       	ldi	r24, 0x01	; 1
    6a44:	9e ef       	ldi	r25, 0xFE	; 254
    6a46:	f2 01       	movw	r30, r4
    6a48:	91 83       	std	Z+1, r25	; 0x01
    6a4a:	80 83       	st	Z, r24

}
    6a4c:	26 96       	adiw	r28, 0x06	; 6
    6a4e:	0f b6       	in	r0, 0x3f	; 63
    6a50:	f8 94       	cli
    6a52:	de bf       	out	0x3e, r29	; 62
    6a54:	0f be       	out	0x3f, r0	; 63
    6a56:	cd bf       	out	0x3d, r28	; 61
    6a58:	cf 91       	pop	r28
    6a5a:	df 91       	pop	r29
    6a5c:	1f 91       	pop	r17
    6a5e:	0f 91       	pop	r16
    6a60:	ff 90       	pop	r15
    6a62:	ef 90       	pop	r14
    6a64:	df 90       	pop	r13
    6a66:	cf 90       	pop	r12
    6a68:	bf 90       	pop	r11
    6a6a:	af 90       	pop	r10
    6a6c:	9f 90       	pop	r9
    6a6e:	8f 90       	pop	r8
    6a70:	7f 90       	pop	r7
    6a72:	6f 90       	pop	r6
    6a74:	5f 90       	pop	r5
    6a76:	4f 90       	pop	r4
    6a78:	3f 90       	pop	r3
    6a7a:	2f 90       	pop	r2
    6a7c:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    6a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    6a80:	3c 81       	ldd	r19, Y+4	; 0x04
    6a82:	23 2b       	or	r18, r19
    6a84:	e1 f0       	breq	.+56     	; 0x6abe <obstacleAvoidance+0x354>
    6a86:	29 81       	ldd	r18, Y+1	; 0x01
    6a88:	3a 81       	ldd	r19, Y+2	; 0x02
    6a8a:	23 2b       	or	r18, r19
    6a8c:	c1 f0       	breq	.+48     	; 0x6abe <obstacleAvoidance+0x354>
			if(currentAngle<270 && currentAngle>90) {
    6a8e:	80 91 62 04 	lds	r24, 0x0462
    6a92:	90 91 63 04 	lds	r25, 0x0463
    6a96:	8b 55       	subi	r24, 0x5B	; 91
    6a98:	90 40       	sbci	r25, 0x00	; 0
    6a9a:	83 3b       	cpi	r24, 0xB3	; 179
    6a9c:	91 05       	cpc	r25, r1
    6a9e:	08 f0       	brcs	.+2      	; 0x6aa2 <obstacleAvoidance+0x338>
    6aa0:	5b c0       	rjmp	.+182    	; 0x6b58 <obstacleAvoidance+0x3ee>
				*pwmLeft += 10;
    6aa2:	f2 01       	movw	r30, r4
    6aa4:	80 81       	ld	r24, Z
    6aa6:	91 81       	ldd	r25, Z+1	; 0x01
    6aa8:	0a 96       	adiw	r24, 0x0a	; 10
    6aaa:	91 83       	std	Z+1, r25	; 0x01
    6aac:	80 83       	st	Z, r24
				*pwmRight -= 10;
    6aae:	f1 01       	movw	r30, r2
    6ab0:	40 81       	ld	r20, Z
    6ab2:	51 81       	ldd	r21, Z+1	; 0x01
    6ab4:	4a 50       	subi	r20, 0x0A	; 10
    6ab6:	50 40       	sbci	r21, 0x00	; 0
    6ab8:	51 83       	std	Z+1, r21	; 0x01
    6aba:	40 83       	st	Z, r20
    6abc:	98 cf       	rjmp	.-208    	; 0x69ee <obstacleAvoidance+0x284>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    6abe:	f1 01       	movw	r30, r2
    6ac0:	40 81       	ld	r20, Z
    6ac2:	51 81       	ldd	r21, Z+1	; 0x01
    6ac4:	94 cf       	rjmp	.-216    	; 0x69ee <obstacleAvoidance+0x284>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    6ac6:	79 01       	movw	r14, r18
    6ac8:	00 27       	eor	r16, r16
    6aca:	f7 fc       	sbrc	r15, 7
    6acc:	00 95       	com	r16
    6ace:	10 2f       	mov	r17, r16
		*pwmRight = (signed int)res;
    6ad0:	6a 18       	sub	r6, r10
    6ad2:	7b 08       	sbc	r7, r11
    6ad4:	8c 08       	sbc	r8, r12
    6ad6:	9d 08       	sbc	r9, r13
    6ad8:	c4 01       	movw	r24, r8
    6ada:	b3 01       	movw	r22, r6
    6adc:	a8 01       	movw	r20, r16
    6ade:	97 01       	movw	r18, r14
    6ae0:	0e 94 5b 4e 	call	0x9cb6	; 0x9cb6 <__mulsi3>
    6ae4:	26 e0       	ldi	r18, 0x06	; 6
    6ae6:	95 95       	asr	r25
    6ae8:	87 95       	ror	r24
    6aea:	77 95       	ror	r23
    6aec:	67 95       	ror	r22
    6aee:	2a 95       	dec	r18
    6af0:	d1 f7       	brne	.-12     	; 0x6ae6 <obstacleAvoidance+0x37c>
    6af2:	e6 1a       	sub	r14, r22
    6af4:	f7 0a       	sbc	r15, r23
    6af6:	08 0b       	sbc	r16, r24
    6af8:	19 0b       	sbc	r17, r25
    6afa:	a7 01       	movw	r20, r14
    6afc:	f1 01       	movw	r30, r2
    6afe:	f1 82       	std	Z+1, r15	; 0x01
    6b00:	e0 82       	st	Z, r14
    6b02:	70 cf       	rjmp	.-288    	; 0x69e4 <obstacleAvoidance+0x27a>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    6b04:	7c 01       	movw	r14, r24
    6b06:	00 27       	eor	r16, r16
    6b08:	f7 fc       	sbrc	r15, 7
    6b0a:	00 95       	com	r16
    6b0c:	10 2f       	mov	r17, r16
    6b0e:	ed 81       	ldd	r30, Y+5	; 0x05
    6b10:	fe 81       	ldd	r31, Y+6	; 0x06
    6b12:	3f 01       	movw	r6, r30
    6b14:	88 24       	eor	r8, r8
    6b16:	77 fc       	sbrc	r7, 7
    6b18:	80 94       	com	r8
    6b1a:	98 2c       	mov	r9, r8
    6b1c:	59 01       	movw	r10, r18
    6b1e:	cc 24       	eor	r12, r12
    6b20:	b7 fc       	sbrc	r11, 7
    6b22:	c0 94       	com	r12
    6b24:	dc 2c       	mov	r13, r12
		*pwmLeft = (signed int)res;
    6b26:	c6 01       	movw	r24, r12
    6b28:	b5 01       	movw	r22, r10
    6b2a:	66 0d       	add	r22, r6
    6b2c:	77 1d       	adc	r23, r7
    6b2e:	88 1d       	adc	r24, r8
    6b30:	99 1d       	adc	r25, r9
    6b32:	a8 01       	movw	r20, r16
    6b34:	97 01       	movw	r18, r14
    6b36:	0e 94 5b 4e 	call	0x9cb6	; 0x9cb6 <__mulsi3>
    6b3a:	46 e0       	ldi	r20, 0x06	; 6
    6b3c:	95 95       	asr	r25
    6b3e:	87 95       	ror	r24
    6b40:	77 95       	ror	r23
    6b42:	67 95       	ror	r22
    6b44:	4a 95       	dec	r20
    6b46:	d1 f7       	brne	.-12     	; 0x6b3c <obstacleAvoidance+0x3d2>
    6b48:	e6 1a       	sub	r14, r22
    6b4a:	f7 0a       	sbc	r15, r23
    6b4c:	08 0b       	sbc	r16, r24
    6b4e:	19 0b       	sbc	r17, r25
    6b50:	f2 01       	movw	r30, r4
    6b52:	f1 82       	std	Z+1, r15	; 0x01
    6b54:	e0 82       	st	Z, r14
    6b56:	24 cf       	rjmp	.-440    	; 0x69a0 <obstacleAvoidance+0x236>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    6b58:	f2 01       	movw	r30, r4
    6b5a:	80 81       	ld	r24, Z
    6b5c:	91 81       	ldd	r25, Z+1	; 0x01
    6b5e:	0a 97       	sbiw	r24, 0x0a	; 10
    6b60:	91 83       	std	Z+1, r25	; 0x01
    6b62:	80 83       	st	Z, r24
				*pwmRight += 10;
    6b64:	f1 01       	movw	r30, r2
    6b66:	40 81       	ld	r20, Z
    6b68:	51 81       	ldd	r21, Z+1	; 0x01
    6b6a:	46 5f       	subi	r20, 0xF6	; 246
    6b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    6b6e:	51 83       	std	Z+1, r21	; 0x01
    6b70:	40 83       	st	Z, r20
    6b72:	3d cf       	rjmp	.-390    	; 0x69ee <obstacleAvoidance+0x284>

00006b74 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    6b74:	80 91 94 00 	lds	r24, 0x0094
    6b78:	90 91 95 00 	lds	r25, 0x0095
    6b7c:	0e 94 3e 4f 	call	0x9e7c	; 0x9e7c <srand>

}
    6b80:	08 95       	ret

00006b82 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    6b82:	e0 e8       	ldi	r30, 0x80	; 128
    6b84:	f0 e0       	ldi	r31, 0x00	; 0
    6b86:	10 82       	st	Z, r1
	TCCR1B = 0;
    6b88:	a1 e8       	ldi	r26, 0x81	; 129
    6b8a:	b0 e0       	ldi	r27, 0x00	; 0
    6b8c:	1c 92       	st	X, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    6b8e:	80 81       	ld	r24, Z
    6b90:	89 6a       	ori	r24, 0xA9	; 169
    6b92:	80 83       	st	Z, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    6b94:	8c 91       	ld	r24, X
    6b96:	89 60       	ori	r24, 0x09	; 9
    6b98:	8c 93       	st	X, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    6b9a:	80 91 08 02 	lds	r24, 0x0208
    6b9e:	90 e0       	ldi	r25, 0x00	; 0
    6ba0:	90 93 89 00 	sts	0x0089, r25
    6ba4:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    6ba8:	80 91 09 02 	lds	r24, 0x0209
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	90 93 8b 00 	sts	0x008B, r25
    6bb2:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    6bb6:	80 91 0a 02 	lds	r24, 0x020A
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	90 93 8d 00 	sts	0x008D, r25
    6bc0:	80 93 8c 00 	sts	0x008C, r24

}
    6bc4:	08 95       	ret

00006bc6 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    6bc6:	81 e0       	ldi	r24, 0x01	; 1
    6bc8:	90 91 37 03 	lds	r25, 0x0337
    6bcc:	89 1b       	sub	r24, r25
    6bce:	80 93 37 03 	sts	0x0337, r24

	if(blinkState) {
    6bd2:	88 23       	and	r24, r24
    6bd4:	39 f4       	brne	.+14     	; 0x6be4 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    6bd6:	80 91 80 00 	lds	r24, 0x0080
    6bda:	87 7f       	andi	r24, 0xF7	; 247
    6bdc:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    6be0:	2f 98       	cbi	0x05, 7	; 5
    6be2:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    6be4:	80 91 80 00 	lds	r24, 0x0080
    6be8:	88 60       	ori	r24, 0x08	; 8
    6bea:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    6bee:	8f ef       	ldi	r24, 0xFF	; 255
    6bf0:	90 e0       	ldi	r25, 0x00	; 0
    6bf2:	90 93 8d 00 	sts	0x008D, r25
    6bf6:	80 93 8c 00 	sts	0x008C, r24
    6bfa:	08 95       	ret

00006bfc <updateRedLed>:
									// the pin is configured accordingly (low state).
	}

}

void updateRedLed(unsigned char value) {
    6bfc:	98 2f       	mov	r25, r24

	if(value == 0) {
    6bfe:	88 23       	and	r24, r24
    6c00:	61 f0       	breq	.+24     	; 0x6c1a <updateRedLed+0x1e>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    6c02:	80 91 80 00 	lds	r24, 0x0080
    6c06:	80 68       	ori	r24, 0x80	; 128
    6c08:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    6c0c:	89 2f       	mov	r24, r25
    6c0e:	90 e0       	ldi	r25, 0x00	; 0
    6c10:	90 93 89 00 	sts	0x0089, r25
    6c14:	80 93 88 00 	sts	0x0088, r24
    6c18:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    6c1a:	80 91 80 00 	lds	r24, 0x0080
    6c1e:	8f 77       	andi	r24, 0x7F	; 127
    6c20:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    6c24:	2d 98       	cbi	0x05, 5	; 5
    6c26:	08 95       	ret

00006c28 <updateGreenLed>:
		OCR1A = value;
	}

}

void updateGreenLed(unsigned char value) {
    6c28:	98 2f       	mov	r25, r24

	if(value == 0) {
    6c2a:	88 23       	and	r24, r24
    6c2c:	61 f0       	breq	.+24     	; 0x6c46 <updateGreenLed+0x1e>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    6c2e:	80 91 80 00 	lds	r24, 0x0080
    6c32:	80 62       	ori	r24, 0x20	; 32
    6c34:	80 93 80 00 	sts	0x0080, r24
		OCR1B = value;
    6c38:	89 2f       	mov	r24, r25
    6c3a:	90 e0       	ldi	r25, 0x00	; 0
    6c3c:	90 93 8b 00 	sts	0x008B, r25
    6c40:	80 93 8a 00 	sts	0x008A, r24
    6c44:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    6c46:	80 91 80 00 	lds	r24, 0x0080
    6c4a:	8f 7d       	andi	r24, 0xDF	; 223
    6c4c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    6c50:	2e 98       	cbi	0x05, 6	; 5
    6c52:	08 95       	ret

00006c54 <updateBlueLed>:
		OCR1B = value;
	}

}

void updateBlueLed(unsigned char value) {
    6c54:	98 2f       	mov	r25, r24

	if(value == 0) {
    6c56:	88 23       	and	r24, r24
    6c58:	61 f0       	breq	.+24     	; 0x6c72 <updateBlueLed+0x1e>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    6c5a:	80 91 80 00 	lds	r24, 0x0080
    6c5e:	88 60       	ori	r24, 0x08	; 8
    6c60:	80 93 80 00 	sts	0x0080, r24
		OCR1C = value;
    6c64:	89 2f       	mov	r24, r25
    6c66:	90 e0       	ldi	r25, 0x00	; 0
    6c68:	90 93 8d 00 	sts	0x008D, r25
    6c6c:	80 93 8c 00 	sts	0x008C, r24
    6c70:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    6c72:	80 91 80 00 	lds	r24, 0x0080
    6c76:	87 7f       	andi	r24, 0xF7	; 247
    6c78:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    6c7c:	2f 98       	cbi	0x05, 7	; 5
    6c7e:	08 95       	ret

00006c80 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6c80:	83 30       	cpi	r24, 0x03	; 3
    6c82:	09 f4       	brne	.+2      	; 0x6c86 <setGreenLed+0x6>
    6c84:	5a c0       	rjmp	.+180    	; 0x6d3a <setGreenLed+0xba>
    6c86:	84 30       	cpi	r24, 0x04	; 4
    6c88:	80 f0       	brcs	.+32     	; 0x6caa <setGreenLed+0x2a>
    6c8a:	85 30       	cpi	r24, 0x05	; 5
    6c8c:	09 f4       	brne	.+2      	; 0x6c90 <setGreenLed+0x10>
    6c8e:	41 c0       	rjmp	.+130    	; 0x6d12 <setGreenLed+0x92>
    6c90:	85 30       	cpi	r24, 0x05	; 5
    6c92:	d0 f4       	brcc	.+52     	; 0x6cc8 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6c94:	66 23       	and	r22, r22
    6c96:	09 f4       	brne	.+2      	; 0x6c9a <setGreenLed+0x1a>
    6c98:	68 c0       	rjmp	.+208    	; 0x6d6a <setGreenLed+0xea>
    6c9a:	80 91 0b 01 	lds	r24, 0x010B
    6c9e:	8f 7e       	andi	r24, 0xEF	; 239
    6ca0:	80 93 0b 01 	sts	0x010B, r24
    6ca4:	80 91 0b 01 	lds	r24, 0x010B
    6ca8:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6caa:	81 30       	cpi	r24, 0x01	; 1
    6cac:	e1 f1       	breq	.+120    	; 0x6d26 <setGreenLed+0xa6>
    6cae:	82 30       	cpi	r24, 0x02	; 2
    6cb0:	80 f0       	brcs	.+32     	; 0x6cd2 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6cb2:	66 23       	and	r22, r22
    6cb4:	09 f4       	brne	.+2      	; 0x6cb8 <setGreenLed+0x38>
    6cb6:	46 c0       	rjmp	.+140    	; 0x6d44 <setGreenLed+0xc4>
    6cb8:	80 91 0b 01 	lds	r24, 0x010B
    6cbc:	8b 7f       	andi	r24, 0xFB	; 251
    6cbe:	80 93 0b 01 	sts	0x010B, r24
    6cc2:	80 91 0b 01 	lds	r24, 0x010B
    6cc6:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6cc8:	86 30       	cpi	r24, 0x06	; 6
    6cca:	c9 f0       	breq	.+50     	; 0x6cfe <setGreenLed+0x7e>
    6ccc:	87 30       	cpi	r24, 0x07	; 7
    6cce:	61 f0       	breq	.+24     	; 0x6ce8 <setGreenLed+0x68>
    6cd0:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6cd2:	66 23       	and	r22, r22
    6cd4:	09 f4       	brne	.+2      	; 0x6cd8 <setGreenLed+0x58>
    6cd6:	51 c0       	rjmp	.+162    	; 0x6d7a <setGreenLed+0xfa>
    6cd8:	80 91 0b 01 	lds	r24, 0x010B
    6cdc:	8e 7f       	andi	r24, 0xFE	; 254
    6cde:	80 93 0b 01 	sts	0x010B, r24
    6ce2:	80 91 0b 01 	lds	r24, 0x010B
    6ce6:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6ce8:	66 23       	and	r22, r22
    6cea:	09 f0       	breq	.+2      	; 0x6cee <setGreenLed+0x6e>
    6cec:	5e c0       	rjmp	.+188    	; 0x6daa <setGreenLed+0x12a>
    6cee:	80 91 0b 01 	lds	r24, 0x010B
    6cf2:	80 68       	ori	r24, 0x80	; 128
    6cf4:	80 93 0b 01 	sts	0x010B, r24
    6cf8:	80 91 0b 01 	lds	r24, 0x010B
    6cfc:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6cfe:	66 23       	and	r22, r22
    6d00:	49 f1       	breq	.+82     	; 0x6d54 <setGreenLed+0xd4>
    6d02:	80 91 0b 01 	lds	r24, 0x010B
    6d06:	8f 7b       	andi	r24, 0xBF	; 191
    6d08:	80 93 0b 01 	sts	0x010B, r24
    6d0c:	80 91 0b 01 	lds	r24, 0x010B
    6d10:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6d12:	66 23       	and	r22, r22
    6d14:	d1 f1       	breq	.+116    	; 0x6d8a <setGreenLed+0x10a>
    6d16:	80 91 0b 01 	lds	r24, 0x010B
    6d1a:	8f 7d       	andi	r24, 0xDF	; 223
    6d1c:	80 93 0b 01 	sts	0x010B, r24
    6d20:	80 91 0b 01 	lds	r24, 0x010B
    6d24:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6d26:	66 23       	and	r22, r22
    6d28:	c1 f1       	breq	.+112    	; 0x6d9a <setGreenLed+0x11a>
    6d2a:	80 91 0b 01 	lds	r24, 0x010B
    6d2e:	8d 7f       	andi	r24, 0xFD	; 253
    6d30:	80 93 0b 01 	sts	0x010B, r24
    6d34:	80 91 0b 01 	lds	r24, 0x010B
    6d38:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6d3a:	66 23       	and	r22, r22
    6d3c:	99 f0       	breq	.+38     	; 0x6d64 <setGreenLed+0xe4>
    6d3e:	a3 98       	cbi	0x14, 3	; 20
    6d40:	84 b3       	in	r24, 0x14	; 20
    6d42:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6d44:	80 91 0b 01 	lds	r24, 0x010B
    6d48:	84 60       	ori	r24, 0x04	; 4
    6d4a:	80 93 0b 01 	sts	0x010B, r24
    6d4e:	80 91 0b 01 	lds	r24, 0x010B
    6d52:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6d54:	80 91 0b 01 	lds	r24, 0x010B
    6d58:	80 64       	ori	r24, 0x40	; 64
    6d5a:	80 93 0b 01 	sts	0x010B, r24
    6d5e:	80 91 0b 01 	lds	r24, 0x010B
    6d62:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6d64:	a3 9a       	sbi	0x14, 3	; 20
    6d66:	84 b3       	in	r24, 0x14	; 20
    6d68:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6d6a:	80 91 0b 01 	lds	r24, 0x010B
    6d6e:	80 61       	ori	r24, 0x10	; 16
    6d70:	80 93 0b 01 	sts	0x010B, r24
    6d74:	80 91 0b 01 	lds	r24, 0x010B
    6d78:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6d7a:	80 91 0b 01 	lds	r24, 0x010B
    6d7e:	81 60       	ori	r24, 0x01	; 1
    6d80:	80 93 0b 01 	sts	0x010B, r24
    6d84:	80 91 0b 01 	lds	r24, 0x010B
    6d88:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6d8a:	80 91 0b 01 	lds	r24, 0x010B
    6d8e:	80 62       	ori	r24, 0x20	; 32
    6d90:	80 93 0b 01 	sts	0x010B, r24
    6d94:	80 91 0b 01 	lds	r24, 0x010B
    6d98:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6d9a:	80 91 0b 01 	lds	r24, 0x010B
    6d9e:	82 60       	ori	r24, 0x02	; 2
    6da0:	80 93 0b 01 	sts	0x010B, r24
    6da4:	80 91 0b 01 	lds	r24, 0x010B
    6da8:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6daa:	80 91 0b 01 	lds	r24, 0x010B
    6dae:	8f 77       	andi	r24, 0x7F	; 127
    6db0:	80 93 0b 01 	sts	0x010B, r24
    6db4:	80 91 0b 01 	lds	r24, 0x010B
    6db8:	08 95       	ret

00006dba <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    6dba:	eb e0       	ldi	r30, 0x0B	; 11
    6dbc:	f1 e0       	ldi	r31, 0x01	; 1
    6dbe:	80 81       	ld	r24, Z
    6dc0:	81 60       	ori	r24, 0x01	; 1
    6dc2:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    6dc4:	80 81       	ld	r24, Z
    6dc6:	82 60       	ori	r24, 0x02	; 2
    6dc8:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    6dca:	80 81       	ld	r24, Z
    6dcc:	84 60       	ori	r24, 0x04	; 4
    6dce:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    6dd0:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    6dd2:	80 81       	ld	r24, Z
    6dd4:	80 61       	ori	r24, 0x10	; 16
    6dd6:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    6dd8:	80 81       	ld	r24, Z
    6dda:	80 62       	ori	r24, 0x20	; 32
    6ddc:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    6dde:	80 81       	ld	r24, Z
    6de0:	80 64       	ori	r24, 0x40	; 64
    6de2:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    6de4:	80 81       	ld	r24, Z
    6de6:	80 68       	ori	r24, 0x80	; 128
    6de8:	80 83       	st	Z, r24

}
    6dea:	08 95       	ret

00006dec <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    6dec:	eb e0       	ldi	r30, 0x0B	; 11
    6dee:	f1 e0       	ldi	r31, 0x01	; 1
    6df0:	80 81       	ld	r24, Z
    6df2:	8e 7f       	andi	r24, 0xFE	; 254
    6df4:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    6df6:	80 81       	ld	r24, Z
    6df8:	8d 7f       	andi	r24, 0xFD	; 253
    6dfa:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    6dfc:	80 81       	ld	r24, Z
    6dfe:	8b 7f       	andi	r24, 0xFB	; 251
    6e00:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    6e02:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    6e04:	80 81       	ld	r24, Z
    6e06:	8f 7e       	andi	r24, 0xEF	; 239
    6e08:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    6e0a:	80 81       	ld	r24, Z
    6e0c:	8f 7d       	andi	r24, 0xDF	; 223
    6e0e:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    6e10:	80 81       	ld	r24, Z
    6e12:	8f 7b       	andi	r24, 0xBF	; 191
    6e14:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    6e16:	80 81       	ld	r24, Z
    6e18:	8f 77       	andi	r24, 0x7F	; 127
    6e1a:	80 83       	st	Z, r24

}
    6e1c:	08 95       	ret

00006e1e <computeAngle>:

	}

}

void computeAngle() {
    6e1e:	ef 92       	push	r14
    6e20:	ff 92       	push	r15
    6e22:	0f 93       	push	r16
    6e24:	1f 93       	push	r17

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    6e26:	80 91 50 04 	lds	r24, 0x0450
    6e2a:	90 91 51 04 	lds	r25, 0x0451
    6e2e:	97 fd       	sbrc	r25, 7
    6e30:	6c c0       	rjmp	.+216    	; 0x6f0a <computeAngle+0xec>
    6e32:	8d 97       	sbiw	r24, 0x2d	; 45
    6e34:	0c f4       	brge	.+2      	; 0x6e38 <computeAngle+0x1a>
    6e36:	54 c0       	rjmp	.+168    	; 0x6ee0 <computeAngle+0xc2>
		currPosition = HORIZONTAL_POS;
    6e38:	81 e0       	ldi	r24, 0x01	; 1
    6e3a:	80 93 11 02 	sts	0x0211, r24
    6e3e:	28 2f       	mov	r18, r24
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    6e40:	80 91 12 02 	lds	r24, 0x0212
    6e44:	28 17       	cp	r18, r24
    6e46:	09 f4       	brne	.+2      	; 0x6e4a <computeAngle+0x2c>
    6e48:	54 c0       	rjmp	.+168    	; 0x6ef2 <computeAngle+0xd4>
		timesInSamePos++;
    6e4a:	80 91 64 04 	lds	r24, 0x0464
    6e4e:	90 91 65 04 	lds	r25, 0x0465
    6e52:	01 96       	adiw	r24, 0x01	; 1
    6e54:	90 93 65 04 	sts	0x0465, r25
    6e58:	80 93 64 04 	sts	0x0464, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    6e5c:	88 3c       	cpi	r24, 0xC8	; 200
    6e5e:	91 05       	cpc	r25, r1
    6e60:	08 f0       	brcs	.+2      	; 0x6e64 <computeAngle+0x46>
    6e62:	4c c0       	rjmp	.+152    	; 0x6efc <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    6e64:	60 91 4c 04 	lds	r22, 0x044C
    6e68:	70 91 4d 04 	lds	r23, 0x044D
    6e6c:	88 27       	eor	r24, r24
    6e6e:	77 fd       	sbrc	r23, 7
    6e70:	80 95       	com	r24
    6e72:	98 2f       	mov	r25, r24
    6e74:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    6e78:	7b 01       	movw	r14, r22
    6e7a:	8c 01       	movw	r16, r24
    6e7c:	60 91 4e 04 	lds	r22, 0x044E
    6e80:	70 91 4f 04 	lds	r23, 0x044F
    6e84:	88 27       	eor	r24, r24
    6e86:	77 fd       	sbrc	r23, 7
    6e88:	80 95       	com	r24
    6e8a:	98 2f       	mov	r25, r24
    6e8c:	0e 94 df 4c 	call	0x99be	; 0x99be <__floatsisf>
    6e90:	9b 01       	movw	r18, r22
    6e92:	ac 01       	movw	r20, r24
    6e94:	c8 01       	movw	r24, r16
    6e96:	b7 01       	movw	r22, r14
    6e98:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <atan2>
    6e9c:	60 93 cc 04 	sts	0x04CC, r22
    6ea0:	70 93 cd 04 	sts	0x04CD, r23
    6ea4:	80 93 ce 04 	sts	0x04CE, r24
    6ea8:	90 93 cf 04 	sts	0x04CF, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    6eac:	21 ee       	ldi	r18, 0xE1	; 225
    6eae:	3e e2       	ldi	r19, 0x2E	; 46
    6eb0:	45 e6       	ldi	r20, 0x65	; 101
    6eb2:	52 e4       	ldi	r21, 0x42	; 66
    6eb4:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <__mulsf3>
    6eb8:	0e 94 ac 4c 	call	0x9958	; 0x9958 <__fixsfsi>
    6ebc:	cb 01       	movw	r24, r22
    6ebe:	70 93 63 04 	sts	0x0463, r23
    6ec2:	60 93 62 04 	sts	0x0462, r22

	if(currentAngle < 0) {
    6ec6:	77 ff       	sbrs	r23, 7
    6ec8:	06 c0       	rjmp	.+12     	; 0x6ed6 <computeAngle+0xb8>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    6eca:	88 59       	subi	r24, 0x98	; 152
    6ecc:	9e 4f       	sbci	r25, 0xFE	; 254
    6ece:	90 93 63 04 	sts	0x0463, r25
    6ed2:	80 93 62 04 	sts	0x0462, r24
	}

}
    6ed6:	1f 91       	pop	r17
    6ed8:	0f 91       	pop	r16
    6eda:	ff 90       	pop	r15
    6edc:	ef 90       	pop	r14
    6ede:	08 95       	ret

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    6ee0:	10 92 11 02 	sts	0x0211, r1
    6ee4:	20 91 11 02 	lds	r18, 0x0211
	}
	if(currPosition != robotPosition) {			
    6ee8:	80 91 12 02 	lds	r24, 0x0212
    6eec:	28 17       	cp	r18, r24
    6eee:	09 f0       	breq	.+2      	; 0x6ef2 <computeAngle+0xd4>
    6ef0:	ac cf       	rjmp	.-168    	; 0x6e4a <computeAngle+0x2c>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    6ef2:	10 92 65 04 	sts	0x0465, r1
    6ef6:	10 92 64 04 	sts	0x0464, r1
    6efa:	b4 cf       	rjmp	.-152    	; 0x6e64 <computeAngle+0x46>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    6efc:	10 92 65 04 	sts	0x0465, r1
    6f00:	10 92 64 04 	sts	0x0464, r1
			robotPosition = currPosition;
    6f04:	20 93 12 02 	sts	0x0212, r18
    6f08:	ad cf       	rjmp	.-166    	; 0x6e64 <computeAngle+0x46>
}

void computeAngle() {

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    6f0a:	90 95       	com	r25
    6f0c:	81 95       	neg	r24
    6f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    6f10:	90 cf       	rjmp	.-224    	; 0x6e32 <computeAngle+0x14>

00006f12 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    6f12:	80 91 4b 04 	lds	r24, 0x044B
    6f16:	88 23       	and	r24, r24
    6f18:	09 f0       	breq	.+2      	; 0x6f1c <readAccelXYZ_2+0xa>
    6f1a:	5a c0       	rjmp	.+180    	; 0x6fd0 <readAccelXYZ_2+0xbe>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    6f1c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    6f20:	80 93 68 04 	sts	0x0468, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    6f24:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    6f28:	80 93 69 04 	sts	0x0469, r24
    6f2c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    6f30:	80 93 6a 04 	sts	0x046A, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    6f34:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <i2c_readNak>
    6f38:	80 93 6b 04 	sts	0x046B, r24
		i2c_stop();													// set stop conditon = release bus
    6f3c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    6f40:	80 91 9a 0b 	lds	r24, 0x0B9A
    6f44:	88 23       	and	r24, r24
    6f46:	09 f0       	breq	.+2      	; 0x6f4a <readAccelXYZ_2+0x38>
    6f48:	53 c0       	rjmp	.+166    	; 0x6ff0 <readAccelXYZ_2+0xde>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    6f4a:	20 91 67 04 	lds	r18, 0x0467
    6f4e:	33 27       	eor	r19, r19
    6f50:	27 fd       	sbrc	r18, 7
    6f52:	30 95       	com	r19
    6f54:	32 2f       	mov	r19, r18
    6f56:	22 27       	eor	r18, r18
    6f58:	80 91 66 04 	lds	r24, 0x0466
    6f5c:	99 27       	eor	r25, r25
    6f5e:	87 fd       	sbrc	r24, 7
    6f60:	90 95       	com	r25
    6f62:	28 2b       	or	r18, r24
    6f64:	39 2b       	or	r19, r25
    6f66:	80 91 52 04 	lds	r24, 0x0452
    6f6a:	90 91 53 04 	lds	r25, 0x0453
    6f6e:	28 1b       	sub	r18, r24
    6f70:	39 0b       	sbc	r19, r25
    6f72:	30 93 4d 04 	sts	0x044D, r19
    6f76:	20 93 4c 04 	sts	0x044C, r18
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    6f7a:	20 91 69 04 	lds	r18, 0x0469
    6f7e:	33 27       	eor	r19, r19
    6f80:	27 fd       	sbrc	r18, 7
    6f82:	30 95       	com	r19
    6f84:	32 2f       	mov	r19, r18
    6f86:	22 27       	eor	r18, r18
    6f88:	80 91 68 04 	lds	r24, 0x0468
    6f8c:	99 27       	eor	r25, r25
    6f8e:	87 fd       	sbrc	r24, 7
    6f90:	90 95       	com	r25
    6f92:	28 2b       	or	r18, r24
    6f94:	39 2b       	or	r19, r25
    6f96:	80 91 54 04 	lds	r24, 0x0454
    6f9a:	90 91 55 04 	lds	r25, 0x0455
    6f9e:	28 1b       	sub	r18, r24
    6fa0:	39 0b       	sbc	r19, r25
    6fa2:	30 93 4f 04 	sts	0x044F, r19
    6fa6:	20 93 4e 04 	sts	0x044E, r18
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
    6faa:	80 91 6b 04 	lds	r24, 0x046B
    6fae:	99 27       	eor	r25, r25
    6fb0:	87 fd       	sbrc	r24, 7
    6fb2:	90 95       	com	r25
    6fb4:	98 2f       	mov	r25, r24
    6fb6:	88 27       	eor	r24, r24
    6fb8:	20 91 6a 04 	lds	r18, 0x046A
    6fbc:	33 27       	eor	r19, r19
    6fbe:	27 fd       	sbrc	r18, 7
    6fc0:	30 95       	com	r19
    6fc2:	82 2b       	or	r24, r18
    6fc4:	93 2b       	or	r25, r19
    6fc6:	90 93 51 04 	sts	0x0451, r25
    6fca:	80 93 50 04 	sts	0x0450, r24
    6fce:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    6fd0:	81 30       	cpi	r24, 0x01	; 1
    6fd2:	09 f4       	brne	.+2      	; 0x6fd6 <readAccelXYZ_2+0xc4>
    6fd4:	a7 cf       	rjmp	.-178    	; 0x6f24 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
		}

	} else {

		accX = 0;
    6fd6:	10 92 4d 04 	sts	0x044D, r1
    6fda:	10 92 4c 04 	sts	0x044C, r1
		accY = 0;
    6fde:	10 92 4f 04 	sts	0x044F, r1
    6fe2:	10 92 4e 04 	sts	0x044E, r1
		accZ = 0;
    6fe6:	10 92 51 04 	sts	0x0451, r1
    6fea:	10 92 50 04 	sts	0x0450, r1
    6fee:	08 95       	ret
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
		i2c_stop();													// set stop conditon = release bus

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    6ff0:	80 91 67 04 	lds	r24, 0x0467
    6ff4:	99 27       	eor	r25, r25
    6ff6:	87 fd       	sbrc	r24, 7
    6ff8:	90 95       	com	r25
    6ffa:	98 2f       	mov	r25, r24
    6ffc:	88 27       	eor	r24, r24
    6ffe:	20 91 66 04 	lds	r18, 0x0466
    7002:	33 27       	eor	r19, r19
    7004:	27 fd       	sbrc	r18, 7
    7006:	30 95       	com	r19
    7008:	82 2b       	or	r24, r18
    700a:	93 2b       	or	r25, r19
    700c:	90 93 4d 04 	sts	0x044D, r25
    7010:	80 93 4c 04 	sts	0x044C, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    7014:	80 91 69 04 	lds	r24, 0x0469
    7018:	99 27       	eor	r25, r25
    701a:	87 fd       	sbrc	r24, 7
    701c:	90 95       	com	r25
    701e:	98 2f       	mov	r25, r24
    7020:	88 27       	eor	r24, r24
    7022:	20 91 68 04 	lds	r18, 0x0468
    7026:	33 27       	eor	r19, r19
    7028:	27 fd       	sbrc	r18, 7
    702a:	30 95       	com	r19
    702c:	82 2b       	or	r24, r18
    702e:	93 2b       	or	r25, r19
    7030:	90 93 4f 04 	sts	0x044F, r25
    7034:	80 93 4e 04 	sts	0x044E, r24
    7038:	b8 cf       	rjmp	.-144    	; 0x6faa <readAccelXYZ_2+0x98>

0000703a <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    703a:	80 91 10 02 	lds	r24, 0x0210
    703e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7042:	88 23       	and	r24, r24
    7044:	31 f5       	brne	.+76     	; 0x7092 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7046:	8d e2       	ldi	r24, 0x2D	; 45
    7048:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_write(0x08);	// measurement mode
    704c:	88 e0       	ldi	r24, 0x08	; 8
    704e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7052:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7056:	80 91 10 02 	lds	r24, 0x0210
    705a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    705e:	88 23       	and	r24, r24
    7060:	c1 f4       	brne	.+48     	; 0x7092 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7062:	81 e3       	ldi	r24, 0x31	; 49
    7064:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7068:	80 e0       	ldi	r24, 0x00	; 0
    706a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    706e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7072:	80 91 10 02 	lds	r24, 0x0210
    7076:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    707a:	88 23       	and	r24, r24
    707c:	51 f4       	brne	.+20     	; 0x7092 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    707e:	8c e2       	ldi	r24, 0x2C	; 44
    7080:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7084:	89 e0       	ldi	r24, 0x09	; 9
    7086:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    708a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>
    708e:	80 e0       	ldi	r24, 0x00	; 0
    }

	return 0;

}
    7090:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7092:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>
    7096:	81 e0       	ldi	r24, 0x01	; 1
    7098:	08 95       	ret

0000709a <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    709a:	80 91 10 02 	lds	r24, 0x0210
    709e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    70a2:	88 23       	and	r24, r24
    70a4:	51 f4       	brne	.+20     	; 0x70ba <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    70a6:	86 e1       	ldi	r24, 0x16	; 22
    70a8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    70ac:	85 e4       	ldi	r24, 0x45	; 69
    70ae:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    70b2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>
    70b6:	80 e0       	ldi	r24, 0x00	; 0
    }

	return 0;				// configuration ok

}
    70b8:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    70ba:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>
    70be:	81 e0       	ldi	r24, 0x01	; 1
    70c0:	08 95       	ret

000070c2 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    70c2:	80 91 4b 04 	lds	r24, 0x044B
    70c6:	88 23       	and	r24, r24
    70c8:	79 f0       	breq	.+30     	; 0x70e8 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    70ca:	81 30       	cpi	r24, 0x01	; 1
    70cc:	11 f1       	breq	.+68     	; 0x7112 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    70ce:	10 92 4d 04 	sts	0x044D, r1
    70d2:	10 92 4c 04 	sts	0x044C, r1
		accY = 0;
    70d6:	10 92 4f 04 	sts	0x044F, r1
    70da:	10 92 4e 04 	sts	0x044E, r1
		accZ = 0;
    70de:	10 92 51 04 	sts	0x0451, r1
    70e2:	10 92 50 04 	sts	0x0450, r1
    70e6:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    70e8:	80 91 10 02 	lds	r24, 0x0210
    70ec:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    70f0:	80 e0       	ldi	r24, 0x00	; 0
    70f2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    70f6:	80 91 10 02 	lds	r24, 0x0210
    70fa:	8f 5f       	subi	r24, 0xFF	; 255
    70fc:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7100:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    7104:	80 93 66 04 	sts	0x0466, r24
    7108:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    710c:	80 93 67 04 	sts	0x0467, r24
    7110:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    7112:	80 91 10 02 	lds	r24, 0x0210
    7116:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    711a:	82 e3       	ldi	r24, 0x32	; 50
    711c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7120:	80 91 10 02 	lds	r24, 0x0210
    7124:	8f 5f       	subi	r24, 0xFF	; 255
    7126:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    712a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    712e:	80 93 66 04 	sts	0x0466, r24
    7132:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    7136:	80 93 67 04 	sts	0x0467, r24
    713a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    713e:	80 93 68 04 	sts	0x0468, r24
    7142:	08 95       	ret

00007144 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    7144:	1f 93       	push	r17
    7146:	df 93       	push	r29
    7148:	cf 93       	push	r28
    714a:	00 d0       	rcall	.+0      	; 0x714c <readAccelXYZ+0x8>
    714c:	00 d0       	rcall	.+0      	; 0x714e <readAccelXYZ+0xa>
    714e:	cd b7       	in	r28, 0x3d	; 61
    7150:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    7152:	80 91 4b 04 	lds	r24, 0x044B
    7156:	88 23       	and	r24, r24
    7158:	c9 f0       	breq	.+50     	; 0x718c <readAccelXYZ+0x48>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    715a:	81 30       	cpi	r24, 0x01	; 1
    715c:	09 f4       	brne	.+2      	; 0x7160 <readAccelXYZ+0x1c>
    715e:	99 c0       	rjmp	.+306    	; 0x7292 <readAccelXYZ+0x14e>
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
		}

	} else {

		accX = 0;
    7160:	10 92 4d 04 	sts	0x044D, r1
    7164:	10 92 4c 04 	sts	0x044C, r1
		accY = 0;
    7168:	10 92 4f 04 	sts	0x044F, r1
    716c:	10 92 4e 04 	sts	0x044E, r1
		accZ = 0;
    7170:	10 92 51 04 	sts	0x0451, r1
    7174:	10 92 50 04 	sts	0x0450, r1

	}

}
    7178:	26 96       	adiw	r28, 0x06	; 6
    717a:	0f b6       	in	r0, 0x3f	; 63
    717c:	f8 94       	cli
    717e:	de bf       	out	0x3e, r29	; 62
    7180:	0f be       	out	0x3f, r0	; 63
    7182:	cd bf       	out	0x3d, r28	; 61
    7184:	cf 91       	pop	r28
    7186:	df 91       	pop	r29
    7188:	1f 91       	pop	r17
    718a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    718c:	80 91 10 02 	lds	r24, 0x0210
    7190:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7194:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    7196:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    719a:	80 91 10 02 	lds	r24, 0x0210
    719e:	8f 5f       	subi	r24, 0xFF	; 255
    71a0:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    71a4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    71a8:	89 83       	std	Y+1, r24	; 0x01
    71aa:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    71ae:	8a 83       	std	Y+2, r24	; 0x02
    71b0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    71b4:	8b 83       	std	Y+3, r24	; 0x03
    71b6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    71ba:	8c 83       	std	Y+4, r24	; 0x04
    71bc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    71c0:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    71c2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <i2c_readNak>
    71c6:	18 2f       	mov	r17, r24
    71c8:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    71ca:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    71ce:	80 91 9a 0b 	lds	r24, 0x0B9A
    71d2:	88 23       	and	r24, r24
    71d4:	89 f1       	breq	.+98     	; 0x7238 <readAccelXYZ+0xf4>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    71d6:	8a 81       	ldd	r24, Y+2	; 0x02
    71d8:	99 27       	eor	r25, r25
    71da:	87 fd       	sbrc	r24, 7
    71dc:	90 95       	com	r25
    71de:	98 2f       	mov	r25, r24
    71e0:	88 27       	eor	r24, r24
    71e2:	29 81       	ldd	r18, Y+1	; 0x01
    71e4:	33 27       	eor	r19, r19
    71e6:	27 fd       	sbrc	r18, 7
    71e8:	30 95       	com	r19
    71ea:	82 2b       	or	r24, r18
    71ec:	93 2b       	or	r25, r19
    71ee:	90 93 4d 04 	sts	0x044D, r25
    71f2:	80 93 4c 04 	sts	0x044C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    71f6:	8c 81       	ldd	r24, Y+4	; 0x04
    71f8:	99 27       	eor	r25, r25
    71fa:	87 fd       	sbrc	r24, 7
    71fc:	90 95       	com	r25
    71fe:	98 2f       	mov	r25, r24
    7200:	88 27       	eor	r24, r24
    7202:	2b 81       	ldd	r18, Y+3	; 0x03
    7204:	33 27       	eor	r19, r19
    7206:	27 fd       	sbrc	r18, 7
    7208:	30 95       	com	r19
    720a:	82 2b       	or	r24, r18
    720c:	93 2b       	or	r25, r19
    720e:	90 93 4f 04 	sts	0x044F, r25
    7212:	80 93 4e 04 	sts	0x044E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
    7216:	21 2f       	mov	r18, r17
    7218:	33 27       	eor	r19, r19
    721a:	27 fd       	sbrc	r18, 7
    721c:	30 95       	com	r19
    721e:	32 2f       	mov	r19, r18
    7220:	22 27       	eor	r18, r18
    7222:	8d 81       	ldd	r24, Y+5	; 0x05
    7224:	99 27       	eor	r25, r25
    7226:	87 fd       	sbrc	r24, 7
    7228:	90 95       	com	r25
    722a:	28 2b       	or	r18, r24
    722c:	39 2b       	or	r19, r25
    722e:	30 93 51 04 	sts	0x0451, r19
    7232:	20 93 50 04 	sts	0x0450, r18
    7236:	a0 cf       	rjmp	.-192    	; 0x7178 <readAccelXYZ+0x34>
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7238:	2a 81       	ldd	r18, Y+2	; 0x02
    723a:	33 27       	eor	r19, r19
    723c:	27 fd       	sbrc	r18, 7
    723e:	30 95       	com	r19
    7240:	32 2f       	mov	r19, r18
    7242:	22 27       	eor	r18, r18
    7244:	89 81       	ldd	r24, Y+1	; 0x01
    7246:	99 27       	eor	r25, r25
    7248:	87 fd       	sbrc	r24, 7
    724a:	90 95       	com	r25
    724c:	28 2b       	or	r18, r24
    724e:	39 2b       	or	r19, r25
    7250:	80 91 52 04 	lds	r24, 0x0452
    7254:	90 91 53 04 	lds	r25, 0x0453
    7258:	28 1b       	sub	r18, r24
    725a:	39 0b       	sbc	r19, r25
    725c:	30 93 4d 04 	sts	0x044D, r19
    7260:	20 93 4c 04 	sts	0x044C, r18
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7264:	2c 81       	ldd	r18, Y+4	; 0x04
    7266:	33 27       	eor	r19, r19
    7268:	27 fd       	sbrc	r18, 7
    726a:	30 95       	com	r19
    726c:	32 2f       	mov	r19, r18
    726e:	22 27       	eor	r18, r18
    7270:	8b 81       	ldd	r24, Y+3	; 0x03
    7272:	99 27       	eor	r25, r25
    7274:	87 fd       	sbrc	r24, 7
    7276:	90 95       	com	r25
    7278:	28 2b       	or	r18, r24
    727a:	39 2b       	or	r19, r25
    727c:	80 91 54 04 	lds	r24, 0x0454
    7280:	90 91 55 04 	lds	r25, 0x0455
    7284:	28 1b       	sub	r18, r24
    7286:	39 0b       	sbc	r19, r25
    7288:	30 93 4f 04 	sts	0x044F, r19
    728c:	20 93 4e 04 	sts	0x044E, r18
    7290:	c2 cf       	rjmp	.-124    	; 0x7216 <readAccelXYZ+0xd2>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    7292:	80 91 10 02 	lds	r24, 0x0210
    7296:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    729a:	82 e3       	ldi	r24, 0x32	; 50
    729c:	7c cf       	rjmp	.-264    	; 0x7196 <readAccelXYZ+0x52>

0000729e <readAccelXY>:

	return 0;

}

void readAccelXY() {
    729e:	ef 92       	push	r14
    72a0:	ff 92       	push	r15
    72a2:	0f 93       	push	r16
    72a4:	1f 93       	push	r17

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    72a6:	80 91 4b 04 	lds	r24, 0x044B
    72aa:	88 23       	and	r24, r24
    72ac:	81 f0       	breq	.+32     	; 0x72ce <readAccelXY+0x30>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    72ae:	81 30       	cpi	r24, 0x01	; 1
    72b0:	09 f4       	brne	.+2      	; 0x72b4 <readAccelXY+0x16>
    72b2:	81 c0       	rjmp	.+258    	; 0x73b6 <readAccelXY+0x118>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    72b4:	10 92 4d 04 	sts	0x044D, r1
    72b8:	10 92 4c 04 	sts	0x044C, r1
		accY = 0;
    72bc:	10 92 4f 04 	sts	0x044F, r1
    72c0:	10 92 4e 04 	sts	0x044E, r1

	}

}
    72c4:	1f 91       	pop	r17
    72c6:	0f 91       	pop	r16
    72c8:	ff 90       	pop	r15
    72ca:	ef 90       	pop	r14
    72cc:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    72ce:	80 91 10 02 	lds	r24, 0x0210
    72d2:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    72d6:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    72d8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    72dc:	80 91 10 02 	lds	r24, 0x0210
    72e0:	8f 5f       	subi	r24, 0xFF	; 255
    72e2:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    72e6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    72ea:	08 2f       	mov	r16, r24
    72ec:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    72f0:	18 2f       	mov	r17, r24
    72f2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <i2c_readAck>
    72f6:	e8 2e       	mov	r14, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    72f8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <i2c_readNak>
    72fc:	f8 2e       	mov	r15, r24
		i2c_stop();													// set stop conditon = release bus
    72fe:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7302:	80 91 9a 0b 	lds	r24, 0x0B9A
    7306:	88 23       	and	r24, r24
    7308:	29 f1       	breq	.+74     	; 0x7354 <readAccelXY+0xb6>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    730a:	81 2f       	mov	r24, r17
    730c:	99 27       	eor	r25, r25
    730e:	87 fd       	sbrc	r24, 7
    7310:	90 95       	com	r25
    7312:	98 2f       	mov	r25, r24
    7314:	88 27       	eor	r24, r24
    7316:	20 2f       	mov	r18, r16
    7318:	33 27       	eor	r19, r19
    731a:	27 fd       	sbrc	r18, 7
    731c:	30 95       	com	r19
    731e:	82 2b       	or	r24, r18
    7320:	93 2b       	or	r25, r19
    7322:	90 93 4d 04 	sts	0x044D, r25
    7326:	80 93 4c 04 	sts	0x044C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    732a:	8f 2d       	mov	r24, r15
    732c:	99 27       	eor	r25, r25
    732e:	87 fd       	sbrc	r24, 7
    7330:	90 95       	com	r25
    7332:	98 2f       	mov	r25, r24
    7334:	88 27       	eor	r24, r24
    7336:	2e 2d       	mov	r18, r14
    7338:	33 27       	eor	r19, r19
    733a:	27 fd       	sbrc	r18, 7
    733c:	30 95       	com	r19
    733e:	82 2b       	or	r24, r18
    7340:	93 2b       	or	r25, r19
    7342:	90 93 4f 04 	sts	0x044F, r25
    7346:	80 93 4e 04 	sts	0x044E, r24
		accX = 0;
		accY = 0;

	}

}
    734a:	1f 91       	pop	r17
    734c:	0f 91       	pop	r16
    734e:	ff 90       	pop	r15
    7350:	ef 90       	pop	r14
    7352:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7354:	81 2f       	mov	r24, r17
    7356:	99 27       	eor	r25, r25
    7358:	87 fd       	sbrc	r24, 7
    735a:	90 95       	com	r25
    735c:	98 2f       	mov	r25, r24
    735e:	88 27       	eor	r24, r24
    7360:	20 2f       	mov	r18, r16
    7362:	33 27       	eor	r19, r19
    7364:	27 fd       	sbrc	r18, 7
    7366:	30 95       	com	r19
    7368:	82 2b       	or	r24, r18
    736a:	93 2b       	or	r25, r19
    736c:	20 91 52 04 	lds	r18, 0x0452
    7370:	30 91 53 04 	lds	r19, 0x0453
    7374:	82 1b       	sub	r24, r18
    7376:	93 0b       	sbc	r25, r19
    7378:	90 93 4d 04 	sts	0x044D, r25
    737c:	80 93 4c 04 	sts	0x044C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7380:	8f 2d       	mov	r24, r15
    7382:	99 27       	eor	r25, r25
    7384:	87 fd       	sbrc	r24, 7
    7386:	90 95       	com	r25
    7388:	98 2f       	mov	r25, r24
    738a:	88 27       	eor	r24, r24
    738c:	2e 2d       	mov	r18, r14
    738e:	33 27       	eor	r19, r19
    7390:	27 fd       	sbrc	r18, 7
    7392:	30 95       	com	r19
    7394:	82 2b       	or	r24, r18
    7396:	93 2b       	or	r25, r19
    7398:	20 91 54 04 	lds	r18, 0x0454
    739c:	30 91 55 04 	lds	r19, 0x0455
    73a0:	82 1b       	sub	r24, r18
    73a2:	93 0b       	sbc	r25, r19
    73a4:	90 93 4f 04 	sts	0x044F, r25
    73a8:	80 93 4e 04 	sts	0x044E, r24
		accX = 0;
		accY = 0;

	}

}
    73ac:	1f 91       	pop	r17
    73ae:	0f 91       	pop	r16
    73b0:	ff 90       	pop	r15
    73b2:	ef 90       	pop	r14
    73b4:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    73b6:	80 91 10 02 	lds	r24, 0x0210
    73ba:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    73be:	82 e3       	ldi	r24, 0x32	; 50
    73c0:	8b cf       	rjmp	.-234    	; 0x72d8 <readAccelXY+0x3a>

000073c2 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    73c2:	af 92       	push	r10
    73c4:	bf 92       	push	r11
    73c6:	cf 92       	push	r12
    73c8:	df 92       	push	r13
    73ca:	ef 92       	push	r14
    73cc:	ff 92       	push	r15
    73ce:	0f 93       	push	r16
    73d0:	1f 93       	push	r17
    73d2:	cf 93       	push	r28
    73d4:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    73d6:	10 92 08 02 	sts	0x0208, r1
	pwm_green = 0;
    73da:	10 92 09 02 	sts	0x0209, r1
	pwm_blue = 0;
    73de:	10 92 0a 02 	sts	0x020A, r1
	updateRedLed(pwm_red);
    73e2:	80 e0       	ldi	r24, 0x00	; 0
    73e4:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <updateRedLed>
	updateGreenLed(pwm_green);
    73e8:	80 91 09 02 	lds	r24, 0x0209
    73ec:	0e 94 14 36 	call	0x6c28	; 0x6c28 <updateGreenLed>
	updateBlueLed(pwm_blue);
    73f0:	80 91 0a 02 	lds	r24, 0x020A
    73f4:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <updateBlueLed>

	calibrationCycle = 0;
    73f8:	10 92 72 04 	sts	0x0472, r1
    73fc:	10 92 71 04 	sts	0x0471, r1
	startCalibration = 1;
    7400:	81 e0       	ldi	r24, 0x01	; 1
    7402:	80 93 9a 0b 	sts	0x0B9A, r24


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
    7406:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    740a:	60 93 90 04 	sts	0x0490, r22
    740e:	70 93 91 04 	sts	0x0491, r23
    7412:	80 93 92 04 	sts	0x0492, r24
    7416:	90 93 93 04 	sts	0x0493, r25
    741a:	02 c0       	rjmp	.+4      	; 0x7420 <calibrateSensors+0x5e>
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
		readAccelXYZ();	// get a fresh value from the accelerometer
    741c:	0e 94 a2 38 	call	0x7144	; 0x7144 <readAccelXYZ>


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
    7420:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    7424:	20 91 90 04 	lds	r18, 0x0490
    7428:	30 91 91 04 	lds	r19, 0x0491
    742c:	40 91 92 04 	lds	r20, 0x0492
    7430:	50 91 93 04 	lds	r21, 0x0493
    7434:	62 1b       	sub	r22, r18
    7436:	73 0b       	sbc	r23, r19
    7438:	84 0b       	sbc	r24, r20
    743a:	95 0b       	sbc	r25, r21
    743c:	61 5c       	subi	r22, 0xC1	; 193
    743e:	73 40       	sbci	r23, 0x03	; 3
    7440:	80 40       	sbci	r24, 0x00	; 0
    7442:	90 40       	sbci	r25, 0x00	; 0
    7444:	58 f3       	brcs	.-42     	; 0x741c <calibrateSensors+0x5a>
		readAccelXYZ();	// get a fresh value from the accelerometer
	}
	
	accXMax = -1023;
    7446:	21 e0       	ldi	r18, 0x01	; 1
    7448:	3c ef       	ldi	r19, 0xFC	; 252
    744a:	30 93 5b 04 	sts	0x045B, r19
    744e:	20 93 5a 04 	sts	0x045A, r18
	accXMin = 1023;
    7452:	8f ef       	ldi	r24, 0xFF	; 255
    7454:	93 e0       	ldi	r25, 0x03	; 3
    7456:	90 93 5d 04 	sts	0x045D, r25
    745a:	80 93 5c 04 	sts	0x045C, r24
	accYMax = -1023;
    745e:	30 93 5f 04 	sts	0x045F, r19
    7462:	20 93 5e 04 	sts	0x045E, r18
	accYMin = 1023;
    7466:	90 93 61 04 	sts	0x0461, r25
    746a:	80 93 60 04 	sts	0x0460, r24
	accOffsetXSum = 0;
    746e:	10 92 57 04 	sts	0x0457, r1
    7472:	10 92 56 04 	sts	0x0456, r1
	accOffsetYSum = 0;
    7476:	10 92 59 04 	sts	0x0459, r1
    747a:	10 92 58 04 	sts	0x0458, r1

	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    747e:	80 91 50 04 	lds	r24, 0x0450
    7482:	90 91 51 04 	lds	r25, 0x0451
    7486:	97 fd       	sbrc	r25, 7
    7488:	4c c4       	rjmp	.+2200   	; 0x7d22 <calibrateSensors+0x960>
    748a:	8d 97       	sbiw	r24, 0x2d	; 45
    748c:	0c f4       	brge	.+2      	; 0x7490 <calibrateSensors+0xce>
    748e:	ab c3       	rjmp	.+1878   	; 0x7be6 <calibrateSensors+0x824>

		pwm_red = 0;
    7490:	10 92 08 02 	sts	0x0208, r1
		pwm_green = 255;
    7494:	8f ef       	ldi	r24, 0xFF	; 255
    7496:	80 93 09 02 	sts	0x0209, r24
		pwm_blue = 255;
    749a:	80 93 0a 02 	sts	0x020A, r24
		updateRedLed(pwm_red);
    749e:	80 e0       	ldi	r24, 0x00	; 0
    74a0:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <updateRedLed>
		updateGreenLed(pwm_green);
    74a4:	80 91 09 02 	lds	r24, 0x0209
    74a8:	0e 94 14 36 	call	0x6c28	; 0x6c28 <updateGreenLed>
		updateBlueLed(pwm_blue);
    74ac:	80 91 0a 02 	lds	r24, 0x020A
    74b0:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <updateBlueLed>

		setLeftSpeed(0);
    74b4:	80 e0       	ldi	r24, 0x00	; 0
    74b6:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <setLeftSpeed>
		setRightSpeed(0);
    74ba:	80 e0       	ldi	r24, 0x00	; 0
    74bc:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <setRightSpeed>
    74c0:	22 c0       	rjmp	.+68     	; 0x7506 <calibrateSensors+0x144>
			readAccelXYZ();

			handleMotorsWithNoController();

			if(calibrationCycle < CALIBRATION_CYCLES) {
				accOffsetXSum += accX;
    74c2:	80 91 56 04 	lds	r24, 0x0456
    74c6:	90 91 57 04 	lds	r25, 0x0457
    74ca:	20 91 4c 04 	lds	r18, 0x044C
    74ce:	30 91 4d 04 	lds	r19, 0x044D
    74d2:	82 0f       	add	r24, r18
    74d4:	93 1f       	adc	r25, r19
    74d6:	90 93 57 04 	sts	0x0457, r25
    74da:	80 93 56 04 	sts	0x0456, r24
				accOffsetYSum += accY;
    74de:	80 91 58 04 	lds	r24, 0x0458
    74e2:	90 91 59 04 	lds	r25, 0x0459
    74e6:	20 91 4e 04 	lds	r18, 0x044E
    74ea:	30 91 4f 04 	lds	r19, 0x044F
    74ee:	82 0f       	add	r24, r18
    74f0:	93 1f       	adc	r25, r19
    74f2:	90 93 59 04 	sts	0x0459, r25
    74f6:	80 93 58 04 	sts	0x0458, r24
				calibrationCycle++;
    74fa:	4f 5f       	subi	r20, 0xFF	; 255
    74fc:	5f 4f       	sbci	r21, 0xFF	; 255
    74fe:	50 93 72 04 	sts	0x0472, r21
    7502:	40 93 71 04 	sts	0x0471, r20
		setLeftSpeed(0);
		setRightSpeed(0);

		while(1) {

			readAccelXYZ();
    7506:	0e 94 a2 38 	call	0x7144	; 0x7144 <readAccelXYZ>

			handleMotorsWithNoController();
    750a:	0e 94 cb 2e 	call	0x5d96	; 0x5d96 <handleMotorsWithNoController>

			if(calibrationCycle < CALIBRATION_CYCLES) {
    750e:	40 91 71 04 	lds	r20, 0x0471
    7512:	50 91 72 04 	lds	r21, 0x0472
    7516:	40 31       	cpi	r20, 0x10	; 16
    7518:	51 05       	cpc	r21, r1
    751a:	9c f2       	brlt	.-90     	; 0x74c2 <calibrateSensors+0x100>
				accOffsetXSum += accX;
				accOffsetYSum += accY;
				calibrationCycle++;
			} else {
				accOffsetX = accOffsetXSum>>4;
    751c:	80 91 56 04 	lds	r24, 0x0456
    7520:	90 91 57 04 	lds	r25, 0x0457
    7524:	95 95       	asr	r25
    7526:	87 95       	ror	r24
    7528:	95 95       	asr	r25
    752a:	87 95       	ror	r24
    752c:	95 95       	asr	r25
    752e:	87 95       	ror	r24
    7530:	95 95       	asr	r25
    7532:	87 95       	ror	r24
    7534:	90 93 53 04 	sts	0x0453, r25
    7538:	80 93 52 04 	sts	0x0452, r24
				accOffsetY = accOffsetYSum>>4;
    753c:	80 91 58 04 	lds	r24, 0x0458
    7540:	90 91 59 04 	lds	r25, 0x0459
    7544:	95 95       	asr	r25
    7546:	87 95       	ror	r24
    7548:	95 95       	asr	r25
    754a:	87 95       	ror	r24
    754c:	95 95       	asr	r25
    754e:	87 95       	ror	r24
    7550:	95 95       	asr	r25
    7552:	87 95       	ror	r24
    7554:	90 93 55 04 	sts	0x0455, r25
    7558:	80 93 54 04 	sts	0x0454, r24
		setLeftSpeed(0);
		setRightSpeed(0);

	}	

	startCalibration = 1;
    755c:	81 e0       	ldi	r24, 0x01	; 1
    755e:	80 93 9a 0b 	sts	0x0B9A, r24
	calibrationCycle = 0;
    7562:	10 92 72 04 	sts	0x0472, r1
    7566:	10 92 71 04 	sts	0x0471, r1

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    756a:	1f ef       	ldi	r17, 0xFF	; 255
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
						proximityOffset[i] = 0;
					}				
					
					calibrationCycle++;
    756c:	c1 e0       	ldi	r28, 0x01	; 1
    756e:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    7570:	80 91 71 04 	lds	r24, 0x0471
    7574:	90 91 72 04 	lds	r25, 0x0472
    7578:	41 97       	sbiw	r24, 0x11	; 17
    757a:	84 f4       	brge	.+32     	; 0x759c <calibrateSensors+0x1da>

			if(proxUpdated) {
    757c:	80 91 dc 02 	lds	r24, 0x02DC
    7580:	88 23       	and	r24, r24
    7582:	09 f0       	breq	.+2      	; 0x7586 <calibrateSensors+0x1c4>
    7584:	29 c1       	rjmp	.+594    	; 0x77d8 <calibrateSensors+0x416>

	startCalibration = 1;
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {
    7586:	80 91 9a 0b 	lds	r24, 0x0B9A
    758a:	88 23       	and	r24, r24
    758c:	09 f4       	brne	.+2      	; 0x7590 <calibrateSensors+0x1ce>
    758e:	08 c1       	rjmp	.+528    	; 0x77a0 <calibrateSensors+0x3de>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    7590:	80 91 71 04 	lds	r24, 0x0471
    7594:	90 91 72 04 	lds	r25, 0x0472
    7598:	41 97       	sbiw	r24, 0x11	; 17
    759a:	84 f3       	brlt	.-32     	; 0x757c <calibrateSensors+0x1ba>

			}

		} else {

			pwm_red = 0;
    759c:	10 92 08 02 	sts	0x0208, r1
			pwm_green = 0;
    75a0:	10 92 09 02 	sts	0x0209, r1
			pwm_blue = 255;
    75a4:	8f ef       	ldi	r24, 0xFF	; 255
    75a6:	80 93 0a 02 	sts	0x020A, r24
			updateRedLed(pwm_red);
    75aa:	80 e0       	ldi	r24, 0x00	; 0
    75ac:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <updateRedLed>
			updateGreenLed(pwm_green);
    75b0:	80 91 09 02 	lds	r24, 0x0209
    75b4:	0e 94 14 36 	call	0x6c28	; 0x6c28 <updateGreenLed>
			updateBlueLed(pwm_blue);
    75b8:	80 91 0a 02 	lds	r24, 0x020A
    75bc:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <updateBlueLed>

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    75c0:	80 91 a5 02 	lds	r24, 0x02A5
    75c4:	90 91 a6 02 	lds	r25, 0x02A6
    75c8:	a0 91 a7 02 	lds	r26, 0x02A7
    75cc:	b0 91 a8 02 	lds	r27, 0x02A8
    75d0:	e4 e0       	ldi	r30, 0x04	; 4
    75d2:	b6 95       	lsr	r27
    75d4:	a7 95       	ror	r26
    75d6:	97 95       	ror	r25
    75d8:	87 95       	ror	r24
    75da:	ea 95       	dec	r30
    75dc:	d1 f7       	brne	.-12     	; 0x75d2 <calibrateSensors+0x210>
    75de:	90 93 8e 02 	sts	0x028E, r25
    75e2:	80 93 8d 02 	sts	0x028D, r24
    75e6:	80 91 a9 02 	lds	r24, 0x02A9
    75ea:	90 91 aa 02 	lds	r25, 0x02AA
    75ee:	a0 91 ab 02 	lds	r26, 0x02AB
    75f2:	b0 91 ac 02 	lds	r27, 0x02AC
    75f6:	74 e0       	ldi	r23, 0x04	; 4
    75f8:	b6 95       	lsr	r27
    75fa:	a7 95       	ror	r26
    75fc:	97 95       	ror	r25
    75fe:	87 95       	ror	r24
    7600:	7a 95       	dec	r23
    7602:	d1 f7       	brne	.-12     	; 0x75f8 <calibrateSensors+0x236>
    7604:	90 93 90 02 	sts	0x0290, r25
    7608:	80 93 8f 02 	sts	0x028F, r24
    760c:	80 91 ad 02 	lds	r24, 0x02AD
    7610:	90 91 ae 02 	lds	r25, 0x02AE
    7614:	a0 91 af 02 	lds	r26, 0x02AF
    7618:	b0 91 b0 02 	lds	r27, 0x02B0
    761c:	64 e0       	ldi	r22, 0x04	; 4
    761e:	b6 95       	lsr	r27
    7620:	a7 95       	ror	r26
    7622:	97 95       	ror	r25
    7624:	87 95       	ror	r24
    7626:	6a 95       	dec	r22
    7628:	d1 f7       	brne	.-12     	; 0x761e <calibrateSensors+0x25c>
    762a:	90 93 92 02 	sts	0x0292, r25
    762e:	80 93 91 02 	sts	0x0291, r24
    7632:	80 91 b1 02 	lds	r24, 0x02B1
    7636:	90 91 b2 02 	lds	r25, 0x02B2
    763a:	a0 91 b3 02 	lds	r26, 0x02B3
    763e:	b0 91 b4 02 	lds	r27, 0x02B4
    7642:	54 e0       	ldi	r21, 0x04	; 4
    7644:	b6 95       	lsr	r27
    7646:	a7 95       	ror	r26
    7648:	97 95       	ror	r25
    764a:	87 95       	ror	r24
    764c:	5a 95       	dec	r21
    764e:	d1 f7       	brne	.-12     	; 0x7644 <calibrateSensors+0x282>
    7650:	90 93 94 02 	sts	0x0294, r25
    7654:	80 93 93 02 	sts	0x0293, r24
    7658:	80 91 b5 02 	lds	r24, 0x02B5
    765c:	90 91 b6 02 	lds	r25, 0x02B6
    7660:	a0 91 b7 02 	lds	r26, 0x02B7
    7664:	b0 91 b8 02 	lds	r27, 0x02B8
    7668:	44 e0       	ldi	r20, 0x04	; 4
    766a:	b6 95       	lsr	r27
    766c:	a7 95       	ror	r26
    766e:	97 95       	ror	r25
    7670:	87 95       	ror	r24
    7672:	4a 95       	dec	r20
    7674:	d1 f7       	brne	.-12     	; 0x766a <calibrateSensors+0x2a8>
    7676:	90 93 96 02 	sts	0x0296, r25
    767a:	80 93 95 02 	sts	0x0295, r24
    767e:	80 91 b9 02 	lds	r24, 0x02B9
    7682:	90 91 ba 02 	lds	r25, 0x02BA
    7686:	a0 91 bb 02 	lds	r26, 0x02BB
    768a:	b0 91 bc 02 	lds	r27, 0x02BC
    768e:	34 e0       	ldi	r19, 0x04	; 4
    7690:	b6 95       	lsr	r27
    7692:	a7 95       	ror	r26
    7694:	97 95       	ror	r25
    7696:	87 95       	ror	r24
    7698:	3a 95       	dec	r19
    769a:	d1 f7       	brne	.-12     	; 0x7690 <calibrateSensors+0x2ce>
    769c:	90 93 98 02 	sts	0x0298, r25
    76a0:	80 93 97 02 	sts	0x0297, r24
    76a4:	80 91 bd 02 	lds	r24, 0x02BD
    76a8:	90 91 be 02 	lds	r25, 0x02BE
    76ac:	a0 91 bf 02 	lds	r26, 0x02BF
    76b0:	b0 91 c0 02 	lds	r27, 0x02C0
    76b4:	24 e0       	ldi	r18, 0x04	; 4
    76b6:	b6 95       	lsr	r27
    76b8:	a7 95       	ror	r26
    76ba:	97 95       	ror	r25
    76bc:	87 95       	ror	r24
    76be:	2a 95       	dec	r18
    76c0:	d1 f7       	brne	.-12     	; 0x76b6 <calibrateSensors+0x2f4>
    76c2:	90 93 9a 02 	sts	0x029A, r25
    76c6:	80 93 99 02 	sts	0x0299, r24
    76ca:	80 91 c1 02 	lds	r24, 0x02C1
    76ce:	90 91 c2 02 	lds	r25, 0x02C2
    76d2:	a0 91 c3 02 	lds	r26, 0x02C3
    76d6:	b0 91 c4 02 	lds	r27, 0x02C4
    76da:	04 e0       	ldi	r16, 0x04	; 4
    76dc:	b6 95       	lsr	r27
    76de:	a7 95       	ror	r26
    76e0:	97 95       	ror	r25
    76e2:	87 95       	ror	r24
    76e4:	0a 95       	dec	r16
    76e6:	d1 f7       	brne	.-12     	; 0x76dc <calibrateSensors+0x31a>
    76e8:	90 93 9c 02 	sts	0x029C, r25
    76ec:	80 93 9b 02 	sts	0x029B, r24
    76f0:	80 91 c5 02 	lds	r24, 0x02C5
    76f4:	90 91 c6 02 	lds	r25, 0x02C6
    76f8:	a0 91 c7 02 	lds	r26, 0x02C7
    76fc:	b0 91 c8 02 	lds	r27, 0x02C8
    7700:	14 e0       	ldi	r17, 0x04	; 4
    7702:	b6 95       	lsr	r27
    7704:	a7 95       	ror	r26
    7706:	97 95       	ror	r25
    7708:	87 95       	ror	r24
    770a:	1a 95       	dec	r17
    770c:	d1 f7       	brne	.-12     	; 0x7702 <calibrateSensors+0x340>
    770e:	20 91 c9 02 	lds	r18, 0x02C9
    7712:	30 91 ca 02 	lds	r19, 0x02CA
    7716:	40 91 cb 02 	lds	r20, 0x02CB
    771a:	50 91 cc 02 	lds	r21, 0x02CC
    771e:	f4 e0       	ldi	r31, 0x04	; 4
    7720:	56 95       	lsr	r21
    7722:	47 95       	ror	r20
    7724:	37 95       	ror	r19
    7726:	27 95       	ror	r18
    7728:	fa 95       	dec	r31
    772a:	d1 f7       	brne	.-12     	; 0x7720 <calibrateSensors+0x35e>
    772c:	e0 90 cd 02 	lds	r14, 0x02CD
    7730:	f0 90 ce 02 	lds	r15, 0x02CE
    7734:	00 91 cf 02 	lds	r16, 0x02CF
    7738:	10 91 d0 02 	lds	r17, 0x02D0
    773c:	e4 e0       	ldi	r30, 0x04	; 4
    773e:	16 95       	lsr	r17
    7740:	07 95       	ror	r16
    7742:	f7 94       	ror	r15
    7744:	e7 94       	ror	r14
    7746:	ea 95       	dec	r30
    7748:	d1 f7       	brne	.-12     	; 0x773e <calibrateSensors+0x37c>
    774a:	a0 90 d1 02 	lds	r10, 0x02D1
    774e:	b0 90 d2 02 	lds	r11, 0x02D2
    7752:	c0 90 d3 02 	lds	r12, 0x02D3
    7756:	d0 90 d4 02 	lds	r13, 0x02D4
    775a:	74 e0       	ldi	r23, 0x04	; 4
    775c:	d6 94       	lsr	r13
    775e:	c7 94       	ror	r12
    7760:	b7 94       	ror	r11
    7762:	a7 94       	ror	r10
    7764:	7a 95       	dec	r23
    7766:	d1 f7       	brne	.-12     	; 0x775c <calibrateSensors+0x39a>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    7768:	80 50       	subi	r24, 0x00	; 0
    776a:	92 40       	sbci	r25, 0x02	; 2
    776c:	90 93 9e 02 	sts	0x029E, r25
    7770:	80 93 9d 02 	sts	0x029D, r24
    7774:	20 50       	subi	r18, 0x00	; 0
    7776:	32 40       	sbci	r19, 0x02	; 2
    7778:	30 93 a0 02 	sts	0x02A0, r19
    777c:	20 93 9f 02 	sts	0x029F, r18
    7780:	80 e0       	ldi	r24, 0x00	; 0
    7782:	9e ef       	ldi	r25, 0xFE	; 254
    7784:	e8 0e       	add	r14, r24
    7786:	f9 1e       	adc	r15, r25
    7788:	f0 92 a2 02 	sts	0x02A2, r15
    778c:	e0 92 a1 02 	sts	0x02A1, r14
    7790:	a8 0e       	add	r10, r24
    7792:	b9 1e       	adc	r11, r25
    7794:	b0 92 a4 02 	sts	0x02A4, r11
    7798:	a0 92 a3 02 	sts	0x02A3, r10
			}

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    779c:	10 92 9a 0b 	sts	0x0B9A, r1

		}

	}

	pwm_red = 255;
    77a0:	8f ef       	ldi	r24, 0xFF	; 255
    77a2:	80 93 08 02 	sts	0x0208, r24
	pwm_green = 255;
    77a6:	80 93 09 02 	sts	0x0209, r24
	pwm_blue = 255;
    77aa:	80 93 0a 02 	sts	0x020A, r24
	updateRedLed(pwm_red);
    77ae:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <updateRedLed>
	updateGreenLed(pwm_green);
    77b2:	80 91 09 02 	lds	r24, 0x0209
    77b6:	0e 94 14 36 	call	0x6c28	; 0x6c28 <updateGreenLed>
	updateBlueLed(pwm_blue);
    77ba:	80 91 0a 02 	lds	r24, 0x020A
    77be:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <updateBlueLed>

}
    77c2:	df 91       	pop	r29
    77c4:	cf 91       	pop	r28
    77c6:	1f 91       	pop	r17
    77c8:	0f 91       	pop	r16
    77ca:	ff 90       	pop	r15
    77cc:	ef 90       	pop	r14
    77ce:	df 90       	pop	r13
    77d0:	cf 90       	pop	r12
    77d2:	bf 90       	pop	r11
    77d4:	af 90       	pop	r10
    77d6:	08 95       	ret

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    77d8:	10 93 08 02 	sts	0x0208, r17
				pwm_green = 255;
    77dc:	10 93 09 02 	sts	0x0209, r17
				pwm_blue = 0;
    77e0:	10 92 0a 02 	sts	0x020A, r1
				updateRedLed(pwm_red);
    77e4:	8f ef       	ldi	r24, 0xFF	; 255
    77e6:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <updateRedLed>
				updateGreenLed(pwm_green);
    77ea:	80 91 09 02 	lds	r24, 0x0209
    77ee:	0e 94 14 36 	call	0x6c28	; 0x6c28 <updateGreenLed>
				updateBlueLed(pwm_blue);
    77f2:	80 91 0a 02 	lds	r24, 0x020A
    77f6:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <updateBlueLed>

				proxUpdated = 0;
    77fa:	10 92 dc 02 	sts	0x02DC, r1

				if(calibrationCycle==0) {		// reset all variables
    77fe:	60 91 71 04 	lds	r22, 0x0471
    7802:	70 91 72 04 	lds	r23, 0x0472
    7806:	61 15       	cp	r22, r1
    7808:	71 05       	cpc	r23, r1
    780a:	09 f0       	breq	.+2      	; 0x780e <calibrateSensors+0x44c>
    780c:	95 c0       	rjmp	.+298    	; 0x7938 <calibrateSensors+0x576>

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    780e:	10 92 a5 02 	sts	0x02A5, r1
    7812:	10 92 a6 02 	sts	0x02A6, r1
    7816:	10 92 a7 02 	sts	0x02A7, r1
    781a:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    781e:	10 92 8e 02 	sts	0x028E, r1
    7822:	10 92 8d 02 	sts	0x028D, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7826:	10 92 a9 02 	sts	0x02A9, r1
    782a:	10 92 aa 02 	sts	0x02AA, r1
    782e:	10 92 ab 02 	sts	0x02AB, r1
    7832:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    7836:	10 92 90 02 	sts	0x0290, r1
    783a:	10 92 8f 02 	sts	0x028F, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    783e:	10 92 ad 02 	sts	0x02AD, r1
    7842:	10 92 ae 02 	sts	0x02AE, r1
    7846:	10 92 af 02 	sts	0x02AF, r1
    784a:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    784e:	10 92 92 02 	sts	0x0292, r1
    7852:	10 92 91 02 	sts	0x0291, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7856:	10 92 b1 02 	sts	0x02B1, r1
    785a:	10 92 b2 02 	sts	0x02B2, r1
    785e:	10 92 b3 02 	sts	0x02B3, r1
    7862:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    7866:	10 92 94 02 	sts	0x0294, r1
    786a:	10 92 93 02 	sts	0x0293, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    786e:	10 92 b5 02 	sts	0x02B5, r1
    7872:	10 92 b6 02 	sts	0x02B6, r1
    7876:	10 92 b7 02 	sts	0x02B7, r1
    787a:	10 92 b8 02 	sts	0x02B8, r1
						proximityOffset[i] = 0;
    787e:	10 92 96 02 	sts	0x0296, r1
    7882:	10 92 95 02 	sts	0x0295, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7886:	10 92 b9 02 	sts	0x02B9, r1
    788a:	10 92 ba 02 	sts	0x02BA, r1
    788e:	10 92 bb 02 	sts	0x02BB, r1
    7892:	10 92 bc 02 	sts	0x02BC, r1
						proximityOffset[i] = 0;
    7896:	10 92 98 02 	sts	0x0298, r1
    789a:	10 92 97 02 	sts	0x0297, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    789e:	10 92 bd 02 	sts	0x02BD, r1
    78a2:	10 92 be 02 	sts	0x02BE, r1
    78a6:	10 92 bf 02 	sts	0x02BF, r1
    78aa:	10 92 c0 02 	sts	0x02C0, r1
						proximityOffset[i] = 0;
    78ae:	10 92 9a 02 	sts	0x029A, r1
    78b2:	10 92 99 02 	sts	0x0299, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    78b6:	10 92 c1 02 	sts	0x02C1, r1
    78ba:	10 92 c2 02 	sts	0x02C2, r1
    78be:	10 92 c3 02 	sts	0x02C3, r1
    78c2:	10 92 c4 02 	sts	0x02C4, r1
						proximityOffset[i] = 0;
    78c6:	10 92 9c 02 	sts	0x029C, r1
    78ca:	10 92 9b 02 	sts	0x029B, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    78ce:	10 92 c5 02 	sts	0x02C5, r1
    78d2:	10 92 c6 02 	sts	0x02C6, r1
    78d6:	10 92 c7 02 	sts	0x02C7, r1
    78da:	10 92 c8 02 	sts	0x02C8, r1
						proximityOffset[i] = 0;
    78de:	10 92 9e 02 	sts	0x029E, r1
    78e2:	10 92 9d 02 	sts	0x029D, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    78e6:	10 92 c9 02 	sts	0x02C9, r1
    78ea:	10 92 ca 02 	sts	0x02CA, r1
    78ee:	10 92 cb 02 	sts	0x02CB, r1
    78f2:	10 92 cc 02 	sts	0x02CC, r1
						proximityOffset[i] = 0;
    78f6:	10 92 a0 02 	sts	0x02A0, r1
    78fa:	10 92 9f 02 	sts	0x029F, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    78fe:	10 92 cd 02 	sts	0x02CD, r1
    7902:	10 92 ce 02 	sts	0x02CE, r1
    7906:	10 92 cf 02 	sts	0x02CF, r1
    790a:	10 92 d0 02 	sts	0x02D0, r1
						proximityOffset[i] = 0;
    790e:	10 92 a2 02 	sts	0x02A2, r1
    7912:	10 92 a1 02 	sts	0x02A1, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7916:	10 92 d1 02 	sts	0x02D1, r1
    791a:	10 92 d2 02 	sts	0x02D2, r1
    791e:	10 92 d3 02 	sts	0x02D3, r1
    7922:	10 92 d4 02 	sts	0x02D4, r1
						proximityOffset[i] = 0;
    7926:	10 92 a4 02 	sts	0x02A4, r1
    792a:	10 92 a3 02 	sts	0x02A3, r1
					}				
					
					calibrationCycle++;
    792e:	d0 93 72 04 	sts	0x0472, r29
    7932:	c0 93 71 04 	sts	0x0471, r28
    7936:	27 ce       	rjmp	.-946    	; 0x7586 <calibrateSensors+0x1c4>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    7938:	80 91 75 02 	lds	r24, 0x0275
    793c:	90 91 76 02 	lds	r25, 0x0276
    7940:	aa 27       	eor	r26, r26
    7942:	97 fd       	sbrc	r25, 7
    7944:	a0 95       	com	r26
    7946:	ba 2f       	mov	r27, r26
    7948:	20 91 a5 02 	lds	r18, 0x02A5
    794c:	30 91 a6 02 	lds	r19, 0x02A6
    7950:	40 91 a7 02 	lds	r20, 0x02A7
    7954:	50 91 a8 02 	lds	r21, 0x02A8
    7958:	82 0f       	add	r24, r18
    795a:	93 1f       	adc	r25, r19
    795c:	a4 1f       	adc	r26, r20
    795e:	b5 1f       	adc	r27, r21
    7960:	80 93 a5 02 	sts	0x02A5, r24
    7964:	90 93 a6 02 	sts	0x02A6, r25
    7968:	a0 93 a7 02 	sts	0x02A7, r26
    796c:	b0 93 a8 02 	sts	0x02A8, r27
    7970:	80 91 77 02 	lds	r24, 0x0277
    7974:	90 91 78 02 	lds	r25, 0x0278
    7978:	aa 27       	eor	r26, r26
    797a:	97 fd       	sbrc	r25, 7
    797c:	a0 95       	com	r26
    797e:	ba 2f       	mov	r27, r26
    7980:	20 91 a9 02 	lds	r18, 0x02A9
    7984:	30 91 aa 02 	lds	r19, 0x02AA
    7988:	40 91 ab 02 	lds	r20, 0x02AB
    798c:	50 91 ac 02 	lds	r21, 0x02AC
    7990:	82 0f       	add	r24, r18
    7992:	93 1f       	adc	r25, r19
    7994:	a4 1f       	adc	r26, r20
    7996:	b5 1f       	adc	r27, r21
    7998:	80 93 a9 02 	sts	0x02A9, r24
    799c:	90 93 aa 02 	sts	0x02AA, r25
    79a0:	a0 93 ab 02 	sts	0x02AB, r26
    79a4:	b0 93 ac 02 	sts	0x02AC, r27
    79a8:	80 91 79 02 	lds	r24, 0x0279
    79ac:	90 91 7a 02 	lds	r25, 0x027A
    79b0:	aa 27       	eor	r26, r26
    79b2:	97 fd       	sbrc	r25, 7
    79b4:	a0 95       	com	r26
    79b6:	ba 2f       	mov	r27, r26
    79b8:	20 91 ad 02 	lds	r18, 0x02AD
    79bc:	30 91 ae 02 	lds	r19, 0x02AE
    79c0:	40 91 af 02 	lds	r20, 0x02AF
    79c4:	50 91 b0 02 	lds	r21, 0x02B0
    79c8:	82 0f       	add	r24, r18
    79ca:	93 1f       	adc	r25, r19
    79cc:	a4 1f       	adc	r26, r20
    79ce:	b5 1f       	adc	r27, r21
    79d0:	80 93 ad 02 	sts	0x02AD, r24
    79d4:	90 93 ae 02 	sts	0x02AE, r25
    79d8:	a0 93 af 02 	sts	0x02AF, r26
    79dc:	b0 93 b0 02 	sts	0x02B0, r27
    79e0:	80 91 7b 02 	lds	r24, 0x027B
    79e4:	90 91 7c 02 	lds	r25, 0x027C
    79e8:	aa 27       	eor	r26, r26
    79ea:	97 fd       	sbrc	r25, 7
    79ec:	a0 95       	com	r26
    79ee:	ba 2f       	mov	r27, r26
    79f0:	20 91 b1 02 	lds	r18, 0x02B1
    79f4:	30 91 b2 02 	lds	r19, 0x02B2
    79f8:	40 91 b3 02 	lds	r20, 0x02B3
    79fc:	50 91 b4 02 	lds	r21, 0x02B4
    7a00:	82 0f       	add	r24, r18
    7a02:	93 1f       	adc	r25, r19
    7a04:	a4 1f       	adc	r26, r20
    7a06:	b5 1f       	adc	r27, r21
    7a08:	80 93 b1 02 	sts	0x02B1, r24
    7a0c:	90 93 b2 02 	sts	0x02B2, r25
    7a10:	a0 93 b3 02 	sts	0x02B3, r26
    7a14:	b0 93 b4 02 	sts	0x02B4, r27
    7a18:	80 91 7d 02 	lds	r24, 0x027D
    7a1c:	90 91 7e 02 	lds	r25, 0x027E
    7a20:	aa 27       	eor	r26, r26
    7a22:	97 fd       	sbrc	r25, 7
    7a24:	a0 95       	com	r26
    7a26:	ba 2f       	mov	r27, r26
    7a28:	20 91 b5 02 	lds	r18, 0x02B5
    7a2c:	30 91 b6 02 	lds	r19, 0x02B6
    7a30:	40 91 b7 02 	lds	r20, 0x02B7
    7a34:	50 91 b8 02 	lds	r21, 0x02B8
    7a38:	82 0f       	add	r24, r18
    7a3a:	93 1f       	adc	r25, r19
    7a3c:	a4 1f       	adc	r26, r20
    7a3e:	b5 1f       	adc	r27, r21
    7a40:	80 93 b5 02 	sts	0x02B5, r24
    7a44:	90 93 b6 02 	sts	0x02B6, r25
    7a48:	a0 93 b7 02 	sts	0x02B7, r26
    7a4c:	b0 93 b8 02 	sts	0x02B8, r27
    7a50:	80 91 7f 02 	lds	r24, 0x027F
    7a54:	90 91 80 02 	lds	r25, 0x0280
    7a58:	aa 27       	eor	r26, r26
    7a5a:	97 fd       	sbrc	r25, 7
    7a5c:	a0 95       	com	r26
    7a5e:	ba 2f       	mov	r27, r26
    7a60:	20 91 b9 02 	lds	r18, 0x02B9
    7a64:	30 91 ba 02 	lds	r19, 0x02BA
    7a68:	40 91 bb 02 	lds	r20, 0x02BB
    7a6c:	50 91 bc 02 	lds	r21, 0x02BC
    7a70:	82 0f       	add	r24, r18
    7a72:	93 1f       	adc	r25, r19
    7a74:	a4 1f       	adc	r26, r20
    7a76:	b5 1f       	adc	r27, r21
    7a78:	80 93 b9 02 	sts	0x02B9, r24
    7a7c:	90 93 ba 02 	sts	0x02BA, r25
    7a80:	a0 93 bb 02 	sts	0x02BB, r26
    7a84:	b0 93 bc 02 	sts	0x02BC, r27
    7a88:	80 91 81 02 	lds	r24, 0x0281
    7a8c:	90 91 82 02 	lds	r25, 0x0282
    7a90:	aa 27       	eor	r26, r26
    7a92:	97 fd       	sbrc	r25, 7
    7a94:	a0 95       	com	r26
    7a96:	ba 2f       	mov	r27, r26
    7a98:	20 91 bd 02 	lds	r18, 0x02BD
    7a9c:	30 91 be 02 	lds	r19, 0x02BE
    7aa0:	40 91 bf 02 	lds	r20, 0x02BF
    7aa4:	50 91 c0 02 	lds	r21, 0x02C0
    7aa8:	82 0f       	add	r24, r18
    7aaa:	93 1f       	adc	r25, r19
    7aac:	a4 1f       	adc	r26, r20
    7aae:	b5 1f       	adc	r27, r21
    7ab0:	80 93 bd 02 	sts	0x02BD, r24
    7ab4:	90 93 be 02 	sts	0x02BE, r25
    7ab8:	a0 93 bf 02 	sts	0x02BF, r26
    7abc:	b0 93 c0 02 	sts	0x02C0, r27
    7ac0:	80 91 83 02 	lds	r24, 0x0283
    7ac4:	90 91 84 02 	lds	r25, 0x0284
    7ac8:	aa 27       	eor	r26, r26
    7aca:	97 fd       	sbrc	r25, 7
    7acc:	a0 95       	com	r26
    7ace:	ba 2f       	mov	r27, r26
    7ad0:	20 91 c1 02 	lds	r18, 0x02C1
    7ad4:	30 91 c2 02 	lds	r19, 0x02C2
    7ad8:	40 91 c3 02 	lds	r20, 0x02C3
    7adc:	50 91 c4 02 	lds	r21, 0x02C4
    7ae0:	82 0f       	add	r24, r18
    7ae2:	93 1f       	adc	r25, r19
    7ae4:	a4 1f       	adc	r26, r20
    7ae6:	b5 1f       	adc	r27, r21
    7ae8:	80 93 c1 02 	sts	0x02C1, r24
    7aec:	90 93 c2 02 	sts	0x02C2, r25
    7af0:	a0 93 c3 02 	sts	0x02C3, r26
    7af4:	b0 93 c4 02 	sts	0x02C4, r27
    7af8:	80 91 85 02 	lds	r24, 0x0285
    7afc:	90 91 86 02 	lds	r25, 0x0286
    7b00:	aa 27       	eor	r26, r26
    7b02:	97 fd       	sbrc	r25, 7
    7b04:	a0 95       	com	r26
    7b06:	ba 2f       	mov	r27, r26
    7b08:	20 91 c5 02 	lds	r18, 0x02C5
    7b0c:	30 91 c6 02 	lds	r19, 0x02C6
    7b10:	40 91 c7 02 	lds	r20, 0x02C7
    7b14:	50 91 c8 02 	lds	r21, 0x02C8
    7b18:	82 0f       	add	r24, r18
    7b1a:	93 1f       	adc	r25, r19
    7b1c:	a4 1f       	adc	r26, r20
    7b1e:	b5 1f       	adc	r27, r21
    7b20:	80 93 c5 02 	sts	0x02C5, r24
    7b24:	90 93 c6 02 	sts	0x02C6, r25
    7b28:	a0 93 c7 02 	sts	0x02C7, r26
    7b2c:	b0 93 c8 02 	sts	0x02C8, r27
    7b30:	80 91 87 02 	lds	r24, 0x0287
    7b34:	90 91 88 02 	lds	r25, 0x0288
    7b38:	aa 27       	eor	r26, r26
    7b3a:	97 fd       	sbrc	r25, 7
    7b3c:	a0 95       	com	r26
    7b3e:	ba 2f       	mov	r27, r26
    7b40:	20 91 c9 02 	lds	r18, 0x02C9
    7b44:	30 91 ca 02 	lds	r19, 0x02CA
    7b48:	40 91 cb 02 	lds	r20, 0x02CB
    7b4c:	50 91 cc 02 	lds	r21, 0x02CC
    7b50:	82 0f       	add	r24, r18
    7b52:	93 1f       	adc	r25, r19
    7b54:	a4 1f       	adc	r26, r20
    7b56:	b5 1f       	adc	r27, r21
    7b58:	80 93 c9 02 	sts	0x02C9, r24
    7b5c:	90 93 ca 02 	sts	0x02CA, r25
    7b60:	a0 93 cb 02 	sts	0x02CB, r26
    7b64:	b0 93 cc 02 	sts	0x02CC, r27
    7b68:	80 91 89 02 	lds	r24, 0x0289
    7b6c:	90 91 8a 02 	lds	r25, 0x028A
    7b70:	aa 27       	eor	r26, r26
    7b72:	97 fd       	sbrc	r25, 7
    7b74:	a0 95       	com	r26
    7b76:	ba 2f       	mov	r27, r26
    7b78:	20 91 cd 02 	lds	r18, 0x02CD
    7b7c:	30 91 ce 02 	lds	r19, 0x02CE
    7b80:	40 91 cf 02 	lds	r20, 0x02CF
    7b84:	50 91 d0 02 	lds	r21, 0x02D0
    7b88:	82 0f       	add	r24, r18
    7b8a:	93 1f       	adc	r25, r19
    7b8c:	a4 1f       	adc	r26, r20
    7b8e:	b5 1f       	adc	r27, r21
    7b90:	80 93 cd 02 	sts	0x02CD, r24
    7b94:	90 93 ce 02 	sts	0x02CE, r25
    7b98:	a0 93 cf 02 	sts	0x02CF, r26
    7b9c:	b0 93 d0 02 	sts	0x02D0, r27
    7ba0:	80 91 8b 02 	lds	r24, 0x028B
    7ba4:	90 91 8c 02 	lds	r25, 0x028C
    7ba8:	aa 27       	eor	r26, r26
    7baa:	97 fd       	sbrc	r25, 7
    7bac:	a0 95       	com	r26
    7bae:	ba 2f       	mov	r27, r26
    7bb0:	20 91 d1 02 	lds	r18, 0x02D1
    7bb4:	30 91 d2 02 	lds	r19, 0x02D2
    7bb8:	40 91 d3 02 	lds	r20, 0x02D3
    7bbc:	50 91 d4 02 	lds	r21, 0x02D4
    7bc0:	82 0f       	add	r24, r18
    7bc2:	93 1f       	adc	r25, r19
    7bc4:	a4 1f       	adc	r26, r20
    7bc6:	b5 1f       	adc	r27, r21
    7bc8:	80 93 d1 02 	sts	0x02D1, r24
    7bcc:	90 93 d2 02 	sts	0x02D2, r25
    7bd0:	a0 93 d3 02 	sts	0x02D3, r26
    7bd4:	b0 93 d4 02 	sts	0x02D4, r27
				}

				calibrationCycle++;
    7bd8:	6f 5f       	subi	r22, 0xFF	; 255
    7bda:	7f 4f       	sbci	r23, 0xFF	; 255
    7bdc:	70 93 72 04 	sts	0x0472, r23
    7be0:	60 93 71 04 	sts	0x0471, r22
    7be4:	d0 cc       	rjmp	.-1632   	; 0x7586 <calibrateSensors+0x1c4>

		}

	} else {

		pwm_red = 255;
    7be6:	8f ef       	ldi	r24, 0xFF	; 255
    7be8:	80 93 08 02 	sts	0x0208, r24
		pwm_green = 0;
    7bec:	10 92 09 02 	sts	0x0209, r1
		pwm_blue = 255;
    7bf0:	80 93 0a 02 	sts	0x020A, r24
		updateRedLed(pwm_red);
    7bf4:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <updateRedLed>
		updateGreenLed(pwm_green);
    7bf8:	80 91 09 02 	lds	r24, 0x0209
    7bfc:	0e 94 14 36 	call	0x6c28	; 0x6c28 <updateGreenLed>
		updateBlueLed(pwm_blue);
    7c00:	80 91 0a 02 	lds	r24, 0x020A
    7c04:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <updateBlueLed>

		setLeftSpeed(-10);
    7c08:	86 ef       	ldi	r24, 0xF6	; 246
    7c0a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <setLeftSpeed>
		setRightSpeed(10);
    7c0e:	8a e0       	ldi	r24, 0x0A	; 10
    7c10:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <setRightSpeed>

		lastTick = getTime100MicroSec();
    7c14:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    7c18:	60 93 90 04 	sts	0x0490, r22
    7c1c:	70 93 91 04 	sts	0x0491, r23
    7c20:	80 93 92 04 	sts	0x0492, r24
    7c24:	90 93 93 04 	sts	0x0493, r25
    7c28:	3d c0       	rjmp	.+122    	; 0x7ca4 <calibrateSensors+0x8e2>
			readAccelXYZ();

			handleMotorsWithSpeedController();

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
				if(accXMax < accX) {
    7c2a:	20 91 4c 04 	lds	r18, 0x044C
    7c2e:	30 91 4d 04 	lds	r19, 0x044D
    7c32:	80 91 5a 04 	lds	r24, 0x045A
    7c36:	90 91 5b 04 	lds	r25, 0x045B
    7c3a:	82 17       	cp	r24, r18
    7c3c:	93 07       	cpc	r25, r19
    7c3e:	24 f4       	brge	.+8      	; 0x7c48 <calibrateSensors+0x886>
					accXMax = accX;
    7c40:	30 93 5b 04 	sts	0x045B, r19
    7c44:	20 93 5a 04 	sts	0x045A, r18
				}
				if(accXMin > accX) {
    7c48:	80 91 5c 04 	lds	r24, 0x045C
    7c4c:	90 91 5d 04 	lds	r25, 0x045D
    7c50:	28 17       	cp	r18, r24
    7c52:	39 07       	cpc	r19, r25
    7c54:	24 f4       	brge	.+8      	; 0x7c5e <calibrateSensors+0x89c>
					accXMin = accX;
    7c56:	30 93 5d 04 	sts	0x045D, r19
    7c5a:	20 93 5c 04 	sts	0x045C, r18
				}
				if(accYMax < accY) {
    7c5e:	20 91 4e 04 	lds	r18, 0x044E
    7c62:	30 91 4f 04 	lds	r19, 0x044F
    7c66:	80 91 5e 04 	lds	r24, 0x045E
    7c6a:	90 91 5f 04 	lds	r25, 0x045F
    7c6e:	82 17       	cp	r24, r18
    7c70:	93 07       	cpc	r25, r19
    7c72:	24 f4       	brge	.+8      	; 0x7c7c <calibrateSensors+0x8ba>
					accYMax = accY;
    7c74:	30 93 5f 04 	sts	0x045F, r19
    7c78:	20 93 5e 04 	sts	0x045E, r18
				}
				if(accYMin > accY) {
    7c7c:	80 91 60 04 	lds	r24, 0x0460
    7c80:	90 91 61 04 	lds	r25, 0x0461
    7c84:	28 17       	cp	r18, r24
    7c86:	39 07       	cpc	r19, r25
    7c88:	24 f4       	brge	.+8      	; 0x7c92 <calibrateSensors+0x8d0>
					accYMin = accY;
    7c8a:	30 93 61 04 	sts	0x0461, r19
    7c8e:	20 93 60 04 	sts	0x0460, r18
				}
				calibrationCycle++;
    7c92:	80 91 71 04 	lds	r24, 0x0471
    7c96:	90 91 72 04 	lds	r25, 0x0472
    7c9a:	01 96       	adiw	r24, 0x01	; 1
    7c9c:	90 93 72 04 	sts	0x0472, r25
    7ca0:	80 93 71 04 	sts	0x0471, r24

		lastTick = getTime100MicroSec();

		while(1) {

			readAccelXYZ();
    7ca4:	0e 94 a2 38 	call	0x7144	; 0x7144 <readAccelXYZ>

			handleMotorsWithSpeedController();
    7ca8:	0e 94 11 2a 	call	0x5422	; 0x5422 <handleMotorsWithSpeedController>

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
    7cac:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    7cb0:	20 91 90 04 	lds	r18, 0x0490
    7cb4:	30 91 91 04 	lds	r19, 0x0491
    7cb8:	40 91 92 04 	lds	r20, 0x0492
    7cbc:	50 91 93 04 	lds	r21, 0x0493
    7cc0:	62 1b       	sub	r22, r18
    7cc2:	73 0b       	sbc	r23, r19
    7cc4:	84 0b       	sbc	r24, r20
    7cc6:	95 0b       	sbc	r25, r21
    7cc8:	6e 53       	subi	r22, 0x3E	; 62
    7cca:	76 49       	sbci	r23, 0x96	; 150
    7ccc:	80 40       	sbci	r24, 0x00	; 0
    7cce:	90 40       	sbci	r25, 0x00	; 0
    7cd0:	08 f4       	brcc	.+2      	; 0x7cd4 <calibrateSensors+0x912>
    7cd2:	ab cf       	rjmp	.-170    	; 0x7c2a <calibrateSensors+0x868>
				if(accYMin > accY) {
					accYMin = accY;
				}
				calibrationCycle++;
			} else {
				accOffsetX = (accXMax + accXMin)>>1;
    7cd4:	80 91 5c 04 	lds	r24, 0x045C
    7cd8:	90 91 5d 04 	lds	r25, 0x045D
    7cdc:	20 91 5a 04 	lds	r18, 0x045A
    7ce0:	30 91 5b 04 	lds	r19, 0x045B
    7ce4:	82 0f       	add	r24, r18
    7ce6:	93 1f       	adc	r25, r19
    7ce8:	95 95       	asr	r25
    7cea:	87 95       	ror	r24
    7cec:	90 93 53 04 	sts	0x0453, r25
    7cf0:	80 93 52 04 	sts	0x0452, r24
				accOffsetY = (accYMax + accYMin)>>1;
    7cf4:	80 91 60 04 	lds	r24, 0x0460
    7cf8:	90 91 61 04 	lds	r25, 0x0461
    7cfc:	20 91 5e 04 	lds	r18, 0x045E
    7d00:	30 91 5f 04 	lds	r19, 0x045F
    7d04:	82 0f       	add	r24, r18
    7d06:	93 1f       	adc	r25, r19
    7d08:	95 95       	asr	r25
    7d0a:	87 95       	ror	r24
    7d0c:	90 93 55 04 	sts	0x0455, r25
    7d10:	80 93 54 04 	sts	0x0454, r24
				break;
			}

		}

		setLeftSpeed(0);
    7d14:	80 e0       	ldi	r24, 0x00	; 0
    7d16:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <setLeftSpeed>
		setRightSpeed(0);
    7d1a:	80 e0       	ldi	r24, 0x00	; 0
    7d1c:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <setRightSpeed>
    7d20:	1d cc       	rjmp	.-1990   	; 0x755c <calibrateSensors+0x19a>
	accYMax = -1023;
	accYMin = 1023;
	accOffsetXSum = 0;
	accOffsetYSum = 0;

	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    7d22:	90 95       	com	r25
    7d24:	81 95       	neg	r24
    7d26:	9f 4f       	sbci	r25, 0xFF	; 255
    7d28:	b0 cb       	rjmp	.-2208   	; 0x748a <calibrateSensors+0xc8>

00007d2a <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    7d2a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7d2e:	80 91 10 02 	lds	r24, 0x0210
    7d32:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7d36:	88 23       	and	r24, r24
    7d38:	49 f4       	brne	.+18     	; 0x7d4c <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7d3a:	86 e1       	ldi	r24, 0x16	; 22
    7d3c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7d40:	85 e4       	ldi	r24, 0x45	; 69
    7d42:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7d46:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>
    7d4a:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7d4c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    7d50:	86 ea       	ldi	r24, 0xA6	; 166
    7d52:	90 e0       	ldi	r25, 0x00	; 0
    7d54:	90 93 11 02 	sts	0x0211, r25
    7d58:	80 93 10 02 	sts	0x0210, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7d5c:	86 ea       	ldi	r24, 0xA6	; 166
    7d5e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7d62:	88 23       	and	r24, r24
    7d64:	41 f5       	brne	.+80     	; 0x7db6 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7d66:	8d e2       	ldi	r24, 0x2D	; 45
    7d68:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_write(0x08);	// measurement mode
    7d6c:	88 e0       	ldi	r24, 0x08	; 8
    7d6e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7d72:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7d76:	80 91 10 02 	lds	r24, 0x0210
    7d7a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7d7e:	88 23       	and	r24, r24
    7d80:	d1 f4       	brne	.+52     	; 0x7db6 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7d82:	81 e3       	ldi	r24, 0x31	; 49
    7d84:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7d88:	80 e0       	ldi	r24, 0x00	; 0
    7d8a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7d8e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7d92:	80 91 10 02 	lds	r24, 0x0210
    7d96:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7d9a:	88 23       	and	r24, r24
    7d9c:	61 f4       	brne	.+24     	; 0x7db6 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7d9e:	8c e2       	ldi	r24, 0x2C	; 44
    7da0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7da4:	89 e0       	ldi	r24, 0x09	; 9
    7da6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7daa:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    7dae:	81 e0       	ldi	r24, 0x01	; 1
    7db0:	80 93 4b 04 	sts	0x044B, r24
    7db4:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7db6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    7dba:	82 e0       	ldi	r24, 0x02	; 2
    7dbc:	80 93 4b 04 	sts	0x044B, r24
    7dc0:	08 95       	ret

00007dc2 <readCalibrationFromFlash>:
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
}

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7dc2:	82 e0       	ldi	r24, 0x02	; 2
    7dc4:	99 e0       	ldi	r25, 0x09	; 9
    7dc6:	6c e6       	ldi	r22, 0x6C	; 108
    7dc8:	7f e0       	ldi	r23, 0x0F	; 15
    7dca:	40 e9       	ldi	r20, 0x90	; 144
    7dcc:	50 e0       	ldi	r21, 0x00	; 0
    7dce:	0e 94 50 4f 	call	0x9ea0	; 0x9ea0 <__eerd_block_m2560>
}
    7dd2:	08 95       	ret

00007dd4 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7dd4:	82 e0       	ldi	r24, 0x02	; 2
    7dd6:	99 e0       	ldi	r25, 0x09	; 9
    7dd8:	6c e6       	ldi	r22, 0x6C	; 108
    7dda:	7f e0       	ldi	r23, 0x0F	; 15
    7ddc:	40 e9       	ldi	r20, 0x90	; 144
    7dde:	50 e0       	ldi	r21, 0x00	; 0
    7de0:	0e 94 6e 4f 	call	0x9edc	; 0x9edc <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    7de4:	8a e6       	ldi	r24, 0x6A	; 106
    7de6:	9f e0       	ldi	r25, 0x0F	; 15
    7de8:	65 e5       	ldi	r22, 0x55	; 85
    7dea:	7a ea       	ldi	r23, 0xAA	; 170
    7dec:	0e 94 90 4f 	call	0x9f20	; 0x9f20 <__eeupd_word_m2560>
}
    7df0:	08 95       	ret

00007df2 <irCommInitTransmitter>:
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    7df2:	82 e0       	ldi	r24, 0x02	; 2
    7df4:	80 93 f2 04 	sts	0x04F2, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    7df8:	81 e0       	ldi	r24, 0x01	; 1
    7dfa:	80 93 f5 04 	sts	0x04F5, r24
}
    7dfe:	08 95       	ret

00007e00 <irCommInitReceiver>:

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    7e00:	81 e0       	ldi	r24, 0x01	; 1
    7e02:	80 93 f2 04 	sts	0x04F2, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    7e06:	80 93 f5 04 	sts	0x04F5, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    7e0a:	80 93 f3 04 	sts	0x04F3, r24
}
    7e0e:	08 95       	ret

00007e10 <irCommDeinit>:
	irCommInitVars();
	irCommInitReceiver();
}

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
    7e10:	10 92 f2 04 	sts	0x04F2, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    7e14:	10 92 f4 04 	sts	0x04F4, r1
}
    7e18:	08 95       	ret

00007e1a <irCommSendData>:
//	irCommTxSensorMask = sensorMask;
//	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
//}

void irCommSendData(unsigned char value) {
	irCommTxByte = value;
    7e1a:	80 93 45 05 	sts	0x0545, r24
	irCommTxByteEnqueued = 1;
    7e1e:	81 e0       	ldi	r24, 0x01	; 1
    7e20:	80 93 46 05 	sts	0x0546, r24
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
    7e24:	82 e0       	ldi	r24, 0x02	; 2
    7e26:	80 93 f3 04 	sts	0x04F3, r24
}
    7e2a:	08 95       	ret

00007e2c <irCommDataSent>:

unsigned char irCommDataSent() {
    7e2c:	90 e0       	ldi	r25, 0x00	; 0
    7e2e:	80 91 46 05 	lds	r24, 0x0546
    7e32:	81 30       	cpi	r24, 0x01	; 1
    7e34:	09 f0       	breq	.+2      	; 0x7e38 <irCommDataSent+0xc>
    7e36:	91 e0       	ldi	r25, 0x01	; 1
	if(irCommTxByteEnqueued==1) {
		return 0;
	} else {
		return 1;
	}
}
    7e38:	89 2f       	mov	r24, r25
    7e3a:	08 95       	ret

00007e3c <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    7e3c:	80 91 3a 05 	lds	r24, 0x053A
    7e40:	08 95       	ret

00007e42 <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    7e42:	10 92 3a 05 	sts	0x053A, r1
	return irCommRxLastDataReceived;
}
    7e46:	80 91 39 05 	lds	r24, 0x0539
    7e4a:	08 95       	ret

00007e4c <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    7e4c:	80 91 15 02 	lds	r24, 0x0215
    7e50:	08 95       	ret

00007e52 <getBearing>:

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    7e52:	83 30       	cpi	r24, 0x03	; 3
    7e54:	71 f1       	breq	.+92     	; 0x7eb2 <getBearing+0x60>
    7e56:	84 30       	cpi	r24, 0x04	; 4
    7e58:	60 f0       	brcs	.+24     	; 0x7e72 <getBearing+0x20>
    7e5a:	85 30       	cpi	r24, 0x05	; 5
    7e5c:	d1 f0       	breq	.+52     	; 0x7e92 <getBearing+0x40>
    7e5e:	85 30       	cpi	r24, 0x05	; 5
    7e60:	80 f0       	brcs	.+32     	; 0x7e82 <getBearing+0x30>
    7e62:	86 30       	cpi	r24, 0x06	; 6
    7e64:	f1 f0       	breq	.+60     	; 0x7ea2 <getBearing+0x50>
    7e66:	87 30       	cpi	r24, 0x07	; 7
    7e68:	c1 f0       	breq	.+48     	; 0x7e9a <getBearing+0x48>
		case 5:
			return 135;
		case 6:
			return 90;
		case 7:
			return 45;
    7e6a:	2f ef       	ldi	r18, 0xFF	; 255
    7e6c:	3f ef       	ldi	r19, 0xFF	; 255
		default:
			return -1;
	}
}
    7e6e:	c9 01       	movw	r24, r18
    7e70:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    7e72:	81 30       	cpi	r24, 0x01	; 1
    7e74:	d1 f0       	breq	.+52     	; 0x7eaa <getBearing+0x58>
    7e76:	82 30       	cpi	r24, 0x02	; 2
    7e78:	40 f0       	brcs	.+16     	; 0x7e8a <getBearing+0x38>
    7e7a:	26 ea       	ldi	r18, 0xA6	; 166
    7e7c:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e7e:	c9 01       	movw	r24, r18
    7e80:	08 95       	ret
		case 1:
			return -45;
		case 2:
			return -90;
		case 3:
			return -135;
    7e82:	24 eb       	ldi	r18, 0xB4	; 180
    7e84:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e86:	c9 01       	movw	r24, r18
    7e88:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    7e8a:	20 e0       	ldi	r18, 0x00	; 0
    7e8c:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e8e:	c9 01       	movw	r24, r18
    7e90:	08 95       	ret
		case 2:
			return -90;
		case 3:
			return -135;
		case 4:
			return 180;
    7e92:	27 e8       	ldi	r18, 0x87	; 135
    7e94:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e96:	c9 01       	movw	r24, r18
    7e98:	08 95       	ret
		case 4:
			return 180;
		case 5:
			return 135;
		case 6:
			return 90;
    7e9a:	2d e2       	ldi	r18, 0x2D	; 45
    7e9c:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e9e:	c9 01       	movw	r24, r18
    7ea0:	08 95       	ret
		case 3:
			return -135;
		case 4:
			return 180;
		case 5:
			return 135;
    7ea2:	2a e5       	ldi	r18, 0x5A	; 90
    7ea4:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7ea6:	c9 01       	movw	r24, r18
    7ea8:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    7eaa:	23 ed       	ldi	r18, 0xD3	; 211
    7eac:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7eae:	c9 01       	movw	r24, r18
    7eb0:	08 95       	ret
		case 0:
			return 0;
		case 1:
			return -45;
		case 2:
			return -90;
    7eb2:	29 e7       	ldi	r18, 0x79	; 121
    7eb4:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7eb6:	c9 01       	movw	r24, r18
    7eb8:	08 95       	ret

00007eba <resetDebugVariables>:
void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
}

void resetDebugVariables() {
    7eba:	cf 92       	push	r12
    7ebc:	df 92       	push	r13
    7ebe:	ef 92       	push	r14
    7ec0:	ff 92       	push	r15
    7ec2:	0f 93       	push	r16
    7ec4:	1f 93       	push	r17
	irCommRxMaxSensorIndexTemp=0;
    7ec6:	10 92 0f 05 	sts	0x050F, r1
	irCommRxMaxDiffIndexTemp=0;
    7eca:	10 92 10 05 	sts	0x0510, r1
	irCommMaxSensorValueCurrIndexTemp=0;
    7ece:	10 92 13 05 	sts	0x0513, r1
	irCommMinSensorValueCurrIndexTemp=0;
    7ed2:	10 92 14 05 	sts	0x0514, r1
	memset(irCommRxMaxSensorTemp, 0xFF, 4);
    7ed6:	cc 24       	eor	r12, r12
    7ed8:	ca 94       	dec	r12
    7eda:	dc 2c       	mov	r13, r12
    7edc:	76 01       	movw	r14, r12
    7ede:	c0 92 49 0b 	sts	0x0B49, r12
    7ee2:	d0 92 4a 0b 	sts	0x0B4A, r13
    7ee6:	e0 92 4b 0b 	sts	0x0B4B, r14
    7eea:	f0 92 4c 0b 	sts	0x0B4C, r15
	memset(irCommRxMaxDiffTemp, 0xFF, 4);
    7eee:	c0 92 82 0b 	sts	0x0B82, r12
    7ef2:	d0 92 83 0b 	sts	0x0B83, r13
    7ef6:	e0 92 84 0b 	sts	0x0B84, r14
    7efa:	f0 92 85 0b 	sts	0x0B85, r15
	memset(irCommMaxSensorValueCurrTemp, 0xFF, 4);
    7efe:	c0 92 58 05 	sts	0x0558, r12
    7f02:	d0 92 59 05 	sts	0x0559, r13
    7f06:	e0 92 5a 05 	sts	0x055A, r14
    7f0a:	f0 92 5b 05 	sts	0x055B, r15
	memset(irCommMinSensorValueCurrTemp, 0xFF, 4);
    7f0e:	c0 92 4d 0b 	sts	0x0B4D, r12
    7f12:	d0 92 4e 0b 	sts	0x0B4E, r13
    7f16:	e0 92 4f 0b 	sts	0x0B4F, r14
    7f1a:	f0 92 50 0b 	sts	0x0B50, r15

	irCommStateIndexTemp = 0;					
    7f1e:	10 92 1c 05 	sts	0x051C, r1
	memset(irCommStateTemp, 0xFF, 14);
    7f22:	8c e5       	ldi	r24, 0x5C	; 92
    7f24:	95 e0       	ldi	r25, 0x05	; 5
    7f26:	6f ef       	ldi	r22, 0xFF	; 255
    7f28:	70 e0       	ldi	r23, 0x00	; 0
    7f2a:	4e e0       	ldi	r20, 0x0E	; 14
    7f2c:	50 e0       	ldi	r21, 0x00	; 0
    7f2e:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <memset>

	irCommShiftCountFinalIndexTemp = 0;
    7f32:	10 92 16 05 	sts	0x0516, r1
	memset(irCommShiftCountFinalTemp, 0xFF, 2);
    7f36:	0f ef       	ldi	r16, 0xFF	; 255
    7f38:	1f ef       	ldi	r17, 0xFF	; 255
    7f3a:	10 93 56 0b 	sts	0x0B56, r17
    7f3e:	00 93 55 0b 	sts	0x0B55, r16
	irCommRxStartBitDetectedIndexTemp = 0;
    7f42:	10 92 1b 05 	sts	0x051B, r1
	memset(irCommRxStartBitDetectedTemp, 0xFF, 2);
    7f46:	10 93 96 05 	sts	0x0596, r17
    7f4a:	00 93 95 05 	sts	0x0595, r16
	irCommSwitchCountIndexTemp = 0;
    7f4e:	10 92 12 05 	sts	0x0512, r1
	memset(irCommSwitchCountTemp, 0xFF, 2);
    7f52:	10 93 72 05 	sts	0x0572, r17
    7f56:	00 93 71 05 	sts	0x0571, r16
	irCommMaxSensorSignalFiltIndexTemp = 0;
    7f5a:	10 92 0e 05 	sts	0x050E, r1
	memset(irCommMaxSensorSignalFiltTemp, 0xFF, 80);
    7f5e:	87 e9       	ldi	r24, 0x97	; 151
    7f60:	95 e0       	ldi	r25, 0x05	; 5
    7f62:	6f ef       	ldi	r22, 0xFF	; 255
    7f64:	70 e0       	ldi	r23, 0x00	; 0
    7f66:	40 e5       	ldi	r20, 0x50	; 80
    7f68:	50 e0       	ldi	r21, 0x00	; 0
    7f6a:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <memset>
	irCommMaxSensorSignalIndexTemp = 0;
    7f6e:	10 92 0d 05 	sts	0x050D, r1
	memset(irCommMaxSensorSignalTemp, 0xFF, 80);
    7f72:	8b e8       	ldi	r24, 0x8B	; 139
    7f74:	98 e0       	ldi	r25, 0x08	; 8
    7f76:	6f ef       	ldi	r22, 0xFF	; 255
    7f78:	70 e0       	ldi	r23, 0x00	; 0
    7f7a:	40 e5       	ldi	r20, 0x50	; 80
    7f7c:	50 e0       	ldi	r21, 0x00	; 0
    7f7e:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <memset>
	irCommProxMeanIndexTemp = 0;
    7f82:	10 92 11 05 	sts	0x0511, r1
	memset(irCommProxMeanTemp, 0xFF, 4);
    7f86:	c0 92 8f 05 	sts	0x058F, r12
    7f8a:	d0 92 90 05 	sts	0x0590, r13
    7f8e:	e0 92 91 05 	sts	0x0591, r14
    7f92:	f0 92 92 05 	sts	0x0592, r15
	irCommComputeShiftIndexTemp = 0;
    7f96:	10 92 18 05 	sts	0x0518, r1
	memset(irCommComputeShiftTemp, 0xFF, 2);
    7f9a:	10 93 8d 05 	sts	0x058D, r17
    7f9e:	00 93 8c 05 	sts	0x058C, r16
	irCommShiftCountIndexTemp = 0;
    7fa2:	10 92 15 05 	sts	0x0515, r1
	memset(irCommShiftCountTemp, 0xFF, 2);
    7fa6:	10 93 9c 0b 	sts	0x0B9C, r17
    7faa:	00 93 9b 0b 	sts	0x0B9B, r16
	irCommRxPeakHighToLowIndexTemp = 0;
    7fae:	10 92 19 05 	sts	0x0519, r1
	memset(irCommRxPeakHighToLowTemp, 0xFF, 2);
    7fb2:	10 93 ea 05 	sts	0x05EA, r17
    7fb6:	00 93 e9 05 	sts	0x05E9, r16
	irCommRxStartPeakDurationIndexTemp = 0;
    7fba:	10 92 1a 05 	sts	0x051A, r1
	memset(irCommRxStartPeakDurationTemp, 0xFF, 2);
    7fbe:	10 93 2c 07 	sts	0x072C, r17
    7fc2:	00 93 2b 07 	sts	0x072B, r16
	irCommStartDiffIndexTemp = 0;
    7fc6:	10 92 17 05 	sts	0x0517, r1
	memset(irCommSyncStateTemp, 0xFF, 2);
    7fca:	10 93 8b 05 	sts	0x058B, r17
    7fce:	00 93 8a 05 	sts	0x058A, r16
	irCommSyncStateIndexTemp = 0;
    7fd2:	10 92 1d 05 	sts	0x051D, r1
	memset(irCommBitsSignalTemp, 0xFF, 400);
    7fd6:	87 eb       	ldi	r24, 0xB7	; 183
    7fd8:	99 e0       	ldi	r25, 0x09	; 9
    7fda:	6f ef       	ldi	r22, 0xFF	; 255
    7fdc:	70 e0       	ldi	r23, 0x00	; 0
    7fde:	40 e9       	ldi	r20, 0x90	; 144
    7fe0:	51 e0       	ldi	r21, 0x01	; 1
    7fe2:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <memset>
	irCommBitsSignalIndexTemp = 0;
    7fe6:	10 92 1e 05 	sts	0x051E, r1
	memset(irCommRxBitReceivedTemp, 0xFF, 10);
    7fea:	8f e7       	ldi	r24, 0x7F	; 127
    7fec:	98 e0       	ldi	r25, 0x08	; 8
    7fee:	6f ef       	ldi	r22, 0xFF	; 255
    7ff0:	70 e0       	ldi	r23, 0x00	; 0
    7ff2:	4a e0       	ldi	r20, 0x0A	; 10
    7ff4:	50 e0       	ldi	r21, 0x00	; 0
    7ff6:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <memset>
	irCommRxBitReceivedIndexTemp = 0;
    7ffa:	10 92 1f 05 	sts	0x051F, r1
	
	
}
    7ffe:	1f 91       	pop	r17
    8000:	0f 91       	pop	r16
    8002:	ff 90       	pop	r15
    8004:	ef 90       	pop	r14
    8006:	df 90       	pop	r13
    8008:	cf 90       	pop	r12
    800a:	08 95       	ret

0000800c <irCommTasks>:

void irCommTasks() {
    800c:	2f 92       	push	r2
    800e:	3f 92       	push	r3
    8010:	4f 92       	push	r4
    8012:	5f 92       	push	r5
    8014:	6f 92       	push	r6
    8016:	7f 92       	push	r7
    8018:	8f 92       	push	r8
    801a:	9f 92       	push	r9
    801c:	af 92       	push	r10
    801e:	bf 92       	push	r11
    8020:	cf 92       	push	r12
    8022:	df 92       	push	r13
    8024:	ef 92       	push	r14
    8026:	ff 92       	push	r15
    8028:	0f 93       	push	r16
    802a:	1f 93       	push	r17
    802c:	cf 93       	push	r28
    802e:	df 93       	push	r29
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    8030:	00 91 f4 04 	lds	r16, 0x04F4
    8034:	01 30       	cpi	r16, 0x01	; 1
    8036:	09 f4       	brne	.+2      	; 0x803a <irCommTasks+0x2e>
    8038:	d2 c0       	rjmp	.+420    	; 0x81de <irCommTasks+0x1d2>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    803a:	02 30       	cpi	r16, 0x02	; 2
    803c:	99 f0       	breq	.+38     	; 0x8064 <irCommTasks+0x58>

		}

	}

}
    803e:	df 91       	pop	r29
    8040:	cf 91       	pop	r28
    8042:	1f 91       	pop	r17
    8044:	0f 91       	pop	r16
    8046:	ff 90       	pop	r15
    8048:	ef 90       	pop	r14
    804a:	df 90       	pop	r13
    804c:	cf 90       	pop	r12
    804e:	bf 90       	pop	r11
    8050:	af 90       	pop	r10
    8052:	9f 90       	pop	r9
    8054:	8f 90       	pop	r8
    8056:	7f 90       	pop	r7
    8058:	6f 90       	pop	r6
    805a:	5f 90       	pop	r5
    805c:	4f 90       	pop	r4
    805e:	3f 90       	pop	r3
    8060:	2f 90       	pop	r2
    8062:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    8064:	80 91 f5 04 	lds	r24, 0x04F5
    8068:	82 30       	cpi	r24, 0x02	; 2
    806a:	09 f4       	brne	.+2      	; 0x806e <irCommTasks+0x62>
    806c:	68 c3       	rjmp	.+1744   	; 0x873e <irCommTasks+0x732>
    806e:	85 30       	cpi	r24, 0x05	; 5
    8070:	31 f7       	brne	.-52     	; 0x803e <irCommTasks+0x32>
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:				
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    8072:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    8076:	20 91 fd 04 	lds	r18, 0x04FD
    807a:	30 91 fe 04 	lds	r19, 0x04FE
    807e:	40 91 ff 04 	lds	r20, 0x04FF
    8082:	50 91 00 05 	lds	r21, 0x0500
    8086:	62 1b       	sub	r22, r18
    8088:	73 0b       	sbc	r23, r19
    808a:	84 0b       	sbc	r24, r20
    808c:	95 0b       	sbc	r25, r21
    808e:	60 93 f9 04 	sts	0x04F9, r22
    8092:	70 93 fa 04 	sts	0x04FA, r23
    8096:	80 93 fb 04 	sts	0x04FB, r24
    809a:	90 93 fc 04 	sts	0x04FC, r25
				irCommTickCounter2 = getTime100MicroSec();
    809e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    80a2:	60 93 fd 04 	sts	0x04FD, r22
    80a6:	70 93 fe 04 	sts	0x04FE, r23
    80aa:	80 93 ff 04 	sts	0x04FF, r24
    80ae:	90 93 00 05 	sts	0x0500, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
    80b2:	00 93 74 05 	sts	0x0574, r16
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
    80b6:	83 e0       	ldi	r24, 0x03	; 3
    80b8:	80 93 75 05 	sts	0x0575, r24
				irCommTxCrc = 0;
    80bc:	10 92 4b 05 	sts	0x054B, r1
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    80c0:	30 91 45 05 	lds	r19, 0x0545
    80c4:	83 2f       	mov	r24, r19
    80c6:	90 e0       	ldi	r25, 0x00	; 0
    80c8:	81 70       	andi	r24, 0x01	; 1
    80ca:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    80cc:	80 93 7d 05 	sts	0x057D, r24
					if(irCommTempValue==1) {
    80d0:	01 97       	sbiw	r24, 0x01	; 1
    80d2:	09 f4       	brne	.+2      	; 0x80d6 <irCommTasks+0xca>
    80d4:	82 c7       	rjmp	.+3844   	; 0x8fda <irCommTasks+0xfce>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    80d6:	83 2f       	mov	r24, r19
    80d8:	90 e0       	ldi	r25, 0x00	; 0
    80da:	95 95       	asr	r25
    80dc:	87 95       	ror	r24
    80de:	81 70       	andi	r24, 0x01	; 1
    80e0:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    80e2:	80 93 7c 05 	sts	0x057C, r24
					if(irCommTempValue==1) {
    80e6:	01 97       	sbiw	r24, 0x01	; 1
    80e8:	09 f4       	brne	.+2      	; 0x80ec <irCommTasks+0xe0>
    80ea:	73 c7       	rjmp	.+3814   	; 0x8fd2 <irCommTasks+0xfc6>
    80ec:	20 91 4b 05 	lds	r18, 0x054B
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    80f0:	83 2f       	mov	r24, r19
    80f2:	90 e0       	ldi	r25, 0x00	; 0
    80f4:	95 95       	asr	r25
    80f6:	87 95       	ror	r24
    80f8:	95 95       	asr	r25
    80fa:	87 95       	ror	r24
    80fc:	81 70       	andi	r24, 0x01	; 1
    80fe:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8100:	80 93 7b 05 	sts	0x057B, r24
					if(irCommTempValue==1) {
    8104:	01 97       	sbiw	r24, 0x01	; 1
    8106:	09 f4       	brne	.+2      	; 0x810a <irCommTasks+0xfe>
    8108:	62 c7       	rjmp	.+3780   	; 0x8fce <irCommTasks+0xfc2>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    810a:	83 2f       	mov	r24, r19
    810c:	90 e0       	ldi	r25, 0x00	; 0
    810e:	95 95       	asr	r25
    8110:	87 95       	ror	r24
    8112:	95 95       	asr	r25
    8114:	87 95       	ror	r24
    8116:	95 95       	asr	r25
    8118:	87 95       	ror	r24
    811a:	81 70       	andi	r24, 0x01	; 1
    811c:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    811e:	80 93 7a 05 	sts	0x057A, r24
					if(irCommTempValue==1) {
    8122:	01 97       	sbiw	r24, 0x01	; 1
    8124:	09 f4       	brne	.+2      	; 0x8128 <irCommTasks+0x11c>
    8126:	51 c7       	rjmp	.+3746   	; 0x8fca <irCommTasks+0xfbe>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8128:	83 2f       	mov	r24, r19
    812a:	90 e0       	ldi	r25, 0x00	; 0
    812c:	95 95       	asr	r25
    812e:	87 95       	ror	r24
    8130:	95 95       	asr	r25
    8132:	87 95       	ror	r24
    8134:	95 95       	asr	r25
    8136:	87 95       	ror	r24
    8138:	95 95       	asr	r25
    813a:	87 95       	ror	r24
    813c:	81 70       	andi	r24, 0x01	; 1
    813e:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8140:	80 93 79 05 	sts	0x0579, r24
					if(irCommTempValue==1) {
    8144:	01 97       	sbiw	r24, 0x01	; 1
    8146:	09 f4       	brne	.+2      	; 0x814a <irCommTasks+0x13e>
    8148:	3e c7       	rjmp	.+3708   	; 0x8fc6 <irCommTasks+0xfba>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    814a:	83 2f       	mov	r24, r19
    814c:	90 e0       	ldi	r25, 0x00	; 0
    814e:	95 95       	asr	r25
    8150:	87 95       	ror	r24
    8152:	95 95       	asr	r25
    8154:	87 95       	ror	r24
    8156:	95 95       	asr	r25
    8158:	87 95       	ror	r24
    815a:	95 95       	asr	r25
    815c:	87 95       	ror	r24
    815e:	95 95       	asr	r25
    8160:	87 95       	ror	r24
    8162:	81 70       	andi	r24, 0x01	; 1
    8164:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8166:	80 93 78 05 	sts	0x0578, r24
					if(irCommTempValue==1) {
    816a:	01 97       	sbiw	r24, 0x01	; 1
    816c:	09 f4       	brne	.+2      	; 0x8170 <irCommTasks+0x164>
    816e:	29 c7       	rjmp	.+3666   	; 0x8fc2 <irCommTasks+0xfb6>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8170:	83 2f       	mov	r24, r19
    8172:	90 e0       	ldi	r25, 0x00	; 0
    8174:	08 2e       	mov	r0, r24
    8176:	89 2f       	mov	r24, r25
    8178:	00 0c       	add	r0, r0
    817a:	88 1f       	adc	r24, r24
    817c:	99 0b       	sbc	r25, r25
    817e:	00 0c       	add	r0, r0
    8180:	88 1f       	adc	r24, r24
    8182:	99 1f       	adc	r25, r25
    8184:	81 70       	andi	r24, 0x01	; 1
    8186:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8188:	80 93 77 05 	sts	0x0577, r24
					if(irCommTempValue==1) {
    818c:	01 97       	sbiw	r24, 0x01	; 1
    818e:	09 f4       	brne	.+2      	; 0x8192 <irCommTasks+0x186>
    8190:	16 c7       	rjmp	.+3628   	; 0x8fbe <irCommTasks+0xfb2>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8192:	83 2f       	mov	r24, r19
    8194:	90 e0       	ldi	r25, 0x00	; 0
    8196:	88 0f       	add	r24, r24
    8198:	89 2f       	mov	r24, r25
    819a:	88 1f       	adc	r24, r24
    819c:	99 0b       	sbc	r25, r25
    819e:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    81a0:	80 93 76 05 	sts	0x0576, r24
					if(irCommTempValue==1) {
    81a4:	81 30       	cpi	r24, 0x01	; 1
    81a6:	91 05       	cpc	r25, r1
    81a8:	09 f4       	brne	.+2      	; 0x81ac <irCommTasks+0x1a0>
    81aa:	07 c7       	rjmp	.+3598   	; 0x8fba <irCommTasks+0xfae>
						irCommTxCrc++;
    81ac:	90 93 f7 04 	sts	0x04F7, r25
    81b0:	80 93 f6 04 	sts	0x04F6, r24
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
				irCommTxCrc = 4 - irCommTxCrc;
    81b4:	23 70       	andi	r18, 0x03	; 3
    81b6:	84 e0       	ldi	r24, 0x04	; 4
    81b8:	82 1b       	sub	r24, r18
    81ba:	80 93 4b 05 	sts	0x054B, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    81be:	98 2f       	mov	r25, r24
    81c0:	96 95       	lsr	r25
    81c2:	91 70       	andi	r25, 0x01	; 1
    81c4:	90 93 7e 05 	sts	0x057E, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    81c8:	81 70       	andi	r24, 0x01	; 1
    81ca:	80 93 7f 05 	sts	0x057F, r24
				irCommTxBitCount = 0;							
    81ce:	10 92 4c 05 	sts	0x054C, r1
				irCommTxPulseState = 0;	
    81d2:	10 92 4d 05 	sts	0x054D, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    81d6:	82 e0       	ldi	r24, 0x02	; 2
    81d8:	80 93 f5 04 	sts	0x04F5, r24
    81dc:	30 cf       	rjmp	.-416    	; 0x803e <irCommTasks+0x32>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    81de:	10 91 f5 04 	lds	r17, 0x04F5
    81e2:	13 30       	cpi	r17, 0x03	; 3
    81e4:	09 f4       	brne	.+2      	; 0x81e8 <irCommTasks+0x1dc>
    81e6:	ca c4       	rjmp	.+2452   	; 0x8b7c <irCommTasks+0xb70>
    81e8:	14 30       	cpi	r17, 0x04	; 4
    81ea:	08 f4       	brcc	.+2      	; 0x81ee <irCommTasks+0x1e2>
    81ec:	af c0       	rjmp	.+350    	; 0x834c <irCommTasks+0x340>
    81ee:	17 30       	cpi	r17, 0x07	; 7
    81f0:	09 f4       	brne	.+2      	; 0x81f4 <irCommTasks+0x1e8>
    81f2:	74 c4       	rjmp	.+2280   	; 0x8adc <irCommTasks+0xad0>
    81f4:	18 30       	cpi	r17, 0x08	; 8
    81f6:	09 f4       	brne	.+2      	; 0x81fa <irCommTasks+0x1ee>
    81f8:	dc c2       	rjmp	.+1464   	; 0x87b2 <irCommTasks+0x7a6>
    81fa:	16 30       	cpi	r17, 0x06	; 6
    81fc:	09 f0       	breq	.+2      	; 0x8200 <irCommTasks+0x1f4>
    81fe:	1f cf       	rjmp	.-450    	; 0x803e <irCommTasks+0x32>
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
    8200:	80 e0       	ldi	r24, 0x00	; 0
    8202:	94 e0       	ldi	r25, 0x04	; 4
    8204:	90 93 2b 05 	sts	0x052B, r25
    8208:	80 93 2a 05 	sts	0x052A, r24
				irCommTempMax = 0;
    820c:	10 92 29 05 	sts	0x0529, r1
    8210:	10 92 28 05 	sts	0x0528, r1
    8214:	80 91 41 05 	lds	r24, 0x0541
    8218:	90 91 42 05 	lds	r25, 0x0542
    821c:	88 0f       	add	r24, r24
    821e:	99 1f       	adc	r25, r25
    8220:	c0 91 6d 08 	lds	r28, 0x086D
    8224:	d0 91 6e 08 	lds	r29, 0x086E
    8228:	c8 0f       	add	r28, r24
    822a:	d9 1f       	adc	r29, r25
    822c:	b9 e5       	ldi	r27, 0x59	; 89
    822e:	cb 2e       	mov	r12, r27
    8230:	bb e0       	ldi	r27, 0x0B	; 11
    8232:	db 2e       	mov	r13, r27
    8234:	f6 01       	movw	r30, r12
    8236:	ee 24       	eor	r14, r14
    8238:	ff 24       	eor	r15, r15
    823a:	87 01       	movw	r16, r14
    823c:	60 e0       	ldi	r22, 0x00	; 0
    823e:	74 e0       	ldi	r23, 0x04	; 4
    8240:	40 e0       	ldi	r20, 0x00	; 0
    8242:	50 e0       	ldi	r21, 0x00	; 0
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    8244:	28 81       	ld	r18, Y
    8246:	39 81       	ldd	r19, Y+1	; 0x01
    8248:	31 83       	std	Z+1, r19	; 0x01
    824a:	20 83       	st	Z, r18
					irCommProxSum += irCommMaxSensorSignal[i];
    824c:	c9 01       	movw	r24, r18
    824e:	aa 27       	eor	r26, r26
    8250:	97 fd       	sbrc	r25, 7
    8252:	a0 95       	com	r26
    8254:	ba 2f       	mov	r27, r26
    8256:	e8 0e       	add	r14, r24
    8258:	f9 1e       	adc	r15, r25
    825a:	0a 1f       	adc	r16, r26
    825c:	1b 1f       	adc	r17, r27
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
    825e:	26 17       	cp	r18, r22
    8260:	37 07       	cpc	r19, r23
    8262:	2c f4       	brge	.+10     	; 0x826e <irCommTasks+0x262>
						irCommTempMin = irCommMaxSensorSignal[i];
    8264:	30 93 2b 05 	sts	0x052B, r19
    8268:	20 93 2a 05 	sts	0x052A, r18
    826c:	b9 01       	movw	r22, r18
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
    826e:	42 17       	cp	r20, r18
    8270:	53 07       	cpc	r21, r19
    8272:	2c f4       	brge	.+10     	; 0x827e <irCommTasks+0x272>
						irCommTempMax = irCommMaxSensorSignal[i];
    8274:	30 93 29 05 	sts	0x0529, r19
    8278:	20 93 28 05 	sts	0x0528, r18
    827c:	a9 01       	movw	r20, r18
    827e:	60 96       	adiw	r28, 0x10	; 16
    8280:	32 96       	adiw	r30, 0x02	; 2
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8282:	9b e0       	ldi	r25, 0x0B	; 11
    8284:	e1 38       	cpi	r30, 0x81	; 129
    8286:	f9 07       	cpc	r31, r25
    8288:	e9 f6       	brne	.-70     	; 0x8244 <irCommTasks+0x238>
    828a:	e0 92 24 05 	sts	0x0524, r14
    828e:	f0 92 25 05 	sts	0x0525, r15
    8292:	00 93 26 05 	sts	0x0526, r16
    8296:	10 93 27 05 	sts	0x0527, r17
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
    829a:	46 1b       	sub	r20, r22
    829c:	57 0b       	sbc	r21, r23
    829e:	40 35       	cpi	r20, 0x50	; 80
    82a0:	51 05       	cpc	r21, r1
    82a2:	0c f4       	brge	.+2      	; 0x82a6 <irCommTasks+0x29a>
    82a4:	38 c6       	rjmp	.+3184   	; 0x8f16 <irCommTasks+0xf0a>

					resetDebugVariables();
					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    82a6:	b7 01       	movw	r22, r14
    82a8:	c8 01       	movw	r24, r16
    82aa:	24 e1       	ldi	r18, 0x14	; 20
    82ac:	30 e0       	ldi	r19, 0x00	; 0
    82ae:	40 e0       	ldi	r20, 0x00	; 0
    82b0:	50 e0       	ldi	r21, 0x00	; 0
    82b2:	0e 94 a1 4e 	call	0x9d42	; 0x9d42 <__divmodsi4>
    82b6:	a9 01       	movw	r20, r18
    82b8:	30 93 2f 05 	sts	0x052F, r19
    82bc:	20 93 2e 05 	sts	0x052E, r18
    82c0:	30 91 1e 05 	lds	r19, 0x051E

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
    82c4:	67 ec       	ldi	r22, 0xC7	; 199
    82c6:	d6 01       	movw	r26, r12
    82c8:	8d 91       	ld	r24, X+
    82ca:	9c 91       	ld	r25, X
    82cc:	11 97       	sbiw	r26, 0x01	; 1
    82ce:	84 1b       	sub	r24, r20
    82d0:	95 0b       	sbc	r25, r21
    82d2:	8d 93       	st	X+, r24
    82d4:	9c 93       	st	X, r25
    82d6:	27 ec       	ldi	r18, 0xC7	; 199
    82d8:	36 17       	cp	r19, r22
    82da:	08 f4       	brcc	.+2      	; 0x82de <irCommTasks+0x2d2>
    82dc:	23 2f       	mov	r18, r19

					if(irCommBitsSignalIndexTemp>199) {
						irCommBitsSignalIndexTemp = 199;
						//updateRedLed(0);
					}
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
    82de:	e2 2f       	mov	r30, r18
    82e0:	f0 e0       	ldi	r31, 0x00	; 0
    82e2:	ee 0f       	add	r30, r30
    82e4:	ff 1f       	adc	r31, r31
    82e6:	e9 54       	subi	r30, 0x49	; 73
    82e8:	f6 4f       	sbci	r31, 0xF6	; 246
    82ea:	91 83       	std	Z+1, r25	; 0x01
    82ec:	80 83       	st	Z, r24
					irCommBitsSignalIndexTemp++;
    82ee:	32 2f       	mov	r19, r18
    82f0:	3f 5f       	subi	r19, 0xFF	; 255
    82f2:	e2 e0       	ldi	r30, 0x02	; 2
    82f4:	f0 e0       	ldi	r31, 0x00	; 0
    82f6:	ce 0e       	add	r12, r30
    82f8:	df 1e       	adc	r13, r31
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    82fa:	f1 e8       	ldi	r31, 0x81	; 129
    82fc:	cf 16       	cp	r12, r31
    82fe:	fb e0       	ldi	r31, 0x0B	; 11
    8300:	df 06       	cpc	r13, r31
    8302:	09 f7       	brne	.-62     	; 0x82c6 <irCommTasks+0x2ba>
    8304:	30 93 1e 05 	sts	0x051E, r19
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommBitsSignalIndexTemp++;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    8308:	80 91 59 0b 	lds	r24, 0x0B59
    830c:	90 91 5a 0b 	lds	r25, 0x0B5A
    8310:	18 16       	cp	r1, r24
    8312:	19 06       	cpc	r1, r25
    8314:	0c f0       	brlt	.+2      	; 0x8318 <irCommTasks+0x30c>
    8316:	07 c7       	rjmp	.+3598   	; 0x9126 <irCommTasks+0x111a>
					irCommSignalState = 1;
    8318:	81 e0       	ldi	r24, 0x01	; 1
    831a:	80 93 30 05 	sts	0x0530, r24
    831e:	28 2f       	mov	r18, r24
				} else {
					irCommSignalState = -1;
    8320:	eb e5       	ldi	r30, 0x5B	; 91
    8322:	fb e0       	ldi	r31, 0x0B	; 11
    8324:	30 e0       	ldi	r19, 0x00	; 0
    8326:	08 c0       	rjmp	.+16     	; 0x8338 <irCommTasks+0x32c>
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    8328:	27 fd       	sbrc	r18, 7
    832a:	40 c2       	rjmp	.+1152   	; 0x87ac <irCommTasks+0x7a0>
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
							irCommSwitchCount++;
    832c:	32 96       	adiw	r30, 0x02	; 2
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    832e:	8b e0       	ldi	r24, 0x0B	; 11
    8330:	e1 38       	cpi	r30, 0x81	; 129
    8332:	f8 07       	cpc	r31, r24
    8334:	09 f4       	brne	.+2      	; 0x8338 <irCommTasks+0x32c>
    8336:	fe c5       	rjmp	.+3068   	; 0x8f34 <irCommTasks+0xf28>
					if(irCommMaxSensorSignal[i] > 0) {
    8338:	80 81       	ld	r24, Z
    833a:	91 81       	ldd	r25, Z+1	; 0x01
    833c:	18 16       	cp	r1, r24
    833e:	19 06       	cpc	r1, r25
    8340:	9c f3       	brlt	.-26     	; 0x8328 <irCommTasks+0x31c>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    8342:	12 16       	cp	r1, r18
    8344:	9c f7       	brge	.-26     	; 0x832c <irCommTasks+0x320>
							irCommSignalState = -1;
							irCommSwitchCount++;
    8346:	3f 5f       	subi	r19, 0xFF	; 255
    8348:	2f ef       	ldi	r18, 0xFF	; 255
    834a:	f0 cf       	rjmp	.-32     	; 0x832c <irCommTasks+0x320>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    834c:	11 30       	cpi	r17, 0x01	; 1
    834e:	09 f4       	brne	.+2      	; 0x8352 <irCommTasks+0x346>
    8350:	ef c3       	rjmp	.+2014   	; 0x8b30 <irCommTasks+0xb24>
    8352:	12 30       	cpi	r17, 0x02	; 2
    8354:	09 f0       	breq	.+2      	; 0x8358 <irCommTasks+0x34c>
    8356:	73 ce       	rjmp	.-794    	; 0x803e <irCommTasks+0x32>
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8358:	c0 91 6a 05 	lds	r28, 0x056A
    835c:	d0 91 6b 05 	lds	r29, 0x056B
    8360:	60 91 56 05 	lds	r22, 0x0556
    8364:	70 91 57 05 	lds	r23, 0x0557
    8368:	88 81       	ld	r24, Y
    836a:	99 81       	ldd	r25, Y+1	; 0x01
    836c:	db 01       	movw	r26, r22
    836e:	2d 91       	ld	r18, X+
    8370:	3c 91       	ld	r19, X
    8372:	82 1b       	sub	r24, r18
    8374:	93 0b       	sbc	r25, r19
    8376:	80 35       	cpi	r24, 0x50	; 80
    8378:	91 05       	cpc	r25, r1
    837a:	0c f0       	brlt	.+2      	; 0x837e <irCommTasks+0x372>
    837c:	3c c6       	rjmp	.+3192   	; 0x8ff6 <irCommTasks+0xfea>
    837e:	40 91 43 05 	lds	r20, 0x0543
    8382:	8a 81       	ldd	r24, Y+2	; 0x02
    8384:	9b 81       	ldd	r25, Y+3	; 0x03
    8386:	fb 01       	movw	r30, r22
    8388:	22 81       	ldd	r18, Z+2	; 0x02
    838a:	33 81       	ldd	r19, Z+3	; 0x03
    838c:	82 1b       	sub	r24, r18
    838e:	93 0b       	sbc	r25, r19
    8390:	80 35       	cpi	r24, 0x50	; 80
    8392:	91 05       	cpc	r25, r1
    8394:	1c f0       	brlt	.+6      	; 0x839c <irCommTasks+0x390>
						irCommRxNumReceivingSensors++;
    8396:	4f 5f       	subi	r20, 0xFF	; 255
    8398:	40 93 43 05 	sts	0x0543, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    839c:	8c 81       	ldd	r24, Y+4	; 0x04
    839e:	9d 81       	ldd	r25, Y+5	; 0x05
    83a0:	db 01       	movw	r26, r22
    83a2:	14 96       	adiw	r26, 0x04	; 4
    83a4:	2d 91       	ld	r18, X+
    83a6:	3c 91       	ld	r19, X
    83a8:	15 97       	sbiw	r26, 0x05	; 5
    83aa:	82 1b       	sub	r24, r18
    83ac:	93 0b       	sbc	r25, r19
    83ae:	80 35       	cpi	r24, 0x50	; 80
    83b0:	91 05       	cpc	r25, r1
    83b2:	1c f0       	brlt	.+6      	; 0x83ba <irCommTasks+0x3ae>
						irCommRxNumReceivingSensors++;
    83b4:	4f 5f       	subi	r20, 0xFF	; 255
    83b6:	40 93 43 05 	sts	0x0543, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    83ba:	8e 81       	ldd	r24, Y+6	; 0x06
    83bc:	9f 81       	ldd	r25, Y+7	; 0x07
    83be:	fb 01       	movw	r30, r22
    83c0:	26 81       	ldd	r18, Z+6	; 0x06
    83c2:	37 81       	ldd	r19, Z+7	; 0x07
    83c4:	82 1b       	sub	r24, r18
    83c6:	93 0b       	sbc	r25, r19
    83c8:	80 35       	cpi	r24, 0x50	; 80
    83ca:	91 05       	cpc	r25, r1
    83cc:	1c f0       	brlt	.+6      	; 0x83d4 <irCommTasks+0x3c8>
						irCommRxNumReceivingSensors++;
    83ce:	4f 5f       	subi	r20, 0xFF	; 255
    83d0:	40 93 43 05 	sts	0x0543, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    83d4:	88 85       	ldd	r24, Y+8	; 0x08
    83d6:	99 85       	ldd	r25, Y+9	; 0x09
    83d8:	db 01       	movw	r26, r22
    83da:	18 96       	adiw	r26, 0x08	; 8
    83dc:	2d 91       	ld	r18, X+
    83de:	3c 91       	ld	r19, X
    83e0:	19 97       	sbiw	r26, 0x09	; 9
    83e2:	82 1b       	sub	r24, r18
    83e4:	93 0b       	sbc	r25, r19
    83e6:	80 35       	cpi	r24, 0x50	; 80
    83e8:	91 05       	cpc	r25, r1
    83ea:	1c f0       	brlt	.+6      	; 0x83f2 <irCommTasks+0x3e6>
						irCommRxNumReceivingSensors++;
    83ec:	4f 5f       	subi	r20, 0xFF	; 255
    83ee:	40 93 43 05 	sts	0x0543, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    83f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    83f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    83f6:	fb 01       	movw	r30, r22
    83f8:	22 85       	ldd	r18, Z+10	; 0x0a
    83fa:	33 85       	ldd	r19, Z+11	; 0x0b
    83fc:	82 1b       	sub	r24, r18
    83fe:	93 0b       	sbc	r25, r19
    8400:	80 35       	cpi	r24, 0x50	; 80
    8402:	91 05       	cpc	r25, r1
    8404:	1c f0       	brlt	.+6      	; 0x840c <irCommTasks+0x400>
						irCommRxNumReceivingSensors++;
    8406:	4f 5f       	subi	r20, 0xFF	; 255
    8408:	40 93 43 05 	sts	0x0543, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    840c:	8c 85       	ldd	r24, Y+12	; 0x0c
    840e:	9d 85       	ldd	r25, Y+13	; 0x0d
    8410:	db 01       	movw	r26, r22
    8412:	1c 96       	adiw	r26, 0x0c	; 12
    8414:	2d 91       	ld	r18, X+
    8416:	3c 91       	ld	r19, X
    8418:	1d 97       	sbiw	r26, 0x0d	; 13
    841a:	82 1b       	sub	r24, r18
    841c:	93 0b       	sbc	r25, r19
    841e:	80 35       	cpi	r24, 0x50	; 80
    8420:	91 05       	cpc	r25, r1
    8422:	1c f0       	brlt	.+6      	; 0x842a <irCommTasks+0x41e>
						irCommRxNumReceivingSensors++;
    8424:	4f 5f       	subi	r20, 0xFF	; 255
    8426:	40 93 43 05 	sts	0x0543, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    842a:	8e 85       	ldd	r24, Y+14	; 0x0e
    842c:	9f 85       	ldd	r25, Y+15	; 0x0f
    842e:	fb 01       	movw	r30, r22
    8430:	26 85       	ldd	r18, Z+14	; 0x0e
    8432:	37 85       	ldd	r19, Z+15	; 0x0f
    8434:	82 1b       	sub	r24, r18
    8436:	93 0b       	sbc	r25, r19
    8438:	80 35       	cpi	r24, 0x50	; 80
    843a:	91 05       	cpc	r25, r1
    843c:	1c f0       	brlt	.+6      	; 0x8444 <irCommTasks+0x438>
						irCommRxNumReceivingSensors++;
    843e:	4f 5f       	subi	r20, 0xFF	; 255
    8440:	40 93 43 05 	sts	0x0543, r20
					}					
				}
				if(irCommRxNumReceivingSensors==0) {
    8444:	44 23       	and	r20, r20
    8446:	09 f4       	brne	.+2      	; 0x844a <irCommTasks+0x43e>
    8448:	10 c6       	rjmp	.+3104   	; 0x906a <irCommTasks+0x105e>
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
					}
				} else {
					if(irCommRxStartBitDetected==0) {
    844a:	80 91 3c 05 	lds	r24, 0x053C
    844e:	88 23       	and	r24, r24
    8450:	09 f0       	breq	.+2      	; 0x8454 <irCommTasks+0x448>
    8452:	f4 c5       	rjmp	.+3048   	; 0x903c <irCommTasks+0x1030>
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
    8454:	80 91 41 05 	lds	r24, 0x0541
    8458:	90 91 42 05 	lds	r25, 0x0542
    845c:	87 30       	cpi	r24, 0x07	; 7
    845e:	91 05       	cpc	r25, r1
    8460:	0c f0       	brlt	.+2      	; 0x8464 <irCommTasks+0x458>
    8462:	9f c6       	rjmp	.+3390   	; 0x91a2 <irCommTasks+0x1196>
							irCommRxMaxSensor++;
    8464:	01 96       	adiw	r24, 0x01	; 1
    8466:	90 93 42 05 	sts	0x0542, r25
    846a:	80 93 41 05 	sts	0x0541, r24
    846e:	ac 01       	movw	r20, r24
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8470:	fa 01       	movw	r30, r20
    8472:	ee 0f       	add	r30, r30
    8474:	ff 1f       	adc	r31, r31
    8476:	de 01       	movw	r26, r28
    8478:	ae 0f       	add	r26, r30
    847a:	bf 1f       	adc	r27, r31
    847c:	e6 0f       	add	r30, r22
    847e:	f7 1f       	adc	r31, r23
    8480:	0d 90       	ld	r0, X+
    8482:	bc 91       	ld	r27, X
    8484:	a0 2d       	mov	r26, r0
    8486:	80 81       	ld	r24, Z
    8488:	91 81       	ldd	r25, Z+1	; 0x01
    848a:	a8 1b       	sub	r26, r24
    848c:	b9 0b       	sbc	r27, r25
    848e:	a0 35       	cpi	r26, 0x50	; 80
    8490:	b1 05       	cpc	r27, r1
    8492:	0c f0       	brlt	.+2      	; 0x8496 <irCommTasks+0x48a>
    8494:	6f c7       	rjmp	.+3806   	; 0x9374 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    8496:	47 30       	cpi	r20, 0x07	; 7
    8498:	51 05       	cpc	r21, r1
    849a:	0c f4       	brge	.+2      	; 0x849e <irCommTasks+0x492>
    849c:	a1 c6       	rjmp	.+3394   	; 0x91e0 <irCommTasks+0x11d4>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    849e:	10 92 42 05 	sts	0x0542, r1
    84a2:	10 92 41 05 	sts	0x0541, r1
    84a6:	40 91 41 05 	lds	r20, 0x0541
    84aa:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    84ae:	fa 01       	movw	r30, r20
    84b0:	ee 0f       	add	r30, r30
    84b2:	ff 1f       	adc	r31, r31
    84b4:	de 01       	movw	r26, r28
    84b6:	ae 0f       	add	r26, r30
    84b8:	bf 1f       	adc	r27, r31
    84ba:	e6 0f       	add	r30, r22
    84bc:	f7 1f       	adc	r31, r23
    84be:	0d 90       	ld	r0, X+
    84c0:	bc 91       	ld	r27, X
    84c2:	a0 2d       	mov	r26, r0
    84c4:	80 81       	ld	r24, Z
    84c6:	91 81       	ldd	r25, Z+1	; 0x01
    84c8:	a8 1b       	sub	r26, r24
    84ca:	b9 0b       	sbc	r27, r25
    84cc:	a0 35       	cpi	r26, 0x50	; 80
    84ce:	b1 05       	cpc	r27, r1
    84d0:	0c f0       	brlt	.+2      	; 0x84d4 <irCommTasks+0x4c8>
    84d2:	50 c7       	rjmp	.+3744   	; 0x9374 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    84d4:	47 30       	cpi	r20, 0x07	; 7
    84d6:	51 05       	cpc	r21, r1
    84d8:	0c f4       	brge	.+2      	; 0x84dc <irCommTasks+0x4d0>
    84da:	7b c6       	rjmp	.+3318   	; 0x91d2 <irCommTasks+0x11c6>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    84dc:	10 92 42 05 	sts	0x0542, r1
    84e0:	10 92 41 05 	sts	0x0541, r1
    84e4:	40 91 41 05 	lds	r20, 0x0541
    84e8:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    84ec:	fa 01       	movw	r30, r20
    84ee:	ee 0f       	add	r30, r30
    84f0:	ff 1f       	adc	r31, r31
    84f2:	de 01       	movw	r26, r28
    84f4:	ae 0f       	add	r26, r30
    84f6:	bf 1f       	adc	r27, r31
    84f8:	e6 0f       	add	r30, r22
    84fa:	f7 1f       	adc	r31, r23
    84fc:	0d 90       	ld	r0, X+
    84fe:	bc 91       	ld	r27, X
    8500:	a0 2d       	mov	r26, r0
    8502:	80 81       	ld	r24, Z
    8504:	91 81       	ldd	r25, Z+1	; 0x01
    8506:	a8 1b       	sub	r26, r24
    8508:	b9 0b       	sbc	r27, r25
    850a:	a0 35       	cpi	r26, 0x50	; 80
    850c:	b1 05       	cpc	r27, r1
    850e:	0c f0       	brlt	.+2      	; 0x8512 <irCommTasks+0x506>
    8510:	31 c7       	rjmp	.+3682   	; 0x9374 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    8512:	47 30       	cpi	r20, 0x07	; 7
    8514:	51 05       	cpc	r21, r1
    8516:	0c f4       	brge	.+2      	; 0x851a <irCommTasks+0x50e>
    8518:	be c6       	rjmp	.+3452   	; 0x9296 <irCommTasks+0x128a>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    851a:	10 92 42 05 	sts	0x0542, r1
    851e:	10 92 41 05 	sts	0x0541, r1
    8522:	40 91 41 05 	lds	r20, 0x0541
    8526:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    852a:	fa 01       	movw	r30, r20
    852c:	ee 0f       	add	r30, r30
    852e:	ff 1f       	adc	r31, r31
    8530:	de 01       	movw	r26, r28
    8532:	ae 0f       	add	r26, r30
    8534:	bf 1f       	adc	r27, r31
    8536:	e6 0f       	add	r30, r22
    8538:	f7 1f       	adc	r31, r23
    853a:	0d 90       	ld	r0, X+
    853c:	bc 91       	ld	r27, X
    853e:	a0 2d       	mov	r26, r0
    8540:	80 81       	ld	r24, Z
    8542:	91 81       	ldd	r25, Z+1	; 0x01
    8544:	a8 1b       	sub	r26, r24
    8546:	b9 0b       	sbc	r27, r25
    8548:	a0 35       	cpi	r26, 0x50	; 80
    854a:	b1 05       	cpc	r27, r1
    854c:	0c f0       	brlt	.+2      	; 0x8550 <irCommTasks+0x544>
    854e:	12 c7       	rjmp	.+3620   	; 0x9374 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    8550:	47 30       	cpi	r20, 0x07	; 7
    8552:	51 05       	cpc	r21, r1
    8554:	0c f4       	brge	.+2      	; 0x8558 <irCommTasks+0x54c>
    8556:	a6 c6       	rjmp	.+3404   	; 0x92a4 <irCommTasks+0x1298>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    8558:	10 92 42 05 	sts	0x0542, r1
    855c:	10 92 41 05 	sts	0x0541, r1
    8560:	40 91 41 05 	lds	r20, 0x0541
    8564:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8568:	fa 01       	movw	r30, r20
    856a:	ee 0f       	add	r30, r30
    856c:	ff 1f       	adc	r31, r31
    856e:	de 01       	movw	r26, r28
    8570:	ae 0f       	add	r26, r30
    8572:	bf 1f       	adc	r27, r31
    8574:	e6 0f       	add	r30, r22
    8576:	f7 1f       	adc	r31, r23
    8578:	0d 90       	ld	r0, X+
    857a:	bc 91       	ld	r27, X
    857c:	a0 2d       	mov	r26, r0
    857e:	80 81       	ld	r24, Z
    8580:	91 81       	ldd	r25, Z+1	; 0x01
    8582:	a8 1b       	sub	r26, r24
    8584:	b9 0b       	sbc	r27, r25
    8586:	a0 35       	cpi	r26, 0x50	; 80
    8588:	b1 05       	cpc	r27, r1
    858a:	0c f0       	brlt	.+2      	; 0x858e <irCommTasks+0x582>
    858c:	f3 c6       	rjmp	.+3558   	; 0x9374 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    858e:	47 30       	cpi	r20, 0x07	; 7
    8590:	51 05       	cpc	r21, r1
    8592:	0c f4       	brge	.+2      	; 0x8596 <irCommTasks+0x58a>
    8594:	8e c6       	rjmp	.+3356   	; 0x92b2 <irCommTasks+0x12a6>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    8596:	10 92 42 05 	sts	0x0542, r1
    859a:	10 92 41 05 	sts	0x0541, r1
    859e:	40 91 41 05 	lds	r20, 0x0541
    85a2:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    85a6:	fa 01       	movw	r30, r20
    85a8:	ee 0f       	add	r30, r30
    85aa:	ff 1f       	adc	r31, r31
    85ac:	de 01       	movw	r26, r28
    85ae:	ae 0f       	add	r26, r30
    85b0:	bf 1f       	adc	r27, r31
    85b2:	e6 0f       	add	r30, r22
    85b4:	f7 1f       	adc	r31, r23
    85b6:	0d 90       	ld	r0, X+
    85b8:	bc 91       	ld	r27, X
    85ba:	a0 2d       	mov	r26, r0
    85bc:	80 81       	ld	r24, Z
    85be:	91 81       	ldd	r25, Z+1	; 0x01
    85c0:	a8 1b       	sub	r26, r24
    85c2:	b9 0b       	sbc	r27, r25
    85c4:	a0 35       	cpi	r26, 0x50	; 80
    85c6:	b1 05       	cpc	r27, r1
    85c8:	0c f0       	brlt	.+2      	; 0x85cc <irCommTasks+0x5c0>
    85ca:	d4 c6       	rjmp	.+3496   	; 0x9374 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    85cc:	47 30       	cpi	r20, 0x07	; 7
    85ce:	51 05       	cpc	r21, r1
    85d0:	0c f4       	brge	.+2      	; 0x85d4 <irCommTasks+0x5c8>
    85d2:	76 c6       	rjmp	.+3308   	; 0x92c0 <irCommTasks+0x12b4>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    85d4:	10 92 42 05 	sts	0x0542, r1
    85d8:	10 92 41 05 	sts	0x0541, r1
    85dc:	40 91 41 05 	lds	r20, 0x0541
    85e0:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    85e4:	fa 01       	movw	r30, r20
    85e6:	ee 0f       	add	r30, r30
    85e8:	ff 1f       	adc	r31, r31
    85ea:	de 01       	movw	r26, r28
    85ec:	ae 0f       	add	r26, r30
    85ee:	bf 1f       	adc	r27, r31
    85f0:	e6 0f       	add	r30, r22
    85f2:	f7 1f       	adc	r31, r23
    85f4:	0d 90       	ld	r0, X+
    85f6:	bc 91       	ld	r27, X
    85f8:	a0 2d       	mov	r26, r0
    85fa:	80 81       	ld	r24, Z
    85fc:	91 81       	ldd	r25, Z+1	; 0x01
    85fe:	a8 1b       	sub	r26, r24
    8600:	b9 0b       	sbc	r27, r25
    8602:	a0 35       	cpi	r26, 0x50	; 80
    8604:	b1 05       	cpc	r27, r1
    8606:	0c f0       	brlt	.+2      	; 0x860a <irCommTasks+0x5fe>
    8608:	b5 c6       	rjmp	.+3434   	; 0x9374 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    860a:	47 30       	cpi	r20, 0x07	; 7
    860c:	51 05       	cpc	r21, r1
    860e:	0c f4       	brge	.+2      	; 0x8612 <irCommTasks+0x606>
    8610:	65 c6       	rjmp	.+3274   	; 0x92dc <irCommTasks+0x12d0>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    8612:	10 92 42 05 	sts	0x0542, r1
    8616:	10 92 41 05 	sts	0x0541, r1
    861a:	40 91 41 05 	lds	r20, 0x0541
    861e:	50 91 42 05 	lds	r21, 0x0542
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8622:	fa 01       	movw	r30, r20
    8624:	ee 0f       	add	r30, r30
    8626:	ff 1f       	adc	r31, r31
    8628:	de 01       	movw	r26, r28
    862a:	ae 0f       	add	r26, r30
    862c:	bf 1f       	adc	r27, r31
    862e:	e6 0f       	add	r30, r22
    8630:	f7 1f       	adc	r31, r23
    8632:	0d 90       	ld	r0, X+
    8634:	bc 91       	ld	r27, X
    8636:	a0 2d       	mov	r26, r0
    8638:	80 81       	ld	r24, Z
    863a:	91 81       	ldd	r25, Z+1	; 0x01
    863c:	a8 1b       	sub	r26, r24
    863e:	b9 0b       	sbc	r27, r25
    8640:	a0 35       	cpi	r26, 0x50	; 80
    8642:	b1 05       	cpc	r27, r1
    8644:	0c f0       	brlt	.+2      	; 0x8648 <irCommTasks+0x63c>
    8646:	96 c6       	rjmp	.+3372   	; 0x9374 <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    8648:	47 30       	cpi	r20, 0x07	; 7
    864a:	51 05       	cpc	r21, r1
    864c:	0c f0       	brlt	.+2      	; 0x8650 <irCommTasks+0x644>
    864e:	3f c6       	rjmp	.+3198   	; 0x92ce <irCommTasks+0x12c2>
								irCommRxMaxSensor++;
    8650:	ca 01       	movw	r24, r20
    8652:	01 96       	adiw	r24, 0x01	; 1
    8654:	90 93 42 05 	sts	0x0542, r25
    8658:	80 93 41 05 	sts	0x0541, r24
    865c:	ac 01       	movw	r20, r24
					}
				}
				//turnOffGreenLeds();
				//setGreenLed(irCommRxMaxSensor, 1);			

				if(irCommRxMaxSensorIndexTemp>1) {
    865e:	80 91 0f 05 	lds	r24, 0x050F
    8662:	82 30       	cpi	r24, 0x02	; 2
    8664:	08 f0       	brcs	.+2      	; 0x8668 <irCommTasks+0x65c>
    8666:	81 e0       	ldi	r24, 0x01	; 1
					irCommRxMaxSensorIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
    8668:	e8 2f       	mov	r30, r24
    866a:	f0 e0       	ldi	r31, 0x00	; 0
    866c:	ee 0f       	add	r30, r30
    866e:	ff 1f       	adc	r31, r31
    8670:	e7 5b       	subi	r30, 0xB7	; 183
    8672:	f4 4f       	sbci	r31, 0xF4	; 244
    8674:	51 83       	std	Z+1, r21	; 0x01
    8676:	40 83       	st	Z, r20
				irCommRxMaxSensorIndexTemp++;
    8678:	8f 5f       	subi	r24, 0xFF	; 255
    867a:	80 93 0f 05 	sts	0x050F, r24
					
				if(irCommRxMaxDiffIndexTemp>1) {
    867e:	80 91 10 05 	lds	r24, 0x0510
    8682:	82 30       	cpi	r24, 0x02	; 2
    8684:	08 f0       	brcs	.+2      	; 0x8688 <irCommTasks+0x67c>
    8686:	81 e0       	ldi	r24, 0x01	; 1
					irCommRxMaxDiffIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
    8688:	e8 2f       	mov	r30, r24
    868a:	f0 e0       	ldi	r31, 0x00	; 0
    868c:	ee 0f       	add	r30, r30
    868e:	ff 1f       	adc	r31, r31
    8690:	ee 57       	subi	r30, 0x7E	; 126
    8692:	f4 4f       	sbci	r31, 0xF4	; 244
    8694:	00 91 3f 05 	lds	r16, 0x053F
    8698:	10 91 40 05 	lds	r17, 0x0540
    869c:	11 83       	std	Z+1, r17	; 0x01
    869e:	00 83       	st	Z, r16
				irCommRxMaxDiffIndexTemp++;
    86a0:	8f 5f       	subi	r24, 0xFF	; 255
    86a2:	80 93 10 05 	sts	0x0510, r24
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    86a6:	20 91 13 05 	lds	r18, 0x0513
    86aa:	22 30       	cpi	r18, 0x02	; 2
    86ac:	20 f0       	brcs	.+8      	; 0x86b6 <irCommTasks+0x6aa>
					irCommMaxSensorValueCurrIndexTemp = 1;
    86ae:	81 e0       	ldi	r24, 0x01	; 1
    86b0:	80 93 13 05 	sts	0x0513, r24
    86b4:	21 e0       	ldi	r18, 0x01	; 1
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    86b6:	da 01       	movw	r26, r20
    86b8:	aa 0f       	add	r26, r26
    86ba:	bb 1f       	adc	r27, r27
    86bc:	e2 2f       	mov	r30, r18
    86be:	f0 e0       	ldi	r31, 0x00	; 0
    86c0:	ee 0f       	add	r30, r30
    86c2:	ff 1f       	adc	r31, r31
    86c4:	e8 5a       	subi	r30, 0xA8	; 168
    86c6:	fa 4f       	sbci	r31, 0xFA	; 250
    86c8:	ca 0f       	add	r28, r26
    86ca:	db 1f       	adc	r29, r27
    86cc:	88 81       	ld	r24, Y
    86ce:	99 81       	ldd	r25, Y+1	; 0x01
    86d0:	91 83       	std	Z+1, r25	; 0x01
    86d2:	80 83       	st	Z, r24
				irCommMaxSensorValueCurrIndexTemp++;
    86d4:	2f 5f       	subi	r18, 0xFF	; 255
    86d6:	20 93 13 05 	sts	0x0513, r18
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    86da:	20 91 14 05 	lds	r18, 0x0514
    86de:	22 30       	cpi	r18, 0x02	; 2
    86e0:	20 f0       	brcs	.+8      	; 0x86ea <irCommTasks+0x6de>
					irCommMinSensorValueCurrIndexTemp = 1;
    86e2:	81 e0       	ldi	r24, 0x01	; 1
    86e4:	80 93 14 05 	sts	0x0514, r24
    86e8:	21 e0       	ldi	r18, 0x01	; 1
					//updateBlueLed(0);
				}
				irCommMinSensorValueCurrTemp[irCommMinSensorValueCurrIndexTemp] = irCommMinSensorValueCurr[irCommRxMaxSensor];
    86ea:	e2 2f       	mov	r30, r18
    86ec:	f0 e0       	ldi	r31, 0x00	; 0
    86ee:	ee 0f       	add	r30, r30
    86f0:	ff 1f       	adc	r31, r31
    86f2:	e3 5b       	subi	r30, 0xB3	; 179
    86f4:	f4 4f       	sbci	r31, 0xF4	; 244
    86f6:	6a 0f       	add	r22, r26
    86f8:	7b 1f       	adc	r23, r27
    86fa:	db 01       	movw	r26, r22
    86fc:	8d 91       	ld	r24, X+
    86fe:	9c 91       	ld	r25, X
    8700:	91 83       	std	Z+1, r25	; 0x01
    8702:	80 83       	st	Z, r24
				irCommMinSensorValueCurrIndexTemp++;			
    8704:	2f 5f       	subi	r18, 0xFF	; 255
    8706:	20 93 14 05 	sts	0x0514, r18


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    870a:	00 35       	cpi	r16, 0x50	; 80
    870c:	11 05       	cpc	r17, r1
    870e:	0c f4       	brge	.+2      	; 0x8712 <irCommTasks+0x706>
    8710:	fb c3       	rjmp	.+2038   	; 0x8f08 <irCommTasks+0xefc>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;	
    8712:	83 e0       	ldi	r24, 0x03	; 3
    8714:	80 93 f5 04 	sts	0x04F5, r24
					
					if(irCommStateIndexTemp>13) {
    8718:	90 91 1c 05 	lds	r25, 0x051C
    871c:	9e 30       	cpi	r25, 0x0E	; 14
    871e:	20 f0       	brcs	.+8      	; 0x8728 <irCommTasks+0x71c>

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;

					if(irCommStateIndexTemp>13) {
						irCommStateIndexTemp = 13;
    8720:	8d e0       	ldi	r24, 0x0D	; 13
    8722:	80 93 1c 05 	sts	0x051C, r24
    8726:	9d e0       	ldi	r25, 0x0D	; 13
						//updateRedLed(0);
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
    8728:	80 91 f5 04 	lds	r24, 0x04F5
    872c:	e9 2f       	mov	r30, r25
    872e:	f0 e0       	ldi	r31, 0x00	; 0
    8730:	e4 5a       	subi	r30, 0xA4	; 164
    8732:	fa 4f       	sbci	r31, 0xFA	; 250
    8734:	80 83       	st	Z, r24
					irCommStateIndexTemp++;
    8736:	9f 5f       	subi	r25, 0xFF	; 255
    8738:	90 93 1c 05 	sts	0x051C, r25
    873c:	80 cc       	rjmp	.-1792   	; 0x803e <irCommTasks+0x32>
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
    873e:	20 91 4c 05 	lds	r18, 0x054C
    8742:	e2 2f       	mov	r30, r18
    8744:	f0 e0       	ldi	r31, 0x00	; 0
    8746:	ec 58       	subi	r30, 0x8C	; 140
    8748:	fa 4f       	sbci	r31, 0xFA	; 250
    874a:	e0 81       	ld	r30, Z
    874c:	e3 30       	cpi	r30, 0x03	; 3
    874e:	09 f4       	brne	.+2      	; 0x8752 <irCommTasks+0x746>
    8750:	48 c4       	rjmp	.+2192   	; 0x8fe2 <irCommTasks+0xfd6>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    8752:	e2 30       	cpi	r30, 0x02	; 2
    8754:	11 f1       	breq	.+68     	; 0x879a <irCommTasks+0x78e>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    8756:	e1 30       	cpi	r30, 0x01	; 1
    8758:	09 f4       	brne	.+2      	; 0x875c <irCommTasks+0x750>
    875a:	db c4       	rjmp	.+2486   	; 0x9112 <irCommTasks+0x1106>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    875c:	8e e1       	ldi	r24, 0x1E	; 30
    875e:	90 e0       	ldi	r25, 0x00	; 0
    8760:	90 93 4f 05 	sts	0x054F, r25
    8764:	80 93 4e 05 	sts	0x054E, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    8768:	88 e0       	ldi	r24, 0x08	; 8
    876a:	80 93 50 05 	sts	0x0550, r24
				}
				if(irCommTxBitCount == 0) {
    876e:	22 23       	and	r18, r18
    8770:	51 f4       	brne	.+20     	; 0x8786 <irCommTasks+0x77a>
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
    8772:	80 91 54 05 	lds	r24, 0x0554
    8776:	88 23       	and	r24, r24
    8778:	09 f0       	breq	.+2      	; 0x877c <irCommTasks+0x770>
    877a:	43 c4       	rjmp	.+2182   	; 0x9002 <irCommTasks+0xff6>
						PORTA = 0xAA;
    877c:	8a ea       	ldi	r24, 0xAA	; 170
    877e:	82 b9       	out	0x02, r24	; 2
					} else {
						PORTA = 0x55;
					}					
					irCommTxPulseState = 1;
    8780:	81 e0       	ldi	r24, 0x01	; 1
    8782:	80 93 4d 05 	sts	0x054D, r24
				}
				irCommTxDurationCycle = 0;
    8786:	10 92 52 05 	sts	0x0552, r1
				irCommTxSwitchCounter = 0;						
    878a:	10 92 51 05 	sts	0x0551, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    878e:	83 e0       	ldi	r24, 0x03	; 3
    8790:	80 93 f5 04 	sts	0x04F5, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    8794:	80 93 44 05 	sts	0x0544, r24
    8798:	52 cc       	rjmp	.-1884   	; 0x803e <irCommTasks+0x32>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
    879a:	88 e7       	ldi	r24, 0x78	; 120
    879c:	90 e0       	ldi	r25, 0x00	; 0
    879e:	90 93 4f 05 	sts	0x054F, r25
    87a2:	80 93 4e 05 	sts	0x054E, r24
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
    87a6:	e0 93 50 05 	sts	0x0550, r30
    87aa:	e1 cf       	rjmp	.-62     	; 0x876e <irCommTasks+0x762>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    87ac:	3f 5f       	subi	r19, 0xFF	; 255
    87ae:	21 e0       	ldi	r18, 0x01	; 1
    87b0:	bd cd       	rjmp	.-1158   	; 0x832c <irCommTasks+0x320>
				irCommState = IRCOMM_RX_IDLE_STATE;

				break;

			case IRCOMM_RX_DEBUG:								
				irCommSendValues = 0;						
    87b2:	10 92 f8 04 	sts	0x04F8, r1
				while(irCommSendValues==0);	// wait for the start from the uart (computer)
    87b6:	80 91 f8 04 	lds	r24, 0x04F8
    87ba:	88 23       	and	r24, r24
    87bc:	e1 f3       	breq	.-8      	; 0x87b6 <irCommTasks+0x7aa>
				usart0Transmit(0xFF, 1);
    87be:	8f ef       	ldi	r24, 0xFF	; 255
    87c0:	61 e0       	ldi	r22, 0x01	; 1
    87c2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[0],1);
    87c6:	80 91 49 0b 	lds	r24, 0x0B49
    87ca:	61 e0       	ldi	r22, 0x01	; 1
    87cc:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[1],1);
    87d0:	80 91 4b 0b 	lds	r24, 0x0B4B
    87d4:	61 e0       	ldi	r22, 0x01	; 1
    87d6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]&0xFF,1);
    87da:	80 91 82 0b 	lds	r24, 0x0B82
    87de:	61 e0       	ldi	r22, 0x01	; 1
    87e0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]>>8,1);
    87e4:	80 91 83 0b 	lds	r24, 0x0B83
    87e8:	61 e0       	ldi	r22, 0x01	; 1
    87ea:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]&0xFF,1);
    87ee:	80 91 84 0b 	lds	r24, 0x0B84
    87f2:	61 e0       	ldi	r22, 0x01	; 1
    87f4:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]>>8,1);
    87f8:	80 91 85 0b 	lds	r24, 0x0B85
    87fc:	61 e0       	ldi	r22, 0x01	; 1
    87fe:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]&0xFF,1);
    8802:	80 91 8f 05 	lds	r24, 0x058F
    8806:	61 e0       	ldi	r22, 0x01	; 1
    8808:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
    880c:	80 91 90 05 	lds	r24, 0x0590
    8810:	61 e0       	ldi	r22, 0x01	; 1
    8812:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
    8816:	80 91 91 05 	lds	r24, 0x0591
    881a:	61 e0       	ldi	r22, 0x01	; 1
    881c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
    8820:	80 91 92 05 	lds	r24, 0x0592
    8824:	61 e0       	ldi	r22, 0x01	; 1
    8826:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[0],1);
    882a:	80 91 71 05 	lds	r24, 0x0571
    882e:	61 e0       	ldi	r22, 0x01	; 1
    8830:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[1],1);
    8834:	80 91 72 05 	lds	r24, 0x0572
    8838:	61 e0       	ldi	r22, 0x01	; 1
    883a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    883e:	c0 e0       	ldi	r28, 0x00	; 0
    8840:	d0 e0       	ldi	r29, 0x00	; 0
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
					irCommTempValue = irCommMaxSensorSignalTemp[i];
    8842:	fe 01       	movw	r30, r28
    8844:	e5 57       	subi	r30, 0x75	; 117
    8846:	f7 4f       	sbci	r31, 0xF7	; 247
    8848:	80 81       	ld	r24, Z
    884a:	91 81       	ldd	r25, Z+1	; 0x01
    884c:	80 93 f6 04 	sts	0x04F6, r24
    8850:	90 93 f7 04 	sts	0x04F7, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    8854:	61 e0       	ldi	r22, 0x01	; 1
    8856:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    885a:	80 91 f7 04 	lds	r24, 0x04F7
    885e:	61 e0       	ldi	r22, 0x01	; 1
    8860:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
    8864:	fe 01       	movw	r30, r28
    8866:	e9 56       	subi	r30, 0x69	; 105
    8868:	fa 4f       	sbci	r31, 0xFA	; 250
    886a:	80 81       	ld	r24, Z
    886c:	91 81       	ldd	r25, Z+1	; 0x01
    886e:	80 93 f6 04 	sts	0x04F6, r24
    8872:	90 93 f7 04 	sts	0x04F7, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    8876:	61 e0       	ldi	r22, 0x01	; 1
    8878:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    887c:	80 91 f7 04 	lds	r24, 0x04F7
    8880:	61 e0       	ldi	r22, 0x01	; 1
    8882:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8886:	22 96       	adiw	r28, 0x02	; 2
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
				usart0Transmit(irCommSwitchCountTemp[0],1);
				usart0Transmit(irCommSwitchCountTemp[1],1);
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
    8888:	c0 35       	cpi	r28, 0x50	; 80
    888a:	d1 05       	cpc	r29, r1
    888c:	d1 f6       	brne	.-76     	; 0x8842 <irCommTasks+0x836>
					usart0Transmit(irCommTempValue>>8,1);
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]&0xFF,1);
    888e:	80 91 58 05 	lds	r24, 0x0558
    8892:	61 e0       	ldi	r22, 0x01	; 1
    8894:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]>>8,1);
    8898:	80 91 59 05 	lds	r24, 0x0559
    889c:	61 e0       	ldi	r22, 0x01	; 1
    889e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]&0xFF,1);
    88a2:	80 91 5a 05 	lds	r24, 0x055A
    88a6:	61 e0       	ldi	r22, 0x01	; 1
    88a8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]>>8,1);
    88ac:	80 91 5b 05 	lds	r24, 0x055B
    88b0:	61 e0       	ldi	r22, 0x01	; 1
    88b2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]&0xFF,1);
    88b6:	80 91 4d 0b 	lds	r24, 0x0B4D
    88ba:	61 e0       	ldi	r22, 0x01	; 1
    88bc:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]>>8,1);
    88c0:	80 91 4e 0b 	lds	r24, 0x0B4E
    88c4:	61 e0       	ldi	r22, 0x01	; 1
    88c6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]&0xFF,1);
    88ca:	80 91 4f 0b 	lds	r24, 0x0B4F
    88ce:	61 e0       	ldi	r22, 0x01	; 1
    88d0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]>>8,1);
    88d4:	80 91 50 0b 	lds	r24, 0x0B50
    88d8:	61 e0       	ldi	r22, 0x01	; 1
    88da:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[0],1);
    88de:	80 91 9b 0b 	lds	r24, 0x0B9B
    88e2:	61 e0       	ldi	r22, 0x01	; 1
    88e4:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[1],1);
    88e8:	80 91 9c 0b 	lds	r24, 0x0B9C
    88ec:	61 e0       	ldi	r22, 0x01	; 1
    88ee:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[0],1);
    88f2:	80 91 55 0b 	lds	r24, 0x0B55
    88f6:	61 e0       	ldi	r22, 0x01	; 1
    88f8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[1],1);
    88fc:	80 91 56 0b 	lds	r24, 0x0B56
    8900:	61 e0       	ldi	r22, 0x01	; 1
    8902:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]&0xFF,1);
    8906:	80 91 dc 08 	lds	r24, 0x08DC
    890a:	61 e0       	ldi	r22, 0x01	; 1
    890c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]>>8,1);
    8910:	80 91 dd 08 	lds	r24, 0x08DD
    8914:	61 e0       	ldi	r22, 0x01	; 1
    8916:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]&0xFF,1);
    891a:	80 91 de 08 	lds	r24, 0x08DE
    891e:	61 e0       	ldi	r22, 0x01	; 1
    8920:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]>>8,1);
    8924:	80 91 df 08 	lds	r24, 0x08DF
    8928:	61 e0       	ldi	r22, 0x01	; 1
    892a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[0],1);
    892e:	80 91 8c 05 	lds	r24, 0x058C
    8932:	61 e0       	ldi	r22, 0x01	; 1
    8934:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[1],1);
    8938:	80 91 8d 05 	lds	r24, 0x058D
    893c:	61 e0       	ldi	r22, 0x01	; 1
    893e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[0],1);
    8942:	80 91 e9 05 	lds	r24, 0x05E9
    8946:	61 e0       	ldi	r22, 0x01	; 1
    8948:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[1],1);
    894c:	80 91 ea 05 	lds	r24, 0x05EA
    8950:	61 e0       	ldi	r22, 0x01	; 1
    8952:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[0],1);
    8956:	80 91 2b 07 	lds	r24, 0x072B
    895a:	61 e0       	ldi	r22, 0x01	; 1
    895c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[1],1);
    8960:	80 91 2c 07 	lds	r24, 0x072C
    8964:	61 e0       	ldi	r22, 0x01	; 1
    8966:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[0],1);
    896a:	80 91 95 05 	lds	r24, 0x0595
    896e:	61 e0       	ldi	r22, 0x01	; 1
    8970:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[1],1);
    8974:	80 91 96 05 	lds	r24, 0x0596
    8978:	61 e0       	ldi	r22, 0x01	; 1
    897a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
    897e:	80 91 8a 05 	lds	r24, 0x058A
    8982:	61 e0       	ldi	r22, 0x01	; 1
    8984:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[1],1);
    8988:	80 91 8b 05 	lds	r24, 0x058B
    898c:	61 e0       	ldi	r22, 0x01	; 1
    898e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
    8992:	80 91 5c 05 	lds	r24, 0x055C
    8996:	61 e0       	ldi	r22, 0x01	; 1
    8998:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    899c:	80 91 5d 05 	lds	r24, 0x055D
    89a0:	61 e0       	ldi	r22, 0x01	; 1
    89a2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    89a6:	80 91 5e 05 	lds	r24, 0x055E
    89aa:	61 e0       	ldi	r22, 0x01	; 1
    89ac:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    89b0:	80 91 5f 05 	lds	r24, 0x055F
    89b4:	61 e0       	ldi	r22, 0x01	; 1
    89b6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    89ba:	80 91 60 05 	lds	r24, 0x0560
    89be:	61 e0       	ldi	r22, 0x01	; 1
    89c0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    89c4:	80 91 61 05 	lds	r24, 0x0561
    89c8:	61 e0       	ldi	r22, 0x01	; 1
    89ca:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    89ce:	80 91 62 05 	lds	r24, 0x0562
    89d2:	61 e0       	ldi	r22, 0x01	; 1
    89d4:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    89d8:	80 91 63 05 	lds	r24, 0x0563
    89dc:	61 e0       	ldi	r22, 0x01	; 1
    89de:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    89e2:	80 91 64 05 	lds	r24, 0x0564
    89e6:	61 e0       	ldi	r22, 0x01	; 1
    89e8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    89ec:	80 91 65 05 	lds	r24, 0x0565
    89f0:	61 e0       	ldi	r22, 0x01	; 1
    89f2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    89f6:	80 91 66 05 	lds	r24, 0x0566
    89fa:	61 e0       	ldi	r22, 0x01	; 1
    89fc:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a00:	80 91 67 05 	lds	r24, 0x0567
    8a04:	61 e0       	ldi	r22, 0x01	; 1
    8a06:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a0a:	80 91 68 05 	lds	r24, 0x0568
    8a0e:	61 e0       	ldi	r22, 0x01	; 1
    8a10:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a14:	80 91 69 05 	lds	r24, 0x0569
    8a18:	61 e0       	ldi	r22, 0x01	; 1
    8a1a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a1e:	c7 eb       	ldi	r28, 0xB7	; 183
    8a20:	d9 e0       	ldi	r29, 0x09	; 9
				}
				for(i=0; i<200; i++) {
					irCommTempValue = irCommBitsSignalTemp[i];
    8a22:	88 81       	ld	r24, Y
    8a24:	99 81       	ldd	r25, Y+1	; 0x01
    8a26:	80 93 f6 04 	sts	0x04F6, r24
    8a2a:	90 93 f7 04 	sts	0x04F7, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    8a2e:	61 e0       	ldi	r22, 0x01	; 1
    8a30:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    8a34:	80 91 f7 04 	lds	r24, 0x04F7
    8a38:	61 e0       	ldi	r22, 0x01	; 1
    8a3a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a3e:	22 96       	adiw	r28, 0x02	; 2
				usart0Transmit(irCommSyncStateTemp[0],1);
				usart0Transmit(irCommSyncStateTemp[1],1);
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
				}
				for(i=0; i<200; i++) {
    8a40:	9b e0       	ldi	r25, 0x0B	; 11
    8a42:	c7 34       	cpi	r28, 0x47	; 71
    8a44:	d9 07       	cpc	r29, r25
    8a46:	69 f7       	brne	.-38     	; 0x8a22 <irCommTasks+0xa16>
					irCommTempValue = irCommBitsSignalTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				for(i=0; i<10; i++) {
					usart0Transmit(irCommRxBitReceivedTemp[i],1);
    8a48:	80 91 7f 08 	lds	r24, 0x087F
    8a4c:	61 e0       	ldi	r22, 0x01	; 1
    8a4e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a52:	80 91 80 08 	lds	r24, 0x0880
    8a56:	61 e0       	ldi	r22, 0x01	; 1
    8a58:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a5c:	80 91 81 08 	lds	r24, 0x0881
    8a60:	61 e0       	ldi	r22, 0x01	; 1
    8a62:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a66:	80 91 82 08 	lds	r24, 0x0882
    8a6a:	61 e0       	ldi	r22, 0x01	; 1
    8a6c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a70:	80 91 83 08 	lds	r24, 0x0883
    8a74:	61 e0       	ldi	r22, 0x01	; 1
    8a76:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a7a:	80 91 84 08 	lds	r24, 0x0884
    8a7e:	61 e0       	ldi	r22, 0x01	; 1
    8a80:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a84:	80 91 85 08 	lds	r24, 0x0885
    8a88:	61 e0       	ldi	r22, 0x01	; 1
    8a8a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a8e:	80 91 86 08 	lds	r24, 0x0886
    8a92:	61 e0       	ldi	r22, 0x01	; 1
    8a94:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8a98:	80 91 87 08 	lds	r24, 0x0887
    8a9c:	61 e0       	ldi	r22, 0x01	; 1
    8a9e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
    8aa2:	80 91 88 08 	lds	r24, 0x0888
    8aa6:	61 e0       	ldi	r22, 0x01	; 1
    8aa8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				}
				usart0Transmit(irCommRxCrc,1);
    8aac:	80 91 23 05 	lds	r24, 0x0523
    8ab0:	61 e0       	ldi	r22, 0x01	; 1
    8ab2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxCrcError,1);
    8ab6:	80 91 33 05 	lds	r24, 0x0533
    8aba:	61 e0       	ldi	r22, 0x01	; 1
    8abc:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxByte,1);
    8ac0:	80 91 34 05 	lds	r24, 0x0534
    8ac4:	61 e0       	ldi	r22, 0x01	; 1
    8ac6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
				usart0Transmit(irCommRxByteExpected,1);				
    8aca:	80 91 37 05 	lds	r24, 0x0537
    8ace:	61 e0       	ldi	r22, 0x01	; 1
    8ad0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>

				irCommState = IRCOMM_RX_STOP;
    8ad4:	89 e0       	ldi	r24, 0x09	; 9
    8ad6:	80 93 f5 04 	sts	0x04F5, r24
    8ada:	b1 ca       	rjmp	.-2718   	; 0x803e <irCommTasks+0x32>

				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    8adc:	80 91 89 05 	lds	r24, 0x0589
    8ae0:	90 91 23 05 	lds	r25, 0x0523
    8ae4:	89 0f       	add	r24, r25
    8ae6:	90 91 88 05 	lds	r25, 0x0588
    8aea:	99 0f       	add	r25, r25
    8aec:	89 0f       	add	r24, r25
    8aee:	83 70       	andi	r24, 0x03	; 3
    8af0:	80 93 33 05 	sts	0x0533, r24
				if(irCommRxCrcError==0) {
    8af4:	88 23       	and	r24, r24
    8af6:	69 f4       	brne	.+26     	; 0x8b12 <irCommTasks+0xb06>
					irCommRxLastDataReceived = irCommRxByte;
    8af8:	80 91 34 05 	lds	r24, 0x0534
    8afc:	80 93 39 05 	sts	0x0539, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    8b00:	90 91 41 05 	lds	r25, 0x0541
    8b04:	90 93 15 02 	sts	0x0215, r25
					irCommRxDataAvailable = 1;
    8b08:	00 93 3a 05 	sts	0x053A, r16
					//updateBlueLed(0);
					usart0Transmit(irCommRxByte,1);		
    8b0c:	61 e0       	ldi	r22, 0x01	; 1
    8b0e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <usart0Transmit>
					//updateBlueLed(255);			
				}
												
				currentProx = 0;
    8b12:	10 92 40 02 	sts	0x0240, r1
				adcSaveDataTo = SKIP_SAMPLE;
    8b16:	85 e0       	ldi	r24, 0x05	; 5
    8b18:	80 93 d5 02 	sts	0x02D5, r24
				adcSamplingState = 0;
    8b1c:	10 92 d6 02 	sts	0x02D6, r1
				irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;				
    8b20:	10 92 f4 04 	sts	0x04F4, r1
				} else {
					irCommRxPrevDataReceived = irCommRxLastDataReceived;
				}
				*/

				resetDebugVariables();
    8b24:	0e 94 5d 3f 	call	0x7eba	; 0x7eba <resetDebugVariables>

				irCommState = IRCOMM_RX_IDLE_STATE;
    8b28:	81 e0       	ldi	r24, 0x01	; 1
    8b2a:	80 93 f5 04 	sts	0x04F5, r24
    8b2e:	87 ca       	rjmp	.-2802   	; 0x803e <irCommTasks+0x32>

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				if((irCommRxStartBitDetected==0) && (irCommEnabled!=irCommEnabledNext)) {
    8b30:	80 91 3c 05 	lds	r24, 0x053C
    8b34:	88 23       	and	r24, r24
    8b36:	09 f0       	breq	.+2      	; 0x8b3a <irCommTasks+0xb2e>
    8b38:	82 ca       	rjmp	.-2812   	; 0x803e <irCommTasks+0x32>
    8b3a:	90 91 f2 04 	lds	r25, 0x04F2
    8b3e:	80 91 f3 04 	lds	r24, 0x04F3
    8b42:	98 17       	cp	r25, r24
    8b44:	09 f4       	brne	.+2      	; 0x8b48 <irCommTasks+0xb3c>
    8b46:	7b ca       	rjmp	.-2826   	; 0x803e <irCommTasks+0x32>
					if((getTime100MicroSec() - irCommTxLastTransmissionTime) > PAUSE_200_MSEC) {
    8b48:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getTime100MicroSec>
    8b4c:	20 91 47 05 	lds	r18, 0x0547
    8b50:	30 91 48 05 	lds	r19, 0x0548
    8b54:	40 91 49 05 	lds	r20, 0x0549
    8b58:	50 91 4a 05 	lds	r21, 0x054A
    8b5c:	62 1b       	sub	r22, r18
    8b5e:	73 0b       	sbc	r23, r19
    8b60:	84 0b       	sbc	r24, r20
    8b62:	95 0b       	sbc	r25, r21
    8b64:	64 58       	subi	r22, 0x84	; 132
    8b66:	77 40       	sbci	r23, 0x07	; 7
    8b68:	80 40       	sbci	r24, 0x00	; 0
    8b6a:	90 40       	sbci	r25, 0x00	; 0
    8b6c:	08 f4       	brcc	.+2      	; 0x8b70 <irCommTasks+0xb64>
    8b6e:	67 ca       	rjmp	.-2866   	; 0x803e <irCommTasks+0x32>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    8b70:	82 e0       	ldi	r24, 0x02	; 2
    8b72:	80 93 f2 04 	sts	0x04F2, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    8b76:	10 93 f5 04 	sts	0x04F5, r17
    8b7a:	61 ca       	rjmp	.-2878   	; 0x803e <irCommTasks+0x32>
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
    8b7c:	80 e0       	ldi	r24, 0x00	; 0
    8b7e:	94 e0       	ldi	r25, 0x04	; 4
    8b80:	90 93 2b 05 	sts	0x052B, r25
    8b84:	80 93 2a 05 	sts	0x052A, r24
				irCommTempMax = 0;
    8b88:	10 92 29 05 	sts	0x0529, r1
    8b8c:	10 92 28 05 	sts	0x0528, r1
				irCommShiftCount = 0;
    8b90:	10 92 2c 05 	sts	0x052C, r1
				irCommComputeShift = 1;												
    8b94:	00 93 2d 05 	sts	0x052D, r16
    8b98:	c0 90 41 05 	lds	r12, 0x0541
    8b9c:	d0 90 42 05 	lds	r13, 0x0542
    8ba0:	cc 0c       	add	r12, r12
    8ba2:	dd 1c       	adc	r13, r13
    8ba4:	79 e5       	ldi	r23, 0x59	; 89
    8ba6:	a7 2e       	mov	r10, r23
    8ba8:	7b e0       	ldi	r23, 0x0B	; 11
    8baa:	b7 2e       	mov	r11, r23
    8bac:	e5 01       	movw	r28, r10
    8bae:	ee 24       	eor	r14, r14
    8bb0:	ff 24       	eor	r15, r15
    8bb2:	87 01       	movw	r16, r14
    8bb4:	60 90 6d 08 	lds	r6, 0x086D
    8bb8:	70 90 6e 08 	lds	r7, 0x086E
    8bbc:	90 90 0d 05 	lds	r9, 0x050D
    8bc0:	88 24       	eor	r8, r8
    8bc2:	83 94       	inc	r8
    8bc4:	55 24       	eor	r5, r5
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
    8bc6:	62 e0       	ldi	r22, 0x02	; 2
    8bc8:	36 2e       	mov	r3, r22
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    8bca:	22 24       	eor	r2, r2
    8bcc:	23 94       	inc	r2
    8bce:	0e c0       	rjmp	.+28     	; 0x8bec <irCommTasks+0xbe0>
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    8bd0:	f2 e0       	ldi	r31, 0x02	; 2
    8bd2:	8f 16       	cp	r8, r31
    8bd4:	09 f4       	brne	.+2      	; 0x8bd8 <irCommTasks+0xbcc>
    8bd6:	7f c0       	rjmp	.+254    	; 0x8cd6 <irCommTasks+0xcca>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    8bd8:	80 e1       	ldi	r24, 0x10	; 16
    8bda:	90 e0       	ldi	r25, 0x00	; 0
    8bdc:	c8 0e       	add	r12, r24
    8bde:	d9 1e       	adc	r13, r25
    8be0:	22 96       	adiw	r28, 0x02	; 2
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8be2:	9b e0       	ldi	r25, 0x0B	; 11
    8be4:	c1 38       	cpi	r28, 0x81	; 129
    8be6:	d9 07       	cpc	r29, r25
    8be8:	09 f4       	brne	.+2      	; 0x8bec <irCommTasks+0xbe0>
    8bea:	aa c0       	rjmp	.+340    	; 0x8d40 <irCommTasks+0xd34>
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    8bec:	f3 01       	movw	r30, r6
    8bee:	ec 0d       	add	r30, r12
    8bf0:	fd 1d       	adc	r31, r13
    8bf2:	20 81       	ld	r18, Z
    8bf4:	31 81       	ldd	r19, Z+1	; 0x01
    8bf6:	39 83       	std	Y+1, r19	; 0x01
    8bf8:	28 83       	st	Y, r18

					if(irCommMaxSensorSignalIndexTemp>39) {
    8bfa:	b7 e2       	ldi	r27, 0x27	; 39
    8bfc:	b9 15       	cp	r27, r9
    8bfe:	10 f4       	brcc	.+4      	; 0x8c04 <irCommTasks+0xbf8>
    8c00:	57 e2       	ldi	r21, 0x27	; 39
    8c02:	95 2e       	mov	r9, r21
						irCommMaxSensorSignalIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
    8c04:	e9 2d       	mov	r30, r9
    8c06:	f0 e0       	ldi	r31, 0x00	; 0
    8c08:	ee 0f       	add	r30, r30
    8c0a:	ff 1f       	adc	r31, r31
    8c0c:	e5 57       	subi	r30, 0x75	; 117
    8c0e:	f7 4f       	sbci	r31, 0xF7	; 247
    8c10:	31 83       	std	Z+1, r19	; 0x01
    8c12:	20 83       	st	Z, r18
					irCommMaxSensorSignalIndexTemp++;					
    8c14:	93 94       	inc	r9
    8c16:	90 92 0d 05 	sts	0x050D, r9

					irCommProxSum += irCommMaxSensorSignal[i];
    8c1a:	c9 01       	movw	r24, r18
    8c1c:	aa 27       	eor	r26, r26
    8c1e:	97 fd       	sbrc	r25, 7
    8c20:	a0 95       	com	r26
    8c22:	ba 2f       	mov	r27, r26
    8c24:	e8 0e       	add	r14, r24
    8c26:	f9 1e       	adc	r15, r25
    8c28:	0a 1f       	adc	r16, r26
    8c2a:	1b 1f       	adc	r17, r27
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    8c2c:	e1 e0       	ldi	r30, 0x01	; 1
    8c2e:	8e 16       	cp	r8, r30
    8c30:	79 f6       	brne	.-98     	; 0x8bd0 <irCommTasks+0xbc4>
						irCommShiftCount++;								
    8c32:	45 2c       	mov	r4, r5
    8c34:	53 94       	inc	r5
    8c36:	50 92 2c 05 	sts	0x052C, r5
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8c3a:	60 91 2a 05 	lds	r22, 0x052A
    8c3e:	70 91 2b 05 	lds	r23, 0x052B
    8c42:	26 17       	cp	r18, r22
    8c44:	37 07       	cpc	r19, r23
    8c46:	2c f4       	brge	.+10     	; 0x8c52 <irCommTasks+0xc46>
							irCommTempMin = irCommMaxSensorSignal[i];
    8c48:	30 93 2b 05 	sts	0x052B, r19
    8c4c:	20 93 2a 05 	sts	0x052A, r18
    8c50:	b9 01       	movw	r22, r18
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    8c52:	40 91 28 05 	lds	r20, 0x0528
    8c56:	50 91 29 05 	lds	r21, 0x0529
    8c5a:	42 17       	cp	r20, r18
    8c5c:	53 07       	cpc	r21, r19
    8c5e:	2c f4       	brge	.+10     	; 0x8c6a <irCommTasks+0xc5e>
							irCommTempMax = irCommMaxSensorSignal[i];
    8c60:	30 93 29 05 	sts	0x0529, r19
    8c64:	20 93 28 05 	sts	0x0528, r18
    8c68:	a9 01       	movw	r20, r18
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
    8c6a:	ca 01       	movw	r24, r20
    8c6c:	86 1b       	sub	r24, r22
    8c6e:	97 0b       	sbc	r25, r23
    8c70:	dc 01       	movw	r26, r24
    8c72:	80 93 f6 04 	sts	0x04F6, r24
    8c76:	90 93 f7 04 	sts	0x04F7, r25
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8c7a:	80 35       	cpi	r24, 0x50	; 80
    8c7c:	91 05       	cpc	r25, r1
    8c7e:	0c f4       	brge	.+2      	; 0x8c82 <irCommTasks+0xc76>
    8c80:	ab cf       	rjmp	.-170    	; 0x8bd8 <irCommTasks+0xbcc>

							if(irCommStartDiffIndexTemp>1) {
    8c82:	80 91 17 05 	lds	r24, 0x0517
    8c86:	82 30       	cpi	r24, 0x02	; 2
    8c88:	08 f0       	brcs	.+2      	; 0x8c8c <irCommTasks+0xc80>
    8c8a:	81 e0       	ldi	r24, 0x01	; 1
								irCommStartDiffIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
    8c8c:	e8 2f       	mov	r30, r24
    8c8e:	f0 e0       	ldi	r31, 0x00	; 0
    8c90:	ee 0f       	add	r30, r30
    8c92:	ff 1f       	adc	r31, r31
    8c94:	e4 52       	subi	r30, 0x24	; 36
    8c96:	f7 4f       	sbci	r31, 0xF7	; 247
    8c98:	a0 83       	st	Z, r26
    8c9a:	b1 83       	std	Z+1, r27	; 0x01
							irCommStartDiffIndexTemp++;
    8c9c:	8f 5f       	subi	r24, 0xFF	; 255
    8c9e:	80 93 17 05 	sts	0x0517, r24
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    8ca2:	24 17       	cp	r18, r20
    8ca4:	35 07       	cpc	r19, r21
    8ca6:	09 f4       	brne	.+2      	; 0x8caa <irCommTasks+0xc9e>
    8ca8:	2c c1       	rjmp	.+600    	; 0x8f02 <irCommTasks+0xef6>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    8caa:	26 17       	cp	r18, r22
    8cac:	37 07       	cpc	r19, r23
    8cae:	09 f4       	brne	.+2      	; 0x8cb2 <irCommTasks+0xca6>
    8cb0:	81 c1       	rjmp	.+770    	; 0x8fb4 <irCommTasks+0xfa8>
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
    8cb2:	30 93 2b 05 	sts	0x052B, r19
    8cb6:	20 93 2a 05 	sts	0x052A, r18
							irCommTempMax = irCommMaxSensorSignal[i];
    8cba:	30 93 29 05 	sts	0x0529, r19
    8cbe:	20 93 28 05 	sts	0x0528, r18
							irCommComputeShift = 2;
    8cc2:	30 92 2d 05 	sts	0x052D, r3
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    8cc6:	40 92 2c 05 	sts	0x052C, r4
							irCommRxStartPeakDuration = 0;
    8cca:	10 92 3e 05 	sts	0x053E, r1
    8cce:	72 e0       	ldi	r23, 0x02	; 2
    8cd0:	87 2e       	mov	r8, r23
    8cd2:	54 2c       	mov	r5, r4
    8cd4:	81 cf       	rjmp	.-254    	; 0x8bd8 <irCommTasks+0xbcc>
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    8cd6:	80 91 3e 05 	lds	r24, 0x053E
    8cda:	8f 5f       	subi	r24, 0xFF	; 255
    8cdc:	80 93 3e 05 	sts	0x053E, r24
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8ce0:	60 91 2a 05 	lds	r22, 0x052A
    8ce4:	70 91 2b 05 	lds	r23, 0x052B
    8ce8:	26 17       	cp	r18, r22
    8cea:	37 07       	cpc	r19, r23
    8cec:	2c f4       	brge	.+10     	; 0x8cf8 <irCommTasks+0xcec>
							irCommTempMin = irCommMaxSensorSignal[i];
    8cee:	30 93 2b 05 	sts	0x052B, r19
    8cf2:	20 93 2a 05 	sts	0x052A, r18
    8cf6:	b9 01       	movw	r22, r18
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    8cf8:	40 91 28 05 	lds	r20, 0x0528
    8cfc:	50 91 29 05 	lds	r21, 0x0529
    8d00:	42 17       	cp	r20, r18
    8d02:	53 07       	cpc	r21, r19
    8d04:	2c f4       	brge	.+10     	; 0x8d10 <irCommTasks+0xd04>
							irCommTempMax = irCommMaxSensorSignal[i];
    8d06:	30 93 29 05 	sts	0x0529, r19
    8d0a:	20 93 28 05 	sts	0x0528, r18
    8d0e:	a9 01       	movw	r20, r18
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8d10:	ca 01       	movw	r24, r20
    8d12:	86 1b       	sub	r24, r22
    8d14:	97 0b       	sbc	r25, r23
    8d16:	80 35       	cpi	r24, 0x50	; 80
    8d18:	91 05       	cpc	r25, r1
    8d1a:	0c f4       	brge	.+2      	; 0x8d1e <irCommTasks+0xd12>
    8d1c:	5d cf       	rjmp	.-326    	; 0x8bd8 <irCommTasks+0xbcc>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    8d1e:	24 17       	cp	r18, r20
    8d20:	35 07       	cpc	r19, r21
    8d22:	09 f4       	brne	.+2      	; 0x8d26 <irCommTasks+0xd1a>
    8d24:	41 c1       	rjmp	.+642    	; 0x8fa8 <irCommTasks+0xf9c>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    8d26:	26 17       	cp	r18, r22
    8d28:	37 07       	cpc	r19, r23
    8d2a:	09 f0       	breq	.+2      	; 0x8d2e <irCommTasks+0xd22>
    8d2c:	55 cf       	rjmp	.-342    	; 0x8bd8 <irCommTasks+0xbcc>
    8d2e:	80 91 3d 05 	lds	r24, 0x053D
    8d32:	88 23       	and	r24, r24
    8d34:	09 f0       	breq	.+2      	; 0x8d38 <irCommTasks+0xd2c>
    8d36:	50 cf       	rjmp	.-352    	; 0x8bd8 <irCommTasks+0xbcc>
								irCommComputeShift = 0;
    8d38:	10 92 2d 05 	sts	0x052D, r1
    8d3c:	88 24       	eor	r8, r8
    8d3e:	4c cf       	rjmp	.-360    	; 0x8bd8 <irCommTasks+0xbcc>
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8d40:	b7 01       	movw	r22, r14
    8d42:	c8 01       	movw	r24, r16
    8d44:	e0 92 24 05 	sts	0x0524, r14
    8d48:	f0 92 25 05 	sts	0x0525, r15
    8d4c:	00 93 26 05 	sts	0x0526, r16
    8d50:	10 93 27 05 	sts	0x0527, r17
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    8d54:	20 91 18 05 	lds	r18, 0x0518
    8d58:	22 30       	cpi	r18, 0x02	; 2
    8d5a:	08 f0       	brcs	.+2      	; 0x8d5e <irCommTasks+0xd52>
    8d5c:	21 e0       	ldi	r18, 0x01	; 1
					irCommComputeShiftIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
    8d5e:	e2 2f       	mov	r30, r18
    8d60:	f0 e0       	ldi	r31, 0x00	; 0
    8d62:	e4 57       	subi	r30, 0x74	; 116
    8d64:	fa 4f       	sbci	r31, 0xFA	; 250
    8d66:	80 82       	st	Z, r8
				irCommComputeShiftIndexTemp++;
    8d68:	2f 5f       	subi	r18, 0xFF	; 255
    8d6a:	20 93 18 05 	sts	0x0518, r18
				
				if(irCommShiftCountIndexTemp>1) {
    8d6e:	20 91 15 05 	lds	r18, 0x0515
    8d72:	22 30       	cpi	r18, 0x02	; 2
    8d74:	08 f0       	brcs	.+2      	; 0x8d78 <irCommTasks+0xd6c>
    8d76:	21 e0       	ldi	r18, 0x01	; 1
					irCommShiftCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
    8d78:	e2 2f       	mov	r30, r18
    8d7a:	f0 e0       	ldi	r31, 0x00	; 0
    8d7c:	e5 56       	subi	r30, 0x65	; 101
    8d7e:	f4 4f       	sbci	r31, 0xF4	; 244
    8d80:	50 82       	st	Z, r5
				irCommShiftCountIndexTemp++;
    8d82:	2f 5f       	subi	r18, 0xFF	; 255
    8d84:	20 93 15 05 	sts	0x0515, r18
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    8d88:	20 91 19 05 	lds	r18, 0x0519
    8d8c:	22 30       	cpi	r18, 0x02	; 2
    8d8e:	08 f0       	brcs	.+2      	; 0x8d92 <irCommTasks+0xd86>
    8d90:	21 e0       	ldi	r18, 0x01	; 1
					irCommRxPeakHighToLowIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
    8d92:	e2 2f       	mov	r30, r18
    8d94:	f0 e0       	ldi	r31, 0x00	; 0
    8d96:	e7 51       	subi	r30, 0x17	; 23
    8d98:	fa 4f       	sbci	r31, 0xFA	; 250
    8d9a:	10 91 3d 05 	lds	r17, 0x053D
    8d9e:	10 83       	st	Z, r17
				irCommRxPeakHighToLowIndexTemp++;
    8da0:	2f 5f       	subi	r18, 0xFF	; 255
    8da2:	20 93 19 05 	sts	0x0519, r18
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    8da6:	20 91 1a 05 	lds	r18, 0x051A
    8daa:	22 30       	cpi	r18, 0x02	; 2
    8dac:	08 f0       	brcs	.+2      	; 0x8db0 <irCommTasks+0xda4>
    8dae:	21 e0       	ldi	r18, 0x01	; 1
					irCommRxStartPeakDurationIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartPeakDurationTemp[irCommRxStartPeakDurationIndexTemp] = irCommRxStartPeakDuration;
    8db0:	e2 2f       	mov	r30, r18
    8db2:	f0 e0       	ldi	r31, 0x00	; 0
    8db4:	e5 5d       	subi	r30, 0xD5	; 213
    8db6:	f8 4f       	sbci	r31, 0xF8	; 248
    8db8:	00 91 3e 05 	lds	r16, 0x053E
    8dbc:	00 83       	st	Z, r16
				irCommRxStartPeakDurationIndexTemp++;
    8dbe:	2f 5f       	subi	r18, 0xFF	; 255
    8dc0:	20 93 1a 05 	sts	0x051A, r18
					
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    8dc4:	24 e1       	ldi	r18, 0x14	; 20
    8dc6:	30 e0       	ldi	r19, 0x00	; 0
    8dc8:	40 e0       	ldi	r20, 0x00	; 0
    8dca:	50 e0       	ldi	r21, 0x00	; 0
    8dcc:	0e 94 a1 4e 	call	0x9d42	; 0x9d42 <__divmodsi4>
    8dd0:	a9 01       	movw	r20, r18
    8dd2:	30 93 2f 05 	sts	0x052F, r19
    8dd6:	20 93 2e 05 	sts	0x052E, r18

				if(irCommProxMeanIndexTemp>1) {
    8dda:	80 91 11 05 	lds	r24, 0x0511
    8dde:	82 30       	cpi	r24, 0x02	; 2
    8de0:	08 f0       	brcs	.+2      	; 0x8de4 <irCommTasks+0xdd8>
    8de2:	81 e0       	ldi	r24, 0x01	; 1
					irCommProxMeanIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
    8de4:	e8 2f       	mov	r30, r24
    8de6:	f0 e0       	ldi	r31, 0x00	; 0
    8de8:	ee 0f       	add	r30, r30
    8dea:	ff 1f       	adc	r31, r31
    8dec:	e1 57       	subi	r30, 0x71	; 113
    8dee:	fa 4f       	sbci	r31, 0xFA	; 250
    8df0:	51 83       	std	Z+1, r21	; 0x01
    8df2:	40 83       	st	Z, r20
				irCommProxMeanIndexTemp++;
    8df4:	8f 5f       	subi	r24, 0xFF	; 255
    8df6:	80 93 11 05 	sts	0x0511, r24
    8dfa:	30 91 0e 05 	lds	r19, 0x050E
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
    8dfe:	67 e2       	ldi	r22, 0x27	; 39
    8e00:	d5 01       	movw	r26, r10
    8e02:	8d 91       	ld	r24, X+
    8e04:	9c 91       	ld	r25, X
    8e06:	11 97       	sbiw	r26, 0x01	; 1
    8e08:	84 1b       	sub	r24, r20
    8e0a:	95 0b       	sbc	r25, r21
    8e0c:	8d 93       	st	X+, r24
    8e0e:	9c 93       	st	X, r25
    8e10:	27 e2       	ldi	r18, 0x27	; 39
    8e12:	36 17       	cp	r19, r22
    8e14:	08 f4       	brcc	.+2      	; 0x8e18 <irCommTasks+0xe0c>
    8e16:	23 2f       	mov	r18, r19

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
						irCommMaxSensorSignalFiltIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalFiltTemp[irCommMaxSensorSignalFiltIndexTemp] = irCommMaxSensorSignal[i];
    8e18:	e2 2f       	mov	r30, r18
    8e1a:	f0 e0       	ldi	r31, 0x00	; 0
    8e1c:	ee 0f       	add	r30, r30
    8e1e:	ff 1f       	adc	r31, r31
    8e20:	e9 56       	subi	r30, 0x69	; 105
    8e22:	fa 4f       	sbci	r31, 0xFA	; 250
    8e24:	91 83       	std	Z+1, r25	; 0x01
    8e26:	80 83       	st	Z, r24
					irCommMaxSensorSignalFiltIndexTemp++;
    8e28:	32 2f       	mov	r19, r18
    8e2a:	3f 5f       	subi	r19, 0xFF	; 255
    8e2c:	e2 e0       	ldi	r30, 0x02	; 2
    8e2e:	f0 e0       	ldi	r31, 0x00	; 0
    8e30:	ae 0e       	add	r10, r30
    8e32:	bf 1e       	adc	r11, r31
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8e34:	f1 e8       	ldi	r31, 0x81	; 129
    8e36:	af 16       	cp	r10, r31
    8e38:	fb e0       	ldi	r31, 0x0B	; 11
    8e3a:	bf 06       	cpc	r11, r31
    8e3c:	09 f7       	brne	.-62     	; 0x8e00 <irCommTasks+0xdf4>
    8e3e:	30 93 0e 05 	sts	0x050E, r19
					irCommMaxSensorSignalFiltIndexTemp++;
					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    8e42:	80 91 59 0b 	lds	r24, 0x0B59
    8e46:	90 91 5a 0b 	lds	r25, 0x0B5A
    8e4a:	18 16       	cp	r1, r24
    8e4c:	19 06       	cpc	r1, r25
    8e4e:	0c f0       	brlt	.+2      	; 0x8e52 <irCommTasks+0xe46>
    8e50:	5b c1       	rjmp	.+694    	; 0x9108 <irCommTasks+0x10fc>
					irCommSignalState = 1;
    8e52:	81 e0       	ldi	r24, 0x01	; 1
    8e54:	80 93 30 05 	sts	0x0530, r24
    8e58:	28 2f       	mov	r18, r24
				} else {
					irCommSignalState = -1;
    8e5a:	eb e5       	ldi	r30, 0x5B	; 91
    8e5c:	fb e0       	ldi	r31, 0x0B	; 11
    8e5e:	30 e0       	ldi	r19, 0x00	; 0
    8e60:	07 c0       	rjmp	.+14     	; 0x8e70 <irCommTasks+0xe64>
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    8e62:	27 fd       	sbrc	r18, 7
    8e64:	0f c0       	rjmp	.+30     	; 0x8e84 <irCommTasks+0xe78>
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
							irCommSwitchCount++;
    8e66:	32 96       	adiw	r30, 0x02	; 2
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8e68:	8b e0       	ldi	r24, 0x0B	; 11
    8e6a:	e1 38       	cpi	r30, 0x81	; 129
    8e6c:	f8 07       	cpc	r31, r24
    8e6e:	69 f0       	breq	.+26     	; 0x8e8a <irCommTasks+0xe7e>
					if(irCommMaxSensorSignal[i] > 0) {
    8e70:	80 81       	ld	r24, Z
    8e72:	91 81       	ldd	r25, Z+1	; 0x01
    8e74:	18 16       	cp	r1, r24
    8e76:	19 06       	cpc	r1, r25
    8e78:	a4 f3       	brlt	.-24     	; 0x8e62 <irCommTasks+0xe56>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    8e7a:	12 16       	cp	r1, r18
    8e7c:	a4 f7       	brge	.-24     	; 0x8e66 <irCommTasks+0xe5a>
							irCommSignalState = -1;
							irCommSwitchCount++;
    8e7e:	3f 5f       	subi	r19, 0xFF	; 255
    8e80:	2f ef       	ldi	r18, 0xFF	; 255
    8e82:	f1 cf       	rjmp	.-30     	; 0x8e66 <irCommTasks+0xe5a>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    8e84:	3f 5f       	subi	r19, 0xFF	; 255
    8e86:	21 e0       	ldi	r18, 0x01	; 1
    8e88:	ee cf       	rjmp	.-36     	; 0x8e66 <irCommTasks+0xe5a>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8e8a:	30 93 31 05 	sts	0x0531, r19
    8e8e:	20 93 30 05 	sts	0x0530, r18
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    8e92:	80 91 12 05 	lds	r24, 0x0512
    8e96:	82 30       	cpi	r24, 0x02	; 2
    8e98:	08 f0       	brcs	.+2      	; 0x8e9c <irCommTasks+0xe90>
    8e9a:	81 e0       	ldi	r24, 0x01	; 1
					irCommSwitchCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommSwitchCountTemp[irCommSwitchCountIndexTemp] = irCommSwitchCount;
    8e9c:	e8 2f       	mov	r30, r24
    8e9e:	f0 e0       	ldi	r31, 0x00	; 0
    8ea0:	ef 58       	subi	r30, 0x8F	; 143
    8ea2:	fa 4f       	sbci	r31, 0xFA	; 250
    8ea4:	30 83       	st	Z, r19
				irCommSwitchCountIndexTemp++;
    8ea6:	8f 5f       	subi	r24, 0xFF	; 255
    8ea8:	80 93 12 05 	sts	0x0512, r24
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
    8eac:	11 30       	cpi	r17, 0x01	; 1
    8eae:	09 f4       	brne	.+2      	; 0x8eb2 <irCommTasks+0xea6>
    8eb0:	03 c1       	rjmp	.+518    	; 0x90b8 <irCommTasks+0x10ac>
							resetDebugVariables();				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
    8eb2:	90 91 3c 05 	lds	r25, 0x053C
    8eb6:	91 30       	cpi	r25, 0x01	; 1
    8eb8:	09 f4       	brne	.+2      	; 0x8ebc <irCommTasks+0xeb0>
    8eba:	3a c1       	rjmp	.+628    	; 0x9130 <irCommTasks+0x1124>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    8ebc:	32 30       	cpi	r19, 0x02	; 2
    8ebe:	09 f4       	brne	.+2      	; 0x8ec2 <irCommTasks+0xeb6>
    8ec0:	96 c1       	rjmp	.+812    	; 0x91ee <irCommTasks+0x11e2>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    8ec2:	31 30       	cpi	r19, 0x01	; 1
    8ec4:	09 f4       	brne	.+2      	; 0x8ec8 <irCommTasks+0xebc>
    8ec6:	36 c2       	rjmp	.+1132   	; 0x9334 <irCommTasks+0x1328>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							currentProx = 0;
    8ec8:	10 92 40 02 	sts	0x0240, r1
							adcSaveDataTo = SKIP_SAMPLE;
    8ecc:	85 e0       	ldi	r24, 0x05	; 5
    8ece:	80 93 d5 02 	sts	0x02D5, r24
							adcSamplingState = 0;
    8ed2:	10 92 d6 02 	sts	0x02D6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    8ed6:	10 92 f4 04 	sts	0x04F4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;
    8eda:	81 e0       	ldi	r24, 0x01	; 1
    8edc:	80 93 f5 04 	sts	0x04F5, r24

							if(irCommSyncStateIndexTemp>1) {
    8ee0:	90 91 1d 05 	lds	r25, 0x051D
    8ee4:	92 30       	cpi	r25, 0x02	; 2
    8ee6:	08 f0       	brcs	.+2      	; 0x8eea <irCommTasks+0xede>
    8ee8:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 15;
    8eea:	e9 2f       	mov	r30, r25
    8eec:	f0 e0       	ldi	r31, 0x00	; 0
    8eee:	e6 57       	subi	r30, 0x76	; 118
    8ef0:	fa 4f       	sbci	r31, 0xFA	; 250
    8ef2:	8f e0       	ldi	r24, 0x0F	; 15
    8ef4:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    8ef6:	9f 5f       	subi	r25, 0xFF	; 255
    8ef8:	90 93 1d 05 	sts	0x051D, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    8efc:	0e 94 5d 3f 	call	0x7eba	; 0x7eba <resetDebugVariables>
    8f00:	9e c8       	rjmp	.-3780   	; 0x803e <irCommTasks+0x32>
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
							irCommStartDiffIndexTemp++;
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    8f02:	10 92 3d 05 	sts	0x053D, r1
    8f06:	d5 ce       	rjmp	.-598    	; 0x8cb2 <irCommTasks+0xca6>
						}
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
    8f08:	80 91 3c 05 	lds	r24, 0x053C
    8f0c:	81 30       	cpi	r24, 0x01	; 1
    8f0e:	09 f4       	brne	.+2      	; 0x8f12 <irCommTasks+0xf06>
    8f10:	3d c1       	rjmp	.+634    	; 0x918c <irCommTasks+0x1180>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    8f12:	10 92 3c 05 	sts	0x053C, r1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					//updateRedLed(0);
					currentProx = 0;
    8f16:	10 92 40 02 	sts	0x0240, r1
					adcSaveDataTo = SKIP_SAMPLE;
    8f1a:	85 e0       	ldi	r24, 0x05	; 5
    8f1c:	80 93 d5 02 	sts	0x02D5, r24
					adcSamplingState = 0;
    8f20:	10 92 d6 02 	sts	0x02D6, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;					
    8f24:	10 92 f4 04 	sts	0x04F4, r1
					irCommState = IRCOMM_RX_IDLE_STATE;
    8f28:	81 e0       	ldi	r24, 0x01	; 1
    8f2a:	80 93 f5 04 	sts	0x04F5, r24

					//irCommState = IRCOMM_RX_DEBUG;
					//irCommAdcRxState = 12;
					//break;

					resetDebugVariables();
    8f2e:	0e 94 5d 3f 	call	0x7eba	; 0x7eba <resetDebugVariables>
    8f32:	85 c8       	rjmp	.-3830   	; 0x803e <irCommTasks+0x32>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8f34:	30 93 31 05 	sts	0x0531, r19
    8f38:	20 93 30 05 	sts	0x0530, r18
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    8f3c:	36 30       	cpi	r19, 0x06	; 6
    8f3e:	08 f4       	brcc	.+2      	; 0x8f42 <irCommTasks+0xf36>
    8f40:	63 c0       	rjmp	.+198    	; 0x9008 <irCommTasks+0xffc>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    8f42:	20 91 32 05 	lds	r18, 0x0532
    8f46:	e2 2f       	mov	r30, r18
    8f48:	f0 e0       	ldi	r31, 0x00	; 0
    8f4a:	e0 58       	subi	r30, 0x80	; 128
    8f4c:	fa 4f       	sbci	r31, 0xFA	; 250
    8f4e:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    8f50:	28 30       	cpi	r18, 0x08	; 8
    8f52:	28 f4       	brcc	.+10     	; 0x8f5e <irCommTasks+0xf52>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    8f54:	80 91 34 05 	lds	r24, 0x0534
    8f58:	88 0f       	add	r24, r24
    8f5a:	80 93 34 05 	sts	0x0534, r24
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    8f5e:	90 91 1f 05 	lds	r25, 0x051F
    8f62:	9a 30       	cpi	r25, 0x0A	; 10
    8f64:	20 f0       	brcs	.+8      	; 0x8f6e <irCommTasks+0xf62>
					irCommRxBitReceivedIndexTemp = 9;
    8f66:	89 e0       	ldi	r24, 0x09	; 9
    8f68:	80 93 1f 05 	sts	0x051F, r24
    8f6c:	99 e0       	ldi	r25, 0x09	; 9
					//updateRedLed(0);
				}
				irCommRxBitReceivedTemp[irCommRxBitReceivedIndexTemp] = irCommRxBitReceived[irCommRxBitCount];
    8f6e:	a9 2f       	mov	r26, r25
    8f70:	b0 e0       	ldi	r27, 0x00	; 0
    8f72:	a1 58       	subi	r26, 0x81	; 129
    8f74:	b7 4f       	sbci	r27, 0xF7	; 247
    8f76:	e2 2f       	mov	r30, r18
    8f78:	f0 e0       	ldi	r31, 0x00	; 0
    8f7a:	e0 58       	subi	r30, 0x80	; 128
    8f7c:	fa 4f       	sbci	r31, 0xFA	; 250
    8f7e:	80 81       	ld	r24, Z
    8f80:	8c 93       	st	X, r24
				irCommRxBitReceivedIndexTemp++;
    8f82:	9f 5f       	subi	r25, 0xFF	; 255
    8f84:	90 93 1f 05 	sts	0x051F, r25

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
    8f88:	82 2f       	mov	r24, r18
    8f8a:	8f 5f       	subi	r24, 0xFF	; 255
    8f8c:	80 93 32 05 	sts	0x0532, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    8f90:	8a 30       	cpi	r24, 0x0A	; 10
    8f92:	09 f4       	brne	.+2      	; 0x8f96 <irCommTasks+0xf8a>
    8f94:	f2 c0       	rjmp	.+484    	; 0x917a <irCommTasks+0x116e>
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    8f96:	85 e0       	ldi	r24, 0x05	; 5
    8f98:	80 93 f5 04 	sts	0x04F5, r24

					if(irCommStateIndexTemp>13) {
    8f9c:	90 91 1c 05 	lds	r25, 0x051C
    8fa0:	9e 30       	cpi	r25, 0x0E	; 14
    8fa2:	08 f0       	brcs	.+2      	; 0x8fa6 <irCommTasks+0xf9a>
    8fa4:	bd cb       	rjmp	.-2182   	; 0x8720 <irCommTasks+0x714>
    8fa6:	c0 cb       	rjmp	.-2176   	; 0x8728 <irCommTasks+0x71c>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    8fa8:	80 91 3d 05 	lds	r24, 0x053D
    8fac:	81 30       	cpi	r24, 0x01	; 1
    8fae:	09 f0       	breq	.+2      	; 0x8fb2 <irCommTasks+0xfa6>
    8fb0:	ba ce       	rjmp	.-652    	; 0x8d26 <irCommTasks+0xd1a>
    8fb2:	c2 ce       	rjmp	.-636    	; 0x8d38 <irCommTasks+0xd2c>
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    8fb4:	20 92 3d 05 	sts	0x053D, r2
    8fb8:	7c ce       	rjmp	.-776    	; 0x8cb2 <irCommTasks+0xca6>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    8fba:	2f 5f       	subi	r18, 0xFF	; 255
    8fbc:	f7 c8       	rjmp	.-3602   	; 0x81ac <irCommTasks+0x1a0>
    8fbe:	2f 5f       	subi	r18, 0xFF	; 255
    8fc0:	e8 c8       	rjmp	.-3632   	; 0x8192 <irCommTasks+0x186>
    8fc2:	2f 5f       	subi	r18, 0xFF	; 255
    8fc4:	d5 c8       	rjmp	.-3670   	; 0x8170 <irCommTasks+0x164>
    8fc6:	2f 5f       	subi	r18, 0xFF	; 255
    8fc8:	c0 c8       	rjmp	.-3712   	; 0x814a <irCommTasks+0x13e>
    8fca:	2f 5f       	subi	r18, 0xFF	; 255
    8fcc:	ad c8       	rjmp	.-3750   	; 0x8128 <irCommTasks+0x11c>
    8fce:	2f 5f       	subi	r18, 0xFF	; 255
    8fd0:	9c c8       	rjmp	.-3784   	; 0x810a <irCommTasks+0xfe>
    8fd2:	20 91 4b 05 	lds	r18, 0x054B
    8fd6:	2f 5f       	subi	r18, 0xFF	; 255
    8fd8:	8b c8       	rjmp	.-3818   	; 0x80f0 <irCommTasks+0xe4>
    8fda:	81 e0       	ldi	r24, 0x01	; 1
    8fdc:	80 93 4b 05 	sts	0x054B, r24
    8fe0:	7a c8       	rjmp	.-3852   	; 0x80d6 <irCommTasks+0xca>

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
    8fe2:	80 ef       	ldi	r24, 0xF0	; 240
    8fe4:	90 e0       	ldi	r25, 0x00	; 0
    8fe6:	90 93 4f 05 	sts	0x054F, r25
    8fea:	80 93 4e 05 	sts	0x054E, r24
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
    8fee:	81 e0       	ldi	r24, 0x01	; 1
    8ff0:	80 93 50 05 	sts	0x0550, r24
    8ff4:	bc cb       	rjmp	.-2184   	; 0x876e <irCommTasks+0x762>

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
						irCommRxNumReceivingSensors++;
    8ff6:	40 91 43 05 	lds	r20, 0x0543
    8ffa:	4f 5f       	subi	r20, 0xFF	; 255
    8ffc:	40 93 43 05 	sts	0x0543, r20
    9000:	c0 c9       	rjmp	.-3200   	; 0x8382 <irCommTasks+0x376>
				if(irCommTxBitCount == 0) {
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
						PORTA = 0xAA;
					} else {
						PORTA = 0x55;
    9002:	85 e5       	ldi	r24, 0x55	; 85
    9004:	82 b9       	out	0x02, r24	; 2
    9006:	bc cb       	rjmp	.-2184   	; 0x8780 <irCommTasks+0x774>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    9008:	33 30       	cpi	r19, 0x03	; 3
    900a:	08 f4       	brcc	.+2      	; 0x900e <irCommTasks+0x1002>
    900c:	84 cf       	rjmp	.-248    	; 0x8f16 <irCommTasks+0xf0a>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    900e:	20 91 32 05 	lds	r18, 0x0532
    9012:	e2 2f       	mov	r30, r18
    9014:	f0 e0       	ldi	r31, 0x00	; 0
    9016:	e0 58       	subi	r30, 0x80	; 128
    9018:	fa 4f       	sbci	r31, 0xFA	; 250
    901a:	81 e0       	ldi	r24, 0x01	; 1
    901c:	80 83       	st	Z, r24
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    901e:	28 30       	cpi	r18, 0x08	; 8
    9020:	08 f0       	brcs	.+2      	; 0x9024 <irCommTasks+0x1018>
    9022:	9d cf       	rjmp	.-198    	; 0x8f5e <irCommTasks+0xf52>
						irCommRxCrc++;
    9024:	80 91 23 05 	lds	r24, 0x0523
    9028:	8f 5f       	subi	r24, 0xFF	; 255
    902a:	80 93 23 05 	sts	0x0523, r24
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    902e:	80 91 34 05 	lds	r24, 0x0534
    9032:	88 0f       	add	r24, r24
						irCommRxByte += 1;
    9034:	8f 5f       	subi	r24, 0xFF	; 255
    9036:	80 93 34 05 	sts	0x0534, r24
    903a:	91 cf       	rjmp	.-222    	; 0x8f5e <irCommTasks+0xf52>
								irCommRxMaxSensor = 0;
							}
							i++;
						}
					} else {	// listen from the same sensor when a start bit is detected
						irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    903c:	40 91 41 05 	lds	r20, 0x0541
    9040:	50 91 42 05 	lds	r21, 0x0542
    9044:	fa 01       	movw	r30, r20
    9046:	ee 0f       	add	r30, r30
    9048:	ff 1f       	adc	r31, r31
    904a:	de 01       	movw	r26, r28
    904c:	ae 0f       	add	r26, r30
    904e:	bf 1f       	adc	r27, r31
    9050:	e6 0f       	add	r30, r22
    9052:	f7 1f       	adc	r31, r23
    9054:	8d 91       	ld	r24, X+
    9056:	9c 91       	ld	r25, X
    9058:	20 81       	ld	r18, Z
    905a:	31 81       	ldd	r19, Z+1	; 0x01
    905c:	82 1b       	sub	r24, r18
    905e:	93 0b       	sbc	r25, r19
    9060:	90 93 40 05 	sts	0x0540, r25
    9064:	80 93 3f 05 	sts	0x053F, r24
    9068:	fa ca       	rjmp	.-2572   	; 0x865e <irCommTasks+0x652>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    906a:	10 92 3c 05 	sts	0x053C, r1
						currentProx = 0;
    906e:	10 92 40 02 	sts	0x0240, r1
						adcSaveDataTo = SKIP_SAMPLE;
    9072:	85 e0       	ldi	r24, 0x05	; 5
    9074:	80 93 d5 02 	sts	0x02D5, r24
						adcSamplingState = 0;
    9078:	10 92 d6 02 	sts	0x02D6, r1
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    907c:	10 92 f4 04 	sts	0x04F4, r1
						irCommState = IRCOMM_RX_IDLE_STATE;
    9080:	81 e0       	ldi	r24, 0x01	; 1
    9082:	80 93 f5 04 	sts	0x04F5, r24
						resetDebugVariables();
    9086:	0e 94 5d 3f 	call	0x7eba	; 0x7eba <resetDebugVariables>
					//}			
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
    908a:	80 91 41 05 	lds	r24, 0x0541
    908e:	90 91 42 05 	lds	r25, 0x0542
    9092:	87 30       	cpi	r24, 0x07	; 7
    9094:	91 05       	cpc	r25, r1
    9096:	0c f0       	brlt	.+2      	; 0x909a <irCommTasks+0x108e>
    9098:	8d c0       	rjmp	.+282    	; 0x91b4 <irCommTasks+0x11a8>
						irCommRxMaxSensor++;
    909a:	01 96       	adiw	r24, 0x01	; 1
    909c:	90 93 42 05 	sts	0x0542, r25
    90a0:	80 93 41 05 	sts	0x0541, r24
    90a4:	c0 91 6a 05 	lds	r28, 0x056A
    90a8:	d0 91 6b 05 	lds	r29, 0x056B
    90ac:	60 91 56 05 	lds	r22, 0x0556
    90b0:	70 91 57 05 	lds	r23, 0x0557
    90b4:	ac 01       	movw	r20, r24
    90b6:	d3 ca       	rjmp	.-2650   	; 0x865e <irCommTasks+0x652>
				irCommSwitchCountIndexTemp++;
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    90b8:	80 91 3c 05 	lds	r24, 0x053C
    90bc:	81 30       	cpi	r24, 0x01	; 1
    90be:	09 f4       	brne	.+2      	; 0x90c2 <irCommTasks+0x10b6>
    90c0:	14 c1       	rjmp	.+552    	; 0x92ea <irCommTasks+0x12de>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    90c2:	32 30       	cpi	r19, 0x02	; 2
    90c4:	09 f4       	brne	.+2      	; 0x90c8 <irCommTasks+0x10bc>
    90c6:	6b c1       	rjmp	.+726    	; 0x939e <irCommTasks+0x1392>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
    90c8:	31 30       	cpi	r19, 0x01	; 1
    90ca:	09 f4       	brne	.+2      	; 0x90ce <irCommTasks+0x10c2>
    90cc:	88 c1       	rjmp	.+784    	; 0x93de <irCommTasks+0x13d2>
								irCommState = IRCOMM_RX_IDLE_STATE;

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							currentProx = 0;
    90ce:	10 92 40 02 	sts	0x0240, r1
							adcSaveDataTo = SKIP_SAMPLE;
    90d2:	85 e0       	ldi	r24, 0x05	; 5
    90d4:	80 93 d5 02 	sts	0x02D5, r24
							adcSamplingState = 0;
    90d8:	10 92 d6 02 	sts	0x02D6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    90dc:	10 92 f4 04 	sts	0x04F4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    90e0:	10 93 f5 04 	sts	0x04F5, r17

							if(irCommSyncStateIndexTemp>1) {
    90e4:	90 91 1d 05 	lds	r25, 0x051D
    90e8:	92 30       	cpi	r25, 0x02	; 2
    90ea:	08 f0       	brcs	.+2      	; 0x90ee <irCommTasks+0x10e2>
    90ec:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 11;
    90ee:	e9 2f       	mov	r30, r25
    90f0:	f0 e0       	ldi	r31, 0x00	; 0
    90f2:	e6 57       	subi	r30, 0x76	; 118
    90f4:	fa 4f       	sbci	r31, 0xFA	; 250
    90f6:	8b e0       	ldi	r24, 0x0B	; 11
    90f8:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    90fa:	9f 5f       	subi	r25, 0xFF	; 255
    90fc:	90 93 1d 05 	sts	0x051D, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9100:	0e 94 5d 3f 	call	0x7eba	; 0x7eba <resetDebugVariables>
    9104:	0c 94 1f 40 	jmp	0x803e	; 0x803e <irCommTasks+0x32>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    9108:	8f ef       	ldi	r24, 0xFF	; 255
    910a:	80 93 30 05 	sts	0x0530, r24
    910e:	28 2f       	mov	r18, r24
    9110:	a4 ce       	rjmp	.-696    	; 0x8e5a <irCommTasks+0xe4e>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    9112:	8c e3       	ldi	r24, 0x3C	; 60
    9114:	90 e0       	ldi	r25, 0x00	; 0
    9116:	90 93 4f 05 	sts	0x054F, r25
    911a:	80 93 4e 05 	sts	0x054E, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    911e:	84 e0       	ldi	r24, 0x04	; 4
    9120:	80 93 50 05 	sts	0x0550, r24
    9124:	24 cb       	rjmp	.-2488   	; 0x876e <irCommTasks+0x762>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    9126:	8f ef       	ldi	r24, 0xFF	; 255
    9128:	80 93 30 05 	sts	0x0530, r24
    912c:	28 2f       	mov	r18, r24
    912e:	f8 c8       	rjmp	.-3600   	; 0x8320 <irCommTasks+0x314>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    9130:	32 30       	cpi	r19, 0x02	; 2
    9132:	09 f4       	brne	.+2      	; 0x9136 <irCommTasks+0x112a>
    9134:	29 c1       	rjmp	.+594    	; 0x9388 <irCommTasks+0x137c>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    9136:	31 30       	cpi	r19, 0x01	; 1
    9138:	09 f4       	brne	.+2      	; 0x913c <irCommTasks+0x1130>
    913a:	9a c1       	rjmp	.+820    	; 0x9470 <irCommTasks+0x1464>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    913c:	10 92 3c 05 	sts	0x053C, r1
							currentProx = 0;
    9140:	10 92 40 02 	sts	0x0240, r1
							adcSaveDataTo = SKIP_SAMPLE;
    9144:	85 e0       	ldi	r24, 0x05	; 5
    9146:	80 93 d5 02 	sts	0x02D5, r24
							adcSamplingState = 0;
    914a:	10 92 d6 02 	sts	0x02D6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    914e:	10 92 f4 04 	sts	0x04F4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    9152:	90 93 f5 04 	sts	0x04F5, r25

							if(irCommSyncStateIndexTemp>1) {
    9156:	90 91 1d 05 	lds	r25, 0x051D
    915a:	92 30       	cpi	r25, 0x02	; 2
    915c:	08 f0       	brcs	.+2      	; 0x9160 <irCommTasks+0x1154>
    915e:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 13;
    9160:	e9 2f       	mov	r30, r25
    9162:	f0 e0       	ldi	r31, 0x00	; 0
    9164:	e6 57       	subi	r30, 0x76	; 118
    9166:	fa 4f       	sbci	r31, 0xFA	; 250
    9168:	8d e0       	ldi	r24, 0x0D	; 13
    916a:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    916c:	9f 5f       	subi	r25, 0xFF	; 255
    916e:	90 93 1d 05 	sts	0x051D, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9172:	0e 94 5d 3f 	call	0x7eba	; 0x7eba <resetDebugVariables>
    9176:	0c 94 1f 40 	jmp	0x803e	; 0x803e <irCommTasks+0x32>

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    917a:	87 e0       	ldi	r24, 0x07	; 7
    917c:	80 93 f5 04 	sts	0x04F5, r24

					if(irCommStateIndexTemp>13) {
    9180:	90 91 1c 05 	lds	r25, 0x051C
    9184:	9e 30       	cpi	r25, 0x0E	; 14
    9186:	08 f0       	brcs	.+2      	; 0x918a <irCommTasks+0x117e>
    9188:	cb ca       	rjmp	.-2666   	; 0x8720 <irCommTasks+0x714>
    918a:	ce ca       	rjmp	.-2660   	; 0x8728 <irCommTasks+0x71c>
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
    918c:	47 30       	cpi	r20, 0x07	; 7
    918e:	51 05       	cpc	r21, r1
    9190:	0c f0       	brlt	.+2      	; 0x9194 <irCommTasks+0x1188>
    9192:	f5 c0       	rjmp	.+490    	; 0x937e <irCommTasks+0x1372>
							irCommRxMaxSensor++;
    9194:	4f 5f       	subi	r20, 0xFF	; 255
    9196:	5f 4f       	sbci	r21, 0xFF	; 255
    9198:	50 93 42 05 	sts	0x0542, r21
    919c:	40 93 41 05 	sts	0x0541, r20
    91a0:	b8 ce       	rjmp	.-656    	; 0x8f12 <irCommTasks+0xf06>
					if(irCommRxStartBitDetected==0) {
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    91a2:	10 92 42 05 	sts	0x0542, r1
    91a6:	10 92 41 05 	sts	0x0541, r1
    91aa:	40 91 41 05 	lds	r20, 0x0541
    91ae:	50 91 42 05 	lds	r21, 0x0542
    91b2:	5e c9       	rjmp	.-3396   	; 0x8470 <irCommTasks+0x464>
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
    91b4:	10 92 42 05 	sts	0x0542, r1
    91b8:	10 92 41 05 	sts	0x0541, r1
    91bc:	c0 91 6a 05 	lds	r28, 0x056A
    91c0:	d0 91 6b 05 	lds	r29, 0x056B
    91c4:	60 91 56 05 	lds	r22, 0x0556
    91c8:	70 91 57 05 	lds	r23, 0x0557
    91cc:	40 e0       	ldi	r20, 0x00	; 0
    91ce:	50 e0       	ldi	r21, 0x00	; 0
    91d0:	46 ca       	rjmp	.-2932   	; 0x865e <irCommTasks+0x652>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    91d2:	4f 5f       	subi	r20, 0xFF	; 255
    91d4:	5f 4f       	sbci	r21, 0xFF	; 255
    91d6:	50 93 42 05 	sts	0x0542, r21
    91da:	40 93 41 05 	sts	0x0541, r20
    91de:	86 c9       	rjmp	.-3316   	; 0x84ec <irCommTasks+0x4e0>
    91e0:	4f 5f       	subi	r20, 0xFF	; 255
    91e2:	5f 4f       	sbci	r21, 0xFF	; 255
    91e4:	50 93 42 05 	sts	0x0542, r21
    91e8:	40 93 41 05 	sts	0x0541, r20
    91ec:	60 c9       	rjmp	.-3392   	; 0x84ae <irCommTasks+0x4a2>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    91ee:	90 91 1d 05 	lds	r25, 0x051D
    91f2:	92 30       	cpi	r25, 0x02	; 2
    91f4:	08 f0       	brcs	.+2      	; 0x91f8 <irCommTasks+0x11ec>
    91f6:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 1;
    91f8:	e9 2f       	mov	r30, r25
    91fa:	f0 e0       	ldi	r31, 0x00	; 0
    91fc:	e6 57       	subi	r30, 0x76	; 118
    91fe:	fa 4f       	sbci	r31, 0xFA	; 250
    9200:	81 e0       	ldi	r24, 0x01	; 1
    9202:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    9204:	9f 5f       	subi	r25, 0xFF	; 255
    9206:	90 93 1d 05 	sts	0x051D, r25

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    920a:	95 2d       	mov	r25, r5
    920c:	96 5f       	subi	r25, 0xF6	; 246
    920e:	90 93 2c 05 	sts	0x052C, r25
							irCommRxPeakHighToLow = 0;
    9212:	10 92 3d 05 	sts	0x053D, r1
							irCommRxStartBitDetected = 0;
    9216:	10 92 3c 05 	sts	0x053C, r1
							irCommSecondBitSkipped = 0;
    921a:	10 92 35 05 	sts	0x0535, r1
							irCommShiftCounter = 0;
    921e:	10 92 36 05 	sts	0x0536, r1
							irCommRxBitCount = 0;	
    9222:	10 92 32 05 	sts	0x0532, r1
							irCommRxCrc = 0;	
    9226:	10 92 23 05 	sts	0x0523, r1
							irCommRxByte = 0;
    922a:	10 92 34 05 	sts	0x0534, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    922e:	84 e0       	ldi	r24, 0x04	; 4
    9230:	80 93 f5 04 	sts	0x04F5, r24
    9234:	59 2e       	mov	r5, r25
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    9236:	90 91 1c 05 	lds	r25, 0x051C
    923a:	9e 30       	cpi	r25, 0x0E	; 14
    923c:	20 f0       	brcs	.+8      	; 0x9246 <irCommTasks+0x123a>
					irCommStateIndexTemp = 13;
    923e:	8d e0       	ldi	r24, 0x0D	; 13
    9240:	80 93 1c 05 	sts	0x051C, r24
    9244:	9d e0       	ldi	r25, 0x0D	; 13
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
    9246:	80 91 f5 04 	lds	r24, 0x04F5
    924a:	e9 2f       	mov	r30, r25
    924c:	f0 e0       	ldi	r31, 0x00	; 0
    924e:	e4 5a       	subi	r30, 0xA4	; 164
    9250:	fa 4f       	sbci	r31, 0xFA	; 250
    9252:	80 83       	st	Z, r24
				irCommStateIndexTemp++;
    9254:	9f 5f       	subi	r25, 0xFF	; 255
    9256:	90 93 1c 05 	sts	0x051C, r25
				
				if(irCommShiftCountFinalIndexTemp>1) {
    925a:	80 91 16 05 	lds	r24, 0x0516
    925e:	82 30       	cpi	r24, 0x02	; 2
    9260:	08 f0       	brcs	.+2      	; 0x9264 <irCommTasks+0x1258>
    9262:	81 e0       	ldi	r24, 0x01	; 1
					irCommShiftCountFinalIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
    9264:	e8 2f       	mov	r30, r24
    9266:	f0 e0       	ldi	r31, 0x00	; 0
    9268:	eb 5a       	subi	r30, 0xAB	; 171
    926a:	f4 4f       	sbci	r31, 0xF4	; 244
    926c:	50 82       	st	Z, r5
				irCommShiftCountFinalIndexTemp++;
    926e:	8f 5f       	subi	r24, 0xFF	; 255
    9270:	80 93 16 05 	sts	0x0516, r24
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    9274:	90 91 1b 05 	lds	r25, 0x051B
    9278:	92 30       	cpi	r25, 0x02	; 2
    927a:	08 f0       	brcs	.+2      	; 0x927e <irCommTasks+0x1272>
    927c:	91 e0       	ldi	r25, 0x01	; 1
					irCommRxStartBitDetectedIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartBitDetectedTemp[irCommRxStartBitDetectedIndexTemp] = irCommRxStartBitDetected;
    927e:	e9 2f       	mov	r30, r25
    9280:	f0 e0       	ldi	r31, 0x00	; 0
    9282:	eb 56       	subi	r30, 0x6B	; 107
    9284:	fa 4f       	sbci	r31, 0xFA	; 250
    9286:	80 91 3c 05 	lds	r24, 0x053C
    928a:	80 83       	st	Z, r24
				irCommRxStartBitDetectedIndexTemp++;			
    928c:	9f 5f       	subi	r25, 0xFF	; 255
    928e:	90 93 1b 05 	sts	0x051B, r25
    9292:	0c 94 1f 40 	jmp	0x803e	; 0x803e <irCommTasks+0x32>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    9296:	4f 5f       	subi	r20, 0xFF	; 255
    9298:	5f 4f       	sbci	r21, 0xFF	; 255
    929a:	50 93 42 05 	sts	0x0542, r21
    929e:	40 93 41 05 	sts	0x0541, r20
    92a2:	43 c9       	rjmp	.-3450   	; 0x852a <irCommTasks+0x51e>
    92a4:	4f 5f       	subi	r20, 0xFF	; 255
    92a6:	5f 4f       	sbci	r21, 0xFF	; 255
    92a8:	50 93 42 05 	sts	0x0542, r21
    92ac:	40 93 41 05 	sts	0x0541, r20
    92b0:	5b c9       	rjmp	.-3402   	; 0x8568 <irCommTasks+0x55c>
    92b2:	4f 5f       	subi	r20, 0xFF	; 255
    92b4:	5f 4f       	sbci	r21, 0xFF	; 255
    92b6:	50 93 42 05 	sts	0x0542, r21
    92ba:	40 93 41 05 	sts	0x0541, r20
    92be:	73 c9       	rjmp	.-3354   	; 0x85a6 <irCommTasks+0x59a>
    92c0:	4f 5f       	subi	r20, 0xFF	; 255
    92c2:	5f 4f       	sbci	r21, 0xFF	; 255
    92c4:	50 93 42 05 	sts	0x0542, r21
    92c8:	40 93 41 05 	sts	0x0541, r20
    92cc:	8b c9       	rjmp	.-3306   	; 0x85e4 <irCommTasks+0x5d8>
							} else {
								irCommRxMaxSensor = 0;
    92ce:	10 92 42 05 	sts	0x0542, r1
    92d2:	10 92 41 05 	sts	0x0541, r1
    92d6:	40 e0       	ldi	r20, 0x00	; 0
    92d8:	50 e0       	ldi	r21, 0x00	; 0
    92da:	c1 c9       	rjmp	.-3198   	; 0x865e <irCommTasks+0x652>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    92dc:	4f 5f       	subi	r20, 0xFF	; 255
    92de:	5f 4f       	sbci	r21, 0xFF	; 255
    92e0:	50 93 42 05 	sts	0x0542, r21
    92e4:	40 93 41 05 	sts	0x0541, r20
    92e8:	9c c9       	rjmp	.-3272   	; 0x8622 <irCommTasks+0x616>
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    92ea:	32 30       	cpi	r19, 0x02	; 2
    92ec:	09 f4       	brne	.+2      	; 0x92f0 <irCommTasks+0x12e4>
    92ee:	f4 c0       	rjmp	.+488    	; 0x94d8 <irCommTasks+0x14cc>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    92f0:	31 30       	cpi	r19, 0x01	; 1
    92f2:	09 f4       	brne	.+2      	; 0x92f6 <irCommTasks+0x12ea>
    92f4:	0d c1       	rjmp	.+538    	; 0x9510 <irCommTasks+0x1504>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    92f6:	10 92 3c 05 	sts	0x053C, r1
							currentProx = 0;
    92fa:	10 92 40 02 	sts	0x0240, r1
							adcSaveDataTo = SKIP_SAMPLE;
    92fe:	85 e0       	ldi	r24, 0x05	; 5
    9300:	80 93 d5 02 	sts	0x02D5, r24
							adcSamplingState = 0;
    9304:	10 92 d6 02 	sts	0x02D6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9308:	10 92 f4 04 	sts	0x04F4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    930c:	10 93 f5 04 	sts	0x04F5, r17

							if(irCommSyncStateIndexTemp>1) {
    9310:	90 91 1d 05 	lds	r25, 0x051D
    9314:	92 30       	cpi	r25, 0x02	; 2
    9316:	08 f0       	brcs	.+2      	; 0x931a <irCommTasks+0x130e>
    9318:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 12;
    931a:	e9 2f       	mov	r30, r25
    931c:	f0 e0       	ldi	r31, 0x00	; 0
    931e:	e6 57       	subi	r30, 0x76	; 118
    9320:	fa 4f       	sbci	r31, 0xFA	; 250
    9322:	8c e0       	ldi	r24, 0x0C	; 12
    9324:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    9326:	9f 5f       	subi	r25, 0xFF	; 255
    9328:	90 93 1d 05 	sts	0x051D, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    932c:	0e 94 5d 3f 	call	0x7eba	; 0x7eba <resetDebugVariables>
    9330:	0c 94 1f 40 	jmp	0x803e	; 0x803e <irCommTasks+0x32>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    9334:	0b 30       	cpi	r16, 0x0B	; 11
    9336:	08 f4       	brcc	.+2      	; 0x933a <irCommTasks+0x132e>
    9338:	76 c0       	rjmp	.+236    	; 0x9426 <irCommTasks+0x141a>
								currentProx = 0;
    933a:	10 92 40 02 	sts	0x0240, r1
								adcSaveDataTo = SKIP_SAMPLE;
    933e:	85 e0       	ldi	r24, 0x05	; 5
    9340:	80 93 d5 02 	sts	0x02D5, r24
								adcSamplingState = 0;
    9344:	10 92 d6 02 	sts	0x02D6, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    9348:	10 92 f4 04 	sts	0x04F4, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    934c:	30 93 f5 04 	sts	0x04F5, r19

								if(irCommSyncStateIndexTemp>1) {
    9350:	90 91 1d 05 	lds	r25, 0x051D
    9354:	92 30       	cpi	r25, 0x02	; 2
    9356:	08 f0       	brcs	.+2      	; 0x935a <irCommTasks+0x134e>
    9358:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 14;
    935a:	e9 2f       	mov	r30, r25
    935c:	f0 e0       	ldi	r31, 0x00	; 0
    935e:	e6 57       	subi	r30, 0x76	; 118
    9360:	fa 4f       	sbci	r31, 0xFA	; 250
    9362:	8e e0       	ldi	r24, 0x0E	; 14
    9364:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    9366:	9f 5f       	subi	r25, 0xFF	; 255
    9368:	90 93 1d 05 	sts	0x051D, r25
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateRedLed(0);
								//break;

								resetDebugVariables();				
    936c:	0e 94 5d 3f 	call	0x7eba	; 0x7eba <resetDebugVariables>
    9370:	0c 94 1f 40 	jmp	0x803e	; 0x803e <irCommTasks+0x32>
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    9374:	b0 93 40 05 	sts	0x0540, r27
    9378:	a0 93 3f 05 	sts	0x053F, r26
    937c:	70 c9       	rjmp	.-3360   	; 0x865e <irCommTasks+0x652>
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    937e:	10 92 42 05 	sts	0x0542, r1
    9382:	10 92 41 05 	sts	0x0541, r1
    9386:	c5 cd       	rjmp	.-1142   	; 0x8f12 <irCommTasks+0xf06>
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9388:	90 91 1d 05 	lds	r25, 0x051D
    938c:	92 30       	cpi	r25, 0x02	; 2
    938e:	08 f0       	brcs	.+2      	; 0x9392 <irCommTasks+0x1386>
    9390:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    9392:	e9 2f       	mov	r30, r25
    9394:	f0 e0       	ldi	r31, 0x00	; 0
    9396:	e6 57       	subi	r30, 0x76	; 118
    9398:	fa 4f       	sbci	r31, 0xFA	; 250
    939a:	85 e0       	ldi	r24, 0x05	; 5
    939c:	32 cf       	rjmp	.-412    	; 0x9202 <irCommTasks+0x11f6>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommRxStartPeakDuration<=3) {	// peak due to sensors sampling detected
    939e:	04 30       	cpi	r16, 0x04	; 4
    93a0:	08 f0       	brcs	.+2      	; 0x93a4 <irCommTasks+0x1398>
    93a2:	89 c0       	rjmp	.+274    	; 0x94b6 <irCommTasks+0x14aa>
								currentProx = 0;
    93a4:	10 92 40 02 	sts	0x0240, r1
								adcSaveDataTo = SKIP_SAMPLE;
    93a8:	85 e0       	ldi	r24, 0x05	; 5
    93aa:	80 93 d5 02 	sts	0x02D5, r24
								adcSamplingState = 0;
    93ae:	10 92 d6 02 	sts	0x02D6, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    93b2:	10 92 f4 04 	sts	0x04F4, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    93b6:	10 93 f5 04 	sts	0x04F5, r17

								if(irCommSyncStateIndexTemp>1) {
    93ba:	90 91 1d 05 	lds	r25, 0x051D
    93be:	92 30       	cpi	r25, 0x02	; 2
    93c0:	08 f0       	brcs	.+2      	; 0x93c4 <irCommTasks+0x13b8>
    93c2:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 16;
    93c4:	e9 2f       	mov	r30, r25
    93c6:	f0 e0       	ldi	r31, 0x00	; 0
    93c8:	e6 57       	subi	r30, 0x76	; 118
    93ca:	fa 4f       	sbci	r31, 0xFA	; 250
    93cc:	80 e1       	ldi	r24, 0x10	; 16
    93ce:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    93d0:	9f 5f       	subi	r25, 0xFF	; 255
    93d2:	90 93 1d 05 	sts	0x051D, r25
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateGreenLed(0);
								//break;

								resetDebugVariables();
    93d6:	0e 94 5d 3f 	call	0x7eba	; 0x7eba <resetDebugVariables>
    93da:	0c 94 1f 40 	jmp	0x803e	; 0x803e <irCommTasks+0x32>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    93de:	30 93 3c 05 	sts	0x053C, r19
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    93e2:	0b 30       	cpi	r16, 0x0B	; 11
    93e4:	08 f4       	brcc	.+2      	; 0x93e8 <irCommTasks+0x13dc>
    93e6:	83 c0       	rjmp	.+262    	; 0x94ee <irCommTasks+0x14e2>
								if(irCommSyncStateIndexTemp>1) {
    93e8:	90 91 1d 05 	lds	r25, 0x051D
    93ec:	92 30       	cpi	r25, 0x02	; 2
    93ee:	08 f0       	brcs	.+2      	; 0x93f2 <irCommTasks+0x13e6>
    93f0:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 4;
    93f2:	e9 2f       	mov	r30, r25
    93f4:	f0 e0       	ldi	r31, 0x00	; 0
    93f6:	e6 57       	subi	r30, 0x76	; 118
    93f8:	fa 4f       	sbci	r31, 0xFA	; 250
    93fa:	84 e0       	ldi	r24, 0x04	; 4
    93fc:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    93fe:	9f 5f       	subi	r25, 0xFF	; 255
    9400:	90 93 1d 05 	sts	0x051D, r25

								//irCommShiftCount = irCommShiftCount;
								irCommRxPeakHighToLow = 0;
    9404:	10 92 3d 05 	sts	0x053D, r1
								irCommRxStartBitDetected = 0;
    9408:	10 92 3c 05 	sts	0x053C, r1
								irCommSecondBitSkipped = 0;
    940c:	10 92 35 05 	sts	0x0535, r1
								irCommShiftCounter = 0;
    9410:	10 92 36 05 	sts	0x0536, r1
								irCommRxBitCount = 0;	
    9414:	10 92 32 05 	sts	0x0532, r1
								irCommRxCrc = 0;	
    9418:	10 92 23 05 	sts	0x0523, r1
								irCommRxByte = 0;
    941c:	10 92 34 05 	sts	0x0534, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9420:	80 93 f5 04 	sts	0x04F5, r24
    9424:	08 cf       	rjmp	.-496    	; 0x9236 <irCommTasks+0x122a>
								//break;

								resetDebugVariables();				
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    9426:	90 91 1d 05 	lds	r25, 0x051D
    942a:	92 30       	cpi	r25, 0x02	; 2
    942c:	08 f0       	brcs	.+2      	; 0x9430 <irCommTasks+0x1424>
    942e:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 7;
    9430:	e9 2f       	mov	r30, r25
    9432:	f0 e0       	ldi	r31, 0x00	; 0
    9434:	e6 57       	subi	r30, 0x76	; 118
    9436:	fa 4f       	sbci	r31, 0xFA	; 250
    9438:	87 e0       	ldi	r24, 0x07	; 7
    943a:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    943c:	9f 5f       	subi	r25, 0xFF	; 255
    943e:	90 93 1d 05 	sts	0x051D, r25

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
    9442:	84 e1       	ldi	r24, 0x14	; 20
    9444:	80 93 2c 05 	sts	0x052C, r24
								irCommRxPeakHighToLow = 0;
    9448:	10 92 3d 05 	sts	0x053D, r1
								irCommRxStartBitDetected = 0;
    944c:	10 92 3c 05 	sts	0x053C, r1
								irCommSecondBitSkipped = 0;
    9450:	10 92 35 05 	sts	0x0535, r1
								irCommShiftCounter = 0;
    9454:	10 92 36 05 	sts	0x0536, r1
								irCommRxBitCount = 0;	
    9458:	10 92 32 05 	sts	0x0532, r1
								irCommRxCrc = 0;	
    945c:	10 92 23 05 	sts	0x0523, r1
								irCommRxByte = 0;
    9460:	10 92 34 05 	sts	0x0534, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9464:	84 e0       	ldi	r24, 0x04	; 4
    9466:	80 93 f5 04 	sts	0x04F5, r24
    946a:	04 e1       	ldi	r16, 0x14	; 20
    946c:	50 2e       	mov	r5, r16
    946e:	e3 ce       	rjmp	.-570    	; 0x9236 <irCommTasks+0x122a>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    9470:	90 91 1d 05 	lds	r25, 0x051D
    9474:	92 30       	cpi	r25, 0x02	; 2
    9476:	08 f0       	brcs	.+2      	; 0x947a <irCommTasks+0x146e>
    9478:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 8;
    947a:	e9 2f       	mov	r30, r25
    947c:	f0 e0       	ldi	r31, 0x00	; 0
    947e:	e6 57       	subi	r30, 0x76	; 118
    9480:	fa 4f       	sbci	r31, 0xFA	; 250
    9482:	88 e0       	ldi	r24, 0x08	; 8
    9484:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    9486:	9f 5f       	subi	r25, 0xFF	; 255
    9488:	90 93 1d 05 	sts	0x051D, r25

							irCommShiftCount = 0;
    948c:	10 92 2c 05 	sts	0x052C, r1
							irCommRxPeakHighToLow = 0;
    9490:	10 92 3d 05 	sts	0x053D, r1
							irCommRxStartBitDetected = 0;
    9494:	10 92 3c 05 	sts	0x053C, r1
							irCommSecondBitSkipped = 0;
    9498:	10 92 35 05 	sts	0x0535, r1
							irCommShiftCounter = 0;
    949c:	10 92 36 05 	sts	0x0536, r1
							irCommRxBitCount = 0;	
    94a0:	10 92 32 05 	sts	0x0532, r1
							irCommRxCrc = 0;	
    94a4:	10 92 23 05 	sts	0x0523, r1
							irCommRxByte = 0;
    94a8:	10 92 34 05 	sts	0x0534, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    94ac:	85 e0       	ldi	r24, 0x05	; 5
    94ae:	80 93 f5 04 	sts	0x04F5, r24
    94b2:	55 24       	eor	r5, r5
    94b4:	c0 ce       	rjmp	.-640    	; 0x9236 <irCommTasks+0x122a>
								//break;

								resetDebugVariables();
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    94b6:	90 91 1d 05 	lds	r25, 0x051D
    94ba:	92 30       	cpi	r25, 0x02	; 2
    94bc:	08 f0       	brcs	.+2      	; 0x94c0 <irCommTasks+0x14b4>
    94be:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 3;
    94c0:	e9 2f       	mov	r30, r25
    94c2:	f0 e0       	ldi	r31, 0x00	; 0
    94c4:	e6 57       	subi	r30, 0x76	; 118
    94c6:	fa 4f       	sbci	r31, 0xFA	; 250
    94c8:	83 e0       	ldi	r24, 0x03	; 3
    94ca:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    94cc:	9f 5f       	subi	r25, 0xFF	; 255
    94ce:	90 93 1d 05 	sts	0x051D, r25

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    94d2:	95 2d       	mov	r25, r5
    94d4:	9c 5e       	subi	r25, 0xEC	; 236
    94d6:	9b ce       	rjmp	.-714    	; 0x920e <irCommTasks+0x1202>

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    94d8:	90 91 1d 05 	lds	r25, 0x051D
    94dc:	92 30       	cpi	r25, 0x02	; 2
    94de:	08 f0       	brcs	.+2      	; 0x94e2 <irCommTasks+0x14d6>
    94e0:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 6;
    94e2:	e9 2f       	mov	r30, r25
    94e4:	f0 e0       	ldi	r31, 0x00	; 0
    94e6:	e6 57       	subi	r30, 0x76	; 118
    94e8:	fa 4f       	sbci	r31, 0xFA	; 250
    94ea:	86 e0       	ldi	r24, 0x06	; 6
    94ec:	cb cf       	rjmp	.-106    	; 0x9484 <irCommTasks+0x1478>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							} else {
								currentProx = 0;
    94ee:	10 92 40 02 	sts	0x0240, r1
								adcSaveDataTo = SKIP_SAMPLE;
    94f2:	85 e0       	ldi	r24, 0x05	; 5
    94f4:	80 93 d5 02 	sts	0x02D5, r24
								adcSamplingState = 0;
    94f8:	10 92 d6 02 	sts	0x02D6, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    94fc:	10 92 f4 04 	sts	0x04F4, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    9500:	30 93 f5 04 	sts	0x04F5, r19

								irCommSyncStateIndexTemp++;
    9504:	80 91 1d 05 	lds	r24, 0x051D
    9508:	8f 5f       	subi	r24, 0xFF	; 255
    950a:	80 93 1d 05 	sts	0x051D, r24
    950e:	93 ce       	rjmp	.-730    	; 0x9236 <irCommTasks+0x122a>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    9510:	90 91 1d 05 	lds	r25, 0x051D
    9514:	92 30       	cpi	r25, 0x02	; 2
    9516:	08 f0       	brcs	.+2      	; 0x951a <irCommTasks+0x150e>
    9518:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 2;
    951a:	e9 2f       	mov	r30, r25
    951c:	f0 e0       	ldi	r31, 0x00	; 0
    951e:	e6 57       	subi	r30, 0x76	; 118
    9520:	fa 4f       	sbci	r31, 0xFA	; 250
    9522:	82 e0       	ldi	r24, 0x02	; 2
    9524:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    9526:	9f 5f       	subi	r25, 0xFF	; 255
    9528:	90 93 1d 05 	sts	0x051D, r25

							//irCommShiftCount = irCommShiftCount;
							irCommRxPeakHighToLow = 0;
    952c:	10 92 3d 05 	sts	0x053D, r1
							irCommRxStartBitDetected = 0;
    9530:	10 92 3c 05 	sts	0x053C, r1
							irCommSecondBitSkipped = 0;
    9534:	10 92 35 05 	sts	0x0535, r1
							irCommShiftCounter = 0;
    9538:	10 92 36 05 	sts	0x0536, r1
							irCommRxBitCount = 0;	
    953c:	10 92 32 05 	sts	0x0532, r1
							irCommRxCrc = 0;	
    9540:	10 92 23 05 	sts	0x0523, r1
							irCommRxByte = 0;
    9544:	10 92 34 05 	sts	0x0534, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9548:	84 e0       	ldi	r24, 0x04	; 4
    954a:	80 93 f5 04 	sts	0x04F5, r24
    954e:	73 ce       	rjmp	.-794    	; 0x9236 <irCommTasks+0x122a>

00009550 <irCommInitVars>:
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    9550:	e0 91 57 0b 	lds	r30, 0x0B57
    9554:	f0 91 58 0b 	lds	r31, 0x0B58
    9558:	80 e1       	ldi	r24, 0x10	; 16
    955a:	df 01       	movw	r26, r30
    955c:	1d 92       	st	X+, r1
    955e:	8a 95       	dec	r24
    9560:	e9 f7       	brne	.-6      	; 0x955c <irCommInitVars+0xc>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    9562:	80 91 e7 05 	lds	r24, 0x05E7
    9566:	90 91 e8 05 	lds	r25, 0x05E8
    956a:	6f ef       	ldi	r22, 0xFF	; 255
    956c:	70 e0       	ldi	r23, 0x00	; 0
    956e:	40 e1       	ldi	r20, 0x10	; 16
    9570:	50 e0       	ldi	r21, 0x00	; 0
    9572:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    9576:	10 92 f4 04 	sts	0x04F4, r1
}
    957a:	08 95       	ret

0000957c <irCommInit>:

void irCommInit() {
	irCommProxValuesAdc = irCommProxValuesBuff1;
    957c:	8b ee       	ldi	r24, 0xEB	; 235
    957e:	95 e0       	ldi	r25, 0x05	; 5
    9580:	90 93 8a 08 	sts	0x088A, r25
    9584:	80 93 89 08 	sts	0x0889, r24
	irCommProxValuesCurr = irCommProxValuesBuff2;
    9588:	8d e2       	ldi	r24, 0x2D	; 45
    958a:	97 e0       	ldi	r25, 0x07	; 7
    958c:	90 93 6e 08 	sts	0x086E, r25
    9590:	80 93 6d 08 	sts	0x086D, r24
	irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    9594:	e8 e9       	ldi	r30, 0x98	; 152
    9596:	f9 e0       	ldi	r31, 0x09	; 9
    9598:	f0 93 58 0b 	sts	0x0B58, r31
    959c:	e0 93 57 0b 	sts	0x0B57, r30
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    95a0:	86 e8       	ldi	r24, 0x86	; 134
    95a2:	9b e0       	ldi	r25, 0x0B	; 11
    95a4:	90 93 6b 05 	sts	0x056B, r25
    95a8:	80 93 6a 05 	sts	0x056A, r24
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    95ac:	8f e6       	ldi	r24, 0x6F	; 111
    95ae:	98 e0       	ldi	r25, 0x08	; 8
    95b0:	90 93 e8 05 	sts	0x05E8, r25
    95b4:	80 93 e7 05 	sts	0x05E7, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    95b8:	22 ef       	ldi	r18, 0xF2	; 242
    95ba:	38 e0       	ldi	r19, 0x08	; 8
    95bc:	30 93 57 05 	sts	0x0557, r19
    95c0:	20 93 56 05 	sts	0x0556, r18
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    95c4:	20 e1       	ldi	r18, 0x10	; 16
    95c6:	df 01       	movw	r26, r30
    95c8:	1d 92       	st	X+, r1
    95ca:	2a 95       	dec	r18
    95cc:	e9 f7       	brne	.-6      	; 0x95c8 <irCommInit+0x4c>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    95ce:	6f ef       	ldi	r22, 0xFF	; 255
    95d0:	70 e0       	ldi	r23, 0x00	; 0
    95d2:	40 e1       	ldi	r20, 0x10	; 16
    95d4:	50 e0       	ldi	r21, 0x00	; 0
    95d6:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    95da:	10 92 f4 04 	sts	0x04F4, r1
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    95de:	81 e0       	ldi	r24, 0x01	; 1
    95e0:	80 93 f2 04 	sts	0x04F2, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    95e4:	80 93 f5 04 	sts	0x04F5, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    95e8:	80 93 f3 04 	sts	0x04F3, r24
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
	irCommInitVars();
	irCommInitReceiver();
}
    95ec:	08 95       	ret

000095ee <getMap>:
int myArray[cols][rows] = { 	{0, 0, 1, 0},
                        		{0, 1, 0, 0},
                        		{0, 1, 0, 0},
                        		{0, 0, 0, 0}  };							

void getMap() {
    95ee:	cf 93       	push	r28
    95f0:	df 93       	push	r29
    95f2:	c6 e1       	ldi	r28, 0x16	; 22
    95f4:	d2 e0       	ldi	r29, 0x02	; 2
    

   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
    95f6:	88 81       	ld	r24, Y
    95f8:	99 81       	ldd	r25, Y+1	; 0x01
    95fa:	89 2b       	or	r24, r25
    95fc:	09 f4       	brne	.+2      	; 0x9600 <getMap+0x12>
    95fe:	6e c0       	rjmp	.+220    	; 0x96dc <getMap+0xee>
					GREEN_LED1_ON;			
	 			}                 
    		else  //(myArray[i][j] == 1)
				{
	    		
				    setLeftSpeed(0);
    9600:	80 e0       	ldi	r24, 0x00	; 0
    9602:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <setLeftSpeed>
					setRightSpeed(0);
    9606:	80 e0       	ldi	r24, 0x00	; 0
    9608:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <setRightSpeed>
			        GREEN_LED1_OFF;
    960c:	80 91 0b 01 	lds	r24, 0x010B
    9610:	82 60       	ori	r24, 0x02	; 2
    9612:	80 93 0b 01 	sts	0x010B, r24
					
	 			}
	 	
   	handleMotorsWithSpeedController();
    9616:	0e 94 11 2a 	call	0x5422	; 0x5422 <handleMotorsWithSpeedController>
    

   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
    961a:	8a 81       	ldd	r24, Y+2	; 0x02
    961c:	9b 81       	ldd	r25, Y+3	; 0x03
    961e:	89 2b       	or	r24, r25
    9620:	09 f4       	brne	.+2      	; 0x9624 <getMap+0x36>
    9622:	50 c0       	rjmp	.+160    	; 0x96c4 <getMap+0xd6>
					GREEN_LED1_ON;			
	 			}                 
    		else  //(myArray[i][j] == 1)
				{
	    		
				    setLeftSpeed(0);
    9624:	80 e0       	ldi	r24, 0x00	; 0
    9626:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <setLeftSpeed>
					setRightSpeed(0);
    962a:	80 e0       	ldi	r24, 0x00	; 0
    962c:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <setRightSpeed>
			        GREEN_LED1_OFF;
    9630:	80 91 0b 01 	lds	r24, 0x010B
    9634:	82 60       	ori	r24, 0x02	; 2
    9636:	80 93 0b 01 	sts	0x010B, r24
					
	 			}
	 	
   	handleMotorsWithSpeedController();
    963a:	0e 94 11 2a 	call	0x5422	; 0x5422 <handleMotorsWithSpeedController>
    

   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
    963e:	8c 81       	ldd	r24, Y+4	; 0x04
    9640:	9d 81       	ldd	r25, Y+5	; 0x05
    9642:	89 2b       	or	r24, r25
    9644:	99 f1       	breq	.+102    	; 0x96ac <getMap+0xbe>
					GREEN_LED1_ON;			
	 			}                 
    		else  //(myArray[i][j] == 1)
				{
	    		
				    setLeftSpeed(0);
    9646:	80 e0       	ldi	r24, 0x00	; 0
    9648:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <setLeftSpeed>
					setRightSpeed(0);
    964c:	80 e0       	ldi	r24, 0x00	; 0
    964e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <setRightSpeed>
			        GREEN_LED1_OFF;
    9652:	80 91 0b 01 	lds	r24, 0x010B
    9656:	82 60       	ori	r24, 0x02	; 2
    9658:	80 93 0b 01 	sts	0x010B, r24
					
	 			}
	 	
   	handleMotorsWithSpeedController();
    965c:	0e 94 11 2a 	call	0x5422	; 0x5422 <handleMotorsWithSpeedController>
    

   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
    9660:	8e 81       	ldd	r24, Y+6	; 0x06
    9662:	9f 81       	ldd	r25, Y+7	; 0x07
    9664:	89 2b       	or	r24, r25
    9666:	b1 f4       	brne	.+44     	; 0x9694 <getMap+0xa6>
				{
       			    setLeftSpeed(10);
    9668:	8a e0       	ldi	r24, 0x0A	; 10
    966a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <setLeftSpeed>
					setRightSpeed(10);	
    966e:	8a e0       	ldi	r24, 0x0A	; 10
    9670:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <setRightSpeed>
					GREEN_LED1_ON;			
    9674:	80 91 0b 01 	lds	r24, 0x010B
    9678:	8d 7f       	andi	r24, 0xFD	; 253
    967a:	80 93 0b 01 	sts	0x010B, r24
					setRightSpeed(0);
			        GREEN_LED1_OFF;
					
	 			}
	 	
   	handleMotorsWithSpeedController();
    967e:	0e 94 11 2a 	call	0x5422	; 0x5422 <handleMotorsWithSpeedController>
    9682:	28 96       	adiw	r28, 0x08	; 8
                        		{0, 0, 0, 0}  };							

void getMap() {
    

   for (int i = 0; i < cols; i++) {
    9684:	82 e0       	ldi	r24, 0x02	; 2
    9686:	c6 33       	cpi	r28, 0x36	; 54
    9688:	d8 07       	cpc	r29, r24
    968a:	09 f0       	breq	.+2      	; 0x968e <getMap+0xa0>
    968c:	b4 cf       	rjmp	.-152    	; 0x95f6 <getMap+0x8>
		//delaym();
		//_delay_ms(2000);
        }
    
 }
}
    968e:	df 91       	pop	r29
    9690:	cf 91       	pop	r28
    9692:	08 95       	ret
					GREEN_LED1_ON;			
	 			}                 
    		else  //(myArray[i][j] == 1)
				{
	    		
				    setLeftSpeed(0);
    9694:	80 e0       	ldi	r24, 0x00	; 0
    9696:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <setLeftSpeed>
					setRightSpeed(0);
    969a:	80 e0       	ldi	r24, 0x00	; 0
    969c:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <setRightSpeed>
			        GREEN_LED1_OFF;
    96a0:	80 91 0b 01 	lds	r24, 0x010B
    96a4:	82 60       	ori	r24, 0x02	; 2
    96a6:	80 93 0b 01 	sts	0x010B, r24
    96aa:	e9 cf       	rjmp	.-46     	; 0x967e <getMap+0x90>
   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
				{
       			    setLeftSpeed(10);
    96ac:	8a e0       	ldi	r24, 0x0A	; 10
    96ae:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <setLeftSpeed>
					setRightSpeed(10);	
    96b2:	8a e0       	ldi	r24, 0x0A	; 10
    96b4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <setRightSpeed>
					GREEN_LED1_ON;			
    96b8:	80 91 0b 01 	lds	r24, 0x010B
    96bc:	8d 7f       	andi	r24, 0xFD	; 253
    96be:	80 93 0b 01 	sts	0x010B, r24
    96c2:	cc cf       	rjmp	.-104    	; 0x965c <getMap+0x6e>
   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
				{
       			    setLeftSpeed(10);
    96c4:	8a e0       	ldi	r24, 0x0A	; 10
    96c6:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <setLeftSpeed>
					setRightSpeed(10);	
    96ca:	8a e0       	ldi	r24, 0x0A	; 10
    96cc:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <setRightSpeed>
					GREEN_LED1_ON;			
    96d0:	80 91 0b 01 	lds	r24, 0x010B
    96d4:	8d 7f       	andi	r24, 0xFD	; 253
    96d6:	80 93 0b 01 	sts	0x010B, r24
    96da:	af cf       	rjmp	.-162    	; 0x963a <getMap+0x4c>
   for (int i = 0; i < cols; i++) {
    	for (int j = 0; j < rows; j++) {
	      	   
    		if (myArray[i][j] == 0)
				{
       			    setLeftSpeed(10);
    96dc:	8a e0       	ldi	r24, 0x0A	; 10
    96de:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <setLeftSpeed>
					setRightSpeed(10);	
    96e2:	8a e0       	ldi	r24, 0x0A	; 10
    96e4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <setRightSpeed>
					GREEN_LED1_ON;			
    96e8:	80 91 0b 01 	lds	r24, 0x010B
    96ec:	8d 7f       	andi	r24, 0xFD	; 253
    96ee:	80 93 0b 01 	sts	0x010B, r24
    96f2:	91 cf       	rjmp	.-222    	; 0x9616 <getMap+0x28>

000096f4 <__subsf3>:
    96f4:	50 58       	subi	r21, 0x80	; 128

000096f6 <__addsf3>:
    96f6:	bb 27       	eor	r27, r27
    96f8:	aa 27       	eor	r26, r26
    96fa:	0e d0       	rcall	.+28     	; 0x9718 <__addsf3x>
    96fc:	ff c1       	rjmp	.+1022   	; 0x9afc <__fp_round>
    96fe:	c8 d1       	rcall	.+912    	; 0x9a90 <__fp_pscA>
    9700:	30 f0       	brcs	.+12     	; 0x970e <__addsf3+0x18>
    9702:	cd d1       	rcall	.+922    	; 0x9a9e <__fp_pscB>
    9704:	20 f0       	brcs	.+8      	; 0x970e <__addsf3+0x18>
    9706:	31 f4       	brne	.+12     	; 0x9714 <__addsf3+0x1e>
    9708:	9f 3f       	cpi	r25, 0xFF	; 255
    970a:	11 f4       	brne	.+4      	; 0x9710 <__addsf3+0x1a>
    970c:	1e f4       	brtc	.+6      	; 0x9714 <__addsf3+0x1e>
    970e:	98 c1       	rjmp	.+816    	; 0x9a40 <__fp_nan>
    9710:	0e f4       	brtc	.+2      	; 0x9714 <__addsf3+0x1e>
    9712:	e0 95       	com	r30
    9714:	e7 fb       	bst	r30, 7
    9716:	8e c1       	rjmp	.+796    	; 0x9a34 <__fp_inf>

00009718 <__addsf3x>:
    9718:	e9 2f       	mov	r30, r25
    971a:	12 d2       	rcall	.+1060   	; 0x9b40 <__fp_split3>
    971c:	80 f3       	brcs	.-32     	; 0x96fe <__addsf3+0x8>
    971e:	ba 17       	cp	r27, r26
    9720:	62 07       	cpc	r22, r18
    9722:	73 07       	cpc	r23, r19
    9724:	84 07       	cpc	r24, r20
    9726:	95 07       	cpc	r25, r21
    9728:	18 f0       	brcs	.+6      	; 0x9730 <__addsf3x+0x18>
    972a:	71 f4       	brne	.+28     	; 0x9748 <__addsf3x+0x30>
    972c:	9e f5       	brtc	.+102    	; 0x9794 <__addsf3x+0x7c>
    972e:	2a c2       	rjmp	.+1108   	; 0x9b84 <__fp_zero>
    9730:	0e f4       	brtc	.+2      	; 0x9734 <__addsf3x+0x1c>
    9732:	e0 95       	com	r30
    9734:	0b 2e       	mov	r0, r27
    9736:	ba 2f       	mov	r27, r26
    9738:	a0 2d       	mov	r26, r0
    973a:	0b 01       	movw	r0, r22
    973c:	b9 01       	movw	r22, r18
    973e:	90 01       	movw	r18, r0
    9740:	0c 01       	movw	r0, r24
    9742:	ca 01       	movw	r24, r20
    9744:	a0 01       	movw	r20, r0
    9746:	11 24       	eor	r1, r1
    9748:	ff 27       	eor	r31, r31
    974a:	59 1b       	sub	r21, r25
    974c:	99 f0       	breq	.+38     	; 0x9774 <__addsf3x+0x5c>
    974e:	59 3f       	cpi	r21, 0xF9	; 249
    9750:	50 f4       	brcc	.+20     	; 0x9766 <__addsf3x+0x4e>
    9752:	50 3e       	cpi	r21, 0xE0	; 224
    9754:	68 f1       	brcs	.+90     	; 0x97b0 <__addsf3x+0x98>
    9756:	1a 16       	cp	r1, r26
    9758:	f0 40       	sbci	r31, 0x00	; 0
    975a:	a2 2f       	mov	r26, r18
    975c:	23 2f       	mov	r18, r19
    975e:	34 2f       	mov	r19, r20
    9760:	44 27       	eor	r20, r20
    9762:	58 5f       	subi	r21, 0xF8	; 248
    9764:	f3 cf       	rjmp	.-26     	; 0x974c <__addsf3x+0x34>
    9766:	46 95       	lsr	r20
    9768:	37 95       	ror	r19
    976a:	27 95       	ror	r18
    976c:	a7 95       	ror	r26
    976e:	f0 40       	sbci	r31, 0x00	; 0
    9770:	53 95       	inc	r21
    9772:	c9 f7       	brne	.-14     	; 0x9766 <__addsf3x+0x4e>
    9774:	7e f4       	brtc	.+30     	; 0x9794 <__addsf3x+0x7c>
    9776:	1f 16       	cp	r1, r31
    9778:	ba 0b       	sbc	r27, r26
    977a:	62 0b       	sbc	r22, r18
    977c:	73 0b       	sbc	r23, r19
    977e:	84 0b       	sbc	r24, r20
    9780:	ba f0       	brmi	.+46     	; 0x97b0 <__addsf3x+0x98>
    9782:	91 50       	subi	r25, 0x01	; 1
    9784:	a1 f0       	breq	.+40     	; 0x97ae <__addsf3x+0x96>
    9786:	ff 0f       	add	r31, r31
    9788:	bb 1f       	adc	r27, r27
    978a:	66 1f       	adc	r22, r22
    978c:	77 1f       	adc	r23, r23
    978e:	88 1f       	adc	r24, r24
    9790:	c2 f7       	brpl	.-16     	; 0x9782 <__addsf3x+0x6a>
    9792:	0e c0       	rjmp	.+28     	; 0x97b0 <__addsf3x+0x98>
    9794:	ba 0f       	add	r27, r26
    9796:	62 1f       	adc	r22, r18
    9798:	73 1f       	adc	r23, r19
    979a:	84 1f       	adc	r24, r20
    979c:	48 f4       	brcc	.+18     	; 0x97b0 <__addsf3x+0x98>
    979e:	87 95       	ror	r24
    97a0:	77 95       	ror	r23
    97a2:	67 95       	ror	r22
    97a4:	b7 95       	ror	r27
    97a6:	f7 95       	ror	r31
    97a8:	9e 3f       	cpi	r25, 0xFE	; 254
    97aa:	08 f0       	brcs	.+2      	; 0x97ae <__addsf3x+0x96>
    97ac:	b3 cf       	rjmp	.-154    	; 0x9714 <__addsf3+0x1e>
    97ae:	93 95       	inc	r25
    97b0:	88 0f       	add	r24, r24
    97b2:	08 f0       	brcs	.+2      	; 0x97b6 <__addsf3x+0x9e>
    97b4:	99 27       	eor	r25, r25
    97b6:	ee 0f       	add	r30, r30
    97b8:	97 95       	ror	r25
    97ba:	87 95       	ror	r24
    97bc:	08 95       	ret
    97be:	68 d1       	rcall	.+720    	; 0x9a90 <__fp_pscA>
    97c0:	58 f0       	brcs	.+22     	; 0x97d8 <__addsf3x+0xc0>
    97c2:	80 e8       	ldi	r24, 0x80	; 128
    97c4:	91 e0       	ldi	r25, 0x01	; 1
    97c6:	09 f4       	brne	.+2      	; 0x97ca <__addsf3x+0xb2>
    97c8:	9e ef       	ldi	r25, 0xFE	; 254
    97ca:	69 d1       	rcall	.+722    	; 0x9a9e <__fp_pscB>
    97cc:	28 f0       	brcs	.+10     	; 0x97d8 <__addsf3x+0xc0>
    97ce:	40 e8       	ldi	r20, 0x80	; 128
    97d0:	51 e0       	ldi	r21, 0x01	; 1
    97d2:	59 f4       	brne	.+22     	; 0x97ea <atan2+0xe>
    97d4:	5e ef       	ldi	r21, 0xFE	; 254
    97d6:	09 c0       	rjmp	.+18     	; 0x97ea <atan2+0xe>
    97d8:	33 c1       	rjmp	.+614    	; 0x9a40 <__fp_nan>
    97da:	d4 c1       	rjmp	.+936    	; 0x9b84 <__fp_zero>

000097dc <atan2>:
    97dc:	e9 2f       	mov	r30, r25
    97de:	e0 78       	andi	r30, 0x80	; 128
    97e0:	af d1       	rcall	.+862    	; 0x9b40 <__fp_split3>
    97e2:	68 f3       	brcs	.-38     	; 0x97be <__addsf3x+0xa6>
    97e4:	09 2e       	mov	r0, r25
    97e6:	05 2a       	or	r0, r21
    97e8:	c1 f3       	breq	.-16     	; 0x97da <__addsf3x+0xc2>
    97ea:	26 17       	cp	r18, r22
    97ec:	37 07       	cpc	r19, r23
    97ee:	48 07       	cpc	r20, r24
    97f0:	59 07       	cpc	r21, r25
    97f2:	38 f0       	brcs	.+14     	; 0x9802 <atan2+0x26>
    97f4:	0e 2e       	mov	r0, r30
    97f6:	07 f8       	bld	r0, 7
    97f8:	e0 25       	eor	r30, r0
    97fa:	69 f0       	breq	.+26     	; 0x9816 <atan2+0x3a>
    97fc:	e0 25       	eor	r30, r0
    97fe:	e0 64       	ori	r30, 0x40	; 64
    9800:	0a c0       	rjmp	.+20     	; 0x9816 <atan2+0x3a>
    9802:	ef 63       	ori	r30, 0x3F	; 63
    9804:	07 f8       	bld	r0, 7
    9806:	00 94       	com	r0
    9808:	07 fa       	bst	r0, 7
    980a:	db 01       	movw	r26, r22
    980c:	b9 01       	movw	r22, r18
    980e:	9d 01       	movw	r18, r26
    9810:	dc 01       	movw	r26, r24
    9812:	ca 01       	movw	r24, r20
    9814:	ad 01       	movw	r20, r26
    9816:	ef 93       	push	r30
    9818:	46 d0       	rcall	.+140    	; 0x98a6 <__divsf3_pse>
    981a:	70 d1       	rcall	.+736    	; 0x9afc <__fp_round>
    981c:	0a d0       	rcall	.+20     	; 0x9832 <atan>
    981e:	5f 91       	pop	r21
    9820:	55 23       	and	r21, r21
    9822:	31 f0       	breq	.+12     	; 0x9830 <atan2+0x54>
    9824:	2b ed       	ldi	r18, 0xDB	; 219
    9826:	3f e0       	ldi	r19, 0x0F	; 15
    9828:	49 e4       	ldi	r20, 0x49	; 73
    982a:	50 fd       	sbrc	r21, 0
    982c:	49 ec       	ldi	r20, 0xC9	; 201
    982e:	63 cf       	rjmp	.-314    	; 0x96f6 <__addsf3>
    9830:	08 95       	ret

00009832 <atan>:
    9832:	df 93       	push	r29
    9834:	dd 27       	eor	r29, r29
    9836:	b9 2f       	mov	r27, r25
    9838:	bf 77       	andi	r27, 0x7F	; 127
    983a:	40 e8       	ldi	r20, 0x80	; 128
    983c:	5f e3       	ldi	r21, 0x3F	; 63
    983e:	16 16       	cp	r1, r22
    9840:	17 06       	cpc	r1, r23
    9842:	48 07       	cpc	r20, r24
    9844:	5b 07       	cpc	r21, r27
    9846:	10 f4       	brcc	.+4      	; 0x984c <atan+0x1a>
    9848:	d9 2f       	mov	r29, r25
    984a:	a3 d1       	rcall	.+838    	; 0x9b92 <inverse>
    984c:	9f 93       	push	r25
    984e:	8f 93       	push	r24
    9850:	7f 93       	push	r23
    9852:	6f 93       	push	r22
    9854:	0e d2       	rcall	.+1052   	; 0x9c72 <square>
    9856:	ee e4       	ldi	r30, 0x4E	; 78
    9858:	f1 e0       	ldi	r31, 0x01	; 1
    985a:	f5 d0       	rcall	.+490    	; 0x9a46 <__fp_powser>
    985c:	4f d1       	rcall	.+670    	; 0x9afc <__fp_round>
    985e:	2f 91       	pop	r18
    9860:	3f 91       	pop	r19
    9862:	4f 91       	pop	r20
    9864:	5f 91       	pop	r21
    9866:	a8 d1       	rcall	.+848    	; 0x9bb8 <__mulsf3x>
    9868:	dd 23       	and	r29, r29
    986a:	49 f0       	breq	.+18     	; 0x987e <atan+0x4c>
    986c:	90 58       	subi	r25, 0x80	; 128
    986e:	a2 ea       	ldi	r26, 0xA2	; 162
    9870:	2a ed       	ldi	r18, 0xDA	; 218
    9872:	3f e0       	ldi	r19, 0x0F	; 15
    9874:	49 ec       	ldi	r20, 0xC9	; 201
    9876:	5f e3       	ldi	r21, 0x3F	; 63
    9878:	d0 78       	andi	r29, 0x80	; 128
    987a:	5d 27       	eor	r21, r29
    987c:	4d df       	rcall	.-358    	; 0x9718 <__addsf3x>
    987e:	df 91       	pop	r29
    9880:	3d c1       	rjmp	.+634    	; 0x9afc <__fp_round>

00009882 <cos>:
    9882:	15 d1       	rcall	.+554    	; 0x9aae <__fp_rempio2>
    9884:	e3 95       	inc	r30
    9886:	4b c1       	rjmp	.+662    	; 0x9b1e <__fp_sinus>

00009888 <__divsf3>:
    9888:	0c d0       	rcall	.+24     	; 0x98a2 <__divsf3x>
    988a:	38 c1       	rjmp	.+624    	; 0x9afc <__fp_round>
    988c:	08 d1       	rcall	.+528    	; 0x9a9e <__fp_pscB>
    988e:	40 f0       	brcs	.+16     	; 0x98a0 <__divsf3+0x18>
    9890:	ff d0       	rcall	.+510    	; 0x9a90 <__fp_pscA>
    9892:	30 f0       	brcs	.+12     	; 0x98a0 <__divsf3+0x18>
    9894:	21 f4       	brne	.+8      	; 0x989e <__divsf3+0x16>
    9896:	5f 3f       	cpi	r21, 0xFF	; 255
    9898:	19 f0       	breq	.+6      	; 0x98a0 <__divsf3+0x18>
    989a:	cc c0       	rjmp	.+408    	; 0x9a34 <__fp_inf>
    989c:	51 11       	cpse	r21, r1
    989e:	73 c1       	rjmp	.+742    	; 0x9b86 <__fp_szero>
    98a0:	cf c0       	rjmp	.+414    	; 0x9a40 <__fp_nan>

000098a2 <__divsf3x>:
    98a2:	4e d1       	rcall	.+668    	; 0x9b40 <__fp_split3>
    98a4:	98 f3       	brcs	.-26     	; 0x988c <__divsf3+0x4>

000098a6 <__divsf3_pse>:
    98a6:	99 23       	and	r25, r25
    98a8:	c9 f3       	breq	.-14     	; 0x989c <__divsf3+0x14>
    98aa:	55 23       	and	r21, r21
    98ac:	b1 f3       	breq	.-20     	; 0x989a <__divsf3+0x12>
    98ae:	95 1b       	sub	r25, r21
    98b0:	55 0b       	sbc	r21, r21
    98b2:	bb 27       	eor	r27, r27
    98b4:	aa 27       	eor	r26, r26
    98b6:	62 17       	cp	r22, r18
    98b8:	73 07       	cpc	r23, r19
    98ba:	84 07       	cpc	r24, r20
    98bc:	38 f0       	brcs	.+14     	; 0x98cc <__divsf3_pse+0x26>
    98be:	9f 5f       	subi	r25, 0xFF	; 255
    98c0:	5f 4f       	sbci	r21, 0xFF	; 255
    98c2:	22 0f       	add	r18, r18
    98c4:	33 1f       	adc	r19, r19
    98c6:	44 1f       	adc	r20, r20
    98c8:	aa 1f       	adc	r26, r26
    98ca:	a9 f3       	breq	.-22     	; 0x98b6 <__divsf3_pse+0x10>
    98cc:	33 d0       	rcall	.+102    	; 0x9934 <__divsf3_pse+0x8e>
    98ce:	0e 2e       	mov	r0, r30
    98d0:	3a f0       	brmi	.+14     	; 0x98e0 <__divsf3_pse+0x3a>
    98d2:	e0 e8       	ldi	r30, 0x80	; 128
    98d4:	30 d0       	rcall	.+96     	; 0x9936 <__divsf3_pse+0x90>
    98d6:	91 50       	subi	r25, 0x01	; 1
    98d8:	50 40       	sbci	r21, 0x00	; 0
    98da:	e6 95       	lsr	r30
    98dc:	00 1c       	adc	r0, r0
    98de:	ca f7       	brpl	.-14     	; 0x98d2 <__divsf3_pse+0x2c>
    98e0:	29 d0       	rcall	.+82     	; 0x9934 <__divsf3_pse+0x8e>
    98e2:	fe 2f       	mov	r31, r30
    98e4:	27 d0       	rcall	.+78     	; 0x9934 <__divsf3_pse+0x8e>
    98e6:	66 0f       	add	r22, r22
    98e8:	77 1f       	adc	r23, r23
    98ea:	88 1f       	adc	r24, r24
    98ec:	bb 1f       	adc	r27, r27
    98ee:	26 17       	cp	r18, r22
    98f0:	37 07       	cpc	r19, r23
    98f2:	48 07       	cpc	r20, r24
    98f4:	ab 07       	cpc	r26, r27
    98f6:	b0 e8       	ldi	r27, 0x80	; 128
    98f8:	09 f0       	breq	.+2      	; 0x98fc <__divsf3_pse+0x56>
    98fa:	bb 0b       	sbc	r27, r27
    98fc:	80 2d       	mov	r24, r0
    98fe:	bf 01       	movw	r22, r30
    9900:	ff 27       	eor	r31, r31
    9902:	93 58       	subi	r25, 0x83	; 131
    9904:	5f 4f       	sbci	r21, 0xFF	; 255
    9906:	2a f0       	brmi	.+10     	; 0x9912 <__divsf3_pse+0x6c>
    9908:	9e 3f       	cpi	r25, 0xFE	; 254
    990a:	51 05       	cpc	r21, r1
    990c:	68 f0       	brcs	.+26     	; 0x9928 <__divsf3_pse+0x82>
    990e:	92 c0       	rjmp	.+292    	; 0x9a34 <__fp_inf>
    9910:	3a c1       	rjmp	.+628    	; 0x9b86 <__fp_szero>
    9912:	5f 3f       	cpi	r21, 0xFF	; 255
    9914:	ec f3       	brlt	.-6      	; 0x9910 <__divsf3_pse+0x6a>
    9916:	98 3e       	cpi	r25, 0xE8	; 232
    9918:	dc f3       	brlt	.-10     	; 0x9910 <__divsf3_pse+0x6a>
    991a:	86 95       	lsr	r24
    991c:	77 95       	ror	r23
    991e:	67 95       	ror	r22
    9920:	b7 95       	ror	r27
    9922:	f7 95       	ror	r31
    9924:	9f 5f       	subi	r25, 0xFF	; 255
    9926:	c9 f7       	brne	.-14     	; 0x991a <__divsf3_pse+0x74>
    9928:	88 0f       	add	r24, r24
    992a:	91 1d       	adc	r25, r1
    992c:	96 95       	lsr	r25
    992e:	87 95       	ror	r24
    9930:	97 f9       	bld	r25, 7
    9932:	08 95       	ret
    9934:	e1 e0       	ldi	r30, 0x01	; 1
    9936:	66 0f       	add	r22, r22
    9938:	77 1f       	adc	r23, r23
    993a:	88 1f       	adc	r24, r24
    993c:	bb 1f       	adc	r27, r27
    993e:	62 17       	cp	r22, r18
    9940:	73 07       	cpc	r23, r19
    9942:	84 07       	cpc	r24, r20
    9944:	ba 07       	cpc	r27, r26
    9946:	20 f0       	brcs	.+8      	; 0x9950 <__divsf3_pse+0xaa>
    9948:	62 1b       	sub	r22, r18
    994a:	73 0b       	sbc	r23, r19
    994c:	84 0b       	sbc	r24, r20
    994e:	ba 0b       	sbc	r27, r26
    9950:	ee 1f       	adc	r30, r30
    9952:	88 f7       	brcc	.-30     	; 0x9936 <__divsf3_pse+0x90>
    9954:	e0 95       	com	r30
    9956:	08 95       	ret

00009958 <__fixsfsi>:
    9958:	04 d0       	rcall	.+8      	; 0x9962 <__fixunssfsi>
    995a:	68 94       	set
    995c:	b1 11       	cpse	r27, r1
    995e:	13 c1       	rjmp	.+550    	; 0x9b86 <__fp_szero>
    9960:	08 95       	ret

00009962 <__fixunssfsi>:
    9962:	f6 d0       	rcall	.+492    	; 0x9b50 <__fp_splitA>
    9964:	88 f0       	brcs	.+34     	; 0x9988 <__fixunssfsi+0x26>
    9966:	9f 57       	subi	r25, 0x7F	; 127
    9968:	90 f0       	brcs	.+36     	; 0x998e <__fixunssfsi+0x2c>
    996a:	b9 2f       	mov	r27, r25
    996c:	99 27       	eor	r25, r25
    996e:	b7 51       	subi	r27, 0x17	; 23
    9970:	a0 f0       	brcs	.+40     	; 0x999a <__fixunssfsi+0x38>
    9972:	d1 f0       	breq	.+52     	; 0x99a8 <__fixunssfsi+0x46>
    9974:	66 0f       	add	r22, r22
    9976:	77 1f       	adc	r23, r23
    9978:	88 1f       	adc	r24, r24
    997a:	99 1f       	adc	r25, r25
    997c:	1a f0       	brmi	.+6      	; 0x9984 <__fixunssfsi+0x22>
    997e:	ba 95       	dec	r27
    9980:	c9 f7       	brne	.-14     	; 0x9974 <__fixunssfsi+0x12>
    9982:	12 c0       	rjmp	.+36     	; 0x99a8 <__fixunssfsi+0x46>
    9984:	b1 30       	cpi	r27, 0x01	; 1
    9986:	81 f0       	breq	.+32     	; 0x99a8 <__fixunssfsi+0x46>
    9988:	fd d0       	rcall	.+506    	; 0x9b84 <__fp_zero>
    998a:	b1 e0       	ldi	r27, 0x01	; 1
    998c:	08 95       	ret
    998e:	fa c0       	rjmp	.+500    	; 0x9b84 <__fp_zero>
    9990:	67 2f       	mov	r22, r23
    9992:	78 2f       	mov	r23, r24
    9994:	88 27       	eor	r24, r24
    9996:	b8 5f       	subi	r27, 0xF8	; 248
    9998:	39 f0       	breq	.+14     	; 0x99a8 <__fixunssfsi+0x46>
    999a:	b9 3f       	cpi	r27, 0xF9	; 249
    999c:	cc f3       	brlt	.-14     	; 0x9990 <__fixunssfsi+0x2e>
    999e:	86 95       	lsr	r24
    99a0:	77 95       	ror	r23
    99a2:	67 95       	ror	r22
    99a4:	b3 95       	inc	r27
    99a6:	d9 f7       	brne	.-10     	; 0x999e <__fixunssfsi+0x3c>
    99a8:	3e f4       	brtc	.+14     	; 0x99b8 <__fixunssfsi+0x56>
    99aa:	90 95       	com	r25
    99ac:	80 95       	com	r24
    99ae:	70 95       	com	r23
    99b0:	61 95       	neg	r22
    99b2:	7f 4f       	sbci	r23, 0xFF	; 255
    99b4:	8f 4f       	sbci	r24, 0xFF	; 255
    99b6:	9f 4f       	sbci	r25, 0xFF	; 255
    99b8:	08 95       	ret

000099ba <__floatunsisf>:
    99ba:	e8 94       	clt
    99bc:	09 c0       	rjmp	.+18     	; 0x99d0 <__floatsisf+0x12>

000099be <__floatsisf>:
    99be:	97 fb       	bst	r25, 7
    99c0:	3e f4       	brtc	.+14     	; 0x99d0 <__floatsisf+0x12>
    99c2:	90 95       	com	r25
    99c4:	80 95       	com	r24
    99c6:	70 95       	com	r23
    99c8:	61 95       	neg	r22
    99ca:	7f 4f       	sbci	r23, 0xFF	; 255
    99cc:	8f 4f       	sbci	r24, 0xFF	; 255
    99ce:	9f 4f       	sbci	r25, 0xFF	; 255
    99d0:	99 23       	and	r25, r25
    99d2:	a9 f0       	breq	.+42     	; 0x99fe <__floatsisf+0x40>
    99d4:	f9 2f       	mov	r31, r25
    99d6:	96 e9       	ldi	r25, 0x96	; 150
    99d8:	bb 27       	eor	r27, r27
    99da:	93 95       	inc	r25
    99dc:	f6 95       	lsr	r31
    99de:	87 95       	ror	r24
    99e0:	77 95       	ror	r23
    99e2:	67 95       	ror	r22
    99e4:	b7 95       	ror	r27
    99e6:	f1 11       	cpse	r31, r1
    99e8:	f8 cf       	rjmp	.-16     	; 0x99da <__floatsisf+0x1c>
    99ea:	fa f4       	brpl	.+62     	; 0x9a2a <__floatsisf+0x6c>
    99ec:	bb 0f       	add	r27, r27
    99ee:	11 f4       	brne	.+4      	; 0x99f4 <__floatsisf+0x36>
    99f0:	60 ff       	sbrs	r22, 0
    99f2:	1b c0       	rjmp	.+54     	; 0x9a2a <__floatsisf+0x6c>
    99f4:	6f 5f       	subi	r22, 0xFF	; 255
    99f6:	7f 4f       	sbci	r23, 0xFF	; 255
    99f8:	8f 4f       	sbci	r24, 0xFF	; 255
    99fa:	9f 4f       	sbci	r25, 0xFF	; 255
    99fc:	16 c0       	rjmp	.+44     	; 0x9a2a <__floatsisf+0x6c>
    99fe:	88 23       	and	r24, r24
    9a00:	11 f0       	breq	.+4      	; 0x9a06 <__floatsisf+0x48>
    9a02:	96 e9       	ldi	r25, 0x96	; 150
    9a04:	11 c0       	rjmp	.+34     	; 0x9a28 <__floatsisf+0x6a>
    9a06:	77 23       	and	r23, r23
    9a08:	21 f0       	breq	.+8      	; 0x9a12 <__floatsisf+0x54>
    9a0a:	9e e8       	ldi	r25, 0x8E	; 142
    9a0c:	87 2f       	mov	r24, r23
    9a0e:	76 2f       	mov	r23, r22
    9a10:	05 c0       	rjmp	.+10     	; 0x9a1c <__floatsisf+0x5e>
    9a12:	66 23       	and	r22, r22
    9a14:	71 f0       	breq	.+28     	; 0x9a32 <__floatsisf+0x74>
    9a16:	96 e8       	ldi	r25, 0x86	; 134
    9a18:	86 2f       	mov	r24, r22
    9a1a:	70 e0       	ldi	r23, 0x00	; 0
    9a1c:	60 e0       	ldi	r22, 0x00	; 0
    9a1e:	2a f0       	brmi	.+10     	; 0x9a2a <__floatsisf+0x6c>
    9a20:	9a 95       	dec	r25
    9a22:	66 0f       	add	r22, r22
    9a24:	77 1f       	adc	r23, r23
    9a26:	88 1f       	adc	r24, r24
    9a28:	da f7       	brpl	.-10     	; 0x9a20 <__floatsisf+0x62>
    9a2a:	88 0f       	add	r24, r24
    9a2c:	96 95       	lsr	r25
    9a2e:	87 95       	ror	r24
    9a30:	97 f9       	bld	r25, 7
    9a32:	08 95       	ret

00009a34 <__fp_inf>:
    9a34:	97 f9       	bld	r25, 7
    9a36:	9f 67       	ori	r25, 0x7F	; 127
    9a38:	80 e8       	ldi	r24, 0x80	; 128
    9a3a:	70 e0       	ldi	r23, 0x00	; 0
    9a3c:	60 e0       	ldi	r22, 0x00	; 0
    9a3e:	08 95       	ret

00009a40 <__fp_nan>:
    9a40:	9f ef       	ldi	r25, 0xFF	; 255
    9a42:	80 ec       	ldi	r24, 0xC0	; 192
    9a44:	08 95       	ret

00009a46 <__fp_powser>:
    9a46:	df 93       	push	r29
    9a48:	cf 93       	push	r28
    9a4a:	1f 93       	push	r17
    9a4c:	0f 93       	push	r16
    9a4e:	ff 92       	push	r15
    9a50:	ef 92       	push	r14
    9a52:	df 92       	push	r13
    9a54:	7b 01       	movw	r14, r22
    9a56:	8c 01       	movw	r16, r24
    9a58:	68 94       	set
    9a5a:	05 c0       	rjmp	.+10     	; 0x9a66 <__fp_powser+0x20>
    9a5c:	da 2e       	mov	r13, r26
    9a5e:	ef 01       	movw	r28, r30
    9a60:	ab d0       	rcall	.+342    	; 0x9bb8 <__mulsf3x>
    9a62:	fe 01       	movw	r30, r28
    9a64:	e8 94       	clt
    9a66:	a5 91       	lpm	r26, Z+
    9a68:	25 91       	lpm	r18, Z+
    9a6a:	35 91       	lpm	r19, Z+
    9a6c:	45 91       	lpm	r20, Z+
    9a6e:	55 91       	lpm	r21, Z+
    9a70:	ae f3       	brts	.-22     	; 0x9a5c <__fp_powser+0x16>
    9a72:	ef 01       	movw	r28, r30
    9a74:	51 de       	rcall	.-862    	; 0x9718 <__addsf3x>
    9a76:	fe 01       	movw	r30, r28
    9a78:	97 01       	movw	r18, r14
    9a7a:	a8 01       	movw	r20, r16
    9a7c:	da 94       	dec	r13
    9a7e:	79 f7       	brne	.-34     	; 0x9a5e <__fp_powser+0x18>
    9a80:	df 90       	pop	r13
    9a82:	ef 90       	pop	r14
    9a84:	ff 90       	pop	r15
    9a86:	0f 91       	pop	r16
    9a88:	1f 91       	pop	r17
    9a8a:	cf 91       	pop	r28
    9a8c:	df 91       	pop	r29
    9a8e:	08 95       	ret

00009a90 <__fp_pscA>:
    9a90:	00 24       	eor	r0, r0
    9a92:	0a 94       	dec	r0
    9a94:	16 16       	cp	r1, r22
    9a96:	17 06       	cpc	r1, r23
    9a98:	18 06       	cpc	r1, r24
    9a9a:	09 06       	cpc	r0, r25
    9a9c:	08 95       	ret

00009a9e <__fp_pscB>:
    9a9e:	00 24       	eor	r0, r0
    9aa0:	0a 94       	dec	r0
    9aa2:	12 16       	cp	r1, r18
    9aa4:	13 06       	cpc	r1, r19
    9aa6:	14 06       	cpc	r1, r20
    9aa8:	05 06       	cpc	r0, r21
    9aaa:	08 95       	ret
    9aac:	c9 cf       	rjmp	.-110    	; 0x9a40 <__fp_nan>

00009aae <__fp_rempio2>:
    9aae:	50 d0       	rcall	.+160    	; 0x9b50 <__fp_splitA>
    9ab0:	e8 f3       	brcs	.-6      	; 0x9aac <__fp_pscB+0xe>
    9ab2:	e8 94       	clt
    9ab4:	e0 e0       	ldi	r30, 0x00	; 0
    9ab6:	bb 27       	eor	r27, r27
    9ab8:	9f 57       	subi	r25, 0x7F	; 127
    9aba:	f0 f0       	brcs	.+60     	; 0x9af8 <__fp_rempio2+0x4a>
    9abc:	2a ed       	ldi	r18, 0xDA	; 218
    9abe:	3f e0       	ldi	r19, 0x0F	; 15
    9ac0:	49 ec       	ldi	r20, 0xC9	; 201
    9ac2:	06 c0       	rjmp	.+12     	; 0x9ad0 <__fp_rempio2+0x22>
    9ac4:	ee 0f       	add	r30, r30
    9ac6:	bb 0f       	add	r27, r27
    9ac8:	66 1f       	adc	r22, r22
    9aca:	77 1f       	adc	r23, r23
    9acc:	88 1f       	adc	r24, r24
    9ace:	28 f0       	brcs	.+10     	; 0x9ada <__fp_rempio2+0x2c>
    9ad0:	b2 3a       	cpi	r27, 0xA2	; 162
    9ad2:	62 07       	cpc	r22, r18
    9ad4:	73 07       	cpc	r23, r19
    9ad6:	84 07       	cpc	r24, r20
    9ad8:	28 f0       	brcs	.+10     	; 0x9ae4 <__fp_rempio2+0x36>
    9ada:	b2 5a       	subi	r27, 0xA2	; 162
    9adc:	62 0b       	sbc	r22, r18
    9ade:	73 0b       	sbc	r23, r19
    9ae0:	84 0b       	sbc	r24, r20
    9ae2:	e3 95       	inc	r30
    9ae4:	9a 95       	dec	r25
    9ae6:	72 f7       	brpl	.-36     	; 0x9ac4 <__fp_rempio2+0x16>
    9ae8:	80 38       	cpi	r24, 0x80	; 128
    9aea:	30 f4       	brcc	.+12     	; 0x9af8 <__fp_rempio2+0x4a>
    9aec:	9a 95       	dec	r25
    9aee:	bb 0f       	add	r27, r27
    9af0:	66 1f       	adc	r22, r22
    9af2:	77 1f       	adc	r23, r23
    9af4:	88 1f       	adc	r24, r24
    9af6:	d2 f7       	brpl	.-12     	; 0x9aec <__fp_rempio2+0x3e>
    9af8:	90 48       	sbci	r25, 0x80	; 128
    9afa:	c0 c0       	rjmp	.+384    	; 0x9c7c <__fp_mpack_finite>

00009afc <__fp_round>:
    9afc:	09 2e       	mov	r0, r25
    9afe:	03 94       	inc	r0
    9b00:	00 0c       	add	r0, r0
    9b02:	11 f4       	brne	.+4      	; 0x9b08 <__fp_round+0xc>
    9b04:	88 23       	and	r24, r24
    9b06:	52 f0       	brmi	.+20     	; 0x9b1c <__fp_round+0x20>
    9b08:	bb 0f       	add	r27, r27
    9b0a:	40 f4       	brcc	.+16     	; 0x9b1c <__fp_round+0x20>
    9b0c:	bf 2b       	or	r27, r31
    9b0e:	11 f4       	brne	.+4      	; 0x9b14 <__fp_round+0x18>
    9b10:	60 ff       	sbrs	r22, 0
    9b12:	04 c0       	rjmp	.+8      	; 0x9b1c <__fp_round+0x20>
    9b14:	6f 5f       	subi	r22, 0xFF	; 255
    9b16:	7f 4f       	sbci	r23, 0xFF	; 255
    9b18:	8f 4f       	sbci	r24, 0xFF	; 255
    9b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    9b1c:	08 95       	ret

00009b1e <__fp_sinus>:
    9b1e:	ef 93       	push	r30
    9b20:	e0 ff       	sbrs	r30, 0
    9b22:	06 c0       	rjmp	.+12     	; 0x9b30 <__fp_sinus+0x12>
    9b24:	a2 ea       	ldi	r26, 0xA2	; 162
    9b26:	2a ed       	ldi	r18, 0xDA	; 218
    9b28:	3f e0       	ldi	r19, 0x0F	; 15
    9b2a:	49 ec       	ldi	r20, 0xC9	; 201
    9b2c:	5f eb       	ldi	r21, 0xBF	; 191
    9b2e:	f4 dd       	rcall	.-1048   	; 0x9718 <__addsf3x>
    9b30:	e5 df       	rcall	.-54     	; 0x9afc <__fp_round>
    9b32:	0f 90       	pop	r0
    9b34:	03 94       	inc	r0
    9b36:	01 fc       	sbrc	r0, 1
    9b38:	90 58       	subi	r25, 0x80	; 128
    9b3a:	eb e7       	ldi	r30, 0x7B	; 123
    9b3c:	f1 e0       	ldi	r31, 0x01	; 1
    9b3e:	aa c0       	rjmp	.+340    	; 0x9c94 <__fp_powsodd>

00009b40 <__fp_split3>:
    9b40:	57 fd       	sbrc	r21, 7
    9b42:	90 58       	subi	r25, 0x80	; 128
    9b44:	44 0f       	add	r20, r20
    9b46:	55 1f       	adc	r21, r21
    9b48:	59 f0       	breq	.+22     	; 0x9b60 <__fp_splitA+0x10>
    9b4a:	5f 3f       	cpi	r21, 0xFF	; 255
    9b4c:	71 f0       	breq	.+28     	; 0x9b6a <__fp_splitA+0x1a>
    9b4e:	47 95       	ror	r20

00009b50 <__fp_splitA>:
    9b50:	88 0f       	add	r24, r24
    9b52:	97 fb       	bst	r25, 7
    9b54:	99 1f       	adc	r25, r25
    9b56:	61 f0       	breq	.+24     	; 0x9b70 <__fp_splitA+0x20>
    9b58:	9f 3f       	cpi	r25, 0xFF	; 255
    9b5a:	79 f0       	breq	.+30     	; 0x9b7a <__fp_splitA+0x2a>
    9b5c:	87 95       	ror	r24
    9b5e:	08 95       	ret
    9b60:	12 16       	cp	r1, r18
    9b62:	13 06       	cpc	r1, r19
    9b64:	14 06       	cpc	r1, r20
    9b66:	55 1f       	adc	r21, r21
    9b68:	f2 cf       	rjmp	.-28     	; 0x9b4e <__fp_split3+0xe>
    9b6a:	46 95       	lsr	r20
    9b6c:	f1 df       	rcall	.-30     	; 0x9b50 <__fp_splitA>
    9b6e:	08 c0       	rjmp	.+16     	; 0x9b80 <__fp_splitA+0x30>
    9b70:	16 16       	cp	r1, r22
    9b72:	17 06       	cpc	r1, r23
    9b74:	18 06       	cpc	r1, r24
    9b76:	99 1f       	adc	r25, r25
    9b78:	f1 cf       	rjmp	.-30     	; 0x9b5c <__fp_splitA+0xc>
    9b7a:	86 95       	lsr	r24
    9b7c:	71 05       	cpc	r23, r1
    9b7e:	61 05       	cpc	r22, r1
    9b80:	08 94       	sec
    9b82:	08 95       	ret

00009b84 <__fp_zero>:
    9b84:	e8 94       	clt

00009b86 <__fp_szero>:
    9b86:	bb 27       	eor	r27, r27
    9b88:	66 27       	eor	r22, r22
    9b8a:	77 27       	eor	r23, r23
    9b8c:	cb 01       	movw	r24, r22
    9b8e:	97 f9       	bld	r25, 7
    9b90:	08 95       	ret

00009b92 <inverse>:
    9b92:	9b 01       	movw	r18, r22
    9b94:	ac 01       	movw	r20, r24
    9b96:	60 e0       	ldi	r22, 0x00	; 0
    9b98:	70 e0       	ldi	r23, 0x00	; 0
    9b9a:	80 e8       	ldi	r24, 0x80	; 128
    9b9c:	9f e3       	ldi	r25, 0x3F	; 63
    9b9e:	74 ce       	rjmp	.-792    	; 0x9888 <__divsf3>

00009ba0 <__mulsf3>:
    9ba0:	0b d0       	rcall	.+22     	; 0x9bb8 <__mulsf3x>
    9ba2:	ac cf       	rjmp	.-168    	; 0x9afc <__fp_round>
    9ba4:	75 df       	rcall	.-278    	; 0x9a90 <__fp_pscA>
    9ba6:	28 f0       	brcs	.+10     	; 0x9bb2 <__mulsf3+0x12>
    9ba8:	7a df       	rcall	.-268    	; 0x9a9e <__fp_pscB>
    9baa:	18 f0       	brcs	.+6      	; 0x9bb2 <__mulsf3+0x12>
    9bac:	95 23       	and	r25, r21
    9bae:	09 f0       	breq	.+2      	; 0x9bb2 <__mulsf3+0x12>
    9bb0:	41 cf       	rjmp	.-382    	; 0x9a34 <__fp_inf>
    9bb2:	46 cf       	rjmp	.-372    	; 0x9a40 <__fp_nan>
    9bb4:	11 24       	eor	r1, r1
    9bb6:	e7 cf       	rjmp	.-50     	; 0x9b86 <__fp_szero>

00009bb8 <__mulsf3x>:
    9bb8:	c3 df       	rcall	.-122    	; 0x9b40 <__fp_split3>
    9bba:	a0 f3       	brcs	.-24     	; 0x9ba4 <__mulsf3+0x4>

00009bbc <__mulsf3_pse>:
    9bbc:	95 9f       	mul	r25, r21
    9bbe:	d1 f3       	breq	.-12     	; 0x9bb4 <__mulsf3+0x14>
    9bc0:	95 0f       	add	r25, r21
    9bc2:	50 e0       	ldi	r21, 0x00	; 0
    9bc4:	55 1f       	adc	r21, r21
    9bc6:	62 9f       	mul	r22, r18
    9bc8:	f0 01       	movw	r30, r0
    9bca:	72 9f       	mul	r23, r18
    9bcc:	bb 27       	eor	r27, r27
    9bce:	f0 0d       	add	r31, r0
    9bd0:	b1 1d       	adc	r27, r1
    9bd2:	63 9f       	mul	r22, r19
    9bd4:	aa 27       	eor	r26, r26
    9bd6:	f0 0d       	add	r31, r0
    9bd8:	b1 1d       	adc	r27, r1
    9bda:	aa 1f       	adc	r26, r26
    9bdc:	64 9f       	mul	r22, r20
    9bde:	66 27       	eor	r22, r22
    9be0:	b0 0d       	add	r27, r0
    9be2:	a1 1d       	adc	r26, r1
    9be4:	66 1f       	adc	r22, r22
    9be6:	82 9f       	mul	r24, r18
    9be8:	22 27       	eor	r18, r18
    9bea:	b0 0d       	add	r27, r0
    9bec:	a1 1d       	adc	r26, r1
    9bee:	62 1f       	adc	r22, r18
    9bf0:	73 9f       	mul	r23, r19
    9bf2:	b0 0d       	add	r27, r0
    9bf4:	a1 1d       	adc	r26, r1
    9bf6:	62 1f       	adc	r22, r18
    9bf8:	83 9f       	mul	r24, r19
    9bfa:	a0 0d       	add	r26, r0
    9bfc:	61 1d       	adc	r22, r1
    9bfe:	22 1f       	adc	r18, r18
    9c00:	74 9f       	mul	r23, r20
    9c02:	33 27       	eor	r19, r19
    9c04:	a0 0d       	add	r26, r0
    9c06:	61 1d       	adc	r22, r1
    9c08:	23 1f       	adc	r18, r19
    9c0a:	84 9f       	mul	r24, r20
    9c0c:	60 0d       	add	r22, r0
    9c0e:	21 1d       	adc	r18, r1
    9c10:	82 2f       	mov	r24, r18
    9c12:	76 2f       	mov	r23, r22
    9c14:	6a 2f       	mov	r22, r26
    9c16:	11 24       	eor	r1, r1
    9c18:	9f 57       	subi	r25, 0x7F	; 127
    9c1a:	50 40       	sbci	r21, 0x00	; 0
    9c1c:	8a f0       	brmi	.+34     	; 0x9c40 <__mulsf3_pse+0x84>
    9c1e:	e1 f0       	breq	.+56     	; 0x9c58 <__mulsf3_pse+0x9c>
    9c20:	88 23       	and	r24, r24
    9c22:	4a f0       	brmi	.+18     	; 0x9c36 <__mulsf3_pse+0x7a>
    9c24:	ee 0f       	add	r30, r30
    9c26:	ff 1f       	adc	r31, r31
    9c28:	bb 1f       	adc	r27, r27
    9c2a:	66 1f       	adc	r22, r22
    9c2c:	77 1f       	adc	r23, r23
    9c2e:	88 1f       	adc	r24, r24
    9c30:	91 50       	subi	r25, 0x01	; 1
    9c32:	50 40       	sbci	r21, 0x00	; 0
    9c34:	a9 f7       	brne	.-22     	; 0x9c20 <__mulsf3_pse+0x64>
    9c36:	9e 3f       	cpi	r25, 0xFE	; 254
    9c38:	51 05       	cpc	r21, r1
    9c3a:	70 f0       	brcs	.+28     	; 0x9c58 <__mulsf3_pse+0x9c>
    9c3c:	fb ce       	rjmp	.-522    	; 0x9a34 <__fp_inf>
    9c3e:	a3 cf       	rjmp	.-186    	; 0x9b86 <__fp_szero>
    9c40:	5f 3f       	cpi	r21, 0xFF	; 255
    9c42:	ec f3       	brlt	.-6      	; 0x9c3e <__mulsf3_pse+0x82>
    9c44:	98 3e       	cpi	r25, 0xE8	; 232
    9c46:	dc f3       	brlt	.-10     	; 0x9c3e <__mulsf3_pse+0x82>
    9c48:	86 95       	lsr	r24
    9c4a:	77 95       	ror	r23
    9c4c:	67 95       	ror	r22
    9c4e:	b7 95       	ror	r27
    9c50:	f7 95       	ror	r31
    9c52:	e7 95       	ror	r30
    9c54:	9f 5f       	subi	r25, 0xFF	; 255
    9c56:	c1 f7       	brne	.-16     	; 0x9c48 <__mulsf3_pse+0x8c>
    9c58:	fe 2b       	or	r31, r30
    9c5a:	88 0f       	add	r24, r24
    9c5c:	91 1d       	adc	r25, r1
    9c5e:	96 95       	lsr	r25
    9c60:	87 95       	ror	r24
    9c62:	97 f9       	bld	r25, 7
    9c64:	08 95       	ret

00009c66 <sin>:
    9c66:	9f 93       	push	r25
    9c68:	22 df       	rcall	.-444    	; 0x9aae <__fp_rempio2>
    9c6a:	0f 90       	pop	r0
    9c6c:	07 fc       	sbrc	r0, 7
    9c6e:	ee 5f       	subi	r30, 0xFE	; 254
    9c70:	56 cf       	rjmp	.-340    	; 0x9b1e <__fp_sinus>

00009c72 <square>:
    9c72:	9b 01       	movw	r18, r22
    9c74:	ac 01       	movw	r20, r24
    9c76:	94 cf       	rjmp	.-216    	; 0x9ba0 <__mulsf3>

00009c78 <__fp_mpack>:
    9c78:	9f 3f       	cpi	r25, 0xFF	; 255
    9c7a:	31 f0       	breq	.+12     	; 0x9c88 <__fp_mpack_finite+0xc>

00009c7c <__fp_mpack_finite>:
    9c7c:	91 50       	subi	r25, 0x01	; 1
    9c7e:	20 f4       	brcc	.+8      	; 0x9c88 <__fp_mpack_finite+0xc>
    9c80:	87 95       	ror	r24
    9c82:	77 95       	ror	r23
    9c84:	67 95       	ror	r22
    9c86:	b7 95       	ror	r27
    9c88:	88 0f       	add	r24, r24
    9c8a:	91 1d       	adc	r25, r1
    9c8c:	96 95       	lsr	r25
    9c8e:	87 95       	ror	r24
    9c90:	97 f9       	bld	r25, 7
    9c92:	08 95       	ret

00009c94 <__fp_powsodd>:
    9c94:	9f 93       	push	r25
    9c96:	8f 93       	push	r24
    9c98:	7f 93       	push	r23
    9c9a:	6f 93       	push	r22
    9c9c:	ff 93       	push	r31
    9c9e:	ef 93       	push	r30
    9ca0:	9b 01       	movw	r18, r22
    9ca2:	ac 01       	movw	r20, r24
    9ca4:	7d df       	rcall	.-262    	; 0x9ba0 <__mulsf3>
    9ca6:	ef 91       	pop	r30
    9ca8:	ff 91       	pop	r31
    9caa:	cd de       	rcall	.-614    	; 0x9a46 <__fp_powser>
    9cac:	2f 91       	pop	r18
    9cae:	3f 91       	pop	r19
    9cb0:	4f 91       	pop	r20
    9cb2:	5f 91       	pop	r21
    9cb4:	75 cf       	rjmp	.-278    	; 0x9ba0 <__mulsf3>

00009cb6 <__mulsi3>:
    9cb6:	62 9f       	mul	r22, r18
    9cb8:	d0 01       	movw	r26, r0
    9cba:	73 9f       	mul	r23, r19
    9cbc:	f0 01       	movw	r30, r0
    9cbe:	82 9f       	mul	r24, r18
    9cc0:	e0 0d       	add	r30, r0
    9cc2:	f1 1d       	adc	r31, r1
    9cc4:	64 9f       	mul	r22, r20
    9cc6:	e0 0d       	add	r30, r0
    9cc8:	f1 1d       	adc	r31, r1
    9cca:	92 9f       	mul	r25, r18
    9ccc:	f0 0d       	add	r31, r0
    9cce:	83 9f       	mul	r24, r19
    9cd0:	f0 0d       	add	r31, r0
    9cd2:	74 9f       	mul	r23, r20
    9cd4:	f0 0d       	add	r31, r0
    9cd6:	65 9f       	mul	r22, r21
    9cd8:	f0 0d       	add	r31, r0
    9cda:	99 27       	eor	r25, r25
    9cdc:	72 9f       	mul	r23, r18
    9cde:	b0 0d       	add	r27, r0
    9ce0:	e1 1d       	adc	r30, r1
    9ce2:	f9 1f       	adc	r31, r25
    9ce4:	63 9f       	mul	r22, r19
    9ce6:	b0 0d       	add	r27, r0
    9ce8:	e1 1d       	adc	r30, r1
    9cea:	f9 1f       	adc	r31, r25
    9cec:	bd 01       	movw	r22, r26
    9cee:	cf 01       	movw	r24, r30
    9cf0:	11 24       	eor	r1, r1
    9cf2:	08 95       	ret

00009cf4 <__udivmodhi4>:
    9cf4:	aa 1b       	sub	r26, r26
    9cf6:	bb 1b       	sub	r27, r27
    9cf8:	51 e1       	ldi	r21, 0x11	; 17
    9cfa:	07 c0       	rjmp	.+14     	; 0x9d0a <__udivmodhi4_ep>

00009cfc <__udivmodhi4_loop>:
    9cfc:	aa 1f       	adc	r26, r26
    9cfe:	bb 1f       	adc	r27, r27
    9d00:	a6 17       	cp	r26, r22
    9d02:	b7 07       	cpc	r27, r23
    9d04:	10 f0       	brcs	.+4      	; 0x9d0a <__udivmodhi4_ep>
    9d06:	a6 1b       	sub	r26, r22
    9d08:	b7 0b       	sbc	r27, r23

00009d0a <__udivmodhi4_ep>:
    9d0a:	88 1f       	adc	r24, r24
    9d0c:	99 1f       	adc	r25, r25
    9d0e:	5a 95       	dec	r21
    9d10:	a9 f7       	brne	.-22     	; 0x9cfc <__udivmodhi4_loop>
    9d12:	80 95       	com	r24
    9d14:	90 95       	com	r25
    9d16:	bc 01       	movw	r22, r24
    9d18:	cd 01       	movw	r24, r26
    9d1a:	08 95       	ret

00009d1c <__divmodhi4>:
    9d1c:	97 fb       	bst	r25, 7
    9d1e:	09 2e       	mov	r0, r25
    9d20:	07 26       	eor	r0, r23
    9d22:	0a d0       	rcall	.+20     	; 0x9d38 <__divmodhi4_neg1>
    9d24:	77 fd       	sbrc	r23, 7
    9d26:	04 d0       	rcall	.+8      	; 0x9d30 <__divmodhi4_neg2>
    9d28:	e5 df       	rcall	.-54     	; 0x9cf4 <__udivmodhi4>
    9d2a:	06 d0       	rcall	.+12     	; 0x9d38 <__divmodhi4_neg1>
    9d2c:	00 20       	and	r0, r0
    9d2e:	1a f4       	brpl	.+6      	; 0x9d36 <__divmodhi4_exit>

00009d30 <__divmodhi4_neg2>:
    9d30:	70 95       	com	r23
    9d32:	61 95       	neg	r22
    9d34:	7f 4f       	sbci	r23, 0xFF	; 255

00009d36 <__divmodhi4_exit>:
    9d36:	08 95       	ret

00009d38 <__divmodhi4_neg1>:
    9d38:	f6 f7       	brtc	.-4      	; 0x9d36 <__divmodhi4_exit>
    9d3a:	90 95       	com	r25
    9d3c:	81 95       	neg	r24
    9d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    9d40:	08 95       	ret

00009d42 <__divmodsi4>:
    9d42:	97 fb       	bst	r25, 7
    9d44:	09 2e       	mov	r0, r25
    9d46:	05 26       	eor	r0, r21
    9d48:	0e d0       	rcall	.+28     	; 0x9d66 <__divmodsi4_neg1>
    9d4a:	57 fd       	sbrc	r21, 7
    9d4c:	04 d0       	rcall	.+8      	; 0x9d56 <__divmodsi4_neg2>
    9d4e:	14 d0       	rcall	.+40     	; 0x9d78 <__udivmodsi4>
    9d50:	0a d0       	rcall	.+20     	; 0x9d66 <__divmodsi4_neg1>
    9d52:	00 1c       	adc	r0, r0
    9d54:	38 f4       	brcc	.+14     	; 0x9d64 <__divmodsi4_exit>

00009d56 <__divmodsi4_neg2>:
    9d56:	50 95       	com	r21
    9d58:	40 95       	com	r20
    9d5a:	30 95       	com	r19
    9d5c:	21 95       	neg	r18
    9d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    9d60:	4f 4f       	sbci	r20, 0xFF	; 255
    9d62:	5f 4f       	sbci	r21, 0xFF	; 255

00009d64 <__divmodsi4_exit>:
    9d64:	08 95       	ret

00009d66 <__divmodsi4_neg1>:
    9d66:	f6 f7       	brtc	.-4      	; 0x9d64 <__divmodsi4_exit>
    9d68:	90 95       	com	r25
    9d6a:	80 95       	com	r24
    9d6c:	70 95       	com	r23
    9d6e:	61 95       	neg	r22
    9d70:	7f 4f       	sbci	r23, 0xFF	; 255
    9d72:	8f 4f       	sbci	r24, 0xFF	; 255
    9d74:	9f 4f       	sbci	r25, 0xFF	; 255
    9d76:	08 95       	ret

00009d78 <__udivmodsi4>:
    9d78:	a1 e2       	ldi	r26, 0x21	; 33
    9d7a:	1a 2e       	mov	r1, r26
    9d7c:	aa 1b       	sub	r26, r26
    9d7e:	bb 1b       	sub	r27, r27
    9d80:	fd 01       	movw	r30, r26
    9d82:	0d c0       	rjmp	.+26     	; 0x9d9e <__udivmodsi4_ep>

00009d84 <__udivmodsi4_loop>:
    9d84:	aa 1f       	adc	r26, r26
    9d86:	bb 1f       	adc	r27, r27
    9d88:	ee 1f       	adc	r30, r30
    9d8a:	ff 1f       	adc	r31, r31
    9d8c:	a2 17       	cp	r26, r18
    9d8e:	b3 07       	cpc	r27, r19
    9d90:	e4 07       	cpc	r30, r20
    9d92:	f5 07       	cpc	r31, r21
    9d94:	20 f0       	brcs	.+8      	; 0x9d9e <__udivmodsi4_ep>
    9d96:	a2 1b       	sub	r26, r18
    9d98:	b3 0b       	sbc	r27, r19
    9d9a:	e4 0b       	sbc	r30, r20
    9d9c:	f5 0b       	sbc	r31, r21

00009d9e <__udivmodsi4_ep>:
    9d9e:	66 1f       	adc	r22, r22
    9da0:	77 1f       	adc	r23, r23
    9da2:	88 1f       	adc	r24, r24
    9da4:	99 1f       	adc	r25, r25
    9da6:	1a 94       	dec	r1
    9da8:	69 f7       	brne	.-38     	; 0x9d84 <__udivmodsi4_loop>
    9daa:	60 95       	com	r22
    9dac:	70 95       	com	r23
    9dae:	80 95       	com	r24
    9db0:	90 95       	com	r25
    9db2:	9b 01       	movw	r18, r22
    9db4:	ac 01       	movw	r20, r24
    9db6:	bd 01       	movw	r22, r26
    9db8:	cf 01       	movw	r24, r30
    9dba:	08 95       	ret

00009dbc <do_rand>:
    9dbc:	af 92       	push	r10
    9dbe:	bf 92       	push	r11
    9dc0:	cf 92       	push	r12
    9dc2:	df 92       	push	r13
    9dc4:	ef 92       	push	r14
    9dc6:	ff 92       	push	r15
    9dc8:	0f 93       	push	r16
    9dca:	1f 93       	push	r17
    9dcc:	cf 93       	push	r28
    9dce:	df 93       	push	r29
    9dd0:	ec 01       	movw	r28, r24
    9dd2:	a8 80       	ld	r10, Y
    9dd4:	b9 80       	ldd	r11, Y+1	; 0x01
    9dd6:	ca 80       	ldd	r12, Y+2	; 0x02
    9dd8:	db 80       	ldd	r13, Y+3	; 0x03
    9dda:	a1 14       	cp	r10, r1
    9ddc:	b1 04       	cpc	r11, r1
    9dde:	c1 04       	cpc	r12, r1
    9de0:	d1 04       	cpc	r13, r1
    9de2:	41 f4       	brne	.+16     	; 0x9df4 <do_rand+0x38>
    9de4:	84 e2       	ldi	r24, 0x24	; 36
    9de6:	a8 2e       	mov	r10, r24
    9de8:	89 ed       	ldi	r24, 0xD9	; 217
    9dea:	b8 2e       	mov	r11, r24
    9dec:	8b e5       	ldi	r24, 0x5B	; 91
    9dee:	c8 2e       	mov	r12, r24
    9df0:	87 e0       	ldi	r24, 0x07	; 7
    9df2:	d8 2e       	mov	r13, r24
    9df4:	c6 01       	movw	r24, r12
    9df6:	b5 01       	movw	r22, r10
    9df8:	2d e1       	ldi	r18, 0x1D	; 29
    9dfa:	33 ef       	ldi	r19, 0xF3	; 243
    9dfc:	41 e0       	ldi	r20, 0x01	; 1
    9dfe:	50 e0       	ldi	r21, 0x00	; 0
    9e00:	0e 94 a1 4e 	call	0x9d42	; 0x9d42 <__divmodsi4>
    9e04:	27 ea       	ldi	r18, 0xA7	; 167
    9e06:	31 e4       	ldi	r19, 0x41	; 65
    9e08:	40 e0       	ldi	r20, 0x00	; 0
    9e0a:	50 e0       	ldi	r21, 0x00	; 0
    9e0c:	0e 94 5b 4e 	call	0x9cb6	; 0x9cb6 <__mulsi3>
    9e10:	7b 01       	movw	r14, r22
    9e12:	8c 01       	movw	r16, r24
    9e14:	c6 01       	movw	r24, r12
    9e16:	b5 01       	movw	r22, r10
    9e18:	2d e1       	ldi	r18, 0x1D	; 29
    9e1a:	33 ef       	ldi	r19, 0xF3	; 243
    9e1c:	41 e0       	ldi	r20, 0x01	; 1
    9e1e:	50 e0       	ldi	r21, 0x00	; 0
    9e20:	0e 94 a1 4e 	call	0x9d42	; 0x9d42 <__divmodsi4>
    9e24:	ca 01       	movw	r24, r20
    9e26:	b9 01       	movw	r22, r18
    9e28:	2c ee       	ldi	r18, 0xEC	; 236
    9e2a:	34 ef       	ldi	r19, 0xF4	; 244
    9e2c:	4f ef       	ldi	r20, 0xFF	; 255
    9e2e:	5f ef       	ldi	r21, 0xFF	; 255
    9e30:	0e 94 5b 4e 	call	0x9cb6	; 0x9cb6 <__mulsi3>
    9e34:	6e 0d       	add	r22, r14
    9e36:	7f 1d       	adc	r23, r15
    9e38:	80 1f       	adc	r24, r16
    9e3a:	91 1f       	adc	r25, r17
    9e3c:	97 ff       	sbrs	r25, 7
    9e3e:	04 c0       	rjmp	.+8      	; 0x9e48 <do_rand+0x8c>
    9e40:	61 50       	subi	r22, 0x01	; 1
    9e42:	70 40       	sbci	r23, 0x00	; 0
    9e44:	80 40       	sbci	r24, 0x00	; 0
    9e46:	90 48       	sbci	r25, 0x80	; 128
    9e48:	68 83       	st	Y, r22
    9e4a:	79 83       	std	Y+1, r23	; 0x01
    9e4c:	8a 83       	std	Y+2, r24	; 0x02
    9e4e:	9b 83       	std	Y+3, r25	; 0x03
    9e50:	9b 01       	movw	r18, r22
    9e52:	3f 77       	andi	r19, 0x7F	; 127
    9e54:	c9 01       	movw	r24, r18
    9e56:	df 91       	pop	r29
    9e58:	cf 91       	pop	r28
    9e5a:	1f 91       	pop	r17
    9e5c:	0f 91       	pop	r16
    9e5e:	ff 90       	pop	r15
    9e60:	ef 90       	pop	r14
    9e62:	df 90       	pop	r13
    9e64:	cf 90       	pop	r12
    9e66:	bf 90       	pop	r11
    9e68:	af 90       	pop	r10
    9e6a:	08 95       	ret

00009e6c <rand_r>:
    9e6c:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <do_rand>
    9e70:	08 95       	ret

00009e72 <rand>:
    9e72:	86 e3       	ldi	r24, 0x36	; 54
    9e74:	92 e0       	ldi	r25, 0x02	; 2
    9e76:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <do_rand>
    9e7a:	08 95       	ret

00009e7c <srand>:
    9e7c:	a0 e0       	ldi	r26, 0x00	; 0
    9e7e:	b0 e0       	ldi	r27, 0x00	; 0
    9e80:	80 93 36 02 	sts	0x0236, r24
    9e84:	90 93 37 02 	sts	0x0237, r25
    9e88:	a0 93 38 02 	sts	0x0238, r26
    9e8c:	b0 93 39 02 	sts	0x0239, r27
    9e90:	08 95       	ret

00009e92 <memset>:
    9e92:	dc 01       	movw	r26, r24
    9e94:	01 c0       	rjmp	.+2      	; 0x9e98 <memset+0x6>
    9e96:	6d 93       	st	X+, r22
    9e98:	41 50       	subi	r20, 0x01	; 1
    9e9a:	50 40       	sbci	r21, 0x00	; 0
    9e9c:	e0 f7       	brcc	.-8      	; 0x9e96 <memset+0x4>
    9e9e:	08 95       	ret

00009ea0 <__eerd_block_m2560>:
    9ea0:	dc 01       	movw	r26, r24
    9ea2:	cb 01       	movw	r24, r22

00009ea4 <__eerd_blraw_m2560>:
    9ea4:	fc 01       	movw	r30, r24
    9ea6:	f9 99       	sbic	0x1f, 1	; 31
    9ea8:	fe cf       	rjmp	.-4      	; 0x9ea6 <__eerd_blraw_m2560+0x2>
    9eaa:	06 c0       	rjmp	.+12     	; 0x9eb8 <__eerd_blraw_m2560+0x14>
    9eac:	f2 bd       	out	0x22, r31	; 34
    9eae:	e1 bd       	out	0x21, r30	; 33
    9eb0:	f8 9a       	sbi	0x1f, 0	; 31
    9eb2:	31 96       	adiw	r30, 0x01	; 1
    9eb4:	00 b4       	in	r0, 0x20	; 32
    9eb6:	0d 92       	st	X+, r0
    9eb8:	41 50       	subi	r20, 0x01	; 1
    9eba:	50 40       	sbci	r21, 0x00	; 0
    9ebc:	b8 f7       	brcc	.-18     	; 0x9eac <__eerd_blraw_m2560+0x8>
    9ebe:	08 95       	ret

00009ec0 <__eerd_byte_m2560>:
    9ec0:	f9 99       	sbic	0x1f, 1	; 31
    9ec2:	fe cf       	rjmp	.-4      	; 0x9ec0 <__eerd_byte_m2560>
    9ec4:	92 bd       	out	0x22, r25	; 34
    9ec6:	81 bd       	out	0x21, r24	; 33
    9ec8:	f8 9a       	sbi	0x1f, 0	; 31
    9eca:	99 27       	eor	r25, r25
    9ecc:	80 b5       	in	r24, 0x20	; 32
    9ece:	08 95       	ret

00009ed0 <__eerd_word_m2560>:
    9ed0:	a8 e1       	ldi	r26, 0x18	; 24
    9ed2:	b0 e0       	ldi	r27, 0x00	; 0
    9ed4:	42 e0       	ldi	r20, 0x02	; 2
    9ed6:	50 e0       	ldi	r21, 0x00	; 0
    9ed8:	0c 94 52 4f 	jmp	0x9ea4	; 0x9ea4 <__eerd_blraw_m2560>

00009edc <__eeupd_block_m2560>:
    9edc:	dc 01       	movw	r26, r24
    9ede:	a4 0f       	add	r26, r20
    9ee0:	b5 1f       	adc	r27, r21
    9ee2:	41 50       	subi	r20, 0x01	; 1
    9ee4:	50 40       	sbci	r21, 0x00	; 0
    9ee6:	48 f0       	brcs	.+18     	; 0x9efa <__eeupd_block_m2560+0x1e>
    9ee8:	cb 01       	movw	r24, r22
    9eea:	84 0f       	add	r24, r20
    9eec:	95 1f       	adc	r25, r21
    9eee:	2e 91       	ld	r18, -X
    9ef0:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <__eeupd_r18_m2560>
    9ef4:	41 50       	subi	r20, 0x01	; 1
    9ef6:	50 40       	sbci	r21, 0x00	; 0
    9ef8:	d0 f7       	brcc	.-12     	; 0x9eee <__eeupd_block_m2560+0x12>
    9efa:	08 95       	ret

00009efc <__eeupd_byte_m2560>:
    9efc:	26 2f       	mov	r18, r22

00009efe <__eeupd_r18_m2560>:
    9efe:	f9 99       	sbic	0x1f, 1	; 31
    9f00:	fe cf       	rjmp	.-4      	; 0x9efe <__eeupd_r18_m2560>
    9f02:	92 bd       	out	0x22, r25	; 34
    9f04:	81 bd       	out	0x21, r24	; 33
    9f06:	f8 9a       	sbi	0x1f, 0	; 31
    9f08:	01 97       	sbiw	r24, 0x01	; 1
    9f0a:	00 b4       	in	r0, 0x20	; 32
    9f0c:	02 16       	cp	r0, r18
    9f0e:	39 f0       	breq	.+14     	; 0x9f1e <__eeupd_r18_m2560+0x20>
    9f10:	1f ba       	out	0x1f, r1	; 31
    9f12:	20 bd       	out	0x20, r18	; 32
    9f14:	0f b6       	in	r0, 0x3f	; 63
    9f16:	f8 94       	cli
    9f18:	fa 9a       	sbi	0x1f, 2	; 31
    9f1a:	f9 9a       	sbi	0x1f, 1	; 31
    9f1c:	0f be       	out	0x3f, r0	; 63
    9f1e:	08 95       	ret

00009f20 <__eeupd_word_m2560>:
    9f20:	01 96       	adiw	r24, 0x01	; 1
    9f22:	27 2f       	mov	r18, r23
    9f24:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <__eeupd_r18_m2560>
    9f28:	0c 94 7e 4f 	jmp	0x9efc	; 0x9efc <__eeupd_byte_m2560>

00009f2c <__eewr_byte_m2560>:
    9f2c:	26 2f       	mov	r18, r22

00009f2e <__eewr_r18_m2560>:
    9f2e:	f9 99       	sbic	0x1f, 1	; 31
    9f30:	fe cf       	rjmp	.-4      	; 0x9f2e <__eewr_r18_m2560>
    9f32:	1f ba       	out	0x1f, r1	; 31
    9f34:	92 bd       	out	0x22, r25	; 34
    9f36:	81 bd       	out	0x21, r24	; 33
    9f38:	20 bd       	out	0x20, r18	; 32
    9f3a:	0f b6       	in	r0, 0x3f	; 63
    9f3c:	f8 94       	cli
    9f3e:	fa 9a       	sbi	0x1f, 2	; 31
    9f40:	f9 9a       	sbi	0x1f, 1	; 31
    9f42:	0f be       	out	0x3f, r0	; 63
    9f44:	01 96       	adiw	r24, 0x01	; 1
    9f46:	08 95       	ret

00009f48 <_exit>:
    9f48:	f8 94       	cli

00009f4a <__stop_program>:
    9f4a:	ff cf       	rjmp	.-2      	; 0x9f4a <__stop_program>
