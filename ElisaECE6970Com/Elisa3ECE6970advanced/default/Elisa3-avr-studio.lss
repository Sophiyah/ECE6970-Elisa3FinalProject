
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  00009f74  0000a008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009f74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000965  0080021a  0080021a  0000a022  2**0
                  ALLOC
  3 .debug_aranges 00000220  00000000  00000000  0000a022  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000277d  00000000  00000000  0000a242  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004edc  00000000  00000000  0000c9bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000125f  00000000  00000000  0001189b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006aaf  00000000  00000000  00012afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000940  00000000  00000000  000195ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001da0  00000000  00000000  00019eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e2c  00000000  00000000  0001bc8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  0001cab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      14:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      1c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      20:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      24:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      28:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__vector_10>
      2c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      30:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      34:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__vector_13>
      38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      3c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__vector_15>
      40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      44:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      48:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      4c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      50:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      54:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      58:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      5c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      60:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      64:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__vector_25>
      68:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      6c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      70:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      74:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__vector_29>
      78:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      7c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      80:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <__vector_32>
      84:	0c 94 68 23 	jmp	0x46d0	; 0x46d0 <__vector_33>
      88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      8c:	0c 94 bb 22 	jmp	0x4576	; 0x4576 <__vector_35>
      90:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      94:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      98:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      9c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      a8:	0c 94 8f 22 	jmp	0x451e	; 0x451e <__vector_42>
      ac:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__vector_43>
      b0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      b4:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__vector_45>
      b8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      bc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      c8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      cc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      d8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      dc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      e0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      e4:	8a 0a       	sbc	r8, r26
      e6:	75 0a       	sbc	r7, r21
      e8:	4c 0a       	sbc	r4, r28
      ea:	31 0a       	sbc	r3, r17
      ec:	0c 0a       	sbc	r0, r28
      ee:	d6 09       	sbc	r29, r6
      f0:	a8 09       	sbc	r26, r8
      f2:	ec 09       	sbc	r30, r12
      f4:	75 09       	sbc	r23, r5
      f6:	59 09       	sbc	r21, r9
      f8:	f9 08       	sbc	r15, r9
      fa:	f9 08       	sbc	r15, r9
      fc:	f9 08       	sbc	r15, r9
      fe:	f9 08       	sbc	r15, r9
     100:	f9 08       	sbc	r15, r9
     102:	f9 08       	sbc	r15, r9
     104:	4d 09       	sbc	r20, r13
     106:	42 09       	sbc	r20, r2
     108:	f9 08       	sbc	r15, r9
     10a:	f9 08       	sbc	r15, r9
     10c:	f9 08       	sbc	r15, r9
     10e:	f9 08       	sbc	r15, r9
     110:	f9 08       	sbc	r15, r9
     112:	f9 08       	sbc	r15, r9
     114:	f9 08       	sbc	r15, r9
     116:	f9 08       	sbc	r15, r9
     118:	f9 08       	sbc	r15, r9
     11a:	f9 08       	sbc	r15, r9
     11c:	f9 08       	sbc	r15, r9
     11e:	f9 08       	sbc	r15, r9
     120:	75 09       	sbc	r23, r5
     122:	4c 0a       	sbc	r4, r28
     124:	36 09       	sbc	r19, r6
     126:	29 09       	sbc	r18, r9
     128:	f9 08       	sbc	r15, r9
     12a:	f9 08       	sbc	r15, r9
     12c:	f9 08       	sbc	r15, r9
     12e:	f9 08       	sbc	r15, r9
     130:	f9 08       	sbc	r15, r9
     132:	f9 08       	sbc	r15, r9
     134:	f9 08       	sbc	r15, r9
     136:	f9 08       	sbc	r15, r9
     138:	f9 08       	sbc	r15, r9
     13a:	f9 08       	sbc	r15, r9
     13c:	f9 08       	sbc	r15, r9
     13e:	f9 08       	sbc	r15, r9
     140:	0c 0a       	sbc	r0, r28
     142:	a8 09       	sbc	r26, r8
     144:	f9 08       	sbc	r15, r9
     146:	f9 08       	sbc	r15, r9
     148:	8a 0a       	sbc	r8, r26
     14a:	d6 09       	sbc	r29, r6
     14c:	19 09       	sbc	r17, r9
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e4 e7       	ldi	r30, 0x74	; 116
     1b2:	ff e9       	ldi	r31, 0x9F	; 159
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	aa 31       	cpi	r26, 0x1A	; 26
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	1b e0       	ldi	r17, 0x0B	; 11
     1c6:	aa e1       	ldi	r26, 0x1A	; 26
     1c8:	b2 e0       	ldi	r27, 0x02	; 2
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	af 37       	cpi	r26, 0x7F	; 127
     1d0:	b1 07       	cpc	r27, r17
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0e 94 81 4b 	call	0x9702	; 0x9702 <main>
     1d8:	0c 94 b8 4f 	jmp	0x9f70	; 0x9f70 <_exit>

000001dc <__bad_interrupt>:
     1dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e0 <SPI_WAIT>:
#define SPI_SCK PORTB1	// SCK pin (SPI clock)
#define SPI_SS PORTB0	// SS pin (Slave Select)

// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
     1e0:	20 91 14 03 	lds	r18, 0x0314
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     1e8:	0d b4       	in	r0, 0x2d	; 45
     1ea:	07 fc       	sbrc	r0, 7
     1ec:	09 c0       	rjmp	.+18     	; 0x200 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     1ee:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     1f0:	37 e2       	ldi	r19, 0x27	; 39
     1f2:	80 31       	cpi	r24, 0x10	; 16
     1f4:	93 07       	cpc	r25, r19
     1f6:	c0 f3       	brcs	.-16     	; 0x1e8 <SPI_WAIT+0x8>
     1f8:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     1fa:	0d b4       	in	r0, 0x2d	; 45
     1fc:	07 fe       	sbrs	r0, 7
     1fe:	f7 cf       	rjmp	.-18     	; 0x1ee <SPI_WAIT+0xe>
     200:	20 93 14 03 	sts	0x0314, r18
			return;
		}
	}
}
     204:	08 95       	ret

00000206 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     206:	84 b1       	in	r24, 0x04	; 4
     208:	80 7f       	andi	r24, 0xF0	; 240
     20a:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     20c:	84 b1       	in	r24, 0x04	; 4
     20e:	87 60       	ori	r24, 0x07	; 7
     210:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     212:	80 e5       	ldi	r24, 0x50	; 80
     214:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     216:	8d b5       	in	r24, 0x2d	; 45
     218:	81 60       	ori	r24, 0x01	; 1
     21a:	8d bd       	out	0x2d, r24	; 45

}
     21c:	08 95       	ret

0000021e <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     21e:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     220:	1d bc       	out	0x2d, r1	; 45
}
     222:	08 95       	ret

00000224 <SPI_Write_Block>:
		  }
          buffer[i] = SPDR;
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
     224:	48 2f       	mov	r20, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
     226:	66 23       	and	r22, r22
     228:	e9 f0       	breq	.+58     	; 0x264 <SPI_Write_Block+0x40>
     22a:	9c 01       	movw	r18, r24
     22c:	f9 01       	movw	r30, r18
          SPDR = data[i];
     22e:	80 81       	ld	r24, Z
     230:	8e bd       	out	0x2e, r24	; 46
     232:	20 91 14 03 	lds	r18, 0x0314
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     23a:	0d b4       	in	r0, 0x2d	; 45
     23c:	07 fc       	sbrc	r0, 7
     23e:	09 c0       	rjmp	.+18     	; 0x252 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     240:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     242:	37 e2       	ldi	r19, 0x27	; 39
     244:	80 31       	cpi	r24, 0x10	; 16
     246:	93 07       	cpc	r25, r19
     248:	c0 f3       	brcs	.-16     	; 0x23a <SPI_Write_Block+0x16>
     24a:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     24c:	0d b4       	in	r0, 0x2d	; 45
     24e:	07 fe       	sbrs	r0, 7
     250:	f7 cf       	rjmp	.-18     	; 0x240 <SPI_Write_Block+0x1c>
     252:	20 93 14 03 	sts	0x0314, r18
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     256:	22 23       	and	r18, r18
     258:	29 f4       	brne	.+10     	; 0x264 <SPI_Write_Block+0x40>
			return;
     25a:	31 96       	adiw	r30, 0x01	; 1
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     25c:	8e 2f       	mov	r24, r30
     25e:	84 1b       	sub	r24, r20
     260:	86 17       	cp	r24, r22
     262:	28 f3       	brcs	.-54     	; 0x22e <SPI_Write_Block+0xa>
     264:	08 95       	ret

00000266 <SPI_ReadWrite_Block>:

	SPCR = 0x00;
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	ec 01       	movw	r28, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
     26c:	44 23       	and	r20, r20
     26e:	21 f1       	breq	.+72     	; 0x2b8 <SPI_ReadWrite_Block+0x52>
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b0 e0       	ldi	r27, 0x00	; 0
          SPDR = data[i];
     274:	fe 01       	movw	r30, r28
     276:	ea 0f       	add	r30, r26
     278:	fb 1f       	adc	r31, r27
     27a:	80 81       	ld	r24, Z
     27c:	8e bd       	out	0x2e, r24	; 46
     27e:	80 91 14 03 	lds	r24, 0x0314
     282:	21 e0       	ldi	r18, 0x01	; 1
     284:	30 e0       	ldi	r19, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     286:	0d b4       	in	r0, 0x2d	; 45
     288:	07 fc       	sbrc	r0, 7
     28a:	0a c0       	rjmp	.+20     	; 0x2a0 <SPI_ReadWrite_Block+0x3a>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     28c:	2f 5f       	subi	r18, 0xFF	; 255
     28e:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     290:	97 e2       	ldi	r25, 0x27	; 39
     292:	20 31       	cpi	r18, 0x10	; 16
     294:	39 07       	cpc	r19, r25
     296:	b8 f3       	brcs	.-18     	; 0x286 <SPI_ReadWrite_Block+0x20>
     298:	81 e0       	ldi	r24, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     29a:	0d b4       	in	r0, 0x2d	; 45
     29c:	07 fe       	sbrs	r0, 7
     29e:	f6 cf       	rjmp	.-20     	; 0x28c <SPI_ReadWrite_Block+0x26>
     2a0:	80 93 14 03 	sts	0x0314, r24
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     2a4:	88 23       	and	r24, r24
     2a6:	41 f4       	brne	.+16     	; 0x2b8 <SPI_ReadWrite_Block+0x52>
			return;
		  }
          buffer[i] = SPDR;
     2a8:	8e b5       	in	r24, 0x2e	; 46
     2aa:	fb 01       	movw	r30, r22
     2ac:	ea 0f       	add	r30, r26
     2ae:	fb 1f       	adc	r31, r27
     2b0:	80 83       	st	Z, r24
     2b2:	11 96       	adiw	r26, 0x01	; 1
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     2b4:	a4 17       	cp	r26, r20
     2b6:	f0 f2       	brcs	.-68     	; 0x274 <SPI_ReadWrite_Block+0xe>
		  if(spiCommError) {
			return;
		  }
          buffer[i] = SPDR;
    }
}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     2be:	8e bd       	out	0x2e, r24	; 46
     2c0:	20 91 14 03 	lds	r18, 0x0314
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     2c8:	0d b4       	in	r0, 0x2d	; 45
     2ca:	07 fc       	sbrc	r0, 7
     2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     2ce:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     2d0:	37 e2       	ldi	r19, 0x27	; 39
     2d2:	80 31       	cpi	r24, 0x10	; 16
     2d4:	93 07       	cpc	r25, r19
     2d6:	c0 f3       	brcs	.-16     	; 0x2c8 <SPI_Write_Byte+0xa>
     2d8:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     2da:	0d b4       	in	r0, 0x2d	; 45
     2dc:	07 fe       	sbrs	r0, 7
     2de:	f7 cf       	rjmp	.-18     	; 0x2ce <SPI_Write_Byte+0x10>
     2e0:	20 93 14 03 	sts	0x0314, r18
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
     2e4:	8e b5       	in	r24, 0x2e	; 46
}
     2e6:	08 95       	ret

000002e8 <rfEnableDebugMode>:
	}

}

void rfEnableDebugMode() {
	rfDebugMode = 1;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 15 03 	sts	0x0315, r24
	rfDebugCounter = 3;
     2ee:	83 e0       	ldi	r24, 0x03	; 3
     2f0:	80 93 16 03 	sts	0x0316, r24
}
     2f4:	08 95       	ret

000002f6 <rfDisableDebugMode>:

void rfDisableDebugMode() {
	rfDebugMode = 0;
     2f6:	10 92 15 03 	sts	0x0315, r1
}
     2fa:	08 95       	ret

000002fc <rfDebugNextPacket>:
		rfDebugCounter = 3;
	}
}

void rfDebugNextPacket() {
	rfDebugCounter = 3;
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	80 93 16 03 	sts	0x0316, r24
}
     302:	08 95       	ret

00000304 <flushTxFifo>:
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
     304:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     306:	81 ee       	ldi	r24, 0xE1	; 225
     308:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     30c:	28 9a       	sbi	0x05, 0	; 5

}
     30e:	08 95       	ret

00000310 <readPayloadWidthFromTopFifo>:
}

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
     310:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
     312:	80 e6       	ldi	r24, 0x60	; 96
     314:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
     318:	8f ef       	ldi	r24, 0xFF	; 255
     31a:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
     31e:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
     320:	08 95       	ret

00000322 <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     322:	1f 93       	push	r17
     324:	16 2f       	mov	r17, r22
    mirf_CSN_lo;
     326:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     328:	8f 71       	andi	r24, 0x1F	; 31
     32a:	80 62       	ori	r24, 0x20	; 32
     32c:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     330:	81 2f       	mov	r24, r17
     332:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     336:	28 9a       	sbi	0x05, 0	; 5
}
     338:	1f 91       	pop	r17
     33a:	08 95       	ret

0000033c <flush_rx_fifo>:
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     33c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     33e:	82 ee       	ldi	r24, 0xE2	; 226
     340:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     344:	28 9a       	sbi	0x05, 0	; 5

}
     346:	08 95       	ret

00000348 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     348:	80 91 37 05 	lds	r24, 0x0537
     34c:	88 23       	and	r24, r24
     34e:	11 f0       	breq	.+4      	; 0x354 <mirf_data_ready+0xc>
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	08 95       	ret
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     354:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     35c:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     35e:	80 74       	andi	r24, 0x40	; 64

}
     360:	08 95       	ret

00000362 <mirf_write_register>:
    mirf_CSN_hi;
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	8b 01       	movw	r16, r22
     36a:	f4 2e       	mov	r15, r20
    mirf_CSN_lo;
     36c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     36e:	8f 71       	andi	r24, 0x1F	; 31
     370:	80 62       	ori	r24, 0x20	; 32
     372:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     376:	c8 01       	movw	r24, r16
     378:	6f 2d       	mov	r22, r15
     37a:	0e 94 12 01 	call	0x224	; 0x224 <SPI_Write_Block>
    mirf_CSN_hi;
     37e:	28 9a       	sbi	0x05, 0	; 5
}
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	ff 90       	pop	r15
     386:	08 95       	ret

00000388 <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	8b 01       	movw	r16, r22
     390:	f4 2e       	mov	r15, r20
    mirf_CSN_lo;
     392:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     394:	8f 71       	andi	r24, 0x1F	; 31
     396:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     39a:	c8 01       	movw	r24, r16
     39c:	b8 01       	movw	r22, r16
     39e:	4f 2d       	mov	r20, r15
     3a0:	0e 94 33 01 	call	0x266	; 0x266 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     3a4:	28 9a       	sbi	0x05, 0	; 5
}
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	08 95       	ret

000003ae <writeAckPayload>:
    mirf_CSN_hi;                    // Pull up chip select
    
    mirf_CE_hi;                     // Start transmission
}

void writeAckPayload(unsigned char *data, unsigned char size) {
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	08 2f       	mov	r16, r24
     3ba:	f9 2e       	mov	r15, r25
     3bc:	16 2f       	mov	r17, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
     3be:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     3c0:	81 ee       	ldi	r24, 0xE1	; 225
     3c2:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     3c6:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     3c8:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     3ca:	88 ea       	ldi	r24, 0xA8	; 168
     3cc:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     3d0:	11 23       	and	r17, r17
     3d2:	59 f0       	breq	.+22     	; 0x3ea <writeAckPayload+0x3c>
     3d4:	80 2f       	mov	r24, r16
     3d6:	9f 2d       	mov	r25, r15
     3d8:	9c 01       	movw	r18, r24
     3da:	e9 01       	movw	r28, r18
		SPI_Write_Byte(data[k]);
     3dc:	89 91       	ld	r24, Y+
     3de:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     3e2:	9e 01       	movw	r18, r28
     3e4:	20 1b       	sub	r18, r16
     3e6:	21 17       	cp	r18, r17
     3e8:	c8 f3       	brcs	.-14     	; 0x3dc <writeAckPayload+0x2e>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     3ea:	28 9a       	sbi	0x05, 0	; 5


}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	08 95       	ret

000003f8 <readPayloadWidthFromPipe0>:
    mirf_CSN_hi;
	
	return pWidth;
}

uint8_t readPayloadWidthFromPipe0() {
     3f8:	df 93       	push	r29
     3fa:	cf 93       	push	r28
     3fc:	0f 92       	push	r0
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
     402:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     404:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     406:	81 e1       	ldi	r24, 0x11	; 17
     408:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     40c:	be 01       	movw	r22, r28
     40e:	6f 5f       	subi	r22, 0xFF	; 255
     410:	7f 4f       	sbci	r23, 0xFF	; 255
     412:	cb 01       	movw	r24, r22
     414:	41 e0       	ldi	r20, 0x01	; 1
     416:	0e 94 33 01 	call	0x266	; 0x266 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     41a:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	0f 90       	pop	r0
     420:	cf 91       	pop	r28
     422:	df 91       	pop	r29
     424:	08 95       	ret

00000426 <rx_fifo_is_empty>:
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}

uint8_t rx_fifo_is_empty() {
     426:	df 93       	push	r29
     428:	cf 93       	push	r28
     42a:	0f 92       	push	r0
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     430:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     432:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     434:	87 e1       	ldi	r24, 0x17	; 23
     436:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     43a:	be 01       	movw	r22, r28
     43c:	6f 5f       	subi	r22, 0xFF	; 255
     43e:	7f 4f       	sbci	r23, 0xFF	; 255
     440:	cb 01       	movw	r24, r22
     442:	41 e0       	ldi	r20, 0x01	; 1
     444:	0e 94 33 01 	call	0x266	; 0x266 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     448:	28 9a       	sbi	0x05, 0	; 5
     44a:	89 81       	ldd	r24, Y+1	; 0x01
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
}
     44c:	81 70       	andi	r24, 0x01	; 1
     44e:	0f 90       	pop	r0
     450:	cf 91       	pop	r28
     452:	df 91       	pop	r29
     454:	08 95       	ret

00000456 <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	8c 01       	movw	r16, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     45c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     45e:	80 e3       	ldi	r24, 0x30	; 48
     460:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     464:	c8 01       	movw	r24, r16
     466:	65 e0       	ldi	r22, 0x05	; 5
     468:	0e 94 12 01 	call	0x224	; 0x224 <SPI_Write_Block>
    mirf_CSN_hi;
     46c:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	8c 01       	movw	r16, r24
    mirf_CE_lo;
     47a:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     47c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     47e:	8a e2       	ldi	r24, 0x2A	; 42
     480:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     484:	c8 01       	movw	r24, r16
     486:	65 e0       	ldi	r22, 0x05	; 5
     488:	0e 94 12 01 	call	0x224	; 0x224 <SPI_Write_Block>
    mirf_CSN_hi;
     48c:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     48e:	2c 9a       	sbi	0x05, 4	; 5
}
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	08 95       	ret

00000496 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
     49e:	16 2f       	mov	r17, r22
    while (PTX) {}                  // Wait until last paket is send
     4a0:	80 91 37 05 	lds	r24, 0x0537
     4a4:	88 23       	and	r24, r24
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <mirf_send+0xa>

    mirf_CE_lo;
     4a8:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	80 93 37 05 	sts	0x0537, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4b0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4b2:	80 e2       	ldi	r24, 0x20	; 32
     4b4:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4b8:	8a e4       	ldi	r24, 0x4A	; 74
     4ba:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     4be:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     4c0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     4c2:	81 ee       	ldi	r24, 0xE1	; 225
     4c4:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     4c8:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     4ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     4cc:	80 ea       	ldi	r24, 0xA0	; 160
     4ce:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     4d2:	ce 01       	movw	r24, r28
     4d4:	61 2f       	mov	r22, r17
     4d6:	0e 94 12 01 	call	0x224	; 0x224 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     4da:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     4dc:	2c 9a       	sbi	0x05, 4	; 5
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	08 95       	ret

000004e6 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	df 93       	push	r29
     4ec:	cf 93       	push	r28
     4ee:	00 d0       	rcall	.+0      	; 0x4f0 <mirf_config+0xa>
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     4f4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     4f6:	80 e2       	ldi	r24, 0x20	; 32
     4f8:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     4fc:	8d e0       	ldi	r24, 0x0D	; 13
     4fe:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     502:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     504:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     506:	83 e2       	ldi	r24, 0x23	; 35
     508:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     512:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
     514:	80 91 11 03 	lds	r24, 0x0311
     518:	90 91 12 03 	lds	r25, 0x0312
     51c:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
     51e:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     520:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     522:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     524:	80 e3       	ldi	r24, 0x30	; 48
     526:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     52a:	8e 01       	movw	r16, r28
     52c:	0f 5f       	subi	r16, 0xFF	; 255
     52e:	1f 4f       	sbci	r17, 0xFF	; 255
     530:	c8 01       	movw	r24, r16
     532:	63 e0       	ldi	r22, 0x03	; 3
     534:	0e 94 12 01 	call	0x224	; 0x224 <SPI_Write_Block>
    mirf_CSN_hi;
     538:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     53a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     53c:	8a e2       	ldi	r24, 0x2A	; 42
     53e:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     542:	c8 01       	movw	r24, r16
     544:	63 e0       	ldi	r22, 0x03	; 3
     546:	0e 94 12 01 	call	0x224	; 0x224 <SPI_Write_Block>
    mirf_CSN_hi;
     54a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     54c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     54e:	81 e2       	ldi	r24, 0x21	; 33
     550:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     55a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     55c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     55e:	82 e2       	ldi	r24, 0x22	; 34
     560:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     56a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     56c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     56e:	84 e2       	ldi	r24, 0x24	; 36
     570:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     574:	82 e1       	ldi	r24, 0x12	; 18
     576:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     57a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     57c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     57e:	85 e2       	ldi	r24, 0x25	; 37
     580:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     584:	88 e2       	ldi	r24, 0x28	; 40
     586:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     58a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     58c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     58e:	81 e3       	ldi	r24, 0x31	; 49
     590:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     594:	8d e0       	ldi	r24, 0x0D	; 13
     596:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     59a:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     59c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     59e:	80 e5       	ldi	r24, 0x50	; 80
     5a0:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     5a4:	83 e7       	ldi	r24, 0x73	; 115
     5a6:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     5aa:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5ac:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5ae:	8c e3       	ldi	r24, 0x3C	; 60
     5b0:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     5ba:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5bc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5be:	8d e3       	ldi	r24, 0x3D	; 61
     5c0:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5c4:	86 e0       	ldi	r24, 0x06	; 6
     5c6:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     5ca:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     5cc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     5ce:	80 e2       	ldi	r24, 0x20	; 32
     5d0:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     5d4:	8f e0       	ldi	r24, 0x0F	; 15
     5d6:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     5da:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	08 95       	ret

000005ec <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     5ec:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     5ee:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     5f0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <mirf_config>
}
     5f4:	08 95       	ret

000005f6 <mirf_get_data>:

}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	8c 01       	movw	r16, r24
    mirf_CSN_lo;                               		// Pull down chip select
     5fc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     5fe:	81 e6       	ldi	r24, 0x61	; 97
     600:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     604:	c8 01       	movw	r24, r16
     606:	b8 01       	movw	r22, r16
     608:	4d e0       	ldi	r20, 0x0D	; 13
     60a:	0e 94 33 01 	call	0x266	; 0x266 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     60e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     610:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     612:	87 e2       	ldi	r24, 0x27	; 39
     614:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     618:	80 e4       	ldi	r24, 0x40	; 64
     61a:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     61e:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	08 95       	ret

00000626 <handleRFCommands>:
    SPI_Write_Byte(FLUSH_TX);
    mirf_CSN_hi;

}

void handleRFCommands() {
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	df 93       	push	r29
     62c:	cf 93       	push	r28
     62e:	0f 92       	push	r0
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     634:	80 91 37 05 	lds	r24, 0x0537
     638:	88 23       	and	r24, r24
     63a:	31 f0       	breq	.+12     	; 0x648 <handleRFCommands+0x22>

		

	}

}
     63c:	0f 90       	pop	r0
     63e:	cf 91       	pop	r28
     640:	df 91       	pop	r29
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     648:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     650:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
     652:	86 ff       	sbrs	r24, 6
     654:	f3 cf       	rjmp	.-26     	; 0x63c <handleRFCommands+0x16>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
     656:	80 91 13 03 	lds	r24, 0x0313
     65a:	82 60       	ori	r24, 0x02	; 2
     65c:	80 93 13 03 	sts	0x0313, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     660:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     662:	87 e2       	ldi	r24, 0x27	; 39
     664:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     668:	80 e7       	ldi	r24, 0x70	; 112
     66a:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     66e:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
     670:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     672:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     674:	87 e1       	ldi	r24, 0x17	; 23
     676:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     67a:	be 01       	movw	r22, r28
     67c:	6f 5f       	subi	r22, 0xFF	; 255
     67e:	7f 4f       	sbci	r23, 0xFF	; 255
     680:	cb 01       	movw	r24, r22
     682:	41 e0       	ldi	r20, 0x01	; 1
     684:	0e 94 33 01 	call	0x266	; 0x266 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     688:	28 9a       	sbi	0x05, 0	; 5
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	80 fd       	sbrc	r24, 0
     68e:	d6 cf       	rjmp	.-84     	; 0x63c <handleRFCommands+0x16>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
     690:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     692:	81 e6       	ldi	r24, 0x61	; 97
     694:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     698:	8c e8       	ldi	r24, 0x8C	; 140
     69a:	99 e0       	ldi	r25, 0x09	; 9
     69c:	bc 01       	movw	r22, r24
     69e:	4d e0       	ldi	r20, 0x0D	; 13
     6a0:	0e 94 33 01 	call	0x266	; 0x266 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     6a4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     6a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     6a8:	87 e2       	ldi	r24, 0x27	; 39
     6aa:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    SPI_Write_Byte(value);
     6ae:	80 e4       	ldi	r24, 0x40	; 64
     6b0:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     6b4:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     6b6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     6b8:	82 ee       	ldi	r24, 0xE2	; 226
     6ba:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     6be:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
     6c0:	80 91 15 03 	lds	r24, 0x0315
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	09 f4       	brne	.+2      	; 0x6ca <handleRFCommands+0xa4>
     6c8:	91 c2       	rjmp	.+1314   	; 0xbec <handleRFCommands+0x5c6>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     6ca:	80 91 8c 09 	lds	r24, 0x098C
     6ce:	88 23       	and	r24, r24
     6d0:	b9 f4       	brne	.+46     	; 0x700 <handleRFCommands+0xda>
     6d2:	80 91 8d 09 	lds	r24, 0x098D
     6d6:	88 23       	and	r24, r24
     6d8:	99 f4       	brne	.+38     	; 0x700 <handleRFCommands+0xda>
     6da:	80 91 8e 09 	lds	r24, 0x098E
     6de:	88 23       	and	r24, r24
     6e0:	79 f4       	brne	.+30     	; 0x700 <handleRFCommands+0xda>
     6e2:	80 91 8f 09 	lds	r24, 0x098F
     6e6:	88 30       	cpi	r24, 0x08	; 8
     6e8:	59 f4       	brne	.+22     	; 0x700 <handleRFCommands+0xda>
     6ea:	80 91 90 09 	lds	r24, 0x0990
     6ee:	88 23       	and	r24, r24
     6f0:	39 f4       	brne	.+14     	; 0x700 <handleRFCommands+0xda>
     6f2:	80 91 91 09 	lds	r24, 0x0991
     6f6:	88 23       	and	r24, r24
     6f8:	19 f4       	brne	.+6      	; 0x700 <handleRFCommands+0xda>

				sleep(60);
     6fa:	8c e3       	ldi	r24, 0x3C	; 60
     6fc:	0e 94 7f 10 	call	0x20fe	; 0x20fe <sleep>

			}

			if(calibrateOdomFlag==0) { 
     700:	80 91 70 05 	lds	r24, 0x0570
     704:	88 23       	and	r24, r24
     706:	41 f5       	brne	.+80     	; 0x758 <handleRFCommands+0x132>
				speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     708:	80 91 90 09 	lds	r24, 0x0990
     70c:	28 2f       	mov	r18, r24
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	2f 77       	andi	r18, 0x7F	; 127
     712:	30 70       	andi	r19, 0x00	; 0
     714:	30 93 10 03 	sts	0x0310, r19
     718:	20 93 0f 03 	sts	0x030F, r18
				speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     71c:	60 91 91 09 	lds	r22, 0x0991
     720:	46 2f       	mov	r20, r22
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	4f 77       	andi	r20, 0x7F	; 127
     726:	50 70       	andi	r21, 0x00	; 0
     728:	50 93 0e 03 	sts	0x030E, r21
     72c:	40 93 0d 03 	sts	0x030D, r20
											// in the same range of the measured speed that is 0..800.
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
     730:	87 fd       	sbrc	r24, 7
     732:	27 c2       	rjmp	.+1102   	; 0xb82 <handleRFCommands+0x55c>
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
				} else {								// backward
					pwm_right_desired = -(speedr);
     734:	88 27       	eor	r24, r24
     736:	99 27       	eor	r25, r25
     738:	82 1b       	sub	r24, r18
     73a:	93 0b       	sbc	r25, r19
     73c:	90 93 f6 02 	sts	0x02F6, r25
     740:	80 93 f5 02 	sts	0x02F5, r24
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
     744:	67 fd       	sbrc	r22, 7
     746:	83 c3       	rjmp	.+1798   	; 0xe4e <handleRFCommands+0x828>
					pwm_left_desired = speedl;
				} else {								// backward
					pwm_left_desired = -(speedl);
     748:	88 27       	eor	r24, r24
     74a:	99 27       	eor	r25, r25
     74c:	84 1b       	sub	r24, r20
     74e:	95 0b       	sbc	r25, r21
     750:	90 93 f8 02 	sts	0x02F8, r25
     754:	80 93 f7 02 	sts	0x02F7, r24

			}


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
     758:	20 91 8c 09 	lds	r18, 0x098C
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	30 93 75 09 	sts	0x0975, r19
     762:	20 93 74 09 	sts	0x0974, r18
     766:	e0 91 8d 09 	lds	r30, 0x098D
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	f0 93 77 09 	sts	0x0977, r31
     770:	e0 93 76 09 	sts	0x0976, r30
     774:	00 91 8e 09 	lds	r16, 0x098E
     778:	10 e0       	ldi	r17, 0x00	; 0
     77a:	10 93 79 09 	sts	0x0979, r17
     77e:	00 93 78 09 	sts	0x0978, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     782:	92 2f       	mov	r25, r18
     784:	88 27       	eor	r24, r24
     786:	82 1b       	sub	r24, r18
     788:	93 0b       	sbc	r25, r19
     78a:	64 e6       	ldi	r22, 0x64	; 100
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__udivmodhi4>
     792:	26 2f       	mov	r18, r22
     794:	20 95       	com	r18
     796:	20 93 08 02 	sts	0x0208, r18
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     79a:	9e 2f       	mov	r25, r30
     79c:	88 27       	eor	r24, r24
     79e:	8e 1b       	sub	r24, r30
     7a0:	9f 0b       	sbc	r25, r31
     7a2:	64 e6       	ldi	r22, 0x64	; 100
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__udivmodhi4>
     7aa:	60 95       	com	r22
     7ac:	60 93 0a 02 	sts	0x020A, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     7b0:	90 2f       	mov	r25, r16
     7b2:	88 27       	eor	r24, r24
     7b4:	80 1b       	sub	r24, r16
     7b6:	91 0b       	sbc	r25, r17
     7b8:	64 e6       	ldi	r22, 0x64	; 100
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <__udivmodhi4>
     7c0:	60 95       	com	r22
     7c2:	60 93 09 02 	sts	0x0209, r22
			updateRedLed(pwm_red);
     7c6:	82 2f       	mov	r24, r18
     7c8:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <updateRedLed>
			updateGreenLed(pwm_green);
     7cc:	80 91 09 02 	lds	r24, 0x0209
     7d0:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <updateGreenLed>
			updateBlueLed(pwm_blue);
     7d4:	80 91 0a 02 	lds	r24, 0x020A
     7d8:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     7dc:	20 91 8f 09 	lds	r18, 0x098F
     7e0:	92 2f       	mov	r25, r18
     7e2:	20 ff       	sbrs	r18, 0
     7e4:	11 c1       	rjmp	.+546    	; 0xa08 <handleRFCommands+0x3e2>
				LED_IR1_LOW;
     7e6:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     7e8:	91 ff       	sbrs	r25, 1
     7ea:	3c c1       	rjmp	.+632    	; 0xa64 <handleRFCommands+0x43e>
				LED_IR2_LOW;
     7ec:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     7ee:	92 ff       	sbrs	r25, 2
     7f0:	36 c1       	rjmp	.+620    	; 0xa5e <handleRFCommands+0x438>
				irEnabled = 1;
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	80 93 0e 02 	sts	0x020E, r24
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     7f8:	94 fd       	sbrc	r25, 4
     7fa:	e6 c1       	rjmp	.+972    	; 0xbc8 <handleRFCommands+0x5a2>
				calibrateSensors();
				resetOdometry();
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     7fc:	96 ff       	sbrs	r25, 6
     7fe:	2c c1       	rjmp	.+600    	; 0xa58 <handleRFCommands+0x432>
				obstacleAvoidanceEnabled = 1;
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	80 93 74 04 	sts	0x0474, r24
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     806:	27 fd       	sbrc	r18, 7
     808:	e7 c1       	rjmp	.+974    	; 0xbd8 <handleRFCommands+0x5b2>
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
     80a:	10 92 75 04 	sts	0x0475, r1
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
     80e:	80 91 92 09 	lds	r24, 0x0992
     812:	80 ff       	sbrs	r24, 0
     814:	1b c1       	rjmp	.+566    	; 0xa4c <handleRFCommands+0x426>
					GREEN_LED0_ON;
     816:	80 91 0b 01 	lds	r24, 0x010B
     81a:	8e 7f       	andi	r24, 0xFE	; 254
     81c:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
     820:	80 91 92 09 	lds	r24, 0x0992
     824:	81 ff       	sbrs	r24, 1
     826:	0c c1       	rjmp	.+536    	; 0xa40 <handleRFCommands+0x41a>
					GREEN_LED1_ON;
     828:	80 91 0b 01 	lds	r24, 0x010B
     82c:	8d 7f       	andi	r24, 0xFD	; 253
     82e:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
     832:	80 91 92 09 	lds	r24, 0x0992
     836:	82 ff       	sbrs	r24, 2
     838:	fd c0       	rjmp	.+506    	; 0xa34 <handleRFCommands+0x40e>
					GREEN_LED2_ON;
     83a:	80 91 0b 01 	lds	r24, 0x010B
     83e:	8b 7f       	andi	r24, 0xFB	; 251
     840:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
     844:	80 91 92 09 	lds	r24, 0x0992
     848:	83 ff       	sbrs	r24, 3
     84a:	f2 c0       	rjmp	.+484    	; 0xa30 <handleRFCommands+0x40a>
					GREEN_LED3_ON;
     84c:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
     84e:	80 91 92 09 	lds	r24, 0x0992
     852:	84 ff       	sbrs	r24, 4
     854:	e7 c0       	rjmp	.+462    	; 0xa24 <handleRFCommands+0x3fe>
					GREEN_LED4_ON;
     856:	80 91 0b 01 	lds	r24, 0x010B
     85a:	8f 7e       	andi	r24, 0xEF	; 239
     85c:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
     860:	80 91 92 09 	lds	r24, 0x0992
     864:	85 ff       	sbrs	r24, 5
     866:	d8 c0       	rjmp	.+432    	; 0xa18 <handleRFCommands+0x3f2>
					GREEN_LED5_ON;
     868:	80 91 0b 01 	lds	r24, 0x010B
     86c:	8f 7d       	andi	r24, 0xDF	; 223
     86e:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
     872:	80 91 92 09 	lds	r24, 0x0992
     876:	86 ff       	sbrs	r24, 6
     878:	c9 c0       	rjmp	.+402    	; 0xa0c <handleRFCommands+0x3e6>
					GREEN_LED6_ON;
     87a:	80 91 0b 01 	lds	r24, 0x010B
     87e:	8f 7b       	andi	r24, 0xBF	; 191
     880:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
     884:	80 91 92 09 	lds	r24, 0x0992
     888:	87 fd       	sbrc	r24, 7
     88a:	aa c1       	rjmp	.+852    	; 0xbe0 <handleRFCommands+0x5ba>
					GREEN_LED7_ON;
				} else {
					GREEN_LED7_OFF;
     88c:	80 91 0b 01 	lds	r24, 0x010B
     890:	80 68       	ori	r24, 0x80	; 128
     892:	80 93 0b 01 	sts	0x010B, r24
				}

			#endif
		
			if(currentSelector == 8) {
     896:	80 91 50 04 	lds	r24, 0x0450
     89a:	88 30       	cpi	r24, 0x08	; 8
     89c:	09 f4       	brne	.+2      	; 0x8a0 <handleRFCommands+0x27a>
     89e:	76 c1       	rjmp	.+748    	; 0xb8c <handleRFCommands+0x566>

			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
     8a0:	80 91 07 02 	lds	r24, 0x0207
     8a4:	80 93 c4 08 	sts	0x08C4, r24

			switch(packetId) {
     8a8:	85 30       	cpi	r24, 0x05	; 5
     8aa:	09 f4       	brne	.+2      	; 0x8ae <handleRFCommands+0x288>
     8ac:	74 c2       	rjmp	.+1256   	; 0xd96 <handleRFCommands+0x770>
     8ae:	86 30       	cpi	r24, 0x06	; 6
     8b0:	08 f0       	brcs	.+2      	; 0x8b4 <handleRFCommands+0x28e>
     8b2:	da c0       	rjmp	.+436    	; 0xa68 <handleRFCommands+0x442>
     8b4:	83 30       	cpi	r24, 0x03	; 3
     8b6:	09 f4       	brne	.+2      	; 0x8ba <handleRFCommands+0x294>
     8b8:	f4 c1       	rjmp	.+1000   	; 0xca2 <handleRFCommands+0x67c>
     8ba:	84 30       	cpi	r24, 0x04	; 4
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <handleRFCommands+0x29a>
     8be:	54 c0       	rjmp	.+168    	; 0x968 <handleRFCommands+0x342>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
     8c0:	80 91 5d 02 	lds	r24, 0x025D
     8c4:	90 91 5e 02 	lds	r25, 0x025E
     8c8:	80 93 c5 08 	sts	0x08C5, r24
					ackPayload[2] = proximityResult[4]>>8;
     8cc:	89 2f       	mov	r24, r25
     8ce:	99 0f       	add	r25, r25
     8d0:	99 0b       	sbc	r25, r25
     8d2:	80 93 c6 08 	sts	0x08C6, r24
					ackPayload[3] = proximityResult[8]&0xFF;
     8d6:	80 91 65 02 	lds	r24, 0x0265
     8da:	90 91 66 02 	lds	r25, 0x0266
     8de:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[4] = proximityResult[8]>>8;
     8e2:	89 2f       	mov	r24, r25
     8e4:	99 0f       	add	r25, r25
     8e6:	99 0b       	sbc	r25, r25
     8e8:	80 93 c8 08 	sts	0x08C8, r24
					ackPayload[5] = proximityResult[9]&0xFF;
     8ec:	80 91 67 02 	lds	r24, 0x0267
     8f0:	90 91 68 02 	lds	r25, 0x0268
     8f4:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[6] = proximityResult[9]>>8;
     8f8:	89 2f       	mov	r24, r25
     8fa:	99 0f       	add	r25, r25
     8fc:	99 0b       	sbc	r25, r25
     8fe:	80 93 ca 08 	sts	0x08CA, r24
					ackPayload[7] = proximityResult[10]&0xFF;
     902:	80 91 69 02 	lds	r24, 0x0269
     906:	90 91 6a 02 	lds	r25, 0x026A
     90a:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[8] = proximityResult[10]>>8;
     90e:	89 2f       	mov	r24, r25
     910:	99 0f       	add	r25, r25
     912:	99 0b       	sbc	r25, r25
     914:	80 93 cc 08 	sts	0x08CC, r24
					ackPayload[9] = proximityResult[11]&0xFF;
     918:	80 91 6b 02 	lds	r24, 0x026B
     91c:	90 91 6c 02 	lds	r25, 0x026C
     920:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[10] = proximityResult[11]>>8;
     924:	89 2f       	mov	r24, r25
     926:	99 0f       	add	r25, r25
     928:	99 0b       	sbc	r25, r25
     92a:	80 93 ce 08 	sts	0x08CE, r24
					ackPayload[11] = accX&0xFF;
     92e:	80 91 2c 04 	lds	r24, 0x042C
     932:	90 91 2d 04 	lds	r25, 0x042D
     936:	80 93 cf 08 	sts	0x08CF, r24
					ackPayload[12] = accX>>8;
     93a:	89 2f       	mov	r24, r25
     93c:	99 0f       	add	r25, r25
     93e:	99 0b       	sbc	r25, r25
     940:	80 93 d0 08 	sts	0x08D0, r24
					ackPayload[13] = accY&0xFF;
     944:	80 91 2e 04 	lds	r24, 0x042E
     948:	90 91 2f 04 	lds	r25, 0x042F
     94c:	80 93 d1 08 	sts	0x08D1, r24
					ackPayload[14] = accY>>8;
     950:	89 2f       	mov	r24, r25
     952:	99 0f       	add	r25, r25
     954:	99 0b       	sbc	r25, r25
     956:	80 93 d2 08 	sts	0x08D2, r24
					ackPayload[15] = irCommand;
     95a:	80 91 23 04 	lds	r24, 0x0423
     95e:	80 93 d3 08 	sts	0x08D3, r24
					packetId = 5;
     962:	85 e0       	ldi	r24, 0x05	; 5
     964:	80 93 07 02 	sts	0x0207, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
     968:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     96a:	81 ee       	ldi	r24, 0xE1	; 225
     96c:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
    mirf_CSN_hi;
     970:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     972:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     974:	88 ea       	ldi	r24, 0xA8	; 168
     976:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
     97a:	80 91 c4 08 	lds	r24, 0x08C4
     97e:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     982:	80 91 c5 08 	lds	r24, 0x08C5
     986:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     98a:	80 91 c6 08 	lds	r24, 0x08C6
     98e:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     992:	80 91 c7 08 	lds	r24, 0x08C7
     996:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     99a:	80 91 c8 08 	lds	r24, 0x08C8
     99e:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     9a2:	80 91 c9 08 	lds	r24, 0x08C9
     9a6:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     9aa:	80 91 ca 08 	lds	r24, 0x08CA
     9ae:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     9b2:	80 91 cb 08 	lds	r24, 0x08CB
     9b6:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     9ba:	80 91 cc 08 	lds	r24, 0x08CC
     9be:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     9c2:	80 91 cd 08 	lds	r24, 0x08CD
     9c6:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     9ca:	80 91 ce 08 	lds	r24, 0x08CE
     9ce:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     9d2:	80 91 cf 08 	lds	r24, 0x08CF
     9d6:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     9da:	80 91 d0 08 	lds	r24, 0x08D0
     9de:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     9e2:	80 91 d1 08 	lds	r24, 0x08D1
     9e6:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     9ea:	80 91 d2 08 	lds	r24, 0x08D2
     9ee:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
     9f2:	80 91 d3 08 	lds	r24, 0x08D3
     9f6:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
     9fa:	28 9a       	sbi	0x05, 0	; 5

		

	}

}
     9fc:	0f 90       	pop	r0
     9fe:	cf 91       	pop	r28
     a00:	df 91       	pop	r29
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	08 95       	ret


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
     a08:	44 9a       	sbi	0x08, 4	; 8
     a0a:	ee ce       	rjmp	.-548    	; 0x7e8 <handleRFCommands+0x1c2>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GREEN_LED6_ON;
				} else {
					GREEN_LED6_OFF;
     a0c:	80 91 0b 01 	lds	r24, 0x010B
     a10:	80 64       	ori	r24, 0x40	; 64
     a12:	80 93 0b 01 	sts	0x010B, r24
     a16:	36 cf       	rjmp	.-404    	; 0x884 <handleRFCommands+0x25e>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GREEN_LED5_ON;
				} else {
					GREEN_LED5_OFF;
     a18:	80 91 0b 01 	lds	r24, 0x010B
     a1c:	80 62       	ori	r24, 0x20	; 32
     a1e:	80 93 0b 01 	sts	0x010B, r24
     a22:	27 cf       	rjmp	.-434    	; 0x872 <handleRFCommands+0x24c>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GREEN_LED4_ON;
				} else {
					GREEN_LED4_OFF;
     a24:	80 91 0b 01 	lds	r24, 0x010B
     a28:	80 61       	ori	r24, 0x10	; 16
     a2a:	80 93 0b 01 	sts	0x010B, r24
     a2e:	18 cf       	rjmp	.-464    	; 0x860 <handleRFCommands+0x23a>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GREEN_LED3_ON;
				} else {
					GREEN_LED3_OFF;
     a30:	a3 9a       	sbi	0x14, 3	; 20
     a32:	0d cf       	rjmp	.-486    	; 0x84e <handleRFCommands+0x228>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GREEN_LED2_ON;
				} else {
					GREEN_LED2_OFF;
     a34:	80 91 0b 01 	lds	r24, 0x010B
     a38:	84 60       	ori	r24, 0x04	; 4
     a3a:	80 93 0b 01 	sts	0x010B, r24
     a3e:	02 cf       	rjmp	.-508    	; 0x844 <handleRFCommands+0x21e>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GREEN_LED1_ON;
				} else {
					GREEN_LED1_OFF;
     a40:	80 91 0b 01 	lds	r24, 0x010B
     a44:	82 60       	ori	r24, 0x02	; 2
     a46:	80 93 0b 01 	sts	0x010B, r24
     a4a:	f3 ce       	rjmp	.-538    	; 0x832 <handleRFCommands+0x20c>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GREEN_LED0_ON;
				} else {
					GREEN_LED0_OFF;
     a4c:	80 91 0b 01 	lds	r24, 0x010B
     a50:	81 60       	ori	r24, 0x01	; 1
     a52:	80 93 0b 01 	sts	0x010B, r24
     a56:	e4 ce       	rjmp	.-568    	; 0x820 <handleRFCommands+0x1fa>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
     a58:	10 92 74 04 	sts	0x0474, r1
     a5c:	d4 ce       	rjmp	.-600    	; 0x806 <handleRFCommands+0x1e0>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
     a5e:	10 92 0e 02 	sts	0x020E, r1
     a62:	ca ce       	rjmp	.-620    	; 0x7f8 <handleRFCommands+0x1d2>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
     a64:	45 9a       	sbi	0x08, 5	; 8
     a66:	c3 ce       	rjmp	.-634    	; 0x7ee <handleRFCommands+0x1c8>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
     a68:	86 30       	cpi	r24, 0x06	; 6
     a6a:	09 f4       	brne	.+2      	; 0xa6e <handleRFCommands+0x448>
     a6c:	c5 c0       	rjmp	.+394    	; 0xbf8 <handleRFCommands+0x5d2>
     a6e:	87 30       	cpi	r24, 0x07	; 7
     a70:	09 f0       	breq	.+2      	; 0xa74 <handleRFCommands+0x44e>
     a72:	7a cf       	rjmp	.-268    	; 0x968 <handleRFCommands+0x342>
					packetId = 7;
					break;


				case 7:
					ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
     a74:	60 91 d1 02 	lds	r22, 0x02D1
     a78:	70 91 d2 02 	lds	r23, 0x02D2
     a7c:	80 91 d3 02 	lds	r24, 0x02D3
     a80:	90 91 d4 02 	lds	r25, 0x02D4
     a84:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
     a88:	60 93 c5 08 	sts	0x08C5, r22
					ackPayload[2] = ((signed long int)leftMotSteps)>>8;
     a8c:	27 2f       	mov	r18, r23
     a8e:	38 2f       	mov	r19, r24
     a90:	49 2f       	mov	r20, r25
     a92:	55 27       	eor	r21, r21
     a94:	47 fd       	sbrc	r20, 7
     a96:	5a 95       	dec	r21
     a98:	20 93 c6 08 	sts	0x08C6, r18
					ackPayload[3] = ((signed long int)leftMotSteps)>>16;
     a9c:	9c 01       	movw	r18, r24
     a9e:	55 27       	eor	r21, r21
     aa0:	37 fd       	sbrc	r19, 7
     aa2:	50 95       	com	r21
     aa4:	45 2f       	mov	r20, r21
     aa6:	20 93 c7 08 	sts	0x08C7, r18
					ackPayload[4] = ((signed long int)leftMotSteps)>>24;
     aaa:	69 2f       	mov	r22, r25
     aac:	99 27       	eor	r25, r25
     aae:	67 fd       	sbrc	r22, 7
     ab0:	90 95       	com	r25
     ab2:	79 2f       	mov	r23, r25
     ab4:	89 2f       	mov	r24, r25
     ab6:	60 93 c8 08 	sts	0x08C8, r22
					ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
     aba:	60 91 cd 02 	lds	r22, 0x02CD
     abe:	70 91 ce 02 	lds	r23, 0x02CE
     ac2:	80 91 cf 02 	lds	r24, 0x02CF
     ac6:	90 91 d0 02 	lds	r25, 0x02D0
     aca:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
     ace:	60 93 c9 08 	sts	0x08C9, r22
					ackPayload[6] = ((signed long int)rightMotSteps)>>8;
     ad2:	27 2f       	mov	r18, r23
     ad4:	38 2f       	mov	r19, r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	55 27       	eor	r21, r21
     ada:	47 fd       	sbrc	r20, 7
     adc:	5a 95       	dec	r21
     ade:	20 93 ca 08 	sts	0x08CA, r18
					ackPayload[7] = ((signed long int)rightMotSteps)>>16;
     ae2:	9c 01       	movw	r18, r24
     ae4:	55 27       	eor	r21, r21
     ae6:	37 fd       	sbrc	r19, 7
     ae8:	50 95       	com	r21
     aea:	45 2f       	mov	r20, r21
     aec:	20 93 cb 08 	sts	0x08CB, r18
					ackPayload[8] = ((signed long int)rightMotSteps)>>24;
     af0:	69 2f       	mov	r22, r25
     af2:	99 27       	eor	r25, r25
     af4:	67 fd       	sbrc	r22, 7
     af6:	90 95       	com	r25
     af8:	79 2f       	mov	r23, r25
     afa:	89 2f       	mov	r24, r25
     afc:	60 93 cc 08 	sts	0x08CC, r22
					lastTheta = theta;
     b00:	60 91 77 04 	lds	r22, 0x0477
     b04:	70 91 78 04 	lds	r23, 0x0478
     b08:	80 91 79 04 	lds	r24, 0x0479
     b0c:	90 91 7a 04 	lds	r25, 0x047A
     b10:	60 93 7b 04 	sts	0x047B, r22
     b14:	70 93 7c 04 	sts	0x047C, r23
     b18:	80 93 7d 04 	sts	0x047D, r24
     b1c:	90 93 7e 04 	sts	0x047E, r25
					ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e4       	ldi	r19, 0x40	; 64
     b24:	4f e0       	ldi	r20, 0x0F	; 15
     b26:	54 e4       	ldi	r21, 0x44	; 68
     b28:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
     b2c:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
     b30:	60 93 cd 08 	sts	0x08CD, r22
					ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
     b34:	67 2f       	mov	r22, r23
     b36:	77 0f       	add	r23, r23
     b38:	77 0b       	sbc	r23, r23
     b3a:	60 93 ce 08 	sts	0x08CE, r22
					ackPayload[11] = ((unsigned int)xPos)&0xFF;
     b3e:	60 91 7f 04 	lds	r22, 0x047F
     b42:	70 91 80 04 	lds	r23, 0x0480
     b46:	80 91 81 04 	lds	r24, 0x0481
     b4a:	90 91 82 04 	lds	r25, 0x0482
     b4e:	0e 94 c5 4c 	call	0x998a	; 0x998a <__fixunssfsi>
     b52:	60 93 cf 08 	sts	0x08CF, r22
					ackPayload[12] = ((unsigned int)xPos)>>8;
     b56:	70 93 d0 08 	sts	0x08D0, r23
					ackPayload[13] = ((unsigned int)yPos)&0xFF;
     b5a:	60 91 83 04 	lds	r22, 0x0483
     b5e:	70 91 84 04 	lds	r23, 0x0484
     b62:	80 91 85 04 	lds	r24, 0x0485
     b66:	90 91 86 04 	lds	r25, 0x0486
     b6a:	0e 94 c5 4c 	call	0x998a	; 0x998a <__fixunssfsi>
     b6e:	60 93 d1 08 	sts	0x08D1, r22
					ackPayload[14] = ((unsigned int)yPos)>>8;
     b72:	70 93 d2 08 	sts	0x08D2, r23
					//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
					//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					ackPayload[15] = 0;
     b76:	10 92 d3 08 	sts	0x08D3, r1
					packetId = 3;
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	80 93 07 02 	sts	0x0207, r24
     b80:	f3 ce       	rjmp	.-538    	; 0x968 <handleRFCommands+0x342>
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
     b82:	30 93 f6 02 	sts	0x02F6, r19
     b86:	20 93 f5 02 	sts	0x02F5, r18
     b8a:	dc cd       	rjmp	.-1096   	; 0x744 <handleRFCommands+0x11e>
				}

			#endif
		
			if(currentSelector == 8) {
				if(calibrateOdomFlag==0) {
     b8c:	80 91 70 05 	lds	r24, 0x0570
     b90:	88 23       	and	r24, r24
     b92:	09 f0       	breq	.+2      	; 0xb96 <handleRFCommands+0x570>
     b94:	85 ce       	rjmp	.-758    	; 0x8a0 <handleRFCommands+0x27a>
					if((rfData[7]&0b00000001)==0b00000001) {
     b96:	80 91 93 09 	lds	r24, 0x0993
     b9a:	80 ff       	sbrs	r24, 0
     b9c:	81 ce       	rjmp	.-766    	; 0x8a0 <handleRFCommands+0x27a>
						calibrateSensors();
     b9e:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	93 e0       	ldi	r25, 0x03	; 3
     ba6:	90 93 66 02 	sts	0x0266, r25
     baa:	80 93 65 02 	sts	0x0265, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
     bae:	90 93 6c 02 	sts	0x026C, r25
     bb2:	80 93 6b 02 	sts	0x026B, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
     bb6:	86 e0       	ldi	r24, 0x06	; 6
     bb8:	80 93 63 0b 	sts	0x0B63, r24
						calibVelIndex = 1;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	80 93 bd 08 	sts	0x08BD, r24
						calibrateOdomFlag = 1;
     bc2:	80 93 70 05 	sts	0x0570, r24
     bc6:	6c ce       	rjmp	.-808    	; 0x8a0 <handleRFCommands+0x27a>
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				calibrateSensors();
     bc8:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <calibrateSensors>
				resetOdometry();
     bcc:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <resetOdometry>
     bd0:	20 91 8f 09 	lds	r18, 0x098F
     bd4:	92 2f       	mov	r25, r18
     bd6:	12 ce       	rjmp	.-988    	; 0x7fc <handleRFCommands+0x1d6>
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	80 93 75 04 	sts	0x0475, r24
     bde:	17 ce       	rjmp	.-978    	; 0x80e <handleRFCommands+0x1e8>
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
					GREEN_LED7_ON;
     be0:	80 91 0b 01 	lds	r24, 0x010B
     be4:	8f 77       	andi	r24, 0x7F	; 127
     be6:	80 93 0b 01 	sts	0x010B, r24
     bea:	55 ce       	rjmp	.-854    	; 0x896 <handleRFCommands+0x270>

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {

			writeAckPayload(ackPayload, 16);
     bec:	84 ec       	ldi	r24, 0xC4	; 196
     bee:	98 e0       	ldi	r25, 0x08	; 8
     bf0:	60 e1       	ldi	r22, 0x10	; 16
     bf2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <writeAckPayload>
     bf6:	22 cd       	rjmp	.-1468   	; 0x63c <handleRFCommands+0x16>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
     bf8:	80 91 35 02 	lds	r24, 0x0235
     bfc:	90 91 36 02 	lds	r25, 0x0236
     c00:	80 93 c5 08 	sts	0x08C5, r24
					ackPayload[2] = proximityValue[8]>>8;
     c04:	80 91 35 02 	lds	r24, 0x0235
     c08:	90 91 36 02 	lds	r25, 0x0236
     c0c:	90 93 c6 08 	sts	0x08C6, r25
					ackPayload[3] = proximityValue[16]&0xFF;
     c10:	80 91 45 02 	lds	r24, 0x0245
     c14:	90 91 46 02 	lds	r25, 0x0246
     c18:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[4] = proximityValue[16]>>8;
     c1c:	80 91 45 02 	lds	r24, 0x0245
     c20:	90 91 46 02 	lds	r25, 0x0246
     c24:	90 93 c8 08 	sts	0x08C8, r25
					ackPayload[5] = proximityValue[18]&0xFF;
     c28:	80 91 49 02 	lds	r24, 0x0249
     c2c:	90 91 4a 02 	lds	r25, 0x024A
     c30:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[6] = proximityValue[18]>>8;
     c34:	80 91 49 02 	lds	r24, 0x0249
     c38:	90 91 4a 02 	lds	r25, 0x024A
     c3c:	90 93 ca 08 	sts	0x08CA, r25
					ackPayload[7] = proximityValue[20]&0xFF;
     c40:	80 91 4d 02 	lds	r24, 0x024D
     c44:	90 91 4e 02 	lds	r25, 0x024E
     c48:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[8] = proximityValue[20]>>8;
     c4c:	80 91 4d 02 	lds	r24, 0x024D
     c50:	90 91 4e 02 	lds	r25, 0x024E
     c54:	90 93 cc 08 	sts	0x08CC, r25
					ackPayload[9] = proximityValue[22]&0xFF;
     c58:	80 91 51 02 	lds	r24, 0x0251
     c5c:	90 91 52 02 	lds	r25, 0x0252
     c60:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[10] = proximityValue[22]>>8;
     c64:	80 91 51 02 	lds	r24, 0x0251
     c68:	90 91 52 02 	lds	r25, 0x0252
     c6c:	90 93 ce 08 	sts	0x08CE, r25
					ackPayload[11] = accZ&0xFF;
     c70:	80 91 30 04 	lds	r24, 0x0430
     c74:	90 91 31 04 	lds	r25, 0x0431
     c78:	80 93 cf 08 	sts	0x08CF, r24
					ackPayload[12] = accZ>>8;	
     c7c:	89 2f       	mov	r24, r25
     c7e:	99 0f       	add	r25, r25
     c80:	99 0b       	sbc	r25, r25
     c82:	80 93 d0 08 	sts	0x08D0, r24
					ackPayload[13] = batteryLevel&0xFF;
     c86:	80 91 b9 02 	lds	r24, 0x02B9
     c8a:	90 91 ba 02 	lds	r25, 0x02BA
     c8e:	80 93 d1 08 	sts	0x08D1, r24
					ackPayload[14] = batteryLevel>>8;
     c92:	90 93 d2 08 	sts	0x08D2, r25
					ackPayload[15] = 0;
     c96:	10 92 d3 08 	sts	0x08D3, r1
					packetId = 7;
     c9a:	87 e0       	ldi	r24, 0x07	; 7
     c9c:	80 93 07 02 	sts	0x0207, r24
     ca0:	63 ce       	rjmp	.-826    	; 0x968 <handleRFCommands+0x342>
			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
     ca2:	80 91 55 02 	lds	r24, 0x0255
     ca6:	90 91 56 02 	lds	r25, 0x0256
     caa:	80 93 c5 08 	sts	0x08C5, r24
					ackPayload[2] = proximityResult[0]>>8;
     cae:	89 2f       	mov	r24, r25
     cb0:	99 0f       	add	r25, r25
     cb2:	99 0b       	sbc	r25, r25
     cb4:	80 93 c6 08 	sts	0x08C6, r24
					ackPayload[3] = proximityResult[1]&0xFF;
     cb8:	80 91 57 02 	lds	r24, 0x0257
     cbc:	90 91 58 02 	lds	r25, 0x0258
     cc0:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[4] = proximityResult[1]>>8;
     cc4:	89 2f       	mov	r24, r25
     cc6:	99 0f       	add	r25, r25
     cc8:	99 0b       	sbc	r25, r25
     cca:	80 93 c8 08 	sts	0x08C8, r24
					ackPayload[5] = proximityResult[2]&0xFF;
     cce:	80 91 59 02 	lds	r24, 0x0259
     cd2:	90 91 5a 02 	lds	r25, 0x025A
     cd6:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[6] = proximityResult[2]>>8;
     cda:	89 2f       	mov	r24, r25
     cdc:	99 0f       	add	r25, r25
     cde:	99 0b       	sbc	r25, r25
     ce0:	80 93 ca 08 	sts	0x08CA, r24
					ackPayload[7] = proximityResult[3]&0xFF;
     ce4:	80 91 5b 02 	lds	r24, 0x025B
     ce8:	90 91 5c 02 	lds	r25, 0x025C
     cec:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[8] = proximityResult[3]>>8;
     cf0:	89 2f       	mov	r24, r25
     cf2:	99 0f       	add	r25, r25
     cf4:	99 0b       	sbc	r25, r25
     cf6:	80 93 cc 08 	sts	0x08CC, r24
					ackPayload[9] = proximityResult[5]&0xFF;
     cfa:	80 91 5f 02 	lds	r24, 0x025F
     cfe:	90 91 60 02 	lds	r25, 0x0260
     d02:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[10] = proximityResult[5]>>8;
     d06:	89 2f       	mov	r24, r25
     d08:	99 0f       	add	r25, r25
     d0a:	99 0b       	sbc	r25, r25
     d0c:	80 93 ce 08 	sts	0x08CE, r24
					ackPayload[11] = proximityResult[6]&0xFF;
     d10:	80 91 61 02 	lds	r24, 0x0261
     d14:	90 91 62 02 	lds	r25, 0x0262
     d18:	80 93 cf 08 	sts	0x08CF, r24
					ackPayload[12] = proximityResult[6]>>8;
     d1c:	89 2f       	mov	r24, r25
     d1e:	99 0f       	add	r25, r25
     d20:	99 0b       	sbc	r25, r25
     d22:	80 93 d0 08 	sts	0x08D0, r24
					ackPayload[13] = proximityResult[7]&0xFF;
     d26:	80 91 63 02 	lds	r24, 0x0263
     d2a:	90 91 64 02 	lds	r25, 0x0264
     d2e:	80 93 d1 08 	sts	0x08D1, r24
					ackPayload[14] = proximityResult[7]>>8;
     d32:	89 2f       	mov	r24, r25
     d34:	99 0f       	add	r25, r25
     d36:	99 0b       	sbc	r25, r25
     d38:	80 93 d2 08 	sts	0x08D2, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     d3c:	20 91 03 01 	lds	r18, 0x0103
     d40:	80 91 03 01 	lds	r24, 0x0103
     d44:	40 91 03 01 	lds	r20, 0x0103
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	80 72       	andi	r24, 0x20	; 32
     d4c:	90 70       	andi	r25, 0x00	; 0
     d4e:	95 95       	asr	r25
     d50:	87 95       	ror	r24
     d52:	95 95       	asr	r25
     d54:	87 95       	ror	r24
     d56:	95 95       	asr	r25
     d58:	87 95       	ror	r24
     d5a:	95 95       	asr	r25
     d5c:	87 95       	ror	r24
     d5e:	95 95       	asr	r25
     d60:	87 95       	ror	r24
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	44 1f       	adc	r20, r20
     d68:	44 27       	eor	r20, r20
     d6a:	44 1f       	adc	r20, r20
     d6c:	44 0f       	add	r20, r20
     d6e:	44 0f       	add	r20, r20
     d70:	48 2b       	or	r20, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	20 71       	andi	r18, 0x10	; 16
     d76:	30 70       	andi	r19, 0x00	; 0
     d78:	35 95       	asr	r19
     d7a:	27 95       	ror	r18
     d7c:	35 95       	asr	r19
     d7e:	27 95       	ror	r18
     d80:	35 95       	asr	r19
     d82:	27 95       	ror	r18
     d84:	35 95       	asr	r19
     d86:	27 95       	ror	r18
     d88:	42 2b       	or	r20, r18
     d8a:	40 93 d3 08 	sts	0x08D3, r20
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
     d8e:	84 e0       	ldi	r24, 0x04	; 4
     d90:	80 93 07 02 	sts	0x0207, r24
     d94:	e9 cd       	rjmp	.-1070   	; 0x968 <handleRFCommands+0x342>
					ackPayload[15] = irCommand;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
     d96:	80 91 25 02 	lds	r24, 0x0225
     d9a:	90 91 26 02 	lds	r25, 0x0226
     d9e:	80 93 c5 08 	sts	0x08C5, r24
					ackPayload[2] = proximityValue[0]>>8;
     da2:	80 91 25 02 	lds	r24, 0x0225
     da6:	90 91 26 02 	lds	r25, 0x0226
     daa:	90 93 c6 08 	sts	0x08C6, r25
					ackPayload[3] = proximityValue[2]&0xFF;
     dae:	80 91 29 02 	lds	r24, 0x0229
     db2:	90 91 2a 02 	lds	r25, 0x022A
     db6:	80 93 c7 08 	sts	0x08C7, r24
					ackPayload[4] = proximityValue[2]>>8;
     dba:	80 91 29 02 	lds	r24, 0x0229
     dbe:	90 91 2a 02 	lds	r25, 0x022A
     dc2:	90 93 c8 08 	sts	0x08C8, r25
					ackPayload[5] = proximityValue[4]&0xFF;
     dc6:	80 91 2d 02 	lds	r24, 0x022D
     dca:	90 91 2e 02 	lds	r25, 0x022E
     dce:	80 93 c9 08 	sts	0x08C9, r24
					ackPayload[6] = proximityValue[4]>>8;
     dd2:	80 91 2d 02 	lds	r24, 0x022D
     dd6:	90 91 2e 02 	lds	r25, 0x022E
     dda:	90 93 ca 08 	sts	0x08CA, r25
					ackPayload[7] = proximityValue[6]&0xFF;
     dde:	80 91 31 02 	lds	r24, 0x0231
     de2:	90 91 32 02 	lds	r25, 0x0232
     de6:	80 93 cb 08 	sts	0x08CB, r24
					ackPayload[8] = proximityValue[6]>>8;
     dea:	80 91 31 02 	lds	r24, 0x0231
     dee:	90 91 32 02 	lds	r25, 0x0232
     df2:	90 93 cc 08 	sts	0x08CC, r25
					ackPayload[9] = proximityValue[10]&0xFF;
     df6:	80 91 39 02 	lds	r24, 0x0239
     dfa:	90 91 3a 02 	lds	r25, 0x023A
     dfe:	80 93 cd 08 	sts	0x08CD, r24
					ackPayload[10] = proximityValue[10]>>8;
     e02:	80 91 39 02 	lds	r24, 0x0239
     e06:	90 91 3a 02 	lds	r25, 0x023A
     e0a:	90 93 ce 08 	sts	0x08CE, r25
					ackPayload[11] = proximityValue[12]&0xFF;
     e0e:	80 91 3d 02 	lds	r24, 0x023D
     e12:	90 91 3e 02 	lds	r25, 0x023E
     e16:	80 93 cf 08 	sts	0x08CF, r24
					ackPayload[12] = proximityValue[12]>>8;
     e1a:	80 91 3d 02 	lds	r24, 0x023D
     e1e:	90 91 3e 02 	lds	r25, 0x023E
     e22:	90 93 d0 08 	sts	0x08D0, r25
					ackPayload[13] = proximityValue[14]&0xFF;
     e26:	80 91 41 02 	lds	r24, 0x0241
     e2a:	90 91 42 02 	lds	r25, 0x0242
     e2e:	80 93 d1 08 	sts	0x08D1, r24
					ackPayload[14] = proximityValue[14]>>8;
     e32:	80 91 41 02 	lds	r24, 0x0241
     e36:	90 91 42 02 	lds	r25, 0x0242
     e3a:	90 93 d2 08 	sts	0x08D2, r25
					ackPayload[15] = currentSelector;
     e3e:	80 91 50 04 	lds	r24, 0x0450
     e42:	80 93 d3 08 	sts	0x08D3, r24
					packetId = 6;
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	80 93 07 02 	sts	0x0207, r24
     e4c:	8d cd       	rjmp	.-1254   	; 0x968 <handleRFCommands+0x342>
				} else {								// backward
					pwm_right_desired = -(speedr);
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
					pwm_left_desired = speedl;
     e4e:	50 93 f8 02 	sts	0x02F8, r21
     e52:	40 93 f7 02 	sts	0x02F7, r20
     e56:	80 cc       	rjmp	.-1792   	; 0x758 <handleRFCommands+0x132>

00000e58 <rfDebugSendData>:
void rfDisableDebugMode() {
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
     e58:	90 91 16 03 	lds	r25, 0x0316
     e5c:	90 93 c4 08 	sts	0x08C4, r25
	while(rfData[0] != rfDebugCounter) {
     e60:	80 91 8c 09 	lds	r24, 0x098C
     e64:	98 17       	cp	r25, r24
     e66:	41 f0       	breq	.+16     	; 0xe78 <rfDebugSendData+0x20>
		handleRFCommands();
     e68:	0e 94 13 03 	call	0x626	; 0x626 <handleRFCommands>
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
	while(rfData[0] != rfDebugCounter) {
     e6c:	90 91 8c 09 	lds	r25, 0x098C
     e70:	80 91 16 03 	lds	r24, 0x0316
     e74:	98 17       	cp	r25, r24
     e76:	c1 f7       	brne	.-16     	; 0xe68 <rfDebugSendData+0x10>
		handleRFCommands();
	}
	ackPayload[0] = 0x00;
     e78:	10 92 c4 08 	sts	0x08C4, r1
	if(rfDebugCounter < 255) {
     e7c:	9f 3f       	cpi	r25, 0xFF	; 255
     e7e:	21 f0       	breq	.+8      	; 0xe88 <rfDebugSendData+0x30>
		rfDebugCounter++;
     e80:	9f 5f       	subi	r25, 0xFF	; 255
     e82:	90 93 16 03 	sts	0x0316, r25
     e86:	08 95       	ret
	} else {
		rfDebugCounter = 3;
     e88:	83 e0       	ldi	r24, 0x03	; 3
     e8a:	80 93 16 03 	sts	0x0316, r24
     e8e:	08 95       	ret

00000e90 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29

	PCICR = 0;
     e94:	e8 e6       	ldi	r30, 0x68	; 104
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	10 82       	st	Z, r1
	PCMSK1 = 0;
     e9a:	ac e6       	ldi	r26, 0x6C	; 108
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	1c 92       	st	X, r1
	TCCR2A = 0;
     ea0:	20 eb       	ldi	r18, 0xB0	; 176
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	e9 01       	movw	r28, r18
     ea6:	18 82       	st	Y, r1
	TCCR2B = 0;
     ea8:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
     eac:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
     eb0:	80 81       	ld	r24, Z
     eb2:	82 60       	ori	r24, 0x02	; 2
     eb4:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
     eb6:	8c 91       	ld	r24, X
     eb8:	80 68       	ori	r24, 0x80	; 128
     eba:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
     ebc:	88 81       	ld	r24, Y
     ebe:	82 60       	ori	r24, 0x02	; 2
     ec0:	88 83       	st	Y, r24

}
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
     ed4:	80 91 0e 02 	lds	r24, 0x020E
     ed8:	88 23       	and	r24, r24
     eda:	21 f1       	breq	.+72     	; 0xf24 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
     edc:	80 91 03 01 	lds	r24, 0x0103
     ee0:	86 fd       	sbrc	r24, 6
     ee2:	20 c0       	rjmp	.+64     	; 0xf24 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
     ee4:	80 91 68 00 	lds	r24, 0x0068
     ee8:	8d 7f       	andi	r24, 0xFD	; 253
     eea:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
     eee:	80 91 6c 00 	lds	r24, 0x006C
     ef2:	8f 77       	andi	r24, 0x7F	; 127
     ef4:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	80 93 0f 02 	sts	0x020F, r24
			OCR2A = 13;									// output compare register
     efe:	8d e0       	ldi	r24, 0x0D	; 13
     f00:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
     f04:	80 91 b1 00 	lds	r24, 0x00B1
     f08:	86 60       	ori	r24, 0x06	; 6
     f0a:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
     f0e:	80 91 70 00 	lds	r24, 0x0070
     f12:	82 60       	ori	r24, 0x02	; 2
     f14:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
     f18:	10 92 1c 02 	sts	0x021C, r1
     f1c:	10 92 1d 02 	sts	0x021D, r1
     f20:	10 92 1e 02 	sts	0x021E, r1

		}

	}
	
}
     f24:	8f 91       	pop	r24
     f26:	0f 90       	pop	r0
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	0f 90       	pop	r0
     f2c:	1f 90       	pop	r1
     f2e:	18 95       	reti

00000f30 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	8f 93       	push	r24
     f44:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
     f46:	80 91 b1 00 	lds	r24, 0x00B1
     f4a:	88 7f       	andi	r24, 0xF8	; 248
     f4c:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
     f50:	80 91 0f 02 	lds	r24, 0x020F
     f54:	88 23       	and	r24, r24
     f56:	59 f1       	breq	.+86     	; 0xfae <__vector_13+0x7e>

			if(REMOTE) {					// if high it is a glitch
     f58:	80 91 03 01 	lds	r24, 0x0103
     f5c:	86 fd       	sbrc	r24, 6
     f5e:	69 c0       	rjmp	.+210    	; 0x1032 <__vector_13+0x102>
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
     f60:	10 92 0f 02 	sts	0x020F, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
     f64:	83 e3       	ldi	r24, 0x33	; 51
     f66:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
     f6a:	80 91 b1 00 	lds	r24, 0x00B1
     f6e:	86 60       	ori	r24, 0x06	; 6
     f70:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
     f74:	80 91 70 00 	lds	r24, 0x0070
     f78:	82 60       	ori	r24, 0x02	; 2
     f7a:	80 93 70 00 	sts	0x0070, r24

			} 

		}
	
		if(i!=-1) {
     f7e:	80 91 01 02 	lds	r24, 0x0201
     f82:	90 91 02 02 	lds	r25, 0x0202
     f86:	2f ef       	ldi	r18, 0xFF	; 255
     f88:	8f 3f       	cpi	r24, 0xFF	; 255
     f8a:	92 07       	cpc	r25, r18
     f8c:	29 f0       	breq	.+10     	; 0xf98 <__vector_13+0x68>

			i++;
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	90 93 02 02 	sts	0x0202, r25
     f94:	80 93 01 02 	sts	0x0201, r24

		}

}
     f98:	9f 91       	pop	r25
     f9a:	8f 91       	pop	r24
     f9c:	5f 91       	pop	r21
     f9e:	4f 91       	pop	r20
     fa0:	3f 91       	pop	r19
     fa2:	2f 91       	pop	r18
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti
			}

		} else {


			if (i == -1) { 						// start bit confirmed
     fae:	40 91 01 02 	lds	r20, 0x0201
     fb2:	50 91 02 02 	lds	r21, 0x0202
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	4f 3f       	cpi	r20, 0xFF	; 255
     fba:	58 07       	cpc	r21, r24
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <__vector_13+0x90>
     fbe:	4a c0       	rjmp	.+148    	; 0x1054 <__vector_13+0x124>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
     fc0:	41 30       	cpi	r20, 0x01	; 1
     fc2:	51 05       	cpc	r21, r1
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <__vector_13+0x98>
     fc6:	80 c0       	rjmp	.+256    	; 0x10c8 <__vector_13+0x198>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
     fc8:	ca 01       	movw	r24, r20
     fca:	02 97       	sbiw	r24, 0x02	; 2
     fcc:	05 97       	sbiw	r24, 0x05	; 5
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <__vector_13+0xa2>
     fd0:	50 c0       	rjmp	.+160    	; 0x1072 <__vector_13+0x142>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
     fd2:	ca 01       	movw	r24, r20
     fd4:	07 97       	sbiw	r24, 0x07	; 7
     fd6:	06 97       	sbiw	r24, 0x06	; 6
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <__vector_13+0xac>
     fda:	ab c0       	rjmp	.+342    	; 0x1132 <__vector_13+0x202>

				OCR2A = 54;
     fdc:	86 e3       	ldi	r24, 0x36	; 54
     fde:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);
     fe2:	80 91 b1 00 	lds	r24, 0x00B1
     fe6:	86 60       	ori	r24, 0x06	; 6
     fe8:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
     fec:	80 91 70 00 	lds	r24, 0x0070
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	80 93 70 00 	sts	0x0070, r24

				unsigned char temp = REMOTE;
     ff6:	20 91 03 01 	lds	r18, 0x0103
				temp <<= 6+6-i;
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	20 74       	andi	r18, 0x40	; 64
     ffe:	30 70       	andi	r19, 0x00	; 0
    1000:	00 24       	eor	r0, r0
    1002:	22 0f       	add	r18, r18
    1004:	33 1f       	adc	r19, r19
    1006:	00 1c       	adc	r0, r0
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	00 1c       	adc	r0, r0
    100e:	23 2f       	mov	r18, r19
    1010:	30 2d       	mov	r19, r0
    1012:	8c e0       	ldi	r24, 0x0C	; 12
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	84 1b       	sub	r24, r20
    1018:	95 0b       	sbc	r25, r21
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <__vector_13+0xf0>
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	8a 95       	dec	r24
    1022:	e2 f7       	brpl	.-8      	; 0x101c <__vector_13+0xec>
				data_temp += temp;
    1024:	80 91 1c 02 	lds	r24, 0x021C
    1028:	82 0f       	add	r24, r18
    102a:	80 93 1c 02 	sts	0x021C, r24

			} 

		}
	
		if(i!=-1) {
    102e:	ca 01       	movw	r24, r20
    1030:	ae cf       	rjmp	.-164    	; 0xf8e <__vector_13+0x5e>
	
		if(checkGlitch) {					// if checking this is a glitch

			if(REMOTE) {					// if high it is a glitch

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1032:	80 91 68 00 	lds	r24, 0x0068
    1036:	82 60       	ori	r24, 0x02	; 2
    1038:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    103c:	80 91 6c 00 	lds	r24, 0x006C
    1040:	80 68       	ori	r24, 0x80	; 128
    1042:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	9f ef       	ldi	r25, 0xFF	; 255
    104a:	90 93 02 02 	sts	0x0202, r25
    104e:	80 93 01 02 	sts	0x0201, r24
    1052:	a2 cf       	rjmp	.-188    	; 0xf98 <__vector_13+0x68>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    1054:	80 91 03 01 	lds	r24, 0x0103
    1058:	86 ff       	sbrs	r24, 6
    105a:	54 c0       	rjmp	.+168    	; 0x1104 <__vector_13+0x1d4>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    105c:	80 91 68 00 	lds	r24, 0x0068
    1060:	82 60       	ori	r24, 0x02	; 2
    1062:	80 93 68 00 	sts	0x0068, r24
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1066:	80 91 6c 00 	lds	r24, 0x006C
    106a:	80 68       	ori	r24, 0x80	; 128
    106c:	80 93 6c 00 	sts	0x006C, r24
    1070:	93 cf       	rjmp	.-218    	; 0xf98 <__vector_13+0x68>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    1072:	86 e3       	ldi	r24, 0x36	; 54
    1074:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1078:	80 91 b1 00 	lds	r24, 0x00B1
    107c:	86 60       	ori	r24, 0x06	; 6
    107e:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    1082:	80 91 70 00 	lds	r24, 0x0070
    1086:	82 60       	ori	r24, 0x02	; 2
    1088:	80 93 70 00 	sts	0x0070, r24

				unsigned char temp = REMOTE;
    108c:	20 91 03 01 	lds	r18, 0x0103
				temp <<= 6-i;
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	20 74       	andi	r18, 0x40	; 64
    1094:	30 70       	andi	r19, 0x00	; 0
    1096:	00 24       	eor	r0, r0
    1098:	22 0f       	add	r18, r18
    109a:	33 1f       	adc	r19, r19
    109c:	00 1c       	adc	r0, r0
    109e:	22 0f       	add	r18, r18
    10a0:	33 1f       	adc	r19, r19
    10a2:	00 1c       	adc	r0, r0
    10a4:	23 2f       	mov	r18, r19
    10a6:	30 2d       	mov	r19, r0
    10a8:	86 e0       	ldi	r24, 0x06	; 6
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	84 1b       	sub	r24, r20
    10ae:	95 0b       	sbc	r25, r21
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <__vector_13+0x186>
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <__vector_13+0x182>
				address_temp += temp;
    10ba:	80 91 1d 02 	lds	r24, 0x021D
    10be:	82 0f       	add	r24, r18
    10c0:	80 93 1d 02 	sts	0x021D, r24

			} 

		}
	
		if(i!=-1) {
    10c4:	ca 01       	movw	r24, r20
    10c6:	63 cf       	rjmp	.-314    	; 0xf8e <__vector_13+0x5e>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    10c8:	80 91 03 01 	lds	r24, 0x0103
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	80 74       	andi	r24, 0x40	; 64
    10d0:	90 70       	andi	r25, 0x00	; 0
    10d2:	08 2e       	mov	r0, r24
    10d4:	89 2f       	mov	r24, r25
    10d6:	00 0c       	add	r0, r0
    10d8:	88 1f       	adc	r24, r24
    10da:	99 0b       	sbc	r25, r25
    10dc:	00 0c       	add	r0, r0
    10de:	88 1f       	adc	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	80 93 1e 02 	sts	0x021E, r24
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    10e6:	86 e3       	ldi	r24, 0x36	; 54
    10e8:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    10ec:	80 91 b1 00 	lds	r24, 0x00B1
    10f0:	86 60       	ori	r24, 0x06	; 6
    10f2:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    10f6:	80 91 70 00 	lds	r24, 0x0070
    10fa:	82 60       	ori	r24, 0x02	; 2
    10fc:	80 93 70 00 	sts	0x0070, r24

			} 

		}
	
		if(i!=-1) {
    1100:	ca 01       	movw	r24, r20
    1102:	45 cf       	rjmp	.-374    	; 0xf8e <__vector_13+0x5e>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    1104:	8c e1       	ldi	r24, 0x1C	; 28
    1106:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    110a:	80 91 b1 00 	lds	r24, 0x00B1
    110e:	86 60       	ori	r24, 0x06	; 6
    1110:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    1114:	80 91 70 00 	lds	r24, 0x0070
    1118:	82 60       	ori	r24, 0x02	; 2
    111a:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    111e:	10 92 1c 02 	sts	0x021C, r1
    1122:	10 92 1d 02 	sts	0x021D, r1
    1126:	10 92 1e 02 	sts	0x021E, r1
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	50 e0       	ldi	r21, 0x00	; 0

			} 

		}
	
		if(i!=-1) {
    112e:	ca 01       	movw	r24, r20
    1130:	2e cf       	rjmp	.-420    	; 0xf8e <__vector_13+0x5e>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    1132:	4d 30       	cpi	r20, 0x0D	; 13
    1134:	51 05       	cpc	r21, r1
    1136:	09 f0       	breq	.+2      	; 0x113a <__vector_13+0x20a>
    1138:	7a cf       	rjmp	.-268    	; 0x102e <__vector_13+0xfe>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    113a:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    113e:	80 91 68 00 	lds	r24, 0x0068
    1142:	82 60       	ori	r24, 0x02	; 2
    1144:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    1148:	80 91 6c 00 	lds	r24, 0x006C
    114c:	80 68       	ori	r24, 0x80	; 128
    114e:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	9f ef       	ldi	r25, 0xFF	; 255
    1156:	90 93 02 02 	sts	0x0202, r25
    115a:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    115e:	80 91 1e 02 	lds	r24, 0x021E
    1162:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    1166:	80 91 1d 02 	lds	r24, 0x021D
    116a:	80 93 1a 02 	sts	0x021A, r24
				data_ir = data_temp;
    116e:	80 91 1c 02 	lds	r24, 0x021C
    1172:	80 93 1b 02 	sts	0x021B, r24
				command_received=1;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	80 93 24 04 	sts	0x0424, r24
    117c:	0d cf       	rjmp	.-486    	; 0xf98 <__vector_13+0x68>

0000117e <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    117e:	80 91 00 02 	lds	r24, 0x0200
    1182:	08 95       	ret

00001184 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    1184:	80 91 1a 02 	lds	r24, 0x021A
    1188:	08 95       	ret

0000118a <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    118a:	80 91 1b 02 	lds	r24, 0x021B
    118e:	08 95       	ret

00001190 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    1190:	80 91 0e 02 	lds	r24, 0x020E
    1194:	88 23       	and	r24, r24
    1196:	21 f0       	breq	.+8      	; 0x11a0 <handleIRRemoteCommands+0x10>

		if(command_received) {
    1198:	80 91 24 04 	lds	r24, 0x0424
    119c:	88 23       	and	r24, r24
    119e:	09 f4       	brne	.+2      	; 0x11a2 <handleIRRemoteCommands+0x12>
    11a0:	08 95       	ret

			command_received = 0;
    11a2:	10 92 24 04 	sts	0x0424, r1
			
			if((getTime100MicroSec() - lastCmdTime) < PAUSE_200_MSEC) {
    11a6:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    11aa:	20 91 27 04 	lds	r18, 0x0427
    11ae:	30 91 28 04 	lds	r19, 0x0428
    11b2:	40 91 29 04 	lds	r20, 0x0429
    11b6:	50 91 2a 04 	lds	r21, 0x042A
    11ba:	62 1b       	sub	r22, r18
    11bc:	73 0b       	sbc	r23, r19
    11be:	84 0b       	sbc	r24, r20
    11c0:	95 0b       	sbc	r25, r21
    11c2:	63 58       	subi	r22, 0x83	; 131
    11c4:	77 40       	sbci	r23, 0x07	; 7
    11c6:	80 40       	sbci	r24, 0x00	; 0
    11c8:	90 40       	sbci	r25, 0x00	; 0
    11ca:	50 f3       	brcs	.-44     	; 0x11a0 <handleIRRemoteCommands+0x10>
				return;
			}

			lastCmdTime = getTime100MicroSec();
    11cc:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    11d0:	60 93 27 04 	sts	0x0427, r22
    11d4:	70 93 28 04 	sts	0x0428, r23
    11d8:	80 93 29 04 	sts	0x0429, r24
    11dc:	90 93 2a 04 	sts	0x042A, r25
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    11e0:	80 91 1b 02 	lds	r24, 0x021B
				return;
			}

			lastCmdTime = getTime100MicroSec();

            irCommand = ir_remote_get_data();
    11e4:	80 93 23 04 	sts	0x0423, r24

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    11e8:	e8 2f       	mov	r30, r24
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	e5 33       	cpi	r30, 0x35	; 53
    11ee:	f1 05       	cpc	r31, r1
    11f0:	c0 f0       	brcs	.+48     	; 0x1222 <handleIRRemoteCommands+0x92>
    11f2:	40 91 f5 02 	lds	r20, 0x02F5
    11f6:	50 91 f6 02 	lds	r21, 0x02F6
    11fa:	20 91 f7 02 	lds	r18, 0x02F7
    11fe:	30 91 f8 02 	lds	r19, 0x02F8
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    1202:	ca 01       	movw	r24, r20
    1204:	64 2f       	mov	r22, r20
    1206:	89 2f       	mov	r24, r25
    1208:	57 fd       	sbrc	r21, 7
    120a:	b7 c1       	rjmp	.+878    	; 0x157a <handleIRRemoteCommands+0x3ea>
				speedr = pwm_right_desired;
    120c:	60 93 0f 03 	sts	0x030F, r22
    1210:	80 93 10 03 	sts	0x0310, r24
			} else {
				speedr = (-pwm_right_desired);
			}
			if(pwm_left_desired >= 0) {
    1214:	37 fd       	sbrc	r19, 7
    1216:	a8 c1       	rjmp	.+848    	; 0x1568 <handleIRRemoteCommands+0x3d8>
				speedl = pwm_left_desired;
    1218:	30 93 0e 03 	sts	0x030E, r19
    121c:	20 93 0d 03 	sts	0x030D, r18
    1220:	08 95       	ret

            irCommand = ir_remote_get_data();

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    1222:	ee 58       	subi	r30, 0x8E	; 142
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	05 90       	lpm	r0, Z+
    122c:	f4 91       	lpm	r31, Z+
    122e:	e0 2d       	mov	r30, r0
    1230:	19 94       	eijmp
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    1232:	80 91 26 04 	lds	r24, 0x0426
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	83 70       	andi	r24, 0x03	; 3
    123c:	90 70       	andi	r25, 0x00	; 0
    123e:	80 93 26 04 	sts	0x0426, r24
					switch(behaviorState) {
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	09 f4       	brne	.+2      	; 0x1248 <handleIRRemoteCommands+0xb8>
    1246:	ca c1       	rjmp	.+916    	; 0x15dc <handleIRRemoteCommands+0x44c>
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	08 f0       	brcs	.+2      	; 0x124e <handleIRRemoteCommands+0xbe>
    124c:	bb c1       	rjmp	.+886    	; 0x15c4 <handleIRRemoteCommands+0x434>
						case 0:
							obstacleAvoidanceEnabled = 0;
    124e:	10 92 74 04 	sts	0x0474, r1
							cliffAvoidanceEnabled = 0;
    1252:	10 92 75 04 	sts	0x0475, r1
    1256:	40 91 f5 02 	lds	r20, 0x02F5
    125a:	50 91 f6 02 	lds	r21, 0x02F6
    125e:	20 91 f7 02 	lds	r18, 0x02F7
    1262:	30 91 f8 02 	lds	r19, 0x02F8
    1266:	cd cf       	rjmp	.-102    	; 0x1202 <handleIRRemoteCommands+0x72>
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    1268:	10 92 74 04 	sts	0x0474, r1
							cliffAvoidanceEnabled = 1;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 75 04 	sts	0x0475, r24
    1272:	40 91 f5 02 	lds	r20, 0x02F5
    1276:	50 91 f6 02 	lds	r21, 0x02F6
    127a:	20 91 f7 02 	lds	r18, 0x02F7
    127e:	30 91 f8 02 	lds	r19, 0x02F8
    1282:	bf cf       	rjmp	.-130    	; 0x1202 <handleIRRemoteCommands+0x72>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    1284:	10 92 74 04 	sts	0x0474, r1
    1288:	40 91 f5 02 	lds	r20, 0x02F5
    128c:	50 91 f6 02 	lds	r21, 0x02F6
    1290:	20 91 f7 02 	lds	r18, 0x02F7
    1294:	30 91 f8 02 	lds	r19, 0x02F8
    1298:	b4 cf       	rjmp	.-152    	; 0x1202 <handleIRRemoteCommands+0x72>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	80 93 74 04 	sts	0x0474, r24
    12a0:	40 91 f5 02 	lds	r20, 0x02F5
    12a4:	50 91 f6 02 	lds	r21, 0x02F6
    12a8:	20 91 f7 02 	lds	r18, 0x02F7
    12ac:	30 91 f8 02 	lds	r19, 0x02F8
    12b0:	a8 cf       	rjmp	.-176    	; 0x1202 <handleIRRemoteCommands+0x72>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    12b2:	20 91 f7 02 	lds	r18, 0x02F7
    12b6:	30 91 f8 02 	lds	r19, 0x02F8
    12ba:	22 50       	subi	r18, 0x02	; 2
    12bc:	30 40       	sbci	r19, 0x00	; 0
    12be:	30 93 f8 02 	sts	0x02F8, r19
    12c2:	20 93 f7 02 	sts	0x02F7, r18
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	21 38       	cpi	r18, 0x81	; 129
    12ca:	38 07       	cpc	r19, r24
    12cc:	0c f0       	brlt	.+2      	; 0x12d0 <handleIRRemoteCommands+0x140>
    12ce:	5a c1       	rjmp	.+692    	; 0x1584 <handleIRRemoteCommands+0x3f4>
    12d0:	81 e8       	ldi	r24, 0x81	; 129
    12d2:	9f ef       	ldi	r25, 0xFF	; 255
    12d4:	90 93 f8 02 	sts	0x02F8, r25
    12d8:	80 93 f7 02 	sts	0x02F7, r24
    12dc:	40 91 f5 02 	lds	r20, 0x02F5
    12e0:	50 91 f6 02 	lds	r21, 0x02F6
    12e4:	21 e8       	ldi	r18, 0x81	; 129
    12e6:	3f ef       	ldi	r19, 0xFF	; 255
    12e8:	8c cf       	rjmp	.-232    	; 0x1202 <handleIRRemoteCommands+0x72>
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    12ea:	40 91 f5 02 	lds	r20, 0x02F5
    12ee:	50 91 f6 02 	lds	r21, 0x02F6
    12f2:	80 91 f3 02 	lds	r24, 0x02F3
    12f6:	90 91 f4 02 	lds	r25, 0x02F4
    12fa:	48 17       	cp	r20, r24
    12fc:	59 07       	cpc	r21, r25
    12fe:	0c f0       	brlt	.+2      	; 0x1302 <handleIRRemoteCommands+0x172>
    1300:	5b c1       	rjmp	.+694    	; 0x15b8 <handleIRRemoteCommands+0x428>
    1302:	9a 01       	movw	r18, r20
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired -= STEP_MOTORS;
    1304:	42 50       	subi	r20, 0x02	; 2
    1306:	50 40       	sbci	r21, 0x00	; 0
    1308:	50 93 f6 02 	sts	0x02F6, r21
    130c:	40 93 f5 02 	sts	0x02F5, r20
					pwm_left_desired -= STEP_MOTORS;
    1310:	22 50       	subi	r18, 0x02	; 2
    1312:	30 40       	sbci	r19, 0x00	; 0
    1314:	30 93 f8 02 	sts	0x02F8, r19
    1318:	20 93 f7 02 	sts	0x02F7, r18
	                if (pwm_right_desired < -127) pwm_right_desired = -127;
    131c:	8f ef       	ldi	r24, 0xFF	; 255
    131e:	41 38       	cpi	r20, 0x81	; 129
    1320:	58 07       	cpc	r21, r24
    1322:	44 f4       	brge	.+16     	; 0x1334 <handleIRRemoteCommands+0x1a4>
    1324:	81 e8       	ldi	r24, 0x81	; 129
    1326:	9f ef       	ldi	r25, 0xFF	; 255
    1328:	90 93 f6 02 	sts	0x02F6, r25
    132c:	80 93 f5 02 	sts	0x02F5, r24
    1330:	41 e8       	ldi	r20, 0x81	; 129
    1332:	5f ef       	ldi	r21, 0xFF	; 255
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	21 38       	cpi	r18, 0x81	; 129
    1338:	38 07       	cpc	r19, r24
    133a:	0c f0       	brlt	.+2      	; 0x133e <handleIRRemoteCommands+0x1ae>
    133c:	62 cf       	rjmp	.-316    	; 0x1202 <handleIRRemoteCommands+0x72>
				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
					pwm_left_desired -= STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    133e:	81 e8       	ldi	r24, 0x81	; 129
    1340:	9f ef       	ldi	r25, 0xFF	; 255
    1342:	90 93 f8 02 	sts	0x02F8, r25
    1346:	80 93 f7 02 	sts	0x02F7, r24
    134a:	21 e8       	ldi	r18, 0x81	; 129
    134c:	3f ef       	ldi	r19, 0xFF	; 255
    134e:	59 cf       	rjmp	.-334    	; 0x1202 <handleIRRemoteCommands+0x72>
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    1350:	40 91 f5 02 	lds	r20, 0x02F5
    1354:	50 91 f6 02 	lds	r21, 0x02F6
    1358:	42 50       	subi	r20, 0x02	; 2
    135a:	50 40       	sbci	r21, 0x00	; 0
    135c:	50 93 f6 02 	sts	0x02F6, r21
    1360:	40 93 f5 02 	sts	0x02F5, r20
					pwm_left_desired += STEP_MOTORS;
    1364:	60 91 f7 02 	lds	r22, 0x02F7
    1368:	70 91 f8 02 	lds	r23, 0x02F8
    136c:	6e 5f       	subi	r22, 0xFE	; 254
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	9b 01       	movw	r18, r22
    1372:	70 93 f8 02 	sts	0x02F8, r23
    1376:	60 93 f7 02 	sts	0x02F7, r22
                	if (pwm_right_desired<-127) pwm_right_desired=-127;
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	41 38       	cpi	r20, 0x81	; 129
    137e:	58 07       	cpc	r21, r24
    1380:	44 f4       	brge	.+16     	; 0x1392 <handleIRRemoteCommands+0x202>
    1382:	81 e8       	ldi	r24, 0x81	; 129
    1384:	9f ef       	ldi	r25, 0xFF	; 255
    1386:	90 93 f6 02 	sts	0x02F6, r25
    138a:	80 93 f5 02 	sts	0x02F5, r24
    138e:	41 e8       	ldi	r20, 0x81	; 129
    1390:	5f ef       	ldi	r21, 0xFF	; 255
                	if (pwm_left_desired>127) pwm_left_desired=127;
    1392:	60 38       	cpi	r22, 0x80	; 128
    1394:	71 05       	cpc	r23, r1
    1396:	0c f4       	brge	.+2      	; 0x139a <handleIRRemoteCommands+0x20a>
    1398:	34 cf       	rjmp	.-408    	; 0x1202 <handleIRRemoteCommands+0x72>
    139a:	8f e7       	ldi	r24, 0x7F	; 127
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	90 93 f8 02 	sts	0x02F8, r25
    13a2:	80 93 f7 02 	sts	0x02F7, r24
    13a6:	2f e7       	ldi	r18, 0x7F	; 127
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	2b cf       	rjmp	.-426    	; 0x1202 <handleIRRemoteCommands+0x72>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    13ac:	10 92 f6 02 	sts	0x02F6, r1
    13b0:	10 92 f5 02 	sts	0x02F5, r1
					pwm_left_desired = 0;
    13b4:	10 92 f8 02 	sts	0x02F8, r1
    13b8:	10 92 f7 02 	sts	0x02F7, r1
					if(currentSelector == 8) {
    13bc:	80 91 50 04 	lds	r24, 0x0450
    13c0:	88 30       	cpi	r24, 0x08	; 8
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <handleIRRemoteCommands+0x236>
    13c4:	18 c1       	rjmp	.+560    	; 0x15f6 <handleIRRemoteCommands+0x466>
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    13c6:	60 91 f5 02 	lds	r22, 0x02F5
    13ca:	80 91 f6 02 	lds	r24, 0x02F6
    13ce:	20 91 f7 02 	lds	r18, 0x02F7
    13d2:	30 91 f8 02 	lds	r19, 0x02F8
    13d6:	1a cf       	rjmp	.-460    	; 0x120c <handleIRRemoteCommands+0x7c>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    13d8:	40 91 f5 02 	lds	r20, 0x02F5
    13dc:	50 91 f6 02 	lds	r21, 0x02F6
    13e0:	42 50       	subi	r20, 0x02	; 2
    13e2:	50 40       	sbci	r21, 0x00	; 0
    13e4:	50 93 f6 02 	sts	0x02F6, r21
    13e8:	40 93 f5 02 	sts	0x02F5, r20
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
    13ec:	2f ef       	ldi	r18, 0xFF	; 255
    13ee:	41 38       	cpi	r20, 0x81	; 129
    13f0:	52 07       	cpc	r21, r18
    13f2:	0c f0       	brlt	.+2      	; 0x13f6 <handleIRRemoteCommands+0x266>
    13f4:	02 cf       	rjmp	.-508    	; 0x11fa <handleIRRemoteCommands+0x6a>
    13f6:	81 e8       	ldi	r24, 0x81	; 129
    13f8:	9f ef       	ldi	r25, 0xFF	; 255
    13fa:	90 93 f6 02 	sts	0x02F6, r25
    13fe:	80 93 f5 02 	sts	0x02F5, r24
    1402:	8f e7       	ldi	r24, 0x7F	; 127
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	20 91 f7 02 	lds	r18, 0x02F7
    140a:	30 91 f8 02 	lds	r19, 0x02F8

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    140e:	90 93 10 03 	sts	0x0310, r25
    1412:	80 93 0f 03 	sts	0x030F, r24
    1416:	fe ce       	rjmp	.-516    	; 0x1214 <handleIRRemoteCommands+0x84>
                	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    1418:	40 91 f5 02 	lds	r20, 0x02F5
    141c:	50 91 f6 02 	lds	r21, 0x02F6
    1420:	4e 5f       	subi	r20, 0xFE	; 254
    1422:	5f 4f       	sbci	r21, 0xFF	; 255
    1424:	50 93 f6 02 	sts	0x02F6, r21
    1428:	40 93 f5 02 	sts	0x02F5, r20
					pwm_left_desired -= STEP_MOTORS;
    142c:	60 91 f7 02 	lds	r22, 0x02F7
    1430:	70 91 f8 02 	lds	r23, 0x02F8
    1434:	62 50       	subi	r22, 0x02	; 2
    1436:	70 40       	sbci	r23, 0x00	; 0
    1438:	9b 01       	movw	r18, r22
    143a:	70 93 f8 02 	sts	0x02F8, r23
    143e:	60 93 f7 02 	sts	0x02F7, r22
	                if (pwm_right_desired>127) pwm_right_desired=127;
    1442:	40 38       	cpi	r20, 0x80	; 128
    1444:	51 05       	cpc	r21, r1
    1446:	44 f0       	brlt	.+16     	; 0x1458 <handleIRRemoteCommands+0x2c8>
    1448:	8f e7       	ldi	r24, 0x7F	; 127
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	90 93 f6 02 	sts	0x02F6, r25
    1450:	80 93 f5 02 	sts	0x02F5, r24
    1454:	4f e7       	ldi	r20, 0x7F	; 127
    1456:	50 e0       	ldi	r21, 0x00	; 0
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    1458:	61 58       	subi	r22, 0x81	; 129
    145a:	7f 4f       	sbci	r23, 0xFF	; 255
    145c:	0c f0       	brlt	.+2      	; 0x1460 <handleIRRemoteCommands+0x2d0>
    145e:	d1 ce       	rjmp	.-606    	; 0x1202 <handleIRRemoteCommands+0x72>
    1460:	6e cf       	rjmp	.-292    	; 0x133e <handleIRRemoteCommands+0x1ae>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    1462:	20 91 f7 02 	lds	r18, 0x02F7
    1466:	30 91 f8 02 	lds	r19, 0x02F8
    146a:	2e 5f       	subi	r18, 0xFE	; 254
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	30 93 f8 02 	sts	0x02F8, r19
    1472:	20 93 f7 02 	sts	0x02F7, r18
	               	if (pwm_left_desired>127) pwm_left_desired=127;
    1476:	20 38       	cpi	r18, 0x80	; 128
    1478:	31 05       	cpc	r19, r1
    147a:	0c f4       	brge	.+2      	; 0x147e <handleIRRemoteCommands+0x2ee>
    147c:	83 c0       	rjmp	.+262    	; 0x1584 <handleIRRemoteCommands+0x3f4>
    147e:	8f e7       	ldi	r24, 0x7F	; 127
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	90 93 f8 02 	sts	0x02F8, r25
    1486:	80 93 f7 02 	sts	0x02F7, r24
    148a:	40 91 f5 02 	lds	r20, 0x02F5
    148e:	50 91 f6 02 	lds	r21, 0x02F6
    1492:	2f e7       	ldi	r18, 0x7F	; 127
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	b5 ce       	rjmp	.-662    	; 0x1202 <handleIRRemoteCommands+0x72>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1498:	40 91 f5 02 	lds	r20, 0x02F5
    149c:	50 91 f6 02 	lds	r21, 0x02F6
    14a0:	20 91 f7 02 	lds	r18, 0x02F7
    14a4:	30 91 f8 02 	lds	r19, 0x02F8
    14a8:	24 17       	cp	r18, r20
    14aa:	35 07       	cpc	r19, r21
    14ac:	0c f0       	brlt	.+2      	; 0x14b0 <handleIRRemoteCommands+0x320>
    14ae:	82 c0       	rjmp	.+260    	; 0x15b4 <handleIRRemoteCommands+0x424>
    14b0:	9a 01       	movw	r18, r20
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    14b2:	4e 5f       	subi	r20, 0xFE	; 254
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255
    14b6:	50 93 f6 02 	sts	0x02F6, r21
    14ba:	40 93 f5 02 	sts	0x02F5, r20
					pwm_left_desired += STEP_MOTORS;
    14be:	2e 5f       	subi	r18, 0xFE	; 254
    14c0:	3f 4f       	sbci	r19, 0xFF	; 255
    14c2:	30 93 f8 02 	sts	0x02F8, r19
    14c6:	20 93 f7 02 	sts	0x02F7, r18
	                if (pwm_right_desired > 127) pwm_right_desired = 127;
    14ca:	40 38       	cpi	r20, 0x80	; 128
    14cc:	51 05       	cpc	r21, r1
    14ce:	44 f0       	brlt	.+16     	; 0x14e0 <handleIRRemoteCommands+0x350>
    14d0:	8f e7       	ldi	r24, 0x7F	; 127
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	90 93 f6 02 	sts	0x02F6, r25
    14d8:	80 93 f5 02 	sts	0x02F5, r24
    14dc:	4f e7       	ldi	r20, 0x7F	; 127
    14de:	50 e0       	ldi	r21, 0x00	; 0
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
    14e0:	20 38       	cpi	r18, 0x80	; 128
    14e2:	31 05       	cpc	r19, r1
    14e4:	0c f4       	brge	.+2      	; 0x14e8 <handleIRRemoteCommands+0x358>
    14e6:	8d ce       	rjmp	.-742    	; 0x1202 <handleIRRemoteCommands+0x72>
    14e8:	58 cf       	rjmp	.-336    	; 0x139a <handleIRRemoteCommands+0x20a>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    14ea:	40 91 f5 02 	lds	r20, 0x02F5
    14ee:	50 91 f6 02 	lds	r21, 0x02F6
    14f2:	4e 5f       	subi	r20, 0xFE	; 254
    14f4:	5f 4f       	sbci	r21, 0xFF	; 255
    14f6:	50 93 f6 02 	sts	0x02F6, r21
    14fa:	40 93 f5 02 	sts	0x02F5, r20
	                if (pwm_right_desired>127) pwm_right_desired=127;
    14fe:	40 38       	cpi	r20, 0x80	; 128
    1500:	51 05       	cpc	r21, r1
    1502:	0c f4       	brge	.+2      	; 0x1506 <handleIRRemoteCommands+0x376>
    1504:	7a ce       	rjmp	.-780    	; 0x11fa <handleIRRemoteCommands+0x6a>
    1506:	8f e7       	ldi	r24, 0x7F	; 127
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	90 93 f6 02 	sts	0x02F6, r25
    150e:	80 93 f5 02 	sts	0x02F5, r24
    1512:	59 cf       	rjmp	.-334    	; 0x13c6 <handleIRRemoteCommands+0x236>
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    1514:	80 91 25 04 	lds	r24, 0x0425
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	65 e0       	ldi	r22, 0x05	; 5
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__divmodhi4>
    1524:	80 93 25 04 	sts	0x0425, r24

					if(colorState==0) {			// turn on blue and off all IRs
    1528:	88 23       	and	r24, r24
    152a:	89 f5       	brne	.+98     	; 0x158e <handleIRRemoteCommands+0x3fe>
						LED_IR1_HIGH;
    152c:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    152e:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    1530:	10 92 0a 02 	sts	0x020A, r1
						pwm_green = MAX_LEDS_PWM;
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	80 93 09 02 	sts	0x0209, r24
						pwm_red = MAX_LEDS_PWM;
    153a:	80 93 08 02 	sts	0x0208, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    153e:	80 91 08 02 	lds	r24, 0x0208
    1542:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <updateRedLed>
					updateGreenLed(pwm_green);
    1546:	80 91 09 02 	lds	r24, 0x0209
    154a:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <updateGreenLed>
					updateBlueLed(pwm_blue);
    154e:	80 91 0a 02 	lds	r24, 0x020A
    1552:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <updateBlueLed>
    1556:	40 91 f5 02 	lds	r20, 0x02F5
    155a:	50 91 f6 02 	lds	r21, 0x02F6
    155e:	20 91 f7 02 	lds	r18, 0x02F7
    1562:	30 91 f8 02 	lds	r19, 0x02F8
    1566:	4d ce       	rjmp	.-870    	; 0x1202 <handleIRRemoteCommands+0x72>
				speedr = (-pwm_right_desired);
			}
			if(pwm_left_desired >= 0) {
				speedl = pwm_left_desired;
			} else {
				speedl = (-pwm_left_desired);
    1568:	88 27       	eor	r24, r24
    156a:	99 27       	eor	r25, r25
    156c:	82 1b       	sub	r24, r18
    156e:	93 0b       	sbc	r25, r19
    1570:	90 93 0e 03 	sts	0x030E, r25
    1574:	80 93 0d 03 	sts	0x030D, r24
    1578:	08 95       	ret

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    157a:	88 27       	eor	r24, r24
    157c:	99 27       	eor	r25, r25
    157e:	84 1b       	sub	r24, r20
    1580:	95 0b       	sbc	r25, r21
    1582:	45 cf       	rjmp	.-374    	; 0x140e <handleIRRemoteCommands+0x27e>
    1584:	40 91 f5 02 	lds	r20, 0x02F5
    1588:	50 91 f6 02 	lds	r21, 0x02F6
    158c:	3a ce       	rjmp	.-908    	; 0x1202 <handleIRRemoteCommands+0x72>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	09 f4       	brne	.+2      	; 0x1594 <handleIRRemoteCommands+0x404>
    1592:	4e c0       	rjmp	.+156    	; 0x1630 <handleIRRemoteCommands+0x4a0>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    1594:	82 30       	cpi	r24, 0x02	; 2
    1596:	09 f4       	brne	.+2      	; 0x159a <handleIRRemoteCommands+0x40a>
    1598:	53 c0       	rjmp	.+166    	; 0x1640 <handleIRRemoteCommands+0x4b0>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    159a:	83 30       	cpi	r24, 0x03	; 3
    159c:	09 f4       	brne	.+2      	; 0x15a0 <handleIRRemoteCommands+0x410>
    159e:	5a c0       	rjmp	.+180    	; 0x1654 <handleIRRemoteCommands+0x4c4>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	69 f6       	brne	.-102    	; 0x153e <handleIRRemoteCommands+0x3ae>
						pwm_blue = MAX_LEDS_PWM;
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	80 93 0a 02 	sts	0x020A, r24
						pwm_green = MAX_LEDS_PWM;
    15aa:	80 93 09 02 	sts	0x0209, r24
						pwm_red = MAX_LEDS_PWM;
    15ae:	80 93 08 02 	sts	0x0208, r24
    15b2:	c5 cf       	rjmp	.-118    	; 0x153e <handleIRRemoteCommands+0x3ae>
    15b4:	a9 01       	movw	r20, r18
    15b6:	7d cf       	rjmp	.-262    	; 0x14b2 <handleIRRemoteCommands+0x322>
				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    15b8:	20 91 f7 02 	lds	r18, 0x02F7
    15bc:	30 91 f8 02 	lds	r19, 0x02F8
    15c0:	a9 01       	movw	r20, r18
    15c2:	a0 ce       	rjmp	.-704    	; 0x1304 <handleIRRemoteCommands+0x174>
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
					switch(behaviorState) {
    15c4:	82 30       	cpi	r24, 0x02	; 2
    15c6:	09 f4       	brne	.+2      	; 0x15ca <handleIRRemoteCommands+0x43a>
    15c8:	4f ce       	rjmp	.-866    	; 0x1268 <handleIRRemoteCommands+0xd8>
    15ca:	83 30       	cpi	r24, 0x03	; 3
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <handleIRRemoteCommands+0x440>
    15ce:	51 ce       	rjmp	.-862    	; 0x1272 <handleIRRemoteCommands+0xe2>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 93 74 04 	sts	0x0474, r24
							cliffAvoidanceEnabled = 1;
    15d6:	80 93 75 04 	sts	0x0475, r24
    15da:	0b ce       	rjmp	.-1002   	; 0x11f2 <handleIRRemoteCommands+0x62>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    15dc:	80 93 74 04 	sts	0x0474, r24
							cliffAvoidanceEnabled = 0;
    15e0:	10 92 75 04 	sts	0x0475, r1
    15e4:	40 91 f5 02 	lds	r20, 0x02F5
    15e8:	50 91 f6 02 	lds	r21, 0x02F6
    15ec:	20 91 f7 02 	lds	r18, 0x02F7
    15f0:	30 91 f8 02 	lds	r19, 0x02F8
    15f4:	06 ce       	rjmp	.-1012   	; 0x1202 <handleIRRemoteCommands+0x72>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    15f6:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	93 e0       	ldi	r25, 0x03	; 3
    15fe:	90 93 66 02 	sts	0x0266, r25
    1602:	80 93 65 02 	sts	0x0265, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    1606:	90 93 6c 02 	sts	0x026C, r25
    160a:	80 93 6b 02 	sts	0x026B, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    160e:	86 e0       	ldi	r24, 0x06	; 6
    1610:	80 93 63 0b 	sts	0x0B63, r24
						calibVelIndex = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 bd 08 	sts	0x08BD, r24
						calibrateOdomFlag = 1;
    161a:	80 93 70 05 	sts	0x0570, r24
    161e:	40 91 f5 02 	lds	r20, 0x02F5
    1622:	50 91 f6 02 	lds	r21, 0x02F6
    1626:	20 91 f7 02 	lds	r18, 0x02F7
    162a:	30 91 f8 02 	lds	r19, 0x02F8
    162e:	e9 cd       	rjmp	.-1070   	; 0x1202 <handleIRRemoteCommands+0x72>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	80 93 0a 02 	sts	0x020A, r24
						pwm_green = 0;
    1636:	10 92 09 02 	sts	0x0209, r1
						pwm_red = MAX_LEDS_PWM;
    163a:	80 93 08 02 	sts	0x0208, r24
    163e:	7f cf       	rjmp	.-258    	; 0x153e <handleIRRemoteCommands+0x3ae>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    1640:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    1642:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	80 93 0a 02 	sts	0x020A, r24
						pwm_green = MAX_LEDS_PWM;
    164a:	80 93 09 02 	sts	0x0209, r24
						pwm_red = 0;
    164e:	10 92 08 02 	sts	0x0208, r1
    1652:	75 cf       	rjmp	.-278    	; 0x153e <handleIRRemoteCommands+0x3ae>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    1654:	10 92 0a 02 	sts	0x020A, r1
						pwm_green = 0;
    1658:	10 92 09 02 	sts	0x0209, r1
						pwm_red = 0;
    165c:	10 92 08 02 	sts	0x0208, r1
    1660:	6e cf       	rjmp	.-292    	; 0x153e <handleIRRemoteCommands+0x3ae>

00001662 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    1662:	08 95       	ret

00001664 <start_speed_control_right>:

void start_speed_control_right(signed int *pwm_right) {
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	ec 01       	movw	r28, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1672:	88 81       	ld	r24, Y
    1674:	99 81       	ldd	r25, Y+1	; 0x01
    1676:	89 2b       	or	r24, r25
    1678:	09 f4       	brne	.+2      	; 0x167c <start_speed_control_right+0x18>
    167a:	b2 c0       	rjmp	.+356    	; 0x17e0 <start_speed_control_right+0x17c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    167c:	e0 90 29 0b 	lds	r14, 0x0B29
    1680:	f0 90 2a 0b 	lds	r15, 0x0B2A
    1684:	f0 92 c3 08 	sts	0x08C3, r15
    1688:	e0 92 c2 08 	sts	0x08C2, r14
	if(*pwm_right >= 0) {
    168c:	28 81       	ld	r18, Y
    168e:	39 81       	ldd	r19, Y+1	; 0x01
    1690:	37 fd       	sbrc	r19, 7
    1692:	e4 c0       	rjmp	.+456    	; 0x185c <start_speed_control_right+0x1f8>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1694:	80 91 ef 02 	lds	r24, 0x02EF
    1698:	90 91 f0 02 	lds	r25, 0x02F0
    169c:	28 1b       	sub	r18, r24
    169e:	39 0b       	sbc	r19, r25
    16a0:	30 93 2a 0b 	sts	0x0B2A, r19
    16a4:	20 93 29 0b 	sts	0x0B29, r18
    16a8:	f9 01       	movw	r30, r18
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    16aa:	20 91 07 03 	lds	r18, 0x0307
    16ae:	30 91 08 03 	lds	r19, 0x0308
    16b2:	2e 0f       	add	r18, r30
    16b4:	3f 1f       	adc	r19, r31
    16b6:	30 93 08 03 	sts	0x0308, r19
    16ba:	20 93 07 03 	sts	0x0307, r18

	if(delta_right_speed_sum > I_LIMIT) {
    16be:	86 e0       	ldi	r24, 0x06	; 6
    16c0:	21 34       	cpi	r18, 0x41	; 65
    16c2:	38 07       	cpc	r19, r24
    16c4:	0c f4       	brge	.+2      	; 0x16c8 <start_speed_control_right+0x64>
    16c6:	ad c0       	rjmp	.+346    	; 0x1822 <start_speed_control_right+0x1be>
		delta_right_speed_sum = I_LIMIT;
    16c8:	80 e4       	ldi	r24, 0x40	; 64
    16ca:	96 e0       	ldi	r25, 0x06	; 6
    16cc:	90 93 08 03 	sts	0x0308, r25
    16d0:	80 93 07 03 	sts	0x0307, r24
    16d4:	20 e4       	ldi	r18, 0x40	; 64
    16d6:	36 e0       	ldi	r19, 0x06	; 6
		delta_right_speed_sum = -I_LIMIT;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    16d8:	08 81       	ld	r16, Y
    16da:	19 81       	ldd	r17, Y+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);
    16dc:	c9 01       	movw	r24, r18
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	82 0f       	add	r24, r18
    16e4:	93 1f       	adc	r25, r19
    16e6:	ac 01       	movw	r20, r24
    16e8:	66 27       	eor	r22, r22
    16ea:	57 fd       	sbrc	r21, 7
    16ec:	60 95       	com	r22
    16ee:	76 2f       	mov	r23, r22
    16f0:	cf 01       	movw	r24, r30
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	9f 01       	movw	r18, r30
    16f8:	22 0f       	add	r18, r18
    16fa:	33 1f       	adc	r19, r19
    16fc:	22 0f       	add	r18, r18
    16fe:	33 1f       	adc	r19, r19
    1700:	22 0f       	add	r18, r18
    1702:	33 1f       	adc	r19, r19
    1704:	82 0f       	add	r24, r18
    1706:	93 1f       	adc	r25, r19
    1708:	aa 27       	eor	r26, r26
    170a:	97 fd       	sbrc	r25, 7
    170c:	a0 95       	com	r26
    170e:	ba 2f       	mov	r27, r26
    1710:	48 0f       	add	r20, r24
    1712:	59 1f       	adc	r21, r25
    1714:	6a 1f       	adc	r22, r26
    1716:	7b 1f       	adc	r23, r27
    1718:	ee 19       	sub	r30, r14
    171a:	ff 09       	sbc	r31, r15
    171c:	ee 0f       	add	r30, r30
    171e:	ff 1f       	adc	r31, r31
    1720:	cf 01       	movw	r24, r30
    1722:	aa 27       	eor	r26, r26
    1724:	97 fd       	sbrc	r25, 7
    1726:	a0 95       	com	r26
    1728:	ba 2f       	mov	r27, r26
    172a:	48 0f       	add	r20, r24
    172c:	59 1f       	adc	r21, r25
    172e:	6a 1f       	adc	r22, r26
    1730:	7b 1f       	adc	r23, r27
    1732:	c8 01       	movw	r24, r16
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	aa 27       	eor	r26, r26
    1742:	97 fd       	sbrc	r25, 7
    1744:	a0 95       	com	r26
    1746:	ba 2f       	mov	r27, r26
    1748:	48 0f       	add	r20, r24
    174a:	59 1f       	adc	r21, r25
    174c:	6a 1f       	adc	r22, r26
    174e:	7b 1f       	adc	r23, r27
    1750:	40 93 fd 02 	sts	0x02FD, r20
    1754:	50 93 fe 02 	sts	0x02FE, r21
    1758:	60 93 ff 02 	sts	0x02FF, r22
    175c:	70 93 00 03 	sts	0x0300, r23

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1760:	77 fd       	sbrc	r23, 7
    1762:	6d c0       	rjmp	.+218    	; 0x183e <start_speed_control_right+0x1da>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1764:	14 16       	cp	r1, r20
    1766:	15 06       	cpc	r1, r21
    1768:	16 06       	cpc	r1, r22
    176a:	17 06       	cpc	r1, r23
    176c:	14 f4       	brge	.+4      	; 0x1772 <start_speed_control_right+0x10e>
    176e:	17 fd       	sbrc	r17, 7
    1770:	68 c0       	rjmp	.+208    	; 0x1842 <start_speed_control_right+0x1de>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1772:	41 5c       	subi	r20, 0xC1	; 193
    1774:	5d 45       	sbci	r21, 0x5D	; 93
    1776:	60 40       	sbci	r22, 0x00	; 0
    1778:	70 40       	sbci	r23, 0x00	; 0
    177a:	0c f4       	brge	.+2      	; 0x177e <start_speed_control_right+0x11a>
    177c:	80 c0       	rjmp	.+256    	; 0x187e <start_speed_control_right+0x21a>
    177e:	80 ec       	ldi	r24, 0xC0	; 192
    1780:	9d e5       	ldi	r25, 0x5D	; 93
    1782:	a0 e0       	ldi	r26, 0x00	; 0
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	80 93 fd 02 	sts	0x02FD, r24
    178a:	90 93 fe 02 	sts	0x02FE, r25
    178e:	a0 93 ff 02 	sts	0x02FF, r26
    1792:	b0 93 00 03 	sts	0x0300, r27
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    1796:	24 e0       	ldi	r18, 0x04	; 4
    1798:	b5 95       	asr	r27
    179a:	a7 95       	ror	r26
    179c:	97 95       	ror	r25
    179e:	87 95       	ror	r24
    17a0:	2a 95       	dec	r18
    17a2:	d1 f7       	brne	.-12     	; 0x1798 <start_speed_control_right+0x134>
    17a4:	9c 01       	movw	r18, r24
    17a6:	99 83       	std	Y+1, r25	; 0x01
    17a8:	88 83       	st	Y, r24

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    17aa:	80 91 e5 02 	lds	r24, 0x02E5
    17ae:	90 91 e6 02 	lds	r25, 0x02E6
    17b2:	18 16       	cp	r1, r24
    17b4:	19 06       	cpc	r1, r25
    17b6:	0c f0       	brlt	.+2      	; 0x17ba <start_speed_control_right+0x156>
    17b8:	5d c0       	rjmp	.+186    	; 0x1874 <start_speed_control_right+0x210>
		*pwm_right += 1;
    17ba:	c9 01       	movw	r24, r18
    17bc:	01 96       	adiw	r24, 0x01	; 1
    17be:	99 83       	std	Y+1, r25	; 0x01
    17c0:	88 83       	st	Y, r24
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    17c2:	22 e0       	ldi	r18, 0x02	; 2
    17c4:	80 30       	cpi	r24, 0x00	; 0
    17c6:	92 07       	cpc	r25, r18
    17c8:	f4 f0       	brlt	.+60     	; 0x1806 <start_speed_control_right+0x1a2>
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	99 83       	std	Y+1, r25	; 0x01
    17d0:	88 83       	st	Y, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	ff 90       	pop	r15
    17dc:	ef 90       	pop	r14
    17de:	08 95       	ret
void start_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    17e0:	10 92 08 03 	sts	0x0308, r1
    17e4:	10 92 07 03 	sts	0x0307, r1
		delta_right_speed_current = 0;
    17e8:	10 92 2a 0b 	sts	0x0B2A, r1
    17ec:	10 92 29 0b 	sts	0x0B29, r1
		delta_right_speed_prev = 0;
    17f0:	10 92 c3 08 	sts	0x08C3, r1
    17f4:	10 92 c2 08 	sts	0x08C2, r1
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	08 95       	ret
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1806:	81 50       	subi	r24, 0x01	; 1
    1808:	9e 4f       	sbci	r25, 0xFE	; 254
    180a:	1c f7       	brge	.-58     	; 0x17d2 <start_speed_control_right+0x16e>
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	9e ef       	ldi	r25, 0xFE	; 254
    1810:	99 83       	std	Y+1, r25	; 0x01
    1812:	88 83       	st	Y, r24

}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT) {
		delta_right_speed_sum = I_LIMIT;
	}else if(delta_right_speed_sum < -I_LIMIT) {
    1822:	89 ef       	ldi	r24, 0xF9	; 249
    1824:	20 3c       	cpi	r18, 0xC0	; 192
    1826:	38 07       	cpc	r19, r24
    1828:	0c f0       	brlt	.+2      	; 0x182c <start_speed_control_right+0x1c8>
    182a:	56 cf       	rjmp	.-340    	; 0x16d8 <start_speed_control_right+0x74>
		delta_right_speed_sum = -I_LIMIT;
    182c:	80 ec       	ldi	r24, 0xC0	; 192
    182e:	99 ef       	ldi	r25, 0xF9	; 249
    1830:	90 93 08 03 	sts	0x0308, r25
    1834:	80 93 07 03 	sts	0x0307, r24
    1838:	20 ec       	ldi	r18, 0xC0	; 192
    183a:	39 ef       	ldi	r19, 0xF9	; 249
    183c:	4d cf       	rjmp	.-358    	; 0x16d8 <start_speed_control_right+0x74>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    183e:	17 fd       	sbrc	r17, 7
    1840:	98 cf       	rjmp	.-208    	; 0x1772 <start_speed_control_right+0x10e>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1842:	10 92 fd 02 	sts	0x02FD, r1
    1846:	10 92 fe 02 	sts	0x02FE, r1
    184a:	10 92 ff 02 	sts	0x02FF, r1
    184e:	10 92 00 03 	sts	0x0300, r1
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a0 e0       	ldi	r26, 0x00	; 0
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	9d cf       	rjmp	.-198    	; 0x1796 <start_speed_control_right+0x132>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    185c:	80 91 ef 02 	lds	r24, 0x02EF
    1860:	90 91 f0 02 	lds	r25, 0x02F0
    1864:	28 0f       	add	r18, r24
    1866:	39 1f       	adc	r19, r25
    1868:	30 93 2a 0b 	sts	0x0B2A, r19
    186c:	20 93 29 0b 	sts	0x0B29, r18
    1870:	f9 01       	movw	r30, r18
    1872:	1b cf       	rjmp	.-458    	; 0x16aa <start_speed_control_right+0x46>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    1874:	c9 01       	movw	r24, r18
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	99 83       	std	Y+1, r25	; 0x01
    187a:	88 83       	st	Y, r24
    187c:	a2 cf       	rjmp	.-188    	; 0x17c2 <start_speed_control_right+0x15e>
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    187e:	80 91 fd 02 	lds	r24, 0x02FD
    1882:	90 91 fe 02 	lds	r25, 0x02FE
    1886:	a0 91 ff 02 	lds	r26, 0x02FF
    188a:	b0 91 00 03 	lds	r27, 0x0300
    188e:	80 34       	cpi	r24, 0x40	; 64
    1890:	22 ea       	ldi	r18, 0xA2	; 162
    1892:	92 07       	cpc	r25, r18
    1894:	2f ef       	ldi	r18, 0xFF	; 255
    1896:	a2 07       	cpc	r26, r18
    1898:	2f ef       	ldi	r18, 0xFF	; 255
    189a:	b2 07       	cpc	r27, r18
    189c:	0c f0       	brlt	.+2      	; 0x18a0 <start_speed_control_right+0x23c>
    189e:	7b cf       	rjmp	.-266    	; 0x1796 <start_speed_control_right+0x132>
    18a0:	80 e4       	ldi	r24, 0x40	; 64
    18a2:	92 ea       	ldi	r25, 0xA2	; 162
    18a4:	af ef       	ldi	r26, 0xFF	; 255
    18a6:	bf ef       	ldi	r27, 0xFF	; 255
    18a8:	80 93 fd 02 	sts	0x02FD, r24
    18ac:	90 93 fe 02 	sts	0x02FE, r25
    18b0:	a0 93 ff 02 	sts	0x02FF, r26
    18b4:	b0 93 00 03 	sts	0x0300, r27
    18b8:	6e cf       	rjmp	.-292    	; 0x1796 <start_speed_control_right+0x132>

000018ba <start_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_speed_control_left(signed int *pwm_left) {
    18ba:	ef 92       	push	r14
    18bc:	ff 92       	push	r15
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    18c8:	88 81       	ld	r24, Y
    18ca:	99 81       	ldd	r25, Y+1	; 0x01
    18cc:	89 2b       	or	r24, r25
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <start_speed_control_left+0x18>
    18d0:	b2 c0       	rjmp	.+356    	; 0x1a36 <start_speed_control_left+0x17c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    18d2:	e0 90 75 05 	lds	r14, 0x0575
    18d6:	f0 90 76 05 	lds	r15, 0x0576
    18da:	f0 92 8b 09 	sts	0x098B, r15
    18de:	e0 92 8a 09 	sts	0x098A, r14
	if(*pwm_left >= 0) {
    18e2:	28 81       	ld	r18, Y
    18e4:	39 81       	ldd	r19, Y+1	; 0x01
    18e6:	37 fd       	sbrc	r19, 7
    18e8:	e4 c0       	rjmp	.+456    	; 0x1ab2 <start_speed_control_left+0x1f8>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    18ea:	80 91 ed 02 	lds	r24, 0x02ED
    18ee:	90 91 ee 02 	lds	r25, 0x02EE
    18f2:	28 1b       	sub	r18, r24
    18f4:	39 0b       	sbc	r19, r25
    18f6:	30 93 76 05 	sts	0x0576, r19
    18fa:	20 93 75 05 	sts	0x0575, r18
    18fe:	f9 01       	movw	r30, r18
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    1900:	20 91 05 03 	lds	r18, 0x0305
    1904:	30 91 06 03 	lds	r19, 0x0306
    1908:	2e 0f       	add	r18, r30
    190a:	3f 1f       	adc	r19, r31
    190c:	30 93 06 03 	sts	0x0306, r19
    1910:	20 93 05 03 	sts	0x0305, r18

	if(delta_left_speed_sum > I_LIMIT) {
    1914:	86 e0       	ldi	r24, 0x06	; 6
    1916:	21 34       	cpi	r18, 0x41	; 65
    1918:	38 07       	cpc	r19, r24
    191a:	0c f4       	brge	.+2      	; 0x191e <start_speed_control_left+0x64>
    191c:	ad c0       	rjmp	.+346    	; 0x1a78 <start_speed_control_left+0x1be>
		delta_left_speed_sum = I_LIMIT;
    191e:	80 e4       	ldi	r24, 0x40	; 64
    1920:	96 e0       	ldi	r25, 0x06	; 6
    1922:	90 93 06 03 	sts	0x0306, r25
    1926:	80 93 05 03 	sts	0x0305, r24
    192a:	20 e4       	ldi	r18, 0x40	; 64
    192c:	36 e0       	ldi	r19, 0x06	; 6
		delta_left_speed_sum = -I_LIMIT;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    192e:	08 81       	ld	r16, Y
    1930:	19 81       	ldd	r17, Y+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);
    1932:	c9 01       	movw	r24, r18
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	82 0f       	add	r24, r18
    193a:	93 1f       	adc	r25, r19
    193c:	ac 01       	movw	r20, r24
    193e:	66 27       	eor	r22, r22
    1940:	57 fd       	sbrc	r21, 7
    1942:	60 95       	com	r22
    1944:	76 2f       	mov	r23, r22
    1946:	cf 01       	movw	r24, r30
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	9f 01       	movw	r18, r30
    194e:	22 0f       	add	r18, r18
    1950:	33 1f       	adc	r19, r19
    1952:	22 0f       	add	r18, r18
    1954:	33 1f       	adc	r19, r19
    1956:	22 0f       	add	r18, r18
    1958:	33 1f       	adc	r19, r19
    195a:	82 0f       	add	r24, r18
    195c:	93 1f       	adc	r25, r19
    195e:	aa 27       	eor	r26, r26
    1960:	97 fd       	sbrc	r25, 7
    1962:	a0 95       	com	r26
    1964:	ba 2f       	mov	r27, r26
    1966:	48 0f       	add	r20, r24
    1968:	59 1f       	adc	r21, r25
    196a:	6a 1f       	adc	r22, r26
    196c:	7b 1f       	adc	r23, r27
    196e:	ee 19       	sub	r30, r14
    1970:	ff 09       	sbc	r31, r15
    1972:	ee 0f       	add	r30, r30
    1974:	ff 1f       	adc	r31, r31
    1976:	cf 01       	movw	r24, r30
    1978:	aa 27       	eor	r26, r26
    197a:	97 fd       	sbrc	r25, 7
    197c:	a0 95       	com	r26
    197e:	ba 2f       	mov	r27, r26
    1980:	48 0f       	add	r20, r24
    1982:	59 1f       	adc	r21, r25
    1984:	6a 1f       	adc	r22, r26
    1986:	7b 1f       	adc	r23, r27
    1988:	c8 01       	movw	r24, r16
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	aa 27       	eor	r26, r26
    1998:	97 fd       	sbrc	r25, 7
    199a:	a0 95       	com	r26
    199c:	ba 2f       	mov	r27, r26
    199e:	48 0f       	add	r20, r24
    19a0:	59 1f       	adc	r21, r25
    19a2:	6a 1f       	adc	r22, r26
    19a4:	7b 1f       	adc	r23, r27
    19a6:	40 93 01 03 	sts	0x0301, r20
    19aa:	50 93 02 03 	sts	0x0302, r21
    19ae:	60 93 03 03 	sts	0x0303, r22
    19b2:	70 93 04 03 	sts	0x0304, r23

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    19b6:	77 fd       	sbrc	r23, 7
    19b8:	6d c0       	rjmp	.+218    	; 0x1a94 <start_speed_control_left+0x1da>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    19ba:	14 16       	cp	r1, r20
    19bc:	15 06       	cpc	r1, r21
    19be:	16 06       	cpc	r1, r22
    19c0:	17 06       	cpc	r1, r23
    19c2:	14 f4       	brge	.+4      	; 0x19c8 <start_speed_control_left+0x10e>
    19c4:	17 fd       	sbrc	r17, 7
    19c6:	68 c0       	rjmp	.+208    	; 0x1a98 <start_speed_control_left+0x1de>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    19c8:	41 5c       	subi	r20, 0xC1	; 193
    19ca:	5d 45       	sbci	r21, 0x5D	; 93
    19cc:	60 40       	sbci	r22, 0x00	; 0
    19ce:	70 40       	sbci	r23, 0x00	; 0
    19d0:	0c f4       	brge	.+2      	; 0x19d4 <start_speed_control_left+0x11a>
    19d2:	80 c0       	rjmp	.+256    	; 0x1ad4 <start_speed_control_left+0x21a>
    19d4:	80 ec       	ldi	r24, 0xC0	; 192
    19d6:	9d e5       	ldi	r25, 0x5D	; 93
    19d8:	a0 e0       	ldi	r26, 0x00	; 0
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	80 93 01 03 	sts	0x0301, r24
    19e0:	90 93 02 03 	sts	0x0302, r25
    19e4:	a0 93 03 03 	sts	0x0303, r26
    19e8:	b0 93 04 03 	sts	0x0304, r27
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    19ec:	54 e0       	ldi	r21, 0x04	; 4
    19ee:	b5 95       	asr	r27
    19f0:	a7 95       	ror	r26
    19f2:	97 95       	ror	r25
    19f4:	87 95       	ror	r24
    19f6:	5a 95       	dec	r21
    19f8:	d1 f7       	brne	.-12     	; 0x19ee <start_speed_control_left+0x134>
    19fa:	9c 01       	movw	r18, r24
    19fc:	99 83       	std	Y+1, r25	; 0x01
    19fe:	88 83       	st	Y, r24

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    1a00:	80 91 e7 02 	lds	r24, 0x02E7
    1a04:	90 91 e8 02 	lds	r25, 0x02E8
    1a08:	18 16       	cp	r1, r24
    1a0a:	19 06       	cpc	r1, r25
    1a0c:	0c f0       	brlt	.+2      	; 0x1a10 <start_speed_control_left+0x156>
    1a0e:	5d c0       	rjmp	.+186    	; 0x1aca <start_speed_control_left+0x210>
		*pwm_left += 1;
    1a10:	c9 01       	movw	r24, r18
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	99 83       	std	Y+1, r25	; 0x01
    1a16:	88 83       	st	Y, r24
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1a18:	22 e0       	ldi	r18, 0x02	; 2
    1a1a:	80 30       	cpi	r24, 0x00	; 0
    1a1c:	92 07       	cpc	r25, r18
    1a1e:	f4 f0       	brlt	.+60     	; 0x1a5c <start_speed_control_left+0x1a2>
    1a20:	8f ef       	ldi	r24, 0xFF	; 255
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	99 83       	std	Y+1, r25	; 0x01
    1a26:	88 83       	st	Y, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	08 95       	ret
void start_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1a36:	10 92 06 03 	sts	0x0306, r1
    1a3a:	10 92 05 03 	sts	0x0305, r1
		delta_left_speed_current = 0;
    1a3e:	10 92 76 05 	sts	0x0576, r1
    1a42:	10 92 75 05 	sts	0x0575, r1
		delta_left_speed_prev = 0;
    1a46:	10 92 8b 09 	sts	0x098B, r1
    1a4a:	10 92 8a 09 	sts	0x098A, r1
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	ff 90       	pop	r15
    1a58:	ef 90       	pop	r14
    1a5a:	08 95       	ret
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1a5c:	81 50       	subi	r24, 0x01	; 1
    1a5e:	9e 4f       	sbci	r25, 0xFE	; 254
    1a60:	1c f7       	brge	.-58     	; 0x1a28 <start_speed_control_left+0x16e>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	9e ef       	ldi	r25, 0xFE	; 254
    1a66:	99 83       	std	Y+1, r25	; 0x01
    1a68:	88 83       	st	Y, r24

}
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT) {
		delta_left_speed_sum = I_LIMIT;
	} else if(delta_left_speed_sum < -I_LIMIT) {
    1a78:	89 ef       	ldi	r24, 0xF9	; 249
    1a7a:	20 3c       	cpi	r18, 0xC0	; 192
    1a7c:	38 07       	cpc	r19, r24
    1a7e:	0c f0       	brlt	.+2      	; 0x1a82 <start_speed_control_left+0x1c8>
    1a80:	56 cf       	rjmp	.-340    	; 0x192e <start_speed_control_left+0x74>
		delta_left_speed_sum = -I_LIMIT;
    1a82:	80 ec       	ldi	r24, 0xC0	; 192
    1a84:	99 ef       	ldi	r25, 0xF9	; 249
    1a86:	90 93 06 03 	sts	0x0306, r25
    1a8a:	80 93 05 03 	sts	0x0305, r24
    1a8e:	20 ec       	ldi	r18, 0xC0	; 192
    1a90:	39 ef       	ldi	r19, 0xF9	; 249
    1a92:	4d cf       	rjmp	.-358    	; 0x192e <start_speed_control_left+0x74>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1a94:	17 fd       	sbrc	r17, 7
    1a96:	98 cf       	rjmp	.-208    	; 0x19c8 <start_speed_control_left+0x10e>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    1a98:	10 92 01 03 	sts	0x0301, r1
    1a9c:	10 92 02 03 	sts	0x0302, r1
    1aa0:	10 92 03 03 	sts	0x0303, r1
    1aa4:	10 92 04 03 	sts	0x0304, r1
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	9d cf       	rjmp	.-198    	; 0x19ec <start_speed_control_left+0x132>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1ab2:	80 91 ed 02 	lds	r24, 0x02ED
    1ab6:	90 91 ee 02 	lds	r25, 0x02EE
    1aba:	28 0f       	add	r18, r24
    1abc:	39 1f       	adc	r19, r25
    1abe:	30 93 76 05 	sts	0x0576, r19
    1ac2:	20 93 75 05 	sts	0x0575, r18
    1ac6:	f9 01       	movw	r30, r18
    1ac8:	1b cf       	rjmp	.-458    	; 0x1900 <start_speed_control_left+0x46>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    1aca:	c9 01       	movw	r24, r18
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	99 83       	std	Y+1, r25	; 0x01
    1ad0:	88 83       	st	Y, r24
    1ad2:	a2 cf       	rjmp	.-188    	; 0x1a18 <start_speed_control_left+0x15e>
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1ad4:	80 91 01 03 	lds	r24, 0x0301
    1ad8:	90 91 02 03 	lds	r25, 0x0302
    1adc:	a0 91 03 03 	lds	r26, 0x0303
    1ae0:	b0 91 04 03 	lds	r27, 0x0304
    1ae4:	80 34       	cpi	r24, 0x40	; 64
    1ae6:	22 ea       	ldi	r18, 0xA2	; 162
    1ae8:	92 07       	cpc	r25, r18
    1aea:	2f ef       	ldi	r18, 0xFF	; 255
    1aec:	a2 07       	cpc	r26, r18
    1aee:	2f ef       	ldi	r18, 0xFF	; 255
    1af0:	b2 07       	cpc	r27, r18
    1af2:	0c f0       	brlt	.+2      	; 0x1af6 <start_speed_control_left+0x23c>
    1af4:	7b cf       	rjmp	.-266    	; 0x19ec <start_speed_control_left+0x132>
    1af6:	80 e4       	ldi	r24, 0x40	; 64
    1af8:	92 ea       	ldi	r25, 0xA2	; 162
    1afa:	af ef       	ldi	r26, 0xFF	; 255
    1afc:	bf ef       	ldi	r27, 0xFF	; 255
    1afe:	80 93 01 03 	sts	0x0301, r24
    1b02:	90 93 02 03 	sts	0x0302, r25
    1b06:	a0 93 03 03 	sts	0x0303, r26
    1b0a:	b0 93 04 03 	sts	0x0304, r27
    1b0e:	6e cf       	rjmp	.-292    	; 0x19ec <start_speed_control_left+0x132>

00001b10 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    1b10:	85 b7       	in	r24, 0x35	; 53
    1b12:	80 61       	ori	r24, 0x10	; 16
    1b14:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    1b16:	2f ef       	ldi	r18, 0xFF	; 255
    1b18:	21 b9       	out	0x01, r18	; 1
	PORTA = 0x00;			// proximity pulses turned off
    1b1a:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    1b1c:	87 ef       	ldi	r24, 0xF7	; 247
    1b1e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    1b20:	80 ee       	ldi	r24, 0xE0	; 224
    1b22:	85 b9       	out	0x05, r24	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    1b24:	80 ef       	ldi	r24, 0xF0	; 240
    1b26:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    1b28:	80 eb       	ldi	r24, 0xB0	; 176
    1b2a:	88 b9       	out	0x08, r24	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    1b2c:	8c ef       	ldi	r24, 0xFC	; 252
    1b2e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x03;			// default for unused pins is 0
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	8b b9       	out	0x0b, r24	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    1b34:	2d b9       	out	0x0d, r18	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1b36:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    1b38:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    1b3a:	23 bb       	out	0x13, r18	; 19
	if(hardwareRevision == HW_REV_3_0) {
    1b3c:	90 91 53 04 	lds	r25, 0x0453
    1b40:	99 23       	and	r25, r25
    1b42:	99 f4       	brne	.+38     	; 0x1b6a <initPortsIO+0x5a>
		PORTG = 0x00;		// default for unused pins is 0
    1b44:	14 ba       	out	0x14, r1	; 20
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1b46:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1b4a:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1b4e:	8f e0       	ldi	r24, 0x0F	; 15
    1b50:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
    1b54:	80 91 05 01 	lds	r24, 0x0105
    1b58:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1b5c:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1b60:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    1b64:	10 92 0b 01 	sts	0x010B, r1
    1b68:	08 95       	ret

	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    1b6a:	91 30       	cpi	r25, 0x01	; 1
    1b6c:	89 f4       	brne	.+34     	; 0x1b90 <initPortsIO+0x80>
		PORTG = 0x00;		// default for unused pins is 0
    1b6e:	14 ba       	out	0x14, r1	; 20
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1b70:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1b74:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1b78:	8f e0       	ldi	r24, 0x0F	; 15
    1b7a:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
    1b7e:	80 93 05 01 	sts	0x0105, r24
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1b82:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1b86:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    1b8a:	10 92 0b 01 	sts	0x010B, r1
    1b8e:	08 95       	ret
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1b90:	92 30       	cpi	r25, 0x02	; 2
    1b92:	99 f4       	brne	.+38     	; 0x1bba <initPortsIO+0xaa>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    1b94:	88 e0       	ldi	r24, 0x08	; 8
    1b96:	84 bb       	out	0x14, r24	; 20
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1b98:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1b9c:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1ba0:	8f e0       	ldi	r24, 0x0F	; 15
    1ba2:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
    1ba6:	80 93 05 01 	sts	0x0105, r24
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1baa:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1bae:	20 93 0a 01 	sts	0x010A, r18
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    1bb2:	87 ef       	ldi	r24, 0xF7	; 247
    1bb4:	80 93 0b 01 	sts	0x010B, r24
    1bb8:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    1bba:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    1bbe:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    1bc2:	8f e0       	ldi	r24, 0x0F	; 15
    1bc4:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    1bc8:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    1bcc:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
    1bd0:	99 23       	and	r25, r25
    1bd2:	41 f2       	breq	.-112    	; 0x1b64 <initPortsIO+0x54>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    1bd4:	91 30       	cpi	r25, 0x01	; 1
    1bd6:	31 f2       	breq	.-116    	; 0x1b64 <initPortsIO+0x54>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    1bd8:	92 30       	cpi	r25, 0x02	; 2
    1bda:	59 f3       	breq	.-42     	; 0x1bb2 <initPortsIO+0xa2>
    1bdc:	08 95       	ret

00001bde <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    1bde:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    1be2:	10 92 bc 00 	sts	0x00BC, r1
}
    1be6:	08 95       	ret

00001be8 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    1be8:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    1bea:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    1bec:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    1bf6:	08 95       	ret

00001bf8 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    1bf8:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1bfa:	84 ea       	ldi	r24, 0xA4	; 164
    1bfc:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1c00:	80 91 bc 00 	lds	r24, 0x00BC
    1c04:	87 ff       	sbrs	r24, 7
    1c06:	fc cf       	rjmp	.-8      	; 0x1c00 <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1c08:	80 91 b9 00 	lds	r24, 0x00B9
    1c0c:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1c0e:	88 30       	cpi	r24, 0x08	; 8
    1c10:	21 f0       	breq	.+8      	; 0x1c1a <i2c_start+0x22>
    1c12:	80 31       	cpi	r24, 0x10	; 16
    1c14:	11 f0       	breq	.+4      	; 0x1c1a <i2c_start+0x22>
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	08 95       	ret
		//usartTransmit(twst);
		return 1;
	}

	// send device address
	TWDR = address;
    1c1a:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c1e:	84 e8       	ldi	r24, 0x84	; 132
    1c20:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1c24:	80 91 bc 00 	lds	r24, 0x00BC
    1c28:	87 ff       	sbrs	r24, 7
    1c2a:	fc cf       	rjmp	.-8      	; 0x1c24 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1c2c:	90 91 b9 00 	lds	r25, 0x00B9
    1c30:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1c32:	98 31       	cpi	r25, 0x18	; 24
    1c34:	29 f0       	breq	.+10     	; 0x1c40 <i2c_start+0x48>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 34       	cpi	r25, 0x40	; 64
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <i2c_start+0x46>
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}

	return 0;

}/* i2c_start */
    1c3e:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	08 95       	ret

00001c44 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    1c44:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1c46:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1c48:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1c4a:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1c4c:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1c50:	80 91 bc 00 	lds	r24, 0x00BC
    1c54:	87 ff       	sbrs	r24, 7
    1c56:	fc cf       	rjmp	.-8      	; 0x1c50 <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1c58:	80 91 b9 00 	lds	r24, 0x00B9
    1c5c:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1c5e:	88 30       	cpi	r24, 0x08	; 8
    1c60:	11 f0       	breq	.+4      	; 0x1c66 <i2c_start_wait+0x22>
    1c62:	80 31       	cpi	r24, 0x10	; 16
    1c64:	99 f7       	brne	.-26     	; 0x1c4c <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
    1c66:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1c6a:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1c6e:	80 91 bc 00 	lds	r24, 0x00BC
    1c72:	87 ff       	sbrs	r24, 7
    1c74:	fc cf       	rjmp	.-8      	; 0x1c6e <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1c76:	80 91 b9 00 	lds	r24, 0x00B9
    1c7a:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1c7c:	80 32       	cpi	r24, 0x20	; 32
    1c7e:	11 f0       	breq	.+4      	; 0x1c84 <i2c_start_wait+0x40>
    1c80:	88 35       	cpi	r24, 0x58	; 88
    1c82:	39 f4       	brne	.+14     	; 0x1c92 <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1c84:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1c88:	80 91 bc 00 	lds	r24, 0x00BC
    1c8c:	84 fd       	sbrc	r24, 4
    1c8e:	fc cf       	rjmp	.-8      	; 0x1c88 <i2c_start_wait+0x44>
    1c90:	dd cf       	rjmp	.-70     	; 0x1c4c <i2c_start_wait+0x8>
    1c92:	08 95       	ret

00001c94 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1c94:	84 e9       	ldi	r24, 0x94	; 148
    1c96:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1c9a:	80 91 bc 00 	lds	r24, 0x00BC
    1c9e:	84 fd       	sbrc	r24, 4
    1ca0:	fc cf       	rjmp	.-8      	; 0x1c9a <i2c_stop+0x6>

}/* i2c_stop */
    1ca2:	08 95       	ret

00001ca4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1ca4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ca8:	84 e8       	ldi	r24, 0x84	; 132
    1caa:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1cae:	80 91 bc 00 	lds	r24, 0x00BC
    1cb2:	87 ff       	sbrs	r24, 7
    1cb4:	fc cf       	rjmp	.-8      	; 0x1cae <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1cb6:	80 91 b9 00 	lds	r24, 0x00B9
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	88 7f       	andi	r24, 0xF8	; 248
    1cbe:	88 32       	cpi	r24, 0x28	; 40
    1cc0:	09 f0       	breq	.+2      	; 0x1cc4 <i2c_write+0x20>
    1cc2:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1cc4:	89 2f       	mov	r24, r25
    1cc6:	08 95       	ret

00001cc8 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1cc8:	84 ec       	ldi	r24, 0xC4	; 196
    1cca:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    1cce:	80 91 bc 00 	lds	r24, 0x00BC
    1cd2:	87 ff       	sbrs	r24, 7
    1cd4:	fc cf       	rjmp	.-8      	; 0x1cce <i2c_readAck+0x6>

    return TWDR;
    1cd6:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    1cda:	08 95       	ret

00001cdc <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cdc:	84 e8       	ldi	r24, 0x84	; 132
    1cde:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    1ce2:	80 91 bc 00 	lds	r24, 0x00BC
    1ce6:	87 ff       	sbrs	r24, 7
    1ce8:	fc cf       	rjmp	.-8      	; 0x1ce2 <i2c_readNak+0x6>
	
    return TWDR;
    1cea:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    1cee:	08 95       	ret

00001cf0 <i2c_rep_start>:
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    1cf0:	98 2f       	mov	r25, r24
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1cf2:	84 ea       	ldi	r24, 0xA4	; 164
    1cf4:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1cf8:	80 91 bc 00 	lds	r24, 0x00BC
    1cfc:	87 ff       	sbrs	r24, 7
    1cfe:	fc cf       	rjmp	.-8      	; 0x1cf8 <i2c_rep_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1d00:	80 91 b9 00 	lds	r24, 0x00B9
    1d04:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    1d06:	88 30       	cpi	r24, 0x08	; 8
    1d08:	21 f0       	breq	.+8      	; 0x1d12 <i2c_rep_start+0x22>
    1d0a:	80 31       	cpi	r24, 0x10	; 16
    1d0c:	11 f0       	breq	.+4      	; 0x1d12 <i2c_rep_start+0x22>
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	08 95       	ret
		//usartTransmit(twst);
		return 1;
	}

	// send device address
	TWDR = address;
    1d12:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d16:	84 e8       	ldi	r24, 0x84	; 132
    1d18:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1d1c:	80 91 bc 00 	lds	r24, 0x00BC
    1d20:	87 ff       	sbrs	r24, 7
    1d22:	fc cf       	rjmp	.-8      	; 0x1d1c <i2c_rep_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1d24:	90 91 b9 00 	lds	r25, 0x00B9
    1d28:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1d2a:	98 31       	cpi	r25, 0x18	; 24
    1d2c:	29 f0       	breq	.+10     	; 0x1d38 <i2c_rep_start+0x48>
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 34       	cpi	r25, 0x40	; 64
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <i2c_rep_start+0x46>
    1d34:	81 e0       	ldi	r24, 0x01	; 1
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1d36:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	08 95       	ret

00001d3c <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    1d3c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    1d40:	80 e1       	ldi	r24, 0x10	; 16
    1d42:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    1d46:	e0 ec       	ldi	r30, 0xC0	; 192
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	82 60       	ori	r24, 0x02	; 2
    1d4e:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    1d50:	e1 ec       	ldi	r30, 0xC1	; 193
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	88 69       	ori	r24, 0x98	; 152
    1d58:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    1d5a:	e2 ec       	ldi	r30, 0xC2	; 194
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	86 60       	ori	r24, 0x06	; 6
    1d62:	80 83       	st	Z, r24



}
    1d64:	08 95       	ret

00001d66 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    1d66:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    1d6a:	80 e1       	ldi	r24, 0x10	; 16
    1d6c:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    1d70:	e8 ec       	ldi	r30, 0xC8	; 200
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	82 60       	ori	r24, 0x02	; 2
    1d78:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    1d7a:	e9 ec       	ldi	r30, 0xC9	; 201
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	88 61       	ori	r24, 0x18	; 24
    1d82:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    1d84:	ea ec       	ldi	r30, 0xCA	; 202
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	86 60       	ori	r24, 0x06	; 6
    1d8c:	80 83       	st	Z, r24

}
    1d8e:	08 95       	ret

00001d90 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    1d90:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    1d94:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    1d98:	10 92 c2 00 	sts	0x00C2, r1

}
    1d9c:	08 95       	ret

00001d9e <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {
    1d9e:	98 2f       	mov	r25, r24

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    1da0:	80 91 c0 00 	lds	r24, 0x00C0
    1da4:	85 ff       	sbrs	r24, 5
    1da6:	fc cf       	rjmp	.-8      	; 0x1da0 <usart0Transmit+0x2>
	UDR0 = data;						// put data into buffer, sends the data
    1da8:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
    1dac:	66 23       	and	r22, r22
    1dae:	21 f0       	breq	.+8      	; 0x1db8 <usart0Transmit+0x1a>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    1db0:	80 91 c0 00 	lds	r24, 0x00C0
    1db4:	86 ff       	sbrs	r24, 6
    1db6:	fc cf       	rjmp	.-8      	; 0x1db0 <usart0Transmit+0x12>
    1db8:	08 95       	ret

00001dba <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {
    1dba:	98 2f       	mov	r25, r24

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    1dbc:	80 91 c8 00 	lds	r24, 0x00C8
    1dc0:	85 ff       	sbrs	r24, 5
    1dc2:	fc cf       	rjmp	.-8      	; 0x1dbc <usart1Transmit+0x2>
	UDR1 = data;						// put data into buffer, sends the data
    1dc4:	90 93 ce 00 	sts	0x00CE, r25
	if(isBlocking) {
    1dc8:	66 23       	and	r22, r22
    1dca:	21 f0       	breq	.+8      	; 0x1dd4 <usart1Transmit+0x1a>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    1dcc:	80 91 c8 00 	lds	r24, 0x00C8
    1dd0:	86 ff       	sbrs	r24, 6
    1dd2:	fc cf       	rjmp	.-8      	; 0x1dcc <usart1Transmit+0x12>
    1dd4:	08 95       	ret

00001dd6 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    1dd6:	80 91 c0 00 	lds	r24, 0x00C0
    1dda:	80 95       	com	r24
		return 0;
	} else {
		return 1;
	}

}
    1ddc:	88 1f       	adc	r24, r24
    1dde:	88 27       	eor	r24, r24
    1de0:	88 1f       	adc	r24, r24
    1de2:	08 95       	ret

00001de4 <usart0Receive>:

unsigned char usart0Receive() {
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    1de8:	80 91 c0 00 	lds	r24, 0x00C0
    1dec:	87 fd       	sbrc	r24, 7
    1dee:	0a c0       	rjmp	.+20     	; 0x1e04 <usart0Receive+0x20>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    1df0:	2f 5f       	subi	r18, 0xFF	; 255
    1df2:	3f 4f       	sbci	r19, 0xFF	; 255

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    1df4:	27 39       	cpi	r18, 0x97	; 151
    1df6:	31 05       	cpc	r19, r1
    1df8:	b9 f7       	brne	.-18     	; 0x1de8 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	80 93 1a 03 	sts	0x031A, r24
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	08 95       	ret
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    1e04:	80 91 c6 00 	lds	r24, 0x00C6

}
    1e08:	08 95       	ret

00001e0a <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    1e0a:	1f 92       	push	r1
    1e0c:	0f 92       	push	r0
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	0f 92       	push	r0
    1e12:	0b b6       	in	r0, 0x3b	; 59
    1e14:	0f 92       	push	r0
    1e16:	11 24       	eor	r1, r1
    1e18:	2f 93       	push	r18
    1e1a:	3f 93       	push	r19
    1e1c:	4f 93       	push	r20
    1e1e:	5f 93       	push	r21
    1e20:	6f 93       	push	r22
    1e22:	7f 93       	push	r23
    1e24:	8f 93       	push	r24
    1e26:	9f 93       	push	r25
    1e28:	af 93       	push	r26
    1e2a:	bf 93       	push	r27
    1e2c:	ef 93       	push	r30
    1e2e:	ff 93       	push	r31

	char receivedByte = UDR0;
    1e30:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    1e34:	80 91 50 04 	lds	r24, 0x0450
    1e38:	8e 30       	cpi	r24, 0x0E	; 14
    1e3a:	c1 f1       	breq	.+112    	; 0x1eac <__vector_25+0xa2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    1e3c:	8f 30       	cpi	r24, 0x0F	; 15
    1e3e:	31 f1       	breq	.+76     	; 0x1e8c <__vector_25+0x82>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    1e40:	80 91 0d 02 	lds	r24, 0x020D
    1e44:	88 23       	and	r24, r24
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <__vector_25+0x40>
    1e48:	46 c0       	rjmp	.+140    	; 0x1ed6 <__vector_25+0xcc>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    1e4a:	80 91 1f 04 	lds	r24, 0x041F
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <__vector_25+0x4a>
    1e52:	46 c0       	rjmp	.+140    	; 0x1ee0 <__vector_25+0xd6>
    1e54:	82 30       	cpi	r24, 0x02	; 2
    1e56:	61 f5       	brne	.+88     	; 0x1eb0 <__vector_25+0xa6>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    1e58:	40 91 21 04 	lds	r20, 0x0421
    1e5c:	44 23       	and	r20, r20
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <__vector_25+0x58>
    1e60:	5e c0       	rjmp	.+188    	; 0x1f1e <__vector_25+0x114>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    1e62:	41 30       	cpi	r20, 0x01	; 1
    1e64:	29 f5       	brne	.+74     	; 0x1eb0 <__vector_25+0xa6>
						rfAddress |= ((unsigned int)receivedByte<<8);
    1e66:	39 2f       	mov	r19, r25
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	80 91 11 03 	lds	r24, 0x0311
    1e6e:	90 91 12 03 	lds	r25, 0x0312
    1e72:	82 2b       	or	r24, r18
    1e74:	93 2b       	or	r25, r19
    1e76:	90 93 12 03 	sts	0x0312, r25
    1e7a:	80 93 11 03 	sts	0x0311, r24
						addressReceived = 1;
    1e7e:	40 93 20 04 	sts	0x0420, r20
						menuState = 0;
    1e82:	10 92 21 04 	sts	0x0421, r1
						chooseMenu = 1;
    1e86:	40 93 0d 02 	sts	0x020D, r20
    1e8a:	12 c0       	rjmp	.+36     	; 0x1eb0 <__vector_25+0xa6>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    1e8c:	9b 32       	cpi	r25, 0x2B	; 43
    1e8e:	89 f1       	breq	.+98     	; 0x1ef2 <__vector_25+0xe8>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    1e90:	9d 32       	cpi	r25, 0x2D	; 45
    1e92:	e9 f1       	breq	.+122    	; 0x1f0e <__vector_25+0x104>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    1e94:	97 36       	cpi	r25, 0x67	; 103
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <__vector_25+0x90>
    1e98:	4a c0       	rjmp	.+148    	; 0x1f2e <__vector_25+0x124>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    1e9a:	93 37       	cpi	r25, 0x73	; 115
    1e9c:	49 f4       	brne	.+18     	; 0x1eb0 <__vector_25+0xa6>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    1e9e:	8d ef       	ldi	r24, 0xFD	; 253
    1ea0:	9f e0       	ldi	r25, 0x0F	; 15
    1ea2:	60 91 52 05 	lds	r22, 0x0552
    1ea6:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <__eewr_byte_m2560>
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <__vector_25+0xa6>

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    1eac:	9a 3a       	cpi	r25, 0xAA	; 170
    1eae:	59 f1       	breq	.+86     	; 0x1f06 <__vector_25+0xfc>
			}
		}

	}

}
    1eb0:	ff 91       	pop	r31
    1eb2:	ef 91       	pop	r30
    1eb4:	bf 91       	pop	r27
    1eb6:	af 91       	pop	r26
    1eb8:	9f 91       	pop	r25
    1eba:	8f 91       	pop	r24
    1ebc:	7f 91       	pop	r23
    1ebe:	6f 91       	pop	r22
    1ec0:	5f 91       	pop	r21
    1ec2:	4f 91       	pop	r20
    1ec4:	3f 91       	pop	r19
    1ec6:	2f 91       	pop	r18
    1ec8:	0f 90       	pop	r0
    1eca:	0b be       	out	0x3b, r0	; 59
    1ecc:	0f 90       	pop	r0
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	0f 90       	pop	r0
    1ed2:	1f 90       	pop	r1
    1ed4:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    1ed6:	10 92 0d 02 	sts	0x020D, r1
			menuChoice = receivedByte;
    1eda:	90 93 1f 04 	sts	0x041F, r25
    1ede:	e8 cf       	rjmp	.-48     	; 0x1eb0 <__vector_25+0xa6>
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    1ee0:	9a 3a       	cpi	r25, 0xAA	; 170
    1ee2:	91 f1       	breq	.+100    	; 0x1f48 <__vector_25+0x13e>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    1ee4:	95 35       	cpi	r25, 0x55	; 85
    1ee6:	21 f7       	brne	.-56     	; 0x1eb0 <__vector_25+0xa6>
						chooseMenu = 1;
    1ee8:	80 93 0d 02 	sts	0x020D, r24
						menuChoice = 0;
    1eec:	10 92 1f 04 	sts	0x041F, r1
    1ef0:	df cf       	rjmp	.-66     	; 0x1eb0 <__vector_25+0xa6>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    1ef2:	80 91 52 05 	lds	r24, 0x0552
    1ef6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef8:	19 f0       	breq	.+6      	; 0x1f00 <__vector_25+0xf6>
				currentOsccal++;
    1efa:	8f 5f       	subi	r24, 0xFF	; 255
    1efc:	80 93 52 05 	sts	0x0552, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    1f00:	80 93 66 00 	sts	0x0066, r24
    1f04:	d5 cf       	rjmp	.-86     	; 0x1eb0 <__vector_25+0xa6>
	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	80 93 d8 04 	sts	0x04D8, r24
    1f0c:	d1 cf       	rjmp	.-94     	; 0x1eb0 <__vector_25+0xa6>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    1f0e:	80 91 52 05 	lds	r24, 0x0552
    1f12:	88 23       	and	r24, r24
    1f14:	a9 f3       	breq	.-22     	; 0x1f00 <__vector_25+0xf6>
				currentOsccal--;	
    1f16:	81 50       	subi	r24, 0x01	; 1
    1f18:	80 93 52 05 	sts	0x0552, r24
    1f1c:	f1 cf       	rjmp	.-30     	; 0x1f00 <__vector_25+0xf6>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    1f1e:	90 93 11 03 	sts	0x0311, r25
    1f22:	10 92 12 03 	sts	0x0312, r1
						menuState = 1;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	80 93 21 04 	sts	0x0421, r24
    1f2c:	c1 cf       	rjmp	.-126    	; 0x1eb0 <__vector_25+0xa6>
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
    1f2e:	80 91 23 04 	lds	r24, 0x0423
    1f32:	61 e0       	ldi	r22, 0x01	; 1
    1f34:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
			currentOsccal = OSCCAL;
    1f38:	80 91 66 00 	lds	r24, 0x0066
    1f3c:	80 93 52 05 	sts	0x0552, r24
			usart0Transmit(currentOsccal,1);
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    1f46:	b4 cf       	rjmp	.-152    	; 0x1eb0 <__vector_25+0xa6>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    1f48:	80 93 22 04 	sts	0x0422, r24
    1f4c:	b1 cf       	rjmp	.-158    	; 0x1eb0 <__vector_25+0xa6>

00001f4e <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    1f4e:	86 b1       	in	r24, 0x06	; 6
    1f50:	46 b1       	in	r20, 0x06	; 6
    1f52:	26 b1       	in	r18, 0x06	; 6
    1f54:	66 b1       	in	r22, 0x06	; 6
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	28 70       	andi	r18, 0x08	; 8
    1f5a:	30 70       	andi	r19, 0x00	; 0
    1f5c:	35 95       	asr	r19
    1f5e:	27 95       	ror	r18
    1f60:	35 95       	asr	r19
    1f62:	27 95       	ror	r18
    1f64:	35 95       	asr	r19
    1f66:	27 95       	ror	r18
    1f68:	22 0f       	add	r18, r18
    1f6a:	33 1f       	adc	r19, r19
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	44 70       	andi	r20, 0x04	; 4
    1f70:	50 70       	andi	r21, 0x00	; 0
    1f72:	55 95       	asr	r21
    1f74:	47 95       	ror	r20
    1f76:	55 95       	asr	r21
    1f78:	47 95       	ror	r20
    1f7a:	24 0f       	add	r18, r20
    1f7c:	35 1f       	adc	r19, r21
    1f7e:	22 0f       	add	r18, r18
    1f80:	33 1f       	adc	r19, r19
    1f82:	70 e0       	ldi	r23, 0x00	; 0
    1f84:	62 70       	andi	r22, 0x02	; 2
    1f86:	70 70       	andi	r23, 0x00	; 0
    1f88:	75 95       	asr	r23
    1f8a:	67 95       	ror	r22
    1f8c:	26 0f       	add	r18, r22
    1f8e:	37 1f       	adc	r19, r23
    1f90:	22 0f       	add	r18, r18
    1f92:	33 1f       	adc	r19, r19
    1f94:	81 70       	andi	r24, 0x01	; 1
}
    1f96:	82 0f       	add	r24, r18
    1f98:	08 95       	ret

00001f9a <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    1f9a:	1f 92       	push	r1
    1f9c:	0f 92       	push	r0
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	0f 92       	push	r0
    1fa2:	11 24       	eor	r1, r1

}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	0f 90       	pop	r0
    1faa:	1f 90       	pop	r1
    1fac:	18 95       	reti

00001fae <getTime100MicroSec>:
	pwm_left = 0;
	initPeripherals();

}

unsigned long int getTime100MicroSec() {
    1fae:	60 91 4c 04 	lds	r22, 0x044C
    1fb2:	70 91 4d 04 	lds	r23, 0x044D
	return clockTick;
}
    1fb6:	80 91 4e 04 	lds	r24, 0x044E
    1fba:	90 91 4f 04 	lds	r25, 0x044F
    1fbe:	08 95       	ret

00001fc0 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	80 93 bb 02 	sts	0x02BB, r24
}
    1fc6:	08 95       	ret

00001fc8 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	a0 e0       	ldi	r26, 0x00	; 0
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	80 93 d1 02 	sts	0x02D1, r24
    1fd4:	90 93 d2 02 	sts	0x02D2, r25
    1fd8:	a0 93 d3 02 	sts	0x02D3, r26
    1fdc:	b0 93 d4 02 	sts	0x02D4, r27
	rightMotSteps = 0;
    1fe0:	80 93 cd 02 	sts	0x02CD, r24
    1fe4:	90 93 ce 02 	sts	0x02CE, r25
    1fe8:	a0 93 cf 02 	sts	0x02CF, r26
    1fec:	b0 93 d0 02 	sts	0x02D0, r27
	theta = 0;
    1ff0:	80 93 77 04 	sts	0x0477, r24
    1ff4:	90 93 78 04 	sts	0x0478, r25
    1ff8:	a0 93 79 04 	sts	0x0479, r26
    1ffc:	b0 93 7a 04 	sts	0x047A, r27
	xPos = 0;
    2000:	80 93 7f 04 	sts	0x047F, r24
    2004:	90 93 80 04 	sts	0x0480, r25
    2008:	a0 93 81 04 	sts	0x0481, r26
    200c:	b0 93 82 04 	sts	0x0482, r27
	yPos = 0;
    2010:	80 93 83 04 	sts	0x0483, r24
    2014:	90 93 84 04 	sts	0x0484, r25
    2018:	a0 93 85 04 	sts	0x0485, r26
    201c:	b0 93 86 04 	sts	0x0486, r27
	rightDist = 0;
    2020:	80 93 9f 04 	sts	0x049F, r24
    2024:	90 93 a0 04 	sts	0x04A0, r25
    2028:	a0 93 a1 04 	sts	0x04A1, r26
    202c:	b0 93 a2 04 	sts	0x04A2, r27
	leftDist = 0;
    2030:	80 93 9b 04 	sts	0x049B, r24
    2034:	90 93 9c 04 	sts	0x049C, r25
    2038:	a0 93 9d 04 	sts	0x049D, r26
    203c:	b0 93 9e 04 	sts	0x049E, r27
}
    2040:	08 95       	ret

00002042 <initPeripherals>:
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2042:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    2044:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    2046:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    2048:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    204c:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    2050:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    2054:	8e ef       	ldi	r24, 0xFE	; 254
    2056:	9f e0       	ldi	r25, 0x0F	; 15
    2058:	0e 94 7c 4f 	call	0x9ef8	; 0x9ef8 <__eerd_word_m2560>
    205c:	90 93 12 03 	sts	0x0312, r25
    2060:	80 93 11 03 	sts	0x0311, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    2064:	8d ef       	ldi	r24, 0xFD	; 253
    2066:	9f e0       	ldi	r25, 0x0F	; 15
    2068:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__eerd_byte_m2560>
    206c:	98 2f       	mov	r25, r24
    206e:	80 93 52 05 	sts	0x0552, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    2072:	81 50       	subi	r24, 0x01	; 1
    2074:	8e 3f       	cpi	r24, 0xFE	; 254
    2076:	b0 f5       	brcc	.+108    	; 0x20e4 <initPeripherals+0xa2>
		OSCCAL = currentOsccal;
    2078:	90 93 66 00 	sts	0x0066, r25
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    207c:	20 91 11 03 	lds	r18, 0x0311
    2080:	30 91 12 03 	lds	r19, 0x0312
    2084:	c9 01       	movw	r24, r18
    2086:	81 58       	subi	r24, 0x81	; 129
    2088:	9c 40       	sbci	r25, 0x0C	; 12
    208a:	03 97       	sbiw	r24, 0x03	; 3
    208c:	10 f4       	brcc	.+4      	; 0x2092 <initPeripherals+0x50>
		hardwareRevision = HW_REV_3_0;
    208e:	10 92 53 04 	sts	0x0453, r1
	}

	if(rfAddress == 3200) {
    2092:	8c e0       	ldi	r24, 0x0C	; 12
    2094:	20 38       	cpi	r18, 0x80	; 128
    2096:	38 07       	cpc	r19, r24
    2098:	71 f1       	breq	.+92     	; 0x20f6 <initPeripherals+0xb4>
		hardwareRevision = HW_REV_3_0_1;
	}

	if(rfAddress > 3203) {
    209a:	24 58       	subi	r18, 0x84	; 132
    209c:	3c 40       	sbci	r19, 0x0C	; 12
    209e:	18 f0       	brcs	.+6      	; 0x20a6 <initPeripherals+0x64>
		hardwareRevision = HW_REV_3_1;
    20a0:	82 e0       	ldi	r24, 0x02	; 2
    20a2:	80 93 53 04 	sts	0x0453, r24
	}

	initCalibration();
    20a6:	0e 94 c1 31 	call	0x6382	; 0x6382 <initCalibration>
	initPortsIO();
    20aa:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <initPortsIO>
	initAdc();
    20ae:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <initAdc>
	initMotors();
    20b2:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <initMotors>
	initRGBleds();
    20b6:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <initRGBleds>
	initSPI();
    20ba:	0e 94 03 01 	call	0x206	; 0x206 <initSPI>
	mirf_init();
    20be:	0e 94 f6 02 	call	0x5ec	; 0x5ec <mirf_init>
	if(spiCommError==0) {
    20c2:	80 91 14 03 	lds	r24, 0x0314
    20c6:	88 23       	and	r24, r24
    20c8:	29 f4       	brne	.+10     	; 0x20d4 <initPeripherals+0x92>
		rfFlags |= 1;
    20ca:	80 91 13 03 	lds	r24, 0x0313
    20ce:	81 60       	ori	r24, 0x01	; 1
    20d0:	80 93 13 03 	sts	0x0313, r24
	}
	initUsart0();
    20d4:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <initUsart0>
	initAccelerometer();
    20d8:	0e 94 88 3e 	call	0x7d10	; 0x7d10 <initAccelerometer>
	init_ir_remote_control();
    20dc:	0e 94 48 07 	call	0xe90	; 0xe90 <init_ir_remote_control>

	sei();			// enable global interrupts
    20e0:	78 94       	sei

	
}
    20e2:	08 95       	ret
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    20e4:	60 91 66 00 	lds	r22, 0x0066
    20e8:	60 93 52 05 	sts	0x0552, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    20ec:	8d ef       	ldi	r24, 0xFD	; 253
    20ee:	9f e0       	ldi	r25, 0x0F	; 15
    20f0:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <__eewr_byte_m2560>
    20f4:	c3 cf       	rjmp	.-122    	; 0x207c <initPeripherals+0x3a>
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
		hardwareRevision = HW_REV_3_0_1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	80 93 53 04 	sts	0x0453, r24
    20fc:	d4 cf       	rjmp	.-88     	; 0x20a6 <initPeripherals+0x64>

000020fe <sleep>:
// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {

}

void sleep(unsigned char seconds) {
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    2102:	9e e1       	ldi	r25, 0x1E	; 30
    2104:	89 9f       	mul	r24, r25
    2106:	e0 01       	movw	r28, r0
    2108:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    210a:	80 91 68 00 	lds	r24, 0x0068
    210e:	8d 7f       	andi	r24, 0xFD	; 253
    2110:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    2114:	80 91 6c 00 	lds	r24, 0x006C
    2118:	8f 77       	andi	r24, 0x7F	; 127
    211a:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    211e:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    2120:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    2124:	80 91 7a 00 	lds	r24, 0x007A
    2128:	80 61       	ori	r24, 0x10	; 16
    212a:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    212e:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    2132:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2136:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    213a:	88 b3       	in	r24, 0x18	; 24
    213c:	87 60       	ori	r24, 0x07	; 7
    213e:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    2140:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    2144:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    2148:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    214c:	89 b3       	in	r24, 0x19	; 25
    214e:	87 60       	ori	r24, 0x07	; 7
    2150:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    2152:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    2156:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    215a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <closeUsart>
	closeSPI();
    215e:	0e 94 0f 01 	call	0x21e	; 0x21e <closeSPI>
	i2c_close();
    2162:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <i2c_close>

	// set port pins
	initPortsIO();
    2166:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    216a:	83 b7       	in	r24, 0x33	; 51
    216c:	8f 60       	ori	r24, 0x0F	; 15
    216e:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    2176:	80 91 b0 00 	lds	r24, 0x00B0
    217a:	8d 7f       	andi	r24, 0xFD	; 253
    217c:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    2180:	80 91 b1 00 	lds	r24, 0x00B1
    2184:	87 60       	ori	r24, 0x07	; 7
    2186:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    218a:	20 97       	sbiw	r28, 0x00	; 0
    218c:	19 f0       	breq	.+6      	; 0x2194 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    218e:	88 95       	sleep
		pause--;
    2190:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    2192:	e9 f7       	brne	.-6      	; 0x218e <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    2194:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    2196:	80 91 b1 00 	lds	r24, 0x00B1
    219a:	88 7f       	andi	r24, 0xF8	; 248
    219c:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    21a0:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    21a4:	80 91 b0 00 	lds	r24, 0x00B0
    21a8:	82 60       	ori	r24, 0x02	; 2
    21aa:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    21ae:	8f ef       	ldi	r24, 0xFF	; 255
    21b0:	80 93 08 02 	sts	0x0208, r24
	pwm_green = 255;
    21b4:	80 93 09 02 	sts	0x0209, r24
	pwm_blue = 255;
    21b8:	80 93 0a 02 	sts	0x020A, r24
	pwm_right = 0;
    21bc:	10 92 f2 02 	sts	0x02F2, r1
    21c0:	10 92 f1 02 	sts	0x02F1, r1
	pwm_left = 0;
    21c4:	10 92 f4 02 	sts	0x02F4, r1
    21c8:	10 92 f3 02 	sts	0x02F3, r1
	initPeripherals();
    21cc:	0e 94 21 10 	call	0x2042	; 0x2042 <initPeripherals>

}
    21d0:	df 91       	pop	r29
    21d2:	cf 91       	pop	r28
    21d4:	08 95       	ret

000021d6 <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    21d6:	ea e7       	ldi	r30, 0x7A	; 122
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	10 82       	st	Z, r1
	ADCSRB = 0;
    21dc:	2b e7       	ldi	r18, 0x7B	; 123
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	d9 01       	movw	r26, r18
    21e2:	1c 92       	st	X, r1
	ADMUX = 0;
    21e4:	ac e7       	ldi	r26, 0x7C	; 124
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	1c 92       	st	X, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    21ea:	80 81       	ld	r24, Z
    21ec:	86 60       	ori	r24, 0x06	; 6
    21ee:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    21f0:	8c 91       	ld	r24, X
    21f2:	80 64       	ori	r24, 0x40	; 64
    21f4:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    21f6:	80 81       	ld	r24, Z
    21f8:	80 62       	ori	r24, 0x20	; 32
    21fa:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    21fc:	d9 01       	movw	r26, r18
    21fe:	8c 91       	ld	r24, X
    2200:	88 7f       	andi	r24, 0xF8	; 248
    2202:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    2204:	80 81       	ld	r24, Z
    2206:	88 60       	ori	r24, 0x08	; 8
    2208:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    220a:	80 81       	ld	r24, Z
    220c:	80 68       	ori	r24, 0x80	; 128
    220e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    2210:	80 81       	ld	r24, Z
    2212:	80 64       	ori	r24, 0x40	; 64
    2214:	80 83       	st	Z, r24

}
    2216:	08 95       	ret

00002218 <__vector_29>:

ISR(ADC_vect) {
    2218:	1f 92       	push	r1
    221a:	0f 92       	push	r0
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	0f 92       	push	r0
    2220:	0b b6       	in	r0, 0x3b	; 59
    2222:	0f 92       	push	r0
    2224:	11 24       	eor	r1, r1
    2226:	1f 93       	push	r17
    2228:	2f 93       	push	r18
    222a:	3f 93       	push	r19
    222c:	4f 93       	push	r20
    222e:	5f 93       	push	r21
    2230:	6f 93       	push	r22
    2232:	7f 93       	push	r23
    2234:	8f 93       	push	r24
    2236:	9f 93       	push	r25
    2238:	af 93       	push	r26
    223a:	bf 93       	push	r27
    223c:	ef 93       	push	r30
    223e:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
    2240:	80 91 4c 04 	lds	r24, 0x044C
    2244:	90 91 4d 04 	lds	r25, 0x044D
    2248:	a0 91 4e 04 	lds	r26, 0x044E
    224c:	b0 91 4f 04 	lds	r27, 0x044F
    2250:	8f 3f       	cpi	r24, 0xFF	; 255
    2252:	2f ef       	ldi	r18, 0xFF	; 255
    2254:	92 07       	cpc	r25, r18
    2256:	2f ef       	ldi	r18, 0xFF	; 255
    2258:	a2 07       	cpc	r26, r18
    225a:	2f ef       	ldi	r18, 0xFF	; 255
    225c:	b2 07       	cpc	r27, r18
    225e:	09 f4       	brne	.+2      	; 0x2262 <__vector_29+0x4a>
    2260:	b9 c0       	rjmp	.+370    	; 0x23d4 <__vector_29+0x1bc>
		clockTick = 0;
	} else {
		clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    2262:	01 96       	adiw	r24, 0x01	; 1
    2264:	a1 1d       	adc	r26, r1
    2266:	b1 1d       	adc	r27, r1
    2268:	80 93 4c 04 	sts	0x044C, r24
    226c:	90 93 4d 04 	sts	0x044D, r25
    2270:	a0 93 4e 04 	sts	0x044E, r26
    2274:	b0 93 4f 04 	sts	0x044F, r27
	}								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    2278:	80 91 78 00 	lds	r24, 0x0078
    227c:	48 2f       	mov	r20, r24
    227e:	50 e0       	ldi	r21, 0x00	; 0
	value = (ADCH<<8) | value;
    2280:	20 91 79 00 	lds	r18, 0x0079
    2284:	92 2f       	mov	r25, r18
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	48 2b       	or	r20, r24
    228a:	59 2b       	or	r21, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    228c:	80 91 b5 02 	lds	r24, 0x02B5
    2290:	82 30       	cpi	r24, 0x02	; 2
    2292:	09 f4       	brne	.+2      	; 0x2296 <__vector_29+0x7e>
    2294:	bd c1       	rjmp	.+890    	; 0x2610 <__vector_29+0x3f8>
    2296:	83 30       	cpi	r24, 0x03	; 3
    2298:	08 f4       	brcc	.+2      	; 0x229c <__vector_29+0x84>
    229a:	4c c0       	rjmp	.+152    	; 0x2334 <__vector_29+0x11c>
    229c:	84 30       	cpi	r24, 0x04	; 4
    229e:	09 f4       	brne	.+2      	; 0x22a2 <__vector_29+0x8a>
    22a0:	e0 c1       	rjmp	.+960    	; 0x2662 <__vector_29+0x44a>
    22a2:	84 30       	cpi	r24, 0x04	; 4
    22a4:	08 f0       	brcs	.+2      	; 0x22a8 <__vector_29+0x90>
    22a6:	2f c1       	rjmp	.+606    	; 0x2506 <__vector_29+0x2ee>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    22a8:	80 91 dd 02 	lds	r24, 0x02DD
    22ac:	90 91 de 02 	lds	r25, 0x02DE
    22b0:	48 0f       	add	r20, r24
    22b2:	59 1f       	adc	r21, r25
			left_current_avg = left_current_avg >> 1;
    22b4:	56 95       	lsr	r21
    22b6:	47 95       	ror	r20
    22b8:	50 93 de 02 	sts	0x02DE, r21
    22bc:	40 93 dd 02 	sts	0x02DD, r20
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    22c0:	90 91 d4 04 	lds	r25, 0x04D4
    22c4:	92 30       	cpi	r25, 0x02	; 2
    22c6:	09 f0       	breq	.+2      	; 0x22ca <__vector_29+0xb2>
    22c8:	4b c0       	rjmp	.+150    	; 0x2360 <__vector_29+0x148>
		switch(irCommAdcTxState) {
    22ca:	80 91 24 05 	lds	r24, 0x0524
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <__vector_29+0xbc>
    22d2:	7b c2       	rjmp	.+1270   	; 0x27ca <__vector_29+0x5b2>
    22d4:	81 30       	cpi	r24, 0x01	; 1
    22d6:	08 f0       	brcs	.+2      	; 0x22da <__vector_29+0xc2>
    22d8:	f1 c1       	rjmp	.+994    	; 0x26bc <__vector_29+0x4a4>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    22da:	80 91 26 05 	lds	r24, 0x0526
    22de:	81 30       	cpi	r24, 0x01	; 1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <__vector_29+0xcc>
    22e2:	07 c3       	rjmp	.+1550   	; 0x28f2 <__vector_29+0x6da>
    22e4:	90 91 b6 02 	lds	r25, 0x02B6
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    22e8:	80 91 1f 02 	lds	r24, 0x021F
    22ec:	88 30       	cpi	r24, 0x08	; 8
    22ee:	08 f0       	brcs	.+2      	; 0x22f2 <__vector_29+0xda>
    22f0:	50 c1       	rjmp	.+672    	; 0x2592 <__vector_29+0x37a>
		ADCSRB &= ~(1 << MUX5);
    22f2:	80 91 7b 00 	lds	r24, 0x007B
    22f6:	87 7f       	andi	r24, 0xF7	; 247
    22f8:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + currentAdChannel;
    22fc:	80 91 1f 02 	lds	r24, 0x021F
    2300:	80 5c       	subi	r24, 0xC0	; 192
    2302:	80 93 7c 00 	sts	0x007C, r24
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    2306:	92 30       	cpi	r25, 0x02	; 2
    2308:	09 f4       	brne	.+2      	; 0x230c <__vector_29+0xf4>
    230a:	50 c1       	rjmp	.+672    	; 0x25ac <__vector_29+0x394>

	}

	//LED_BLUE_OFF;

}
    230c:	ff 91       	pop	r31
    230e:	ef 91       	pop	r30
    2310:	bf 91       	pop	r27
    2312:	af 91       	pop	r26
    2314:	9f 91       	pop	r25
    2316:	8f 91       	pop	r24
    2318:	7f 91       	pop	r23
    231a:	6f 91       	pop	r22
    231c:	5f 91       	pop	r21
    231e:	4f 91       	pop	r20
    2320:	3f 91       	pop	r19
    2322:	2f 91       	pop	r18
    2324:	1f 91       	pop	r17
    2326:	0f 90       	pop	r0
    2328:	0b be       	out	0x3b, r0	; 59
    232a:	0f 90       	pop	r0
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	0f 90       	pop	r0
    2330:	1f 90       	pop	r1
    2332:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2334:	88 23       	and	r24, r24
    2336:	09 f4       	brne	.+2      	; 0x233a <__vector_29+0x122>
    2338:	56 c0       	rjmp	.+172    	; 0x23e6 <__vector_29+0x1ce>
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	61 f4       	brne	.+24     	; 0x2356 <__vector_29+0x13e>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    233e:	80 91 df 02 	lds	r24, 0x02DF
    2342:	90 91 e0 02 	lds	r25, 0x02E0
    2346:	48 0f       	add	r20, r24
    2348:	59 1f       	adc	r21, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    234a:	56 95       	lsr	r21
    234c:	47 95       	ror	r20
    234e:	50 93 e0 02 	sts	0x02E0, r21
    2352:	40 93 df 02 	sts	0x02DF, r20
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    2356:	90 91 d4 04 	lds	r25, 0x04D4
    235a:	92 30       	cpi	r25, 0x02	; 2
    235c:	09 f4       	brne	.+2      	; 0x2360 <__vector_29+0x148>
    235e:	b5 cf       	rjmp	.-150    	; 0x22ca <__vector_29+0xb2>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    2360:	91 30       	cpi	r25, 0x01	; 1
    2362:	09 f4       	brne	.+2      	; 0x2366 <__vector_29+0x14e>
    2364:	34 c1       	rjmp	.+616    	; 0x25ce <__vector_29+0x3b6>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    2366:	99 23       	and	r25, r25
    2368:	09 f0       	breq	.+2      	; 0x236c <__vector_29+0x154>
    236a:	bc cf       	rjmp	.-136    	; 0x22e4 <__vector_29+0xcc>
		switch(adcSamplingState) {
    236c:	90 91 b6 02 	lds	r25, 0x02B6
    2370:	92 30       	cpi	r25, 0x02	; 2
    2372:	09 f4       	brne	.+2      	; 0x2376 <__vector_29+0x15e>
    2374:	32 c3       	rjmp	.+1636   	; 0x29da <__vector_29+0x7c2>
    2376:	93 30       	cpi	r25, 0x03	; 3
    2378:	08 f0       	brcs	.+2      	; 0x237c <__vector_29+0x164>
    237a:	d5 c1       	rjmp	.+938    	; 0x2726 <__vector_29+0x50e>
    237c:	99 23       	and	r25, r25
    237e:	09 f4       	brne	.+2      	; 0x2382 <__vector_29+0x16a>
    2380:	71 c2       	rjmp	.+1250   	; 0x2864 <__vector_29+0x64c>
    2382:	91 30       	cpi	r25, 0x01	; 1
    2384:	09 f0       	breq	.+2      	; 0x2388 <__vector_29+0x170>
    2386:	b0 cf       	rjmp	.-160    	; 0x22e8 <__vector_29+0xd0>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    2388:	80 91 21 02 	lds	r24, 0x0221
    238c:	80 93 1f 02 	sts	0x021F, r24
				leftChannelPhase = leftMotorPhase;
    2390:	80 91 24 02 	lds	r24, 0x0224
    2394:	80 93 b8 02 	sts	0x02B8, r24
				adcSaveDataTo = SAVE_TO_PROX;
    2398:	10 92 b5 02 	sts	0x02B5, r1
				adcSamplingState = 2;
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	80 93 b6 02 	sts	0x02B6, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    23a2:	10 91 d2 04 	lds	r17, 0x04D2
    23a6:	11 30       	cpi	r17, 0x01	; 1
    23a8:	09 f4       	brne	.+2      	; 0x23ac <__vector_29+0x194>
    23aa:	10 c4       	rjmp	.+2080   	; 0x2bcc <__vector_29+0x9b4>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    23ac:	12 30       	cpi	r17, 0x02	; 2
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <__vector_29+0x19a>
    23b0:	99 cf       	rjmp	.-206    	; 0x22e4 <__vector_29+0xcc>
    23b2:	80 91 20 02 	lds	r24, 0x0220
    23b6:	87 31       	cpi	r24, 0x17	; 23
    23b8:	09 f0       	breq	.+2      	; 0x23bc <__vector_29+0x1a4>
    23ba:	94 cf       	rjmp	.-216    	; 0x22e4 <__vector_29+0xcc>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    23bc:	10 93 d4 04 	sts	0x04D4, r17
					if(irCommTxByteEnqueued==1) {
    23c0:	80 91 26 05 	lds	r24, 0x0526
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	09 f4       	brne	.+2      	; 0x23ca <__vector_29+0x1b2>
    23c8:	94 c2       	rjmp	.+1320   	; 0x28f2 <__vector_29+0x6da>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    23ca:	10 92 d4 04 	sts	0x04D4, r1
    23ce:	90 91 b6 02 	lds	r25, 0x02B6
    23d2:	8a cf       	rjmp	.-236    	; 0x22e8 <__vector_29+0xd0>


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
		clockTick = 0;
    23d4:	10 92 4c 04 	sts	0x044C, r1
    23d8:	10 92 4d 04 	sts	0x044D, r1
    23dc:	10 92 4e 04 	sts	0x044E, r1
    23e0:	10 92 4f 04 	sts	0x044F, r1
    23e4:	49 cf       	rjmp	.-366    	; 0x2278 <__vector_29+0x60>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    23e6:	60 91 20 02 	lds	r22, 0x0220
    23ea:	6e 30       	cpi	r22, 0x0E	; 14
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <__vector_29+0x1d8>
    23ee:	d1 c2       	rjmp	.+1442   	; 0x2992 <__vector_29+0x77a>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    23f0:	e6 2f       	mov	r30, r22
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	df 01       	movw	r26, r30
    23f6:	aa 0f       	add	r26, r26
    23f8:	bb 1f       	adc	r27, r27
    23fa:	ab 5d       	subi	r26, 0xDB	; 219
    23fc:	bd 4f       	sbci	r27, 0xFD	; 253
    23fe:	11 96       	adiw	r26, 0x01	; 1
    2400:	5c 93       	st	X, r21
    2402:	4e 93       	st	-X, r20
			}

			if(currentProx & 0x01) {
    2404:	60 ff       	sbrs	r22, 0
    2406:	72 c0       	rjmp	.+228    	; 0x24ec <__vector_29+0x2d4>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    2408:	ee 0f       	add	r30, r30
    240a:	ff 1f       	adc	r31, r31
    240c:	ed 5d       	subi	r30, 0xDD	; 221
    240e:	fd 4f       	sbci	r31, 0xFD	; 253
    2410:	40 81       	ld	r20, Z
    2412:	51 81       	ldd	r21, Z+1	; 0x01
    2414:	2d 91       	ld	r18, X+
    2416:	3c 91       	ld	r19, X
    2418:	86 2f       	mov	r24, r22
    241a:	86 95       	lsr	r24
    241c:	a8 2f       	mov	r26, r24
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	42 1b       	sub	r20, r18
    2422:	53 0b       	sbc	r21, r19
    2424:	aa 0f       	add	r26, r26
    2426:	bb 1f       	adc	r27, r27
    2428:	fd 01       	movw	r30, r26
    242a:	e3 59       	subi	r30, 0x93	; 147
    242c:	fd 4f       	sbci	r31, 0xFD	; 253
    242e:	80 81       	ld	r24, Z
    2430:	91 81       	ldd	r25, Z+1	; 0x01
    2432:	48 1b       	sub	r20, r24
    2434:	59 0b       	sbc	r21, r25
    2436:	fd 01       	movw	r30, r26
    2438:	eb 5a       	subi	r30, 0xAB	; 171
    243a:	fd 4f       	sbci	r31, 0xFD	; 253
    243c:	51 83       	std	Z+1, r21	; 0x01
    243e:	40 83       	st	Z, r20
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    2440:	57 fd       	sbrc	r21, 7
    2442:	e8 c2       	rjmp	.+1488   	; 0x2a14 <__vector_29+0x7fc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    2444:	41 50       	subi	r20, 0x01	; 1
    2446:	54 40       	sbci	r21, 0x04	; 4
    2448:	24 f0       	brlt	.+8      	; 0x2452 <__vector_29+0x23a>
					proximityResult[currentProx>>1] = 1024;
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	94 e0       	ldi	r25, 0x04	; 4
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    2452:	60 31       	cpi	r22, 0x10	; 16
    2454:	70 f4       	brcc	.+28     	; 0x2472 <__vector_29+0x25a>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    2456:	fd 01       	movw	r30, r26
    2458:	eb 5a       	subi	r30, 0xAB	; 171
    245a:	fd 4f       	sbci	r31, 0xFD	; 253
    245c:	01 90       	ld	r0, Z+
    245e:	f0 81       	ld	r31, Z
    2460:	e0 2d       	mov	r30, r0
    2462:	ec 33       	cpi	r30, 0x3C	; 60
    2464:	f1 05       	cpc	r31, r1
    2466:	0c f0       	brlt	.+2      	; 0x246a <__vector_29+0x252>
    2468:	f4 c2       	rjmp	.+1512   	; 0x2a52 <__vector_29+0x83a>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    246a:	a3 54       	subi	r26, 0x43	; 67
    246c:	bd 4f       	sbci	r27, 0xFD	; 253
    246e:	ed 93       	st	X+, r30
    2470:	fc 93       	st	X, r31
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    2472:	80 91 75 04 	lds	r24, 0x0475
    2476:	88 23       	and	r24, r24
    2478:	09 f4       	brne	.+2      	; 0x247c <__vector_29+0x264>
    247a:	06 c2       	rjmp	.+1036   	; 0x2888 <__vector_29+0x670>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    247c:	80 91 65 02 	lds	r24, 0x0265
    2480:	90 91 66 02 	lds	r25, 0x0266
    2484:	84 5a       	subi	r24, 0xA4	; 164
    2486:	91 40       	sbci	r25, 0x01	; 1
    2488:	b4 f0       	brlt	.+44     	; 0x24b6 <__vector_29+0x29e>
    248a:	80 91 67 02 	lds	r24, 0x0267
    248e:	90 91 68 02 	lds	r25, 0x0268
    2492:	84 5a       	subi	r24, 0xA4	; 164
    2494:	91 40       	sbci	r25, 0x01	; 1
    2496:	7c f0       	brlt	.+30     	; 0x24b6 <__vector_29+0x29e>
    2498:	80 91 69 02 	lds	r24, 0x0269
    249c:	90 91 6a 02 	lds	r25, 0x026A
    24a0:	84 5a       	subi	r24, 0xA4	; 164
    24a2:	91 40       	sbci	r25, 0x01	; 1
    24a4:	44 f0       	brlt	.+16     	; 0x24b6 <__vector_29+0x29e>
    24a6:	80 91 6b 02 	lds	r24, 0x026B
    24aa:	90 91 6c 02 	lds	r25, 0x026C
    24ae:	84 5a       	subi	r24, 0xA4	; 164
    24b0:	91 40       	sbci	r25, 0x01	; 1
    24b2:	0c f0       	brlt	.+2      	; 0x24b6 <__vector_29+0x29e>
    24b4:	e9 c1       	rjmp	.+978    	; 0x2888 <__vector_29+0x670>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	80 93 76 04 	sts	0x0476, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    24bc:	10 92 f4 02 	sts	0x02F4, r1
    24c0:	10 92 f3 02 	sts	0x02F3, r1
						OCR4A = 0;
    24c4:	10 92 a9 00 	sts	0x00A9, r1
    24c8:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    24cc:	10 92 ab 00 	sts	0x00AB, r1
    24d0:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    24d4:	10 92 f2 02 	sts	0x02F2, r1
    24d8:	10 92 f1 02 	sts	0x02F1, r1
						OCR3A = 0;
    24dc:	10 92 99 00 	sts	0x0099, r1
    24e0:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    24e4:	10 92 9b 00 	sts	0x009B, r1
    24e8:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    24ec:	86 2f       	mov	r24, r22
    24ee:	8f 5f       	subi	r24, 0xFF	; 255
    24f0:	80 93 20 02 	sts	0x0220, r24
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    24f4:	88 31       	cpi	r24, 0x18	; 24
    24f6:	08 f4       	brcc	.+2      	; 0x24fa <__vector_29+0x2e2>
    24f8:	2e cf       	rjmp	.-420    	; 0x2356 <__vector_29+0x13e>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    24fa:	10 92 20 02 	sts	0x0220, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	80 93 bc 02 	sts	0x02BC, r24
    2504:	28 cf       	rjmp	.-432    	; 0x2356 <__vector_29+0x13e>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2506:	86 30       	cpi	r24, 0x06	; 6
    2508:	09 f0       	breq	.+2      	; 0x250c <__vector_29+0x2f4>
    250a:	25 cf       	rjmp	.-438    	; 0x2356 <__vector_29+0x13e>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    250c:	80 91 02 05 	lds	r24, 0x0502
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	20 91 20 02 	lds	r18, 0x0220
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	82 0f       	add	r24, r18
    2524:	91 1d       	adc	r25, r1
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	e0 91 6b 08 	lds	r30, 0x086B
    252e:	f0 91 6c 08 	lds	r31, 0x086C
    2532:	e8 0f       	add	r30, r24
    2534:	f9 1f       	adc	r31, r25
    2536:	51 83       	std	Z+1, r21	; 0x01
    2538:	40 83       	st	Z, r20
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    253a:	20 91 20 02 	lds	r18, 0x0220
    253e:	82 2f       	mov	r24, r18
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	e0 91 39 0b 	lds	r30, 0x0B39
    254a:	f0 91 3a 0b 	lds	r31, 0x0B3A
    254e:	e8 0f       	add	r30, r24
    2550:	f9 1f       	adc	r31, r25
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	84 17       	cp	r24, r20
    2558:	95 07       	cpc	r25, r21
    255a:	20 f4       	brcc	.+8      	; 0x2564 <__vector_29+0x34c>
				irCommMaxSensorValueAdc[currentProx] = value;
    255c:	51 83       	std	Z+1, r21	; 0x01
    255e:	40 83       	st	Z, r20
    2560:	20 91 20 02 	lds	r18, 0x0220
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    2564:	82 2f       	mov	r24, r18
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	88 0f       	add	r24, r24
    256a:	99 1f       	adc	r25, r25
    256c:	e0 91 c9 05 	lds	r30, 0x05C9
    2570:	f0 91 ca 05 	lds	r31, 0x05CA
    2574:	e8 0f       	add	r30, r24
    2576:	f9 1f       	adc	r31, r25
    2578:	80 81       	ld	r24, Z
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	48 17       	cp	r20, r24
    257e:	59 07       	cpc	r21, r25
    2580:	20 f4       	brcc	.+8      	; 0x258a <__vector_29+0x372>
				irCommMinSensorValueAdc[currentProx] = value;
    2582:	51 83       	std	Z+1, r21	; 0x01
    2584:	40 83       	st	Z, r20
    2586:	20 91 20 02 	lds	r18, 0x0220
			}
			currentProx++;
    258a:	2f 5f       	subi	r18, 0xFF	; 255
    258c:	20 93 20 02 	sts	0x0220, r18
    2590:	e2 ce       	rjmp	.-572    	; 0x2356 <__vector_29+0x13e>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    2592:	80 91 7b 00 	lds	r24, 0x007B
    2596:	88 60       	ori	r24, 0x08	; 8
    2598:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + (currentAdChannel-8);
    259c:	80 91 1f 02 	lds	r24, 0x021F
    25a0:	88 5c       	subi	r24, 0xC8	; 200
    25a2:	80 93 7c 00 	sts	0x007C, r24
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    25a6:	92 30       	cpi	r25, 0x02	; 2
    25a8:	09 f0       	breq	.+2      	; 0x25ac <__vector_29+0x394>
    25aa:	b0 ce       	rjmp	.-672    	; 0x230c <__vector_29+0xf4>
    25ac:	80 91 d4 04 	lds	r24, 0x04D4
    25b0:	88 23       	and	r24, r24
    25b2:	09 f0       	breq	.+2      	; 0x25b6 <__vector_29+0x39e>
    25b4:	ab ce       	rjmp	.-682    	; 0x230c <__vector_29+0xf4>

		if(hardwareRevision == HW_REV_3_0) {
    25b6:	80 91 53 04 	lds	r24, 0x0453
    25ba:	88 23       	and	r24, r24
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <__vector_29+0x3a8>
    25be:	ab c0       	rjmp	.+342    	; 0x2716 <__vector_29+0x4fe>
			PORTJ &= 0xF0;
    25c0:	80 91 05 01 	lds	r24, 0x0105
    25c4:	80 7f       	andi	r24, 0xF0	; 240
    25c6:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    25ca:	12 b8       	out	0x02, r1	; 2
    25cc:	9f ce       	rjmp	.-706    	; 0x230c <__vector_29+0xf4>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    25ce:	20 91 01 05 	lds	r18, 0x0501
    25d2:	26 30       	cpi	r18, 0x06	; 6
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <__vector_29+0x3c0>
    25d6:	4e c2       	rjmp	.+1180   	; 0x2a74 <__vector_29+0x85c>
    25d8:	27 30       	cpi	r18, 0x07	; 7
    25da:	08 f0       	brcs	.+2      	; 0x25de <__vector_29+0x3c6>
    25dc:	d4 c0       	rjmp	.+424    	; 0x2786 <__vector_29+0x56e>
    25de:	22 30       	cpi	r18, 0x02	; 2
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <__vector_29+0x3cc>
    25e2:	55 c2       	rjmp	.+1194   	; 0x2a8e <__vector_29+0x876>
    25e4:	23 30       	cpi	r18, 0x03	; 3
    25e6:	08 f4       	brcc	.+2      	; 0x25ea <__vector_29+0x3d2>
    25e8:	70 c1       	rjmp	.+736    	; 0x28ca <__vector_29+0x6b2>
    25ea:	24 30       	cpi	r18, 0x04	; 4
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <__vector_29+0x3d8>
    25ee:	d5 c2       	rjmp	.+1450   	; 0x2b9a <__vector_29+0x982>
    25f0:	25 30       	cpi	r18, 0x05	; 5
    25f2:	08 f4       	brcc	.+2      	; 0x25f6 <__vector_29+0x3de>
    25f4:	c4 c2       	rjmp	.+1416   	; 0x2b7e <__vector_29+0x966>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    25f6:	80 91 20 02 	lds	r24, 0x0220
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	80 93 1f 02 	sts	0x021F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2600:	86 e0       	ldi	r24, 0x06	; 6
    2602:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 6;
    2606:	80 93 01 05 	sts	0x0501, r24
    260a:	90 91 b6 02 	lds	r25, 0x02B6
    260e:	6c ce       	rjmp	.-808    	; 0x22e8 <__vector_29+0xd0>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    2610:	80 91 05 02 	lds	r24, 0x0205
    2614:	88 23       	and	r24, r24
    2616:	09 f4       	brne	.+2      	; 0x261a <__vector_29+0x402>
    2618:	9e ce       	rjmp	.-708    	; 0x2356 <__vector_29+0x13e>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    261a:	63 99       	sbic	0x0c, 3	; 12
    261c:	9c ce       	rjmp	.-712    	; 0x2356 <__vector_29+0x13e>
    261e:	64 99       	sbic	0x0c, 4	; 12
    2620:	9a ce       	rjmp	.-716    	; 0x2356 <__vector_29+0x13e>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    2622:	28 2f       	mov	r18, r24
    2624:	2f 5f       	subi	r18, 0xFF	; 255
    2626:	20 93 05 02 	sts	0x0205, r18
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    262a:	25 30       	cpi	r18, 0x05	; 5
    262c:	08 f4       	brcc	.+2      	; 0x2630 <__vector_29+0x418>
    262e:	93 ce       	rjmp	.-730    	; 0x2356 <__vector_29+0x13e>
					if(pwm_right != 0) {
    2630:	80 91 f1 02 	lds	r24, 0x02F1
    2634:	90 91 f2 02 	lds	r25, 0x02F2
    2638:	89 2b       	or	r24, r25
    263a:	51 f0       	breq	.+20     	; 0x2650 <__vector_29+0x438>
						right_vel_sum += value;
    263c:	80 91 eb 02 	lds	r24, 0x02EB
    2640:	90 91 ec 02 	lds	r25, 0x02EC
    2644:	84 0f       	add	r24, r20
    2646:	95 1f       	adc	r25, r21
    2648:	90 93 ec 02 	sts	0x02EC, r25
    264c:	80 93 eb 02 	sts	0x02EB, r24
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    2650:	28 30       	cpi	r18, 0x08	; 8
    2652:	09 f0       	breq	.+2      	; 0x2656 <__vector_29+0x43e>
    2654:	80 ce       	rjmp	.-768    	; 0x2356 <__vector_29+0x13e>
						firstSampleRight = 0;
    2656:	10 92 05 02 	sts	0x0205, r1
						compute_right_vel = 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	80 93 04 02 	sts	0x0204, r24
    2660:	7a ce       	rjmp	.-780    	; 0x2356 <__vector_29+0x13e>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    2662:	90 91 06 02 	lds	r25, 0x0206
    2666:	99 23       	and	r25, r25
    2668:	09 f4       	brne	.+2      	; 0x266c <__vector_29+0x454>
    266a:	75 ce       	rjmp	.-790    	; 0x2356 <__vector_29+0x13e>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    266c:	80 91 00 01 	lds	r24, 0x0100
    2670:	83 fd       	sbrc	r24, 3
    2672:	71 ce       	rjmp	.-798    	; 0x2356 <__vector_29+0x13e>
    2674:	80 91 00 01 	lds	r24, 0x0100
    2678:	84 fd       	sbrc	r24, 4
    267a:	6d ce       	rjmp	.-806    	; 0x2356 <__vector_29+0x13e>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    267c:	29 2f       	mov	r18, r25
    267e:	2f 5f       	subi	r18, 0xFF	; 255
    2680:	20 93 06 02 	sts	0x0206, r18
				if(firstSampleLeft > 4) {
    2684:	25 30       	cpi	r18, 0x05	; 5
    2686:	08 f4       	brcc	.+2      	; 0x268a <__vector_29+0x472>
    2688:	66 ce       	rjmp	.-820    	; 0x2356 <__vector_29+0x13e>
					if(pwm_left != 0) {
    268a:	80 91 f3 02 	lds	r24, 0x02F3
    268e:	90 91 f4 02 	lds	r25, 0x02F4
    2692:	89 2b       	or	r24, r25
    2694:	51 f0       	breq	.+20     	; 0x26aa <__vector_29+0x492>
						left_vel_sum += value;
    2696:	80 91 e9 02 	lds	r24, 0x02E9
    269a:	90 91 ea 02 	lds	r25, 0x02EA
    269e:	84 0f       	add	r24, r20
    26a0:	95 1f       	adc	r25, r21
    26a2:	90 93 ea 02 	sts	0x02EA, r25
    26a6:	80 93 e9 02 	sts	0x02E9, r24
					}
					if(firstSampleLeft==8) {
    26aa:	28 30       	cpi	r18, 0x08	; 8
    26ac:	09 f0       	breq	.+2      	; 0x26b0 <__vector_29+0x498>
    26ae:	53 ce       	rjmp	.-858    	; 0x2356 <__vector_29+0x13e>
						firstSampleLeft = 0;
    26b0:	10 92 06 02 	sts	0x0206, r1
						compute_left_vel = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	80 93 03 02 	sts	0x0203, r24
    26ba:	4d ce       	rjmp	.-870    	; 0x2356 <__vector_29+0x13e>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    26bc:	83 30       	cpi	r24, 0x03	; 3
    26be:	09 f4       	brne	.+2      	; 0x26c2 <__vector_29+0x4aa>
    26c0:	ab c0       	rjmp	.+342    	; 0x2818 <__vector_29+0x600>
    26c2:	84 30       	cpi	r24, 0x04	; 4
    26c4:	09 f0       	breq	.+2      	; 0x26c8 <__vector_29+0x4b0>
    26c6:	0e ce       	rjmp	.-996    	; 0x22e4 <__vector_29+0xcc>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    26c8:	80 91 32 05 	lds	r24, 0x0532
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	80 93 32 05 	sts	0x0532, r24
				if(irCommTxDurationCycle == irCommTxDuration) {
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	20 91 2e 05 	lds	r18, 0x052E
    26d8:	30 91 2f 05 	lds	r19, 0x052F
    26dc:	82 17       	cp	r24, r18
    26de:	93 07       	cpc	r25, r19
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <__vector_29+0x4cc>
    26e2:	0c c1       	rjmp	.+536    	; 0x28fc <__vector_29+0x6e4>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    26e4:	80 91 21 02 	lds	r24, 0x0221
    26e8:	80 93 1f 02 	sts	0x021F, r24
				leftChannelPhase = leftMotorPhase;
    26ec:	80 91 24 02 	lds	r24, 0x0224
    26f0:	80 93 b8 02 	sts	0x02B8, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    26f4:	80 91 b7 02 	lds	r24, 0x02B7
    26f8:	88 23       	and	r24, r24
    26fa:	09 f4       	brne	.+2      	; 0x26fe <__vector_29+0x4e6>
    26fc:	d3 c0       	rjmp	.+422    	; 0x28a4 <__vector_29+0x68c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	09 f4       	brne	.+2      	; 0x2704 <__vector_29+0x4ec>
    2702:	c2 c2       	rjmp	.+1412   	; 0x2c88 <__vector_29+0xa70>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2704:	85 e0       	ldi	r24, 0x05	; 5
    2706:	80 93 b5 02 	sts	0x02B5, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    270a:	83 e0       	ldi	r24, 0x03	; 3
    270c:	80 93 24 05 	sts	0x0524, r24
    2710:	90 91 b6 02 	lds	r25, 0x02B6
    2714:	e9 cd       	rjmp	.-1070   	; 0x22e8 <__vector_29+0xd0>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    2716:	81 30       	cpi	r24, 0x01	; 1
    2718:	09 f0       	breq	.+2      	; 0x271c <__vector_29+0x504>
    271a:	73 c1       	rjmp	.+742    	; 0x2a02 <__vector_29+0x7ea>
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
			PORTJ = 0xFF;
    271c:	8f ef       	ldi	r24, 0xFF	; 255
    271e:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    2722:	12 b8       	out	0x02, r1	; 2
    2724:	f3 cd       	rjmp	.-1050   	; 0x230c <__vector_29+0xf4>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    2726:	93 30       	cpi	r25, 0x03	; 3
    2728:	09 f4       	brne	.+2      	; 0x272c <__vector_29+0x514>
    272a:	43 c1       	rjmp	.+646    	; 0x29b2 <__vector_29+0x79a>
    272c:	94 30       	cpi	r25, 0x04	; 4
    272e:	09 f0       	breq	.+2      	; 0x2732 <__vector_29+0x51a>
    2730:	db cd       	rjmp	.-1098   	; 0x22e8 <__vector_29+0xd0>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    2732:	80 91 22 02 	lds	r24, 0x0222
    2736:	80 93 1f 02 	sts	0x021F, r24
				rightChannelPhase = rightMotorPhase;
    273a:	80 91 23 02 	lds	r24, 0x0223
    273e:	80 93 b7 02 	sts	0x02B7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    2742:	80 91 b8 02 	lds	r24, 0x02B8
    2746:	88 23       	and	r24, r24
    2748:	09 f0       	breq	.+2      	; 0x274c <__vector_29+0x534>
    274a:	75 c1       	rjmp	.+746    	; 0x2a36 <__vector_29+0x81e>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    274c:	83 e0       	ldi	r24, 0x03	; 3
    274e:	80 93 b5 02 	sts	0x02B5, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    2752:	10 92 b6 02 	sts	0x02B6, r1

				if(currentProx==14 && measBattery==1) {
    2756:	20 91 20 02 	lds	r18, 0x0220
    275a:	2e 30       	cpi	r18, 0x0E	; 14
    275c:	09 f4       	brne	.+2      	; 0x2760 <__vector_29+0x548>
    275e:	2b c2       	rjmp	.+1110   	; 0x2bb6 <__vector_29+0x99e>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    2760:	42 2f       	mov	r20, r18
    2762:	50 e0       	ldi	r21, 0x00	; 0
    2764:	20 ff       	sbrs	r18, 0
    2766:	be cd       	rjmp	.-1156   	; 0x22e4 <__vector_29+0xcc>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    2768:	20 31       	cpi	r18, 0x10	; 16
    276a:	08 f0       	brcs	.+2      	; 0x276e <__vector_29+0x556>
    276c:	58 c2       	rjmp	.+1200   	; 0x2c1e <__vector_29+0xa06>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    276e:	26 95       	lsr	r18
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	02 c0       	rjmp	.+4      	; 0x277a <__vector_29+0x562>
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	2a 95       	dec	r18
    277c:	e2 f7       	brpl	.-8      	; 0x2776 <__vector_29+0x55e>
    277e:	82 b9       	out	0x02, r24	; 2
    2780:	90 91 b6 02 	lds	r25, 0x02B6
    2784:	b1 cd       	rjmp	.-1182   	; 0x22e8 <__vector_29+0xd0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    2786:	29 30       	cpi	r18, 0x09	; 9
    2788:	09 f4       	brne	.+2      	; 0x278c <__vector_29+0x574>
    278a:	8f c1       	rjmp	.+798    	; 0x2aaa <__vector_29+0x892>
    278c:	2a 30       	cpi	r18, 0x0A	; 10
    278e:	08 f0       	brcs	.+2      	; 0x2792 <__vector_29+0x57a>
    2790:	8d c0       	rjmp	.+282    	; 0x28ac <__vector_29+0x694>
    2792:	27 30       	cpi	r18, 0x07	; 7
    2794:	09 f4       	brne	.+2      	; 0x2798 <__vector_29+0x580>
    2796:	e2 c1       	rjmp	.+964    	; 0x2b5c <__vector_29+0x944>
    2798:	28 30       	cpi	r18, 0x08	; 8
    279a:	09 f0       	breq	.+2      	; 0x279e <__vector_29+0x586>
    279c:	a3 cd       	rjmp	.-1210   	; 0x22e4 <__vector_29+0xcc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    279e:	80 91 22 02 	lds	r24, 0x0222
    27a2:	80 93 1f 02 	sts	0x021F, r24
				rightChannelPhase = rightMotorPhase;
    27a6:	80 91 23 02 	lds	r24, 0x0223
    27aa:	80 93 b7 02 	sts	0x02B7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    27ae:	80 91 b8 02 	lds	r24, 0x02B8
    27b2:	88 23       	and	r24, r24
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <__vector_29+0x5a0>
    27b6:	7e c2       	rjmp	.+1276   	; 0x2cb4 <__vector_29+0xa9c>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    27b8:	83 e0       	ldi	r24, 0x03	; 3
    27ba:	80 93 b5 02 	sts	0x02B5, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    27be:	89 e0       	ldi	r24, 0x09	; 9
    27c0:	80 93 01 05 	sts	0x0501, r24
    27c4:	90 91 b6 02 	lds	r25, 0x02B6
    27c8:	8f cd       	rjmp	.-1250   	; 0x22e8 <__vector_29+0xd0>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    27ca:	80 91 53 04 	lds	r24, 0x0453
    27ce:	88 23       	and	r24, r24
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <__vector_29+0x5bc>
    27d2:	5d c0       	rjmp	.+186    	; 0x288e <__vector_29+0x676>
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    27d4:	81 30       	cpi	r24, 0x01	; 1
    27d6:	09 f0       	breq	.+2      	; 0x27da <__vector_29+0x5c2>
    27d8:	1e c2       	rjmp	.+1084   	; 0x2c16 <__vector_29+0x9fe>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
    27da:	8f ef       	ldi	r24, 0xFF	; 255
    27dc:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    27e0:	12 b8       	out	0x02, r1	; 2
				}
				currentAdChannel = currentMotLeftChannel;
    27e2:	80 91 21 02 	lds	r24, 0x0221
    27e6:	80 93 1f 02 	sts	0x021F, r24
				leftChannelPhase = leftMotorPhase;
    27ea:	80 91 24 02 	lds	r24, 0x0224
    27ee:	80 93 b8 02 	sts	0x02B8, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    27f2:	85 e0       	ldi	r24, 0x05	; 5
    27f4:	80 93 b5 02 	sts	0x02B5, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    27f8:	80 93 d5 04 	sts	0x04D5, r24
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    27fc:	82 e0       	ldi	r24, 0x02	; 2
    27fe:	80 93 24 05 	sts	0x0524, r24
				if(irCommTxSensorGroup==0) {
    2802:	80 91 34 05 	lds	r24, 0x0534
    2806:	88 23       	and	r24, r24
    2808:	09 f0       	breq	.+2      	; 0x280c <__vector_29+0x5f4>
    280a:	ff c0       	rjmp	.+510    	; 0x2a0a <__vector_29+0x7f2>
					irCommTxSensorGroup = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	80 93 34 05 	sts	0x0534, r24
    2812:	90 91 b6 02 	lds	r25, 0x02B6
    2816:	68 cd       	rjmp	.-1328   	; 0x22e8 <__vector_29+0xd0>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    2818:	80 91 32 05 	lds	r24, 0x0532
    281c:	8f 5f       	subi	r24, 0xFF	; 255
    281e:	80 93 32 05 	sts	0x0532, r24
				if(irCommTxDurationCycle == irCommTxDuration) {
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	20 91 2e 05 	lds	r18, 0x052E
    2828:	30 91 2f 05 	lds	r19, 0x052F
    282c:	82 17       	cp	r24, r18
    282e:	93 07       	cpc	r25, r19
    2830:	09 f4       	brne	.+2      	; 0x2834 <__vector_29+0x61c>
    2832:	93 c0       	rjmp	.+294    	; 0x295a <__vector_29+0x742>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    2834:	80 91 22 02 	lds	r24, 0x0222
    2838:	80 93 1f 02 	sts	0x021F, r24
				rightChannelPhase = rightMotorPhase;
    283c:	80 91 23 02 	lds	r24, 0x0223
    2840:	80 93 b7 02 	sts	0x02B7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    2844:	80 91 b8 02 	lds	r24, 0x02B8
    2848:	88 23       	and	r24, r24
    284a:	41 f1       	breq	.+80     	; 0x289c <__vector_29+0x684>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    284c:	81 30       	cpi	r24, 0x01	; 1
    284e:	09 f4       	brne	.+2      	; 0x2852 <__vector_29+0x63a>
    2850:	1f c2       	rjmp	.+1086   	; 0x2c90 <__vector_29+0xa78>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2852:	85 e0       	ldi	r24, 0x05	; 5
    2854:	80 93 b5 02 	sts	0x02B5, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    2858:	84 e0       	ldi	r24, 0x04	; 4
    285a:	80 93 24 05 	sts	0x0524, r24
    285e:	90 91 b6 02 	lds	r25, 0x02B6
    2862:	42 cd       	rjmp	.-1404   	; 0x22e8 <__vector_29+0xd0>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    2864:	80 91 20 02 	lds	r24, 0x0220
    2868:	86 95       	lsr	r24
    286a:	80 93 1f 02 	sts	0x021F, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    286e:	80 91 b7 02 	lds	r24, 0x02B7
    2872:	88 23       	and	r24, r24
    2874:	09 f0       	breq	.+2      	; 0x2878 <__vector_29+0x660>
    2876:	e6 c0       	rjmp	.+460    	; 0x2a44 <__vector_29+0x82c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	80 93 b5 02 	sts	0x02B5, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	80 93 b6 02 	sts	0x02B6, r24
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	30 cd       	rjmp	.-1440   	; 0x22e8 <__vector_29+0xd0>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    2888:	10 92 76 04 	sts	0x0476, r1
    288c:	2f ce       	rjmp	.-930    	; 0x24ec <__vector_29+0x2d4>
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
    288e:	80 91 05 01 	lds	r24, 0x0105
    2892:	80 7f       	andi	r24, 0xF0	; 240
    2894:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    2898:	12 b8       	out	0x02, r1	; 2
    289a:	a3 cf       	rjmp	.-186    	; 0x27e2 <__vector_29+0x5ca>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    289c:	83 e0       	ldi	r24, 0x03	; 3
    289e:	80 93 b5 02 	sts	0x02B5, r24
    28a2:	da cf       	rjmp	.-76     	; 0x2858 <__vector_29+0x640>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	80 93 b5 02 	sts	0x02B5, r24
    28aa:	2f cf       	rjmp	.-418    	; 0x270a <__vector_29+0x4f2>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    28ac:	2b 30       	cpi	r18, 0x0B	; 11
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <__vector_29+0x69a>
    28b0:	47 c1       	rjmp	.+654    	; 0x2b40 <__vector_29+0x928>
    28b2:	2b 30       	cpi	r18, 0x0B	; 11
    28b4:	08 f4       	brcc	.+2      	; 0x28b8 <__vector_29+0x6a0>
    28b6:	1a c1       	rjmp	.+564    	; 0x2aec <__vector_29+0x8d4>
    28b8:	2c 30       	cpi	r18, 0x0C	; 12
    28ba:	09 f0       	breq	.+2      	; 0x28be <__vector_29+0x6a6>
    28bc:	13 cd       	rjmp	.-1498   	; 0x22e4 <__vector_29+0xcc>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    28be:	85 e0       	ldi	r24, 0x05	; 5
    28c0:	80 93 b5 02 	sts	0x02B5, r24
    28c4:	90 91 b6 02 	lds	r25, 0x02B6
    28c8:	0f cd       	rjmp	.-1506   	; 0x22e8 <__vector_29+0xd0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    28ca:	22 23       	and	r18, r18
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <__vector_29+0x6b8>
    28ce:	02 c1       	rjmp	.+516    	; 0x2ad4 <__vector_29+0x8bc>
    28d0:	21 30       	cpi	r18, 0x01	; 1
    28d2:	09 f0       	breq	.+2      	; 0x28d6 <__vector_29+0x6be>
    28d4:	07 cd       	rjmp	.-1522   	; 0x22e4 <__vector_29+0xcc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    28d6:	80 91 20 02 	lds	r24, 0x0220
    28da:	8f 5f       	subi	r24, 0xFF	; 255
    28dc:	80 93 1f 02 	sts	0x021F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    28e0:	86 e0       	ldi	r24, 0x06	; 6
    28e2:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 2;
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	80 93 01 05 	sts	0x0501, r24
    28ec:	90 91 b6 02 	lds	r25, 0x02B6
    28f0:	fb cc       	rjmp	.-1546   	; 0x22e8 <__vector_29+0xd0>
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    28f2:	80 93 24 05 	sts	0x0524, r24
    28f6:	90 91 b6 02 	lds	r25, 0x02B6
    28fa:	f6 cc       	rjmp	.-1556   	; 0x22e8 <__vector_29+0xd0>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    28fc:	10 92 32 05 	sts	0x0532, r1
					if(irCommTxPulseState == 0) {
    2900:	80 91 2d 05 	lds	r24, 0x052D
    2904:	88 23       	and	r24, r24
    2906:	09 f0       	breq	.+2      	; 0x290a <__vector_29+0x6f2>
    2908:	9f c1       	rjmp	.+830    	; 0x2c48 <__vector_29+0xa30>
						irCommTxPulseState = 1;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	80 93 2d 05 	sts	0x052D, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    2910:	80 91 34 05 	lds	r24, 0x0534
    2914:	88 23       	and	r24, r24
    2916:	09 f0       	breq	.+2      	; 0x291a <__vector_29+0x702>
    2918:	01 c2       	rjmp	.+1026   	; 0x2d1c <__vector_29+0xb04>
							PORTA = 0xAA;
    291a:	8a ea       	ldi	r24, 0xAA	; 170
    291c:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    291e:	80 91 31 05 	lds	r24, 0x0531
    2922:	8f 5f       	subi	r24, 0xFF	; 255
    2924:	80 93 31 05 	sts	0x0531, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    2928:	90 91 30 05 	lds	r25, 0x0530
    292c:	89 17       	cp	r24, r25
    292e:	09 f0       	breq	.+2      	; 0x2932 <__vector_29+0x71a>
    2930:	d9 ce       	rjmp	.-590    	; 0x26e4 <__vector_29+0x4cc>
						irCommTxBitCount++;
    2932:	80 91 2c 05 	lds	r24, 0x052C
    2936:	8f 5f       	subi	r24, 0xFF	; 255
    2938:	80 93 2c 05 	sts	0x052C, r24
						if(irCommTxBitCount==12) {
    293c:	8c 30       	cpi	r24, 0x0C	; 12
    293e:	09 f4       	brne	.+2      	; 0x2942 <__vector_29+0x72a>
    2940:	73 c2       	rjmp	.+1254   	; 0x2e28 <__vector_29+0xc10>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommInitReceiver();
							PORTA = 0x00;
							irCommTxLastTransmissionTime = getTime100MicroSec();
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    2942:	82 e0       	ldi	r24, 0x02	; 2
    2944:	80 93 d5 04 	sts	0x04D5, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    2948:	82 e0       	ldi	r24, 0x02	; 2
    294a:	80 93 24 05 	sts	0x0524, r24
						adcSaveDataTo = SKIP_SAMPLE;
    294e:	85 e0       	ldi	r24, 0x05	; 5
    2950:	80 93 b5 02 	sts	0x02B5, r24
    2954:	90 91 b6 02 	lds	r25, 0x02B6
    2958:	c7 cc       	rjmp	.-1650   	; 0x22e8 <__vector_29+0xd0>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    295a:	10 92 32 05 	sts	0x0532, r1
					if(irCommTxPulseState == 0) {
    295e:	80 91 2d 05 	lds	r24, 0x052D
    2962:	88 23       	and	r24, r24
    2964:	09 f0       	breq	.+2      	; 0x2968 <__vector_29+0x750>
    2966:	74 c1       	rjmp	.+744    	; 0x2c50 <__vector_29+0xa38>
						irCommTxPulseState = 1;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	80 93 2d 05 	sts	0x052D, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    296e:	80 91 34 05 	lds	r24, 0x0534
    2972:	88 23       	and	r24, r24
    2974:	09 f0       	breq	.+2      	; 0x2978 <__vector_29+0x760>
    2976:	d5 c1       	rjmp	.+938    	; 0x2d22 <__vector_29+0xb0a>
							PORTA = 0xAA;
    2978:	8a ea       	ldi	r24, 0xAA	; 170
    297a:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    297c:	80 91 31 05 	lds	r24, 0x0531
    2980:	8f 5f       	subi	r24, 0xFF	; 255
    2982:	80 93 31 05 	sts	0x0531, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    2986:	90 91 30 05 	lds	r25, 0x0530
    298a:	89 17       	cp	r24, r25
    298c:	09 f0       	breq	.+2      	; 0x2990 <__vector_29+0x778>
    298e:	52 cf       	rjmp	.-348    	; 0x2834 <__vector_29+0x61c>
    2990:	d0 cf       	rjmp	.-96     	; 0x2932 <__vector_29+0x71a>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2992:	80 91 bb 02 	lds	r24, 0x02BB
    2996:	82 30       	cpi	r24, 0x02	; 2
    2998:	09 f0       	breq	.+2      	; 0x299c <__vector_29+0x784>
    299a:	2a cd       	rjmp	.-1452   	; 0x23f0 <__vector_29+0x1d8>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    299c:	50 93 ba 02 	sts	0x02BA, r21
    29a0:	40 93 b9 02 	sts	0x02B9, r20
				measBattery = 0;
    29a4:	10 92 bb 02 	sts	0x02BB, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    29a8:	46 98       	cbi	0x08, 6	; 8
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    29aa:	8f e0       	ldi	r24, 0x0F	; 15
    29ac:	80 93 20 02 	sts	0x0220, r24
    29b0:	d2 cc       	rjmp	.-1628   	; 0x2356 <__vector_29+0x13e>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    29b2:	80 91 21 02 	lds	r24, 0x0221
    29b6:	80 93 1f 02 	sts	0x021F, r24
				leftChannelPhase = leftMotorPhase;
    29ba:	80 91 24 02 	lds	r24, 0x0224
    29be:	80 93 b8 02 	sts	0x02B8, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    29c2:	80 91 b7 02 	lds	r24, 0x02B7
    29c6:	88 23       	and	r24, r24
    29c8:	41 f5       	brne	.+80     	; 0x2a1a <__vector_29+0x802>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	80 93 b5 02 	sts	0x02B5, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    29d0:	84 e0       	ldi	r24, 0x04	; 4
    29d2:	80 93 b6 02 	sts	0x02B6, r24
    29d6:	94 e0       	ldi	r25, 0x04	; 4
    29d8:	87 cc       	rjmp	.-1778   	; 0x22e8 <__vector_29+0xd0>
					}
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    29da:	80 91 22 02 	lds	r24, 0x0222
    29de:	80 93 1f 02 	sts	0x021F, r24
				rightChannelPhase = rightMotorPhase;
    29e2:	80 91 23 02 	lds	r24, 0x0223
    29e6:	80 93 b7 02 	sts	0x02B7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    29ea:	80 91 b8 02 	lds	r24, 0x02B8
    29ee:	88 23       	and	r24, r24
    29f0:	d9 f4       	brne	.+54     	; 0x2a28 <__vector_29+0x810>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    29f2:	83 e0       	ldi	r24, 0x03	; 3
    29f4:	80 93 b5 02 	sts	0x02B5, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    29f8:	83 e0       	ldi	r24, 0x03	; 3
    29fa:	80 93 b6 02 	sts	0x02B6, r24
    29fe:	93 e0       	ldi	r25, 0x03	; 3
    2a00:	73 cc       	rjmp	.-1818   	; 0x22e8 <__vector_29+0xd0>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    2a02:	82 30       	cpi	r24, 0x02	; 2
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <__vector_29+0x7f0>
    2a06:	8a ce       	rjmp	.-748    	; 0x271c <__vector_29+0x504>
    2a08:	81 cc       	rjmp	.-1790   	; 0x230c <__vector_29+0xf4>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    2a0a:	10 92 34 05 	sts	0x0534, r1
    2a0e:	90 91 b6 02 	lds	r25, 0x02B6
    2a12:	6a cc       	rjmp	.-1836   	; 0x22e8 <__vector_29+0xd0>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    2a14:	11 82       	std	Z+1, r1	; 0x01
    2a16:	10 82       	st	Z, r1
    2a18:	1c cd       	rjmp	.-1480   	; 0x2452 <__vector_29+0x23a>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <__vector_29+0x808>
    2a1e:	60 c1       	rjmp	.+704    	; 0x2ce0 <__vector_29+0xac8>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2a20:	85 e0       	ldi	r24, 0x05	; 5
    2a22:	80 93 b5 02 	sts	0x02B5, r24
    2a26:	d4 cf       	rjmp	.-88     	; 0x29d0 <__vector_29+0x7b8>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2a28:	81 30       	cpi	r24, 0x01	; 1
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <__vector_29+0x816>
    2a2c:	51 c1       	rjmp	.+674    	; 0x2cd0 <__vector_29+0xab8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2a2e:	85 e0       	ldi	r24, 0x05	; 5
    2a30:	80 93 b5 02 	sts	0x02B5, r24
    2a34:	e1 cf       	rjmp	.-62     	; 0x29f8 <__vector_29+0x7e0>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2a36:	81 30       	cpi	r24, 0x01	; 1
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <__vector_29+0x824>
    2a3a:	56 c1       	rjmp	.+684    	; 0x2ce8 <__vector_29+0xad0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2a3c:	85 e0       	ldi	r24, 0x05	; 5
    2a3e:	80 93 b5 02 	sts	0x02B5, r24
    2a42:	87 ce       	rjmp	.-754    	; 0x2752 <__vector_29+0x53a>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2a44:	81 30       	cpi	r24, 0x01	; 1
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <__vector_29+0x832>
    2a48:	47 c1       	rjmp	.+654    	; 0x2cd8 <__vector_29+0xac0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2a4a:	85 e0       	ldi	r24, 0x05	; 5
    2a4c:	80 93 b5 02 	sts	0x02B5, r24
    2a50:	16 cf       	rjmp	.-468    	; 0x287e <__vector_29+0x666>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    2a52:	cf 01       	movw	r24, r30
    2a54:	cc 96       	adiw	r24, 0x3c	; 60
    2a56:	95 95       	asr	r25
    2a58:	87 95       	ror	r24
    2a5a:	88 37       	cpi	r24, 0x78	; 120
    2a5c:	91 05       	cpc	r25, r1
    2a5e:	0c f0       	brlt	.+2      	; 0x2a62 <__vector_29+0x84a>
    2a60:	fb c0       	rjmp	.+502    	; 0x2c58 <__vector_29+0xa40>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    2a62:	a3 54       	subi	r26, 0x43	; 67
    2a64:	bd 4f       	sbci	r27, 0xFD	; 253
    2a66:	fc 97       	sbiw	r30, 0x3c	; 60
    2a68:	f5 95       	asr	r31
    2a6a:	e7 95       	ror	r30
    2a6c:	fc 96       	adiw	r30, 0x3c	; 60
    2a6e:	ed 93       	st	X+, r30
    2a70:	fc 93       	st	X, r31
    2a72:	ff cc       	rjmp	.-1538   	; 0x2472 <__vector_29+0x25a>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    2a74:	80 91 20 02 	lds	r24, 0x0220
    2a78:	8f 5f       	subi	r24, 0xFF	; 255
    2a7a:	80 93 1f 02 	sts	0x021F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2a7e:	20 93 b5 02 	sts	0x02B5, r18
				irCommAdcRxState = 7;
    2a82:	87 e0       	ldi	r24, 0x07	; 7
    2a84:	80 93 01 05 	sts	0x0501, r24
    2a88:	90 91 b6 02 	lds	r25, 0x02B6
    2a8c:	2d cc       	rjmp	.-1958   	; 0x22e8 <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    2a8e:	80 91 20 02 	lds	r24, 0x0220
    2a92:	8f 5f       	subi	r24, 0xFF	; 255
    2a94:	80 93 1f 02 	sts	0x021F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2a98:	86 e0       	ldi	r24, 0x06	; 6
    2a9a:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 3;
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	80 93 01 05 	sts	0x0501, r24
    2aa4:	90 91 b6 02 	lds	r25, 0x02B6
    2aa8:	1f cc       	rjmp	.-1986   	; 0x22e8 <__vector_29+0xd0>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    2aaa:	80 91 21 02 	lds	r24, 0x0221
    2aae:	80 93 1f 02 	sts	0x021F, r24
				leftChannelPhase = leftMotorPhase;
    2ab2:	80 91 24 02 	lds	r24, 0x0224
    2ab6:	80 93 b8 02 	sts	0x02B8, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    2aba:	80 91 b7 02 	lds	r24, 0x02B7
    2abe:	88 23       	and	r24, r24
    2ac0:	09 f0       	breq	.+2      	; 0x2ac4 <__vector_29+0x8ac>
    2ac2:	f1 c0       	rjmp	.+482    	; 0x2ca6 <__vector_29+0xa8e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2ac4:	90 93 b5 02 	sts	0x02B5, r25
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 10;
    2ac8:	8a e0       	ldi	r24, 0x0A	; 10
    2aca:	80 93 01 05 	sts	0x0501, r24
    2ace:	90 91 b6 02 	lds	r25, 0x02B6
    2ad2:	0a cc       	rjmp	.-2028   	; 0x22e8 <__vector_29+0xd0>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    2ad4:	10 92 20 02 	sts	0x0220, r1
				currentAdChannel = currentProx+1;				
    2ad8:	90 93 1f 02 	sts	0x021F, r25
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2adc:	86 e0       	ldi	r24, 0x06	; 6
    2ade:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 1;
    2ae2:	90 93 01 05 	sts	0x0501, r25
    2ae6:	90 91 b6 02 	lds	r25, 0x02B6
    2aea:	fe cb       	rjmp	.-2052   	; 0x22e8 <__vector_29+0xd0>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    2aec:	80 91 22 02 	lds	r24, 0x0222
    2af0:	80 93 1f 02 	sts	0x021F, r24
				rightChannelPhase = rightMotorPhase;
    2af4:	80 91 23 02 	lds	r24, 0x0223
    2af8:	80 93 b7 02 	sts	0x02B7, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    2afc:	80 91 b8 02 	lds	r24, 0x02B8
    2b00:	88 23       	and	r24, r24
    2b02:	09 f0       	breq	.+2      	; 0x2b06 <__vector_29+0x8ee>
    2b04:	c9 c0       	rjmp	.+402    	; 0x2c98 <__vector_29+0xa80>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2b06:	83 e0       	ldi	r24, 0x03	; 3
    2b08:	80 93 b5 02 	sts	0x02B5, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    2b0c:	80 91 1b 05 	lds	r24, 0x051B
    2b10:	8e 3f       	cpi	r24, 0xFE	; 254
    2b12:	18 f4       	brcc	.+6      	; 0x2b1a <__vector_29+0x902>
					irCommRxBitSkipped++;
    2b14:	8f 5f       	subi	r24, 0xFF	; 255
    2b16:	80 93 1b 05 	sts	0x051B, r24
				}
				irCommRxWindowSamples++;
    2b1a:	90 91 02 05 	lds	r25, 0x0502
    2b1e:	9f 5f       	subi	r25, 0xFF	; 255
    2b20:	90 93 02 05 	sts	0x0502, r25
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    2b24:	80 91 d5 04 	lds	r24, 0x04D5
    2b28:	84 30       	cpi	r24, 0x04	; 4
    2b2a:	09 f4       	brne	.+2      	; 0x2b2e <__vector_29+0x916>
    2b2c:	fd c0       	rjmp	.+506    	; 0x2d28 <__vector_29+0xb10>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    2b2e:	94 31       	cpi	r25, 0x14	; 20
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <__vector_29+0x91c>
    2b32:	16 c1       	rjmp	.+556    	; 0x2d60 <__vector_29+0xb48>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    2b34:	8b e0       	ldi	r24, 0x0B	; 11
    2b36:	80 93 01 05 	sts	0x0501, r24
    2b3a:	90 91 b6 02 	lds	r25, 0x02B6
    2b3e:	d4 cb       	rjmp	.-2136   	; 0x22e8 <__vector_29+0xd0>
				break;

			case 11:
				currentAdChannel = 0;	// prox0
    2b40:	10 92 1f 02 	sts	0x021F, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    2b44:	80 91 b7 02 	lds	r24, 0x02B7
    2b48:	88 23       	and	r24, r24
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <__vector_29+0x936>
    2b4c:	ba c0       	rjmp	.+372    	; 0x2cc2 <__vector_29+0xaaa>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2b4e:	90 93 b5 02 	sts	0x02B5, r25
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 0;
    2b52:	10 92 01 05 	sts	0x0501, r1
    2b56:	90 91 b6 02 	lds	r25, 0x02B6
    2b5a:	c6 cb       	rjmp	.-2164   	; 0x22e8 <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    2b5c:	80 91 21 02 	lds	r24, 0x0221
    2b60:	80 93 1f 02 	sts	0x021F, r24
				leftChannelPhase = leftMotorPhase;
    2b64:	80 91 24 02 	lds	r24, 0x0224
    2b68:	80 93 b8 02 	sts	0x02B8, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2b6c:	86 e0       	ldi	r24, 0x06	; 6
    2b6e:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 8;
    2b72:	88 e0       	ldi	r24, 0x08	; 8
    2b74:	80 93 01 05 	sts	0x0501, r24
    2b78:	90 91 b6 02 	lds	r25, 0x02B6
    2b7c:	b5 cb       	rjmp	.-2198   	; 0x22e8 <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    2b7e:	80 91 20 02 	lds	r24, 0x0220
    2b82:	8f 5f       	subi	r24, 0xFF	; 255
    2b84:	80 93 1f 02 	sts	0x021F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2b88:	86 e0       	ldi	r24, 0x06	; 6
    2b8a:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 4;
    2b8e:	84 e0       	ldi	r24, 0x04	; 4
    2b90:	80 93 01 05 	sts	0x0501, r24
    2b94:	90 91 b6 02 	lds	r25, 0x02B6
    2b98:	a7 cb       	rjmp	.-2226   	; 0x22e8 <__vector_29+0xd0>
				break;

			case 4:
				currentAdChannel = currentProx+1;
    2b9a:	80 91 20 02 	lds	r24, 0x0220
    2b9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ba0:	80 93 1f 02 	sts	0x021F, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    2ba4:	86 e0       	ldi	r24, 0x06	; 6
    2ba6:	80 93 b5 02 	sts	0x02B5, r24
				irCommAdcRxState = 5;
    2baa:	85 e0       	ldi	r24, 0x05	; 5
    2bac:	80 93 01 05 	sts	0x0501, r24
    2bb0:	90 91 b6 02 	lds	r25, 0x02B6
    2bb4:	99 cb       	rjmp	.-2254   	; 0x22e8 <__vector_29+0xd0>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    2bb6:	80 91 bb 02 	lds	r24, 0x02BB
    2bba:	81 30       	cpi	r24, 0x01	; 1
    2bbc:	09 f0       	breq	.+2      	; 0x2bc0 <__vector_29+0x9a8>
    2bbe:	d0 cd       	rjmp	.-1120   	; 0x2760 <__vector_29+0x548>
					measBattery=2;
    2bc0:	82 e0       	ldi	r24, 0x02	; 2
    2bc2:	80 93 bb 02 	sts	0x02BB, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    2bc6:	46 9a       	sbi	0x08, 6	; 8
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	8e cb       	rjmp	.-2276   	; 0x22e8 <__vector_29+0xd0>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    2bcc:	80 91 20 02 	lds	r24, 0x0220
    2bd0:	87 31       	cpi	r24, 0x17	; 23
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <__vector_29+0x9be>
    2bd4:	eb cb       	rjmp	.-2090   	; 0x23ac <__vector_29+0x194>
					currentAdChannel = 0;	// prox0					
    2bd6:	10 92 1f 02 	sts	0x021F, r1
					measBattery = 0;
    2bda:	10 92 bb 02 	sts	0x02BB, r1
					irCommAdcRxState = 0;					
    2bde:	10 92 01 05 	sts	0x0501, r1
					irCommRxWindowSamples = 0;
    2be2:	10 92 02 05 	sts	0x0502, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    2be6:	e0 91 39 0b 	lds	r30, 0x0B39
    2bea:	f0 91 3a 0b 	lds	r31, 0x0B3A
    2bee:	80 e1       	ldi	r24, 0x10	; 16
    2bf0:	df 01       	movw	r26, r30
    2bf2:	1d 92       	st	X+, r1
    2bf4:	8a 95       	dec	r24
    2bf6:	e9 f7       	brne	.-6      	; 0x2bf2 <__vector_29+0x9da>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    2bf8:	80 91 c9 05 	lds	r24, 0x05C9
    2bfc:	90 91 ca 05 	lds	r25, 0x05CA
    2c00:	6f ef       	ldi	r22, 0xFF	; 255
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	40 e1       	ldi	r20, 0x10	; 16
    2c06:	50 e0       	ldi	r21, 0x00	; 0
    2c08:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;					
    2c0c:	10 93 d4 04 	sts	0x04D4, r17
    2c10:	10 91 d2 04 	lds	r17, 0x04D2
    2c14:	cb cb       	rjmp	.-2154   	; 0x23ac <__vector_29+0x194>
				if(hardwareRevision == HW_REV_3_0_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    2c16:	82 30       	cpi	r24, 0x02	; 2
    2c18:	09 f4       	brne	.+2      	; 0x2c1c <__vector_29+0xa04>
    2c1a:	df cd       	rjmp	.-1090   	; 0x27da <__vector_29+0x5c2>
    2c1c:	e2 cd       	rjmp	.-1084   	; 0x27e2 <__vector_29+0x5ca>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    2c1e:	80 91 53 04 	lds	r24, 0x0453
    2c22:	88 23       	and	r24, r24
    2c24:	09 f0       	breq	.+2      	; 0x2c28 <__vector_29+0xa10>
    2c26:	63 c0       	rjmp	.+198    	; 0x2cee <__vector_29+0xad6>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    2c28:	40 51       	subi	r20, 0x10	; 16
    2c2a:	50 40       	sbci	r21, 0x00	; 0
    2c2c:	55 95       	asr	r21
    2c2e:	47 95       	ror	r20
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <__vector_29+0xa22>
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	4a 95       	dec	r20
    2c3c:	e2 f7       	brpl	.-8      	; 0x2c36 <__vector_29+0xa1e>
    2c3e:	80 93 05 01 	sts	0x0105, r24
    2c42:	90 91 b6 02 	lds	r25, 0x02B6
    2c46:	50 cb       	rjmp	.-2400   	; 0x22e8 <__vector_29+0xd0>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    2c48:	10 92 2d 05 	sts	0x052D, r1
						PORTA = 0x00;
    2c4c:	12 b8       	out	0x02, r1	; 2
    2c4e:	67 ce       	rjmp	.-818    	; 0x291e <__vector_29+0x706>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    2c50:	10 92 2d 05 	sts	0x052D, r1
						PORTA = 0x00;
    2c54:	12 b8       	out	0x02, r1	; 2
    2c56:	92 ce       	rjmp	.-732    	; 0x297c <__vector_29+0x764>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    2c58:	cf 01       	movw	r24, r30
    2c5a:	84 5d       	subi	r24, 0xD4	; 212
    2c5c:	9e 4f       	sbci	r25, 0xFE	; 254
    2c5e:	95 95       	asr	r25
    2c60:	87 95       	ror	r24
    2c62:	95 95       	asr	r25
    2c64:	87 95       	ror	r24
    2c66:	84 3b       	cpi	r24, 0xB4	; 180
    2c68:	91 05       	cpc	r25, r1
    2c6a:	0c f0       	brlt	.+2      	; 0x2c6e <__vector_29+0xa56>
    2c6c:	6a c0       	rjmp	.+212    	; 0x2d42 <__vector_29+0xb2a>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    2c6e:	a3 54       	subi	r26, 0x43	; 67
    2c70:	bd 4f       	sbci	r27, 0xFD	; 253
    2c72:	e4 5b       	subi	r30, 0xB4	; 180
    2c74:	f0 40       	sbci	r31, 0x00	; 0
    2c76:	f5 95       	asr	r31
    2c78:	e7 95       	ror	r30
    2c7a:	f5 95       	asr	r31
    2c7c:	e7 95       	ror	r30
    2c7e:	e8 58       	subi	r30, 0x88	; 136
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	ed 93       	st	X+, r30
    2c84:	fc 93       	st	X, r31
    2c86:	f5 cb       	rjmp	.-2070   	; 0x2472 <__vector_29+0x25a>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	80 93 b5 02 	sts	0x02B5, r24
    2c8e:	3d cd       	rjmp	.-1414   	; 0x270a <__vector_29+0x4f2>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2c90:	84 e0       	ldi	r24, 0x04	; 4
    2c92:	80 93 b5 02 	sts	0x02B5, r24
    2c96:	e0 cd       	rjmp	.-1088   	; 0x2858 <__vector_29+0x640>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2c98:	81 30       	cpi	r24, 0x01	; 1
    2c9a:	09 f4       	brne	.+2      	; 0x2c9e <__vector_29+0xa86>
    2c9c:	c1 c0       	rjmp	.+386    	; 0x2e20 <__vector_29+0xc08>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2c9e:	85 e0       	ldi	r24, 0x05	; 5
    2ca0:	80 93 b5 02 	sts	0x02B5, r24
    2ca4:	33 cf       	rjmp	.-410    	; 0x2b0c <__vector_29+0x8f4>
			case 9:
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2ca6:	81 30       	cpi	r24, 0x01	; 1
    2ca8:	09 f4       	brne	.+2      	; 0x2cac <__vector_29+0xa94>
    2caa:	ae c0       	rjmp	.+348    	; 0x2e08 <__vector_29+0xbf0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2cac:	85 e0       	ldi	r24, 0x05	; 5
    2cae:	80 93 b5 02 	sts	0x02B5, r24
    2cb2:	0a cf       	rjmp	.-492    	; 0x2ac8 <__vector_29+0x8b0>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    2cb4:	81 30       	cpi	r24, 0x01	; 1
    2cb6:	09 f4       	brne	.+2      	; 0x2cba <__vector_29+0xaa2>
    2cb8:	ab c0       	rjmp	.+342    	; 0x2e10 <__vector_29+0xbf8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2cba:	85 e0       	ldi	r24, 0x05	; 5
    2cbc:	80 93 b5 02 	sts	0x02B5, r24
    2cc0:	7e cd       	rjmp	.-1284   	; 0x27be <__vector_29+0x5a6>

			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    2cc2:	81 30       	cpi	r24, 0x01	; 1
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <__vector_29+0xab0>
    2cc6:	a8 c0       	rjmp	.+336    	; 0x2e18 <__vector_29+0xc00>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    2cc8:	85 e0       	ldi	r24, 0x05	; 5
    2cca:	80 93 b5 02 	sts	0x02B5, r24
    2cce:	41 cf       	rjmp	.-382    	; 0x2b52 <__vector_29+0x93a>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2cd0:	84 e0       	ldi	r24, 0x04	; 4
    2cd2:	80 93 b5 02 	sts	0x02B5, r24
    2cd6:	90 ce       	rjmp	.-736    	; 0x29f8 <__vector_29+0x7e0>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	80 93 b5 02 	sts	0x02B5, r24
    2cde:	cf cd       	rjmp	.-1122   	; 0x287e <__vector_29+0x666>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	80 93 b5 02 	sts	0x02B5, r24
    2ce6:	74 ce       	rjmp	.-792    	; 0x29d0 <__vector_29+0x7b8>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2ce8:	90 93 b5 02 	sts	0x02B5, r25
    2cec:	32 cd       	rjmp	.-1436   	; 0x2752 <__vector_29+0x53a>
					} else {
						if(hardwareRevision == HW_REV_3_0) {
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    2cee:	81 30       	cpi	r24, 0x01	; 1
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <__vector_29+0xadc>
    2cf2:	b1 c0       	rjmp	.+354    	; 0x2e56 <__vector_29+0xc3e>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2cf4:	20 91 05 01 	lds	r18, 0x0105
    2cf8:	40 51       	subi	r20, 0x10	; 16
    2cfa:	50 40       	sbci	r21, 0x00	; 0
    2cfc:	55 95       	asr	r21
    2cfe:	47 95       	ror	r20
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	02 c0       	rjmp	.+4      	; 0x2d0a <__vector_29+0xaf2>
    2d06:	88 0f       	add	r24, r24
    2d08:	99 1f       	adc	r25, r25
    2d0a:	4a 95       	dec	r20
    2d0c:	e2 f7       	brpl	.-8      	; 0x2d06 <__vector_29+0xaee>
    2d0e:	80 95       	com	r24
    2d10:	82 23       	and	r24, r18
    2d12:	80 93 05 01 	sts	0x0105, r24
    2d16:	90 91 b6 02 	lds	r25, 0x02B6
    2d1a:	e6 ca       	rjmp	.-2612   	; 0x22e8 <__vector_29+0xd0>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    2d1c:	85 e5       	ldi	r24, 0x55	; 85
    2d1e:	82 b9       	out	0x02, r24	; 2
    2d20:	fe cd       	rjmp	.-1028   	; 0x291e <__vector_29+0x706>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    2d22:	85 e5       	ldi	r24, 0x55	; 85
    2d24:	82 b9       	out	0x02, r24	; 2
    2d26:	2a ce       	rjmp	.-940    	; 0x297c <__vector_29+0x764>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    2d28:	10 92 02 05 	sts	0x0502, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    2d2c:	90 91 1b 05 	lds	r25, 0x051B
    2d30:	80 91 0c 05 	lds	r24, 0x050C
    2d34:	98 17       	cp	r25, r24
    2d36:	08 f4       	brcc	.+2      	; 0x2d3a <__vector_29+0xb22>
    2d38:	fd ce       	rjmp	.-518    	; 0x2b34 <__vector_29+0x91c>
						irCommState = IRCOMM_RX_WAITING_BIT;
    2d3a:	85 e0       	ldi	r24, 0x05	; 5
    2d3c:	80 93 d5 04 	sts	0x04D5, r24
    2d40:	f9 ce       	rjmp	.-526    	; 0x2b34 <__vector_29+0x91c>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    2d42:	a3 54       	subi	r26, 0x43	; 67
    2d44:	bd 4f       	sbci	r27, 0xFD	; 253
    2d46:	e4 5a       	subi	r30, 0xA4	; 164
    2d48:	f1 40       	sbci	r31, 0x01	; 1
    2d4a:	f5 95       	asr	r31
    2d4c:	e7 95       	ror	r30
    2d4e:	f5 95       	asr	r31
    2d50:	e7 95       	ror	r30
    2d52:	f5 95       	asr	r31
    2d54:	e7 95       	ror	r30
    2d56:	ec 54       	subi	r30, 0x4C	; 76
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	ed 93       	st	X+, r30
    2d5c:	fc 93       	st	X, r31
    2d5e:	89 cb       	rjmp	.-2286   	; 0x2472 <__vector_29+0x25a>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    2d60:	10 92 02 05 	sts	0x0502, r1
					irCommTempPointer = irCommProxValuesCurr;
    2d64:	20 91 4f 08 	lds	r18, 0x084F
    2d68:	30 91 50 08 	lds	r19, 0x0850
					irCommProxValuesCurr = irCommProxValuesAdc;
    2d6c:	80 91 6b 08 	lds	r24, 0x086B
    2d70:	90 91 6c 08 	lds	r25, 0x086C
    2d74:	90 93 50 08 	sts	0x0850, r25
    2d78:	80 93 4f 08 	sts	0x084F, r24
					irCommProxValuesAdc = irCommTempPointer;
    2d7c:	30 93 6c 08 	sts	0x086C, r19
    2d80:	20 93 6b 08 	sts	0x086B, r18
					irCommTempPointer = irCommMaxSensorValueCurr;
    2d84:	40 91 4c 05 	lds	r20, 0x054C
    2d88:	50 91 4d 05 	lds	r21, 0x054D
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    2d8c:	80 91 39 0b 	lds	r24, 0x0B39
    2d90:	90 91 3a 0b 	lds	r25, 0x0B3A
    2d94:	90 93 4d 05 	sts	0x054D, r25
    2d98:	80 93 4c 05 	sts	0x054C, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    2d9c:	40 93 39 0b 	sts	0x0B39, r20
    2da0:	50 93 3a 0b 	sts	0x0B3A, r21
					irCommTempPointer = irCommMinSensorValueCurr;
    2da4:	20 91 38 05 	lds	r18, 0x0538
    2da8:	30 91 39 05 	lds	r19, 0x0539
    2dac:	30 93 7b 0b 	sts	0x0B7B, r19
    2db0:	20 93 7a 0b 	sts	0x0B7A, r18
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    2db4:	80 91 c9 05 	lds	r24, 0x05C9
    2db8:	90 91 ca 05 	lds	r25, 0x05CA
    2dbc:	90 93 39 05 	sts	0x0539, r25
    2dc0:	80 93 38 05 	sts	0x0538, r24
					irCommMinSensorValueAdc = irCommTempPointer;
    2dc4:	30 93 ca 05 	sts	0x05CA, r19
    2dc8:	20 93 c9 05 	sts	0x05C9, r18
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    2dcc:	fa 01       	movw	r30, r20
    2dce:	80 e1       	ldi	r24, 0x10	; 16
    2dd0:	df 01       	movw	r26, r30
    2dd2:	1d 92       	st	X+, r1
    2dd4:	8a 95       	dec	r24
    2dd6:	e9 f7       	brne	.-6      	; 0x2dd2 <__vector_29+0xbba>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    2dd8:	80 91 c9 05 	lds	r24, 0x05C9
    2ddc:	90 91 ca 05 	lds	r25, 0x05CA
    2de0:	6f ef       	ldi	r22, 0xFF	; 255
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	40 e1       	ldi	r20, 0x10	; 16
    2de6:	50 e0       	ldi	r21, 0x00	; 0
    2de8:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    2dec:	80 91 d5 04 	lds	r24, 0x04D5
    2df0:	81 30       	cpi	r24, 0x01	; 1
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <__vector_29+0xbde>
    2df4:	45 c0       	rjmp	.+138    	; 0x2e80 <__vector_29+0xc68>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    2df6:	80 91 d5 04 	lds	r24, 0x04D5
    2dfa:	85 30       	cpi	r24, 0x05	; 5
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <__vector_29+0xbe8>
    2dfe:	9a ce       	rjmp	.-716    	; 0x2b34 <__vector_29+0x91c>
						irCommState = IRCOMM_RX_READ_BIT;
    2e00:	86 e0       	ldi	r24, 0x06	; 6
    2e02:	80 93 d5 04 	sts	0x04D5, r24
    2e06:	96 ce       	rjmp	.-724    	; 0x2b34 <__vector_29+0x91c>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2e08:	82 e0       	ldi	r24, 0x02	; 2
    2e0a:	80 93 b5 02 	sts	0x02B5, r24
    2e0e:	5c ce       	rjmp	.-840    	; 0x2ac8 <__vector_29+0x8b0>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2e10:	84 e0       	ldi	r24, 0x04	; 4
    2e12:	80 93 b5 02 	sts	0x02B5, r24
    2e16:	d3 cc       	rjmp	.-1626   	; 0x27be <__vector_29+0x5a6>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	80 93 b5 02 	sts	0x02B5, r24
    2e1e:	99 ce       	rjmp	.-718    	; 0x2b52 <__vector_29+0x93a>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2e20:	84 e0       	ldi	r24, 0x04	; 4
    2e22:	80 93 b5 02 	sts	0x02B5, r24
    2e26:	72 ce       	rjmp	.-796    	; 0x2b0c <__vector_29+0x8f4>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	80 93 d5 04 	sts	0x04D5, r24
							irCommTxByteEnqueued = 0;
    2e2e:	10 92 26 05 	sts	0x0526, r1
							adcSamplingState = 0;
    2e32:	10 92 b6 02 	sts	0x02B6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    2e36:	10 92 d4 04 	sts	0x04D4, r1
							irCommInitReceiver();
    2e3a:	0e 94 f3 3e 	call	0x7de6	; 0x7de6 <irCommInitReceiver>
							PORTA = 0x00;
    2e3e:	12 b8       	out	0x02, r1	; 2
							irCommTxLastTransmissionTime = getTime100MicroSec();
    2e40:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    2e44:	60 93 27 05 	sts	0x0527, r22
    2e48:	70 93 28 05 	sts	0x0528, r23
    2e4c:	80 93 29 05 	sts	0x0529, r24
    2e50:	90 93 2a 05 	sts	0x052A, r25
    2e54:	79 cd       	rjmp	.-1294   	; 0x2948 <__vector_29+0x730>

						if(hardwareRevision == HW_REV_3_0_1) {
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    2e56:	82 30       	cpi	r24, 0x02	; 2
    2e58:	09 f0       	breq	.+2      	; 0x2e5c <__vector_29+0xc44>
    2e5a:	44 ca       	rjmp	.-2936   	; 0x22e4 <__vector_29+0xcc>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2e5c:	20 91 05 01 	lds	r18, 0x0105
    2e60:	40 51       	subi	r20, 0x10	; 16
    2e62:	50 40       	sbci	r21, 0x00	; 0
    2e64:	55 95       	asr	r21
    2e66:	47 95       	ror	r20
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	02 c0       	rjmp	.+4      	; 0x2e72 <__vector_29+0xc5a>
    2e6e:	88 0f       	add	r24, r24
    2e70:	99 1f       	adc	r25, r25
    2e72:	4a 95       	dec	r20
    2e74:	e2 f7       	brpl	.-8      	; 0x2e6e <__vector_29+0xc56>
    2e76:	80 95       	com	r24
    2e78:	82 23       	and	r24, r18
    2e7a:	80 93 05 01 	sts	0x0105, r24
    2e7e:	32 ca       	rjmp	.-2972   	; 0x22e4 <__vector_29+0xcc>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    2e80:	82 e0       	ldi	r24, 0x02	; 2
    2e82:	80 93 d5 04 	sts	0x04D5, r24
						irCommRxBitSkipped = 0;
    2e86:	10 92 1b 05 	sts	0x051B, r1
    2e8a:	b5 cf       	rjmp	.-150    	; 0x2df6 <__vector_29+0xbde>

00002e8c <initMotors>:

#include "motors.h"

void initMotors() {
    2e8c:	0f 93       	push	r16
    2e8e:	1f 93       	push	r17
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    2e94:	e0 e9       	ldi	r30, 0x90	; 144
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	10 82       	st	Z, r1
	TCCR3B = 0;
    2e9a:	a1 e9       	ldi	r26, 0x91	; 145
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	1c 92       	st	X, r1
	TIMSK3 = 0;
    2ea0:	21 e7       	ldi	r18, 0x71	; 113
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	e9 01       	movw	r28, r18
    2ea6:	18 82       	st	Y, r1
	TCCR4A = 0;
    2ea8:	40 ea       	ldi	r20, 0xA0	; 160
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	ea 01       	movw	r28, r20
    2eae:	18 82       	st	Y, r1
	TCCR4B = 0;
    2eb0:	61 ea       	ldi	r22, 0xA1	; 161
    2eb2:	70 e0       	ldi	r23, 0x00	; 0
    2eb4:	eb 01       	movw	r28, r22
    2eb6:	18 82       	st	Y, r1
	TIMSK4 = 0;
    2eb8:	02 e7       	ldi	r16, 0x72	; 114
    2eba:	10 e0       	ldi	r17, 0x00	; 0
    2ebc:	e8 01       	movw	r28, r16
    2ebe:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    2ec0:	80 81       	ld	r24, Z
    2ec2:	83 68       	ori	r24, 0x83	; 131
    2ec4:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    2ec6:	80 81       	ld	r24, Z
    2ec8:	83 60       	ori	r24, 0x03	; 3
    2eca:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2ecc:	8c 91       	ld	r24, X
    2ece:	8b 60       	ori	r24, 0x0B	; 11
    2ed0:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    2ed2:	80 91 f1 02 	lds	r24, 0x02F1
    2ed6:	90 91 f2 02 	lds	r25, 0x02F2
    2eda:	90 93 99 00 	sts	0x0099, r25
    2ede:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    2ee2:	10 92 9b 00 	sts	0x009B, r1
    2ee6:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    2eea:	d9 01       	movw	r26, r18
    2eec:	8c 91       	ld	r24, X
    2eee:	81 60       	ori	r24, 0x01	; 1
    2ef0:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2ef2:	80 81       	ld	r24, Z
    2ef4:	8f 75       	andi	r24, 0x5F	; 95
    2ef6:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2ef8:	8e b1       	in	r24, 0x0e	; 14
    2efa:	87 7e       	andi	r24, 0xE7	; 231
    2efc:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    2efe:	ea 01       	movw	r28, r20
    2f00:	88 81       	ld	r24, Y
    2f02:	83 68       	ori	r24, 0x83	; 131
    2f04:	88 83       	st	Y, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2f06:	fb 01       	movw	r30, r22
    2f08:	80 81       	ld	r24, Z
    2f0a:	8b 60       	ori	r24, 0x0B	; 11
    2f0c:	80 83       	st	Z, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    2f0e:	80 91 f3 02 	lds	r24, 0x02F3
    2f12:	90 91 f4 02 	lds	r25, 0x02F4
    2f16:	90 93 a9 00 	sts	0x00A9, r25
    2f1a:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    2f1e:	10 92 ab 00 	sts	0x00AB, r1
    2f22:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    2f26:	d8 01       	movw	r26, r16
    2f28:	8c 91       	ld	r24, X
    2f2a:	81 60       	ori	r24, 0x01	; 1
    2f2c:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2f2e:	88 81       	ld	r24, Y
    2f30:	8f 75       	andi	r24, 0x5F	; 95
    2f32:	88 83       	st	Y, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2f34:	e2 e0       	ldi	r30, 0x02	; 2
    2f36:	f1 e0       	ldi	r31, 0x01	; 1
    2f38:	80 81       	ld	r24, Z
    2f3a:	87 7e       	andi	r24, 0xE7	; 231
    2f3c:	80 83       	st	Z, r24


}
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	1f 91       	pop	r17
    2f44:	0f 91       	pop	r16
    2f46:	08 95       	ret

00002f48 <cast_speed>:

signed int cast_speed(signed int vel) {
    2f48:	2e ef       	ldi	r18, 0xFE	; 254
    2f4a:	81 30       	cpi	r24, 0x01	; 1
    2f4c:	92 07       	cpc	r25, r18
    2f4e:	14 f4       	brge	.+4      	; 0x2f54 <cast_speed+0xc>
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	9e ef       	ldi	r25, 0xFE	; 254
    2f54:	9c 01       	movw	r18, r24
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	20 30       	cpi	r18, 0x00	; 0
    2f5a:	38 07       	cpc	r19, r24
    2f5c:	14 f0       	brlt	.+4      	; 0x2f62 <cast_speed+0x1a>
    2f5e:	2f ef       	ldi	r18, 0xFF	; 255
    2f60:	31 e0       	ldi	r19, 0x01	; 1
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    2f62:	c9 01       	movw	r24, r18
    2f64:	08 95       	ret

00002f66 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    2f66:	28 2f       	mov	r18, r24
    2f68:	33 27       	eor	r19, r19
    2f6a:	27 fd       	sbrc	r18, 7
    2f6c:	30 95       	com	r19
    2f6e:	37 fd       	sbrc	r19, 7
    2f70:	29 c0       	rjmp	.+82     	; 0x2fc4 <setLeftSpeed+0x5e>
    2f72:	30 93 0e 03 	sts	0x030E, r19
    2f76:	20 93 0d 03 	sts	0x030D, r18

    if(vel >= 0) {
    2f7a:	87 fd       	sbrc	r24, 7
    2f7c:	1a c0       	rjmp	.+52     	; 0x2fb2 <setLeftSpeed+0x4c>
        pwm_left_desired = speedl;
    2f7e:	30 93 f8 02 	sts	0x02F8, r19
    2f82:	20 93 f7 02 	sts	0x02F7, r18
    2f86:	c9 01       	movw	r24, r18
    } else {
        pwm_left_desired = -(speedl);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2f88:	22 e0       	ldi	r18, 0x02	; 2
    2f8a:	80 30       	cpi	r24, 0x00	; 0
    2f8c:	92 07       	cpc	r25, r18
    2f8e:	3c f0       	brlt	.+14     	; 0x2f9e <setLeftSpeed+0x38>
    2f90:	8f ef       	ldi	r24, 0xFF	; 255
    2f92:	91 e0       	ldi	r25, 0x01	; 1
    2f94:	90 93 f8 02 	sts	0x02F8, r25
    2f98:	80 93 f7 02 	sts	0x02F7, r24
    2f9c:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2f9e:	81 50       	subi	r24, 0x01	; 1
    2fa0:	9e 4f       	sbci	r25, 0xFE	; 254
    2fa2:	34 f4       	brge	.+12     	; 0x2fb0 <setLeftSpeed+0x4a>
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	9e ef       	ldi	r25, 0xFE	; 254
    2fa8:	90 93 f8 02 	sts	0x02F8, r25
    2fac:	80 93 f7 02 	sts	0x02F7, r24
    2fb0:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    2fb2:	88 27       	eor	r24, r24
    2fb4:	99 27       	eor	r25, r25
    2fb6:	82 1b       	sub	r24, r18
    2fb8:	93 0b       	sbc	r25, r19
    2fba:	90 93 f8 02 	sts	0x02F8, r25
    2fbe:	80 93 f7 02 	sts	0x02F7, r24
    2fc2:	e2 cf       	rjmp	.-60     	; 0x2f88 <setLeftSpeed+0x22>
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    2fc4:	30 95       	com	r19
    2fc6:	21 95       	neg	r18
    2fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fca:	d3 cf       	rjmp	.-90     	; 0x2f72 <setLeftSpeed+0xc>

00002fcc <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    2fcc:	28 2f       	mov	r18, r24
    2fce:	33 27       	eor	r19, r19
    2fd0:	27 fd       	sbrc	r18, 7
    2fd2:	30 95       	com	r19
    2fd4:	37 fd       	sbrc	r19, 7
    2fd6:	29 c0       	rjmp	.+82     	; 0x302a <setRightSpeed+0x5e>
    2fd8:	30 93 10 03 	sts	0x0310, r19
    2fdc:	20 93 0f 03 	sts	0x030F, r18

    if(vel >= 0) {
    2fe0:	87 fd       	sbrc	r24, 7
    2fe2:	1a c0       	rjmp	.+52     	; 0x3018 <setRightSpeed+0x4c>
        pwm_right_desired = speedr;
    2fe4:	30 93 f6 02 	sts	0x02F6, r19
    2fe8:	20 93 f5 02 	sts	0x02F5, r18
    2fec:	c9 01       	movw	r24, r18
    } else {
        pwm_right_desired = -(speedr);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2fee:	22 e0       	ldi	r18, 0x02	; 2
    2ff0:	80 30       	cpi	r24, 0x00	; 0
    2ff2:	92 07       	cpc	r25, r18
    2ff4:	3c f0       	brlt	.+14     	; 0x3004 <setRightSpeed+0x38>
    2ff6:	8f ef       	ldi	r24, 0xFF	; 255
    2ff8:	91 e0       	ldi	r25, 0x01	; 1
    2ffa:	90 93 f6 02 	sts	0x02F6, r25
    2ffe:	80 93 f5 02 	sts	0x02F5, r24
    3002:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    3004:	81 50       	subi	r24, 0x01	; 1
    3006:	9e 4f       	sbci	r25, 0xFE	; 254
    3008:	34 f4       	brge	.+12     	; 0x3016 <setRightSpeed+0x4a>
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	9e ef       	ldi	r25, 0xFE	; 254
    300e:	90 93 f6 02 	sts	0x02F6, r25
    3012:	80 93 f5 02 	sts	0x02F5, r24
    3016:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    3018:	88 27       	eor	r24, r24
    301a:	99 27       	eor	r25, r25
    301c:	82 1b       	sub	r24, r18
    301e:	93 0b       	sbc	r25, r19
    3020:	90 93 f6 02 	sts	0x02F6, r25
    3024:	80 93 f5 02 	sts	0x02F5, r24
    3028:	e2 cf       	rjmp	.-60     	; 0x2fee <setRightSpeed+0x22>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    302a:	30 95       	com	r19
    302c:	21 95       	neg	r18
    302e:	3f 4f       	sbci	r19, 0xFF	; 255
    3030:	d3 cf       	rjmp	.-90     	; 0x2fd8 <setRightSpeed+0xc>

00003032 <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    3032:	80 91 55 05 	lds	r24, 0x0555
    3036:	88 23       	and	r24, r24
    3038:	09 f0       	breq	.+2      	; 0x303c <updateOdomData+0xa>
    303a:	3f c0       	rjmp	.+126    	; 0x30ba <updateOdomData+0x88>
        if(calibVelIndex>1) {
    303c:	e0 91 bd 08 	lds	r30, 0x08BD
    3040:	e2 30       	cpi	r30, 0x02	; 2
    3042:	08 f4       	brcc	.+2      	; 0x3046 <updateOdomData+0x14>
    3044:	77 c0       	rjmp	.+238    	; 0x3134 <updateOdomData+0x102>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    3046:	4e 2f       	mov	r20, r30
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	fa 01       	movw	r30, r20
    304c:	ee 0f       	add	r30, r30
    304e:	ff 1f       	adc	r31, r31
    3050:	ee 0f       	add	r30, r30
    3052:	ff 1f       	adc	r31, r31
    3054:	ee 0f       	add	r30, r30
    3056:	ff 1f       	adc	r31, r31
    3058:	ee 0f       	add	r30, r30
    305a:	ff 1f       	adc	r31, r31
    305c:	ea 53       	subi	r30, 0x3A	; 58
    305e:	f7 4f       	sbci	r31, 0xF7	; 247
    3060:	80 81       	ld	r24, Z
    3062:	91 81       	ldd	r25, Z+1	; 0x01
    3064:	20 91 78 0b 	lds	r18, 0x0B78
    3068:	30 91 79 0b 	lds	r19, 0x0B79
    306c:	82 17       	cp	r24, r18
    306e:	93 07       	cpc	r25, r19
    3070:	34 f0       	brlt	.+12     	; 0x307e <updateOdomData+0x4c>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    3072:	01 96       	adiw	r24, 0x01	; 1
    3074:	90 93 79 0b 	sts	0x0B79, r25
    3078:	80 93 78 0b 	sts	0x0B78, r24
    307c:	9c 01       	movw	r18, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    307e:	fa 01       	movw	r30, r20
    3080:	31 97       	sbiw	r30, 0x01	; 1
    3082:	df 01       	movw	r26, r30
    3084:	a2 95       	swap	r26
    3086:	b2 95       	swap	r27
    3088:	b0 7f       	andi	r27, 0xF0	; 240
    308a:	ba 27       	eor	r27, r26
    308c:	a0 7f       	andi	r26, 0xF0	; 240
    308e:	ba 27       	eor	r27, r26
    3090:	ac 51       	subi	r26, 0x1C	; 28
    3092:	b7 4f       	sbci	r27, 0xF7	; 247
    3094:	80 91 bc 04 	lds	r24, 0x04BC
    3098:	90 91 bd 04 	lds	r25, 0x04BD
    309c:	8d 93       	st	X+, r24
    309e:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][1] = tempVel;
    30a0:	ee 0f       	add	r30, r30
    30a2:	ff 1f       	adc	r31, r31
    30a4:	ee 0f       	add	r30, r30
    30a6:	ff 1f       	adc	r31, r31
    30a8:	ee 0f       	add	r30, r30
    30aa:	ff 1f       	adc	r31, r31
    30ac:	ee 0f       	add	r30, r30
    30ae:	ff 1f       	adc	r31, r31
    30b0:	ea 51       	subi	r30, 0x1A	; 26
    30b2:	f7 4f       	sbci	r31, 0xF7	; 247
    30b4:	31 83       	std	Z+1, r19	; 0x01
    30b6:	20 83       	st	Z, r18
    30b8:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    30ba:	81 30       	cpi	r24, 0x01	; 1
    30bc:	31 f0       	breq	.+12     	; 0x30ca <updateOdomData+0x98>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    30be:	82 30       	cpi	r24, 0x02	; 2
    30c0:	09 f4       	brne	.+2      	; 0x30c4 <updateOdomData+0x92>
    30c2:	70 c0       	rjmp	.+224    	; 0x31a4 <updateOdomData+0x172>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    30c4:	83 30       	cpi	r24, 0x03	; 3
    30c6:	e9 f1       	breq	.+122    	; 0x3142 <updateOdomData+0x110>
    30c8:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    30ca:	e0 91 bd 08 	lds	r30, 0x08BD
    30ce:	e2 30       	cpi	r30, 0x02	; 2
    30d0:	08 f4       	brcc	.+2      	; 0x30d4 <updateOdomData+0xa2>
    30d2:	9e c0       	rjmp	.+316    	; 0x3210 <updateOdomData+0x1de>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    30d4:	4e 2f       	mov	r20, r30
    30d6:	50 e0       	ldi	r21, 0x00	; 0
    30d8:	fa 01       	movw	r30, r20
    30da:	e2 95       	swap	r30
    30dc:	f2 95       	swap	r31
    30de:	f0 7f       	andi	r31, 0xF0	; 240
    30e0:	fe 27       	eor	r31, r30
    30e2:	e0 7f       	andi	r30, 0xF0	; 240
    30e4:	fe 27       	eor	r31, r30
    30e6:	ec 53       	subi	r30, 0x3C	; 60
    30e8:	f7 4f       	sbci	r31, 0xF7	; 247
    30ea:	86 81       	ldd	r24, Z+6	; 0x06
    30ec:	97 81       	ldd	r25, Z+7	; 0x07
    30ee:	20 91 78 0b 	lds	r18, 0x0B78
    30f2:	30 91 79 0b 	lds	r19, 0x0B79
    30f6:	82 17       	cp	r24, r18
    30f8:	93 07       	cpc	r25, r19
    30fa:	34 f0       	brlt	.+12     	; 0x3108 <updateOdomData+0xd6>
                tempVel = calibration[calibVelIndex-2][3]+1;
    30fc:	01 96       	adiw	r24, 0x01	; 1
    30fe:	90 93 79 0b 	sts	0x0B79, r25
    3102:	80 93 78 0b 	sts	0x0B78, r24
    3106:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    3108:	fa 01       	movw	r30, r20
    310a:	31 97       	sbiw	r30, 0x01	; 1
    310c:	e2 95       	swap	r30
    310e:	f2 95       	swap	r31
    3110:	f0 7f       	andi	r31, 0xF0	; 240
    3112:	fe 27       	eor	r31, r30
    3114:	e0 7f       	andi	r30, 0xF0	; 240
    3116:	fe 27       	eor	r31, r30
    3118:	df 01       	movw	r26, r30
    311a:	a8 51       	subi	r26, 0x18	; 24
    311c:	b7 4f       	sbci	r27, 0xF7	; 247
    311e:	80 91 be 04 	lds	r24, 0x04BE
    3122:	90 91 bf 04 	lds	r25, 0x04BF
    3126:	8d 93       	st	X+, r24
    3128:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][3] = tempVel;
    312a:	ec 51       	subi	r30, 0x1C	; 28
    312c:	f7 4f       	sbci	r31, 0xF7	; 247
    312e:	37 83       	std	Z+7, r19	; 0x07
    3130:	26 83       	std	Z+6, r18	; 0x06
    3132:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    3134:	4e 2f       	mov	r20, r30
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	20 91 78 0b 	lds	r18, 0x0B78
    313c:	30 91 79 0b 	lds	r19, 0x0B79
    3140:	9e cf       	rjmp	.-196    	; 0x307e <updateOdomData+0x4c>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    3142:	e0 91 bd 08 	lds	r30, 0x08BD
    3146:	e2 30       	cpi	r30, 0x02	; 2
    3148:	08 f4       	brcc	.+2      	; 0x314c <updateOdomData+0x11a>
    314a:	70 c0       	rjmp	.+224    	; 0x322c <updateOdomData+0x1fa>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    314c:	4e 2f       	mov	r20, r30
    314e:	50 e0       	ldi	r21, 0x00	; 0
    3150:	fa 01       	movw	r30, r20
    3152:	e2 95       	swap	r30
    3154:	f2 95       	swap	r31
    3156:	f0 7f       	andi	r31, 0xF0	; 240
    3158:	fe 27       	eor	r31, r30
    315a:	e0 7f       	andi	r30, 0xF0	; 240
    315c:	fe 27       	eor	r31, r30
    315e:	ec 53       	subi	r30, 0x3C	; 60
    3160:	f7 4f       	sbci	r31, 0xF7	; 247
    3162:	86 85       	ldd	r24, Z+14	; 0x0e
    3164:	97 85       	ldd	r25, Z+15	; 0x0f
    3166:	20 91 78 0b 	lds	r18, 0x0B78
    316a:	30 91 79 0b 	lds	r19, 0x0B79
    316e:	82 17       	cp	r24, r18
    3170:	93 07       	cpc	r25, r19
    3172:	34 f0       	brlt	.+12     	; 0x3180 <updateOdomData+0x14e>
                tempVel = calibration[calibVelIndex-2][7]+1;
    3174:	01 96       	adiw	r24, 0x01	; 1
    3176:	90 93 79 0b 	sts	0x0B79, r25
    317a:	80 93 78 0b 	sts	0x0B78, r24
    317e:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    3180:	fa 01       	movw	r30, r20
    3182:	e2 95       	swap	r30
    3184:	f2 95       	swap	r31
    3186:	f0 7f       	andi	r31, 0xF0	; 240
    3188:	fe 27       	eor	r31, r30
    318a:	e0 7f       	andi	r30, 0xF0	; 240
    318c:	fe 27       	eor	r31, r30
    318e:	ec 52       	subi	r30, 0x2C	; 44
    3190:	f7 4f       	sbci	r31, 0xF7	; 247
    3192:	80 91 be 04 	lds	r24, 0x04BE
    3196:	90 91 bf 04 	lds	r25, 0x04BF
    319a:	95 87       	std	Z+13, r25	; 0x0d
    319c:	84 87       	std	Z+12, r24	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    319e:	37 87       	std	Z+15, r19	; 0x0f
    31a0:	26 87       	std	Z+14, r18	; 0x0e
    31a2:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    31a4:	e0 91 bd 08 	lds	r30, 0x08BD
    31a8:	e2 30       	cpi	r30, 0x02	; 2
    31aa:	c8 f1       	brcs	.+114    	; 0x321e <updateOdomData+0x1ec>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    31ac:	4e 2f       	mov	r20, r30
    31ae:	50 e0       	ldi	r21, 0x00	; 0
    31b0:	fa 01       	movw	r30, r20
    31b2:	e2 95       	swap	r30
    31b4:	f2 95       	swap	r31
    31b6:	f0 7f       	andi	r31, 0xF0	; 240
    31b8:	fe 27       	eor	r31, r30
    31ba:	e0 7f       	andi	r30, 0xF0	; 240
    31bc:	fe 27       	eor	r31, r30
    31be:	ec 53       	subi	r30, 0x3C	; 60
    31c0:	f7 4f       	sbci	r31, 0xF7	; 247
    31c2:	82 85       	ldd	r24, Z+10	; 0x0a
    31c4:	93 85       	ldd	r25, Z+11	; 0x0b
    31c6:	20 91 78 0b 	lds	r18, 0x0B78
    31ca:	30 91 79 0b 	lds	r19, 0x0B79
    31ce:	82 17       	cp	r24, r18
    31d0:	93 07       	cpc	r25, r19
    31d2:	34 f0       	brlt	.+12     	; 0x31e0 <updateOdomData+0x1ae>
                tempVel = calibration[calibVelIndex-2][5]+1;
    31d4:	01 96       	adiw	r24, 0x01	; 1
    31d6:	90 93 79 0b 	sts	0x0B79, r25
    31da:	80 93 78 0b 	sts	0x0B78, r24
    31de:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    31e0:	fa 01       	movw	r30, r20
    31e2:	31 97       	sbiw	r30, 0x01	; 1
    31e4:	ee 0f       	add	r30, r30
    31e6:	ff 1f       	adc	r31, r31
    31e8:	ee 0f       	add	r30, r30
    31ea:	ff 1f       	adc	r31, r31
    31ec:	ee 0f       	add	r30, r30
    31ee:	ff 1f       	adc	r31, r31
    31f0:	ee 0f       	add	r30, r30
    31f2:	ff 1f       	adc	r31, r31
    31f4:	df 01       	movw	r26, r30
    31f6:	a4 51       	subi	r26, 0x14	; 20
    31f8:	b7 4f       	sbci	r27, 0xF7	; 247
    31fa:	80 91 bc 04 	lds	r24, 0x04BC
    31fe:	90 91 bd 04 	lds	r25, 0x04BD
    3202:	8d 93       	st	X+, r24
    3204:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][5] = tempVel;
    3206:	ec 51       	subi	r30, 0x1C	; 28
    3208:	f7 4f       	sbci	r31, 0xF7	; 247
    320a:	33 87       	std	Z+11, r19	; 0x0b
    320c:	22 87       	std	Z+10, r18	; 0x0a
    320e:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    3210:	4e 2f       	mov	r20, r30
    3212:	50 e0       	ldi	r21, 0x00	; 0
    3214:	20 91 78 0b 	lds	r18, 0x0B78
    3218:	30 91 79 0b 	lds	r19, 0x0B79
    321c:	75 cf       	rjmp	.-278    	; 0x3108 <updateOdomData+0xd6>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    321e:	4e 2f       	mov	r20, r30
    3220:	50 e0       	ldi	r21, 0x00	; 0
    3222:	20 91 78 0b 	lds	r18, 0x0B78
    3226:	30 91 79 0b 	lds	r19, 0x0B79
    322a:	da cf       	rjmp	.-76     	; 0x31e0 <updateOdomData+0x1ae>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    322c:	4e 2f       	mov	r20, r30
    322e:	50 e0       	ldi	r21, 0x00	; 0
    3230:	20 91 78 0b 	lds	r18, 0x0B78
    3234:	30 91 79 0b 	lds	r19, 0x0B79
    3238:	a3 cf       	rjmp	.-186    	; 0x3180 <updateOdomData+0x14e>

0000323a <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    323a:	8f 92       	push	r8
    323c:	9f 92       	push	r9
    323e:	af 92       	push	r10
    3240:	bf 92       	push	r11
    3242:	cf 92       	push	r12
    3244:	df 92       	push	r13
    3246:	ef 92       	push	r14
    3248:	ff 92       	push	r15
    324a:	0f 93       	push	r16
    324c:	1f 93       	push	r17
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
    3252:	46 2f       	mov	r20, r22
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    3254:	9c 01       	movw	r18, r24
    3256:	22 0f       	add	r18, r18
    3258:	33 1f       	adc	r19, r19
    325a:	22 0f       	add	r18, r18
    325c:	33 1f       	adc	r19, r19
    325e:	28 0f       	add	r18, r24
    3260:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    3262:	21 15       	cp	r18, r1
    3264:	31 05       	cpc	r19, r1
    3266:	09 f4       	brne	.+2      	; 0x326a <getInputFromSpeed+0x30>
    3268:	92 c0       	rjmp	.+292    	; 0x338e <getInputFromSpeed+0x154>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    326a:	86 2f       	mov	r24, r22
    326c:	82 50       	subi	r24, 0x02	; 2
    326e:	82 30       	cpi	r24, 0x02	; 2
    3270:	08 f4       	brcc	.+2      	; 0x3274 <getInputFromSpeed+0x3a>
    3272:	9d c0       	rjmp	.+314    	; 0x33ae <getInputFromSpeed+0x174>
    3274:	44 23       	and	r20, r20
    3276:	09 f0       	breq	.+2      	; 0x327a <getInputFromSpeed+0x40>
    3278:	77 c0       	rjmp	.+238    	; 0x3368 <getInputFromSpeed+0x12e>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    327a:	60 91 e6 08 	lds	r22, 0x08E6
    327e:	70 91 e7 08 	lds	r23, 0x08E7
    3282:	62 17       	cp	r22, r18
    3284:	73 07       	cpc	r23, r19
    3286:	0c f0       	brlt	.+2      	; 0x328a <getInputFromSpeed+0x50>
    3288:	99 c0       	rjmp	.+306    	; 0x33bc <getInputFromSpeed+0x182>
    328a:	80 91 f6 08 	lds	r24, 0x08F6
    328e:	90 91 f7 08 	lds	r25, 0x08F7
    3292:	82 17       	cp	r24, r18
    3294:	93 07       	cpc	r25, r19
    3296:	0c f0       	brlt	.+2      	; 0x329a <getInputFromSpeed+0x60>
    3298:	1e c2       	rjmp	.+1084   	; 0x36d6 <getInputFromSpeed+0x49c>
    329a:	80 91 06 09 	lds	r24, 0x0906
    329e:	90 91 07 09 	lds	r25, 0x0907
    32a2:	82 17       	cp	r24, r18
    32a4:	93 07       	cpc	r25, r19
    32a6:	0c f0       	brlt	.+2      	; 0x32aa <getInputFromSpeed+0x70>
    32a8:	66 c3       	rjmp	.+1740   	; 0x3976 <getInputFromSpeed+0x73c>
    32aa:	80 91 16 09 	lds	r24, 0x0916
    32ae:	90 91 17 09 	lds	r25, 0x0917
    32b2:	82 17       	cp	r24, r18
    32b4:	93 07       	cpc	r25, r19
    32b6:	0c f0       	brlt	.+2      	; 0x32ba <getInputFromSpeed+0x80>
    32b8:	5b c3       	rjmp	.+1718   	; 0x3970 <getInputFromSpeed+0x736>
    32ba:	80 91 26 09 	lds	r24, 0x0926
    32be:	90 91 27 09 	lds	r25, 0x0927
    32c2:	82 17       	cp	r24, r18
    32c4:	93 07       	cpc	r25, r19
    32c6:	0c f0       	brlt	.+2      	; 0x32ca <getInputFromSpeed+0x90>
    32c8:	59 c3       	rjmp	.+1714   	; 0x397c <getInputFromSpeed+0x742>
    32ca:	80 91 36 09 	lds	r24, 0x0936
    32ce:	90 91 37 09 	lds	r25, 0x0937
    32d2:	82 17       	cp	r24, r18
    32d4:	93 07       	cpc	r25, r19
    32d6:	0c f0       	brlt	.+2      	; 0x32da <getInputFromSpeed+0xa0>
    32d8:	54 c3       	rjmp	.+1704   	; 0x3982 <getInputFromSpeed+0x748>
    32da:	80 91 46 09 	lds	r24, 0x0946
    32de:	90 91 47 09 	lds	r25, 0x0947
    32e2:	82 17       	cp	r24, r18
    32e4:	93 07       	cpc	r25, r19
    32e6:	0c f0       	brlt	.+2      	; 0x32ea <getInputFromSpeed+0xb0>
    32e8:	52 c3       	rjmp	.+1700   	; 0x398e <getInputFromSpeed+0x754>
    32ea:	80 91 56 09 	lds	r24, 0x0956
    32ee:	90 91 57 09 	lds	r25, 0x0957
    32f2:	82 17       	cp	r24, r18
    32f4:	93 07       	cpc	r25, r19
    32f6:	0c f0       	brlt	.+2      	; 0x32fa <getInputFromSpeed+0xc0>
    32f8:	47 c3       	rjmp	.+1678   	; 0x3988 <getInputFromSpeed+0x74e>
    32fa:	80 91 66 09 	lds	r24, 0x0966
    32fe:	90 91 67 09 	lds	r25, 0x0967
    3302:	82 17       	cp	r24, r18
    3304:	93 07       	cpc	r25, r19
    3306:	0c f0       	brlt	.+2      	; 0x330a <getInputFromSpeed+0xd0>
    3308:	45 c3       	rjmp	.+1674   	; 0x3994 <getInputFromSpeed+0x75a>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    330a:	b9 01       	movw	r22, r18
    330c:	88 27       	eor	r24, r24
    330e:	77 fd       	sbrc	r23, 7
    3310:	80 95       	com	r24
    3312:	98 2f       	mov	r25, r24
    3314:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3318:	7b 01       	movw	r14, r22
    331a:	8c 01       	movw	r16, r24
    331c:	60 91 64 09 	lds	r22, 0x0964
    3320:	70 91 65 09 	lds	r23, 0x0965
    3324:	88 27       	eor	r24, r24
    3326:	77 fd       	sbrc	r23, 7
    3328:	80 95       	com	r24
    332a:	98 2f       	mov	r25, r24
    332c:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3330:	9b 01       	movw	r18, r22
    3332:	ac 01       	movw	r20, r24
    3334:	c8 01       	movw	r24, r16
    3336:	b7 01       	movw	r22, r14
    3338:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    333c:	7b 01       	movw	r14, r22
    333e:	8c 01       	movw	r16, r24
    3340:	60 91 66 09 	lds	r22, 0x0966
    3344:	70 91 67 09 	lds	r23, 0x0967
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    3348:	88 27       	eor	r24, r24
    334a:	77 fd       	sbrc	r23, 7
    334c:	80 95       	com	r24
    334e:	98 2f       	mov	r25, r24
    3350:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3354:	9b 01       	movw	r18, r22
    3356:	ac 01       	movw	r20, r24
    3358:	c8 01       	movw	r24, r16
    335a:	b7 01       	movw	r22, r14
    335c:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    3360:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    3364:	9b 01       	movw	r18, r22
    3366:	15 c0       	rjmp	.+42     	; 0x3392 <getInputFromSpeed+0x158>
    3368:	43 30       	cpi	r20, 0x03	; 3
    336a:	c1 f1       	breq	.+112    	; 0x33dc <getInputFromSpeed+0x1a2>
    336c:	42 30       	cpi	r20, 0x02	; 2
    336e:	09 f4       	brne	.+2      	; 0x3372 <getInputFromSpeed+0x138>
    3370:	24 c1       	rjmp	.+584    	; 0x35ba <getInputFromSpeed+0x380>
    3372:	41 30       	cpi	r20, 0x01	; 1
    3374:	09 f4       	brne	.+2      	; 0x3378 <getInputFromSpeed+0x13e>
    3376:	ac c0       	rjmp	.+344    	; 0x34d0 <getInputFromSpeed+0x296>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    3378:	44 23       	and	r20, r20
    337a:	39 f2       	breq	.-114    	; 0x330a <getInputFromSpeed+0xd0>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    337c:	41 30       	cpi	r20, 0x01	; 1
    337e:	09 f4       	brne	.+2      	; 0x3382 <getInputFromSpeed+0x148>
    3380:	ef c0       	rjmp	.+478    	; 0x3560 <getInputFromSpeed+0x326>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    3382:	42 30       	cpi	r20, 0x02	; 2
    3384:	09 f4       	brne	.+2      	; 0x3388 <getInputFromSpeed+0x14e>
    3386:	61 c1       	rjmp	.+706    	; 0x364a <getInputFromSpeed+0x410>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    3388:	43 30       	cpi	r20, 0x03	; 3
    338a:	09 f4       	brne	.+2      	; 0x338e <getInputFromSpeed+0x154>
    338c:	6f c0       	rjmp	.+222    	; 0x346c <getInputFromSpeed+0x232>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
            temp = -temp;
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
        }        
    }
    
    return temp;
}
    3392:	c9 01       	movw	r24, r18
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	1f 91       	pop	r17
    339a:	0f 91       	pop	r16
    339c:	ff 90       	pop	r15
    339e:	ef 90       	pop	r14
    33a0:	df 90       	pop	r13
    33a2:	cf 90       	pop	r12
    33a4:	bf 90       	pop	r11
    33a6:	af 90       	pop	r10
    33a8:	9f 90       	pop	r9
    33aa:	8f 90       	pop	r8
    33ac:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    33ae:	30 95       	com	r19
    33b0:	21 95       	neg	r18
    33b2:	3f 4f       	sbci	r19, 0xFF	; 255
    33b4:	44 23       	and	r20, r20
    33b6:	09 f4       	brne	.+2      	; 0x33ba <getInputFromSpeed+0x180>
    33b8:	60 cf       	rjmp	.-320    	; 0x327a <getInputFromSpeed+0x40>
    33ba:	d6 cf       	rjmp	.-84     	; 0x3368 <getInputFromSpeed+0x12e>
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
    33bc:	80 91 e4 08 	lds	r24, 0x08E4
    33c0:	90 91 e5 08 	lds	r25, 0x08E5
    33c4:	ac 01       	movw	r20, r24
    33c6:	24 9f       	mul	r18, r20
    33c8:	c0 01       	movw	r24, r0
    33ca:	25 9f       	mul	r18, r21
    33cc:	90 0d       	add	r25, r0
    33ce:	34 9f       	mul	r19, r20
    33d0:	90 0d       	add	r25, r0
    33d2:	11 24       	eor	r1, r1
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    33d4:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__divmodhi4>
    33d8:	9b 01       	movw	r18, r22
    33da:	db cf       	rjmp	.-74     	; 0x3392 <getInputFromSpeed+0x158>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    33dc:	60 91 f2 08 	lds	r22, 0x08F2
    33e0:	70 91 f3 08 	lds	r23, 0x08F3
    33e4:	62 17       	cp	r22, r18
    33e6:	73 07       	cpc	r23, r19
    33e8:	0c f0       	brlt	.+2      	; 0x33ec <getInputFromSpeed+0x1b2>
    33ea:	62 c1       	rjmp	.+708    	; 0x36b0 <getInputFromSpeed+0x476>
    33ec:	80 91 02 09 	lds	r24, 0x0902
    33f0:	90 91 03 09 	lds	r25, 0x0903
    33f4:	82 17       	cp	r24, r18
    33f6:	93 07       	cpc	r25, r19
    33f8:	0c f0       	brlt	.+2      	; 0x33fc <getInputFromSpeed+0x1c2>
    33fa:	6d c1       	rjmp	.+730    	; 0x36d6 <getInputFromSpeed+0x49c>
    33fc:	80 91 12 09 	lds	r24, 0x0912
    3400:	90 91 13 09 	lds	r25, 0x0913
    3404:	82 17       	cp	r24, r18
    3406:	93 07       	cpc	r25, r19
    3408:	0c f0       	brlt	.+2      	; 0x340c <getInputFromSpeed+0x1d2>
    340a:	b5 c2       	rjmp	.+1386   	; 0x3976 <getInputFromSpeed+0x73c>
    340c:	80 91 22 09 	lds	r24, 0x0922
    3410:	90 91 23 09 	lds	r25, 0x0923
    3414:	82 17       	cp	r24, r18
    3416:	93 07       	cpc	r25, r19
    3418:	0c f0       	brlt	.+2      	; 0x341c <getInputFromSpeed+0x1e2>
    341a:	aa c2       	rjmp	.+1364   	; 0x3970 <getInputFromSpeed+0x736>
    341c:	80 91 32 09 	lds	r24, 0x0932
    3420:	90 91 33 09 	lds	r25, 0x0933
    3424:	82 17       	cp	r24, r18
    3426:	93 07       	cpc	r25, r19
    3428:	0c f0       	brlt	.+2      	; 0x342c <getInputFromSpeed+0x1f2>
    342a:	a8 c2       	rjmp	.+1360   	; 0x397c <getInputFromSpeed+0x742>
    342c:	80 91 42 09 	lds	r24, 0x0942
    3430:	90 91 43 09 	lds	r25, 0x0943
    3434:	82 17       	cp	r24, r18
    3436:	93 07       	cpc	r25, r19
    3438:	0c f0       	brlt	.+2      	; 0x343c <getInputFromSpeed+0x202>
    343a:	a3 c2       	rjmp	.+1350   	; 0x3982 <getInputFromSpeed+0x748>
    343c:	80 91 52 09 	lds	r24, 0x0952
    3440:	90 91 53 09 	lds	r25, 0x0953
    3444:	82 17       	cp	r24, r18
    3446:	93 07       	cpc	r25, r19
    3448:	0c f0       	brlt	.+2      	; 0x344c <getInputFromSpeed+0x212>
    344a:	a1 c2       	rjmp	.+1346   	; 0x398e <getInputFromSpeed+0x754>
    344c:	80 91 62 09 	lds	r24, 0x0962
    3450:	90 91 63 09 	lds	r25, 0x0963
    3454:	82 17       	cp	r24, r18
    3456:	93 07       	cpc	r25, r19
    3458:	0c f0       	brlt	.+2      	; 0x345c <getInputFromSpeed+0x222>
    345a:	96 c2       	rjmp	.+1324   	; 0x3988 <getInputFromSpeed+0x74e>
    345c:	80 91 72 09 	lds	r24, 0x0972
    3460:	90 91 73 09 	lds	r25, 0x0973
    3464:	82 17       	cp	r24, r18
    3466:	93 07       	cpc	r25, r19
    3468:	0c f0       	brlt	.+2      	; 0x346c <getInputFromSpeed+0x232>
    346a:	94 c2       	rjmp	.+1320   	; 0x3994 <getInputFromSpeed+0x75a>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    346c:	b9 01       	movw	r22, r18
    346e:	88 27       	eor	r24, r24
    3470:	77 fd       	sbrc	r23, 7
    3472:	80 95       	com	r24
    3474:	98 2f       	mov	r25, r24
    3476:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    347a:	7b 01       	movw	r14, r22
    347c:	8c 01       	movw	r16, r24
    347e:	60 91 70 09 	lds	r22, 0x0970
    3482:	70 91 71 09 	lds	r23, 0x0971
    3486:	88 27       	eor	r24, r24
    3488:	77 fd       	sbrc	r23, 7
    348a:	80 95       	com	r24
    348c:	98 2f       	mov	r25, r24
    348e:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3492:	9b 01       	movw	r18, r22
    3494:	ac 01       	movw	r20, r24
    3496:	c8 01       	movw	r24, r16
    3498:	b7 01       	movw	r22, r14
    349a:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    349e:	7b 01       	movw	r14, r22
    34a0:	8c 01       	movw	r16, r24
    34a2:	60 91 72 09 	lds	r22, 0x0972
    34a6:	70 91 73 09 	lds	r23, 0x0973
    34aa:	88 27       	eor	r24, r24
    34ac:	77 fd       	sbrc	r23, 7
    34ae:	80 95       	com	r24
    34b0:	98 2f       	mov	r25, r24
    34b2:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    34b6:	9b 01       	movw	r18, r22
    34b8:	ac 01       	movw	r20, r24
    34ba:	c8 01       	movw	r24, r16
    34bc:	b7 01       	movw	r22, r14
    34be:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    34c2:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
            temp = -temp;
    34c6:	22 27       	eor	r18, r18
    34c8:	33 27       	eor	r19, r19
    34ca:	26 1b       	sub	r18, r22
    34cc:	37 0b       	sbc	r19, r23
    34ce:	61 cf       	rjmp	.-318    	; 0x3392 <getInputFromSpeed+0x158>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    34d0:	60 91 ea 08 	lds	r22, 0x08EA
    34d4:	70 91 eb 08 	lds	r23, 0x08EB
    34d8:	62 17       	cp	r22, r18
    34da:	73 07       	cpc	r23, r19
    34dc:	0c f0       	brlt	.+2      	; 0x34e0 <getInputFromSpeed+0x2a6>
    34de:	60 c0       	rjmp	.+192    	; 0x35a0 <getInputFromSpeed+0x366>
    34e0:	80 91 fa 08 	lds	r24, 0x08FA
    34e4:	90 91 fb 08 	lds	r25, 0x08FB
    34e8:	82 17       	cp	r24, r18
    34ea:	93 07       	cpc	r25, r19
    34ec:	0c f0       	brlt	.+2      	; 0x34f0 <getInputFromSpeed+0x2b6>
    34ee:	f3 c0       	rjmp	.+486    	; 0x36d6 <getInputFromSpeed+0x49c>
    34f0:	80 91 0a 09 	lds	r24, 0x090A
    34f4:	90 91 0b 09 	lds	r25, 0x090B
    34f8:	82 17       	cp	r24, r18
    34fa:	93 07       	cpc	r25, r19
    34fc:	0c f0       	brlt	.+2      	; 0x3500 <getInputFromSpeed+0x2c6>
    34fe:	3b c2       	rjmp	.+1142   	; 0x3976 <getInputFromSpeed+0x73c>
    3500:	80 91 1a 09 	lds	r24, 0x091A
    3504:	90 91 1b 09 	lds	r25, 0x091B
    3508:	82 17       	cp	r24, r18
    350a:	93 07       	cpc	r25, r19
    350c:	0c f0       	brlt	.+2      	; 0x3510 <getInputFromSpeed+0x2d6>
    350e:	30 c2       	rjmp	.+1120   	; 0x3970 <getInputFromSpeed+0x736>
    3510:	80 91 2a 09 	lds	r24, 0x092A
    3514:	90 91 2b 09 	lds	r25, 0x092B
    3518:	82 17       	cp	r24, r18
    351a:	93 07       	cpc	r25, r19
    351c:	0c f0       	brlt	.+2      	; 0x3520 <getInputFromSpeed+0x2e6>
    351e:	2e c2       	rjmp	.+1116   	; 0x397c <getInputFromSpeed+0x742>
    3520:	80 91 3a 09 	lds	r24, 0x093A
    3524:	90 91 3b 09 	lds	r25, 0x093B
    3528:	82 17       	cp	r24, r18
    352a:	93 07       	cpc	r25, r19
    352c:	0c f0       	brlt	.+2      	; 0x3530 <getInputFromSpeed+0x2f6>
    352e:	29 c2       	rjmp	.+1106   	; 0x3982 <getInputFromSpeed+0x748>
    3530:	80 91 4a 09 	lds	r24, 0x094A
    3534:	90 91 4b 09 	lds	r25, 0x094B
    3538:	82 17       	cp	r24, r18
    353a:	93 07       	cpc	r25, r19
    353c:	0c f0       	brlt	.+2      	; 0x3540 <getInputFromSpeed+0x306>
    353e:	27 c2       	rjmp	.+1102   	; 0x398e <getInputFromSpeed+0x754>
    3540:	80 91 5a 09 	lds	r24, 0x095A
    3544:	90 91 5b 09 	lds	r25, 0x095B
    3548:	82 17       	cp	r24, r18
    354a:	93 07       	cpc	r25, r19
    354c:	0c f0       	brlt	.+2      	; 0x3550 <getInputFromSpeed+0x316>
    354e:	1c c2       	rjmp	.+1080   	; 0x3988 <getInputFromSpeed+0x74e>
    3550:	80 91 6a 09 	lds	r24, 0x096A
    3554:	90 91 6b 09 	lds	r25, 0x096B
    3558:	82 17       	cp	r24, r18
    355a:	93 07       	cpc	r25, r19
    355c:	0c f0       	brlt	.+2      	; 0x3560 <getInputFromSpeed+0x326>
    355e:	1a c2       	rjmp	.+1076   	; 0x3994 <getInputFromSpeed+0x75a>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    3560:	b9 01       	movw	r22, r18
    3562:	88 27       	eor	r24, r24
    3564:	77 fd       	sbrc	r23, 7
    3566:	80 95       	com	r24
    3568:	98 2f       	mov	r25, r24
    356a:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    356e:	7b 01       	movw	r14, r22
    3570:	8c 01       	movw	r16, r24
    3572:	60 91 68 09 	lds	r22, 0x0968
    3576:	70 91 69 09 	lds	r23, 0x0969
    357a:	88 27       	eor	r24, r24
    357c:	77 fd       	sbrc	r23, 7
    357e:	80 95       	com	r24
    3580:	98 2f       	mov	r25, r24
    3582:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3586:	9b 01       	movw	r18, r22
    3588:	ac 01       	movw	r20, r24
    358a:	c8 01       	movw	r24, r16
    358c:	b7 01       	movw	r22, r14
    358e:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    3592:	7b 01       	movw	r14, r22
    3594:	8c 01       	movw	r16, r24
    3596:	60 91 6a 09 	lds	r22, 0x096A
    359a:	70 91 6b 09 	lds	r23, 0x096B
    359e:	d4 ce       	rjmp	.-600    	; 0x3348 <getInputFromSpeed+0x10e>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    35a0:	80 91 e8 08 	lds	r24, 0x08E8
    35a4:	90 91 e9 08 	lds	r25, 0x08E9
    35a8:	fc 01       	movw	r30, r24
    35aa:	2e 9f       	mul	r18, r30
    35ac:	c0 01       	movw	r24, r0
    35ae:	2f 9f       	mul	r18, r31
    35b0:	90 0d       	add	r25, r0
    35b2:	3e 9f       	mul	r19, r30
    35b4:	90 0d       	add	r25, r0
    35b6:	11 24       	eor	r1, r1
    35b8:	0d cf       	rjmp	.-486    	; 0x33d4 <getInputFromSpeed+0x19a>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    35ba:	60 91 ee 08 	lds	r22, 0x08EE
    35be:	70 91 ef 08 	lds	r23, 0x08EF
    35c2:	62 17       	cp	r22, r18
    35c4:	73 07       	cpc	r23, r19
    35c6:	0c f0       	brlt	.+2      	; 0x35ca <getInputFromSpeed+0x390>
    35c8:	60 c0       	rjmp	.+192    	; 0x368a <getInputFromSpeed+0x450>
    35ca:	80 91 fe 08 	lds	r24, 0x08FE
    35ce:	90 91 ff 08 	lds	r25, 0x08FF
    35d2:	82 17       	cp	r24, r18
    35d4:	93 07       	cpc	r25, r19
    35d6:	0c f0       	brlt	.+2      	; 0x35da <getInputFromSpeed+0x3a0>
    35d8:	7e c0       	rjmp	.+252    	; 0x36d6 <getInputFromSpeed+0x49c>
    35da:	80 91 0e 09 	lds	r24, 0x090E
    35de:	90 91 0f 09 	lds	r25, 0x090F
    35e2:	82 17       	cp	r24, r18
    35e4:	93 07       	cpc	r25, r19
    35e6:	0c f0       	brlt	.+2      	; 0x35ea <getInputFromSpeed+0x3b0>
    35e8:	c6 c1       	rjmp	.+908    	; 0x3976 <getInputFromSpeed+0x73c>
    35ea:	80 91 1e 09 	lds	r24, 0x091E
    35ee:	90 91 1f 09 	lds	r25, 0x091F
    35f2:	82 17       	cp	r24, r18
    35f4:	93 07       	cpc	r25, r19
    35f6:	0c f0       	brlt	.+2      	; 0x35fa <getInputFromSpeed+0x3c0>
    35f8:	bb c1       	rjmp	.+886    	; 0x3970 <getInputFromSpeed+0x736>
    35fa:	80 91 2e 09 	lds	r24, 0x092E
    35fe:	90 91 2f 09 	lds	r25, 0x092F
    3602:	82 17       	cp	r24, r18
    3604:	93 07       	cpc	r25, r19
    3606:	0c f0       	brlt	.+2      	; 0x360a <getInputFromSpeed+0x3d0>
    3608:	b9 c1       	rjmp	.+882    	; 0x397c <getInputFromSpeed+0x742>
    360a:	80 91 3e 09 	lds	r24, 0x093E
    360e:	90 91 3f 09 	lds	r25, 0x093F
    3612:	82 17       	cp	r24, r18
    3614:	93 07       	cpc	r25, r19
    3616:	0c f0       	brlt	.+2      	; 0x361a <getInputFromSpeed+0x3e0>
    3618:	b4 c1       	rjmp	.+872    	; 0x3982 <getInputFromSpeed+0x748>
    361a:	80 91 4e 09 	lds	r24, 0x094E
    361e:	90 91 4f 09 	lds	r25, 0x094F
    3622:	82 17       	cp	r24, r18
    3624:	93 07       	cpc	r25, r19
    3626:	0c f0       	brlt	.+2      	; 0x362a <getInputFromSpeed+0x3f0>
    3628:	b2 c1       	rjmp	.+868    	; 0x398e <getInputFromSpeed+0x754>
    362a:	80 91 5e 09 	lds	r24, 0x095E
    362e:	90 91 5f 09 	lds	r25, 0x095F
    3632:	82 17       	cp	r24, r18
    3634:	93 07       	cpc	r25, r19
    3636:	0c f0       	brlt	.+2      	; 0x363a <getInputFromSpeed+0x400>
    3638:	a7 c1       	rjmp	.+846    	; 0x3988 <getInputFromSpeed+0x74e>
    363a:	80 91 6e 09 	lds	r24, 0x096E
    363e:	90 91 6f 09 	lds	r25, 0x096F
    3642:	82 17       	cp	r24, r18
    3644:	93 07       	cpc	r25, r19
    3646:	0c f0       	brlt	.+2      	; 0x364a <getInputFromSpeed+0x410>
    3648:	a5 c1       	rjmp	.+842    	; 0x3994 <getInputFromSpeed+0x75a>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    364a:	b9 01       	movw	r22, r18
    364c:	88 27       	eor	r24, r24
    364e:	77 fd       	sbrc	r23, 7
    3650:	80 95       	com	r24
    3652:	98 2f       	mov	r25, r24
    3654:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3658:	7b 01       	movw	r14, r22
    365a:	8c 01       	movw	r16, r24
    365c:	60 91 6c 09 	lds	r22, 0x096C
    3660:	70 91 6d 09 	lds	r23, 0x096D
    3664:	88 27       	eor	r24, r24
    3666:	77 fd       	sbrc	r23, 7
    3668:	80 95       	com	r24
    366a:	98 2f       	mov	r25, r24
    366c:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3670:	9b 01       	movw	r18, r22
    3672:	ac 01       	movw	r20, r24
    3674:	c8 01       	movw	r24, r16
    3676:	b7 01       	movw	r22, r14
    3678:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    367c:	7b 01       	movw	r14, r22
    367e:	8c 01       	movw	r16, r24
    3680:	60 91 6e 09 	lds	r22, 0x096E
    3684:	70 91 6f 09 	lds	r23, 0x096F
    3688:	10 cf       	rjmp	.-480    	; 0x34aa <getInputFromSpeed+0x270>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    368a:	80 91 ec 08 	lds	r24, 0x08EC
    368e:	90 91 ed 08 	lds	r25, 0x08ED
    3692:	ac 01       	movw	r20, r24
    3694:	24 9f       	mul	r18, r20
    3696:	c0 01       	movw	r24, r0
    3698:	25 9f       	mul	r18, r21
    369a:	90 0d       	add	r25, r0
    369c:	34 9f       	mul	r19, r20
    369e:	90 0d       	add	r25, r0
    36a0:	11 24       	eor	r1, r1
    36a2:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__divmodhi4>
            temp = -temp;
    36a6:	22 27       	eor	r18, r18
    36a8:	33 27       	eor	r19, r19
    36aa:	26 1b       	sub	r18, r22
    36ac:	37 0b       	sbc	r19, r23
    36ae:	71 ce       	rjmp	.-798    	; 0x3392 <getInputFromSpeed+0x158>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
    36b0:	80 91 f0 08 	lds	r24, 0x08F0
    36b4:	90 91 f1 08 	lds	r25, 0x08F1
    36b8:	fc 01       	movw	r30, r24
    36ba:	2e 9f       	mul	r18, r30
    36bc:	c0 01       	movw	r24, r0
    36be:	2f 9f       	mul	r18, r31
    36c0:	90 0d       	add	r25, r0
    36c2:	3e 9f       	mul	r19, r30
    36c4:	90 0d       	add	r25, r0
    36c6:	11 24       	eor	r1, r1
    36c8:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__divmodhi4>
            temp = -temp;
    36cc:	22 27       	eor	r18, r18
    36ce:	33 27       	eor	r19, r19
    36d0:	26 1b       	sub	r18, r22
    36d2:	37 0b       	sbc	r19, r23
    36d4:	5e ce       	rjmp	.-836    	; 0x3392 <getInputFromSpeed+0x158>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    36d6:	c1 e0       	ldi	r28, 0x01	; 1
    36d8:	d0 e0       	ldi	r29, 0x00	; 0
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    36da:	c9 30       	cpi	r28, 0x09	; 9
    36dc:	d1 05       	cpc	r29, r1
    36de:	09 f4       	brne	.+2      	; 0x36e2 <getInputFromSpeed+0x4a8>
    36e0:	4b ce       	rjmp	.-874    	; 0x3378 <getInputFromSpeed+0x13e>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    36e2:	44 23       	and	r20, r20
    36e4:	09 f0       	breq	.+2      	; 0x36e8 <getInputFromSpeed+0x4ae>
    36e6:	59 c0       	rjmp	.+178    	; 0x379a <getInputFromSpeed+0x560>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    36e8:	fe 01       	movw	r30, r28
    36ea:	31 97       	sbiw	r30, 0x01	; 1
    36ec:	ee 0f       	add	r30, r30
    36ee:	ff 1f       	adc	r31, r31
    36f0:	ee 0f       	add	r30, r30
    36f2:	ff 1f       	adc	r31, r31
    36f4:	ee 0f       	add	r30, r30
    36f6:	ff 1f       	adc	r31, r31
    36f8:	ee 0f       	add	r30, r30
    36fa:	ff 1f       	adc	r31, r31
    36fc:	df 01       	movw	r26, r30
    36fe:	aa 51       	subi	r26, 0x1A	; 26
    3700:	b7 4f       	sbci	r27, 0xF7	; 247
    3702:	cd 90       	ld	r12, X+
    3704:	dc 90       	ld	r13, X
    3706:	ec 51       	subi	r30, 0x1C	; 28
    3708:	f7 4f       	sbci	r31, 0xF7	; 247
    370a:	a0 80       	ld	r10, Z
    370c:	b1 80       	ldd	r11, Z+1	; 0x01
    370e:	2c 19       	sub	r18, r12
    3710:	3d 09       	sbc	r19, r13
    3712:	b9 01       	movw	r22, r18
    3714:	88 27       	eor	r24, r24
    3716:	77 fd       	sbrc	r23, 7
    3718:	80 95       	com	r24
    371a:	98 2f       	mov	r25, r24
    371c:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3720:	7b 01       	movw	r14, r22
    3722:	8c 01       	movw	r16, r24
    3724:	fe 01       	movw	r30, r28
    3726:	e2 95       	swap	r30
    3728:	f2 95       	swap	r31
    372a:	f0 7f       	andi	r31, 0xF0	; 240
    372c:	fe 27       	eor	r31, r30
    372e:	e0 7f       	andi	r30, 0xF0	; 240
    3730:	fe 27       	eor	r31, r30
    3732:	ec 51       	subi	r30, 0x1C	; 28
    3734:	f7 4f       	sbci	r31, 0xF7	; 247
    3736:	60 81       	ld	r22, Z
    3738:	71 81       	ldd	r23, Z+1	; 0x01
    373a:	6a 19       	sub	r22, r10
    373c:	7b 09       	sbc	r23, r11
    373e:	88 27       	eor	r24, r24
    3740:	77 fd       	sbrc	r23, 7
    3742:	80 95       	com	r24
    3744:	98 2f       	mov	r25, r24
    3746:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    374a:	9b 01       	movw	r18, r22
    374c:	ac 01       	movw	r20, r24
    374e:	c8 01       	movw	r24, r16
    3750:	b7 01       	movw	r22, r14
    3752:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    3756:	7b 01       	movw	r14, r22
    3758:	8c 01       	movw	r16, r24
    375a:	cc 0f       	add	r28, r28
    375c:	dd 1f       	adc	r29, r29
    375e:	cc 0f       	add	r28, r28
    3760:	dd 1f       	adc	r29, r29
    3762:	cc 0f       	add	r28, r28
    3764:	dd 1f       	adc	r29, r29
    3766:	cc 0f       	add	r28, r28
    3768:	dd 1f       	adc	r29, r29
    376a:	ca 51       	subi	r28, 0x1A	; 26
    376c:	d7 4f       	sbci	r29, 0xF7	; 247
    376e:	68 81       	ld	r22, Y
    3770:	79 81       	ldd	r23, Y+1	; 0x01
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    3772:	6c 19       	sub	r22, r12
    3774:	7d 09       	sbc	r23, r13
    3776:	88 27       	eor	r24, r24
    3778:	77 fd       	sbrc	r23, 7
    377a:	80 95       	com	r24
    377c:	98 2f       	mov	r25, r24
    377e:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3782:	9b 01       	movw	r18, r22
    3784:	ac 01       	movw	r20, r24
    3786:	c8 01       	movw	r24, r16
    3788:	b7 01       	movw	r22, r14
    378a:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    378e:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    3792:	9b 01       	movw	r18, r22
    3794:	2a 0d       	add	r18, r10
    3796:	3b 1d       	adc	r19, r11
    3798:	fc cd       	rjmp	.-1032   	; 0x3392 <getInputFromSpeed+0x158>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    379a:	41 30       	cpi	r20, 0x01	; 1
    379c:	09 f4       	brne	.+2      	; 0x37a0 <getInputFromSpeed+0x566>
    379e:	4e c0       	rjmp	.+156    	; 0x383c <getInputFromSpeed+0x602>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    37a0:	42 30       	cpi	r20, 0x02	; 2
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <getInputFromSpeed+0x56c>
    37a4:	89 c0       	rjmp	.+274    	; 0x38b8 <getInputFromSpeed+0x67e>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    37a6:	43 30       	cpi	r20, 0x03	; 3
    37a8:	09 f0       	breq	.+2      	; 0x37ac <getInputFromSpeed+0x572>
    37aa:	f1 cd       	rjmp	.-1054   	; 0x338e <getInputFromSpeed+0x154>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    37ac:	c2 95       	swap	r28
    37ae:	d2 95       	swap	r29
    37b0:	d0 7f       	andi	r29, 0xF0	; 240
    37b2:	dc 27       	eor	r29, r28
    37b4:	c0 7f       	andi	r28, 0xF0	; 240
    37b6:	dc 27       	eor	r29, r28
    37b8:	fe 01       	movw	r30, r28
    37ba:	ec 52       	subi	r30, 0x2C	; 44
    37bc:	f7 4f       	sbci	r31, 0xF7	; 247
    37be:	a6 84       	ldd	r10, Z+14	; 0x0e
    37c0:	b7 84       	ldd	r11, Z+15	; 0x0f
    37c2:	84 84       	ldd	r8, Z+12	; 0x0c
    37c4:	95 84       	ldd	r9, Z+13	; 0x0d
    37c6:	2a 19       	sub	r18, r10
    37c8:	3b 09       	sbc	r19, r11
    37ca:	b9 01       	movw	r22, r18
    37cc:	88 27       	eor	r24, r24
    37ce:	77 fd       	sbrc	r23, 7
    37d0:	80 95       	com	r24
    37d2:	98 2f       	mov	r25, r24
    37d4:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    37d8:	6b 01       	movw	r12, r22
    37da:	7c 01       	movw	r14, r24
    37dc:	8e 01       	movw	r16, r28
    37de:	0c 51       	subi	r16, 0x1C	; 28
    37e0:	17 4f       	sbci	r17, 0xF7	; 247
    37e2:	f8 01       	movw	r30, r16
    37e4:	64 85       	ldd	r22, Z+12	; 0x0c
    37e6:	75 85       	ldd	r23, Z+13	; 0x0d
    37e8:	68 19       	sub	r22, r8
    37ea:	79 09       	sbc	r23, r9
    37ec:	88 27       	eor	r24, r24
    37ee:	77 fd       	sbrc	r23, 7
    37f0:	80 95       	com	r24
    37f2:	98 2f       	mov	r25, r24
    37f4:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    37f8:	9b 01       	movw	r18, r22
    37fa:	ac 01       	movw	r20, r24
    37fc:	c7 01       	movw	r24, r14
    37fe:	b6 01       	movw	r22, r12
    3800:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    3804:	6b 01       	movw	r12, r22
    3806:	7c 01       	movw	r14, r24
    3808:	f8 01       	movw	r30, r16
    380a:	66 85       	ldd	r22, Z+14	; 0x0e
    380c:	77 85       	ldd	r23, Z+15	; 0x0f
    380e:	6a 19       	sub	r22, r10
    3810:	7b 09       	sbc	r23, r11
    3812:	88 27       	eor	r24, r24
    3814:	77 fd       	sbrc	r23, 7
    3816:	80 95       	com	r24
    3818:	98 2f       	mov	r25, r24
    381a:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    381e:	9b 01       	movw	r18, r22
    3820:	ac 01       	movw	r20, r24
    3822:	c7 01       	movw	r24, r14
    3824:	b6 01       	movw	r22, r12
    3826:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    382a:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    382e:	68 0d       	add	r22, r8
    3830:	79 1d       	adc	r23, r9
            temp = -temp;
    3832:	22 27       	eor	r18, r18
    3834:	33 27       	eor	r19, r19
    3836:	26 1b       	sub	r18, r22
    3838:	37 0b       	sbc	r19, r23
    383a:	ab cd       	rjmp	.-1194   	; 0x3392 <getInputFromSpeed+0x158>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    383c:	fe 01       	movw	r30, r28
    383e:	31 97       	sbiw	r30, 0x01	; 1
    3840:	e2 95       	swap	r30
    3842:	f2 95       	swap	r31
    3844:	f0 7f       	andi	r31, 0xF0	; 240
    3846:	fe 27       	eor	r31, r30
    3848:	e0 7f       	andi	r30, 0xF0	; 240
    384a:	fe 27       	eor	r31, r30
    384c:	df 01       	movw	r26, r30
    384e:	ac 51       	subi	r26, 0x1C	; 28
    3850:	b7 4f       	sbci	r27, 0xF7	; 247
    3852:	16 96       	adiw	r26, 0x06	; 6
    3854:	cd 90       	ld	r12, X+
    3856:	dc 90       	ld	r13, X
    3858:	17 97       	sbiw	r26, 0x07	; 7
    385a:	e8 51       	subi	r30, 0x18	; 24
    385c:	f7 4f       	sbci	r31, 0xF7	; 247
    385e:	a0 80       	ld	r10, Z
    3860:	b1 80       	ldd	r11, Z+1	; 0x01
    3862:	2c 19       	sub	r18, r12
    3864:	3d 09       	sbc	r19, r13
    3866:	b9 01       	movw	r22, r18
    3868:	88 27       	eor	r24, r24
    386a:	77 fd       	sbrc	r23, 7
    386c:	80 95       	com	r24
    386e:	98 2f       	mov	r25, r24
    3870:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3874:	7b 01       	movw	r14, r22
    3876:	8c 01       	movw	r16, r24
    3878:	c2 95       	swap	r28
    387a:	d2 95       	swap	r29
    387c:	d0 7f       	andi	r29, 0xF0	; 240
    387e:	dc 27       	eor	r29, r28
    3880:	c0 7f       	andi	r28, 0xF0	; 240
    3882:	dc 27       	eor	r29, r28
    3884:	fe 01       	movw	r30, r28
    3886:	e8 51       	subi	r30, 0x18	; 24
    3888:	f7 4f       	sbci	r31, 0xF7	; 247
    388a:	60 81       	ld	r22, Z
    388c:	71 81       	ldd	r23, Z+1	; 0x01
    388e:	6a 19       	sub	r22, r10
    3890:	7b 09       	sbc	r23, r11
    3892:	88 27       	eor	r24, r24
    3894:	77 fd       	sbrc	r23, 7
    3896:	80 95       	com	r24
    3898:	98 2f       	mov	r25, r24
    389a:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    389e:	9b 01       	movw	r18, r22
    38a0:	ac 01       	movw	r20, r24
    38a2:	c8 01       	movw	r24, r16
    38a4:	b7 01       	movw	r22, r14
    38a6:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    38aa:	7b 01       	movw	r14, r22
    38ac:	8c 01       	movw	r16, r24
    38ae:	cc 51       	subi	r28, 0x1C	; 28
    38b0:	d7 4f       	sbci	r29, 0xF7	; 247
    38b2:	6e 81       	ldd	r22, Y+6	; 0x06
    38b4:	7f 81       	ldd	r23, Y+7	; 0x07
    38b6:	5d cf       	rjmp	.-326    	; 0x3772 <getInputFromSpeed+0x538>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    38b8:	de 01       	movw	r26, r28
    38ba:	11 97       	sbiw	r26, 0x01	; 1
    38bc:	fd 01       	movw	r30, r26
    38be:	e2 95       	swap	r30
    38c0:	f2 95       	swap	r31
    38c2:	f0 7f       	andi	r31, 0xF0	; 240
    38c4:	fe 27       	eor	r31, r30
    38c6:	e0 7f       	andi	r30, 0xF0	; 240
    38c8:	fe 27       	eor	r31, r30
    38ca:	ec 51       	subi	r30, 0x1C	; 28
    38cc:	f7 4f       	sbci	r31, 0xF7	; 247
    38ce:	c2 84       	ldd	r12, Z+10	; 0x0a
    38d0:	d3 84       	ldd	r13, Z+11	; 0x0b
    38d2:	aa 0f       	add	r26, r26
    38d4:	bb 1f       	adc	r27, r27
    38d6:	aa 0f       	add	r26, r26
    38d8:	bb 1f       	adc	r27, r27
    38da:	aa 0f       	add	r26, r26
    38dc:	bb 1f       	adc	r27, r27
    38de:	aa 0f       	add	r26, r26
    38e0:	bb 1f       	adc	r27, r27
    38e2:	a4 51       	subi	r26, 0x14	; 20
    38e4:	b7 4f       	sbci	r27, 0xF7	; 247
    38e6:	ad 90       	ld	r10, X+
    38e8:	bc 90       	ld	r11, X
    38ea:	2c 19       	sub	r18, r12
    38ec:	3d 09       	sbc	r19, r13
    38ee:	b9 01       	movw	r22, r18
    38f0:	88 27       	eor	r24, r24
    38f2:	77 fd       	sbrc	r23, 7
    38f4:	80 95       	com	r24
    38f6:	98 2f       	mov	r25, r24
    38f8:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    38fc:	7b 01       	movw	r14, r22
    38fe:	8c 01       	movw	r16, r24
    3900:	cc 0f       	add	r28, r28
    3902:	dd 1f       	adc	r29, r29
    3904:	cc 0f       	add	r28, r28
    3906:	dd 1f       	adc	r29, r29
    3908:	cc 0f       	add	r28, r28
    390a:	dd 1f       	adc	r29, r29
    390c:	cc 0f       	add	r28, r28
    390e:	dd 1f       	adc	r29, r29
    3910:	fe 01       	movw	r30, r28
    3912:	e4 51       	subi	r30, 0x14	; 20
    3914:	f7 4f       	sbci	r31, 0xF7	; 247
    3916:	60 81       	ld	r22, Z
    3918:	71 81       	ldd	r23, Z+1	; 0x01
    391a:	6a 19       	sub	r22, r10
    391c:	7b 09       	sbc	r23, r11
    391e:	88 27       	eor	r24, r24
    3920:	77 fd       	sbrc	r23, 7
    3922:	80 95       	com	r24
    3924:	98 2f       	mov	r25, r24
    3926:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    392a:	9b 01       	movw	r18, r22
    392c:	ac 01       	movw	r20, r24
    392e:	c8 01       	movw	r24, r16
    3930:	b7 01       	movw	r22, r14
    3932:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    3936:	7b 01       	movw	r14, r22
    3938:	8c 01       	movw	r16, r24
    393a:	cc 51       	subi	r28, 0x1C	; 28
    393c:	d7 4f       	sbci	r29, 0xF7	; 247
    393e:	6a 85       	ldd	r22, Y+10	; 0x0a
    3940:	7b 85       	ldd	r23, Y+11	; 0x0b
    3942:	6c 19       	sub	r22, r12
    3944:	7d 09       	sbc	r23, r13
    3946:	88 27       	eor	r24, r24
    3948:	77 fd       	sbrc	r23, 7
    394a:	80 95       	com	r24
    394c:	98 2f       	mov	r25, r24
    394e:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3952:	9b 01       	movw	r18, r22
    3954:	ac 01       	movw	r20, r24
    3956:	c8 01       	movw	r24, r16
    3958:	b7 01       	movw	r22, r14
    395a:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    395e:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    3962:	6a 0d       	add	r22, r10
    3964:	7b 1d       	adc	r23, r11
            temp = -temp;
    3966:	22 27       	eor	r18, r18
    3968:	33 27       	eor	r19, r19
    396a:	26 1b       	sub	r18, r22
    396c:	37 0b       	sbc	r19, r23
    396e:	11 cd       	rjmp	.-1502   	; 0x3392 <getInputFromSpeed+0x158>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    3970:	c3 e0       	ldi	r28, 0x03	; 3
    3972:	d0 e0       	ldi	r29, 0x00	; 0
    3974:	b2 ce       	rjmp	.-668    	; 0x36da <getInputFromSpeed+0x4a0>
    3976:	c2 e0       	ldi	r28, 0x02	; 2
    3978:	d0 e0       	ldi	r29, 0x00	; 0
    397a:	af ce       	rjmp	.-674    	; 0x36da <getInputFromSpeed+0x4a0>
    397c:	c4 e0       	ldi	r28, 0x04	; 4
    397e:	d0 e0       	ldi	r29, 0x00	; 0
    3980:	ac ce       	rjmp	.-680    	; 0x36da <getInputFromSpeed+0x4a0>
    3982:	c5 e0       	ldi	r28, 0x05	; 5
    3984:	d0 e0       	ldi	r29, 0x00	; 0
    3986:	a9 ce       	rjmp	.-686    	; 0x36da <getInputFromSpeed+0x4a0>
    3988:	c7 e0       	ldi	r28, 0x07	; 7
    398a:	d0 e0       	ldi	r29, 0x00	; 0
    398c:	a6 ce       	rjmp	.-692    	; 0x36da <getInputFromSpeed+0x4a0>
    398e:	c6 e0       	ldi	r28, 0x06	; 6
    3990:	d0 e0       	ldi	r29, 0x00	; 0
    3992:	a3 ce       	rjmp	.-698    	; 0x36da <getInputFromSpeed+0x4a0>
    3994:	c8 e0       	ldi	r28, 0x08	; 8
    3996:	d0 e0       	ldi	r29, 0x00	; 0
    3998:	a0 ce       	rjmp	.-704    	; 0x36da <getInputFromSpeed+0x4a0>

0000399a <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    399a:	8f 92       	push	r8
    399c:	9f 92       	push	r9
    399e:	af 92       	push	r10
    39a0:	bf 92       	push	r11
    39a2:	cf 92       	push	r12
    39a4:	df 92       	push	r13
    39a6:	ef 92       	push	r14
    39a8:	ff 92       	push	r15
    39aa:	0f 93       	push	r16
    39ac:	1f 93       	push	r17
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    39b2:	c0 91 ef 02 	lds	r28, 0x02EF
    39b6:	d0 91 f0 02 	lds	r29, 0x02F0
    39ba:	80 91 f1 02 	lds	r24, 0x02F1
    39be:	90 91 f2 02 	lds	r25, 0x02F2
    39c2:	97 fd       	sbrc	r25, 7
    39c4:	ea c0       	rjmp	.+468    	; 0x3b9a <getRightSpeedFromInput+0x200>
    39c6:	60 91 e8 08 	lds	r22, 0x08E8
    39ca:	70 91 e9 08 	lds	r23, 0x08E9
    39ce:	6c 17       	cp	r22, r28
    39d0:	7d 07       	cpc	r23, r29
    39d2:	0c f0       	brlt	.+2      	; 0x39d6 <getRightSpeedFromInput+0x3c>
    39d4:	67 c1       	rjmp	.+718    	; 0x3ca4 <getRightSpeedFromInput+0x30a>
    39d6:	88 24       	eor	r8, r8
    39d8:	8a 94       	dec	r8
    39da:	98 2c       	mov	r9, r8
    39dc:	80 91 f8 08 	lds	r24, 0x08F8
    39e0:	90 91 f9 08 	lds	r25, 0x08F9
    39e4:	8c 17       	cp	r24, r28
    39e6:	9d 07       	cpc	r25, r29
    39e8:	4c f0       	brlt	.+18     	; 0x39fc <getRightSpeedFromInput+0x62>
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	9f ef       	ldi	r25, 0xFF	; 255
    39ee:	89 16       	cp	r8, r25
    39f0:	9f ef       	ldi	r25, 0xFF	; 255
    39f2:	99 06       	cpc	r9, r25
    39f4:	09 f4       	brne	.+2      	; 0x39f8 <getRightSpeedFromInput+0x5e>
    39f6:	75 c1       	rjmp	.+746    	; 0x3ce2 <getRightSpeedFromInput+0x348>
    39f8:	88 2e       	mov	r8, r24
    39fa:	99 24       	eor	r9, r9
    39fc:	80 91 08 09 	lds	r24, 0x0908
    3a00:	90 91 09 09 	lds	r25, 0x0909
    3a04:	8c 17       	cp	r24, r28
    3a06:	9d 07       	cpc	r25, r29
    3a08:	34 f0       	brlt	.+12     	; 0x3a16 <getRightSpeedFromInput+0x7c>
    3a0a:	ef ef       	ldi	r30, 0xFF	; 255
    3a0c:	8e 16       	cp	r8, r30
    3a0e:	ef ef       	ldi	r30, 0xFF	; 255
    3a10:	9e 06       	cpc	r9, r30
    3a12:	09 f4       	brne	.+2      	; 0x3a16 <getRightSpeedFromInput+0x7c>
    3a14:	62 c1       	rjmp	.+708    	; 0x3cda <getRightSpeedFromInput+0x340>
    3a16:	80 91 18 09 	lds	r24, 0x0918
    3a1a:	90 91 19 09 	lds	r25, 0x0919
    3a1e:	8c 17       	cp	r24, r28
    3a20:	9d 07       	cpc	r25, r29
    3a22:	34 f0       	brlt	.+12     	; 0x3a30 <getRightSpeedFromInput+0x96>
    3a24:	ff ef       	ldi	r31, 0xFF	; 255
    3a26:	8f 16       	cp	r8, r31
    3a28:	ff ef       	ldi	r31, 0xFF	; 255
    3a2a:	9f 06       	cpc	r9, r31
    3a2c:	09 f4       	brne	.+2      	; 0x3a30 <getRightSpeedFromInput+0x96>
    3a2e:	51 c1       	rjmp	.+674    	; 0x3cd2 <getRightSpeedFromInput+0x338>
    3a30:	80 91 28 09 	lds	r24, 0x0928
    3a34:	90 91 29 09 	lds	r25, 0x0929
    3a38:	8c 17       	cp	r24, r28
    3a3a:	9d 07       	cpc	r25, r29
    3a3c:	34 f0       	brlt	.+12     	; 0x3a4a <getRightSpeedFromInput+0xb0>
    3a3e:	2f ef       	ldi	r18, 0xFF	; 255
    3a40:	82 16       	cp	r8, r18
    3a42:	2f ef       	ldi	r18, 0xFF	; 255
    3a44:	92 06       	cpc	r9, r18
    3a46:	09 f4       	brne	.+2      	; 0x3a4a <getRightSpeedFromInput+0xb0>
    3a48:	40 c1       	rjmp	.+640    	; 0x3cca <getRightSpeedFromInput+0x330>
    3a4a:	80 91 38 09 	lds	r24, 0x0938
    3a4e:	90 91 39 09 	lds	r25, 0x0939
    3a52:	8c 17       	cp	r24, r28
    3a54:	9d 07       	cpc	r25, r29
    3a56:	34 f0       	brlt	.+12     	; 0x3a64 <getRightSpeedFromInput+0xca>
    3a58:	3f ef       	ldi	r19, 0xFF	; 255
    3a5a:	83 16       	cp	r8, r19
    3a5c:	3f ef       	ldi	r19, 0xFF	; 255
    3a5e:	93 06       	cpc	r9, r19
    3a60:	09 f4       	brne	.+2      	; 0x3a64 <getRightSpeedFromInput+0xca>
    3a62:	2f c1       	rjmp	.+606    	; 0x3cc2 <getRightSpeedFromInput+0x328>
    3a64:	80 91 48 09 	lds	r24, 0x0948
    3a68:	90 91 49 09 	lds	r25, 0x0949
    3a6c:	8c 17       	cp	r24, r28
    3a6e:	9d 07       	cpc	r25, r29
    3a70:	34 f0       	brlt	.+12     	; 0x3a7e <getRightSpeedFromInput+0xe4>
    3a72:	8f ef       	ldi	r24, 0xFF	; 255
    3a74:	88 16       	cp	r8, r24
    3a76:	8f ef       	ldi	r24, 0xFF	; 255
    3a78:	98 06       	cpc	r9, r24
    3a7a:	09 f4       	brne	.+2      	; 0x3a7e <getRightSpeedFromInput+0xe4>
    3a7c:	1e c1       	rjmp	.+572    	; 0x3cba <getRightSpeedFromInput+0x320>
    3a7e:	80 91 58 09 	lds	r24, 0x0958
    3a82:	90 91 59 09 	lds	r25, 0x0959
    3a86:	8c 17       	cp	r24, r28
    3a88:	9d 07       	cpc	r25, r29
    3a8a:	34 f0       	brlt	.+12     	; 0x3a98 <getRightSpeedFromInput+0xfe>
    3a8c:	9f ef       	ldi	r25, 0xFF	; 255
    3a8e:	89 16       	cp	r8, r25
    3a90:	9f ef       	ldi	r25, 0xFF	; 255
    3a92:	99 06       	cpc	r9, r25
    3a94:	09 f4       	brne	.+2      	; 0x3a98 <getRightSpeedFromInput+0xfe>
    3a96:	0d c1       	rjmp	.+538    	; 0x3cb2 <getRightSpeedFromInput+0x318>
    3a98:	c0 90 68 09 	lds	r12, 0x0968
    3a9c:	d0 90 69 09 	lds	r13, 0x0969
    3aa0:	cc 16       	cp	r12, r28
    3aa2:	dd 06       	cpc	r13, r29
    3aa4:	34 f0       	brlt	.+12     	; 0x3ab2 <getRightSpeedFromInput+0x118>
    3aa6:	ef ef       	ldi	r30, 0xFF	; 255
    3aa8:	8e 16       	cp	r8, r30
    3aaa:	ef ef       	ldi	r30, 0xFF	; 255
    3aac:	9e 06       	cpc	r9, r30
    3aae:	09 f4       	brne	.+2      	; 0x3ab2 <getRightSpeedFromInput+0x118>
    3ab0:	fc c0       	rjmp	.+504    	; 0x3caa <getRightSpeedFromInput+0x310>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    3ab2:	20 97       	sbiw	r28, 0x00	; 0
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <getRightSpeedFromInput+0x11e>
    3ab6:	60 c0       	rjmp	.+192    	; 0x3b78 <getRightSpeedFromInput+0x1de>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    3ab8:	81 14       	cp	r8, r1
    3aba:	91 04       	cpc	r9, r1
    3abc:	09 f4       	brne	.+2      	; 0x3ac0 <getRightSpeedFromInput+0x126>
    3abe:	42 c1       	rjmp	.+644    	; 0x3d44 <getRightSpeedFromInput+0x3aa>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    3ac0:	3f ef       	ldi	r19, 0xFF	; 255
    3ac2:	83 16       	cp	r8, r19
    3ac4:	3f ef       	ldi	r19, 0xFF	; 255
    3ac6:	93 06       	cpc	r9, r19
    3ac8:	09 f4       	brne	.+2      	; 0x3acc <getRightSpeedFromInput+0x132>
    3aca:	0d c1       	rjmp	.+538    	; 0x3ce6 <getRightSpeedFromInput+0x34c>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    3acc:	f4 01       	movw	r30, r8
    3ace:	31 97       	sbiw	r30, 0x01	; 1
    3ad0:	e2 95       	swap	r30
    3ad2:	f2 95       	swap	r31
    3ad4:	f0 7f       	andi	r31, 0xF0	; 240
    3ad6:	fe 27       	eor	r31, r30
    3ad8:	e0 7f       	andi	r30, 0xF0	; 240
    3ada:	fe 27       	eor	r31, r30
    3adc:	df 01       	movw	r26, r30
    3ade:	a8 51       	subi	r26, 0x18	; 24
    3ae0:	b7 4f       	sbci	r27, 0xF7	; 247
    3ae2:	cd 90       	ld	r12, X+
    3ae4:	dc 90       	ld	r13, X
    3ae6:	ec 51       	subi	r30, 0x1C	; 28
    3ae8:	f7 4f       	sbci	r31, 0xF7	; 247
    3aea:	a6 80       	ldd	r10, Z+6	; 0x06
    3aec:	b7 80       	ldd	r11, Z+7	; 0x07
    3aee:	cc 19       	sub	r28, r12
    3af0:	dd 09       	sbc	r29, r13
    3af2:	be 01       	movw	r22, r28
    3af4:	88 27       	eor	r24, r24
    3af6:	77 fd       	sbrc	r23, 7
    3af8:	80 95       	com	r24
    3afa:	98 2f       	mov	r25, r24
    3afc:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3b00:	7b 01       	movw	r14, r22
    3b02:	8c 01       	movw	r16, r24
    3b04:	82 94       	swap	r8
    3b06:	92 94       	swap	r9
    3b08:	b0 ef       	ldi	r27, 0xF0	; 240
    3b0a:	9b 22       	and	r9, r27
    3b0c:	98 24       	eor	r9, r8
    3b0e:	8b 22       	and	r8, r27
    3b10:	98 24       	eor	r9, r8
    3b12:	f4 01       	movw	r30, r8
    3b14:	ec 51       	subi	r30, 0x1C	; 28
    3b16:	f7 4f       	sbci	r31, 0xF7	; 247
    3b18:	66 81       	ldd	r22, Z+6	; 0x06
    3b1a:	77 81       	ldd	r23, Z+7	; 0x07
    3b1c:	6a 19       	sub	r22, r10
    3b1e:	7b 09       	sbc	r23, r11
    3b20:	88 27       	eor	r24, r24
    3b22:	77 fd       	sbrc	r23, 7
    3b24:	80 95       	com	r24
    3b26:	98 2f       	mov	r25, r24
    3b28:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3b2c:	9b 01       	movw	r18, r22
    3b2e:	ac 01       	movw	r20, r24
    3b30:	c8 01       	movw	r24, r16
    3b32:	b7 01       	movw	r22, r14
    3b34:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    3b38:	7b 01       	movw	r14, r22
    3b3a:	8c 01       	movw	r16, r24
    3b3c:	88 ee       	ldi	r24, 0xE8	; 232
    3b3e:	98 e0       	ldi	r25, 0x08	; 8
    3b40:	88 0e       	add	r8, r24
    3b42:	99 1e       	adc	r9, r25
    3b44:	f4 01       	movw	r30, r8
    3b46:	60 81       	ld	r22, Z
    3b48:	71 81       	ldd	r23, Z+1	; 0x01
    3b4a:	6c 19       	sub	r22, r12
    3b4c:	7d 09       	sbc	r23, r13
    3b4e:	88 27       	eor	r24, r24
    3b50:	77 fd       	sbrc	r23, 7
    3b52:	80 95       	com	r24
    3b54:	98 2f       	mov	r25, r24
    3b56:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3b5a:	9b 01       	movw	r18, r22
    3b5c:	ac 01       	movw	r20, r24
    3b5e:	c8 01       	movw	r24, r16
    3b60:	b7 01       	movw	r22, r14
    3b62:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    3b66:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    3b6a:	6a 0d       	add	r22, r10
    3b6c:	7b 1d       	adc	r23, r11
    3b6e:	70 93 c3 04 	sts	0x04C3, r23
    3b72:	60 93 c2 04 	sts	0x04C2, r22
    3b76:	04 c0       	rjmp	.+8      	; 0x3b80 <getRightSpeedFromInput+0x1e6>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    3b78:	10 92 c3 04 	sts	0x04C3, r1
    3b7c:	10 92 c2 04 	sts	0x04C2, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    3b80:	df 91       	pop	r29
    3b82:	cf 91       	pop	r28
    3b84:	1f 91       	pop	r17
    3b86:	0f 91       	pop	r16
    3b88:	ff 90       	pop	r15
    3b8a:	ef 90       	pop	r14
    3b8c:	df 90       	pop	r13
    3b8e:	cf 90       	pop	r12
    3b90:	bf 90       	pop	r11
    3b92:	af 90       	pop	r10
    3b94:	9f 90       	pop	r9
    3b96:	8f 90       	pop	r8
    3b98:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    3b9a:	60 91 f0 08 	lds	r22, 0x08F0
    3b9e:	70 91 f1 08 	lds	r23, 0x08F1
    3ba2:	6c 17       	cp	r22, r28
    3ba4:	7d 07       	cpc	r23, r29
    3ba6:	0c f0       	brlt	.+2      	; 0x3baa <getRightSpeedFromInput+0x210>
    3ba8:	2b c1       	rjmp	.+598    	; 0x3e00 <getRightSpeedFromInput+0x466>
    3baa:	0f ef       	ldi	r16, 0xFF	; 255
    3bac:	1f ef       	ldi	r17, 0xFF	; 255
    3bae:	80 91 00 09 	lds	r24, 0x0900
    3bb2:	90 91 01 09 	lds	r25, 0x0901
    3bb6:	8c 17       	cp	r24, r28
    3bb8:	9d 07       	cpc	r25, r29
    3bba:	2c f0       	brlt	.+10     	; 0x3bc6 <getRightSpeedFromInput+0x22c>
    3bbc:	2f ef       	ldi	r18, 0xFF	; 255
    3bbe:	0f 3f       	cpi	r16, 0xFF	; 255
    3bc0:	12 07       	cpc	r17, r18
    3bc2:	09 f4       	brne	.+2      	; 0x3bc6 <getRightSpeedFromInput+0x22c>
    3bc4:	20 c1       	rjmp	.+576    	; 0x3e06 <getRightSpeedFromInput+0x46c>
    3bc6:	80 91 10 09 	lds	r24, 0x0910
    3bca:	90 91 11 09 	lds	r25, 0x0911
    3bce:	8c 17       	cp	r24, r28
    3bd0:	9d 07       	cpc	r25, r29
    3bd2:	2c f0       	brlt	.+10     	; 0x3bde <getRightSpeedFromInput+0x244>
    3bd4:	3f ef       	ldi	r19, 0xFF	; 255
    3bd6:	0f 3f       	cpi	r16, 0xFF	; 255
    3bd8:	13 07       	cpc	r17, r19
    3bda:	09 f4       	brne	.+2      	; 0x3bde <getRightSpeedFromInput+0x244>
    3bdc:	26 c1       	rjmp	.+588    	; 0x3e2a <getRightSpeedFromInput+0x490>
    3bde:	80 91 20 09 	lds	r24, 0x0920
    3be2:	90 91 21 09 	lds	r25, 0x0921
    3be6:	8c 17       	cp	r24, r28
    3be8:	9d 07       	cpc	r25, r29
    3bea:	2c f0       	brlt	.+10     	; 0x3bf6 <getRightSpeedFromInput+0x25c>
    3bec:	8f ef       	ldi	r24, 0xFF	; 255
    3bee:	0f 3f       	cpi	r16, 0xFF	; 255
    3bf0:	18 07       	cpc	r17, r24
    3bf2:	09 f4       	brne	.+2      	; 0x3bf6 <getRightSpeedFromInput+0x25c>
    3bf4:	17 c1       	rjmp	.+558    	; 0x3e24 <getRightSpeedFromInput+0x48a>
    3bf6:	80 91 30 09 	lds	r24, 0x0930
    3bfa:	90 91 31 09 	lds	r25, 0x0931
    3bfe:	8c 17       	cp	r24, r28
    3c00:	9d 07       	cpc	r25, r29
    3c02:	2c f0       	brlt	.+10     	; 0x3c0e <getRightSpeedFromInput+0x274>
    3c04:	9f ef       	ldi	r25, 0xFF	; 255
    3c06:	0f 3f       	cpi	r16, 0xFF	; 255
    3c08:	19 07       	cpc	r17, r25
    3c0a:	09 f4       	brne	.+2      	; 0x3c0e <getRightSpeedFromInput+0x274>
    3c0c:	08 c1       	rjmp	.+528    	; 0x3e1e <getRightSpeedFromInput+0x484>
    3c0e:	80 91 40 09 	lds	r24, 0x0940
    3c12:	90 91 41 09 	lds	r25, 0x0941
    3c16:	8c 17       	cp	r24, r28
    3c18:	9d 07       	cpc	r25, r29
    3c1a:	2c f0       	brlt	.+10     	; 0x3c26 <getRightSpeedFromInput+0x28c>
    3c1c:	ef ef       	ldi	r30, 0xFF	; 255
    3c1e:	0f 3f       	cpi	r16, 0xFF	; 255
    3c20:	1e 07       	cpc	r17, r30
    3c22:	09 f4       	brne	.+2      	; 0x3c26 <getRightSpeedFromInput+0x28c>
    3c24:	f9 c0       	rjmp	.+498    	; 0x3e18 <getRightSpeedFromInput+0x47e>
    3c26:	80 91 50 09 	lds	r24, 0x0950
    3c2a:	90 91 51 09 	lds	r25, 0x0951
    3c2e:	8c 17       	cp	r24, r28
    3c30:	9d 07       	cpc	r25, r29
    3c32:	2c f0       	brlt	.+10     	; 0x3c3e <getRightSpeedFromInput+0x2a4>
    3c34:	ff ef       	ldi	r31, 0xFF	; 255
    3c36:	0f 3f       	cpi	r16, 0xFF	; 255
    3c38:	1f 07       	cpc	r17, r31
    3c3a:	09 f4       	brne	.+2      	; 0x3c3e <getRightSpeedFromInput+0x2a4>
    3c3c:	ea c0       	rjmp	.+468    	; 0x3e12 <getRightSpeedFromInput+0x478>
    3c3e:	80 91 60 09 	lds	r24, 0x0960
    3c42:	90 91 61 09 	lds	r25, 0x0961
    3c46:	8c 17       	cp	r24, r28
    3c48:	9d 07       	cpc	r25, r29
    3c4a:	2c f0       	brlt	.+10     	; 0x3c56 <getRightSpeedFromInput+0x2bc>
    3c4c:	2f ef       	ldi	r18, 0xFF	; 255
    3c4e:	0f 3f       	cpi	r16, 0xFF	; 255
    3c50:	12 07       	cpc	r17, r18
    3c52:	09 f4       	brne	.+2      	; 0x3c56 <getRightSpeedFromInput+0x2bc>
    3c54:	db c0       	rjmp	.+438    	; 0x3e0c <getRightSpeedFromInput+0x472>
    3c56:	c0 90 70 09 	lds	r12, 0x0970
    3c5a:	d0 90 71 09 	lds	r13, 0x0971
    3c5e:	cc 16       	cp	r12, r28
    3c60:	dd 06       	cpc	r13, r29
    3c62:	2c f0       	brlt	.+10     	; 0x3c6e <getRightSpeedFromInput+0x2d4>
    3c64:	3f ef       	ldi	r19, 0xFF	; 255
    3c66:	0f 3f       	cpi	r16, 0xFF	; 255
    3c68:	13 07       	cpc	r17, r19
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <getRightSpeedFromInput+0x2d4>
    3c6c:	7e c0       	rjmp	.+252    	; 0x3d6a <getRightSpeedFromInput+0x3d0>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    3c6e:	01 15       	cp	r16, r1
    3c70:	11 05       	cpc	r17, r1
    3c72:	09 f0       	breq	.+2      	; 0x3c76 <getRightSpeedFromInput+0x2dc>
    3c74:	7c c0       	rjmp	.+248    	; 0x3d6e <getRightSpeedFromInput+0x3d4>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    3c76:	80 91 f2 08 	lds	r24, 0x08F2
    3c7a:	90 91 f3 08 	lds	r25, 0x08F3
    3c7e:	9c 01       	movw	r18, r24
    3c80:	c2 9f       	mul	r28, r18
    3c82:	c0 01       	movw	r24, r0
    3c84:	c3 9f       	mul	r28, r19
    3c86:	90 0d       	add	r25, r0
    3c88:	d2 9f       	mul	r29, r18
    3c8a:	90 0d       	add	r25, r0
    3c8c:	11 24       	eor	r1, r1
    3c8e:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__divmodhi4>
    3c92:	cb 01       	movw	r24, r22
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    3c94:	90 95       	com	r25
    3c96:	81 95       	neg	r24
    3c98:	9f 4f       	sbci	r25, 0xFF	; 255
    3c9a:	90 93 c3 04 	sts	0x04C3, r25
    3c9e:	80 93 c2 04 	sts	0x04C2, r24
    3ca2:	6e cf       	rjmp	.-292    	; 0x3b80 <getRightSpeedFromInput+0x1e6>

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    3ca4:	88 24       	eor	r8, r8
    3ca6:	99 24       	eor	r9, r9
    3ca8:	99 ce       	rjmp	.-718    	; 0x39dc <getRightSpeedFromInput+0x42>
    3caa:	88 e0       	ldi	r24, 0x08	; 8
    3cac:	88 2e       	mov	r8, r24
    3cae:	91 2c       	mov	r9, r1
    3cb0:	00 cf       	rjmp	.-512    	; 0x3ab2 <getRightSpeedFromInput+0x118>
    3cb2:	97 e0       	ldi	r25, 0x07	; 7
    3cb4:	89 2e       	mov	r8, r25
    3cb6:	91 2c       	mov	r9, r1
    3cb8:	ef ce       	rjmp	.-546    	; 0x3a98 <getRightSpeedFromInput+0xfe>
    3cba:	26 e0       	ldi	r18, 0x06	; 6
    3cbc:	82 2e       	mov	r8, r18
    3cbe:	91 2c       	mov	r9, r1
    3cc0:	de ce       	rjmp	.-580    	; 0x3a7e <getRightSpeedFromInput+0xe4>
    3cc2:	35 e0       	ldi	r19, 0x05	; 5
    3cc4:	83 2e       	mov	r8, r19
    3cc6:	91 2c       	mov	r9, r1
    3cc8:	cd ce       	rjmp	.-614    	; 0x3a64 <getRightSpeedFromInput+0xca>
    3cca:	44 e0       	ldi	r20, 0x04	; 4
    3ccc:	84 2e       	mov	r8, r20
    3cce:	91 2c       	mov	r9, r1
    3cd0:	bc ce       	rjmp	.-648    	; 0x3a4a <getRightSpeedFromInput+0xb0>
    3cd2:	53 e0       	ldi	r21, 0x03	; 3
    3cd4:	85 2e       	mov	r8, r21
    3cd6:	91 2c       	mov	r9, r1
    3cd8:	ab ce       	rjmp	.-682    	; 0x3a30 <getRightSpeedFromInput+0x96>
    3cda:	e2 e0       	ldi	r30, 0x02	; 2
    3cdc:	8e 2e       	mov	r8, r30
    3cde:	91 2c       	mov	r9, r1
    3ce0:	9a ce       	rjmp	.-716    	; 0x3a16 <getRightSpeedFromInput+0x7c>
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	89 ce       	rjmp	.-750    	; 0x39f8 <getRightSpeedFromInput+0x5e>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    3ce6:	60 91 6a 09 	lds	r22, 0x096A
    3cea:	70 91 6b 09 	lds	r23, 0x096B
    3cee:	88 27       	eor	r24, r24
    3cf0:	77 fd       	sbrc	r23, 7
    3cf2:	80 95       	com	r24
    3cf4:	98 2f       	mov	r25, r24
    3cf6:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3cfa:	7b 01       	movw	r14, r22
    3cfc:	8c 01       	movw	r16, r24
    3cfe:	be 01       	movw	r22, r28
    3d00:	88 27       	eor	r24, r24
    3d02:	77 fd       	sbrc	r23, 7
    3d04:	80 95       	com	r24
    3d06:	98 2f       	mov	r25, r24
    3d08:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3d0c:	9b 01       	movw	r18, r22
    3d0e:	ac 01       	movw	r20, r24
    3d10:	c8 01       	movw	r24, r16
    3d12:	b7 01       	movw	r22, r14
    3d14:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    3d18:	7b 01       	movw	r14, r22
    3d1a:	8c 01       	movw	r16, r24
    3d1c:	b6 01       	movw	r22, r12
    3d1e:	88 27       	eor	r24, r24
    3d20:	77 fd       	sbrc	r23, 7
    3d22:	80 95       	com	r24
    3d24:	98 2f       	mov	r25, r24
    3d26:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3d2a:	9b 01       	movw	r18, r22
    3d2c:	ac 01       	movw	r20, r24
    3d2e:	c8 01       	movw	r24, r16
    3d30:	b7 01       	movw	r22, r14
    3d32:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    3d36:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    3d3a:	70 93 c3 04 	sts	0x04C3, r23
    3d3e:	60 93 c2 04 	sts	0x04C2, r22
    3d42:	1e cf       	rjmp	.-452    	; 0x3b80 <getRightSpeedFromInput+0x1e6>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    3d44:	80 91 ea 08 	lds	r24, 0x08EA
    3d48:	90 91 eb 08 	lds	r25, 0x08EB
    3d4c:	9c 01       	movw	r18, r24
    3d4e:	c2 9f       	mul	r28, r18
    3d50:	c0 01       	movw	r24, r0
    3d52:	c3 9f       	mul	r28, r19
    3d54:	90 0d       	add	r25, r0
    3d56:	d2 9f       	mul	r29, r18
    3d58:	90 0d       	add	r25, r0
    3d5a:	11 24       	eor	r1, r1
    3d5c:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__divmodhi4>
    3d60:	70 93 c3 04 	sts	0x04C3, r23
    3d64:	60 93 c2 04 	sts	0x04C2, r22
    3d68:	0b cf       	rjmp	.-490    	; 0x3b80 <getRightSpeedFromInput+0x1e6>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    3d6a:	08 e0       	ldi	r16, 0x08	; 8
    3d6c:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    3d6e:	3f ef       	ldi	r19, 0xFF	; 255
    3d70:	0f 3f       	cpi	r16, 0xFF	; 255
    3d72:	13 07       	cpc	r17, r19
    3d74:	09 f4       	brne	.+2      	; 0x3d78 <getRightSpeedFromInput+0x3de>
    3d76:	5c c0       	rjmp	.+184    	; 0x3e30 <getRightSpeedFromInput+0x496>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    3d78:	02 95       	swap	r16
    3d7a:	12 95       	swap	r17
    3d7c:	10 7f       	andi	r17, 0xF0	; 240
    3d7e:	10 27       	eor	r17, r16
    3d80:	00 7f       	andi	r16, 0xF0	; 240
    3d82:	10 27       	eor	r17, r16
    3d84:	f8 01       	movw	r30, r16
    3d86:	ec 52       	subi	r30, 0x2C	; 44
    3d88:	f7 4f       	sbci	r31, 0xF7	; 247
    3d8a:	a4 84       	ldd	r10, Z+12	; 0x0c
    3d8c:	b5 84       	ldd	r11, Z+13	; 0x0d
    3d8e:	86 84       	ldd	r8, Z+14	; 0x0e
    3d90:	97 84       	ldd	r9, Z+15	; 0x0f
    3d92:	ca 19       	sub	r28, r10
    3d94:	db 09       	sbc	r29, r11
    3d96:	be 01       	movw	r22, r28
    3d98:	88 27       	eor	r24, r24
    3d9a:	77 fd       	sbrc	r23, 7
    3d9c:	80 95       	com	r24
    3d9e:	98 2f       	mov	r25, r24
    3da0:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3da4:	6b 01       	movw	r12, r22
    3da6:	7c 01       	movw	r14, r24
    3da8:	0c 51       	subi	r16, 0x1C	; 28
    3daa:	17 4f       	sbci	r17, 0xF7	; 247
    3dac:	f8 01       	movw	r30, r16
    3dae:	66 85       	ldd	r22, Z+14	; 0x0e
    3db0:	77 85       	ldd	r23, Z+15	; 0x0f
    3db2:	68 19       	sub	r22, r8
    3db4:	79 09       	sbc	r23, r9
    3db6:	88 27       	eor	r24, r24
    3db8:	77 fd       	sbrc	r23, 7
    3dba:	80 95       	com	r24
    3dbc:	98 2f       	mov	r25, r24
    3dbe:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3dc2:	9b 01       	movw	r18, r22
    3dc4:	ac 01       	movw	r20, r24
    3dc6:	c7 01       	movw	r24, r14
    3dc8:	b6 01       	movw	r22, r12
    3dca:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    3dce:	6b 01       	movw	r12, r22
    3dd0:	7c 01       	movw	r14, r24
    3dd2:	f8 01       	movw	r30, r16
    3dd4:	64 85       	ldd	r22, Z+12	; 0x0c
    3dd6:	75 85       	ldd	r23, Z+13	; 0x0d
    3dd8:	6a 19       	sub	r22, r10
    3dda:	7b 09       	sbc	r23, r11
    3ddc:	88 27       	eor	r24, r24
    3dde:	77 fd       	sbrc	r23, 7
    3de0:	80 95       	com	r24
    3de2:	98 2f       	mov	r25, r24
    3de4:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3de8:	9b 01       	movw	r18, r22
    3dea:	ac 01       	movw	r20, r24
    3dec:	c7 01       	movw	r24, r14
    3dee:	b6 01       	movw	r22, r12
    3df0:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    3df4:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    3df8:	68 0d       	add	r22, r8
    3dfa:	79 1d       	adc	r23, r9
    3dfc:	cb 01       	movw	r24, r22
    3dfe:	4a cf       	rjmp	.-364    	; 0x3c94 <getRightSpeedFromInput+0x2fa>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    3e00:	00 e0       	ldi	r16, 0x00	; 0
    3e02:	10 e0       	ldi	r17, 0x00	; 0
    3e04:	d4 ce       	rjmp	.-600    	; 0x3bae <getRightSpeedFromInput+0x214>
    3e06:	01 e0       	ldi	r16, 0x01	; 1
    3e08:	10 e0       	ldi	r17, 0x00	; 0
    3e0a:	dd ce       	rjmp	.-582    	; 0x3bc6 <getRightSpeedFromInput+0x22c>
    3e0c:	07 e0       	ldi	r16, 0x07	; 7
    3e0e:	10 e0       	ldi	r17, 0x00	; 0
    3e10:	22 cf       	rjmp	.-444    	; 0x3c56 <getRightSpeedFromInput+0x2bc>
    3e12:	06 e0       	ldi	r16, 0x06	; 6
    3e14:	10 e0       	ldi	r17, 0x00	; 0
    3e16:	13 cf       	rjmp	.-474    	; 0x3c3e <getRightSpeedFromInput+0x2a4>
    3e18:	05 e0       	ldi	r16, 0x05	; 5
    3e1a:	10 e0       	ldi	r17, 0x00	; 0
    3e1c:	04 cf       	rjmp	.-504    	; 0x3c26 <getRightSpeedFromInput+0x28c>
    3e1e:	04 e0       	ldi	r16, 0x04	; 4
    3e20:	10 e0       	ldi	r17, 0x00	; 0
    3e22:	f5 ce       	rjmp	.-534    	; 0x3c0e <getRightSpeedFromInput+0x274>
    3e24:	03 e0       	ldi	r16, 0x03	; 3
    3e26:	10 e0       	ldi	r17, 0x00	; 0
    3e28:	e6 ce       	rjmp	.-564    	; 0x3bf6 <getRightSpeedFromInput+0x25c>
    3e2a:	02 e0       	ldi	r16, 0x02	; 2
    3e2c:	10 e0       	ldi	r17, 0x00	; 0
    3e2e:	d7 ce       	rjmp	.-594    	; 0x3bde <getRightSpeedFromInput+0x244>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    3e30:	60 91 72 09 	lds	r22, 0x0972
    3e34:	70 91 73 09 	lds	r23, 0x0973
    3e38:	88 27       	eor	r24, r24
    3e3a:	77 fd       	sbrc	r23, 7
    3e3c:	80 95       	com	r24
    3e3e:	98 2f       	mov	r25, r24
    3e40:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3e44:	7b 01       	movw	r14, r22
    3e46:	8c 01       	movw	r16, r24
    3e48:	be 01       	movw	r22, r28
    3e4a:	88 27       	eor	r24, r24
    3e4c:	77 fd       	sbrc	r23, 7
    3e4e:	80 95       	com	r24
    3e50:	98 2f       	mov	r25, r24
    3e52:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3e56:	9b 01       	movw	r18, r22
    3e58:	ac 01       	movw	r20, r24
    3e5a:	c8 01       	movw	r24, r16
    3e5c:	b7 01       	movw	r22, r14
    3e5e:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    3e62:	7b 01       	movw	r14, r22
    3e64:	8c 01       	movw	r16, r24
    3e66:	b6 01       	movw	r22, r12
    3e68:	88 27       	eor	r24, r24
    3e6a:	77 fd       	sbrc	r23, 7
    3e6c:	80 95       	com	r24
    3e6e:	98 2f       	mov	r25, r24
    3e70:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3e74:	9b 01       	movw	r18, r22
    3e76:	ac 01       	movw	r20, r24
    3e78:	c8 01       	movw	r24, r16
    3e7a:	b7 01       	movw	r22, r14
    3e7c:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    3e80:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    3e84:	cb 01       	movw	r24, r22
    3e86:	06 cf       	rjmp	.-500    	; 0x3c94 <getRightSpeedFromInput+0x2fa>

00003e88 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    3e88:	8f 92       	push	r8
    3e8a:	9f 92       	push	r9
    3e8c:	af 92       	push	r10
    3e8e:	bf 92       	push	r11
    3e90:	cf 92       	push	r12
    3e92:	df 92       	push	r13
    3e94:	ef 92       	push	r14
    3e96:	ff 92       	push	r15
    3e98:	0f 93       	push	r16
    3e9a:	1f 93       	push	r17
    3e9c:	cf 93       	push	r28
    3e9e:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    3ea0:	c0 91 ed 02 	lds	r28, 0x02ED
    3ea4:	d0 91 ee 02 	lds	r29, 0x02EE
    3ea8:	80 91 f3 02 	lds	r24, 0x02F3
    3eac:	90 91 f4 02 	lds	r25, 0x02F4
    3eb0:	97 fd       	sbrc	r25, 7
    3eb2:	f3 c0       	rjmp	.+486    	; 0x409a <getLeftSpeedFromInput+0x212>
    3eb4:	60 91 e4 08 	lds	r22, 0x08E4
    3eb8:	70 91 e5 08 	lds	r23, 0x08E5
    3ebc:	6c 17       	cp	r22, r28
    3ebe:	7d 07       	cpc	r23, r29
    3ec0:	0c f0       	brlt	.+2      	; 0x3ec4 <getLeftSpeedFromInput+0x3c>
    3ec2:	79 c1       	rjmp	.+754    	; 0x41b6 <getLeftSpeedFromInput+0x32e>
    3ec4:	88 24       	eor	r8, r8
    3ec6:	8a 94       	dec	r8
    3ec8:	98 2c       	mov	r9, r8
    3eca:	80 91 f4 08 	lds	r24, 0x08F4
    3ece:	90 91 f5 08 	lds	r25, 0x08F5
    3ed2:	8c 17       	cp	r24, r28
    3ed4:	9d 07       	cpc	r25, r29
    3ed6:	4c f0       	brlt	.+18     	; 0x3eea <getLeftSpeedFromInput+0x62>
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	9f ef       	ldi	r25, 0xFF	; 255
    3edc:	89 16       	cp	r8, r25
    3ede:	9f ef       	ldi	r25, 0xFF	; 255
    3ee0:	99 06       	cpc	r9, r25
    3ee2:	09 f4       	brne	.+2      	; 0x3ee6 <getLeftSpeedFromInput+0x5e>
    3ee4:	87 c1       	rjmp	.+782    	; 0x41f4 <getLeftSpeedFromInput+0x36c>
    3ee6:	88 2e       	mov	r8, r24
    3ee8:	99 24       	eor	r9, r9
    3eea:	80 91 04 09 	lds	r24, 0x0904
    3eee:	90 91 05 09 	lds	r25, 0x0905
    3ef2:	8c 17       	cp	r24, r28
    3ef4:	9d 07       	cpc	r25, r29
    3ef6:	34 f0       	brlt	.+12     	; 0x3f04 <getLeftSpeedFromInput+0x7c>
    3ef8:	ef ef       	ldi	r30, 0xFF	; 255
    3efa:	8e 16       	cp	r8, r30
    3efc:	ef ef       	ldi	r30, 0xFF	; 255
    3efe:	9e 06       	cpc	r9, r30
    3f00:	09 f4       	brne	.+2      	; 0x3f04 <getLeftSpeedFromInput+0x7c>
    3f02:	74 c1       	rjmp	.+744    	; 0x41ec <getLeftSpeedFromInput+0x364>
    3f04:	80 91 14 09 	lds	r24, 0x0914
    3f08:	90 91 15 09 	lds	r25, 0x0915
    3f0c:	8c 17       	cp	r24, r28
    3f0e:	9d 07       	cpc	r25, r29
    3f10:	34 f0       	brlt	.+12     	; 0x3f1e <getLeftSpeedFromInput+0x96>
    3f12:	ff ef       	ldi	r31, 0xFF	; 255
    3f14:	8f 16       	cp	r8, r31
    3f16:	ff ef       	ldi	r31, 0xFF	; 255
    3f18:	9f 06       	cpc	r9, r31
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <getLeftSpeedFromInput+0x96>
    3f1c:	63 c1       	rjmp	.+710    	; 0x41e4 <getLeftSpeedFromInput+0x35c>
    3f1e:	80 91 24 09 	lds	r24, 0x0924
    3f22:	90 91 25 09 	lds	r25, 0x0925
    3f26:	8c 17       	cp	r24, r28
    3f28:	9d 07       	cpc	r25, r29
    3f2a:	34 f0       	brlt	.+12     	; 0x3f38 <getLeftSpeedFromInput+0xb0>
    3f2c:	2f ef       	ldi	r18, 0xFF	; 255
    3f2e:	82 16       	cp	r8, r18
    3f30:	2f ef       	ldi	r18, 0xFF	; 255
    3f32:	92 06       	cpc	r9, r18
    3f34:	09 f4       	brne	.+2      	; 0x3f38 <getLeftSpeedFromInput+0xb0>
    3f36:	52 c1       	rjmp	.+676    	; 0x41dc <getLeftSpeedFromInput+0x354>
    3f38:	80 91 34 09 	lds	r24, 0x0934
    3f3c:	90 91 35 09 	lds	r25, 0x0935
    3f40:	8c 17       	cp	r24, r28
    3f42:	9d 07       	cpc	r25, r29
    3f44:	34 f0       	brlt	.+12     	; 0x3f52 <getLeftSpeedFromInput+0xca>
    3f46:	3f ef       	ldi	r19, 0xFF	; 255
    3f48:	83 16       	cp	r8, r19
    3f4a:	3f ef       	ldi	r19, 0xFF	; 255
    3f4c:	93 06       	cpc	r9, r19
    3f4e:	09 f4       	brne	.+2      	; 0x3f52 <getLeftSpeedFromInput+0xca>
    3f50:	41 c1       	rjmp	.+642    	; 0x41d4 <getLeftSpeedFromInput+0x34c>
    3f52:	80 91 44 09 	lds	r24, 0x0944
    3f56:	90 91 45 09 	lds	r25, 0x0945
    3f5a:	8c 17       	cp	r24, r28
    3f5c:	9d 07       	cpc	r25, r29
    3f5e:	34 f0       	brlt	.+12     	; 0x3f6c <getLeftSpeedFromInput+0xe4>
    3f60:	8f ef       	ldi	r24, 0xFF	; 255
    3f62:	88 16       	cp	r8, r24
    3f64:	8f ef       	ldi	r24, 0xFF	; 255
    3f66:	98 06       	cpc	r9, r24
    3f68:	09 f4       	brne	.+2      	; 0x3f6c <getLeftSpeedFromInput+0xe4>
    3f6a:	30 c1       	rjmp	.+608    	; 0x41cc <getLeftSpeedFromInput+0x344>
    3f6c:	80 91 54 09 	lds	r24, 0x0954
    3f70:	90 91 55 09 	lds	r25, 0x0955
    3f74:	8c 17       	cp	r24, r28
    3f76:	9d 07       	cpc	r25, r29
    3f78:	34 f0       	brlt	.+12     	; 0x3f86 <getLeftSpeedFromInput+0xfe>
    3f7a:	9f ef       	ldi	r25, 0xFF	; 255
    3f7c:	89 16       	cp	r8, r25
    3f7e:	9f ef       	ldi	r25, 0xFF	; 255
    3f80:	99 06       	cpc	r9, r25
    3f82:	09 f4       	brne	.+2      	; 0x3f86 <getLeftSpeedFromInput+0xfe>
    3f84:	1f c1       	rjmp	.+574    	; 0x41c4 <getLeftSpeedFromInput+0x33c>
    3f86:	c0 90 64 09 	lds	r12, 0x0964
    3f8a:	d0 90 65 09 	lds	r13, 0x0965
    3f8e:	cc 16       	cp	r12, r28
    3f90:	dd 06       	cpc	r13, r29
    3f92:	34 f0       	brlt	.+12     	; 0x3fa0 <getLeftSpeedFromInput+0x118>
    3f94:	ef ef       	ldi	r30, 0xFF	; 255
    3f96:	8e 16       	cp	r8, r30
    3f98:	ef ef       	ldi	r30, 0xFF	; 255
    3f9a:	9e 06       	cpc	r9, r30
    3f9c:	09 f4       	brne	.+2      	; 0x3fa0 <getLeftSpeedFromInput+0x118>
    3f9e:	0e c1       	rjmp	.+540    	; 0x41bc <getLeftSpeedFromInput+0x334>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    3fa0:	20 97       	sbiw	r28, 0x00	; 0
    3fa2:	09 f4       	brne	.+2      	; 0x3fa6 <getLeftSpeedFromInput+0x11e>
    3fa4:	69 c0       	rjmp	.+210    	; 0x4078 <getLeftSpeedFromInput+0x1f0>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    3fa6:	81 14       	cp	r8, r1
    3fa8:	91 04       	cpc	r9, r1
    3faa:	09 f4       	brne	.+2      	; 0x3fae <getLeftSpeedFromInput+0x126>
    3fac:	54 c1       	rjmp	.+680    	; 0x4256 <getLeftSpeedFromInput+0x3ce>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    3fae:	3f ef       	ldi	r19, 0xFF	; 255
    3fb0:	83 16       	cp	r8, r19
    3fb2:	3f ef       	ldi	r19, 0xFF	; 255
    3fb4:	93 06       	cpc	r9, r19
    3fb6:	09 f4       	brne	.+2      	; 0x3fba <getLeftSpeedFromInput+0x132>
    3fb8:	1f c1       	rjmp	.+574    	; 0x41f8 <getLeftSpeedFromInput+0x370>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    3fba:	d4 01       	movw	r26, r8
    3fbc:	11 97       	sbiw	r26, 0x01	; 1
    3fbe:	fd 01       	movw	r30, r26
    3fc0:	e2 95       	swap	r30
    3fc2:	f2 95       	swap	r31
    3fc4:	f0 7f       	andi	r31, 0xF0	; 240
    3fc6:	fe 27       	eor	r31, r30
    3fc8:	e0 7f       	andi	r30, 0xF0	; 240
    3fca:	fe 27       	eor	r31, r30
    3fcc:	ec 51       	subi	r30, 0x1C	; 28
    3fce:	f7 4f       	sbci	r31, 0xF7	; 247
    3fd0:	c0 80       	ld	r12, Z
    3fd2:	d1 80       	ldd	r13, Z+1	; 0x01
    3fd4:	aa 0f       	add	r26, r26
    3fd6:	bb 1f       	adc	r27, r27
    3fd8:	aa 0f       	add	r26, r26
    3fda:	bb 1f       	adc	r27, r27
    3fdc:	aa 0f       	add	r26, r26
    3fde:	bb 1f       	adc	r27, r27
    3fe0:	aa 0f       	add	r26, r26
    3fe2:	bb 1f       	adc	r27, r27
    3fe4:	aa 51       	subi	r26, 0x1A	; 26
    3fe6:	b7 4f       	sbci	r27, 0xF7	; 247
    3fe8:	ad 90       	ld	r10, X+
    3fea:	bc 90       	ld	r11, X
    3fec:	cc 19       	sub	r28, r12
    3fee:	dd 09       	sbc	r29, r13
    3ff0:	be 01       	movw	r22, r28
    3ff2:	88 27       	eor	r24, r24
    3ff4:	77 fd       	sbrc	r23, 7
    3ff6:	80 95       	com	r24
    3ff8:	98 2f       	mov	r25, r24
    3ffa:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    3ffe:	7b 01       	movw	r14, r22
    4000:	8c 01       	movw	r16, r24
    4002:	88 0c       	add	r8, r8
    4004:	99 1c       	adc	r9, r9
    4006:	88 0c       	add	r8, r8
    4008:	99 1c       	adc	r9, r9
    400a:	88 0c       	add	r8, r8
    400c:	99 1c       	adc	r9, r9
    400e:	88 0c       	add	r8, r8
    4010:	99 1c       	adc	r9, r9
    4012:	f4 01       	movw	r30, r8
    4014:	ea 51       	subi	r30, 0x1A	; 26
    4016:	f7 4f       	sbci	r31, 0xF7	; 247
    4018:	60 81       	ld	r22, Z
    401a:	71 81       	ldd	r23, Z+1	; 0x01
    401c:	6a 19       	sub	r22, r10
    401e:	7b 09       	sbc	r23, r11
    4020:	88 27       	eor	r24, r24
    4022:	77 fd       	sbrc	r23, 7
    4024:	80 95       	com	r24
    4026:	98 2f       	mov	r25, r24
    4028:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    402c:	9b 01       	movw	r18, r22
    402e:	ac 01       	movw	r20, r24
    4030:	c8 01       	movw	r24, r16
    4032:	b7 01       	movw	r22, r14
    4034:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    4038:	7b 01       	movw	r14, r22
    403a:	8c 01       	movw	r16, r24
    403c:	84 ee       	ldi	r24, 0xE4	; 228
    403e:	98 e0       	ldi	r25, 0x08	; 8
    4040:	88 0e       	add	r8, r24
    4042:	99 1e       	adc	r9, r25
    4044:	f4 01       	movw	r30, r8
    4046:	60 81       	ld	r22, Z
    4048:	71 81       	ldd	r23, Z+1	; 0x01
    404a:	6c 19       	sub	r22, r12
    404c:	7d 09       	sbc	r23, r13
    404e:	88 27       	eor	r24, r24
    4050:	77 fd       	sbrc	r23, 7
    4052:	80 95       	com	r24
    4054:	98 2f       	mov	r25, r24
    4056:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    405a:	9b 01       	movw	r18, r22
    405c:	ac 01       	movw	r20, r24
    405e:	c8 01       	movw	r24, r16
    4060:	b7 01       	movw	r22, r14
    4062:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    4066:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    406a:	6a 0d       	add	r22, r10
    406c:	7b 1d       	adc	r23, r11
    406e:	70 93 c1 04 	sts	0x04C1, r23
    4072:	60 93 c0 04 	sts	0x04C0, r22
    4076:	04 c0       	rjmp	.+8      	; 0x4080 <getLeftSpeedFromInput+0x1f8>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    4078:	10 92 c1 04 	sts	0x04C1, r1
    407c:	10 92 c0 04 	sts	0x04C0, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    4080:	df 91       	pop	r29
    4082:	cf 91       	pop	r28
    4084:	1f 91       	pop	r17
    4086:	0f 91       	pop	r16
    4088:	ff 90       	pop	r15
    408a:	ef 90       	pop	r14
    408c:	df 90       	pop	r13
    408e:	cf 90       	pop	r12
    4090:	bf 90       	pop	r11
    4092:	af 90       	pop	r10
    4094:	9f 90       	pop	r9
    4096:	8f 90       	pop	r8
    4098:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    409a:	60 91 ec 08 	lds	r22, 0x08EC
    409e:	70 91 ed 08 	lds	r23, 0x08ED
    40a2:	6c 17       	cp	r22, r28
    40a4:	7d 07       	cpc	r23, r29
    40a6:	0c f0       	brlt	.+2      	; 0x40aa <getLeftSpeedFromInput+0x222>
    40a8:	4e c1       	rjmp	.+668    	; 0x4346 <getLeftSpeedFromInput+0x4be>
    40aa:	88 24       	eor	r8, r8
    40ac:	8a 94       	dec	r8
    40ae:	98 2c       	mov	r9, r8
    40b0:	80 91 fc 08 	lds	r24, 0x08FC
    40b4:	90 91 fd 08 	lds	r25, 0x08FD
    40b8:	8c 17       	cp	r24, r28
    40ba:	9d 07       	cpc	r25, r29
    40bc:	34 f0       	brlt	.+12     	; 0x40ca <getLeftSpeedFromInput+0x242>
    40be:	2f ef       	ldi	r18, 0xFF	; 255
    40c0:	82 16       	cp	r8, r18
    40c2:	2f ef       	ldi	r18, 0xFF	; 255
    40c4:	92 06       	cpc	r9, r18
    40c6:	09 f4       	brne	.+2      	; 0x40ca <getLeftSpeedFromInput+0x242>
    40c8:	41 c1       	rjmp	.+642    	; 0x434c <getLeftSpeedFromInput+0x4c4>
    40ca:	80 91 0c 09 	lds	r24, 0x090C
    40ce:	90 91 0d 09 	lds	r25, 0x090D
    40d2:	8c 17       	cp	r24, r28
    40d4:	9d 07       	cpc	r25, r29
    40d6:	34 f0       	brlt	.+12     	; 0x40e4 <getLeftSpeedFromInput+0x25c>
    40d8:	3f ef       	ldi	r19, 0xFF	; 255
    40da:	83 16       	cp	r8, r19
    40dc:	3f ef       	ldi	r19, 0xFF	; 255
    40de:	93 06       	cpc	r9, r19
    40e0:	09 f4       	brne	.+2      	; 0x40e4 <getLeftSpeedFromInput+0x25c>
    40e2:	4c c1       	rjmp	.+664    	; 0x437c <getLeftSpeedFromInput+0x4f4>
    40e4:	80 91 1c 09 	lds	r24, 0x091C
    40e8:	90 91 1d 09 	lds	r25, 0x091D
    40ec:	8c 17       	cp	r24, r28
    40ee:	9d 07       	cpc	r25, r29
    40f0:	34 f0       	brlt	.+12     	; 0x40fe <getLeftSpeedFromInput+0x276>
    40f2:	8f ef       	ldi	r24, 0xFF	; 255
    40f4:	88 16       	cp	r8, r24
    40f6:	8f ef       	ldi	r24, 0xFF	; 255
    40f8:	98 06       	cpc	r9, r24
    40fa:	09 f4       	brne	.+2      	; 0x40fe <getLeftSpeedFromInput+0x276>
    40fc:	3b c1       	rjmp	.+630    	; 0x4374 <getLeftSpeedFromInput+0x4ec>
    40fe:	80 91 2c 09 	lds	r24, 0x092C
    4102:	90 91 2d 09 	lds	r25, 0x092D
    4106:	8c 17       	cp	r24, r28
    4108:	9d 07       	cpc	r25, r29
    410a:	34 f0       	brlt	.+12     	; 0x4118 <getLeftSpeedFromInput+0x290>
    410c:	9f ef       	ldi	r25, 0xFF	; 255
    410e:	89 16       	cp	r8, r25
    4110:	9f ef       	ldi	r25, 0xFF	; 255
    4112:	99 06       	cpc	r9, r25
    4114:	09 f4       	brne	.+2      	; 0x4118 <getLeftSpeedFromInput+0x290>
    4116:	2a c1       	rjmp	.+596    	; 0x436c <getLeftSpeedFromInput+0x4e4>
    4118:	80 91 3c 09 	lds	r24, 0x093C
    411c:	90 91 3d 09 	lds	r25, 0x093D
    4120:	8c 17       	cp	r24, r28
    4122:	9d 07       	cpc	r25, r29
    4124:	34 f0       	brlt	.+12     	; 0x4132 <getLeftSpeedFromInput+0x2aa>
    4126:	ef ef       	ldi	r30, 0xFF	; 255
    4128:	8e 16       	cp	r8, r30
    412a:	ef ef       	ldi	r30, 0xFF	; 255
    412c:	9e 06       	cpc	r9, r30
    412e:	09 f4       	brne	.+2      	; 0x4132 <getLeftSpeedFromInput+0x2aa>
    4130:	19 c1       	rjmp	.+562    	; 0x4364 <getLeftSpeedFromInput+0x4dc>
    4132:	80 91 4c 09 	lds	r24, 0x094C
    4136:	90 91 4d 09 	lds	r25, 0x094D
    413a:	8c 17       	cp	r24, r28
    413c:	9d 07       	cpc	r25, r29
    413e:	34 f0       	brlt	.+12     	; 0x414c <getLeftSpeedFromInput+0x2c4>
    4140:	ff ef       	ldi	r31, 0xFF	; 255
    4142:	8f 16       	cp	r8, r31
    4144:	ff ef       	ldi	r31, 0xFF	; 255
    4146:	9f 06       	cpc	r9, r31
    4148:	09 f4       	brne	.+2      	; 0x414c <getLeftSpeedFromInput+0x2c4>
    414a:	08 c1       	rjmp	.+528    	; 0x435c <getLeftSpeedFromInput+0x4d4>
    414c:	80 91 5c 09 	lds	r24, 0x095C
    4150:	90 91 5d 09 	lds	r25, 0x095D
    4154:	8c 17       	cp	r24, r28
    4156:	9d 07       	cpc	r25, r29
    4158:	34 f0       	brlt	.+12     	; 0x4166 <getLeftSpeedFromInput+0x2de>
    415a:	2f ef       	ldi	r18, 0xFF	; 255
    415c:	82 16       	cp	r8, r18
    415e:	2f ef       	ldi	r18, 0xFF	; 255
    4160:	92 06       	cpc	r9, r18
    4162:	09 f4       	brne	.+2      	; 0x4166 <getLeftSpeedFromInput+0x2de>
    4164:	f7 c0       	rjmp	.+494    	; 0x4354 <getLeftSpeedFromInput+0x4cc>
    4166:	c0 90 6c 09 	lds	r12, 0x096C
    416a:	d0 90 6d 09 	lds	r13, 0x096D
    416e:	cc 16       	cp	r12, r28
    4170:	dd 06       	cpc	r13, r29
    4172:	34 f0       	brlt	.+12     	; 0x4180 <getLeftSpeedFromInput+0x2f8>
    4174:	3f ef       	ldi	r19, 0xFF	; 255
    4176:	83 16       	cp	r8, r19
    4178:	3f ef       	ldi	r19, 0xFF	; 255
    417a:	93 06       	cpc	r9, r19
    417c:	09 f4       	brne	.+2      	; 0x4180 <getLeftSpeedFromInput+0x2f8>
    417e:	7e c0       	rjmp	.+252    	; 0x427c <getLeftSpeedFromInput+0x3f4>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    4180:	81 14       	cp	r8, r1
    4182:	91 04       	cpc	r9, r1
    4184:	09 f0       	breq	.+2      	; 0x4188 <getLeftSpeedFromInput+0x300>
    4186:	7d c0       	rjmp	.+250    	; 0x4282 <getLeftSpeedFromInput+0x3fa>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    4188:	80 91 ee 08 	lds	r24, 0x08EE
    418c:	90 91 ef 08 	lds	r25, 0x08EF
    4190:	9c 01       	movw	r18, r24
    4192:	c2 9f       	mul	r28, r18
    4194:	c0 01       	movw	r24, r0
    4196:	c3 9f       	mul	r28, r19
    4198:	90 0d       	add	r25, r0
    419a:	d2 9f       	mul	r29, r18
    419c:	90 0d       	add	r25, r0
    419e:	11 24       	eor	r1, r1
    41a0:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__divmodhi4>
    41a4:	cb 01       	movw	r24, r22
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    41a6:	90 95       	com	r25
    41a8:	81 95       	neg	r24
    41aa:	9f 4f       	sbci	r25, 0xFF	; 255
    41ac:	90 93 c1 04 	sts	0x04C1, r25
    41b0:	80 93 c0 04 	sts	0x04C0, r24
    41b4:	65 cf       	rjmp	.-310    	; 0x4080 <getLeftSpeedFromInput+0x1f8>

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    41b6:	88 24       	eor	r8, r8
    41b8:	99 24       	eor	r9, r9
    41ba:	87 ce       	rjmp	.-754    	; 0x3eca <getLeftSpeedFromInput+0x42>
    41bc:	e8 e0       	ldi	r30, 0x08	; 8
    41be:	8e 2e       	mov	r8, r30
    41c0:	91 2c       	mov	r9, r1
    41c2:	ee ce       	rjmp	.-548    	; 0x3fa0 <getLeftSpeedFromInput+0x118>
    41c4:	f7 e0       	ldi	r31, 0x07	; 7
    41c6:	8f 2e       	mov	r8, r31
    41c8:	91 2c       	mov	r9, r1
    41ca:	dd ce       	rjmp	.-582    	; 0x3f86 <getLeftSpeedFromInput+0xfe>
    41cc:	a6 e0       	ldi	r26, 0x06	; 6
    41ce:	8a 2e       	mov	r8, r26
    41d0:	91 2c       	mov	r9, r1
    41d2:	cc ce       	rjmp	.-616    	; 0x3f6c <getLeftSpeedFromInput+0xe4>
    41d4:	b5 e0       	ldi	r27, 0x05	; 5
    41d6:	8b 2e       	mov	r8, r27
    41d8:	91 2c       	mov	r9, r1
    41da:	bb ce       	rjmp	.-650    	; 0x3f52 <getLeftSpeedFromInput+0xca>
    41dc:	14 e0       	ldi	r17, 0x04	; 4
    41de:	81 2e       	mov	r8, r17
    41e0:	91 2c       	mov	r9, r1
    41e2:	aa ce       	rjmp	.-684    	; 0x3f38 <getLeftSpeedFromInput+0xb0>
    41e4:	03 e0       	ldi	r16, 0x03	; 3
    41e6:	80 2e       	mov	r8, r16
    41e8:	91 2c       	mov	r9, r1
    41ea:	99 ce       	rjmp	.-718    	; 0x3f1e <getLeftSpeedFromInput+0x96>
    41ec:	82 e0       	ldi	r24, 0x02	; 2
    41ee:	88 2e       	mov	r8, r24
    41f0:	91 2c       	mov	r9, r1
    41f2:	88 ce       	rjmp	.-752    	; 0x3f04 <getLeftSpeedFromInput+0x7c>
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	77 ce       	rjmp	.-786    	; 0x3ee6 <getLeftSpeedFromInput+0x5e>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    41f8:	60 91 66 09 	lds	r22, 0x0966
    41fc:	70 91 67 09 	lds	r23, 0x0967
    4200:	88 27       	eor	r24, r24
    4202:	77 fd       	sbrc	r23, 7
    4204:	80 95       	com	r24
    4206:	98 2f       	mov	r25, r24
    4208:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    420c:	7b 01       	movw	r14, r22
    420e:	8c 01       	movw	r16, r24
    4210:	be 01       	movw	r22, r28
    4212:	88 27       	eor	r24, r24
    4214:	77 fd       	sbrc	r23, 7
    4216:	80 95       	com	r24
    4218:	98 2f       	mov	r25, r24
    421a:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    421e:	9b 01       	movw	r18, r22
    4220:	ac 01       	movw	r20, r24
    4222:	c8 01       	movw	r24, r16
    4224:	b7 01       	movw	r22, r14
    4226:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    422a:	7b 01       	movw	r14, r22
    422c:	8c 01       	movw	r16, r24
    422e:	b6 01       	movw	r22, r12
    4230:	88 27       	eor	r24, r24
    4232:	77 fd       	sbrc	r23, 7
    4234:	80 95       	com	r24
    4236:	98 2f       	mov	r25, r24
    4238:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    423c:	9b 01       	movw	r18, r22
    423e:	ac 01       	movw	r20, r24
    4240:	c8 01       	movw	r24, r16
    4242:	b7 01       	movw	r22, r14
    4244:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    4248:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    424c:	70 93 c1 04 	sts	0x04C1, r23
    4250:	60 93 c0 04 	sts	0x04C0, r22
    4254:	15 cf       	rjmp	.-470    	; 0x4080 <getLeftSpeedFromInput+0x1f8>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    4256:	80 91 e6 08 	lds	r24, 0x08E6
    425a:	90 91 e7 08 	lds	r25, 0x08E7
    425e:	9c 01       	movw	r18, r24
    4260:	c2 9f       	mul	r28, r18
    4262:	c0 01       	movw	r24, r0
    4264:	c3 9f       	mul	r28, r19
    4266:	90 0d       	add	r25, r0
    4268:	d2 9f       	mul	r29, r18
    426a:	90 0d       	add	r25, r0
    426c:	11 24       	eor	r1, r1
    426e:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__divmodhi4>
    4272:	70 93 c1 04 	sts	0x04C1, r23
    4276:	60 93 c0 04 	sts	0x04C0, r22
    427a:	02 cf       	rjmp	.-508    	; 0x4080 <getLeftSpeedFromInput+0x1f8>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    427c:	98 e0       	ldi	r25, 0x08	; 8
    427e:	89 2e       	mov	r8, r25
    4280:	91 2c       	mov	r9, r1
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    4282:	3f ef       	ldi	r19, 0xFF	; 255
    4284:	83 16       	cp	r8, r19
    4286:	3f ef       	ldi	r19, 0xFF	; 255
    4288:	93 06       	cpc	r9, r19
    428a:	09 f4       	brne	.+2      	; 0x428e <getLeftSpeedFromInput+0x406>
    428c:	7b c0       	rjmp	.+246    	; 0x4384 <getLeftSpeedFromInput+0x4fc>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    428e:	f4 01       	movw	r30, r8
    4290:	31 97       	sbiw	r30, 0x01	; 1
    4292:	ee 0f       	add	r30, r30
    4294:	ff 1f       	adc	r31, r31
    4296:	ee 0f       	add	r30, r30
    4298:	ff 1f       	adc	r31, r31
    429a:	ee 0f       	add	r30, r30
    429c:	ff 1f       	adc	r31, r31
    429e:	ee 0f       	add	r30, r30
    42a0:	ff 1f       	adc	r31, r31
    42a2:	df 01       	movw	r26, r30
    42a4:	a4 51       	subi	r26, 0x14	; 20
    42a6:	b7 4f       	sbci	r27, 0xF7	; 247
    42a8:	cd 90       	ld	r12, X+
    42aa:	dc 90       	ld	r13, X
    42ac:	ec 51       	subi	r30, 0x1C	; 28
    42ae:	f7 4f       	sbci	r31, 0xF7	; 247
    42b0:	a2 84       	ldd	r10, Z+10	; 0x0a
    42b2:	b3 84       	ldd	r11, Z+11	; 0x0b
    42b4:	cc 19       	sub	r28, r12
    42b6:	dd 09       	sbc	r29, r13
    42b8:	be 01       	movw	r22, r28
    42ba:	88 27       	eor	r24, r24
    42bc:	77 fd       	sbrc	r23, 7
    42be:	80 95       	com	r24
    42c0:	98 2f       	mov	r25, r24
    42c2:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    42c6:	7b 01       	movw	r14, r22
    42c8:	8c 01       	movw	r16, r24
    42ca:	f4 01       	movw	r30, r8
    42cc:	e2 95       	swap	r30
    42ce:	f2 95       	swap	r31
    42d0:	f0 7f       	andi	r31, 0xF0	; 240
    42d2:	fe 27       	eor	r31, r30
    42d4:	e0 7f       	andi	r30, 0xF0	; 240
    42d6:	fe 27       	eor	r31, r30
    42d8:	ec 51       	subi	r30, 0x1C	; 28
    42da:	f7 4f       	sbci	r31, 0xF7	; 247
    42dc:	62 85       	ldd	r22, Z+10	; 0x0a
    42de:	73 85       	ldd	r23, Z+11	; 0x0b
    42e0:	6a 19       	sub	r22, r10
    42e2:	7b 09       	sbc	r23, r11
    42e4:	88 27       	eor	r24, r24
    42e6:	77 fd       	sbrc	r23, 7
    42e8:	80 95       	com	r24
    42ea:	98 2f       	mov	r25, r24
    42ec:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    42f0:	9b 01       	movw	r18, r22
    42f2:	ac 01       	movw	r20, r24
    42f4:	c8 01       	movw	r24, r16
    42f6:	b7 01       	movw	r22, r14
    42f8:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    42fc:	7b 01       	movw	r14, r22
    42fe:	8c 01       	movw	r16, r24
    4300:	88 0c       	add	r8, r8
    4302:	99 1c       	adc	r9, r9
    4304:	88 0c       	add	r8, r8
    4306:	99 1c       	adc	r9, r9
    4308:	88 0c       	add	r8, r8
    430a:	99 1c       	adc	r9, r9
    430c:	88 0c       	add	r8, r8
    430e:	99 1c       	adc	r9, r9
    4310:	8c ee       	ldi	r24, 0xEC	; 236
    4312:	98 e0       	ldi	r25, 0x08	; 8
    4314:	88 0e       	add	r8, r24
    4316:	99 1e       	adc	r9, r25
    4318:	f4 01       	movw	r30, r8
    431a:	60 81       	ld	r22, Z
    431c:	71 81       	ldd	r23, Z+1	; 0x01
    431e:	6c 19       	sub	r22, r12
    4320:	7d 09       	sbc	r23, r13
    4322:	88 27       	eor	r24, r24
    4324:	77 fd       	sbrc	r23, 7
    4326:	80 95       	com	r24
    4328:	98 2f       	mov	r25, r24
    432a:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    432e:	9b 01       	movw	r18, r22
    4330:	ac 01       	movw	r20, r24
    4332:	c8 01       	movw	r24, r16
    4334:	b7 01       	movw	r22, r14
    4336:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    433a:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    433e:	6a 0d       	add	r22, r10
    4340:	7b 1d       	adc	r23, r11
    4342:	cb 01       	movw	r24, r22
    4344:	30 cf       	rjmp	.-416    	; 0x41a6 <getLeftSpeedFromInput+0x31e>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    4346:	88 24       	eor	r8, r8
    4348:	99 24       	eor	r9, r9
    434a:	b2 ce       	rjmp	.-668    	; 0x40b0 <getLeftSpeedFromInput+0x228>
    434c:	a1 e0       	ldi	r26, 0x01	; 1
    434e:	8a 2e       	mov	r8, r26
    4350:	91 2c       	mov	r9, r1
    4352:	bb ce       	rjmp	.-650    	; 0x40ca <getLeftSpeedFromInput+0x242>
    4354:	27 e0       	ldi	r18, 0x07	; 7
    4356:	82 2e       	mov	r8, r18
    4358:	91 2c       	mov	r9, r1
    435a:	05 cf       	rjmp	.-502    	; 0x4166 <getLeftSpeedFromInput+0x2de>
    435c:	36 e0       	ldi	r19, 0x06	; 6
    435e:	83 2e       	mov	r8, r19
    4360:	91 2c       	mov	r9, r1
    4362:	f4 ce       	rjmp	.-536    	; 0x414c <getLeftSpeedFromInput+0x2c4>
    4364:	45 e0       	ldi	r20, 0x05	; 5
    4366:	84 2e       	mov	r8, r20
    4368:	91 2c       	mov	r9, r1
    436a:	e3 ce       	rjmp	.-570    	; 0x4132 <getLeftSpeedFromInput+0x2aa>
    436c:	54 e0       	ldi	r21, 0x04	; 4
    436e:	85 2e       	mov	r8, r21
    4370:	91 2c       	mov	r9, r1
    4372:	d2 ce       	rjmp	.-604    	; 0x4118 <getLeftSpeedFromInput+0x290>
    4374:	e3 e0       	ldi	r30, 0x03	; 3
    4376:	8e 2e       	mov	r8, r30
    4378:	91 2c       	mov	r9, r1
    437a:	c1 ce       	rjmp	.-638    	; 0x40fe <getLeftSpeedFromInput+0x276>
    437c:	f2 e0       	ldi	r31, 0x02	; 2
    437e:	8f 2e       	mov	r8, r31
    4380:	91 2c       	mov	r9, r1
    4382:	b0 ce       	rjmp	.-672    	; 0x40e4 <getLeftSpeedFromInput+0x25c>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    4384:	60 91 6e 09 	lds	r22, 0x096E
    4388:	70 91 6f 09 	lds	r23, 0x096F
    438c:	88 27       	eor	r24, r24
    438e:	77 fd       	sbrc	r23, 7
    4390:	80 95       	com	r24
    4392:	98 2f       	mov	r25, r24
    4394:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    4398:	7b 01       	movw	r14, r22
    439a:	8c 01       	movw	r16, r24
    439c:	be 01       	movw	r22, r28
    439e:	88 27       	eor	r24, r24
    43a0:	77 fd       	sbrc	r23, 7
    43a2:	80 95       	com	r24
    43a4:	98 2f       	mov	r25, r24
    43a6:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    43aa:	9b 01       	movw	r18, r22
    43ac:	ac 01       	movw	r20, r24
    43ae:	c8 01       	movw	r24, r16
    43b0:	b7 01       	movw	r22, r14
    43b2:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    43b6:	7b 01       	movw	r14, r22
    43b8:	8c 01       	movw	r16, r24
    43ba:	b6 01       	movw	r22, r12
    43bc:	88 27       	eor	r24, r24
    43be:	77 fd       	sbrc	r23, 7
    43c0:	80 95       	com	r24
    43c2:	98 2f       	mov	r25, r24
    43c4:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    43c8:	9b 01       	movw	r18, r22
    43ca:	ac 01       	movw	r20, r24
    43cc:	c8 01       	movw	r24, r16
    43ce:	b7 01       	movw	r22, r14
    43d0:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    43d4:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    43d8:	cb 01       	movw	r24, r22
    43da:	e5 ce       	rjmp	.-566    	; 0x41a6 <getLeftSpeedFromInput+0x31e>

000043dc <__vector_45>:

}


// Motor left
ISR(TIMER4_OVF_vect) {
    43dc:	1f 92       	push	r1
    43de:	0f 92       	push	r0
    43e0:	0f b6       	in	r0, 0x3f	; 63
    43e2:	0f 92       	push	r0
    43e4:	11 24       	eor	r1, r1
    43e6:	8f 93       	push	r24
    43e8:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    43ea:	80 91 76 04 	lds	r24, 0x0476
    43ee:	88 23       	and	r24, r24
    43f0:	c1 f1       	breq	.+112    	; 0x4462 <__vector_45+0x86>
		pwm_left = 0;
    43f2:	10 92 f4 02 	sts	0x02F4, r1
    43f6:	10 92 f3 02 	sts	0x02F3, r1
		OCR4A = 0;
    43fa:	10 92 a9 00 	sts	0x00A9, r1
    43fe:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    4402:	10 92 ab 00 	sts	0x00AB, r1
    4406:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    440a:	10 92 de 02 	sts	0x02DE, r1
    440e:	10 92 dd 02 	sts	0x02DD, r1


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    4412:	80 91 e7 02 	lds	r24, 0x02E7
    4416:	90 91 e8 02 	lds	r25, 0x02E8
    441a:	97 fd       	sbrc	r25, 7
    441c:	79 c0       	rjmp	.+242    	; 0x4510 <__vector_45+0x134>
			leftMotorPhase = PASSIVE_PHASE;
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	80 93 24 02 	sts	0x0224, r24
			currentMotLeftChannel = 14;
    4424:	8e e0       	ldi	r24, 0x0E	; 14
    4426:	80 93 21 02 	sts	0x0221, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	80 93 06 02 	sts	0x0206, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    4430:	80 91 a0 00 	lds	r24, 0x00A0
    4434:	8f 75       	andi	r24, 0x5F	; 95
    4436:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    443a:	80 91 02 01 	lds	r24, 0x0102
    443e:	87 7e       	andi	r24, 0xE7	; 231
    4440:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    4444:	80 91 72 00 	lds	r24, 0x0072
    4448:	89 7f       	andi	r24, 0xF9	; 249
    444a:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    444e:	89 b3       	in	r24, 0x19	; 25
    4450:	86 60       	ori	r24, 0x06	; 6
    4452:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    4454:	9f 91       	pop	r25
    4456:	8f 91       	pop	r24
    4458:	0f 90       	pop	r0
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	0f 90       	pop	r0
    445e:	1f 90       	pop	r1
    4460:	18 95       	reti
		pwm_left = 0;
		OCR4A = 0;
		OCR4B = 0;
	}

	left_current_avg = 0;
    4462:	10 92 de 02 	sts	0x02DE, r1
    4466:	10 92 dd 02 	sts	0x02DD, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    446a:	80 91 f3 02 	lds	r24, 0x02F3
    446e:	90 91 f4 02 	lds	r25, 0x02F4
    4472:	00 97       	sbiw	r24, 0x00	; 0
    4474:	71 f2       	breq	.-100    	; 0x4412 <__vector_45+0x36>
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    4476:	18 16       	cp	r1, r24
    4478:	19 06       	cpc	r1, r25
    447a:	2c f5       	brge	.+74     	; 0x44c6 <__vector_45+0xea>
		leftMotorPhase = ACTIVE_PHASE;
    447c:	10 92 24 02 	sts	0x0224, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    4480:	8f e0       	ldi	r24, 0x0F	; 15
    4482:	80 93 21 02 	sts	0x0221, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    4486:	80 91 a0 00 	lds	r24, 0x00A0
    448a:	8f 7d       	andi	r24, 0xDF	; 223
    448c:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    4490:	80 91 72 00 	lds	r24, 0x0072
    4494:	8b 7f       	andi	r24, 0xFB	; 251
    4496:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    449a:	80 91 02 01 	lds	r24, 0x0102
    449e:	8f 7e       	andi	r24, 0xEF	; 239
    44a0:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    44a4:	80 91 a0 00 	lds	r24, 0x00A0
    44a8:	80 68       	ori	r24, 0x80	; 128
    44aa:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    44ae:	80 91 72 00 	lds	r24, 0x0072
    44b2:	82 60       	ori	r24, 0x02	; 2
    44b4:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    44b8:	9f 91       	pop	r25
    44ba:	8f 91       	pop	r24
    44bc:	0f 90       	pop	r0
    44be:	0f be       	out	0x3f, r0	; 63
    44c0:	0f 90       	pop	r0
    44c2:	1f 90       	pop	r1
    44c4:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    44c6:	10 92 24 02 	sts	0x0224, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    44ca:	8e e0       	ldi	r24, 0x0E	; 14
    44cc:	80 93 21 02 	sts	0x0221, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    44d0:	80 91 a0 00 	lds	r24, 0x00A0
    44d4:	8f 77       	andi	r24, 0x7F	; 127
    44d6:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    44da:	80 91 72 00 	lds	r24, 0x0072
    44de:	8d 7f       	andi	r24, 0xFD	; 253
    44e0:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    44e4:	80 91 02 01 	lds	r24, 0x0102
    44e8:	87 7f       	andi	r24, 0xF7	; 247
    44ea:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    44ee:	80 91 a0 00 	lds	r24, 0x00A0
    44f2:	80 62       	ori	r24, 0x20	; 32
    44f4:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    44f8:	80 91 72 00 	lds	r24, 0x0072
    44fc:	84 60       	ori	r24, 0x04	; 4
    44fe:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    4502:	9f 91       	pop	r25
    4504:	8f 91       	pop	r24
    4506:	0f 90       	pop	r0
    4508:	0f be       	out	0x3f, r0	; 63
    450a:	0f 90       	pop	r0
    450c:	1f 90       	pop	r1
    450e:	18 95       	reti

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	80 93 24 02 	sts	0x0224, r24
			currentMotLeftChannel = 15;
    4516:	8f e0       	ldi	r24, 0x0F	; 15
    4518:	80 93 21 02 	sts	0x0221, r24
    451c:	86 cf       	rjmp	.-244    	; 0x442a <__vector_45+0x4e>

0000451e <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    451e:	1f 92       	push	r1
    4520:	0f 92       	push	r0
    4522:	0f b6       	in	r0, 0x3f	; 63
    4524:	0f 92       	push	r0
    4526:	11 24       	eor	r1, r1
    4528:	8f 93       	push	r24
    452a:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    452c:	91 e0       	ldi	r25, 0x01	; 1
    452e:	90 93 24 02 	sts	0x0224, r25
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    4532:	8e e0       	ldi	r24, 0x0E	; 14
    4534:	80 93 21 02 	sts	0x0221, r24

	firstSampleLeft = 1;
    4538:	90 93 06 02 	sts	0x0206, r25

//	LED_GREEN_OFF;

}
    453c:	9f 91       	pop	r25
    453e:	8f 91       	pop	r24
    4540:	0f 90       	pop	r0
    4542:	0f be       	out	0x3f, r0	; 63
    4544:	0f 90       	pop	r0
    4546:	1f 90       	pop	r1
    4548:	18 95       	reti

0000454a <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    454a:	1f 92       	push	r1
    454c:	0f 92       	push	r0
    454e:	0f b6       	in	r0, 0x3f	; 63
    4550:	0f 92       	push	r0
    4552:	11 24       	eor	r1, r1
    4554:	8f 93       	push	r24
    4556:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    4558:	91 e0       	ldi	r25, 0x01	; 1
    455a:	90 93 24 02 	sts	0x0224, r25
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    455e:	8f e0       	ldi	r24, 0x0F	; 15
    4560:	80 93 21 02 	sts	0x0221, r24

	firstSampleLeft = 1;
    4564:	90 93 06 02 	sts	0x0206, r25

//	LED_GREEN_OFF;

}
    4568:	9f 91       	pop	r25
    456a:	8f 91       	pop	r24
    456c:	0f 90       	pop	r0
    456e:	0f be       	out	0x3f, r0	; 63
    4570:	0f 90       	pop	r0
    4572:	1f 90       	pop	r1
    4574:	18 95       	reti

00004576 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    4576:	1f 92       	push	r1
    4578:	0f 92       	push	r0
    457a:	0f b6       	in	r0, 0x3f	; 63
    457c:	0f 92       	push	r0
    457e:	11 24       	eor	r1, r1
    4580:	8f 93       	push	r24
    4582:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    4584:	80 91 76 04 	lds	r24, 0x0476
    4588:	88 23       	and	r24, r24
    458a:	b1 f1       	breq	.+108    	; 0x45f8 <__vector_35+0x82>
		pwm_right = 0;
    458c:	10 92 f2 02 	sts	0x02F2, r1
    4590:	10 92 f1 02 	sts	0x02F1, r1
		OCR3A = 0;
    4594:	10 92 99 00 	sts	0x0099, r1
    4598:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    459c:	10 92 9b 00 	sts	0x009B, r1
    45a0:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    45a4:	10 92 e0 02 	sts	0x02E0, r1
    45a8:	10 92 df 02 	sts	0x02DF, r1
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    45ac:	80 91 e5 02 	lds	r24, 0x02E5
    45b0:	90 91 e6 02 	lds	r25, 0x02E6
    45b4:	97 fd       	sbrc	r25, 7
    45b6:	6f c0       	rjmp	.+222    	; 0x4696 <__vector_35+0x120>
			rightMotorPhase = PASSIVE_PHASE;
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	80 93 23 02 	sts	0x0223, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    45be:	8c e0       	ldi	r24, 0x0C	; 12
    45c0:	80 93 22 02 	sts	0x0222, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	80 93 05 02 	sts	0x0205, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    45ca:	80 91 90 00 	lds	r24, 0x0090
    45ce:	8f 75       	andi	r24, 0x5F	; 95
    45d0:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    45d4:	8e b1       	in	r24, 0x0e	; 14
    45d6:	87 7e       	andi	r24, 0xE7	; 231
    45d8:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    45da:	80 91 71 00 	lds	r24, 0x0071
    45de:	89 7f       	andi	r24, 0xF9	; 249
    45e0:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    45e4:	88 b3       	in	r24, 0x18	; 24
    45e6:	86 60       	ori	r24, 0x06	; 6
    45e8:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    45ea:	9f 91       	pop	r25
    45ec:	8f 91       	pop	r24
    45ee:	0f 90       	pop	r0
    45f0:	0f be       	out	0x3f, r0	; 63
    45f2:	0f 90       	pop	r0
    45f4:	1f 90       	pop	r1
    45f6:	18 95       	reti
		pwm_right = 0;
		OCR3A = 0;
		OCR3B = 0;
	}

	right_current_avg = 0;
    45f8:	10 92 e0 02 	sts	0x02E0, r1
    45fc:	10 92 df 02 	sts	0x02DF, r1


	if(pwm_right == 0) {
    4600:	80 91 f1 02 	lds	r24, 0x02F1
    4604:	90 91 f2 02 	lds	r25, 0x02F2
    4608:	00 97       	sbiw	r24, 0x00	; 0
    460a:	81 f2       	breq	.-96     	; 0x45ac <__vector_35+0x36>
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    460c:	18 16       	cp	r1, r24
    460e:	19 06       	cpc	r1, r25
    4610:	0c f5       	brge	.+66     	; 0x4654 <__vector_35+0xde>
		rightMotorPhase = ACTIVE_PHASE;
    4612:	10 92 23 02 	sts	0x0223, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    4616:	8d e0       	ldi	r24, 0x0D	; 13
    4618:	80 93 22 02 	sts	0x0222, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    461c:	80 91 90 00 	lds	r24, 0x0090
    4620:	8f 7d       	andi	r24, 0xDF	; 223
    4622:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    4626:	80 91 71 00 	lds	r24, 0x0071
    462a:	8b 7f       	andi	r24, 0xFB	; 251
    462c:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    4630:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    4632:	80 91 90 00 	lds	r24, 0x0090
    4636:	80 68       	ori	r24, 0x80	; 128
    4638:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    463c:	80 91 71 00 	lds	r24, 0x0071
    4640:	82 60       	ori	r24, 0x02	; 2
    4642:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    4646:	9f 91       	pop	r25
    4648:	8f 91       	pop	r24
    464a:	0f 90       	pop	r0
    464c:	0f be       	out	0x3f, r0	; 63
    464e:	0f 90       	pop	r0
    4650:	1f 90       	pop	r1
    4652:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    4654:	10 92 23 02 	sts	0x0223, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    4658:	8c e0       	ldi	r24, 0x0C	; 12
    465a:	80 93 22 02 	sts	0x0222, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    465e:	80 91 90 00 	lds	r24, 0x0090
    4662:	8f 77       	andi	r24, 0x7F	; 127
    4664:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    4668:	80 91 71 00 	lds	r24, 0x0071
    466c:	8d 7f       	andi	r24, 0xFD	; 253
    466e:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    4672:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    4674:	80 91 90 00 	lds	r24, 0x0090
    4678:	80 62       	ori	r24, 0x20	; 32
    467a:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    467e:	80 91 71 00 	lds	r24, 0x0071
    4682:	84 60       	ori	r24, 0x04	; 4
    4684:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    4688:	9f 91       	pop	r25
    468a:	8f 91       	pop	r24
    468c:	0f 90       	pop	r0
    468e:	0f be       	out	0x3f, r0	; 63
    4690:	0f 90       	pop	r0
    4692:	1f 90       	pop	r1
    4694:	18 95       	reti
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	80 93 23 02 	sts	0x0223, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    469c:	8d e0       	ldi	r24, 0x0D	; 13
    469e:	80 93 22 02 	sts	0x0222, r24
    46a2:	90 cf       	rjmp	.-224    	; 0x45c4 <__vector_35+0x4e>

000046a4 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    46a4:	1f 92       	push	r1
    46a6:	0f 92       	push	r0
    46a8:	0f b6       	in	r0, 0x3f	; 63
    46aa:	0f 92       	push	r0
    46ac:	11 24       	eor	r1, r1
    46ae:	8f 93       	push	r24
    46b0:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    46b2:	91 e0       	ldi	r25, 0x01	; 1
    46b4:	90 93 23 02 	sts	0x0223, r25
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    46b8:	8c e0       	ldi	r24, 0x0C	; 12
    46ba:	80 93 22 02 	sts	0x0222, r24

	firstSampleRight = 1;
    46be:	90 93 05 02 	sts	0x0205, r25

//	LED_RED_OFF;

}
    46c2:	9f 91       	pop	r25
    46c4:	8f 91       	pop	r24
    46c6:	0f 90       	pop	r0
    46c8:	0f be       	out	0x3f, r0	; 63
    46ca:	0f 90       	pop	r0
    46cc:	1f 90       	pop	r1
    46ce:	18 95       	reti

000046d0 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    46d0:	1f 92       	push	r1
    46d2:	0f 92       	push	r0
    46d4:	0f b6       	in	r0, 0x3f	; 63
    46d6:	0f 92       	push	r0
    46d8:	11 24       	eor	r1, r1
    46da:	8f 93       	push	r24
    46dc:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    46de:	91 e0       	ldi	r25, 0x01	; 1
    46e0:	90 93 23 02 	sts	0x0223, r25
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    46e4:	8d e0       	ldi	r24, 0x0D	; 13
    46e6:	80 93 22 02 	sts	0x0222, r24

	firstSampleRight = 1;
    46ea:	90 93 05 02 	sts	0x0205, r25

//	LED_RED_OFF;
}
    46ee:	9f 91       	pop	r25
    46f0:	8f 91       	pop	r24
    46f2:	0f 90       	pop	r0
    46f4:	0f be       	out	0x3f, r0	; 63
    46f6:	0f 90       	pop	r0
    46f8:	1f 90       	pop	r1
    46fa:	18 95       	reti

000046fc <handleSoftAcceleration>:

// Handle "soft acceleration" that basically increase or decrease the current speed
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
    46fc:	9f 92       	push	r9
    46fe:	af 92       	push	r10
    4700:	bf 92       	push	r11
    4702:	cf 92       	push	r12
    4704:	df 92       	push	r13
    4706:	ef 92       	push	r14
    4708:	ff 92       	push	r15
    470a:	0f 93       	push	r16
    470c:	1f 93       	push	r17
		
	if(calibrateOdomFlag==0) {
    470e:	80 91 70 05 	lds	r24, 0x0570
    4712:	88 23       	and	r24, r24
    4714:	51 f0       	breq	.+20     	; 0x472a <handleSoftAcceleration+0x2e>
			}

		}
	}

}
    4716:	1f 91       	pop	r17
    4718:	0f 91       	pop	r16
    471a:	ff 90       	pop	r15
    471c:	ef 90       	pop	r14
    471e:	df 90       	pop	r13
    4720:	cf 90       	pop	r12
    4722:	bf 90       	pop	r11
    4724:	af 90       	pop	r10
    4726:	9f 90       	pop	r9
    4728:	08 95       	ret
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    472a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    472e:	8b 01       	movw	r16, r22
    4730:	9c 01       	movw	r18, r24
    4732:	40 e0       	ldi	r20, 0x00	; 0
    4734:	50 e0       	ldi	r21, 0x00	; 0
    4736:	60 e0       	ldi	r22, 0x00	; 0
    4738:	70 e0       	ldi	r23, 0x00	; 0
    473a:	80 91 64 04 	lds	r24, 0x0464
    473e:	90 91 65 04 	lds	r25, 0x0465
    4742:	f0 91 66 04 	lds	r31, 0x0466
    4746:	b0 91 67 04 	lds	r27, 0x0467
    474a:	e0 90 68 04 	lds	r14, 0x0468
    474e:	c0 90 69 04 	lds	r12, 0x0469
    4752:	a0 90 6a 04 	lds	r10, 0x046A
    4756:	a0 91 6b 04 	lds	r26, 0x046B
    475a:	90 2e       	mov	r9, r16
    475c:	98 1a       	sub	r9, r24
    475e:	e1 e0       	ldi	r30, 0x01	; 1
    4760:	09 15       	cp	r16, r9
    4762:	08 f0       	brcs	.+2      	; 0x4766 <handleSoftAcceleration+0x6a>
    4764:	08 c1       	rjmp	.+528    	; 0x4976 <handleSoftAcceleration+0x27a>
    4766:	81 2f       	mov	r24, r17
    4768:	89 1b       	sub	r24, r25
    476a:	91 e0       	ldi	r25, 0x01	; 1
    476c:	18 17       	cp	r17, r24
    476e:	08 f0       	brcs	.+2      	; 0x4772 <handleSoftAcceleration+0x76>
    4770:	fa c0       	rjmp	.+500    	; 0x4966 <handleSoftAcceleration+0x26a>
    4772:	f8 2e       	mov	r15, r24
    4774:	fe 1a       	sub	r15, r30
    4776:	e1 e0       	ldi	r30, 0x01	; 1
    4778:	8f 15       	cp	r24, r15
    477a:	08 f0       	brcs	.+2      	; 0x477e <handleSoftAcceleration+0x82>
    477c:	eb c0       	rjmp	.+470    	; 0x4954 <handleSoftAcceleration+0x258>
    477e:	9e 2b       	or	r25, r30
    4780:	82 2f       	mov	r24, r18
    4782:	8f 1b       	sub	r24, r31
    4784:	e1 e0       	ldi	r30, 0x01	; 1
    4786:	28 17       	cp	r18, r24
    4788:	08 f0       	brcs	.+2      	; 0x478c <handleSoftAcceleration+0x90>
    478a:	dc c0       	rjmp	.+440    	; 0x4944 <handleSoftAcceleration+0x248>
    478c:	b8 2e       	mov	r11, r24
    478e:	b9 1a       	sub	r11, r25
    4790:	91 e0       	ldi	r25, 0x01	; 1
    4792:	8b 15       	cp	r24, r11
    4794:	08 f0       	brcs	.+2      	; 0x4798 <handleSoftAcceleration+0x9c>
    4796:	cd c0       	rjmp	.+410    	; 0x4932 <handleSoftAcceleration+0x236>
    4798:	e9 2b       	or	r30, r25
    479a:	83 2f       	mov	r24, r19
    479c:	8b 1b       	sub	r24, r27
    479e:	91 e0       	ldi	r25, 0x01	; 1
    47a0:	38 17       	cp	r19, r24
    47a2:	08 f0       	brcs	.+2      	; 0x47a6 <handleSoftAcceleration+0xaa>
    47a4:	be c0       	rjmp	.+380    	; 0x4922 <handleSoftAcceleration+0x226>
    47a6:	d8 2e       	mov	r13, r24
    47a8:	de 1a       	sub	r13, r30
    47aa:	e1 e0       	ldi	r30, 0x01	; 1
    47ac:	8d 15       	cp	r24, r13
    47ae:	08 f0       	brcs	.+2      	; 0x47b2 <handleSoftAcceleration+0xb6>
    47b0:	af c0       	rjmp	.+350    	; 0x4910 <handleSoftAcceleration+0x214>
    47b2:	9e 2b       	or	r25, r30
    47b4:	8e 2d       	mov	r24, r14
    47b6:	81 95       	neg	r24
    47b8:	e1 e0       	ldi	r30, 0x01	; 1
    47ba:	48 17       	cp	r20, r24
    47bc:	08 f0       	brcs	.+2      	; 0x47c0 <handleSoftAcceleration+0xc4>
    47be:	a0 c0       	rjmp	.+320    	; 0x4900 <handleSoftAcceleration+0x204>
    47c0:	b8 2f       	mov	r27, r24
    47c2:	b9 1b       	sub	r27, r25
    47c4:	91 e0       	ldi	r25, 0x01	; 1
    47c6:	8b 17       	cp	r24, r27
    47c8:	08 f0       	brcs	.+2      	; 0x47cc <handleSoftAcceleration+0xd0>
    47ca:	91 c0       	rjmp	.+290    	; 0x48ee <handleSoftAcceleration+0x1f2>
    47cc:	e9 2b       	or	r30, r25
    47ce:	8c 2d       	mov	r24, r12
    47d0:	81 95       	neg	r24
    47d2:	f1 e0       	ldi	r31, 0x01	; 1
    47d4:	58 17       	cp	r21, r24
    47d6:	08 f0       	brcs	.+2      	; 0x47da <handleSoftAcceleration+0xde>
    47d8:	81 c0       	rjmp	.+258    	; 0x48dc <handleSoftAcceleration+0x1e0>
    47da:	98 2f       	mov	r25, r24
    47dc:	9e 1b       	sub	r25, r30
    47de:	e9 2f       	mov	r30, r25
    47e0:	91 e0       	ldi	r25, 0x01	; 1
    47e2:	8e 17       	cp	r24, r30
    47e4:	08 f0       	brcs	.+2      	; 0x47e8 <handleSoftAcceleration+0xec>
    47e6:	71 c0       	rjmp	.+226    	; 0x48ca <handleSoftAcceleration+0x1ce>
    47e8:	f9 2b       	or	r31, r25
    47ea:	8a 2d       	mov	r24, r10
    47ec:	81 95       	neg	r24
    47ee:	91 e0       	ldi	r25, 0x01	; 1
    47f0:	68 17       	cp	r22, r24
    47f2:	08 f0       	brcs	.+2      	; 0x47f6 <handleSoftAcceleration+0xfa>
    47f4:	62 c0       	rjmp	.+196    	; 0x48ba <handleSoftAcceleration+0x1be>
    47f6:	38 2f       	mov	r19, r24
    47f8:	3f 1b       	sub	r19, r31
    47fa:	21 e0       	ldi	r18, 0x01	; 1
    47fc:	83 17       	cp	r24, r19
    47fe:	08 f0       	brcs	.+2      	; 0x4802 <handleSoftAcceleration+0x106>
    4800:	55 c0       	rjmp	.+170    	; 0x48ac <handleSoftAcceleration+0x1b0>
    4802:	92 2b       	or	r25, r18
    4804:	a1 95       	neg	r26
    4806:	a9 17       	cp	r26, r25
    4808:	09 f4       	brne	.+2      	; 0x480c <handleSoftAcceleration+0x110>
    480a:	bd c0       	rjmp	.+378    	; 0x4986 <handleSoftAcceleration+0x28a>
			speedStepCounter = getTime100MicroSec();
    480c:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    4810:	9b 01       	movw	r18, r22
    4812:	ac 01       	movw	r20, r24
    4814:	60 93 64 04 	sts	0x0464, r22
    4818:	30 93 65 04 	sts	0x0465, r19
    481c:	40 93 66 04 	sts	0x0466, r20
    4820:	50 93 67 04 	sts	0x0467, r21
    4824:	10 92 68 04 	sts	0x0468, r1
    4828:	10 92 69 04 	sts	0x0469, r1
    482c:	10 92 6a 04 	sts	0x046A, r1
    4830:	10 92 6b 04 	sts	0x046B, r1

			if(softAccEnabled) {
    4834:	80 91 6c 04 	lds	r24, 0x046C
    4838:	88 23       	and	r24, r24
    483a:	09 f4       	brne	.+2      	; 0x483e <handleSoftAcceleration+0x142>
    483c:	bf c0       	rjmp	.+382    	; 0x49bc <handleSoftAcceleration+0x2c0>
				if(pwm_right_desired == 0) {
    483e:	20 91 f5 02 	lds	r18, 0x02F5
    4842:	30 91 f6 02 	lds	r19, 0x02F6
    4846:	21 15       	cp	r18, r1
    4848:	31 05       	cpc	r19, r1
    484a:	09 f0       	breq	.+2      	; 0x484e <handleSoftAcceleration+0x152>
    484c:	c8 c0       	rjmp	.+400    	; 0x49de <handleSoftAcceleration+0x2e2>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    484e:	10 92 fa 02 	sts	0x02FA, r1
    4852:	10 92 f9 02 	sts	0x02F9, r1
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    4856:	20 91 f7 02 	lds	r18, 0x02F7
    485a:	30 91 f8 02 	lds	r19, 0x02F8
    485e:	21 15       	cp	r18, r1
    4860:	31 05       	cpc	r19, r1
    4862:	09 f4       	brne	.+2      	; 0x4866 <handleSoftAcceleration+0x16a>
    4864:	de c0       	rjmp	.+444    	; 0x4a22 <handleSoftAcceleration+0x326>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    4866:	40 91 fb 02 	lds	r20, 0x02FB
    486a:	50 91 fc 02 	lds	r21, 0x02FC
    486e:	42 9f       	mul	r20, r18
    4870:	c0 01       	movw	r24, r0
    4872:	43 9f       	mul	r20, r19
    4874:	90 0d       	add	r25, r0
    4876:	52 9f       	mul	r21, r18
    4878:	90 0d       	add	r25, r0
    487a:	11 24       	eor	r1, r1
    487c:	97 fd       	sbrc	r25, 7
    487e:	d1 c0       	rjmp	.+418    	; 0x4a22 <handleSoftAcceleration+0x326>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    4880:	42 17       	cp	r20, r18
    4882:	53 07       	cpc	r21, r19
    4884:	0c f0       	brlt	.+2      	; 0x4888 <handleSoftAcceleration+0x18c>
    4886:	d2 c0       	rjmp	.+420    	; 0x4a2c <handleSoftAcceleration+0x330>
					pwm_intermediate_left_desired += speedStep;
    4888:	80 91 13 02 	lds	r24, 0x0213
    488c:	ba 01       	movw	r22, r20
    488e:	68 0f       	add	r22, r24
    4890:	71 1d       	adc	r23, r1
    4892:	70 93 fc 02 	sts	0x02FC, r23
    4896:	60 93 fb 02 	sts	0x02FB, r22
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    489a:	26 17       	cp	r18, r22
    489c:	37 07       	cpc	r19, r23
    489e:	0c f0       	brlt	.+2      	; 0x48a2 <handleSoftAcceleration+0x1a6>
    48a0:	3a cf       	rjmp	.-396    	; 0x4716 <handleSoftAcceleration+0x1a>
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired -= speedStep;
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
    48a2:	30 93 fc 02 	sts	0x02FC, r19
    48a6:	20 93 fb 02 	sts	0x02FB, r18
    48aa:	35 cf       	rjmp	.-406    	; 0x4716 <handleSoftAcceleration+0x1a>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    48ac:	20 e0       	ldi	r18, 0x00	; 0
    48ae:	92 2b       	or	r25, r18
    48b0:	a1 95       	neg	r26
    48b2:	a9 17       	cp	r26, r25
    48b4:	09 f0       	breq	.+2      	; 0x48b8 <handleSoftAcceleration+0x1bc>
    48b6:	aa cf       	rjmp	.-172    	; 0x480c <handleSoftAcceleration+0x110>
    48b8:	66 c0       	rjmp	.+204    	; 0x4986 <handleSoftAcceleration+0x28a>
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	38 2f       	mov	r19, r24
    48be:	3f 1b       	sub	r19, r31
    48c0:	21 e0       	ldi	r18, 0x01	; 1
    48c2:	83 17       	cp	r24, r19
    48c4:	08 f4       	brcc	.+2      	; 0x48c8 <handleSoftAcceleration+0x1cc>
    48c6:	9d cf       	rjmp	.-198    	; 0x4802 <handleSoftAcceleration+0x106>
    48c8:	f1 cf       	rjmp	.-30     	; 0x48ac <handleSoftAcceleration+0x1b0>
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	f9 2b       	or	r31, r25
    48ce:	8a 2d       	mov	r24, r10
    48d0:	81 95       	neg	r24
    48d2:	91 e0       	ldi	r25, 0x01	; 1
    48d4:	68 17       	cp	r22, r24
    48d6:	08 f4       	brcc	.+2      	; 0x48da <handleSoftAcceleration+0x1de>
    48d8:	8e cf       	rjmp	.-228    	; 0x47f6 <handleSoftAcceleration+0xfa>
    48da:	ef cf       	rjmp	.-34     	; 0x48ba <handleSoftAcceleration+0x1be>
    48dc:	f0 e0       	ldi	r31, 0x00	; 0
    48de:	98 2f       	mov	r25, r24
    48e0:	9e 1b       	sub	r25, r30
    48e2:	e9 2f       	mov	r30, r25
    48e4:	91 e0       	ldi	r25, 0x01	; 1
    48e6:	8e 17       	cp	r24, r30
    48e8:	08 f4       	brcc	.+2      	; 0x48ec <handleSoftAcceleration+0x1f0>
    48ea:	7e cf       	rjmp	.-260    	; 0x47e8 <handleSoftAcceleration+0xec>
    48ec:	ee cf       	rjmp	.-36     	; 0x48ca <handleSoftAcceleration+0x1ce>
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	e9 2b       	or	r30, r25
    48f2:	8c 2d       	mov	r24, r12
    48f4:	81 95       	neg	r24
    48f6:	f1 e0       	ldi	r31, 0x01	; 1
    48f8:	58 17       	cp	r21, r24
    48fa:	08 f4       	brcc	.+2      	; 0x48fe <handleSoftAcceleration+0x202>
    48fc:	6e cf       	rjmp	.-292    	; 0x47da <handleSoftAcceleration+0xde>
    48fe:	ee cf       	rjmp	.-36     	; 0x48dc <handleSoftAcceleration+0x1e0>
    4900:	e0 e0       	ldi	r30, 0x00	; 0
    4902:	b8 2f       	mov	r27, r24
    4904:	b9 1b       	sub	r27, r25
    4906:	91 e0       	ldi	r25, 0x01	; 1
    4908:	8b 17       	cp	r24, r27
    490a:	08 f4       	brcc	.+2      	; 0x490e <handleSoftAcceleration+0x212>
    490c:	5f cf       	rjmp	.-322    	; 0x47cc <handleSoftAcceleration+0xd0>
    490e:	ef cf       	rjmp	.-34     	; 0x48ee <handleSoftAcceleration+0x1f2>
    4910:	e0 e0       	ldi	r30, 0x00	; 0
    4912:	9e 2b       	or	r25, r30
    4914:	8e 2d       	mov	r24, r14
    4916:	81 95       	neg	r24
    4918:	e1 e0       	ldi	r30, 0x01	; 1
    491a:	48 17       	cp	r20, r24
    491c:	08 f4       	brcc	.+2      	; 0x4920 <handleSoftAcceleration+0x224>
    491e:	50 cf       	rjmp	.-352    	; 0x47c0 <handleSoftAcceleration+0xc4>
    4920:	ef cf       	rjmp	.-34     	; 0x4900 <handleSoftAcceleration+0x204>
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	d8 2e       	mov	r13, r24
    4926:	de 1a       	sub	r13, r30
    4928:	e1 e0       	ldi	r30, 0x01	; 1
    492a:	8d 15       	cp	r24, r13
    492c:	08 f4       	brcc	.+2      	; 0x4930 <handleSoftAcceleration+0x234>
    492e:	41 cf       	rjmp	.-382    	; 0x47b2 <handleSoftAcceleration+0xb6>
    4930:	ef cf       	rjmp	.-34     	; 0x4910 <handleSoftAcceleration+0x214>
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	e9 2b       	or	r30, r25
    4936:	83 2f       	mov	r24, r19
    4938:	8b 1b       	sub	r24, r27
    493a:	91 e0       	ldi	r25, 0x01	; 1
    493c:	38 17       	cp	r19, r24
    493e:	08 f4       	brcc	.+2      	; 0x4942 <handleSoftAcceleration+0x246>
    4940:	32 cf       	rjmp	.-412    	; 0x47a6 <handleSoftAcceleration+0xaa>
    4942:	ef cf       	rjmp	.-34     	; 0x4922 <handleSoftAcceleration+0x226>
    4944:	e0 e0       	ldi	r30, 0x00	; 0
    4946:	b8 2e       	mov	r11, r24
    4948:	b9 1a       	sub	r11, r25
    494a:	91 e0       	ldi	r25, 0x01	; 1
    494c:	8b 15       	cp	r24, r11
    494e:	08 f4       	brcc	.+2      	; 0x4952 <handleSoftAcceleration+0x256>
    4950:	23 cf       	rjmp	.-442    	; 0x4798 <handleSoftAcceleration+0x9c>
    4952:	ef cf       	rjmp	.-34     	; 0x4932 <handleSoftAcceleration+0x236>
    4954:	e0 e0       	ldi	r30, 0x00	; 0
    4956:	9e 2b       	or	r25, r30
    4958:	82 2f       	mov	r24, r18
    495a:	8f 1b       	sub	r24, r31
    495c:	e1 e0       	ldi	r30, 0x01	; 1
    495e:	28 17       	cp	r18, r24
    4960:	08 f4       	brcc	.+2      	; 0x4964 <handleSoftAcceleration+0x268>
    4962:	14 cf       	rjmp	.-472    	; 0x478c <handleSoftAcceleration+0x90>
    4964:	ef cf       	rjmp	.-34     	; 0x4944 <handleSoftAcceleration+0x248>
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	f8 2e       	mov	r15, r24
    496a:	fe 1a       	sub	r15, r30
    496c:	e1 e0       	ldi	r30, 0x01	; 1
    496e:	8f 15       	cp	r24, r15
    4970:	08 f4       	brcc	.+2      	; 0x4974 <handleSoftAcceleration+0x278>
    4972:	05 cf       	rjmp	.-502    	; 0x477e <handleSoftAcceleration+0x82>
    4974:	ef cf       	rjmp	.-34     	; 0x4954 <handleSoftAcceleration+0x258>
    4976:	e0 e0       	ldi	r30, 0x00	; 0
    4978:	81 2f       	mov	r24, r17
    497a:	89 1b       	sub	r24, r25
    497c:	91 e0       	ldi	r25, 0x01	; 1
    497e:	18 17       	cp	r17, r24
    4980:	08 f4       	brcc	.+2      	; 0x4984 <handleSoftAcceleration+0x288>
    4982:	f7 ce       	rjmp	.-530    	; 0x4772 <handleSoftAcceleration+0x76>
    4984:	f0 cf       	rjmp	.-32     	; 0x4966 <handleSoftAcceleration+0x26a>
    4986:	33 23       	and	r19, r19
    4988:	09 f0       	breq	.+2      	; 0x498c <handleSoftAcceleration+0x290>
    498a:	40 cf       	rjmp	.-384    	; 0x480c <handleSoftAcceleration+0x110>
    498c:	ee 23       	and	r30, r30
    498e:	09 f0       	breq	.+2      	; 0x4992 <handleSoftAcceleration+0x296>
    4990:	3d cf       	rjmp	.-390    	; 0x480c <handleSoftAcceleration+0x110>
    4992:	bb 23       	and	r27, r27
    4994:	09 f0       	breq	.+2      	; 0x4998 <handleSoftAcceleration+0x29c>
    4996:	3a cf       	rjmp	.-396    	; 0x480c <handleSoftAcceleration+0x110>
    4998:	dd 20       	and	r13, r13
    499a:	09 f0       	breq	.+2      	; 0x499e <handleSoftAcceleration+0x2a2>
    499c:	37 cf       	rjmp	.-402    	; 0x480c <handleSoftAcceleration+0x110>
    499e:	bb 20       	and	r11, r11
    49a0:	09 f0       	breq	.+2      	; 0x49a4 <handleSoftAcceleration+0x2a8>
    49a2:	34 cf       	rjmp	.-408    	; 0x480c <handleSoftAcceleration+0x110>
    49a4:	61 e0       	ldi	r22, 0x01	; 1
    49a6:	6f 15       	cp	r22, r15
    49a8:	08 f4       	brcc	.+2      	; 0x49ac <handleSoftAcceleration+0x2b0>
    49aa:	30 cf       	rjmp	.-416    	; 0x480c <handleSoftAcceleration+0x110>
    49ac:	f6 16       	cp	r15, r22
    49ae:	09 f0       	breq	.+2      	; 0x49b2 <handleSoftAcceleration+0x2b6>
    49b0:	b2 ce       	rjmp	.-668    	; 0x4716 <handleSoftAcceleration+0x1a>
    49b2:	7f e8       	ldi	r23, 0x8F	; 143
    49b4:	79 15       	cp	r23, r9
    49b6:	08 f0       	brcs	.+2      	; 0x49ba <handleSoftAcceleration+0x2be>
    49b8:	ae ce       	rjmp	.-676    	; 0x4716 <handleSoftAcceleration+0x1a>
    49ba:	28 cf       	rjmp	.-432    	; 0x480c <handleSoftAcceleration+0x110>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    49bc:	80 91 f5 02 	lds	r24, 0x02F5
    49c0:	90 91 f6 02 	lds	r25, 0x02F6
    49c4:	90 93 fa 02 	sts	0x02FA, r25
    49c8:	80 93 f9 02 	sts	0x02F9, r24
				pwm_intermediate_left_desired = pwm_left_desired;
    49cc:	80 91 f7 02 	lds	r24, 0x02F7
    49d0:	90 91 f8 02 	lds	r25, 0x02F8
    49d4:	90 93 fc 02 	sts	0x02FC, r25
    49d8:	80 93 fb 02 	sts	0x02FB, r24
    49dc:	9c ce       	rjmp	.-712    	; 0x4716 <handleSoftAcceleration+0x1a>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    49de:	40 91 f9 02 	lds	r20, 0x02F9
    49e2:	50 91 fa 02 	lds	r21, 0x02FA
    49e6:	42 9f       	mul	r20, r18
    49e8:	c0 01       	movw	r24, r0
    49ea:	43 9f       	mul	r20, r19
    49ec:	90 0d       	add	r25, r0
    49ee:	52 9f       	mul	r21, r18
    49f0:	90 0d       	add	r25, r0
    49f2:	11 24       	eor	r1, r1
    49f4:	97 fd       	sbrc	r25, 7
    49f6:	2b cf       	rjmp	.-426    	; 0x484e <handleSoftAcceleration+0x152>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    49f8:	42 17       	cp	r20, r18
    49fa:	53 07       	cpc	r21, r19
    49fc:	4c f5       	brge	.+82     	; 0x4a50 <handleSoftAcceleration+0x354>
					pwm_intermediate_right_desired += speedStep;
    49fe:	80 91 13 02 	lds	r24, 0x0213
    4a02:	ba 01       	movw	r22, r20
    4a04:	68 0f       	add	r22, r24
    4a06:	71 1d       	adc	r23, r1
    4a08:	70 93 fa 02 	sts	0x02FA, r23
    4a0c:	60 93 f9 02 	sts	0x02F9, r22
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    4a10:	26 17       	cp	r18, r22
    4a12:	37 07       	cpc	r19, r23
    4a14:	0c f0       	brlt	.+2      	; 0x4a18 <handleSoftAcceleration+0x31c>
    4a16:	1f cf       	rjmp	.-450    	; 0x4856 <handleSoftAcceleration+0x15a>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    4a18:	30 93 fa 02 	sts	0x02FA, r19
    4a1c:	20 93 f9 02 	sts	0x02F9, r18
    4a20:	1a cf       	rjmp	.-460    	; 0x4856 <handleSoftAcceleration+0x15a>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    4a22:	10 92 fc 02 	sts	0x02FC, r1
    4a26:	10 92 fb 02 	sts	0x02FB, r1
    4a2a:	75 ce       	rjmp	.-790    	; 0x4716 <handleSoftAcceleration+0x1a>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    4a2c:	24 17       	cp	r18, r20
    4a2e:	35 07       	cpc	r19, r21
    4a30:	0c f0       	brlt	.+2      	; 0x4a34 <handleSoftAcceleration+0x338>
    4a32:	71 ce       	rjmp	.-798    	; 0x4716 <handleSoftAcceleration+0x1a>
					pwm_intermediate_left_desired -= speedStep;
    4a34:	80 91 13 02 	lds	r24, 0x0213
    4a38:	ba 01       	movw	r22, r20
    4a3a:	68 1b       	sub	r22, r24
    4a3c:	71 09       	sbc	r23, r1
    4a3e:	70 93 fc 02 	sts	0x02FC, r23
    4a42:	60 93 fb 02 	sts	0x02FB, r22
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    4a46:	62 17       	cp	r22, r18
    4a48:	73 07       	cpc	r23, r19
    4a4a:	0c f0       	brlt	.+2      	; 0x4a4e <handleSoftAcceleration+0x352>
    4a4c:	64 ce       	rjmp	.-824    	; 0x4716 <handleSoftAcceleration+0x1a>
    4a4e:	29 cf       	rjmp	.-430    	; 0x48a2 <handleSoftAcceleration+0x1a6>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    4a50:	24 17       	cp	r18, r20
    4a52:	35 07       	cpc	r19, r21
    4a54:	0c f0       	brlt	.+2      	; 0x4a58 <handleSoftAcceleration+0x35c>
    4a56:	ff ce       	rjmp	.-514    	; 0x4856 <handleSoftAcceleration+0x15a>
					pwm_intermediate_right_desired -= speedStep;
    4a58:	80 91 13 02 	lds	r24, 0x0213
    4a5c:	ba 01       	movw	r22, r20
    4a5e:	68 1b       	sub	r22, r24
    4a60:	71 09       	sbc	r23, r1
    4a62:	70 93 fa 02 	sts	0x02FA, r23
    4a66:	60 93 f9 02 	sts	0x02F9, r22
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    4a6a:	62 17       	cp	r22, r18
    4a6c:	73 07       	cpc	r23, r19
    4a6e:	0c f0       	brlt	.+2      	; 0x4a72 <handleSoftAcceleration+0x376>
    4a70:	f2 ce       	rjmp	.-540    	; 0x4856 <handleSoftAcceleration+0x15a>
    4a72:	d2 cf       	rjmp	.-92     	; 0x4a18 <handleSoftAcceleration+0x31c>

00004a74 <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    4a74:	2f 92       	push	r2
    4a76:	3f 92       	push	r3
    4a78:	4f 92       	push	r4
    4a7a:	5f 92       	push	r5
    4a7c:	6f 92       	push	r6
    4a7e:	7f 92       	push	r7
    4a80:	8f 92       	push	r8
    4a82:	9f 92       	push	r9
    4a84:	af 92       	push	r10
    4a86:	bf 92       	push	r11
    4a88:	cf 92       	push	r12
    4a8a:	df 92       	push	r13
    4a8c:	ef 92       	push	r14
    4a8e:	ff 92       	push	r15
    4a90:	0f 93       	push	r16
    4a92:	1f 93       	push	r17
    4a94:	cf 93       	push	r28
    4a96:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    4a98:	74 e1       	ldi	r23, 0x14	; 20
    4a9a:	87 2e       	mov	r8, r23
    4a9c:	91 2c       	mov	r9, r1
    4a9e:	90 92 e5 08 	sts	0x08E5, r9
    4aa2:	80 92 e4 08 	sts	0x08E4, r8
    calibration[1][0] = 40;
    4aa6:	88 e2       	ldi	r24, 0x28	; 40
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	90 93 f5 08 	sts	0x08F5, r25
    4aae:	80 93 f4 08 	sts	0x08F4, r24
    calibration[2][0] = 59;
    4ab2:	8b e3       	ldi	r24, 0x3B	; 59
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	90 93 05 09 	sts	0x0905, r25
    4aba:	80 93 04 09 	sts	0x0904, r24
    calibration[3][0] = 79;
    4abe:	8f e4       	ldi	r24, 0x4F	; 79
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	90 93 15 09 	sts	0x0915, r25
    4ac6:	80 93 14 09 	sts	0x0914, r24
    calibration[4][0] = 100;
    4aca:	84 e6       	ldi	r24, 0x64	; 100
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	90 93 25 09 	sts	0x0925, r25
    4ad2:	80 93 24 09 	sts	0x0924, r24
    calibration[5][0] = 120;
    4ad6:	c8 e7       	ldi	r28, 0x78	; 120
    4ad8:	d0 e0       	ldi	r29, 0x00	; 0
    4ada:	d0 93 35 09 	sts	0x0935, r29
    4ade:	c0 93 34 09 	sts	0x0934, r28
    calibration[6][0] = 139;
    4ae2:	6b e8       	ldi	r22, 0x8B	; 139
    4ae4:	e6 2e       	mov	r14, r22
    4ae6:	f1 2c       	mov	r15, r1
    4ae8:	f0 92 45 09 	sts	0x0945, r15
    4aec:	e0 92 44 09 	sts	0x0944, r14
    calibration[7][0] = 159;
    4af0:	8f e9       	ldi	r24, 0x9F	; 159
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	90 93 55 09 	sts	0x0955, r25
    4af8:	80 93 54 09 	sts	0x0954, r24
	calibration[8][0] = 180;
    4afc:	54 eb       	ldi	r21, 0xB4	; 180
    4afe:	a5 2e       	mov	r10, r21
    4b00:	b1 2c       	mov	r11, r1
    4b02:	b0 92 65 09 	sts	0x0965, r11
    4b06:	a0 92 64 09 	sts	0x0964, r10
    calibration[0][1] = 19;    	// real speed measured in mm/s
    4b0a:	23 e1       	ldi	r18, 0x13	; 19
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	30 93 e7 08 	sts	0x08E7, r19
    4b12:	20 93 e6 08 	sts	0x08E6, r18
    calibration[1][1] = 47;
    4b16:	8f e2       	ldi	r24, 0x2F	; 47
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	90 93 f7 08 	sts	0x08F7, r25
    4b1e:	80 93 f6 08 	sts	0x08F6, r24
    calibration[2][1] = 72;
    4b22:	88 e4       	ldi	r24, 0x48	; 72
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	90 93 07 09 	sts	0x0907, r25
    4b2a:	80 93 06 09 	sts	0x0906, r24
    calibration[3][1] = 91;
    4b2e:	8b e5       	ldi	r24, 0x5B	; 91
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	90 93 17 09 	sts	0x0917, r25
    4b36:	80 93 16 09 	sts	0x0916, r24
    calibration[4][1] = 109;
    4b3a:	8d e6       	ldi	r24, 0x6D	; 109
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	90 93 27 09 	sts	0x0927, r25
    4b42:	80 93 26 09 	sts	0x0926, r24
    calibration[5][1] = 125;
    4b46:	4d e7       	ldi	r20, 0x7D	; 125
    4b48:	c4 2e       	mov	r12, r20
    4b4a:	d1 2c       	mov	r13, r1
    4b4c:	d0 92 37 09 	sts	0x0937, r13
    4b50:	c0 92 36 09 	sts	0x0936, r12
    calibration[6][1] = 143;
    4b54:	8f e8       	ldi	r24, 0x8F	; 143
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	90 93 47 09 	sts	0x0947, r25
    4b5c:	80 93 46 09 	sts	0x0946, r24
    calibration[7][1] = 160;
    4b60:	40 ea       	ldi	r20, 0xA0	; 160
    4b62:	50 e0       	ldi	r21, 0x00	; 0
    4b64:	50 93 57 09 	sts	0x0957, r21
    4b68:	40 93 56 09 	sts	0x0956, r20
	calibration[8][1] = 174;
    4b6c:	8e ea       	ldi	r24, 0xAE	; 174
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	90 93 67 09 	sts	0x0967, r25
    4b74:	80 93 66 09 	sts	0x0966, r24
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    4b78:	30 93 e9 08 	sts	0x08E9, r19
    4b7c:	20 93 e8 08 	sts	0x08E8, r18
    calibration[1][2] = 39;
    4b80:	67 e2       	ldi	r22, 0x27	; 39
    4b82:	70 e0       	ldi	r23, 0x00	; 0
    4b84:	70 93 f9 08 	sts	0x08F9, r23
    4b88:	60 93 f8 08 	sts	0x08F8, r22
    calibration[2][2] = 60;
    4b8c:	0c e3       	ldi	r16, 0x3C	; 60
    4b8e:	10 e0       	ldi	r17, 0x00	; 0
    4b90:	10 93 09 09 	sts	0x0909, r17
    4b94:	00 93 08 09 	sts	0x0908, r16
    calibration[3][2] = 80;
    4b98:	20 e5       	ldi	r18, 0x50	; 80
    4b9a:	22 2e       	mov	r2, r18
    4b9c:	31 2c       	mov	r3, r1
    4b9e:	30 92 19 09 	sts	0x0919, r3
    4ba2:	20 92 18 09 	sts	0x0918, r2
    calibration[4][2] = 99;
    4ba6:	a3 e6       	ldi	r26, 0x63	; 99
    4ba8:	b0 e0       	ldi	r27, 0x00	; 0
    4baa:	b0 93 29 09 	sts	0x0929, r27
    4bae:	a0 93 28 09 	sts	0x0928, r26
    calibration[5][2] = 119;
    4bb2:	27 e7       	ldi	r18, 0x77	; 119
    4bb4:	30 e0       	ldi	r19, 0x00	; 0
    4bb6:	30 93 39 09 	sts	0x0939, r19
    4bba:	20 93 38 09 	sts	0x0938, r18
    calibration[6][2] = 140;
    4bbe:	ec e8       	ldi	r30, 0x8C	; 140
    4bc0:	f0 e0       	ldi	r31, 0x00	; 0
    4bc2:	f0 93 49 09 	sts	0x0949, r31
    4bc6:	e0 93 48 09 	sts	0x0948, r30
    calibration[7][2] = 160;
    4bca:	50 93 59 09 	sts	0x0959, r21
    4bce:	40 93 58 09 	sts	0x0958, r20
	calibration[8][2] = 180;
    4bd2:	b0 92 69 09 	sts	0x0969, r11
    4bd6:	a0 92 68 09 	sts	0x0968, r10
    calibration[0][3] = 23;    	// real speed measured in mm/s
    4bda:	87 e1       	ldi	r24, 0x17	; 23
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	90 93 eb 08 	sts	0x08EB, r25
    4be2:	80 93 ea 08 	sts	0x08EA, r24
    calibration[1][3] = 46;
    4be6:	9e e2       	ldi	r25, 0x2E	; 46
    4be8:	49 2e       	mov	r4, r25
    4bea:	51 2c       	mov	r5, r1
    4bec:	50 92 fb 08 	sts	0x08FB, r5
    4bf0:	40 92 fa 08 	sts	0x08FA, r4
    calibration[2][3] = 64;
    4bf4:	80 e4       	ldi	r24, 0x40	; 64
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	90 93 0b 09 	sts	0x090B, r25
    4bfc:	80 93 0a 09 	sts	0x090A, r24
    calibration[3][3] = 81;
    4c00:	81 e5       	ldi	r24, 0x51	; 81
    4c02:	68 2e       	mov	r6, r24
    4c04:	71 2c       	mov	r7, r1
    4c06:	70 92 1b 09 	sts	0x091B, r7
    4c0a:	60 92 1a 09 	sts	0x091A, r6
    calibration[4][3] = 97;
    4c0e:	81 e6       	ldi	r24, 0x61	; 97
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	90 93 2b 09 	sts	0x092B, r25
    4c16:	80 93 2a 09 	sts	0x092A, r24
    calibration[5][3] = 112;
    4c1a:	80 e7       	ldi	r24, 0x70	; 112
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	90 93 3b 09 	sts	0x093B, r25
    4c22:	80 93 3a 09 	sts	0x093A, r24
    calibration[6][3] = 125;
    4c26:	d0 92 4b 09 	sts	0x094B, r13
    4c2a:	c0 92 4a 09 	sts	0x094A, r12
    calibration[7][3] = 139;
    4c2e:	f0 92 5b 09 	sts	0x095B, r15
    4c32:	e0 92 5a 09 	sts	0x095A, r14
	calibration[8][3] = 152;
    4c36:	88 e9       	ldi	r24, 0x98	; 152
    4c38:	90 e0       	ldi	r25, 0x00	; 0
    4c3a:	90 93 6b 09 	sts	0x096B, r25
    4c3e:	80 93 6a 09 	sts	0x096A, r24
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    4c42:	90 92 ed 08 	sts	0x08ED, r9
    4c46:	80 92 ec 08 	sts	0x08EC, r8
    calibration[1][4] = 39;
    4c4a:	70 93 fd 08 	sts	0x08FD, r23
    4c4e:	60 93 fc 08 	sts	0x08FC, r22
    calibration[2][4] = 60;
    4c52:	10 93 0d 09 	sts	0x090D, r17
    4c56:	00 93 0c 09 	sts	0x090C, r16
    calibration[3][4] = 79;
    4c5a:	8f e4       	ldi	r24, 0x4F	; 79
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	90 93 1d 09 	sts	0x091D, r25
    4c62:	80 93 1c 09 	sts	0x091C, r24
    calibration[4][4] = 99;
    4c66:	b0 93 2d 09 	sts	0x092D, r27
    4c6a:	a0 93 2c 09 	sts	0x092C, r26
    calibration[5][4] = 120;
    4c6e:	d0 93 3d 09 	sts	0x093D, r29
    4c72:	c0 93 3c 09 	sts	0x093C, r28
    calibration[6][4] = 140;
    4c76:	f0 93 4d 09 	sts	0x094D, r31
    4c7a:	e0 93 4c 09 	sts	0x094C, r30
    calibration[7][4] = 160;
    4c7e:	50 93 5d 09 	sts	0x095D, r21
    4c82:	40 93 5c 09 	sts	0x095C, r20
	calibration[8][4] = 179;
    4c86:	83 eb       	ldi	r24, 0xB3	; 179
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	90 93 6d 09 	sts	0x096D, r25
    4c8e:	80 93 6c 09 	sts	0x096C, r24
    calibration[0][5] = 18;    	// real speed measured in mm/s
    4c92:	82 e1       	ldi	r24, 0x12	; 18
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	90 93 ef 08 	sts	0x08EF, r25
    4c9a:	80 93 ee 08 	sts	0x08EE, r24
    calibration[1][5] = 45;
    4c9e:	8d e2       	ldi	r24, 0x2D	; 45
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	90 93 ff 08 	sts	0x08FF, r25
    4ca6:	80 93 fe 08 	sts	0x08FE, r24
    calibration[2][5] = 68;
    4caa:	84 e4       	ldi	r24, 0x44	; 68
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	90 93 0f 09 	sts	0x090F, r25
    4cb2:	80 93 0e 09 	sts	0x090E, r24
    calibration[3][5] = 87;
    4cb6:	87 e5       	ldi	r24, 0x57	; 87
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	90 93 1f 09 	sts	0x091F, r25
    4cbe:	80 93 1e 09 	sts	0x091E, r24
    calibration[4][5] = 105;
    4cc2:	89 e6       	ldi	r24, 0x69	; 105
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	90 93 2f 09 	sts	0x092F, r25
    4cca:	80 93 2e 09 	sts	0x092E, r24
    calibration[5][5] = 119;
    4cce:	30 93 3f 09 	sts	0x093F, r19
    4cd2:	20 93 3e 09 	sts	0x093E, r18
    calibration[6][5] = 137;
    4cd6:	89 e8       	ldi	r24, 0x89	; 137
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	90 93 4f 09 	sts	0x094F, r25
    4cde:	80 93 4e 09 	sts	0x094E, r24
    calibration[7][5] = 151;
    4ce2:	87 e9       	ldi	r24, 0x97	; 151
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	90 93 5f 09 	sts	0x095F, r25
    4cea:	80 93 5e 09 	sts	0x095E, r24
	calibration[8][5] = 168;
    4cee:	88 ea       	ldi	r24, 0xA8	; 168
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	90 93 6f 09 	sts	0x096F, r25
    4cf6:	80 93 6e 09 	sts	0x096E, r24
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    4cfa:	90 92 f1 08 	sts	0x08F1, r9
    4cfe:	80 92 f0 08 	sts	0x08F0, r8
    calibration[1][6] = 39;
    4d02:	70 93 01 09 	sts	0x0901, r23
    4d06:	60 93 00 09 	sts	0x0900, r22
    calibration[2][6] = 59;
    4d0a:	8b e3       	ldi	r24, 0x3B	; 59
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	90 93 11 09 	sts	0x0911, r25
    4d12:	80 93 10 09 	sts	0x0910, r24
    calibration[3][6] = 80;
    4d16:	30 92 21 09 	sts	0x0921, r3
    4d1a:	20 92 20 09 	sts	0x0920, r2
    calibration[4][6] = 100;
    4d1e:	84 e6       	ldi	r24, 0x64	; 100
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	90 93 31 09 	sts	0x0931, r25
    4d26:	80 93 30 09 	sts	0x0930, r24
    calibration[5][6] = 119;
    4d2a:	30 93 41 09 	sts	0x0941, r19
    4d2e:	20 93 40 09 	sts	0x0940, r18
    calibration[6][6] = 139;
    4d32:	f0 92 51 09 	sts	0x0951, r15
    4d36:	e0 92 50 09 	sts	0x0950, r14
    calibration[7][6] = 160;
    4d3a:	50 93 61 09 	sts	0x0961, r21
    4d3e:	40 93 60 09 	sts	0x0960, r20
	calibration[8][6] = 180;
    4d42:	b0 92 71 09 	sts	0x0971, r11
    4d46:	a0 92 70 09 	sts	0x0970, r10
    calibration[0][7] = 22;    	// real speed measured in mm/s
    4d4a:	86 e1       	ldi	r24, 0x16	; 22
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	90 93 f3 08 	sts	0x08F3, r25
    4d52:	80 93 f2 08 	sts	0x08F2, r24
    calibration[1][7] = 46;
    4d56:	50 92 03 09 	sts	0x0903, r5
    4d5a:	40 92 02 09 	sts	0x0902, r4
    calibration[2][7] = 65;
    4d5e:	81 e4       	ldi	r24, 0x41	; 65
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	90 93 13 09 	sts	0x0913, r25
    4d66:	80 93 12 09 	sts	0x0912, r24
    calibration[3][7] = 81;
    4d6a:	70 92 23 09 	sts	0x0923, r7
    4d6e:	60 92 22 09 	sts	0x0922, r6
    calibration[4][7] = 96;
    4d72:	80 e6       	ldi	r24, 0x60	; 96
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	90 93 33 09 	sts	0x0933, r25
    4d7a:	80 93 32 09 	sts	0x0932, r24
    calibration[5][7] = 111;
    4d7e:	8f e6       	ldi	r24, 0x6F	; 111
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	90 93 43 09 	sts	0x0943, r25
    4d86:	80 93 42 09 	sts	0x0942, r24
    calibration[6][7] = 125;
    4d8a:	d0 92 53 09 	sts	0x0953, r13
    4d8e:	c0 92 52 09 	sts	0x0952, r12
    calibration[7][7] = 139;
    4d92:	f0 92 63 09 	sts	0x0963, r15
    4d96:	e0 92 62 09 	sts	0x0962, r14
	calibration[8][7] = 153;
    4d9a:	89 e9       	ldi	r24, 0x99	; 153
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	90 93 73 09 	sts	0x0973, r25
    4da2:	80 93 72 09 	sts	0x0972, r24

    writeCalibrationToFlash();
    4da6:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <writeCalibrationToFlash>
}
    4daa:	df 91       	pop	r29
    4dac:	cf 91       	pop	r28
    4dae:	1f 91       	pop	r17
    4db0:	0f 91       	pop	r16
    4db2:	ff 90       	pop	r15
    4db4:	ef 90       	pop	r14
    4db6:	df 90       	pop	r13
    4db8:	cf 90       	pop	r12
    4dba:	bf 90       	pop	r11
    4dbc:	af 90       	pop	r10
    4dbe:	9f 90       	pop	r9
    4dc0:	8f 90       	pop	r8
    4dc2:	7f 90       	pop	r7
    4dc4:	6f 90       	pop	r6
    4dc6:	5f 90       	pop	r5
    4dc8:	4f 90       	pop	r4
    4dca:	3f 90       	pop	r3
    4dcc:	2f 90       	pop	r2
    4dce:	08 95       	ret

00004dd0 <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    4dd0:	80 91 63 0b 	lds	r24, 0x0B63
    4dd4:	84 30       	cpi	r24, 0x04	; 4
    4dd6:	09 f4       	brne	.+2      	; 0x4dda <handleCalibration+0xa>
    4dd8:	cf c1       	rjmp	.+926    	; 0x5178 <handleCalibration+0x3a8>
    4dda:	85 30       	cpi	r24, 0x05	; 5
    4ddc:	80 f0       	brcs	.+32     	; 0x4dfe <handleCalibration+0x2e>
    4dde:	86 30       	cpi	r24, 0x06	; 6
    4de0:	09 f4       	brne	.+2      	; 0x4de4 <handleCalibration+0x14>
    4de2:	60 c2       	rjmp	.+1216   	; 0x52a4 <handleCalibration+0x4d4>
    4de4:	86 30       	cpi	r24, 0x06	; 6
    4de6:	b0 f5       	brcc	.+108    	; 0x4e54 <handleCalibration+0x84>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
    4de8:	80 91 bd 08 	lds	r24, 0x08BD
    4dec:	8f 5f       	subi	r24, 0xFF	; 255
    4dee:	80 93 bd 08 	sts	0x08BD, r24
            if(calibVelIndex == 10) {
    4df2:	8a 30       	cpi	r24, 0x0A	; 10
    4df4:	09 f4       	brne	.+2      	; 0x4df8 <handleCalibration+0x28>
    4df6:	b7 c2       	rjmp	.+1390   	; 0x5366 <handleCalibration+0x596>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = CALIBRATION_STATE_SET_SPEED;
    4df8:	10 92 63 0b 	sts	0x0B63, r1
    4dfc:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4dfe:	81 30       	cpi	r24, 0x01	; 1
    4e00:	09 f4       	brne	.+2      	; 0x4e04 <handleCalibration+0x34>
    4e02:	6b c1       	rjmp	.+726    	; 0x50da <handleCalibration+0x30a>
    4e04:	81 30       	cpi	r24, 0x01	; 1
    4e06:	08 f0       	brcs	.+2      	; 0x4e0a <handleCalibration+0x3a>
    4e08:	73 c0       	rjmp	.+230    	; 0x4ef0 <handleCalibration+0x120>
			}
			break;


    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    4e0a:	80 91 55 05 	lds	r24, 0x0555
    4e0e:	88 23       	and	r24, r24
    4e10:	09 f0       	breq	.+2      	; 0x4e14 <handleCalibration+0x44>
    4e12:	56 c2       	rjmp	.+1196   	; 0x52c0 <handleCalibration+0x4f0>
				pwm_intermediate_right_desired = 0;
    4e14:	10 92 fa 02 	sts	0x02FA, r1
    4e18:	10 92 f9 02 	sts	0x02F9, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    4e1c:	80 91 bd 08 	lds	r24, 0x08BD
    4e20:	25 e0       	ldi	r18, 0x05	; 5
    4e22:	82 9f       	mul	r24, r18
    4e24:	c0 01       	movw	r24, r0
    4e26:	11 24       	eor	r1, r1
    4e28:	88 0f       	add	r24, r24
    4e2a:	99 1f       	adc	r25, r25
    4e2c:	88 0f       	add	r24, r24
    4e2e:	99 1f       	adc	r25, r25
    4e30:	90 93 fc 02 	sts	0x02FC, r25
    4e34:	80 93 fb 02 	sts	0x02FB, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = CALIBRATION_STATE_START_MEASURE;
    4e38:	81 e0       	ldi	r24, 0x01	; 1
    4e3a:	80 93 63 0b 	sts	0x0B63, r24
            timeoutOdometry = getTime100MicroSec();
    4e3e:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    4e42:	60 93 33 0b 	sts	0x0B33, r22
    4e46:	70 93 34 0b 	sts	0x0B34, r23
    4e4a:	80 93 35 0b 	sts	0x0B35, r24
    4e4e:	90 93 36 0b 	sts	0x0B36, r25
    4e52:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4e54:	87 30       	cpi	r24, 0x07	; 7
    4e56:	09 f4       	brne	.+2      	; 0x4e5a <handleCalibration+0x8a>
    4e58:	f8 c1       	rjmp	.+1008   	; 0x524a <handleCalibration+0x47a>
    4e5a:	88 30       	cpi	r24, 0x08	; 8
    4e5c:	79 f6       	brne	.-98     	; 0x4dfc <handleCalibration+0x2c>
	            timeoutOdometry = getTime100MicroSec();
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved.
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4e5e:	80 91 55 05 	lds	r24, 0x0555
    4e62:	88 23       	and	r24, r24
    4e64:	09 f4       	brne	.+2      	; 0x4e68 <handleCalibration+0x98>
    4e66:	d9 c0       	rjmp	.+434    	; 0x501a <handleCalibration+0x24a>
    4e68:	82 30       	cpi	r24, 0x02	; 2
    4e6a:	09 f4       	brne	.+2      	; 0x4e6e <handleCalibration+0x9e>
    4e6c:	d6 c0       	rjmp	.+428    	; 0x501a <handleCalibration+0x24a>
				}
				if(proximityResult[8] > maxGround) {
					maxGround = proximityResult[8];
				}
			} else {
				if(proximityResult[11] < minGround) {
    4e6e:	20 91 6b 02 	lds	r18, 0x026B
    4e72:	30 91 6c 02 	lds	r19, 0x026C
    4e76:	80 91 cc 04 	lds	r24, 0x04CC
    4e7a:	90 91 cd 04 	lds	r25, 0x04CD
    4e7e:	28 17       	cp	r18, r24
    4e80:	39 07       	cpc	r19, r25
    4e82:	24 f4       	brge	.+8      	; 0x4e8c <handleCalibration+0xbc>
					minGround = proximityResult[11];
    4e84:	30 93 cd 04 	sts	0x04CD, r19
    4e88:	20 93 cc 04 	sts	0x04CC, r18
				}
				if(proximityResult[11] > maxGround) {
    4e8c:	80 91 ce 04 	lds	r24, 0x04CE
    4e90:	90 91 cf 04 	lds	r25, 0x04CF
    4e94:	82 17       	cp	r24, r18
    4e96:	93 07       	cpc	r25, r19
    4e98:	24 f4       	brge	.+8      	; 0x4ea2 <handleCalibration+0xd2>
					maxGround = proximityResult[11];
    4e9a:	30 93 cf 04 	sts	0x04CF, r19
    4e9e:	20 93 ce 04 	sts	0x04CE, r18
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_5_SEC) {    // the robot seems to be still, go to next velcoity
    4ea2:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    4ea6:	20 91 33 0b 	lds	r18, 0x0B33
    4eaa:	30 91 34 0b 	lds	r19, 0x0B34
    4eae:	40 91 35 0b 	lds	r20, 0x0B35
    4eb2:	50 91 36 0b 	lds	r21, 0x0B36
    4eb6:	62 1b       	sub	r22, r18
    4eb8:	73 0b       	sbc	r23, r19
    4eba:	84 0b       	sbc	r24, r20
    4ebc:	95 0b       	sbc	r25, r21
    4ebe:	6e 5c       	subi	r22, 0xCE	; 206
    4ec0:	7b 4b       	sbci	r23, 0xBB	; 187
    4ec2:	80 40       	sbci	r24, 0x00	; 0
    4ec4:	90 40       	sbci	r25, 0x00	; 0
    4ec6:	08 f4       	brcc	.+2      	; 0x4eca <handleCalibration+0xfa>
    4ec8:	99 cf       	rjmp	.-206    	; 0x4dfc <handleCalibration+0x2c>
				calibrationThr = (minGround + maxGround)>>1;	// Take the average of the 2 as the reference threshold value.
    4eca:	80 91 ce 04 	lds	r24, 0x04CE
    4ece:	90 91 cf 04 	lds	r25, 0x04CF
    4ed2:	20 91 cc 04 	lds	r18, 0x04CC
    4ed6:	30 91 cd 04 	lds	r19, 0x04CD
    4eda:	82 0f       	add	r24, r18
    4edc:	93 1f       	adc	r25, r19
    4ede:	95 95       	asr	r25
    4ee0:	87 95       	ror	r24
    4ee2:	90 93 d1 04 	sts	0x04D1, r25
    4ee6:	80 93 d0 04 	sts	0x04D0, r24
				//calibrationThrLow = calibrationThr - ((maxGround-minGround)>>2);	// Use an histeresys between max and min (not needed...).
				//calibrationThrHigh = calibrationThr + ((maxGround-minGround)>>2);
                calibState = CALIBRATION_STATE_SET_SPEED;
    4eea:	10 92 63 0b 	sts	0x0B63, r1
    4eee:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4ef0:	82 30       	cpi	r24, 0x02	; 2
    4ef2:	09 f4       	brne	.+2      	; 0x4ef6 <handleCalibration+0x126>
    4ef4:	7d c1       	rjmp	.+762    	; 0x51f0 <handleCalibration+0x420>
    4ef6:	83 30       	cpi	r24, 0x03	; 3
    4ef8:	09 f0       	breq	.+2      	; 0x4efc <handleCalibration+0x12c>
    4efa:	80 cf       	rjmp	.-256    	; 0x4dfc <handleCalibration+0x2c>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4efc:	80 91 55 05 	lds	r24, 0x0555
    4f00:	88 23       	and	r24, r24
    4f02:	09 f4       	brne	.+2      	; 0x4f06 <handleCalibration+0x136>
    4f04:	97 c0       	rjmp	.+302    	; 0x5034 <handleCalibration+0x264>
    4f06:	82 30       	cpi	r24, 0x02	; 2
    4f08:	09 f4       	brne	.+2      	; 0x4f0c <handleCalibration+0x13c>
    4f0a:	94 c0       	rjmp	.+296    	; 0x5034 <handleCalibration+0x264>
                    updateOdomData();
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    4f0c:	20 91 6b 02 	lds	r18, 0x026B
    4f10:	30 91 6c 02 	lds	r19, 0x026C
    4f14:	80 91 d0 04 	lds	r24, 0x04D0
    4f18:	90 91 d1 04 	lds	r25, 0x04D1
    4f1c:	28 17       	cp	r18, r24
    4f1e:	39 07       	cpc	r19, r25
    4f20:	0c f0       	brlt	.+2      	; 0x4f24 <handleCalibration+0x154>
    4f22:	55 c0       	rjmp	.+170    	; 0x4fce <handleCalibration+0x1fe>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    4f24:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    4f28:	20 91 4e 05 	lds	r18, 0x054E
    4f2c:	30 91 4f 05 	lds	r19, 0x054F
    4f30:	40 91 50 05 	lds	r20, 0x0550
    4f34:	50 91 51 05 	lds	r21, 0x0551
    4f38:	62 1b       	sub	r22, r18
    4f3a:	73 0b       	sbc	r23, r19
    4f3c:	84 0b       	sbc	r24, r20
    4f3e:	95 0b       	sbc	r25, r21
    4f40:	60 93 4e 05 	sts	0x054E, r22
    4f44:	70 93 4f 05 	sts	0x054F, r23
    4f48:	80 93 50 05 	sts	0x0550, r24
    4f4c:	90 93 51 05 	sts	0x0551, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    4f50:	0e 94 f1 4c 	call	0x99e2	; 0x99e2 <__floatunsisf>
    4f54:	20 e0       	ldi	r18, 0x00	; 0
    4f56:	30 e0       	ldi	r19, 0x00	; 0
    4f58:	40 ed       	ldi	r20, 0xD0	; 208
    4f5a:	52 e4       	ldi	r21, 0x42	; 66
    4f5c:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    4f60:	20 e0       	ldi	r18, 0x00	; 0
    4f62:	34 e2       	ldi	r19, 0x24	; 36
    4f64:	44 e7       	ldi	r20, 0x74	; 116
    4f66:	59 e4       	ldi	r21, 0x49	; 73
    4f68:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    4f6c:	9b 01       	movw	r18, r22
    4f6e:	ac 01       	movw	r20, r24
    4f70:	64 e1       	ldi	r22, 0x14	; 20
    4f72:	7e e2       	ldi	r23, 0x2E	; 46
    4f74:	88 e7       	ldi	r24, 0x78	; 120
    4f76:	93 e4       	ldi	r25, 0x43	; 67
    4f78:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    4f7c:	0e 94 c5 4c 	call	0x998a	; 0x998a <__fixunssfsi>
    4f80:	70 93 79 0b 	sts	0x0B79, r23
    4f84:	60 93 78 0b 	sts	0x0B78, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    4f88:	20 91 ba 04 	lds	r18, 0x04BA
    4f8c:	30 91 bb 04 	lds	r19, 0x04BB
    4f90:	40 e0       	ldi	r20, 0x00	; 0
    4f92:	50 e0       	ldi	r21, 0x00	; 0
    4f94:	60 91 b4 04 	lds	r22, 0x04B4
    4f98:	70 91 b5 04 	lds	r23, 0x04B5
    4f9c:	80 91 b6 04 	lds	r24, 0x04B6
    4fa0:	90 91 b7 04 	lds	r25, 0x04B7
    4fa4:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <__divmodsi4>
    4fa8:	30 93 bf 04 	sts	0x04BF, r19
    4fac:	20 93 be 04 	sts	0x04BE, r18
					updateOdomData();
    4fb0:	0e 94 19 18 	call	0x3032	; 0x3032 <updateOdomData>
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
    4fb4:	84 e0       	ldi	r24, 0x04	; 4
    4fb6:	80 93 63 0b 	sts	0x0B63, r24
                    timeoutOdometry = getTime100MicroSec();;
    4fba:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    4fbe:	60 93 33 0b 	sts	0x0B33, r22
    4fc2:	70 93 34 0b 	sts	0x0B34, r23
    4fc6:	80 93 35 0b 	sts	0x0B35, r24
    4fca:	90 93 36 0b 	sts	0x0B36, r25
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    4fce:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    4fd2:	20 91 33 0b 	lds	r18, 0x0B33
    4fd6:	30 91 34 0b 	lds	r19, 0x0B34
    4fda:	40 91 35 0b 	lds	r20, 0x0B35
    4fde:	50 91 36 0b 	lds	r21, 0x0B36
    4fe2:	62 1b       	sub	r22, r18
    4fe4:	73 0b       	sbc	r23, r19
    4fe6:	84 0b       	sbc	r24, r20
    4fe8:	95 0b       	sbc	r25, r21
    4fea:	6c 59       	subi	r22, 0x9C	; 156
    4fec:	7d 4c       	sbci	r23, 0xCD	; 205
    4fee:	88 40       	sbci	r24, 0x08	; 8
    4ff0:	90 40       	sbci	r25, 0x00	; 0
    4ff2:	08 f4       	brcc	.+2      	; 0x4ff6 <handleCalibration+0x226>
    4ff4:	03 cf       	rjmp	.-506    	; 0x4dfc <handleCalibration+0x2c>
            	tempVel = 0;
    4ff6:	10 92 79 0b 	sts	0x0B79, r1
    4ffa:	10 92 78 0b 	sts	0x0B78, r1
				avgLeftSpeed = 0;
    4ffe:	10 92 bd 04 	sts	0x04BD, r1
    5002:	10 92 bc 04 	sts	0x04BC, r1
				avgRightSpeed = 0;
    5006:	10 92 bf 04 	sts	0x04BF, r1
    500a:	10 92 be 04 	sts	0x04BE, r1
                updateOdomData();
    500e:	0e 94 19 18 	call	0x3032	; 0x3032 <updateOdomData>
                calibState = CALIBRATION_STATE_NEXT;
    5012:	85 e0       	ldi	r24, 0x05	; 5
    5014:	80 93 63 0b 	sts	0x0B63, r24
    5018:	08 95       	ret
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved.
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < minGround) {
    501a:	20 91 65 02 	lds	r18, 0x0265
    501e:	30 91 66 02 	lds	r19, 0x0266
    5022:	80 91 cc 04 	lds	r24, 0x04CC
    5026:	90 91 cd 04 	lds	r25, 0x04CD
    502a:	28 17       	cp	r18, r24
    502c:	39 07       	cpc	r19, r25
    502e:	0c f0       	brlt	.+2      	; 0x5032 <handleCalibration+0x262>
    5030:	2d cf       	rjmp	.-422    	; 0x4e8c <handleCalibration+0xbc>
    5032:	28 cf       	rjmp	.-432    	; 0x4e84 <handleCalibration+0xb4>
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {	
    5034:	20 91 65 02 	lds	r18, 0x0265
    5038:	30 91 66 02 	lds	r19, 0x0266
    503c:	80 91 d0 04 	lds	r24, 0x04D0
    5040:	90 91 d1 04 	lds	r25, 0x04D1
    5044:	28 17       	cp	r18, r24
    5046:	39 07       	cpc	r19, r25
    5048:	0c f0       	brlt	.+2      	; 0x504c <handleCalibration+0x27c>
    504a:	c1 cf       	rjmp	.-126    	; 0x4fce <handleCalibration+0x1fe>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    504c:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    5050:	20 91 4e 05 	lds	r18, 0x054E
    5054:	30 91 4f 05 	lds	r19, 0x054F
    5058:	40 91 50 05 	lds	r20, 0x0550
    505c:	50 91 51 05 	lds	r21, 0x0551
    5060:	62 1b       	sub	r22, r18
    5062:	73 0b       	sbc	r23, r19
    5064:	84 0b       	sbc	r24, r20
    5066:	95 0b       	sbc	r25, r21
    5068:	60 93 4e 05 	sts	0x054E, r22
    506c:	70 93 4f 05 	sts	0x054F, r23
    5070:	80 93 50 05 	sts	0x0550, r24
    5074:	90 93 51 05 	sts	0x0551, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    5078:	0e 94 f1 4c 	call	0x99e2	; 0x99e2 <__floatunsisf>
    507c:	20 e0       	ldi	r18, 0x00	; 0
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	40 ed       	ldi	r20, 0xD0	; 208
    5082:	52 e4       	ldi	r21, 0x42	; 66
    5084:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    5088:	20 e0       	ldi	r18, 0x00	; 0
    508a:	34 e2       	ldi	r19, 0x24	; 36
    508c:	44 e7       	ldi	r20, 0x74	; 116
    508e:	59 e4       	ldi	r21, 0x49	; 73
    5090:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    5094:	9b 01       	movw	r18, r22
    5096:	ac 01       	movw	r20, r24
    5098:	64 e1       	ldi	r22, 0x14	; 20
    509a:	7e e2       	ldi	r23, 0x2E	; 46
    509c:	88 e7       	ldi	r24, 0x78	; 120
    509e:	93 e4       	ldi	r25, 0x43	; 67
    50a0:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    50a4:	0e 94 c5 4c 	call	0x998a	; 0x998a <__fixunssfsi>
    50a8:	70 93 79 0b 	sts	0x0B79, r23
    50ac:	60 93 78 0b 	sts	0x0B78, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    50b0:	20 91 b8 04 	lds	r18, 0x04B8
    50b4:	30 91 b9 04 	lds	r19, 0x04B9
    50b8:	40 e0       	ldi	r20, 0x00	; 0
    50ba:	50 e0       	ldi	r21, 0x00	; 0
    50bc:	60 91 b0 04 	lds	r22, 0x04B0
    50c0:	70 91 b1 04 	lds	r23, 0x04B1
    50c4:	80 91 b2 04 	lds	r24, 0x04B2
    50c8:	90 91 b3 04 	lds	r25, 0x04B3
    50cc:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <__divmodsi4>
    50d0:	30 93 bd 04 	sts	0x04BD, r19
    50d4:	20 93 bc 04 	sts	0x04BC, r18
    50d8:	6b cf       	rjmp	.-298    	; 0x4fb0 <handleCalibration+0x1e0>
            calibState = CALIBRATION_STATE_START_MEASURE;
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    50da:	80 91 55 05 	lds	r24, 0x0555
    50de:	88 23       	and	r24, r24
    50e0:	91 f1       	breq	.+100    	; 0x5146 <handleCalibration+0x376>
    50e2:	82 30       	cpi	r24, 0x02	; 2
    50e4:	81 f1       	breq	.+96     	; 0x5146 <handleCalibration+0x376>
                    timeOdometry = getTime100MicroSec();;
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    50e6:	20 91 6b 02 	lds	r18, 0x026B
    50ea:	30 91 6c 02 	lds	r19, 0x026C
    50ee:	80 91 d0 04 	lds	r24, 0x04D0
    50f2:	90 91 d1 04 	lds	r25, 0x04D1
    50f6:	28 17       	cp	r18, r24
    50f8:	39 07       	cpc	r19, r25
    50fa:	0c f0       	brlt	.+2      	; 0x50fe <handleCalibration+0x32e>
    50fc:	68 cf       	rjmp	.-304    	; 0x4fce <handleCalibration+0x1fe>
					rightSumCount = 0;
    50fe:	10 92 bb 04 	sts	0x04BB, r1
    5102:	10 92 ba 04 	sts	0x04BA, r1
					rightSpeedSumOdom = 0;
    5106:	10 92 b4 04 	sts	0x04B4, r1
    510a:	10 92 b5 04 	sts	0x04B5, r1
    510e:	10 92 b6 04 	sts	0x04B6, r1
    5112:	10 92 b7 04 	sts	0x04B7, r1
                    timeOdometry = getTime100MicroSec();;
    5116:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    511a:	60 93 4e 05 	sts	0x054E, r22
    511e:	70 93 4f 05 	sts	0x054F, r23
    5122:	80 93 50 05 	sts	0x0550, r24
    5126:	90 93 51 05 	sts	0x0551, r25
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
    512a:	82 e0       	ldi	r24, 0x02	; 2
    512c:	80 93 63 0b 	sts	0x0B63, r24
                    timeoutOdometry = getTime100MicroSec();;
    5130:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    5134:	60 93 33 0b 	sts	0x0B33, r22
    5138:	70 93 34 0b 	sts	0x0B34, r23
    513c:	80 93 35 0b 	sts	0x0B35, r24
    5140:	90 93 36 0b 	sts	0x0B36, r25
    5144:	44 cf       	rjmp	.-376    	; 0x4fce <handleCalibration+0x1fe>
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {				
    5146:	20 91 65 02 	lds	r18, 0x0265
    514a:	30 91 66 02 	lds	r19, 0x0266
    514e:	80 91 d0 04 	lds	r24, 0x04D0
    5152:	90 91 d1 04 	lds	r25, 0x04D1
    5156:	28 17       	cp	r18, r24
    5158:	39 07       	cpc	r19, r25
    515a:	0c f0       	brlt	.+2      	; 0x515e <handleCalibration+0x38e>
    515c:	38 cf       	rjmp	.-400    	; 0x4fce <handleCalibration+0x1fe>
                	leftSumCount = 0;
    515e:	10 92 b9 04 	sts	0x04B9, r1
    5162:	10 92 b8 04 	sts	0x04B8, r1
                    leftSpeedSumOdom = 0;
    5166:	10 92 b0 04 	sts	0x04B0, r1
    516a:	10 92 b1 04 	sts	0x04B1, r1
    516e:	10 92 b2 04 	sts	0x04B2, r1
    5172:	10 92 b3 04 	sts	0x04B3, r1
    5176:	cf cf       	rjmp	.-98     	; 0x5116 <handleCalibration+0x346>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5178:	80 91 55 05 	lds	r24, 0x0555
    517c:	88 23       	and	r24, r24
    517e:	61 f1       	breq	.+88     	; 0x51d8 <handleCalibration+0x408>
    5180:	82 30       	cpi	r24, 0x02	; 2
    5182:	51 f1       	breq	.+84     	; 0x51d8 <handleCalibration+0x408>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_NEXT;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    5184:	20 91 6b 02 	lds	r18, 0x026B
    5188:	30 91 6c 02 	lds	r19, 0x026C
    518c:	80 91 d0 04 	lds	r24, 0x04D0
    5190:	90 91 d1 04 	lds	r25, 0x04D1
    5194:	82 17       	cp	r24, r18
    5196:	93 07       	cpc	r25, r19
    5198:	1c f4       	brge	.+6      	; 0x51a0 <handleCalibration+0x3d0>
					calibState = CALIBRATION_STATE_NEXT;
    519a:	85 e0       	ldi	r24, 0x05	; 5
    519c:	80 93 63 0b 	sts	0x0B63, r24
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    51a0:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    51a4:	20 91 33 0b 	lds	r18, 0x0B33
    51a8:	30 91 34 0b 	lds	r19, 0x0B34
    51ac:	40 91 35 0b 	lds	r20, 0x0B35
    51b0:	50 91 36 0b 	lds	r21, 0x0B36
    51b4:	62 1b       	sub	r22, r18
    51b6:	73 0b       	sbc	r23, r19
    51b8:	84 0b       	sbc	r24, r20
    51ba:	95 0b       	sbc	r25, r21
    51bc:	6c 59       	subi	r22, 0x9C	; 156
    51be:	7d 4c       	sbci	r23, 0xCD	; 205
    51c0:	88 40       	sbci	r24, 0x08	; 8
    51c2:	90 40       	sbci	r25, 0x00	; 0
    51c4:	08 f4       	brcc	.+2      	; 0x51c8 <handleCalibration+0x3f8>
    51c6:	1a ce       	rjmp	.-972    	; 0x4dfc <handleCalibration+0x2c>
            	tempVel = 0;
    51c8:	10 92 79 0b 	sts	0x0B79, r1
    51cc:	10 92 78 0b 	sts	0x0B78, r1
                //updateOdomData();
                calibState = CALIBRATION_STATE_NEXT;
    51d0:	85 e0       	ldi	r24, 0x05	; 5
    51d2:	80 93 63 0b 	sts	0x0B63, r24
    51d6:	08 95       	ret
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    51d8:	20 91 65 02 	lds	r18, 0x0265
    51dc:	30 91 66 02 	lds	r19, 0x0266
    51e0:	80 91 d0 04 	lds	r24, 0x04D0
    51e4:	90 91 d1 04 	lds	r25, 0x04D1
    51e8:	82 17       	cp	r24, r18
    51ea:	93 07       	cpc	r25, r19
    51ec:	cc f6       	brge	.-78     	; 0x51a0 <handleCalibration+0x3d0>
    51ee:	d5 cf       	rjmp	.-86     	; 0x519a <handleCalibration+0x3ca>
                calibState = CALIBRATION_STATE_NEXT;
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    51f0:	80 91 55 05 	lds	r24, 0x0555
    51f4:	88 23       	and	r24, r24
    51f6:	e1 f0       	breq	.+56     	; 0x5230 <handleCalibration+0x460>
    51f8:	82 30       	cpi	r24, 0x02	; 2
    51fa:	d1 f0       	breq	.+52     	; 0x5230 <handleCalibration+0x460>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    51fc:	20 91 6b 02 	lds	r18, 0x026B
    5200:	30 91 6c 02 	lds	r19, 0x026C
    5204:	80 91 d0 04 	lds	r24, 0x04D0
    5208:	90 91 d1 04 	lds	r25, 0x04D1
    520c:	82 17       	cp	r24, r18
    520e:	93 07       	cpc	r25, r19
    5210:	0c f0       	brlt	.+2      	; 0x5214 <handleCalibration+0x444>
    5212:	dd ce       	rjmp	.-582    	; 0x4fce <handleCalibration+0x1fe>
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
    5214:	83 e0       	ldi	r24, 0x03	; 3
    5216:	80 93 63 0b 	sts	0x0B63, r24
                    timeoutOdometry = getTime100MicroSec();;
    521a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    521e:	60 93 33 0b 	sts	0x0B33, r22
    5222:	70 93 34 0b 	sts	0x0B34, r23
    5226:	80 93 35 0b 	sts	0x0B35, r24
    522a:	90 93 36 0b 	sts	0x0B36, r25
    522e:	cf ce       	rjmp	.-610    	; 0x4fce <handleCalibration+0x1fe>
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    5230:	20 91 65 02 	lds	r18, 0x0265
    5234:	30 91 66 02 	lds	r19, 0x0266
    5238:	80 91 d0 04 	lds	r24, 0x04D0
    523c:	90 91 d1 04 	lds	r25, 0x04D1
    5240:	82 17       	cp	r24, r18
    5242:	93 07       	cpc	r25, r19
    5244:	0c f0       	brlt	.+2      	; 0x5248 <handleCalibration+0x478>
    5246:	c3 ce       	rjmp	.-634    	; 0x4fce <handleCalibration+0x1fe>
    5248:	e5 cf       	rjmp	.-54     	; 0x5214 <handleCalibration+0x444>
			calibState = CALIBRATION_STATE_FIND_THRS_1;
			break;
		
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line securily (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
    524a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    524e:	20 91 33 0b 	lds	r18, 0x0B33
    5252:	30 91 34 0b 	lds	r19, 0x0B34
    5256:	40 91 35 0b 	lds	r20, 0x0B35
    525a:	50 91 36 0b 	lds	r21, 0x0B36
    525e:	62 1b       	sub	r22, r18
    5260:	73 0b       	sbc	r23, r19
    5262:	84 0b       	sbc	r24, r20
    5264:	95 0b       	sbc	r25, r21
    5266:	60 59       	subi	r22, 0x90	; 144
    5268:	75 42       	sbci	r23, 0x25	; 37
    526a:	80 40       	sbci	r24, 0x00	; 0
    526c:	90 40       	sbci	r25, 0x00	; 0
    526e:	08 f4       	brcc	.+2      	; 0x5272 <handleCalibration+0x4a2>
    5270:	c5 cd       	rjmp	.-1142   	; 0x4dfc <handleCalibration+0x2c>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
    5272:	80 91 55 05 	lds	r24, 0x0555
    5276:	88 23       	and	r24, r24
    5278:	09 f4       	brne	.+2      	; 0x527c <handleCalibration+0x4ac>
    527a:	40 c0       	rjmp	.+128    	; 0x52fc <handleCalibration+0x52c>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    527c:	81 30       	cpi	r24, 0x01	; 1
    527e:	09 f4       	brne	.+2      	; 0x5282 <handleCalibration+0x4b2>
    5280:	a1 c0       	rjmp	.+322    	; 0x53c4 <handleCalibration+0x5f4>
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
					pwm_intermediate_left_desired = 0;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    5282:	82 30       	cpi	r24, 0x02	; 2
    5284:	09 f4       	brne	.+2      	; 0x5288 <handleCalibration+0x4b8>
    5286:	a9 c0       	rjmp	.+338    	; 0x53da <handleCalibration+0x60a>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
	        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5288:	83 30       	cpi	r24, 0x03	; 3
    528a:	09 f0       	breq	.+2      	; 0x528e <handleCalibration+0x4be>
    528c:	41 c0       	rjmp	.+130    	; 0x5310 <handleCalibration+0x540>
					pwm_intermediate_right_desired = -((INDEX_STEP*3)<<2);
    528e:	84 ec       	ldi	r24, 0xC4	; 196
    5290:	9f ef       	ldi	r25, 0xFF	; 255
    5292:	90 93 fa 02 	sts	0x02FA, r25
    5296:	80 93 f9 02 	sts	0x02F9, r24
					pwm_intermediate_left_desired = 0;
    529a:	10 92 fc 02 	sts	0x02FC, r1
    529e:	10 92 fb 02 	sts	0x02FB, r1
    52a2:	36 c0       	rjmp	.+108    	; 0x5310 <handleCalibration+0x540>

void handleCalibration() {

	switch(calibState) {
		case CALIBRATION_STATE_FIND_THRS_0:
			timeoutOdometry = getTime100MicroSec();
    52a4:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    52a8:	60 93 33 0b 	sts	0x0B33, r22
    52ac:	70 93 34 0b 	sts	0x0B34, r23
    52b0:	80 93 35 0b 	sts	0x0B35, r24
    52b4:	90 93 36 0b 	sts	0x0B36, r25
			calibState = CALIBRATION_STATE_FIND_THRS_1;
    52b8:	87 e0       	ldi	r24, 0x07	; 7
    52ba:	80 93 63 0b 	sts	0x0B63, r24
    52be:	08 95       	ret

    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    52c0:	81 30       	cpi	r24, 0x01	; 1
    52c2:	f1 f1       	breq	.+124    	; 0x5340 <handleCalibration+0x570>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    52c4:	82 30       	cpi	r24, 0x02	; 2
    52c6:	09 f4       	brne	.+2      	; 0x52ca <handleCalibration+0x4fa>
    52c8:	67 c0       	rjmp	.+206    	; 0x5398 <handleCalibration+0x5c8>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    52ca:	83 30       	cpi	r24, 0x03	; 3
    52cc:	09 f0       	breq	.+2      	; 0x52d0 <handleCalibration+0x500>
    52ce:	b4 cd       	rjmp	.-1176   	; 0x4e38 <handleCalibration+0x68>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    52d0:	80 91 bd 08 	lds	r24, 0x08BD
    52d4:	25 e0       	ldi	r18, 0x05	; 5
    52d6:	82 9f       	mul	r24, r18
    52d8:	c0 01       	movw	r24, r0
    52da:	11 24       	eor	r1, r1
    52dc:	88 0f       	add	r24, r24
    52de:	99 1f       	adc	r25, r25
    52e0:	88 0f       	add	r24, r24
    52e2:	99 1f       	adc	r25, r25
    52e4:	90 95       	com	r25
    52e6:	81 95       	neg	r24
    52e8:	9f 4f       	sbci	r25, 0xFF	; 255
    52ea:	90 93 fa 02 	sts	0x02FA, r25
    52ee:	80 93 f9 02 	sts	0x02F9, r24
				pwm_intermediate_left_desired = 0;
    52f2:	10 92 fc 02 	sts	0x02FC, r1
    52f6:	10 92 fb 02 	sts	0x02FB, r1
    52fa:	9e cd       	rjmp	.-1220   	; 0x4e38 <handleCalibration+0x68>
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line securily (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = 0;
    52fc:	10 92 fa 02 	sts	0x02FA, r1
    5300:	10 92 f9 02 	sts	0x02F9, r1
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
    5304:	8c e3       	ldi	r24, 0x3C	; 60
    5306:	90 e0       	ldi	r25, 0x00	; 0
    5308:	90 93 fc 02 	sts	0x02FC, r25
    530c:	80 93 fb 02 	sts	0x02FB, r24
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
	        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
					pwm_intermediate_right_desired = -((INDEX_STEP*3)<<2);
					pwm_intermediate_left_desired = 0;
				}               
				minGround = 1023;
    5310:	8f ef       	ldi	r24, 0xFF	; 255
    5312:	93 e0       	ldi	r25, 0x03	; 3
    5314:	90 93 cd 04 	sts	0x04CD, r25
    5318:	80 93 cc 04 	sts	0x04CC, r24
				maxGround = 0;
    531c:	10 92 cf 04 	sts	0x04CF, r1
    5320:	10 92 ce 04 	sts	0x04CE, r1
	            calibState = CALIBRATION_STATE_FIND_THRS_2;
    5324:	88 e0       	ldi	r24, 0x08	; 8
    5326:	80 93 63 0b 	sts	0x0B63, r24
	            timeoutOdometry = getTime100MicroSec();
    532a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    532e:	60 93 33 0b 	sts	0x0B33, r22
    5332:	70 93 34 0b 	sts	0x0B34, r23
    5336:	80 93 35 0b 	sts	0x0B35, r24
    533a:	90 93 36 0b 	sts	0x0B36, r25
    533e:	08 95       	ret
    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    5340:	80 91 bd 08 	lds	r24, 0x08BD
    5344:	25 e0       	ldi	r18, 0x05	; 5
    5346:	82 9f       	mul	r24, r18
    5348:	c0 01       	movw	r24, r0
    534a:	11 24       	eor	r1, r1
    534c:	88 0f       	add	r24, r24
    534e:	99 1f       	adc	r25, r25
    5350:	88 0f       	add	r24, r24
    5352:	99 1f       	adc	r25, r25
    5354:	90 93 fa 02 	sts	0x02FA, r25
    5358:	80 93 f9 02 	sts	0x02F9, r24
				pwm_intermediate_left_desired = 0;
    535c:	10 92 fc 02 	sts	0x02FC, r1
    5360:	10 92 fb 02 	sts	0x02FB, r1
    5364:	69 cd       	rjmp	.-1326   	; 0x4e38 <handleCalibration+0x68>
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    5366:	91 e0       	ldi	r25, 0x01	; 1
    5368:	90 93 bd 08 	sts	0x08BD, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    536c:	80 91 55 05 	lds	r24, 0x0555
    5370:	88 23       	and	r24, r24
    5372:	21 f4       	brne	.+8      	; 0x537c <handleCalibration+0x5ac>
                	calibWheel = LEFT_WHEEL_BW_SC;
    5374:	82 e0       	ldi	r24, 0x02	; 2
    5376:	80 93 55 05 	sts	0x0555, r24
    537a:	3e cd       	rjmp	.-1412   	; 0x4df8 <handleCalibration+0x28>
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    537c:	81 30       	cpi	r24, 0x01	; 1
    537e:	c1 f1       	breq	.+112    	; 0x53f0 <handleCalibration+0x620>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    5380:	82 30       	cpi	r24, 0x02	; 2
    5382:	d1 f1       	breq	.+116    	; 0x53f8 <handleCalibration+0x628>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
					break;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5384:	83 30       	cpi	r24, 0x03	; 3
    5386:	09 f0       	breq	.+2      	; 0x538a <handleCalibration+0x5ba>
    5388:	37 cd       	rjmp	.-1426   	; 0x4df8 <handleCalibration+0x28>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    538a:	10 92 55 05 	sts	0x0555, r1
					// red off
					writeCalibrationToFlash();
    538e:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    5392:	10 92 70 05 	sts	0x0570, r1
    5396:	30 cd       	rjmp	.-1440   	; 0x4df8 <handleCalibration+0x28>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    5398:	10 92 fa 02 	sts	0x02FA, r1
    539c:	10 92 f9 02 	sts	0x02F9, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    53a0:	80 91 bd 08 	lds	r24, 0x08BD
    53a4:	25 e0       	ldi	r18, 0x05	; 5
    53a6:	82 9f       	mul	r24, r18
    53a8:	c0 01       	movw	r24, r0
    53aa:	11 24       	eor	r1, r1
    53ac:	88 0f       	add	r24, r24
    53ae:	99 1f       	adc	r25, r25
    53b0:	88 0f       	add	r24, r24
    53b2:	99 1f       	adc	r25, r25
    53b4:	90 95       	com	r25
    53b6:	81 95       	neg	r24
    53b8:	9f 4f       	sbci	r25, 0xFF	; 255
    53ba:	90 93 fc 02 	sts	0x02FC, r25
    53be:	80 93 fb 02 	sts	0x02FB, r24
    53c2:	3a cd       	rjmp	.-1420   	; 0x4e38 <handleCalibration+0x68>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
    53c4:	8c e3       	ldi	r24, 0x3C	; 60
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	90 93 fa 02 	sts	0x02FA, r25
    53cc:	80 93 f9 02 	sts	0x02F9, r24
					pwm_intermediate_left_desired = 0;
    53d0:	10 92 fc 02 	sts	0x02FC, r1
    53d4:	10 92 fb 02 	sts	0x02FB, r1
    53d8:	9b cf       	rjmp	.-202    	; 0x5310 <handleCalibration+0x540>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
					pwm_intermediate_right_desired = 0;
    53da:	10 92 fa 02 	sts	0x02FA, r1
    53de:	10 92 f9 02 	sts	0x02F9, r1
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
    53e2:	84 ec       	ldi	r24, 0xC4	; 196
    53e4:	9f ef       	ldi	r25, 0xFF	; 255
    53e6:	90 93 fc 02 	sts	0x02FC, r25
    53ea:	80 93 fb 02 	sts	0x02FB, r24
    53ee:	90 cf       	rjmp	.-224    	; 0x5310 <handleCalibration+0x540>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    53f0:	83 e0       	ldi	r24, 0x03	; 3
    53f2:	80 93 55 05 	sts	0x0555, r24
    53f6:	00 cd       	rjmp	.-1536   	; 0x4df8 <handleCalibration+0x28>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    53f8:	90 93 55 05 	sts	0x0555, r25
					calibrateOdomFlag = 0;
    53fc:	10 92 70 05 	sts	0x0570, r1
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
    5400:	86 e0       	ldi	r24, 0x06	; 6
    5402:	80 93 63 0b 	sts	0x0B63, r24
    5406:	08 95       	ret

00005408 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    5408:	2f 92       	push	r2
    540a:	3f 92       	push	r3
    540c:	4f 92       	push	r4
    540e:	5f 92       	push	r5
    5410:	6f 92       	push	r6
    5412:	7f 92       	push	r7
    5414:	8f 92       	push	r8
    5416:	9f 92       	push	r9
    5418:	af 92       	push	r10
    541a:	bf 92       	push	r11
    541c:	cf 92       	push	r12
    541e:	df 92       	push	r13
    5420:	ef 92       	push	r14
    5422:	ff 92       	push	r15
    5424:	0f 93       	push	r16
    5426:	1f 93       	push	r17
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
    5428:	40 91 70 05 	lds	r20, 0x0570
    542c:	44 23       	and	r20, r20
    542e:	09 f4       	brne	.+2      	; 0x5432 <handleMotorsWithSpeedController+0x2a>
    5430:	4e c2       	rjmp	.+1180   	; 0x58ce <handleMotorsWithSpeedController+0x4c6>
    5432:	20 91 f9 02 	lds	r18, 0x02F9
    5436:	30 91 fa 02 	lds	r19, 0x02FA

void handleMotorsWithSpeedController() {

	handleSoftAcceleration();

	if(calibrateOdomFlag==1) {
    543a:	41 30       	cpi	r20, 0x01	; 1
    543c:	09 f4       	brne	.+2      	; 0x5440 <handleMotorsWithSpeedController+0x38>
    543e:	0c c3       	rjmp	.+1560   	; 0x5a58 <handleMotorsWithSpeedController+0x650>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    5440:	37 fd       	sbrc	r19, 7
    5442:	81 c1       	rjmp	.+770    	; 0x5746 <handleMotorsWithSpeedController+0x33e>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    5444:	c9 01       	movw	r24, r18
    5446:	61 e0       	ldi	r22, 0x01	; 1
    5448:	0e 94 1d 19 	call	0x323a	; 0x323a <getInputFromSpeed>
    544c:	90 93 0a 03 	sts	0x030A, r25
    5450:	80 93 09 03 	sts	0x0309, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    5454:	80 91 fb 02 	lds	r24, 0x02FB
    5458:	90 91 fc 02 	lds	r25, 0x02FC
    545c:	97 fd       	sbrc	r25, 7
    545e:	81 c1       	rjmp	.+770    	; 0x5762 <handleMotorsWithSpeedController+0x35a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    5460:	60 e0       	ldi	r22, 0x00	; 0
    5462:	0e 94 1d 19 	call	0x323a	; 0x323a <getInputFromSpeed>
    5466:	90 93 0c 03 	sts	0x030C, r25
    546a:	80 93 0b 03 	sts	0x030B, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    546e:	80 91 74 04 	lds	r24, 0x0474
    5472:	88 23       	and	r24, r24
    5474:	09 f0       	breq	.+2      	; 0x5478 <handleMotorsWithSpeedController+0x70>
    5476:	81 c1       	rjmp	.+770    	; 0x577a <handleMotorsWithSpeedController+0x372>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    5478:	80 91 0b 03 	lds	r24, 0x030B
    547c:	90 91 0c 03 	lds	r25, 0x030C
    5480:	90 93 e8 02 	sts	0x02E8, r25
    5484:	80 93 e7 02 	sts	0x02E7, r24
	pwm_right_desired_to_control = pwm_right_working;
    5488:	80 91 09 03 	lds	r24, 0x0309
    548c:	90 91 0a 03 	lds	r25, 0x030A
    5490:	90 93 e6 02 	sts	0x02E6, r25
    5494:	80 93 e5 02 	sts	0x02E5, r24

	if(compute_left_vel) {
    5498:	80 91 03 02 	lds	r24, 0x0203
    549c:	88 23       	and	r24, r24
    549e:	09 f4       	brne	.+2      	; 0x54a2 <handleMotorsWithSpeedController+0x9a>
    54a0:	a2 c0       	rjmp	.+324    	; 0x55e6 <handleMotorsWithSpeedController+0x1de>

		last_left_vel = left_vel_sum>>2;
    54a2:	20 91 e9 02 	lds	r18, 0x02E9
    54a6:	30 91 ea 02 	lds	r19, 0x02EA
    54aa:	36 95       	lsr	r19
    54ac:	27 95       	ror	r18
    54ae:	36 95       	lsr	r19
    54b0:	27 95       	ror	r18
    54b2:	30 93 ee 02 	sts	0x02EE, r19
    54b6:	20 93 ed 02 	sts	0x02ED, r18
		compute_left_vel = 0;
    54ba:	10 92 03 02 	sts	0x0203, r1
		left_vel_sum = 0;
    54be:	10 92 ea 02 	sts	0x02EA, r1
    54c2:	10 92 e9 02 	sts	0x02E9, r1
		
		if(calibrateOdomFlag==1) {
    54c6:	80 91 70 05 	lds	r24, 0x0570
    54ca:	81 30       	cpi	r24, 0x01	; 1
    54cc:	09 f4       	brne	.+2      	; 0x54d0 <handleMotorsWithSpeedController+0xc8>
    54ce:	95 c3       	rjmp	.+1834   	; 0x5bfa <handleMotorsWithSpeedController+0x7f2>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    54d0:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    54d4:	80 91 9b 04 	lds	r24, 0x049B
    54d8:	90 91 9c 04 	lds	r25, 0x049C
    54dc:	a0 91 9d 04 	lds	r26, 0x049D
    54e0:	b0 91 9e 04 	lds	r27, 0x049E
    54e4:	80 93 a3 04 	sts	0x04A3, r24
    54e8:	90 93 a4 04 	sts	0x04A4, r25
    54ec:	a0 93 a5 04 	sts	0x04A5, r26
    54f0:	b0 93 a6 04 	sts	0x04A6, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    54f4:	60 91 c0 04 	lds	r22, 0x04C0
    54f8:	70 91 c1 04 	lds	r23, 0x04C1
    54fc:	88 27       	eor	r24, r24
    54fe:	77 fd       	sbrc	r23, 7
    5500:	80 95       	com	r24
    5502:	98 2f       	mov	r25, r24
    5504:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    5508:	7b 01       	movw	r14, r22
    550a:	8c 01       	movw	r16, r24
    550c:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    5510:	20 91 c4 04 	lds	r18, 0x04C4
    5514:	30 91 c5 04 	lds	r19, 0x04C5
    5518:	40 91 c6 04 	lds	r20, 0x04C6
    551c:	50 91 c7 04 	lds	r21, 0x04C7
    5520:	62 1b       	sub	r22, r18
    5522:	73 0b       	sbc	r23, r19
    5524:	84 0b       	sbc	r24, r20
    5526:	95 0b       	sbc	r25, r21
    5528:	0e 94 f1 4c 	call	0x99e2	; 0x99e2 <__floatunsisf>
    552c:	20 e0       	ldi	r18, 0x00	; 0
    552e:	30 e0       	ldi	r19, 0x00	; 0
    5530:	40 ed       	ldi	r20, 0xD0	; 208
    5532:	52 e4       	ldi	r21, 0x42	; 66
    5534:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    5538:	9b 01       	movw	r18, r22
    553a:	ac 01       	movw	r20, r24
    553c:	c8 01       	movw	r24, r16
    553e:	b7 01       	movw	r22, r14
    5540:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    5544:	20 e0       	ldi	r18, 0x00	; 0
    5546:	34 e2       	ldi	r19, 0x24	; 36
    5548:	44 e7       	ldi	r20, 0x74	; 116
    554a:	59 e4       	ldi	r21, 0x49	; 73
    554c:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    5550:	9b 01       	movw	r18, r22
    5552:	ac 01       	movw	r20, r24
    5554:	60 91 9b 04 	lds	r22, 0x049B
    5558:	70 91 9c 04 	lds	r23, 0x049C
    555c:	80 91 9d 04 	lds	r24, 0x049D
    5560:	90 91 9e 04 	lds	r25, 0x049E
    5564:	0e 94 8f 4b 	call	0x971e	; 0x971e <__addsf3>
    5568:	60 93 9b 04 	sts	0x049B, r22
    556c:	70 93 9c 04 	sts	0x049C, r23
    5570:	80 93 9d 04 	sts	0x049D, r24
    5574:	90 93 9e 04 	sts	0x049E, r25
		timeLeftOdom = getTime100MicroSec();
    5578:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    557c:	60 93 c4 04 	sts	0x04C4, r22
    5580:	70 93 c5 04 	sts	0x04C5, r23
    5584:	80 93 c6 04 	sts	0x04C6, r24
    5588:	90 93 c7 04 	sts	0x04C7, r25
		leftMotSteps = (signed long int)leftDist;
    558c:	60 91 9b 04 	lds	r22, 0x049B
    5590:	70 91 9c 04 	lds	r23, 0x049C
    5594:	80 91 9d 04 	lds	r24, 0x049D
    5598:	90 91 9e 04 	lds	r25, 0x049E
    559c:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    55a0:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    55a4:	60 93 d1 02 	sts	0x02D1, r22
    55a8:	70 93 d2 02 	sts	0x02D2, r23
    55ac:	80 93 d3 02 	sts	0x02D3, r24
    55b0:	90 93 d4 02 	sts	0x02D4, r25
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/

		start_speed_control_left(&pwm_left_working);
    55b4:	8b e0       	ldi	r24, 0x0B	; 11
    55b6:	93 e0       	ldi	r25, 0x03	; 3
    55b8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <start_speed_control_left>

		pwm_left = pwm_left_working;
    55bc:	20 91 0b 03 	lds	r18, 0x030B
    55c0:	30 91 0c 03 	lds	r19, 0x030C
    55c4:	30 93 f4 02 	sts	0x02F4, r19
    55c8:	20 93 f3 02 	sts	0x02F3, r18

		if(pwm_left > 0) {
    55cc:	12 16       	cp	r1, r18
    55ce:	13 06       	cpc	r1, r19
    55d0:	0c f0       	brlt	.+2      	; 0x55d4 <handleMotorsWithSpeedController+0x1cc>
    55d2:	36 c3       	rjmp	.+1644   	; 0x5c40 <handleMotorsWithSpeedController+0x838>
			OCR4A = (unsigned int)pwm_left;
    55d4:	30 93 a9 00 	sts	0x00A9, r19
    55d8:	20 93 a8 00 	sts	0x00A8, r18
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    55dc:	80 91 ab 04 	lds	r24, 0x04AB
    55e0:	8f 5f       	subi	r24, 0xFF	; 255
    55e2:	80 93 ab 04 	sts	0x04AB, r24

	}

	if(compute_right_vel) {
    55e6:	80 91 04 02 	lds	r24, 0x0204
    55ea:	88 23       	and	r24, r24
    55ec:	09 f0       	breq	.+2      	; 0x55f0 <handleMotorsWithSpeedController+0x1e8>
    55ee:	cc c0       	rjmp	.+408    	; 0x5788 <handleMotorsWithSpeedController+0x380>
    55f0:	80 91 ab 04 	lds	r24, 0x04AB

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    55f4:	82 30       	cpi	r24, 0x02	; 2
    55f6:	08 f4       	brcc	.+2      	; 0x55fa <handleMotorsWithSpeedController+0x1f2>
    55f8:	95 c0       	rjmp	.+298    	; 0x5724 <handleMotorsWithSpeedController+0x31c>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    55fa:	10 92 ab 04 	sts	0x04AB, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    55fe:	20 90 9f 04 	lds	r2, 0x049F
    5602:	30 90 a0 04 	lds	r3, 0x04A0
    5606:	40 90 a1 04 	lds	r4, 0x04A1
    560a:	50 90 a2 04 	lds	r5, 0x04A2
    560e:	60 90 9b 04 	lds	r6, 0x049B
    5612:	70 90 9c 04 	lds	r7, 0x049C
    5616:	80 90 9d 04 	lds	r8, 0x049D
    561a:	90 90 9e 04 	lds	r9, 0x049E
    561e:	c2 01       	movw	r24, r4
    5620:	b1 01       	movw	r22, r2
    5622:	20 91 a7 04 	lds	r18, 0x04A7
    5626:	30 91 a8 04 	lds	r19, 0x04A8
    562a:	40 91 a9 04 	lds	r20, 0x04A9
    562e:	50 91 aa 04 	lds	r21, 0x04AA
    5632:	0e 94 8e 4b 	call	0x971c	; 0x971c <__subsf3>
    5636:	7b 01       	movw	r14, r22
    5638:	8c 01       	movw	r16, r24
    563a:	c4 01       	movw	r24, r8
    563c:	b3 01       	movw	r22, r6
    563e:	20 91 a3 04 	lds	r18, 0x04A3
    5642:	30 91 a4 04 	lds	r19, 0x04A4
    5646:	40 91 a5 04 	lds	r20, 0x04A5
    564a:	50 91 a6 04 	lds	r21, 0x04A6
    564e:	0e 94 8e 4b 	call	0x971c	; 0x971c <__subsf3>
    5652:	9b 01       	movw	r18, r22
    5654:	ac 01       	movw	r20, r24
    5656:	c8 01       	movw	r24, r16
    5658:	b7 01       	movw	r22, r14
    565a:	0e 94 8f 4b 	call	0x971e	; 0x971e <__addsf3>
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	40 e0       	ldi	r20, 0x00	; 0
    5664:	5f e3       	ldi	r21, 0x3F	; 63
    5666:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    566a:	5b 01       	movw	r10, r22
    566c:	6c 01       	movw	r12, r24
    566e:	60 93 87 04 	sts	0x0487, r22
    5672:	70 93 88 04 	sts	0x0488, r23
    5676:	80 93 89 04 	sts	0x0489, r24
    567a:	90 93 8a 04 	sts	0x048A, r25

		if(robotPosition == HORIZONTAL_POS) {
    567e:	80 91 12 02 	lds	r24, 0x0212
    5682:	81 30       	cpi	r24, 0x01	; 1
    5684:	09 f4       	brne	.+2      	; 0x5688 <handleMotorsWithSpeedController+0x280>
    5686:	f5 c1       	rjmp	.+1002   	; 0x5a72 <handleMotorsWithSpeedController+0x66a>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    5688:	80 91 ac 04 	lds	r24, 0x04AC
    568c:	90 91 ad 04 	lds	r25, 0x04AD
    5690:	a0 91 ae 04 	lds	r26, 0x04AE
    5694:	b0 91 af 04 	lds	r27, 0x04AF
    5698:	80 93 77 04 	sts	0x0477, r24
    569c:	90 93 78 04 	sts	0x0478, r25
    56a0:	a0 93 79 04 	sts	0x0479, r26
    56a4:	b0 93 7a 04 	sts	0x047A, r27
    56a8:	7c 01       	movw	r14, r24
    56aa:	8d 01       	movw	r16, r26
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    56ac:	c8 01       	movw	r24, r16
    56ae:	b7 01       	movw	r22, r14
    56b0:	0e 94 55 4c 	call	0x98aa	; 0x98aa <cos>
    56b4:	9b 01       	movw	r18, r22
    56b6:	ac 01       	movw	r20, r24
    56b8:	c6 01       	movw	r24, r12
    56ba:	b5 01       	movw	r22, r10
    56bc:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    56c0:	9b 01       	movw	r18, r22
    56c2:	ac 01       	movw	r20, r24
    56c4:	60 91 7f 04 	lds	r22, 0x047F
    56c8:	70 91 80 04 	lds	r23, 0x0480
    56cc:	80 91 81 04 	lds	r24, 0x0481
    56d0:	90 91 82 04 	lds	r25, 0x0482
    56d4:	0e 94 8f 4b 	call	0x971e	; 0x971e <__addsf3>
    56d8:	60 93 7f 04 	sts	0x047F, r22
    56dc:	70 93 80 04 	sts	0x0480, r23
    56e0:	80 93 81 04 	sts	0x0481, r24
    56e4:	90 93 82 04 	sts	0x0482, r25
		yPos = yPos + sin(theta)*deltaDist;
    56e8:	c8 01       	movw	r24, r16
    56ea:	b7 01       	movw	r22, r14
    56ec:	0e 94 47 4e 	call	0x9c8e	; 0x9c8e <sin>
    56f0:	9b 01       	movw	r18, r22
    56f2:	ac 01       	movw	r20, r24
    56f4:	c6 01       	movw	r24, r12
    56f6:	b5 01       	movw	r22, r10
    56f8:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    56fc:	9b 01       	movw	r18, r22
    56fe:	ac 01       	movw	r20, r24
    5700:	60 91 83 04 	lds	r22, 0x0483
    5704:	70 91 84 04 	lds	r23, 0x0484
    5708:	80 91 85 04 	lds	r24, 0x0485
    570c:	90 91 86 04 	lds	r25, 0x0486
    5710:	0e 94 8f 4b 	call	0x971e	; 0x971e <__addsf3>
    5714:	60 93 83 04 	sts	0x0483, r22
    5718:	70 93 84 04 	sts	0x0484, r23
    571c:	80 93 85 04 	sts	0x0485, r24
    5720:	90 93 86 04 	sts	0x0486, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    5724:	1f 91       	pop	r17
    5726:	0f 91       	pop	r16
    5728:	ff 90       	pop	r15
    572a:	ef 90       	pop	r14
    572c:	df 90       	pop	r13
    572e:	cf 90       	pop	r12
    5730:	bf 90       	pop	r11
    5732:	af 90       	pop	r10
    5734:	9f 90       	pop	r9
    5736:	8f 90       	pop	r8
    5738:	7f 90       	pop	r7
    573a:	6f 90       	pop	r6
    573c:	5f 90       	pop	r5
    573e:	4f 90       	pop	r4
    5740:	3f 90       	pop	r3
    5742:	2f 90       	pop	r2
    5744:	08 95       	ret
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    5746:	c9 01       	movw	r24, r18
    5748:	63 e0       	ldi	r22, 0x03	; 3
    574a:	0e 94 1d 19 	call	0x323a	; 0x323a <getInputFromSpeed>
    574e:	90 93 0a 03 	sts	0x030A, r25
    5752:	80 93 09 03 	sts	0x0309, r24
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    5756:	80 91 fb 02 	lds	r24, 0x02FB
    575a:	90 91 fc 02 	lds	r25, 0x02FC
    575e:	97 ff       	sbrs	r25, 7
    5760:	7f ce       	rjmp	.-770    	; 0x5460 <handleMotorsWithSpeedController+0x58>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    5762:	62 e0       	ldi	r22, 0x02	; 2
    5764:	0e 94 1d 19 	call	0x323a	; 0x323a <getInputFromSpeed>
    5768:	90 93 0c 03 	sts	0x030C, r25
    576c:	80 93 0b 03 	sts	0x030B, r24
		}
	}

	if(obstacleAvoidanceEnabled) {
    5770:	80 91 74 04 	lds	r24, 0x0474
    5774:	88 23       	and	r24, r24
    5776:	09 f4       	brne	.+2      	; 0x577a <handleMotorsWithSpeedController+0x372>
    5778:	7f ce       	rjmp	.-770    	; 0x5478 <handleMotorsWithSpeedController+0x70>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    577a:	8b e0       	ldi	r24, 0x0B	; 11
    577c:	93 e0       	ldi	r25, 0x03	; 3
    577e:	69 e0       	ldi	r22, 0x09	; 9
    5780:	73 e0       	ldi	r23, 0x03	; 3
    5782:	0e 94 a8 33 	call	0x6750	; 0x6750 <obstacleAvoidance>
    5786:	78 ce       	rjmp	.-784    	; 0x5478 <handleMotorsWithSpeedController+0x70>

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    5788:	20 91 eb 02 	lds	r18, 0x02EB
    578c:	30 91 ec 02 	lds	r19, 0x02EC
    5790:	36 95       	lsr	r19
    5792:	27 95       	ror	r18
    5794:	36 95       	lsr	r19
    5796:	27 95       	ror	r18
    5798:	30 93 f0 02 	sts	0x02F0, r19
    579c:	20 93 ef 02 	sts	0x02EF, r18
		compute_right_vel = 0;
    57a0:	10 92 04 02 	sts	0x0204, r1
		right_vel_sum = 0;
    57a4:	10 92 ec 02 	sts	0x02EC, r1
    57a8:	10 92 eb 02 	sts	0x02EB, r1

		if(calibrateOdomFlag==1) {
    57ac:	80 91 70 05 	lds	r24, 0x0570
    57b0:	81 30       	cpi	r24, 0x01	; 1
    57b2:	09 f4       	brne	.+2      	; 0x57b6 <handleMotorsWithSpeedController+0x3ae>
    57b4:	ff c1       	rjmp	.+1022   	; 0x5bb4 <handleMotorsWithSpeedController+0x7ac>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    57b6:	0e 94 cd 1c 	call	0x399a	; 0x399a <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    57ba:	80 91 9f 04 	lds	r24, 0x049F
    57be:	90 91 a0 04 	lds	r25, 0x04A0
    57c2:	a0 91 a1 04 	lds	r26, 0x04A1
    57c6:	b0 91 a2 04 	lds	r27, 0x04A2
    57ca:	80 93 a7 04 	sts	0x04A7, r24
    57ce:	90 93 a8 04 	sts	0x04A8, r25
    57d2:	a0 93 a9 04 	sts	0x04A9, r26
    57d6:	b0 93 aa 04 	sts	0x04AA, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    57da:	60 91 c2 04 	lds	r22, 0x04C2
    57de:	70 91 c3 04 	lds	r23, 0x04C3
    57e2:	88 27       	eor	r24, r24
    57e4:	77 fd       	sbrc	r23, 7
    57e6:	80 95       	com	r24
    57e8:	98 2f       	mov	r25, r24
    57ea:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    57ee:	7b 01       	movw	r14, r22
    57f0:	8c 01       	movw	r16, r24
    57f2:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    57f6:	20 91 c8 04 	lds	r18, 0x04C8
    57fa:	30 91 c9 04 	lds	r19, 0x04C9
    57fe:	40 91 ca 04 	lds	r20, 0x04CA
    5802:	50 91 cb 04 	lds	r21, 0x04CB
    5806:	62 1b       	sub	r22, r18
    5808:	73 0b       	sbc	r23, r19
    580a:	84 0b       	sbc	r24, r20
    580c:	95 0b       	sbc	r25, r21
    580e:	0e 94 f1 4c 	call	0x99e2	; 0x99e2 <__floatunsisf>
    5812:	20 e0       	ldi	r18, 0x00	; 0
    5814:	30 e0       	ldi	r19, 0x00	; 0
    5816:	40 ed       	ldi	r20, 0xD0	; 208
    5818:	52 e4       	ldi	r21, 0x42	; 66
    581a:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    581e:	9b 01       	movw	r18, r22
    5820:	ac 01       	movw	r20, r24
    5822:	c8 01       	movw	r24, r16
    5824:	b7 01       	movw	r22, r14
    5826:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    582a:	20 e0       	ldi	r18, 0x00	; 0
    582c:	34 e2       	ldi	r19, 0x24	; 36
    582e:	44 e7       	ldi	r20, 0x74	; 116
    5830:	59 e4       	ldi	r21, 0x49	; 73
    5832:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    5836:	9b 01       	movw	r18, r22
    5838:	ac 01       	movw	r20, r24
    583a:	60 91 9f 04 	lds	r22, 0x049F
    583e:	70 91 a0 04 	lds	r23, 0x04A0
    5842:	80 91 a1 04 	lds	r24, 0x04A1
    5846:	90 91 a2 04 	lds	r25, 0x04A2
    584a:	0e 94 8f 4b 	call	0x971e	; 0x971e <__addsf3>
    584e:	60 93 9f 04 	sts	0x049F, r22
    5852:	70 93 a0 04 	sts	0x04A0, r23
    5856:	80 93 a1 04 	sts	0x04A1, r24
    585a:	90 93 a2 04 	sts	0x04A2, r25
		timeRightOdom = getTime100MicroSec();
    585e:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    5862:	60 93 c8 04 	sts	0x04C8, r22
    5866:	70 93 c9 04 	sts	0x04C9, r23
    586a:	80 93 ca 04 	sts	0x04CA, r24
    586e:	90 93 cb 04 	sts	0x04CB, r25
		rightMotSteps = (signed long int)rightDist;
    5872:	60 91 9f 04 	lds	r22, 0x049F
    5876:	70 91 a0 04 	lds	r23, 0x04A0
    587a:	80 91 a1 04 	lds	r24, 0x04A1
    587e:	90 91 a2 04 	lds	r25, 0x04A2
    5882:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    5886:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    588a:	60 93 cd 02 	sts	0x02CD, r22
    588e:	70 93 ce 02 	sts	0x02CE, r23
    5892:	80 93 cf 02 	sts	0x02CF, r24
    5896:	90 93 d0 02 	sts	0x02D0, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		start_speed_control_right(&pwm_right_working);
    589a:	89 e0       	ldi	r24, 0x09	; 9
    589c:	93 e0       	ldi	r25, 0x03	; 3
    589e:	0e 94 32 0b 	call	0x1664	; 0x1664 <start_speed_control_right>

		pwm_right = pwm_right_working;
    58a2:	20 91 09 03 	lds	r18, 0x0309
    58a6:	30 91 0a 03 	lds	r19, 0x030A
    58aa:	30 93 f2 02 	sts	0x02F2, r19
    58ae:	20 93 f1 02 	sts	0x02F1, r18

		if(pwm_right > 0) {
    58b2:	12 16       	cp	r1, r18
    58b4:	13 06       	cpc	r1, r19
    58b6:	0c f0       	brlt	.+2      	; 0x58ba <handleMotorsWithSpeedController+0x4b2>
    58b8:	d0 c1       	rjmp	.+928    	; 0x5c5a <handleMotorsWithSpeedController+0x852>
			OCR3A = (unsigned int)pwm_right;
    58ba:	30 93 99 00 	sts	0x0099, r19
    58be:	20 93 98 00 	sts	0x0098, r18
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    58c2:	80 91 ab 04 	lds	r24, 0x04AB
    58c6:	8f 5f       	subi	r24, 0xFF	; 255
    58c8:	80 93 ab 04 	sts	0x04AB, r24
    58cc:	93 ce       	rjmp	.-730    	; 0x55f4 <handleMotorsWithSpeedController+0x1ec>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    58ce:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    58d2:	8b 01       	movw	r16, r22
    58d4:	9c 01       	movw	r18, r24
    58d6:	40 e0       	ldi	r20, 0x00	; 0
    58d8:	50 e0       	ldi	r21, 0x00	; 0
    58da:	60 e0       	ldi	r22, 0x00	; 0
    58dc:	70 e0       	ldi	r23, 0x00	; 0
    58de:	80 91 64 04 	lds	r24, 0x0464
    58e2:	90 91 65 04 	lds	r25, 0x0465
    58e6:	f0 91 66 04 	lds	r31, 0x0466
    58ea:	b0 91 67 04 	lds	r27, 0x0467
    58ee:	d0 90 68 04 	lds	r13, 0x0468
    58f2:	b0 90 69 04 	lds	r11, 0x0469
    58f6:	90 90 6a 04 	lds	r9, 0x046A
    58fa:	a0 91 6b 04 	lds	r26, 0x046B
    58fe:	80 2e       	mov	r8, r16
    5900:	88 1a       	sub	r8, r24
    5902:	e1 e0       	ldi	r30, 0x01	; 1
    5904:	08 15       	cp	r16, r8
    5906:	08 f0       	brcs	.+2      	; 0x590a <handleMotorsWithSpeedController+0x502>
    5908:	30 c1       	rjmp	.+608    	; 0x5b6a <handleMotorsWithSpeedController+0x762>
    590a:	81 2f       	mov	r24, r17
    590c:	89 1b       	sub	r24, r25
    590e:	91 e0       	ldi	r25, 0x01	; 1
    5910:	18 17       	cp	r17, r24
    5912:	08 f0       	brcs	.+2      	; 0x5916 <handleMotorsWithSpeedController+0x50e>
    5914:	22 c1       	rjmp	.+580    	; 0x5b5a <handleMotorsWithSpeedController+0x752>
    5916:	e8 2e       	mov	r14, r24
    5918:	ee 1a       	sub	r14, r30
    591a:	e1 e0       	ldi	r30, 0x01	; 1
    591c:	8e 15       	cp	r24, r14
    591e:	08 f0       	brcs	.+2      	; 0x5922 <handleMotorsWithSpeedController+0x51a>
    5920:	13 c1       	rjmp	.+550    	; 0x5b48 <handleMotorsWithSpeedController+0x740>
    5922:	9e 2b       	or	r25, r30
    5924:	82 2f       	mov	r24, r18
    5926:	8f 1b       	sub	r24, r31
    5928:	e1 e0       	ldi	r30, 0x01	; 1
    592a:	28 17       	cp	r18, r24
    592c:	08 f0       	brcs	.+2      	; 0x5930 <handleMotorsWithSpeedController+0x528>
    592e:	04 c1       	rjmp	.+520    	; 0x5b38 <handleMotorsWithSpeedController+0x730>
    5930:	a8 2e       	mov	r10, r24
    5932:	a9 1a       	sub	r10, r25
    5934:	91 e0       	ldi	r25, 0x01	; 1
    5936:	8a 15       	cp	r24, r10
    5938:	08 f0       	brcs	.+2      	; 0x593c <handleMotorsWithSpeedController+0x534>
    593a:	f5 c0       	rjmp	.+490    	; 0x5b26 <handleMotorsWithSpeedController+0x71e>
    593c:	e9 2b       	or	r30, r25
    593e:	83 2f       	mov	r24, r19
    5940:	8b 1b       	sub	r24, r27
    5942:	91 e0       	ldi	r25, 0x01	; 1
    5944:	38 17       	cp	r19, r24
    5946:	08 f0       	brcs	.+2      	; 0x594a <handleMotorsWithSpeedController+0x542>
    5948:	e6 c0       	rjmp	.+460    	; 0x5b16 <handleMotorsWithSpeedController+0x70e>
    594a:	c8 2e       	mov	r12, r24
    594c:	ce 1a       	sub	r12, r30
    594e:	e1 e0       	ldi	r30, 0x01	; 1
    5950:	8c 15       	cp	r24, r12
    5952:	08 f0       	brcs	.+2      	; 0x5956 <handleMotorsWithSpeedController+0x54e>
    5954:	d7 c0       	rjmp	.+430    	; 0x5b04 <handleMotorsWithSpeedController+0x6fc>
    5956:	9e 2b       	or	r25, r30
    5958:	8d 2d       	mov	r24, r13
    595a:	81 95       	neg	r24
    595c:	e1 e0       	ldi	r30, 0x01	; 1
    595e:	48 17       	cp	r20, r24
    5960:	08 f0       	brcs	.+2      	; 0x5964 <handleMotorsWithSpeedController+0x55c>
    5962:	c8 c0       	rjmp	.+400    	; 0x5af4 <handleMotorsWithSpeedController+0x6ec>
    5964:	b8 2f       	mov	r27, r24
    5966:	b9 1b       	sub	r27, r25
    5968:	91 e0       	ldi	r25, 0x01	; 1
    596a:	8b 17       	cp	r24, r27
    596c:	08 f0       	brcs	.+2      	; 0x5970 <handleMotorsWithSpeedController+0x568>
    596e:	b9 c0       	rjmp	.+370    	; 0x5ae2 <handleMotorsWithSpeedController+0x6da>
    5970:	e9 2b       	or	r30, r25
    5972:	8b 2d       	mov	r24, r11
    5974:	81 95       	neg	r24
    5976:	f1 e0       	ldi	r31, 0x01	; 1
    5978:	58 17       	cp	r21, r24
    597a:	08 f0       	brcs	.+2      	; 0x597e <handleMotorsWithSpeedController+0x576>
    597c:	a9 c0       	rjmp	.+338    	; 0x5ad0 <handleMotorsWithSpeedController+0x6c8>
    597e:	98 2f       	mov	r25, r24
    5980:	9e 1b       	sub	r25, r30
    5982:	e9 2f       	mov	r30, r25
    5984:	91 e0       	ldi	r25, 0x01	; 1
    5986:	8e 17       	cp	r24, r30
    5988:	08 f0       	brcs	.+2      	; 0x598c <handleMotorsWithSpeedController+0x584>
    598a:	99 c0       	rjmp	.+306    	; 0x5abe <handleMotorsWithSpeedController+0x6b6>
    598c:	f9 2b       	or	r31, r25
    598e:	89 2d       	mov	r24, r9
    5990:	81 95       	neg	r24
    5992:	91 e0       	ldi	r25, 0x01	; 1
    5994:	68 17       	cp	r22, r24
    5996:	08 f0       	brcs	.+2      	; 0x599a <handleMotorsWithSpeedController+0x592>
    5998:	8a c0       	rjmp	.+276    	; 0x5aae <handleMotorsWithSpeedController+0x6a6>
    599a:	38 2f       	mov	r19, r24
    599c:	3f 1b       	sub	r19, r31
    599e:	21 e0       	ldi	r18, 0x01	; 1
    59a0:	83 17       	cp	r24, r19
    59a2:	08 f0       	brcs	.+2      	; 0x59a6 <handleMotorsWithSpeedController+0x59e>
    59a4:	7d c0       	rjmp	.+250    	; 0x5aa0 <handleMotorsWithSpeedController+0x698>
    59a6:	92 2b       	or	r25, r18
    59a8:	a1 95       	neg	r26
    59aa:	a9 17       	cp	r26, r25
    59ac:	09 f4       	brne	.+2      	; 0x59b0 <handleMotorsWithSpeedController+0x5a8>
    59ae:	e5 c0       	rjmp	.+458    	; 0x5b7a <handleMotorsWithSpeedController+0x772>
			speedStepCounter = getTime100MicroSec();
    59b0:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    59b4:	9b 01       	movw	r18, r22
    59b6:	ac 01       	movw	r20, r24
    59b8:	60 93 64 04 	sts	0x0464, r22
    59bc:	30 93 65 04 	sts	0x0465, r19
    59c0:	40 93 66 04 	sts	0x0466, r20
    59c4:	50 93 67 04 	sts	0x0467, r21
    59c8:	10 92 68 04 	sts	0x0468, r1
    59cc:	10 92 69 04 	sts	0x0469, r1
    59d0:	10 92 6a 04 	sts	0x046A, r1
    59d4:	10 92 6b 04 	sts	0x046B, r1

			if(softAccEnabled) {
    59d8:	80 91 6c 04 	lds	r24, 0x046C
    59dc:	88 23       	and	r24, r24
    59de:	09 f4       	brne	.+2      	; 0x59e2 <handleMotorsWithSpeedController+0x5da>
    59e0:	49 c1       	rjmp	.+658    	; 0x5c74 <handleMotorsWithSpeedController+0x86c>
				if(pwm_right_desired == 0) {
    59e2:	40 91 f5 02 	lds	r20, 0x02F5
    59e6:	50 91 f6 02 	lds	r21, 0x02F6
    59ea:	41 15       	cp	r20, r1
    59ec:	51 05       	cpc	r21, r1
    59ee:	09 f0       	breq	.+2      	; 0x59f2 <handleMotorsWithSpeedController+0x5ea>
    59f0:	56 c1       	rjmp	.+684    	; 0x5c9e <handleMotorsWithSpeedController+0x896>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    59f2:	10 92 fa 02 	sts	0x02FA, r1
    59f6:	10 92 f9 02 	sts	0x02F9, r1
    59fa:	20 e0       	ldi	r18, 0x00	; 0
    59fc:	30 e0       	ldi	r19, 0x00	; 0
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    59fe:	40 91 f7 02 	lds	r20, 0x02F7
    5a02:	50 91 f8 02 	lds	r21, 0x02F8
    5a06:	41 15       	cp	r20, r1
    5a08:	51 05       	cpc	r21, r1
    5a0a:	09 f4       	brne	.+2      	; 0x5a0e <handleMotorsWithSpeedController+0x606>
    5a0c:	7f c1       	rjmp	.+766    	; 0x5d0c <handleMotorsWithSpeedController+0x904>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    5a0e:	60 91 fb 02 	lds	r22, 0x02FB
    5a12:	70 91 fc 02 	lds	r23, 0x02FC
    5a16:	64 9f       	mul	r22, r20
    5a18:	c0 01       	movw	r24, r0
    5a1a:	65 9f       	mul	r22, r21
    5a1c:	90 0d       	add	r25, r0
    5a1e:	74 9f       	mul	r23, r20
    5a20:	90 0d       	add	r25, r0
    5a22:	11 24       	eor	r1, r1
    5a24:	97 fd       	sbrc	r25, 7
    5a26:	72 c1       	rjmp	.+740    	; 0x5d0c <handleMotorsWithSpeedController+0x904>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    5a28:	64 17       	cp	r22, r20
    5a2a:	75 07       	cpc	r23, r21
    5a2c:	0c f0       	brlt	.+2      	; 0x5a30 <handleMotorsWithSpeedController+0x628>
    5a2e:	75 c1       	rjmp	.+746    	; 0x5d1a <handleMotorsWithSpeedController+0x912>
					pwm_intermediate_left_desired += speedStep;
    5a30:	80 91 13 02 	lds	r24, 0x0213
    5a34:	fb 01       	movw	r30, r22
    5a36:	e8 0f       	add	r30, r24
    5a38:	f1 1d       	adc	r31, r1
    5a3a:	f0 93 fc 02 	sts	0x02FC, r31
    5a3e:	e0 93 fb 02 	sts	0x02FB, r30
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    5a42:	4e 17       	cp	r20, r30
    5a44:	5f 07       	cpc	r21, r31
    5a46:	0c f0       	brlt	.+2      	; 0x5a4a <handleMotorsWithSpeedController+0x642>
    5a48:	7b c1       	rjmp	.+758    	; 0x5d40 <handleMotorsWithSpeedController+0x938>
						pwm_intermediate_left_desired = pwm_left_desired;
    5a4a:	50 93 fc 02 	sts	0x02FC, r21
    5a4e:	40 93 fb 02 	sts	0x02FB, r20
    5a52:	40 91 70 05 	lds	r20, 0x0570
    5a56:	f1 cc       	rjmp	.-1566   	; 0x543a <handleMotorsWithSpeedController+0x32>
void handleMotorsWithSpeedController() {

	handleSoftAcceleration();

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    5a58:	30 93 0a 03 	sts	0x030A, r19
    5a5c:	20 93 09 03 	sts	0x0309, r18
		pwm_left_working = pwm_intermediate_left_desired;
    5a60:	80 91 fb 02 	lds	r24, 0x02FB
    5a64:	90 91 fc 02 	lds	r25, 0x02FC
    5a68:	90 93 0c 03 	sts	0x030C, r25
    5a6c:	80 93 0b 03 	sts	0x030B, r24
    5a70:	fe cc       	rjmp	.-1540   	; 0x546e <handleMotorsWithSpeedController+0x66>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    5a72:	c2 01       	movw	r24, r4
    5a74:	b1 01       	movw	r22, r2
    5a76:	a4 01       	movw	r20, r8
    5a78:	93 01       	movw	r18, r6
    5a7a:	0e 94 8e 4b 	call	0x971c	; 0x971c <__subsf3>
    5a7e:	20 e0       	ldi	r18, 0x00	; 0
    5a80:	30 e0       	ldi	r19, 0x00	; 0
    5a82:	4e e1       	ldi	r20, 0x1E	; 30
    5a84:	52 e4       	ldi	r21, 0x42	; 66
    5a86:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <__divsf3>
    5a8a:	60 93 77 04 	sts	0x0477, r22
    5a8e:	70 93 78 04 	sts	0x0478, r23
    5a92:	80 93 79 04 	sts	0x0479, r24
    5a96:	90 93 7a 04 	sts	0x047A, r25
    5a9a:	7b 01       	movw	r14, r22
    5a9c:	8c 01       	movw	r16, r24
    5a9e:	06 ce       	rjmp	.-1012   	; 0x56ac <handleMotorsWithSpeedController+0x2a4>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    5aa0:	20 e0       	ldi	r18, 0x00	; 0
    5aa2:	92 2b       	or	r25, r18
    5aa4:	a1 95       	neg	r26
    5aa6:	a9 17       	cp	r26, r25
    5aa8:	09 f0       	breq	.+2      	; 0x5aac <handleMotorsWithSpeedController+0x6a4>
    5aaa:	82 cf       	rjmp	.-252    	; 0x59b0 <handleMotorsWithSpeedController+0x5a8>
    5aac:	66 c0       	rjmp	.+204    	; 0x5b7a <handleMotorsWithSpeedController+0x772>
    5aae:	90 e0       	ldi	r25, 0x00	; 0
    5ab0:	38 2f       	mov	r19, r24
    5ab2:	3f 1b       	sub	r19, r31
    5ab4:	21 e0       	ldi	r18, 0x01	; 1
    5ab6:	83 17       	cp	r24, r19
    5ab8:	08 f4       	brcc	.+2      	; 0x5abc <handleMotorsWithSpeedController+0x6b4>
    5aba:	75 cf       	rjmp	.-278    	; 0x59a6 <handleMotorsWithSpeedController+0x59e>
    5abc:	f1 cf       	rjmp	.-30     	; 0x5aa0 <handleMotorsWithSpeedController+0x698>
    5abe:	90 e0       	ldi	r25, 0x00	; 0
    5ac0:	f9 2b       	or	r31, r25
    5ac2:	89 2d       	mov	r24, r9
    5ac4:	81 95       	neg	r24
    5ac6:	91 e0       	ldi	r25, 0x01	; 1
    5ac8:	68 17       	cp	r22, r24
    5aca:	08 f4       	brcc	.+2      	; 0x5ace <handleMotorsWithSpeedController+0x6c6>
    5acc:	66 cf       	rjmp	.-308    	; 0x599a <handleMotorsWithSpeedController+0x592>
    5ace:	ef cf       	rjmp	.-34     	; 0x5aae <handleMotorsWithSpeedController+0x6a6>
    5ad0:	f0 e0       	ldi	r31, 0x00	; 0
    5ad2:	98 2f       	mov	r25, r24
    5ad4:	9e 1b       	sub	r25, r30
    5ad6:	e9 2f       	mov	r30, r25
    5ad8:	91 e0       	ldi	r25, 0x01	; 1
    5ada:	8e 17       	cp	r24, r30
    5adc:	08 f4       	brcc	.+2      	; 0x5ae0 <handleMotorsWithSpeedController+0x6d8>
    5ade:	56 cf       	rjmp	.-340    	; 0x598c <handleMotorsWithSpeedController+0x584>
    5ae0:	ee cf       	rjmp	.-36     	; 0x5abe <handleMotorsWithSpeedController+0x6b6>
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	e9 2b       	or	r30, r25
    5ae6:	8b 2d       	mov	r24, r11
    5ae8:	81 95       	neg	r24
    5aea:	f1 e0       	ldi	r31, 0x01	; 1
    5aec:	58 17       	cp	r21, r24
    5aee:	08 f4       	brcc	.+2      	; 0x5af2 <handleMotorsWithSpeedController+0x6ea>
    5af0:	46 cf       	rjmp	.-372    	; 0x597e <handleMotorsWithSpeedController+0x576>
    5af2:	ee cf       	rjmp	.-36     	; 0x5ad0 <handleMotorsWithSpeedController+0x6c8>
    5af4:	e0 e0       	ldi	r30, 0x00	; 0
    5af6:	b8 2f       	mov	r27, r24
    5af8:	b9 1b       	sub	r27, r25
    5afa:	91 e0       	ldi	r25, 0x01	; 1
    5afc:	8b 17       	cp	r24, r27
    5afe:	08 f4       	brcc	.+2      	; 0x5b02 <handleMotorsWithSpeedController+0x6fa>
    5b00:	37 cf       	rjmp	.-402    	; 0x5970 <handleMotorsWithSpeedController+0x568>
    5b02:	ef cf       	rjmp	.-34     	; 0x5ae2 <handleMotorsWithSpeedController+0x6da>
    5b04:	e0 e0       	ldi	r30, 0x00	; 0
    5b06:	9e 2b       	or	r25, r30
    5b08:	8d 2d       	mov	r24, r13
    5b0a:	81 95       	neg	r24
    5b0c:	e1 e0       	ldi	r30, 0x01	; 1
    5b0e:	48 17       	cp	r20, r24
    5b10:	08 f4       	brcc	.+2      	; 0x5b14 <handleMotorsWithSpeedController+0x70c>
    5b12:	28 cf       	rjmp	.-432    	; 0x5964 <handleMotorsWithSpeedController+0x55c>
    5b14:	ef cf       	rjmp	.-34     	; 0x5af4 <handleMotorsWithSpeedController+0x6ec>
    5b16:	90 e0       	ldi	r25, 0x00	; 0
    5b18:	c8 2e       	mov	r12, r24
    5b1a:	ce 1a       	sub	r12, r30
    5b1c:	e1 e0       	ldi	r30, 0x01	; 1
    5b1e:	8c 15       	cp	r24, r12
    5b20:	08 f4       	brcc	.+2      	; 0x5b24 <handleMotorsWithSpeedController+0x71c>
    5b22:	19 cf       	rjmp	.-462    	; 0x5956 <handleMotorsWithSpeedController+0x54e>
    5b24:	ef cf       	rjmp	.-34     	; 0x5b04 <handleMotorsWithSpeedController+0x6fc>
    5b26:	90 e0       	ldi	r25, 0x00	; 0
    5b28:	e9 2b       	or	r30, r25
    5b2a:	83 2f       	mov	r24, r19
    5b2c:	8b 1b       	sub	r24, r27
    5b2e:	91 e0       	ldi	r25, 0x01	; 1
    5b30:	38 17       	cp	r19, r24
    5b32:	08 f4       	brcc	.+2      	; 0x5b36 <handleMotorsWithSpeedController+0x72e>
    5b34:	0a cf       	rjmp	.-492    	; 0x594a <handleMotorsWithSpeedController+0x542>
    5b36:	ef cf       	rjmp	.-34     	; 0x5b16 <handleMotorsWithSpeedController+0x70e>
    5b38:	e0 e0       	ldi	r30, 0x00	; 0
    5b3a:	a8 2e       	mov	r10, r24
    5b3c:	a9 1a       	sub	r10, r25
    5b3e:	91 e0       	ldi	r25, 0x01	; 1
    5b40:	8a 15       	cp	r24, r10
    5b42:	08 f4       	brcc	.+2      	; 0x5b46 <handleMotorsWithSpeedController+0x73e>
    5b44:	fb ce       	rjmp	.-522    	; 0x593c <handleMotorsWithSpeedController+0x534>
    5b46:	ef cf       	rjmp	.-34     	; 0x5b26 <handleMotorsWithSpeedController+0x71e>
    5b48:	e0 e0       	ldi	r30, 0x00	; 0
    5b4a:	9e 2b       	or	r25, r30
    5b4c:	82 2f       	mov	r24, r18
    5b4e:	8f 1b       	sub	r24, r31
    5b50:	e1 e0       	ldi	r30, 0x01	; 1
    5b52:	28 17       	cp	r18, r24
    5b54:	08 f4       	brcc	.+2      	; 0x5b58 <handleMotorsWithSpeedController+0x750>
    5b56:	ec ce       	rjmp	.-552    	; 0x5930 <handleMotorsWithSpeedController+0x528>
    5b58:	ef cf       	rjmp	.-34     	; 0x5b38 <handleMotorsWithSpeedController+0x730>
    5b5a:	90 e0       	ldi	r25, 0x00	; 0
    5b5c:	e8 2e       	mov	r14, r24
    5b5e:	ee 1a       	sub	r14, r30
    5b60:	e1 e0       	ldi	r30, 0x01	; 1
    5b62:	8e 15       	cp	r24, r14
    5b64:	08 f4       	brcc	.+2      	; 0x5b68 <handleMotorsWithSpeedController+0x760>
    5b66:	dd ce       	rjmp	.-582    	; 0x5922 <handleMotorsWithSpeedController+0x51a>
    5b68:	ef cf       	rjmp	.-34     	; 0x5b48 <handleMotorsWithSpeedController+0x740>
    5b6a:	e0 e0       	ldi	r30, 0x00	; 0
    5b6c:	81 2f       	mov	r24, r17
    5b6e:	89 1b       	sub	r24, r25
    5b70:	91 e0       	ldi	r25, 0x01	; 1
    5b72:	18 17       	cp	r17, r24
    5b74:	08 f4       	brcc	.+2      	; 0x5b78 <handleMotorsWithSpeedController+0x770>
    5b76:	cf ce       	rjmp	.-610    	; 0x5916 <handleMotorsWithSpeedController+0x50e>
    5b78:	f0 cf       	rjmp	.-32     	; 0x5b5a <handleMotorsWithSpeedController+0x752>
    5b7a:	33 23       	and	r19, r19
    5b7c:	09 f0       	breq	.+2      	; 0x5b80 <handleMotorsWithSpeedController+0x778>
    5b7e:	18 cf       	rjmp	.-464    	; 0x59b0 <handleMotorsWithSpeedController+0x5a8>
    5b80:	ee 23       	and	r30, r30
    5b82:	09 f0       	breq	.+2      	; 0x5b86 <handleMotorsWithSpeedController+0x77e>
    5b84:	15 cf       	rjmp	.-470    	; 0x59b0 <handleMotorsWithSpeedController+0x5a8>
    5b86:	bb 23       	and	r27, r27
    5b88:	09 f0       	breq	.+2      	; 0x5b8c <handleMotorsWithSpeedController+0x784>
    5b8a:	12 cf       	rjmp	.-476    	; 0x59b0 <handleMotorsWithSpeedController+0x5a8>
    5b8c:	cc 20       	and	r12, r12
    5b8e:	09 f0       	breq	.+2      	; 0x5b92 <handleMotorsWithSpeedController+0x78a>
    5b90:	0f cf       	rjmp	.-482    	; 0x59b0 <handleMotorsWithSpeedController+0x5a8>
    5b92:	aa 20       	and	r10, r10
    5b94:	09 f0       	breq	.+2      	; 0x5b98 <handleMotorsWithSpeedController+0x790>
    5b96:	0c cf       	rjmp	.-488    	; 0x59b0 <handleMotorsWithSpeedController+0x5a8>
    5b98:	e1 e0       	ldi	r30, 0x01	; 1
    5b9a:	ee 15       	cp	r30, r14
    5b9c:	08 f4       	brcc	.+2      	; 0x5ba0 <handleMotorsWithSpeedController+0x798>
    5b9e:	08 cf       	rjmp	.-496    	; 0x59b0 <handleMotorsWithSpeedController+0x5a8>
    5ba0:	ee 16       	cp	r14, r30
    5ba2:	09 f4       	brne	.+2      	; 0x5ba6 <handleMotorsWithSpeedController+0x79e>
    5ba4:	e4 c0       	rjmp	.+456    	; 0x5d6e <handleMotorsWithSpeedController+0x966>
    5ba6:	40 91 70 05 	lds	r20, 0x0570
    5baa:	20 91 f9 02 	lds	r18, 0x02F9
    5bae:	30 91 fa 02 	lds	r19, 0x02FA
    5bb2:	43 cc       	rjmp	.-1914   	; 0x543a <handleMotorsWithSpeedController+0x32>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    5bb4:	c9 01       	movw	r24, r18
    5bb6:	aa 27       	eor	r26, r26
    5bb8:	97 fd       	sbrc	r25, 7
    5bba:	a0 95       	com	r26
    5bbc:	ba 2f       	mov	r27, r26
    5bbe:	20 91 b4 04 	lds	r18, 0x04B4
    5bc2:	30 91 b5 04 	lds	r19, 0x04B5
    5bc6:	40 91 b6 04 	lds	r20, 0x04B6
    5bca:	50 91 b7 04 	lds	r21, 0x04B7
    5bce:	28 0f       	add	r18, r24
    5bd0:	39 1f       	adc	r19, r25
    5bd2:	4a 1f       	adc	r20, r26
    5bd4:	5b 1f       	adc	r21, r27
    5bd6:	20 93 b4 04 	sts	0x04B4, r18
    5bda:	30 93 b5 04 	sts	0x04B5, r19
    5bde:	40 93 b6 04 	sts	0x04B6, r20
    5be2:	50 93 b7 04 	sts	0x04B7, r21
			rightSumCount++;
    5be6:	80 91 ba 04 	lds	r24, 0x04BA
    5bea:	90 91 bb 04 	lds	r25, 0x04BB
    5bee:	01 96       	adiw	r24, 0x01	; 1
    5bf0:	90 93 bb 04 	sts	0x04BB, r25
    5bf4:	80 93 ba 04 	sts	0x04BA, r24
    5bf8:	de cd       	rjmp	.-1092   	; 0x57b6 <handleMotorsWithSpeedController+0x3ae>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    5bfa:	c9 01       	movw	r24, r18
    5bfc:	aa 27       	eor	r26, r26
    5bfe:	97 fd       	sbrc	r25, 7
    5c00:	a0 95       	com	r26
    5c02:	ba 2f       	mov	r27, r26
    5c04:	20 91 b0 04 	lds	r18, 0x04B0
    5c08:	30 91 b1 04 	lds	r19, 0x04B1
    5c0c:	40 91 b2 04 	lds	r20, 0x04B2
    5c10:	50 91 b3 04 	lds	r21, 0x04B3
    5c14:	28 0f       	add	r18, r24
    5c16:	39 1f       	adc	r19, r25
    5c18:	4a 1f       	adc	r20, r26
    5c1a:	5b 1f       	adc	r21, r27
    5c1c:	20 93 b0 04 	sts	0x04B0, r18
    5c20:	30 93 b1 04 	sts	0x04B1, r19
    5c24:	40 93 b2 04 	sts	0x04B2, r20
    5c28:	50 93 b3 04 	sts	0x04B3, r21
			leftSumCount++;
    5c2c:	80 91 b8 04 	lds	r24, 0x04B8
    5c30:	90 91 b9 04 	lds	r25, 0x04B9
    5c34:	01 96       	adiw	r24, 0x01	; 1
    5c36:	90 93 b9 04 	sts	0x04B9, r25
    5c3a:	80 93 b8 04 	sts	0x04B8, r24
    5c3e:	48 cc       	rjmp	.-1904   	; 0x54d0 <handleMotorsWithSpeedController+0xc8>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    5c40:	21 15       	cp	r18, r1
    5c42:	31 05       	cpc	r19, r1
    5c44:	09 f0       	breq	.+2      	; 0x5c48 <handleMotorsWithSpeedController+0x840>
    5c46:	59 c0       	rjmp	.+178    	; 0x5cfa <handleMotorsWithSpeedController+0x8f2>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    5c48:	10 92 a9 00 	sts	0x00A9, r1
    5c4c:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    5c50:	10 92 ab 00 	sts	0x00AB, r1
    5c54:	10 92 aa 00 	sts	0x00AA, r1
    5c58:	c1 cc       	rjmp	.-1662   	; 0x55dc <handleMotorsWithSpeedController+0x1d4>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    5c5a:	21 15       	cp	r18, r1
    5c5c:	31 05       	cpc	r19, r1
    5c5e:	09 f0       	breq	.+2      	; 0x5c62 <handleMotorsWithSpeedController+0x85a>
    5c60:	43 c0       	rjmp	.+134    	; 0x5ce8 <handleMotorsWithSpeedController+0x8e0>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    5c62:	10 92 99 00 	sts	0x0099, r1
    5c66:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    5c6a:	10 92 9b 00 	sts	0x009B, r1
    5c6e:	10 92 9a 00 	sts	0x009A, r1
    5c72:	27 ce       	rjmp	.-946    	; 0x58c2 <handleMotorsWithSpeedController+0x4ba>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    5c74:	20 91 f5 02 	lds	r18, 0x02F5
    5c78:	30 91 f6 02 	lds	r19, 0x02F6
    5c7c:	20 93 f9 02 	sts	0x02F9, r18
    5c80:	30 93 fa 02 	sts	0x02FA, r19
				pwm_intermediate_left_desired = pwm_left_desired;
    5c84:	80 91 f7 02 	lds	r24, 0x02F7
    5c88:	90 91 f8 02 	lds	r25, 0x02F8
    5c8c:	90 93 fc 02 	sts	0x02FC, r25
    5c90:	80 93 fb 02 	sts	0x02FB, r24
    5c94:	40 91 70 05 	lds	r20, 0x0570
    5c98:	c9 01       	movw	r24, r18
    5c9a:	9c 01       	movw	r18, r24
    5c9c:	ce cb       	rjmp	.-2148   	; 0x543a <handleMotorsWithSpeedController+0x32>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    5c9e:	20 91 f9 02 	lds	r18, 0x02F9
    5ca2:	30 91 fa 02 	lds	r19, 0x02FA
    5ca6:	24 9f       	mul	r18, r20
    5ca8:	c0 01       	movw	r24, r0
    5caa:	25 9f       	mul	r18, r21
    5cac:	90 0d       	add	r25, r0
    5cae:	34 9f       	mul	r19, r20
    5cb0:	90 0d       	add	r25, r0
    5cb2:	11 24       	eor	r1, r1
    5cb4:	97 fd       	sbrc	r25, 7
    5cb6:	9d ce       	rjmp	.-710    	; 0x59f2 <handleMotorsWithSpeedController+0x5ea>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    5cb8:	24 17       	cp	r18, r20
    5cba:	35 07       	cpc	r19, r21
    5cbc:	0c f0       	brlt	.+2      	; 0x5cc0 <handleMotorsWithSpeedController+0x8b8>
    5cbe:	43 c0       	rjmp	.+134    	; 0x5d46 <handleMotorsWithSpeedController+0x93e>
					pwm_intermediate_right_desired += speedStep;
    5cc0:	80 91 13 02 	lds	r24, 0x0213
    5cc4:	b9 01       	movw	r22, r18
    5cc6:	68 0f       	add	r22, r24
    5cc8:	71 1d       	adc	r23, r1
    5cca:	cb 01       	movw	r24, r22
    5ccc:	70 93 fa 02 	sts	0x02FA, r23
    5cd0:	60 93 f9 02 	sts	0x02F9, r22
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    5cd4:	46 17       	cp	r20, r22
    5cd6:	57 07       	cpc	r21, r23
    5cd8:	0c f0       	brlt	.+2      	; 0x5cdc <handleMotorsWithSpeedController+0x8d4>
    5cda:	47 c0       	rjmp	.+142    	; 0x5d6a <handleMotorsWithSpeedController+0x962>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    5cdc:	50 93 fa 02 	sts	0x02FA, r21
    5ce0:	40 93 f9 02 	sts	0x02F9, r20
    5ce4:	9a 01       	movw	r18, r20
    5ce6:	8b ce       	rjmp	.-746    	; 0x59fe <handleMotorsWithSpeedController+0x5f6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    5ce8:	88 27       	eor	r24, r24
    5cea:	99 27       	eor	r25, r25
    5cec:	82 1b       	sub	r24, r18
    5cee:	93 0b       	sbc	r25, r19
    5cf0:	90 93 9b 00 	sts	0x009B, r25
    5cf4:	80 93 9a 00 	sts	0x009A, r24
    5cf8:	e4 cd       	rjmp	.-1080   	; 0x58c2 <handleMotorsWithSpeedController+0x4ba>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    5cfa:	88 27       	eor	r24, r24
    5cfc:	99 27       	eor	r25, r25
    5cfe:	82 1b       	sub	r24, r18
    5d00:	93 0b       	sbc	r25, r19
    5d02:	90 93 ab 00 	sts	0x00AB, r25
    5d06:	80 93 aa 00 	sts	0x00AA, r24
    5d0a:	68 cc       	rjmp	.-1840   	; 0x55dc <handleMotorsWithSpeedController+0x1d4>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    5d0c:	10 92 fc 02 	sts	0x02FC, r1
    5d10:	10 92 fb 02 	sts	0x02FB, r1
    5d14:	40 91 70 05 	lds	r20, 0x0570
    5d18:	90 cb       	rjmp	.-2272   	; 0x543a <handleMotorsWithSpeedController+0x32>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    5d1a:	46 17       	cp	r20, r22
    5d1c:	57 07       	cpc	r21, r23
    5d1e:	84 f4       	brge	.+32     	; 0x5d40 <handleMotorsWithSpeedController+0x938>
					pwm_intermediate_left_desired -= speedStep;
    5d20:	80 91 13 02 	lds	r24, 0x0213
    5d24:	fb 01       	movw	r30, r22
    5d26:	e8 1b       	sub	r30, r24
    5d28:	f1 09       	sbc	r31, r1
    5d2a:	f0 93 fc 02 	sts	0x02FC, r31
    5d2e:	e0 93 fb 02 	sts	0x02FB, r30
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    5d32:	e4 17       	cp	r30, r20
    5d34:	f5 07       	cpc	r31, r21
    5d36:	24 f4       	brge	.+8      	; 0x5d40 <handleMotorsWithSpeedController+0x938>
						pwm_intermediate_left_desired = pwm_left_desired;
    5d38:	50 93 fc 02 	sts	0x02FC, r21
    5d3c:	40 93 fb 02 	sts	0x02FB, r20
    5d40:	40 91 70 05 	lds	r20, 0x0570
    5d44:	7a cb       	rjmp	.-2316   	; 0x543a <handleMotorsWithSpeedController+0x32>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    5d46:	42 17       	cp	r20, r18
    5d48:	53 07       	cpc	r21, r19
    5d4a:	0c f0       	brlt	.+2      	; 0x5d4e <handleMotorsWithSpeedController+0x946>
    5d4c:	58 ce       	rjmp	.-848    	; 0x59fe <handleMotorsWithSpeedController+0x5f6>
					pwm_intermediate_right_desired -= speedStep;
    5d4e:	80 91 13 02 	lds	r24, 0x0213
    5d52:	f9 01       	movw	r30, r18
    5d54:	e8 1b       	sub	r30, r24
    5d56:	f1 09       	sbc	r31, r1
    5d58:	cf 01       	movw	r24, r30
    5d5a:	f0 93 fa 02 	sts	0x02FA, r31
    5d5e:	e0 93 f9 02 	sts	0x02F9, r30
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    5d62:	e4 17       	cp	r30, r20
    5d64:	f5 07       	cpc	r31, r21
    5d66:	0c f4       	brge	.+2      	; 0x5d6a <handleMotorsWithSpeedController+0x962>
    5d68:	b9 cf       	rjmp	.-142    	; 0x5cdc <handleMotorsWithSpeedController+0x8d4>
    5d6a:	9c 01       	movw	r18, r24
    5d6c:	48 ce       	rjmp	.-880    	; 0x59fe <handleMotorsWithSpeedController+0x5f6>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    5d6e:	ff e8       	ldi	r31, 0x8F	; 143
    5d70:	f8 15       	cp	r31, r8
    5d72:	08 f4       	brcc	.+2      	; 0x5d76 <handleMotorsWithSpeedController+0x96e>
    5d74:	1d ce       	rjmp	.-966    	; 0x59b0 <handleMotorsWithSpeedController+0x5a8>
    5d76:	40 91 70 05 	lds	r20, 0x0570
    5d7a:	5b cb       	rjmp	.-2378   	; 0x5432 <handleMotorsWithSpeedController+0x2a>

00005d7c <handleMotorsWithNoController>:
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}

void handleMotorsWithNoController() {
    5d7c:	9f 92       	push	r9
    5d7e:	af 92       	push	r10
    5d80:	bf 92       	push	r11
    5d82:	cf 92       	push	r12
    5d84:	df 92       	push	r13
    5d86:	ef 92       	push	r14
    5d88:	ff 92       	push	r15
    5d8a:	0f 93       	push	r16
    5d8c:	1f 93       	push	r17
    5d8e:	cf 93       	push	r28
    5d90:	df 93       	push	r29
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
    5d92:	80 91 70 05 	lds	r24, 0x0570
    5d96:	88 23       	and	r24, r24
    5d98:	09 f4       	brne	.+2      	; 0x5d9c <handleMotorsWithNoController+0x20>
    5d9a:	c9 c0       	rjmp	.+402    	; 0x5f2e <handleMotorsWithNoController+0x1b2>
    5d9c:	c0 91 f9 02 	lds	r28, 0x02F9
    5da0:	d0 91 fa 02 	lds	r29, 0x02FA
    5da4:	00 91 fb 02 	lds	r16, 0x02FB
    5da8:	10 91 fc 02 	lds	r17, 0x02FC
void handleMotorsWithNoController() {

	handleSoftAcceleration();

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    5dac:	80 91 03 02 	lds	r24, 0x0203
    5db0:	88 23       	and	r24, r24
    5db2:	c9 f1       	breq	.+114    	; 0x5e26 <handleMotorsWithNoController+0xaa>
		last_left_vel = left_vel_sum>>2;
    5db4:	20 91 e9 02 	lds	r18, 0x02E9
    5db8:	30 91 ea 02 	lds	r19, 0x02EA
    5dbc:	36 95       	lsr	r19
    5dbe:	27 95       	ror	r18
    5dc0:	36 95       	lsr	r19
    5dc2:	27 95       	ror	r18
    5dc4:	30 93 ee 02 	sts	0x02EE, r19
    5dc8:	20 93 ed 02 	sts	0x02ED, r18
		compute_left_vel = 0;
    5dcc:	10 92 03 02 	sts	0x0203, r1
		left_vel_sum = 0;
    5dd0:	10 92 ea 02 	sts	0x02EA, r1
    5dd4:	10 92 e9 02 	sts	0x02E9, r1

		if(pwm_left_desired >= 0) {
    5dd8:	80 91 f7 02 	lds	r24, 0x02F7
    5ddc:	90 91 f8 02 	lds	r25, 0x02F8
    5de0:	97 fd       	sbrc	r25, 7
    5de2:	35 c2       	rjmp	.+1130   	; 0x624e <handleMotorsWithNoController+0x4d2>
			leftMotSteps += (last_left_vel>>3);
    5de4:	35 95       	asr	r19
    5de6:	27 95       	ror	r18
    5de8:	35 95       	asr	r19
    5dea:	27 95       	ror	r18
    5dec:	35 95       	asr	r19
    5dee:	27 95       	ror	r18
    5df0:	b9 01       	movw	r22, r18
    5df2:	88 27       	eor	r24, r24
    5df4:	77 fd       	sbrc	r23, 7
    5df6:	80 95       	com	r24
    5df8:	98 2f       	mov	r25, r24
    5dfa:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    5dfe:	9b 01       	movw	r18, r22
    5e00:	ac 01       	movw	r20, r24
    5e02:	60 91 d1 02 	lds	r22, 0x02D1
    5e06:	70 91 d2 02 	lds	r23, 0x02D2
    5e0a:	80 91 d3 02 	lds	r24, 0x02D3
    5e0e:	90 91 d4 02 	lds	r25, 0x02D4
    5e12:	0e 94 8f 4b 	call	0x971e	; 0x971e <__addsf3>
    5e16:	60 93 d1 02 	sts	0x02D1, r22
    5e1a:	70 93 d2 02 	sts	0x02D2, r23
    5e1e:	80 93 d3 02 	sts	0x02D3, r24
    5e22:	90 93 d4 02 	sts	0x02D4, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    5e26:	80 91 04 02 	lds	r24, 0x0204
    5e2a:	88 23       	and	r24, r24
    5e2c:	c9 f1       	breq	.+114    	; 0x5ea0 <handleMotorsWithNoController+0x124>
		last_right_vel = right_vel_sum>>2;
    5e2e:	20 91 eb 02 	lds	r18, 0x02EB
    5e32:	30 91 ec 02 	lds	r19, 0x02EC
    5e36:	36 95       	lsr	r19
    5e38:	27 95       	ror	r18
    5e3a:	36 95       	lsr	r19
    5e3c:	27 95       	ror	r18
    5e3e:	30 93 f0 02 	sts	0x02F0, r19
    5e42:	20 93 ef 02 	sts	0x02EF, r18
		compute_right_vel = 0;
    5e46:	10 92 04 02 	sts	0x0204, r1
		right_vel_sum = 0;
    5e4a:	10 92 ec 02 	sts	0x02EC, r1
    5e4e:	10 92 eb 02 	sts	0x02EB, r1

		if(pwm_right_desired >= 0) {
    5e52:	80 91 f5 02 	lds	r24, 0x02F5
    5e56:	90 91 f6 02 	lds	r25, 0x02F6
    5e5a:	97 fd       	sbrc	r25, 7
    5e5c:	d6 c1       	rjmp	.+940    	; 0x620a <handleMotorsWithNoController+0x48e>
			rightMotSteps += (last_right_vel>>3);
    5e5e:	35 95       	asr	r19
    5e60:	27 95       	ror	r18
    5e62:	35 95       	asr	r19
    5e64:	27 95       	ror	r18
    5e66:	35 95       	asr	r19
    5e68:	27 95       	ror	r18
    5e6a:	b9 01       	movw	r22, r18
    5e6c:	88 27       	eor	r24, r24
    5e6e:	77 fd       	sbrc	r23, 7
    5e70:	80 95       	com	r24
    5e72:	98 2f       	mov	r25, r24
    5e74:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    5e78:	9b 01       	movw	r18, r22
    5e7a:	ac 01       	movw	r20, r24
    5e7c:	60 91 cd 02 	lds	r22, 0x02CD
    5e80:	70 91 ce 02 	lds	r23, 0x02CE
    5e84:	80 91 cf 02 	lds	r24, 0x02CF
    5e88:	90 91 d0 02 	lds	r25, 0x02D0
    5e8c:	0e 94 8f 4b 	call	0x971e	; 0x971e <__addsf3>
    5e90:	60 93 cd 02 	sts	0x02CD, r22
    5e94:	70 93 ce 02 	sts	0x02CE, r23
    5e98:	80 93 cf 02 	sts	0x02CF, r24
    5e9c:	90 93 d0 02 	sts	0x02D0, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    5ea0:	ce 01       	movw	r24, r28
    5ea2:	88 0f       	add	r24, r24
    5ea4:	99 1f       	adc	r25, r25
    5ea6:	88 0f       	add	r24, r24
    5ea8:	99 1f       	adc	r25, r25
    5eaa:	8c 0f       	add	r24, r28
    5eac:	9d 1f       	adc	r25, r29
    5eae:	90 93 0a 03 	sts	0x030A, r25
    5eb2:	80 93 09 03 	sts	0x0309, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    5eb6:	c8 01       	movw	r24, r16
    5eb8:	88 0f       	add	r24, r24
    5eba:	99 1f       	adc	r25, r25
    5ebc:	88 0f       	add	r24, r24
    5ebe:	99 1f       	adc	r25, r25
    5ec0:	80 0f       	add	r24, r16
    5ec2:	91 1f       	adc	r25, r17
    5ec4:	90 93 0c 03 	sts	0x030C, r25
    5ec8:	80 93 0b 03 	sts	0x030B, r24
	if(obstacleAvoidanceEnabled) {
    5ecc:	80 91 74 04 	lds	r24, 0x0474
    5ed0:	88 23       	and	r24, r24
    5ed2:	09 f0       	breq	.+2      	; 0x5ed6 <handleMotorsWithNoController+0x15a>
    5ed4:	fe c0       	rjmp	.+508    	; 0x60d2 <handleMotorsWithNoController+0x356>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    5ed6:	40 91 0b 03 	lds	r20, 0x030B
    5eda:	50 91 0c 03 	lds	r21, 0x030C
    5ede:	50 93 f4 02 	sts	0x02F4, r21
    5ee2:	40 93 f3 02 	sts	0x02F3, r20
	pwm_right = pwm_right_working;
    5ee6:	20 91 09 03 	lds	r18, 0x0309
    5eea:	30 91 0a 03 	lds	r19, 0x030A
    5eee:	30 93 f2 02 	sts	0x02F2, r19
    5ef2:	20 93 f1 02 	sts	0x02F1, r18

	if(pwm_right > 0) {
    5ef6:	12 16       	cp	r1, r18
    5ef8:	13 06       	cpc	r1, r19
    5efa:	0c f0       	brlt	.+2      	; 0x5efe <handleMotorsWithNoController+0x182>
    5efc:	f1 c0       	rjmp	.+482    	; 0x60e0 <handleMotorsWithNoController+0x364>
		OCR3A = (unsigned int)pwm_right;
    5efe:	30 93 99 00 	sts	0x0099, r19
    5f02:	20 93 98 00 	sts	0x0098, r18
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    5f06:	14 16       	cp	r1, r20
    5f08:	15 06       	cpc	r1, r21
    5f0a:	0c f0       	brlt	.+2      	; 0x5f0e <handleMotorsWithNoController+0x192>
    5f0c:	d5 c0       	rjmp	.+426    	; 0x60b8 <handleMotorsWithNoController+0x33c>
		OCR4A = (unsigned int)pwm_left;
    5f0e:	50 93 a9 00 	sts	0x00A9, r21
    5f12:	40 93 a8 00 	sts	0x00A8, r20
	} else {
		OCR4A = 0;
		OCR4B = 0;
	}

}
    5f16:	df 91       	pop	r29
    5f18:	cf 91       	pop	r28
    5f1a:	1f 91       	pop	r17
    5f1c:	0f 91       	pop	r16
    5f1e:	ff 90       	pop	r15
    5f20:	ef 90       	pop	r14
    5f22:	df 90       	pop	r13
    5f24:	cf 90       	pop	r12
    5f26:	bf 90       	pop	r11
    5f28:	af 90       	pop	r10
    5f2a:	9f 90       	pop	r9
    5f2c:	08 95       	ret
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    5f2e:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    5f32:	8b 01       	movw	r16, r22
    5f34:	9c 01       	movw	r18, r24
    5f36:	40 e0       	ldi	r20, 0x00	; 0
    5f38:	50 e0       	ldi	r21, 0x00	; 0
    5f3a:	60 e0       	ldi	r22, 0x00	; 0
    5f3c:	70 e0       	ldi	r23, 0x00	; 0
    5f3e:	80 91 64 04 	lds	r24, 0x0464
    5f42:	90 91 65 04 	lds	r25, 0x0465
    5f46:	f0 91 66 04 	lds	r31, 0x0466
    5f4a:	b0 91 67 04 	lds	r27, 0x0467
    5f4e:	e0 90 68 04 	lds	r14, 0x0468
    5f52:	c0 90 69 04 	lds	r12, 0x0469
    5f56:	a0 90 6a 04 	lds	r10, 0x046A
    5f5a:	a0 91 6b 04 	lds	r26, 0x046B
    5f5e:	90 2e       	mov	r9, r16
    5f60:	98 1a       	sub	r9, r24
    5f62:	e1 e0       	ldi	r30, 0x01	; 1
    5f64:	09 15       	cp	r16, r9
    5f66:	08 f0       	brcs	.+2      	; 0x5f6a <handleMotorsWithNoController+0x1ee>
    5f68:	2d c1       	rjmp	.+602    	; 0x61c4 <handleMotorsWithNoController+0x448>
    5f6a:	81 2f       	mov	r24, r17
    5f6c:	89 1b       	sub	r24, r25
    5f6e:	91 e0       	ldi	r25, 0x01	; 1
    5f70:	18 17       	cp	r17, r24
    5f72:	08 f0       	brcs	.+2      	; 0x5f76 <handleMotorsWithNoController+0x1fa>
    5f74:	1f c1       	rjmp	.+574    	; 0x61b4 <handleMotorsWithNoController+0x438>
    5f76:	f8 2e       	mov	r15, r24
    5f78:	fe 1a       	sub	r15, r30
    5f7a:	e1 e0       	ldi	r30, 0x01	; 1
    5f7c:	8f 15       	cp	r24, r15
    5f7e:	08 f0       	brcs	.+2      	; 0x5f82 <handleMotorsWithNoController+0x206>
    5f80:	10 c1       	rjmp	.+544    	; 0x61a2 <handleMotorsWithNoController+0x426>
    5f82:	9e 2b       	or	r25, r30
    5f84:	82 2f       	mov	r24, r18
    5f86:	8f 1b       	sub	r24, r31
    5f88:	e1 e0       	ldi	r30, 0x01	; 1
    5f8a:	28 17       	cp	r18, r24
    5f8c:	08 f0       	brcs	.+2      	; 0x5f90 <handleMotorsWithNoController+0x214>
    5f8e:	01 c1       	rjmp	.+514    	; 0x6192 <handleMotorsWithNoController+0x416>
    5f90:	b8 2e       	mov	r11, r24
    5f92:	b9 1a       	sub	r11, r25
    5f94:	91 e0       	ldi	r25, 0x01	; 1
    5f96:	8b 15       	cp	r24, r11
    5f98:	08 f0       	brcs	.+2      	; 0x5f9c <handleMotorsWithNoController+0x220>
    5f9a:	f2 c0       	rjmp	.+484    	; 0x6180 <handleMotorsWithNoController+0x404>
    5f9c:	e9 2b       	or	r30, r25
    5f9e:	83 2f       	mov	r24, r19
    5fa0:	8b 1b       	sub	r24, r27
    5fa2:	91 e0       	ldi	r25, 0x01	; 1
    5fa4:	38 17       	cp	r19, r24
    5fa6:	08 f0       	brcs	.+2      	; 0x5faa <handleMotorsWithNoController+0x22e>
    5fa8:	e3 c0       	rjmp	.+454    	; 0x6170 <handleMotorsWithNoController+0x3f4>
    5faa:	d8 2e       	mov	r13, r24
    5fac:	de 1a       	sub	r13, r30
    5fae:	e1 e0       	ldi	r30, 0x01	; 1
    5fb0:	8d 15       	cp	r24, r13
    5fb2:	08 f0       	brcs	.+2      	; 0x5fb6 <handleMotorsWithNoController+0x23a>
    5fb4:	d4 c0       	rjmp	.+424    	; 0x615e <handleMotorsWithNoController+0x3e2>
    5fb6:	9e 2b       	or	r25, r30
    5fb8:	8e 2d       	mov	r24, r14
    5fba:	81 95       	neg	r24
    5fbc:	e1 e0       	ldi	r30, 0x01	; 1
    5fbe:	48 17       	cp	r20, r24
    5fc0:	08 f0       	brcs	.+2      	; 0x5fc4 <handleMotorsWithNoController+0x248>
    5fc2:	c5 c0       	rjmp	.+394    	; 0x614e <handleMotorsWithNoController+0x3d2>
    5fc4:	b8 2f       	mov	r27, r24
    5fc6:	b9 1b       	sub	r27, r25
    5fc8:	91 e0       	ldi	r25, 0x01	; 1
    5fca:	8b 17       	cp	r24, r27
    5fcc:	08 f0       	brcs	.+2      	; 0x5fd0 <handleMotorsWithNoController+0x254>
    5fce:	b6 c0       	rjmp	.+364    	; 0x613c <handleMotorsWithNoController+0x3c0>
    5fd0:	e9 2b       	or	r30, r25
    5fd2:	8c 2d       	mov	r24, r12
    5fd4:	81 95       	neg	r24
    5fd6:	f1 e0       	ldi	r31, 0x01	; 1
    5fd8:	58 17       	cp	r21, r24
    5fda:	08 f0       	brcs	.+2      	; 0x5fde <handleMotorsWithNoController+0x262>
    5fdc:	a6 c0       	rjmp	.+332    	; 0x612a <handleMotorsWithNoController+0x3ae>
    5fde:	98 2f       	mov	r25, r24
    5fe0:	9e 1b       	sub	r25, r30
    5fe2:	e9 2f       	mov	r30, r25
    5fe4:	91 e0       	ldi	r25, 0x01	; 1
    5fe6:	8e 17       	cp	r24, r30
    5fe8:	08 f0       	brcs	.+2      	; 0x5fec <handleMotorsWithNoController+0x270>
    5fea:	96 c0       	rjmp	.+300    	; 0x6118 <handleMotorsWithNoController+0x39c>
    5fec:	f9 2b       	or	r31, r25
    5fee:	8a 2d       	mov	r24, r10
    5ff0:	81 95       	neg	r24
    5ff2:	91 e0       	ldi	r25, 0x01	; 1
    5ff4:	68 17       	cp	r22, r24
    5ff6:	08 f0       	brcs	.+2      	; 0x5ffa <handleMotorsWithNoController+0x27e>
    5ff8:	87 c0       	rjmp	.+270    	; 0x6108 <handleMotorsWithNoController+0x38c>
    5ffa:	38 2f       	mov	r19, r24
    5ffc:	3f 1b       	sub	r19, r31
    5ffe:	21 e0       	ldi	r18, 0x01	; 1
    6000:	83 17       	cp	r24, r19
    6002:	08 f0       	brcs	.+2      	; 0x6006 <handleMotorsWithNoController+0x28a>
    6004:	7a c0       	rjmp	.+244    	; 0x60fa <handleMotorsWithNoController+0x37e>
    6006:	92 2b       	or	r25, r18
    6008:	a1 95       	neg	r26
    600a:	a9 17       	cp	r26, r25
    600c:	09 f4       	brne	.+2      	; 0x6010 <handleMotorsWithNoController+0x294>
    600e:	e2 c0       	rjmp	.+452    	; 0x61d4 <handleMotorsWithNoController+0x458>
			speedStepCounter = getTime100MicroSec();
    6010:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    6014:	9b 01       	movw	r18, r22
    6016:	ac 01       	movw	r20, r24
    6018:	60 93 64 04 	sts	0x0464, r22
    601c:	30 93 65 04 	sts	0x0465, r19
    6020:	40 93 66 04 	sts	0x0466, r20
    6024:	50 93 67 04 	sts	0x0467, r21
    6028:	10 92 68 04 	sts	0x0468, r1
    602c:	10 92 69 04 	sts	0x0469, r1
    6030:	10 92 6a 04 	sts	0x046A, r1
    6034:	10 92 6b 04 	sts	0x046B, r1

			if(softAccEnabled) {
    6038:	80 91 6c 04 	lds	r24, 0x046C
    603c:	88 23       	and	r24, r24
    603e:	09 f4       	brne	.+2      	; 0x6042 <handleMotorsWithNoController+0x2c6>
    6040:	3a c1       	rjmp	.+628    	; 0x62b6 <handleMotorsWithNoController+0x53a>
				if(pwm_right_desired == 0) {
    6042:	20 91 f5 02 	lds	r18, 0x02F5
    6046:	30 91 f6 02 	lds	r19, 0x02F6
    604a:	21 15       	cp	r18, r1
    604c:	31 05       	cpc	r19, r1
    604e:	09 f0       	breq	.+2      	; 0x6052 <handleMotorsWithNoController+0x2d6>
    6050:	47 c1       	rjmp	.+654    	; 0x62e0 <handleMotorsWithNoController+0x564>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    6052:	10 92 fa 02 	sts	0x02FA, r1
    6056:	10 92 f9 02 	sts	0x02F9, r1
    605a:	c0 e0       	ldi	r28, 0x00	; 0
    605c:	d0 e0       	ldi	r29, 0x00	; 0
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    605e:	20 91 f7 02 	lds	r18, 0x02F7
    6062:	30 91 f8 02 	lds	r19, 0x02F8
    6066:	21 15       	cp	r18, r1
    6068:	31 05       	cpc	r19, r1
    606a:	09 f4       	brne	.+2      	; 0x606e <handleMotorsWithNoController+0x2f2>
    606c:	5c c1       	rjmp	.+696    	; 0x6326 <handleMotorsWithNoController+0x5aa>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    606e:	00 91 fb 02 	lds	r16, 0x02FB
    6072:	10 91 fc 02 	lds	r17, 0x02FC
    6076:	02 9f       	mul	r16, r18
    6078:	c0 01       	movw	r24, r0
    607a:	03 9f       	mul	r16, r19
    607c:	90 0d       	add	r25, r0
    607e:	12 9f       	mul	r17, r18
    6080:	90 0d       	add	r25, r0
    6082:	11 24       	eor	r1, r1
    6084:	97 fd       	sbrc	r25, 7
    6086:	4f c1       	rjmp	.+670    	; 0x6326 <handleMotorsWithNoController+0x5aa>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    6088:	02 17       	cp	r16, r18
    608a:	13 07       	cpc	r17, r19
    608c:	0c f0       	brlt	.+2      	; 0x6090 <handleMotorsWithNoController+0x314>
    608e:	52 c1       	rjmp	.+676    	; 0x6334 <handleMotorsWithNoController+0x5b8>
					pwm_intermediate_left_desired += speedStep;
    6090:	80 91 13 02 	lds	r24, 0x0213
    6094:	a8 01       	movw	r20, r16
    6096:	48 0f       	add	r20, r24
    6098:	51 1d       	adc	r21, r1
    609a:	ca 01       	movw	r24, r20
    609c:	50 93 fc 02 	sts	0x02FC, r21
    60a0:	40 93 fb 02 	sts	0x02FB, r20
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    60a4:	24 17       	cp	r18, r20
    60a6:	35 07       	cpc	r19, r21
    60a8:	0c f0       	brlt	.+2      	; 0x60ac <handleMotorsWithNoController+0x330>
    60aa:	18 c1       	rjmp	.+560    	; 0x62dc <handleMotorsWithNoController+0x560>
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired -= speedStep;
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
    60ac:	30 93 fc 02 	sts	0x02FC, r19
    60b0:	20 93 fb 02 	sts	0x02FB, r18
    60b4:	89 01       	movw	r16, r18
    60b6:	7a ce       	rjmp	.-780    	; 0x5dac <handleMotorsWithNoController+0x30>
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
    60b8:	41 15       	cp	r20, r1
    60ba:	51 05       	cpc	r21, r1
    60bc:	09 f0       	breq	.+2      	; 0x60c0 <handleMotorsWithNoController+0x344>
    60be:	f2 c0       	rjmp	.+484    	; 0x62a4 <handleMotorsWithNoController+0x528>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    60c0:	10 92 a9 00 	sts	0x00A9, r1
    60c4:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    60c8:	10 92 ab 00 	sts	0x00AB, r1
    60cc:	10 92 aa 00 	sts	0x00AA, r1
    60d0:	22 cf       	rjmp	.-444    	; 0x5f16 <handleMotorsWithNoController+0x19a>
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    60d2:	8b e0       	ldi	r24, 0x0B	; 11
    60d4:	93 e0       	ldi	r25, 0x03	; 3
    60d6:	69 e0       	ldi	r22, 0x09	; 9
    60d8:	73 e0       	ldi	r23, 0x03	; 3
    60da:	0e 94 a8 33 	call	0x6750	; 0x6750 <obstacleAvoidance>
    60de:	fb ce       	rjmp	.-522    	; 0x5ed6 <handleMotorsWithNoController+0x15a>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    60e0:	21 15       	cp	r18, r1
    60e2:	31 05       	cpc	r19, r1
    60e4:	09 f0       	breq	.+2      	; 0x60e8 <handleMotorsWithNoController+0x36c>
    60e6:	d5 c0       	rjmp	.+426    	; 0x6292 <handleMotorsWithNoController+0x516>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    60e8:	10 92 99 00 	sts	0x0099, r1
    60ec:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    60f0:	10 92 9b 00 	sts	0x009B, r1
    60f4:	10 92 9a 00 	sts	0x009A, r1
    60f8:	06 cf       	rjmp	.-500    	; 0x5f06 <handleMotorsWithNoController+0x18a>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    60fa:	20 e0       	ldi	r18, 0x00	; 0
    60fc:	92 2b       	or	r25, r18
    60fe:	a1 95       	neg	r26
    6100:	a9 17       	cp	r26, r25
    6102:	09 f0       	breq	.+2      	; 0x6106 <handleMotorsWithNoController+0x38a>
    6104:	85 cf       	rjmp	.-246    	; 0x6010 <handleMotorsWithNoController+0x294>
    6106:	66 c0       	rjmp	.+204    	; 0x61d4 <handleMotorsWithNoController+0x458>
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	38 2f       	mov	r19, r24
    610c:	3f 1b       	sub	r19, r31
    610e:	21 e0       	ldi	r18, 0x01	; 1
    6110:	83 17       	cp	r24, r19
    6112:	08 f4       	brcc	.+2      	; 0x6116 <handleMotorsWithNoController+0x39a>
    6114:	78 cf       	rjmp	.-272    	; 0x6006 <handleMotorsWithNoController+0x28a>
    6116:	f1 cf       	rjmp	.-30     	; 0x60fa <handleMotorsWithNoController+0x37e>
    6118:	90 e0       	ldi	r25, 0x00	; 0
    611a:	f9 2b       	or	r31, r25
    611c:	8a 2d       	mov	r24, r10
    611e:	81 95       	neg	r24
    6120:	91 e0       	ldi	r25, 0x01	; 1
    6122:	68 17       	cp	r22, r24
    6124:	08 f4       	brcc	.+2      	; 0x6128 <handleMotorsWithNoController+0x3ac>
    6126:	69 cf       	rjmp	.-302    	; 0x5ffa <handleMotorsWithNoController+0x27e>
    6128:	ef cf       	rjmp	.-34     	; 0x6108 <handleMotorsWithNoController+0x38c>
    612a:	f0 e0       	ldi	r31, 0x00	; 0
    612c:	98 2f       	mov	r25, r24
    612e:	9e 1b       	sub	r25, r30
    6130:	e9 2f       	mov	r30, r25
    6132:	91 e0       	ldi	r25, 0x01	; 1
    6134:	8e 17       	cp	r24, r30
    6136:	08 f4       	brcc	.+2      	; 0x613a <handleMotorsWithNoController+0x3be>
    6138:	59 cf       	rjmp	.-334    	; 0x5fec <handleMotorsWithNoController+0x270>
    613a:	ee cf       	rjmp	.-36     	; 0x6118 <handleMotorsWithNoController+0x39c>
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	e9 2b       	or	r30, r25
    6140:	8c 2d       	mov	r24, r12
    6142:	81 95       	neg	r24
    6144:	f1 e0       	ldi	r31, 0x01	; 1
    6146:	58 17       	cp	r21, r24
    6148:	08 f4       	brcc	.+2      	; 0x614c <handleMotorsWithNoController+0x3d0>
    614a:	49 cf       	rjmp	.-366    	; 0x5fde <handleMotorsWithNoController+0x262>
    614c:	ee cf       	rjmp	.-36     	; 0x612a <handleMotorsWithNoController+0x3ae>
    614e:	e0 e0       	ldi	r30, 0x00	; 0
    6150:	b8 2f       	mov	r27, r24
    6152:	b9 1b       	sub	r27, r25
    6154:	91 e0       	ldi	r25, 0x01	; 1
    6156:	8b 17       	cp	r24, r27
    6158:	08 f4       	brcc	.+2      	; 0x615c <handleMotorsWithNoController+0x3e0>
    615a:	3a cf       	rjmp	.-396    	; 0x5fd0 <handleMotorsWithNoController+0x254>
    615c:	ef cf       	rjmp	.-34     	; 0x613c <handleMotorsWithNoController+0x3c0>
    615e:	e0 e0       	ldi	r30, 0x00	; 0
    6160:	9e 2b       	or	r25, r30
    6162:	8e 2d       	mov	r24, r14
    6164:	81 95       	neg	r24
    6166:	e1 e0       	ldi	r30, 0x01	; 1
    6168:	48 17       	cp	r20, r24
    616a:	08 f4       	brcc	.+2      	; 0x616e <handleMotorsWithNoController+0x3f2>
    616c:	2b cf       	rjmp	.-426    	; 0x5fc4 <handleMotorsWithNoController+0x248>
    616e:	ef cf       	rjmp	.-34     	; 0x614e <handleMotorsWithNoController+0x3d2>
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	d8 2e       	mov	r13, r24
    6174:	de 1a       	sub	r13, r30
    6176:	e1 e0       	ldi	r30, 0x01	; 1
    6178:	8d 15       	cp	r24, r13
    617a:	08 f4       	brcc	.+2      	; 0x617e <handleMotorsWithNoController+0x402>
    617c:	1c cf       	rjmp	.-456    	; 0x5fb6 <handleMotorsWithNoController+0x23a>
    617e:	ef cf       	rjmp	.-34     	; 0x615e <handleMotorsWithNoController+0x3e2>
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	e9 2b       	or	r30, r25
    6184:	83 2f       	mov	r24, r19
    6186:	8b 1b       	sub	r24, r27
    6188:	91 e0       	ldi	r25, 0x01	; 1
    618a:	38 17       	cp	r19, r24
    618c:	08 f4       	brcc	.+2      	; 0x6190 <handleMotorsWithNoController+0x414>
    618e:	0d cf       	rjmp	.-486    	; 0x5faa <handleMotorsWithNoController+0x22e>
    6190:	ef cf       	rjmp	.-34     	; 0x6170 <handleMotorsWithNoController+0x3f4>
    6192:	e0 e0       	ldi	r30, 0x00	; 0
    6194:	b8 2e       	mov	r11, r24
    6196:	b9 1a       	sub	r11, r25
    6198:	91 e0       	ldi	r25, 0x01	; 1
    619a:	8b 15       	cp	r24, r11
    619c:	08 f4       	brcc	.+2      	; 0x61a0 <handleMotorsWithNoController+0x424>
    619e:	fe ce       	rjmp	.-516    	; 0x5f9c <handleMotorsWithNoController+0x220>
    61a0:	ef cf       	rjmp	.-34     	; 0x6180 <handleMotorsWithNoController+0x404>
    61a2:	e0 e0       	ldi	r30, 0x00	; 0
    61a4:	9e 2b       	or	r25, r30
    61a6:	82 2f       	mov	r24, r18
    61a8:	8f 1b       	sub	r24, r31
    61aa:	e1 e0       	ldi	r30, 0x01	; 1
    61ac:	28 17       	cp	r18, r24
    61ae:	08 f4       	brcc	.+2      	; 0x61b2 <handleMotorsWithNoController+0x436>
    61b0:	ef ce       	rjmp	.-546    	; 0x5f90 <handleMotorsWithNoController+0x214>
    61b2:	ef cf       	rjmp	.-34     	; 0x6192 <handleMotorsWithNoController+0x416>
    61b4:	90 e0       	ldi	r25, 0x00	; 0
    61b6:	f8 2e       	mov	r15, r24
    61b8:	fe 1a       	sub	r15, r30
    61ba:	e1 e0       	ldi	r30, 0x01	; 1
    61bc:	8f 15       	cp	r24, r15
    61be:	08 f4       	brcc	.+2      	; 0x61c2 <handleMotorsWithNoController+0x446>
    61c0:	e0 ce       	rjmp	.-576    	; 0x5f82 <handleMotorsWithNoController+0x206>
    61c2:	ef cf       	rjmp	.-34     	; 0x61a2 <handleMotorsWithNoController+0x426>
    61c4:	e0 e0       	ldi	r30, 0x00	; 0
    61c6:	81 2f       	mov	r24, r17
    61c8:	89 1b       	sub	r24, r25
    61ca:	91 e0       	ldi	r25, 0x01	; 1
    61cc:	18 17       	cp	r17, r24
    61ce:	08 f4       	brcc	.+2      	; 0x61d2 <handleMotorsWithNoController+0x456>
    61d0:	d2 ce       	rjmp	.-604    	; 0x5f76 <handleMotorsWithNoController+0x1fa>
    61d2:	f0 cf       	rjmp	.-32     	; 0x61b4 <handleMotorsWithNoController+0x438>
    61d4:	33 23       	and	r19, r19
    61d6:	09 f0       	breq	.+2      	; 0x61da <handleMotorsWithNoController+0x45e>
    61d8:	1b cf       	rjmp	.-458    	; 0x6010 <handleMotorsWithNoController+0x294>
    61da:	ee 23       	and	r30, r30
    61dc:	09 f0       	breq	.+2      	; 0x61e0 <handleMotorsWithNoController+0x464>
    61de:	18 cf       	rjmp	.-464    	; 0x6010 <handleMotorsWithNoController+0x294>
    61e0:	bb 23       	and	r27, r27
    61e2:	09 f0       	breq	.+2      	; 0x61e6 <handleMotorsWithNoController+0x46a>
    61e4:	15 cf       	rjmp	.-470    	; 0x6010 <handleMotorsWithNoController+0x294>
    61e6:	dd 20       	and	r13, r13
    61e8:	09 f0       	breq	.+2      	; 0x61ec <handleMotorsWithNoController+0x470>
    61ea:	12 cf       	rjmp	.-476    	; 0x6010 <handleMotorsWithNoController+0x294>
    61ec:	bb 20       	and	r11, r11
    61ee:	09 f0       	breq	.+2      	; 0x61f2 <handleMotorsWithNoController+0x476>
    61f0:	0f cf       	rjmp	.-482    	; 0x6010 <handleMotorsWithNoController+0x294>
    61f2:	41 e0       	ldi	r20, 0x01	; 1
    61f4:	4f 15       	cp	r20, r15
    61f6:	08 f4       	brcc	.+2      	; 0x61fa <handleMotorsWithNoController+0x47e>
    61f8:	0b cf       	rjmp	.-490    	; 0x6010 <handleMotorsWithNoController+0x294>
    61fa:	f4 16       	cp	r15, r20
    61fc:	09 f0       	breq	.+2      	; 0x6200 <handleMotorsWithNoController+0x484>
    61fe:	ce cd       	rjmp	.-1124   	; 0x5d9c <handleMotorsWithNoController+0x20>
    6200:	5f e8       	ldi	r21, 0x8F	; 143
    6202:	59 15       	cp	r21, r9
    6204:	08 f4       	brcc	.+2      	; 0x6208 <handleMotorsWithNoController+0x48c>
    6206:	04 cf       	rjmp	.-504    	; 0x6010 <handleMotorsWithNoController+0x294>
    6208:	c9 cd       	rjmp	.-1134   	; 0x5d9c <handleMotorsWithNoController+0x20>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    620a:	35 95       	asr	r19
    620c:	27 95       	ror	r18
    620e:	35 95       	asr	r19
    6210:	27 95       	ror	r18
    6212:	35 95       	asr	r19
    6214:	27 95       	ror	r18
    6216:	b9 01       	movw	r22, r18
    6218:	88 27       	eor	r24, r24
    621a:	77 fd       	sbrc	r23, 7
    621c:	80 95       	com	r24
    621e:	98 2f       	mov	r25, r24
    6220:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    6224:	9b 01       	movw	r18, r22
    6226:	ac 01       	movw	r20, r24
    6228:	60 91 cd 02 	lds	r22, 0x02CD
    622c:	70 91 ce 02 	lds	r23, 0x02CE
    6230:	80 91 cf 02 	lds	r24, 0x02CF
    6234:	90 91 d0 02 	lds	r25, 0x02D0
    6238:	0e 94 8e 4b 	call	0x971c	; 0x971c <__subsf3>
    623c:	60 93 cd 02 	sts	0x02CD, r22
    6240:	70 93 ce 02 	sts	0x02CE, r23
    6244:	80 93 cf 02 	sts	0x02CF, r24
    6248:	90 93 d0 02 	sts	0x02D0, r25
    624c:	29 ce       	rjmp	.-942    	; 0x5ea0 <handleMotorsWithNoController+0x124>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    624e:	35 95       	asr	r19
    6250:	27 95       	ror	r18
    6252:	35 95       	asr	r19
    6254:	27 95       	ror	r18
    6256:	35 95       	asr	r19
    6258:	27 95       	ror	r18
    625a:	b9 01       	movw	r22, r18
    625c:	88 27       	eor	r24, r24
    625e:	77 fd       	sbrc	r23, 7
    6260:	80 95       	com	r24
    6262:	98 2f       	mov	r25, r24
    6264:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    6268:	9b 01       	movw	r18, r22
    626a:	ac 01       	movw	r20, r24
    626c:	60 91 d1 02 	lds	r22, 0x02D1
    6270:	70 91 d2 02 	lds	r23, 0x02D2
    6274:	80 91 d3 02 	lds	r24, 0x02D3
    6278:	90 91 d4 02 	lds	r25, 0x02D4
    627c:	0e 94 8e 4b 	call	0x971c	; 0x971c <__subsf3>
    6280:	60 93 d1 02 	sts	0x02D1, r22
    6284:	70 93 d2 02 	sts	0x02D2, r23
    6288:	80 93 d3 02 	sts	0x02D3, r24
    628c:	90 93 d4 02 	sts	0x02D4, r25
    6290:	ca cd       	rjmp	.-1132   	; 0x5e26 <handleMotorsWithNoController+0xaa>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    6292:	88 27       	eor	r24, r24
    6294:	99 27       	eor	r25, r25
    6296:	82 1b       	sub	r24, r18
    6298:	93 0b       	sbc	r25, r19
    629a:	90 93 9b 00 	sts	0x009B, r25
    629e:	80 93 9a 00 	sts	0x009A, r24
    62a2:	31 ce       	rjmp	.-926    	; 0x5f06 <handleMotorsWithNoController+0x18a>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    62a4:	88 27       	eor	r24, r24
    62a6:	99 27       	eor	r25, r25
    62a8:	84 1b       	sub	r24, r20
    62aa:	95 0b       	sbc	r25, r21
    62ac:	90 93 ab 00 	sts	0x00AB, r25
    62b0:	80 93 aa 00 	sts	0x00AA, r24
    62b4:	30 ce       	rjmp	.-928    	; 0x5f16 <handleMotorsWithNoController+0x19a>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    62b6:	20 91 f5 02 	lds	r18, 0x02F5
    62ba:	30 91 f6 02 	lds	r19, 0x02F6
    62be:	20 93 f9 02 	sts	0x02F9, r18
    62c2:	30 93 fa 02 	sts	0x02FA, r19
				pwm_intermediate_left_desired = pwm_left_desired;
    62c6:	40 91 f7 02 	lds	r20, 0x02F7
    62ca:	50 91 f8 02 	lds	r21, 0x02F8
    62ce:	40 93 fb 02 	sts	0x02FB, r20
    62d2:	50 93 fc 02 	sts	0x02FC, r21
    62d6:	c9 01       	movw	r24, r18
    62d8:	ec 01       	movw	r28, r24
    62da:	ca 01       	movw	r24, r20
    62dc:	8c 01       	movw	r16, r24
    62de:	66 cd       	rjmp	.-1332   	; 0x5dac <handleMotorsWithNoController+0x30>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    62e0:	c0 91 f9 02 	lds	r28, 0x02F9
    62e4:	d0 91 fa 02 	lds	r29, 0x02FA
    62e8:	c2 9f       	mul	r28, r18
    62ea:	c0 01       	movw	r24, r0
    62ec:	c3 9f       	mul	r28, r19
    62ee:	90 0d       	add	r25, r0
    62f0:	d2 9f       	mul	r29, r18
    62f2:	90 0d       	add	r25, r0
    62f4:	11 24       	eor	r1, r1
    62f6:	97 fd       	sbrc	r25, 7
    62f8:	ac ce       	rjmp	.-680    	; 0x6052 <handleMotorsWithNoController+0x2d6>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    62fa:	c2 17       	cp	r28, r18
    62fc:	d3 07       	cpc	r29, r19
    62fe:	74 f5       	brge	.+92     	; 0x635c <handleMotorsWithNoController+0x5e0>
					pwm_intermediate_right_desired += speedStep;
    6300:	80 91 13 02 	lds	r24, 0x0213
    6304:	ae 01       	movw	r20, r28
    6306:	48 0f       	add	r20, r24
    6308:	51 1d       	adc	r21, r1
    630a:	ca 01       	movw	r24, r20
    630c:	50 93 fa 02 	sts	0x02FA, r21
    6310:	40 93 f9 02 	sts	0x02F9, r20
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    6314:	24 17       	cp	r18, r20
    6316:	35 07       	cpc	r19, r21
    6318:	94 f5       	brge	.+100    	; 0x637e <handleMotorsWithNoController+0x602>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    631a:	30 93 fa 02 	sts	0x02FA, r19
    631e:	20 93 f9 02 	sts	0x02F9, r18
    6322:	e9 01       	movw	r28, r18
    6324:	9c ce       	rjmp	.-712    	; 0x605e <handleMotorsWithNoController+0x2e2>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    6326:	10 92 fc 02 	sts	0x02FC, r1
    632a:	10 92 fb 02 	sts	0x02FB, r1
    632e:	00 e0       	ldi	r16, 0x00	; 0
    6330:	10 e0       	ldi	r17, 0x00	; 0
    6332:	3c cd       	rjmp	.-1416   	; 0x5dac <handleMotorsWithNoController+0x30>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    6334:	20 17       	cp	r18, r16
    6336:	31 07       	cpc	r19, r17
    6338:	0c f0       	brlt	.+2      	; 0x633c <handleMotorsWithNoController+0x5c0>
    633a:	38 cd       	rjmp	.-1424   	; 0x5dac <handleMotorsWithNoController+0x30>
					pwm_intermediate_left_desired -= speedStep;
    633c:	80 91 13 02 	lds	r24, 0x0213
    6340:	a8 01       	movw	r20, r16
    6342:	48 1b       	sub	r20, r24
    6344:	51 09       	sbc	r21, r1
    6346:	ca 01       	movw	r24, r20
    6348:	50 93 fc 02 	sts	0x02FC, r21
    634c:	40 93 fb 02 	sts	0x02FB, r20
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    6350:	42 17       	cp	r20, r18
    6352:	53 07       	cpc	r21, r19
    6354:	0c f4       	brge	.+2      	; 0x6358 <handleMotorsWithNoController+0x5dc>
    6356:	aa ce       	rjmp	.-684    	; 0x60ac <handleMotorsWithNoController+0x330>
    6358:	8c 01       	movw	r16, r24
    635a:	28 cd       	rjmp	.-1456   	; 0x5dac <handleMotorsWithNoController+0x30>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    635c:	2c 17       	cp	r18, r28
    635e:	3d 07       	cpc	r19, r29
    6360:	0c f0       	brlt	.+2      	; 0x6364 <handleMotorsWithNoController+0x5e8>
    6362:	7d ce       	rjmp	.-774    	; 0x605e <handleMotorsWithNoController+0x2e2>
					pwm_intermediate_right_desired -= speedStep;
    6364:	80 91 13 02 	lds	r24, 0x0213
    6368:	ae 01       	movw	r20, r28
    636a:	48 1b       	sub	r20, r24
    636c:	51 09       	sbc	r21, r1
    636e:	ca 01       	movw	r24, r20
    6370:	50 93 fa 02 	sts	0x02FA, r21
    6374:	40 93 f9 02 	sts	0x02F9, r20
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    6378:	42 17       	cp	r20, r18
    637a:	53 07       	cpc	r21, r19
    637c:	74 f2       	brlt	.-100    	; 0x631a <handleMotorsWithNoController+0x59e>
    637e:	ec 01       	movw	r28, r24
    6380:	6e ce       	rjmp	.-804    	; 0x605e <handleMotorsWithNoController+0x2e2>

00006382 <initCalibration>:
	calibration[8][7] = 153;

    writeCalibrationToFlash();
}

void initCalibration() {
    6382:	2f 92       	push	r2
    6384:	3f 92       	push	r3
    6386:	4f 92       	push	r4
    6388:	5f 92       	push	r5
    638a:	6f 92       	push	r6
    638c:	7f 92       	push	r7
    638e:	8f 92       	push	r8
    6390:	9f 92       	push	r9
    6392:	af 92       	push	r10
    6394:	bf 92       	push	r11
    6396:	cf 92       	push	r12
    6398:	df 92       	push	r13
    639a:	ef 92       	push	r14
    639c:	ff 92       	push	r15
    639e:	0f 93       	push	r16
    63a0:	1f 93       	push	r17
    63a2:	cf 93       	push	r28
    63a4:	df 93       	push	r29

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    63a6:	8a e6       	ldi	r24, 0x6A	; 106
    63a8:	9f e0       	ldi	r25, 0x0F	; 15
    63aa:	0e 94 7c 4f 	call	0x9ef8	; 0x9ef8 <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    63ae:	85 55       	subi	r24, 0x55	; 85
    63b0:	9a 4a       	sbci	r25, 0xAA	; 170
    63b2:	09 f4       	brne	.+2      	; 0x63b6 <initCalibration+0x34>
    63b4:	9c c1       	rjmp	.+824    	; 0x66ee <initCalibration+0x36c>
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    63b6:	74 e1       	ldi	r23, 0x14	; 20
    63b8:	87 2e       	mov	r8, r23
    63ba:	91 2c       	mov	r9, r1
    63bc:	90 92 e5 08 	sts	0x08E5, r9
    63c0:	80 92 e4 08 	sts	0x08E4, r8
    calibration[1][0] = 40;
    63c4:	88 e2       	ldi	r24, 0x28	; 40
    63c6:	90 e0       	ldi	r25, 0x00	; 0
    63c8:	90 93 f5 08 	sts	0x08F5, r25
    63cc:	80 93 f4 08 	sts	0x08F4, r24
    calibration[2][0] = 59;
    63d0:	8b e3       	ldi	r24, 0x3B	; 59
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	90 93 05 09 	sts	0x0905, r25
    63d8:	80 93 04 09 	sts	0x0904, r24
    calibration[3][0] = 79;
    63dc:	8f e4       	ldi	r24, 0x4F	; 79
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	90 93 15 09 	sts	0x0915, r25
    63e4:	80 93 14 09 	sts	0x0914, r24
    calibration[4][0] = 100;
    63e8:	84 e6       	ldi	r24, 0x64	; 100
    63ea:	90 e0       	ldi	r25, 0x00	; 0
    63ec:	90 93 25 09 	sts	0x0925, r25
    63f0:	80 93 24 09 	sts	0x0924, r24
    calibration[5][0] = 120;
    63f4:	c8 e7       	ldi	r28, 0x78	; 120
    63f6:	d0 e0       	ldi	r29, 0x00	; 0
    63f8:	d0 93 35 09 	sts	0x0935, r29
    63fc:	c0 93 34 09 	sts	0x0934, r28
    calibration[6][0] = 139;
    6400:	6b e8       	ldi	r22, 0x8B	; 139
    6402:	e6 2e       	mov	r14, r22
    6404:	f1 2c       	mov	r15, r1
    6406:	f0 92 45 09 	sts	0x0945, r15
    640a:	e0 92 44 09 	sts	0x0944, r14
    calibration[7][0] = 159;
    640e:	8f e9       	ldi	r24, 0x9F	; 159
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	90 93 55 09 	sts	0x0955, r25
    6416:	80 93 54 09 	sts	0x0954, r24
	calibration[8][0] = 180;
    641a:	54 eb       	ldi	r21, 0xB4	; 180
    641c:	a5 2e       	mov	r10, r21
    641e:	b1 2c       	mov	r11, r1
    6420:	b0 92 65 09 	sts	0x0965, r11
    6424:	a0 92 64 09 	sts	0x0964, r10
    calibration[0][1] = 19;    	// real speed measured in mm/s
    6428:	23 e1       	ldi	r18, 0x13	; 19
    642a:	30 e0       	ldi	r19, 0x00	; 0
    642c:	30 93 e7 08 	sts	0x08E7, r19
    6430:	20 93 e6 08 	sts	0x08E6, r18
    calibration[1][1] = 47;
    6434:	8f e2       	ldi	r24, 0x2F	; 47
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	90 93 f7 08 	sts	0x08F7, r25
    643c:	80 93 f6 08 	sts	0x08F6, r24
    calibration[2][1] = 72;
    6440:	88 e4       	ldi	r24, 0x48	; 72
    6442:	90 e0       	ldi	r25, 0x00	; 0
    6444:	90 93 07 09 	sts	0x0907, r25
    6448:	80 93 06 09 	sts	0x0906, r24
    calibration[3][1] = 91;
    644c:	8b e5       	ldi	r24, 0x5B	; 91
    644e:	90 e0       	ldi	r25, 0x00	; 0
    6450:	90 93 17 09 	sts	0x0917, r25
    6454:	80 93 16 09 	sts	0x0916, r24
    calibration[4][1] = 109;
    6458:	8d e6       	ldi	r24, 0x6D	; 109
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	90 93 27 09 	sts	0x0927, r25
    6460:	80 93 26 09 	sts	0x0926, r24
    calibration[5][1] = 125;
    6464:	4d e7       	ldi	r20, 0x7D	; 125
    6466:	c4 2e       	mov	r12, r20
    6468:	d1 2c       	mov	r13, r1
    646a:	d0 92 37 09 	sts	0x0937, r13
    646e:	c0 92 36 09 	sts	0x0936, r12
    calibration[6][1] = 143;
    6472:	8f e8       	ldi	r24, 0x8F	; 143
    6474:	90 e0       	ldi	r25, 0x00	; 0
    6476:	90 93 47 09 	sts	0x0947, r25
    647a:	80 93 46 09 	sts	0x0946, r24
    calibration[7][1] = 160;
    647e:	40 ea       	ldi	r20, 0xA0	; 160
    6480:	50 e0       	ldi	r21, 0x00	; 0
    6482:	50 93 57 09 	sts	0x0957, r21
    6486:	40 93 56 09 	sts	0x0956, r20
	calibration[8][1] = 174;
    648a:	8e ea       	ldi	r24, 0xAE	; 174
    648c:	90 e0       	ldi	r25, 0x00	; 0
    648e:	90 93 67 09 	sts	0x0967, r25
    6492:	80 93 66 09 	sts	0x0966, r24
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    6496:	30 93 e9 08 	sts	0x08E9, r19
    649a:	20 93 e8 08 	sts	0x08E8, r18
    calibration[1][2] = 39;
    649e:	67 e2       	ldi	r22, 0x27	; 39
    64a0:	70 e0       	ldi	r23, 0x00	; 0
    64a2:	70 93 f9 08 	sts	0x08F9, r23
    64a6:	60 93 f8 08 	sts	0x08F8, r22
    calibration[2][2] = 60;
    64aa:	0c e3       	ldi	r16, 0x3C	; 60
    64ac:	10 e0       	ldi	r17, 0x00	; 0
    64ae:	10 93 09 09 	sts	0x0909, r17
    64b2:	00 93 08 09 	sts	0x0908, r16
    calibration[3][2] = 80;
    64b6:	20 e5       	ldi	r18, 0x50	; 80
    64b8:	22 2e       	mov	r2, r18
    64ba:	31 2c       	mov	r3, r1
    64bc:	30 92 19 09 	sts	0x0919, r3
    64c0:	20 92 18 09 	sts	0x0918, r2
    calibration[4][2] = 99;
    64c4:	a3 e6       	ldi	r26, 0x63	; 99
    64c6:	b0 e0       	ldi	r27, 0x00	; 0
    64c8:	b0 93 29 09 	sts	0x0929, r27
    64cc:	a0 93 28 09 	sts	0x0928, r26
    calibration[5][2] = 119;
    64d0:	27 e7       	ldi	r18, 0x77	; 119
    64d2:	30 e0       	ldi	r19, 0x00	; 0
    64d4:	30 93 39 09 	sts	0x0939, r19
    64d8:	20 93 38 09 	sts	0x0938, r18
    calibration[6][2] = 140;
    64dc:	ec e8       	ldi	r30, 0x8C	; 140
    64de:	f0 e0       	ldi	r31, 0x00	; 0
    64e0:	f0 93 49 09 	sts	0x0949, r31
    64e4:	e0 93 48 09 	sts	0x0948, r30
    calibration[7][2] = 160;
    64e8:	50 93 59 09 	sts	0x0959, r21
    64ec:	40 93 58 09 	sts	0x0958, r20
	calibration[8][2] = 180;
    64f0:	b0 92 69 09 	sts	0x0969, r11
    64f4:	a0 92 68 09 	sts	0x0968, r10
    calibration[0][3] = 23;    	// real speed measured in mm/s
    64f8:	87 e1       	ldi	r24, 0x17	; 23
    64fa:	90 e0       	ldi	r25, 0x00	; 0
    64fc:	90 93 eb 08 	sts	0x08EB, r25
    6500:	80 93 ea 08 	sts	0x08EA, r24
    calibration[1][3] = 46;
    6504:	9e e2       	ldi	r25, 0x2E	; 46
    6506:	49 2e       	mov	r4, r25
    6508:	51 2c       	mov	r5, r1
    650a:	50 92 fb 08 	sts	0x08FB, r5
    650e:	40 92 fa 08 	sts	0x08FA, r4
    calibration[2][3] = 64;
    6512:	80 e4       	ldi	r24, 0x40	; 64
    6514:	90 e0       	ldi	r25, 0x00	; 0
    6516:	90 93 0b 09 	sts	0x090B, r25
    651a:	80 93 0a 09 	sts	0x090A, r24
    calibration[3][3] = 81;
    651e:	81 e5       	ldi	r24, 0x51	; 81
    6520:	68 2e       	mov	r6, r24
    6522:	71 2c       	mov	r7, r1
    6524:	70 92 1b 09 	sts	0x091B, r7
    6528:	60 92 1a 09 	sts	0x091A, r6
    calibration[4][3] = 97;
    652c:	81 e6       	ldi	r24, 0x61	; 97
    652e:	90 e0       	ldi	r25, 0x00	; 0
    6530:	90 93 2b 09 	sts	0x092B, r25
    6534:	80 93 2a 09 	sts	0x092A, r24
    calibration[5][3] = 112;
    6538:	80 e7       	ldi	r24, 0x70	; 112
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	90 93 3b 09 	sts	0x093B, r25
    6540:	80 93 3a 09 	sts	0x093A, r24
    calibration[6][3] = 125;
    6544:	d0 92 4b 09 	sts	0x094B, r13
    6548:	c0 92 4a 09 	sts	0x094A, r12
    calibration[7][3] = 139;
    654c:	f0 92 5b 09 	sts	0x095B, r15
    6550:	e0 92 5a 09 	sts	0x095A, r14
	calibration[8][3] = 152;
    6554:	88 e9       	ldi	r24, 0x98	; 152
    6556:	90 e0       	ldi	r25, 0x00	; 0
    6558:	90 93 6b 09 	sts	0x096B, r25
    655c:	80 93 6a 09 	sts	0x096A, r24
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    6560:	90 92 ed 08 	sts	0x08ED, r9
    6564:	80 92 ec 08 	sts	0x08EC, r8
    calibration[1][4] = 39;
    6568:	70 93 fd 08 	sts	0x08FD, r23
    656c:	60 93 fc 08 	sts	0x08FC, r22
    calibration[2][4] = 60;
    6570:	10 93 0d 09 	sts	0x090D, r17
    6574:	00 93 0c 09 	sts	0x090C, r16
    calibration[3][4] = 79;
    6578:	8f e4       	ldi	r24, 0x4F	; 79
    657a:	90 e0       	ldi	r25, 0x00	; 0
    657c:	90 93 1d 09 	sts	0x091D, r25
    6580:	80 93 1c 09 	sts	0x091C, r24
    calibration[4][4] = 99;
    6584:	b0 93 2d 09 	sts	0x092D, r27
    6588:	a0 93 2c 09 	sts	0x092C, r26
    calibration[5][4] = 120;
    658c:	d0 93 3d 09 	sts	0x093D, r29
    6590:	c0 93 3c 09 	sts	0x093C, r28
    calibration[6][4] = 140;
    6594:	f0 93 4d 09 	sts	0x094D, r31
    6598:	e0 93 4c 09 	sts	0x094C, r30
    calibration[7][4] = 160;
    659c:	50 93 5d 09 	sts	0x095D, r21
    65a0:	40 93 5c 09 	sts	0x095C, r20
	calibration[8][4] = 179;
    65a4:	83 eb       	ldi	r24, 0xB3	; 179
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	90 93 6d 09 	sts	0x096D, r25
    65ac:	80 93 6c 09 	sts	0x096C, r24
    calibration[0][5] = 18;    	// real speed measured in mm/s
    65b0:	82 e1       	ldi	r24, 0x12	; 18
    65b2:	90 e0       	ldi	r25, 0x00	; 0
    65b4:	90 93 ef 08 	sts	0x08EF, r25
    65b8:	80 93 ee 08 	sts	0x08EE, r24
    calibration[1][5] = 45;
    65bc:	8d e2       	ldi	r24, 0x2D	; 45
    65be:	90 e0       	ldi	r25, 0x00	; 0
    65c0:	90 93 ff 08 	sts	0x08FF, r25
    65c4:	80 93 fe 08 	sts	0x08FE, r24
    calibration[2][5] = 68;
    65c8:	84 e4       	ldi	r24, 0x44	; 68
    65ca:	90 e0       	ldi	r25, 0x00	; 0
    65cc:	90 93 0f 09 	sts	0x090F, r25
    65d0:	80 93 0e 09 	sts	0x090E, r24
    calibration[3][5] = 87;
    65d4:	87 e5       	ldi	r24, 0x57	; 87
    65d6:	90 e0       	ldi	r25, 0x00	; 0
    65d8:	90 93 1f 09 	sts	0x091F, r25
    65dc:	80 93 1e 09 	sts	0x091E, r24
    calibration[4][5] = 105;
    65e0:	89 e6       	ldi	r24, 0x69	; 105
    65e2:	90 e0       	ldi	r25, 0x00	; 0
    65e4:	90 93 2f 09 	sts	0x092F, r25
    65e8:	80 93 2e 09 	sts	0x092E, r24
    calibration[5][5] = 119;
    65ec:	30 93 3f 09 	sts	0x093F, r19
    65f0:	20 93 3e 09 	sts	0x093E, r18
    calibration[6][5] = 137;
    65f4:	89 e8       	ldi	r24, 0x89	; 137
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	90 93 4f 09 	sts	0x094F, r25
    65fc:	80 93 4e 09 	sts	0x094E, r24
    calibration[7][5] = 151;
    6600:	87 e9       	ldi	r24, 0x97	; 151
    6602:	90 e0       	ldi	r25, 0x00	; 0
    6604:	90 93 5f 09 	sts	0x095F, r25
    6608:	80 93 5e 09 	sts	0x095E, r24
	calibration[8][5] = 168;
    660c:	88 ea       	ldi	r24, 0xA8	; 168
    660e:	90 e0       	ldi	r25, 0x00	; 0
    6610:	90 93 6f 09 	sts	0x096F, r25
    6614:	80 93 6e 09 	sts	0x096E, r24
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    6618:	90 92 f1 08 	sts	0x08F1, r9
    661c:	80 92 f0 08 	sts	0x08F0, r8
    calibration[1][6] = 39;
    6620:	70 93 01 09 	sts	0x0901, r23
    6624:	60 93 00 09 	sts	0x0900, r22
    calibration[2][6] = 59;
    6628:	8b e3       	ldi	r24, 0x3B	; 59
    662a:	90 e0       	ldi	r25, 0x00	; 0
    662c:	90 93 11 09 	sts	0x0911, r25
    6630:	80 93 10 09 	sts	0x0910, r24
    calibration[3][6] = 80;
    6634:	30 92 21 09 	sts	0x0921, r3
    6638:	20 92 20 09 	sts	0x0920, r2
    calibration[4][6] = 100;
    663c:	84 e6       	ldi	r24, 0x64	; 100
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	90 93 31 09 	sts	0x0931, r25
    6644:	80 93 30 09 	sts	0x0930, r24
    calibration[5][6] = 119;
    6648:	30 93 41 09 	sts	0x0941, r19
    664c:	20 93 40 09 	sts	0x0940, r18
    calibration[6][6] = 139;
    6650:	f0 92 51 09 	sts	0x0951, r15
    6654:	e0 92 50 09 	sts	0x0950, r14
    calibration[7][6] = 160;
    6658:	50 93 61 09 	sts	0x0961, r21
    665c:	40 93 60 09 	sts	0x0960, r20
	calibration[8][6] = 180;
    6660:	b0 92 71 09 	sts	0x0971, r11
    6664:	a0 92 70 09 	sts	0x0970, r10
    calibration[0][7] = 22;    	// real speed measured in mm/s
    6668:	86 e1       	ldi	r24, 0x16	; 22
    666a:	90 e0       	ldi	r25, 0x00	; 0
    666c:	90 93 f3 08 	sts	0x08F3, r25
    6670:	80 93 f2 08 	sts	0x08F2, r24
    calibration[1][7] = 46;
    6674:	50 92 03 09 	sts	0x0903, r5
    6678:	40 92 02 09 	sts	0x0902, r4
    calibration[2][7] = 65;
    667c:	81 e4       	ldi	r24, 0x41	; 65
    667e:	90 e0       	ldi	r25, 0x00	; 0
    6680:	90 93 13 09 	sts	0x0913, r25
    6684:	80 93 12 09 	sts	0x0912, r24
    calibration[3][7] = 81;
    6688:	70 92 23 09 	sts	0x0923, r7
    668c:	60 92 22 09 	sts	0x0922, r6
    calibration[4][7] = 96;
    6690:	80 e6       	ldi	r24, 0x60	; 96
    6692:	90 e0       	ldi	r25, 0x00	; 0
    6694:	90 93 33 09 	sts	0x0933, r25
    6698:	80 93 32 09 	sts	0x0932, r24
    calibration[5][7] = 111;
    669c:	8f e6       	ldi	r24, 0x6F	; 111
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	90 93 43 09 	sts	0x0943, r25
    66a4:	80 93 42 09 	sts	0x0942, r24
    calibration[6][7] = 125;
    66a8:	d0 92 53 09 	sts	0x0953, r13
    66ac:	c0 92 52 09 	sts	0x0952, r12
    calibration[7][7] = 139;
    66b0:	f0 92 63 09 	sts	0x0963, r15
    66b4:	e0 92 62 09 	sts	0x0962, r14
	calibration[8][7] = 153;
    66b8:	89 e9       	ldi	r24, 0x99	; 153
    66ba:	90 e0       	ldi	r25, 0x00	; 0
    66bc:	90 93 73 09 	sts	0x0973, r25
    66c0:	80 93 72 09 	sts	0x0972, r24

    writeCalibrationToFlash();
    66c4:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <writeCalibrationToFlash>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    }

}
    66c8:	df 91       	pop	r29
    66ca:	cf 91       	pop	r28
    66cc:	1f 91       	pop	r17
    66ce:	0f 91       	pop	r16
    66d0:	ff 90       	pop	r15
    66d2:	ef 90       	pop	r14
    66d4:	df 90       	pop	r13
    66d6:	cf 90       	pop	r12
    66d8:	bf 90       	pop	r11
    66da:	af 90       	pop	r10
    66dc:	9f 90       	pop	r9
    66de:	8f 90       	pop	r8
    66e0:	7f 90       	pop	r7
    66e2:	6f 90       	pop	r6
    66e4:	5f 90       	pop	r5
    66e6:	4f 90       	pop	r4
    66e8:	3f 90       	pop	r3
    66ea:	2f 90       	pop	r2
    66ec:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    66ee:	0e 94 d4 3e 	call	0x7da8	; 0x7da8 <readCalibrationFromFlash>
    66f2:	ea cf       	rjmp	.-44     	; 0x66c8 <initCalibration+0x346>

000066f4 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    66f4:	80 91 65 02 	lds	r24, 0x0265
    66f8:	90 91 66 02 	lds	r25, 0x0266
    66fc:	84 5a       	subi	r24, 0xA4	; 164
    66fe:	91 40       	sbci	r25, 0x01	; 1
    6700:	b4 f0       	brlt	.+44     	; 0x672e <cliffDetected+0x3a>
    6702:	80 91 67 02 	lds	r24, 0x0267
    6706:	90 91 68 02 	lds	r25, 0x0268
    670a:	84 5a       	subi	r24, 0xA4	; 164
    670c:	91 40       	sbci	r25, 0x01	; 1
    670e:	7c f0       	brlt	.+30     	; 0x672e <cliffDetected+0x3a>
    6710:	80 91 69 02 	lds	r24, 0x0269
    6714:	90 91 6a 02 	lds	r25, 0x026A
    6718:	84 5a       	subi	r24, 0xA4	; 164
    671a:	91 40       	sbci	r25, 0x01	; 1
    671c:	44 f0       	brlt	.+16     	; 0x672e <cliffDetected+0x3a>
    671e:	20 e0       	ldi	r18, 0x00	; 0
    6720:	80 91 6b 02 	lds	r24, 0x026B
    6724:	90 91 6c 02 	lds	r25, 0x026C
    6728:	84 5a       	subi	r24, 0xA4	; 164
    672a:	91 40       	sbci	r25, 0x01	; 1
    672c:	0c f4       	brge	.+2      	; 0x6730 <cliffDetected+0x3c>
    672e:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		return 0;
	}


}
    6730:	82 2f       	mov	r24, r18
    6732:	08 95       	ret

00006734 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    6734:	81 e0       	ldi	r24, 0x01	; 1
    6736:	80 93 74 04 	sts	0x0474, r24
}
    673a:	08 95       	ret

0000673c <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    673c:	10 92 74 04 	sts	0x0474, r1
}
    6740:	08 95       	ret

00006742 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    6742:	81 e0       	ldi	r24, 0x01	; 1
    6744:	80 93 75 04 	sts	0x0475, r24
}
    6748:	08 95       	ret

0000674a <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    674a:	10 92 75 04 	sts	0x0475, r1
}
    674e:	08 95       	ret

00006750 <obstacleAvoidance>:

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)

}

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    6750:	2f 92       	push	r2
    6752:	3f 92       	push	r3
    6754:	4f 92       	push	r4
    6756:	5f 92       	push	r5
    6758:	6f 92       	push	r6
    675a:	7f 92       	push	r7
    675c:	8f 92       	push	r8
    675e:	9f 92       	push	r9
    6760:	af 92       	push	r10
    6762:	bf 92       	push	r11
    6764:	cf 92       	push	r12
    6766:	df 92       	push	r13
    6768:	ef 92       	push	r14
    676a:	ff 92       	push	r15
    676c:	0f 93       	push	r16
    676e:	1f 93       	push	r17
    6770:	df 93       	push	r29
    6772:	cf 93       	push	r28
    6774:	00 d0       	rcall	.+0      	; 0x6776 <obstacleAvoidance+0x26>
    6776:	00 d0       	rcall	.+0      	; 0x6778 <obstacleAvoidance+0x28>
    6778:	cd b7       	in	r28, 0x3d	; 61
    677a:	de b7       	in	r29, 0x3e	; 62
    677c:	2c 01       	movw	r4, r24
    677e:	1b 01       	movw	r2, r22
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    6780:	fc 01       	movw	r30, r24
    6782:	01 90       	ld	r0, Z+
    6784:	f0 81       	ld	r31, Z
    6786:	e0 2d       	mov	r30, r0
    6788:	fc 83       	std	Y+4, r31	; 0x04
    678a:	eb 83       	std	Y+3, r30	; 0x03
    678c:	fb 01       	movw	r30, r22
    678e:	01 90       	ld	r0, Z+
    6790:	f0 81       	ld	r31, Z
    6792:	e0 2d       	mov	r30, r0
    6794:	fa 83       	std	Y+2, r31	; 0x02
    6796:	e9 83       	std	Y+1, r30	; 0x01

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6798:	80 91 bd 02 	lds	r24, 0x02BD
    679c:	90 91 be 02 	lds	r25, 0x02BE
    67a0:	05 97       	sbiw	r24, 0x05	; 5
    67a2:	24 f4       	brge	.+8      	; 0x67ac <obstacleAvoidance+0x5c>
			proximityResultLinear[i] = 0;
    67a4:	10 92 be 02 	sts	0x02BE, r1
    67a8:	10 92 bd 02 	sts	0x02BD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    67ac:	80 91 bf 02 	lds	r24, 0x02BF
    67b0:	90 91 c0 02 	lds	r25, 0x02C0
    67b4:	05 97       	sbiw	r24, 0x05	; 5
    67b6:	24 f4       	brge	.+8      	; 0x67c0 <obstacleAvoidance+0x70>
			proximityResultLinear[i] = 0;
    67b8:	10 92 c0 02 	sts	0x02C0, r1
    67bc:	10 92 bf 02 	sts	0x02BF, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    67c0:	80 91 c1 02 	lds	r24, 0x02C1
    67c4:	90 91 c2 02 	lds	r25, 0x02C2
    67c8:	05 97       	sbiw	r24, 0x05	; 5
    67ca:	24 f4       	brge	.+8      	; 0x67d4 <obstacleAvoidance+0x84>
			proximityResultLinear[i] = 0;
    67cc:	10 92 c2 02 	sts	0x02C2, r1
    67d0:	10 92 c1 02 	sts	0x02C1, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    67d4:	80 91 c3 02 	lds	r24, 0x02C3
    67d8:	90 91 c4 02 	lds	r25, 0x02C4
    67dc:	05 97       	sbiw	r24, 0x05	; 5
    67de:	24 f4       	brge	.+8      	; 0x67e8 <obstacleAvoidance+0x98>
			proximityResultLinear[i] = 0;
    67e0:	10 92 c4 02 	sts	0x02C4, r1
    67e4:	10 92 c3 02 	sts	0x02C3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    67e8:	80 91 c5 02 	lds	r24, 0x02C5
    67ec:	90 91 c6 02 	lds	r25, 0x02C6
    67f0:	05 97       	sbiw	r24, 0x05	; 5
    67f2:	24 f4       	brge	.+8      	; 0x67fc <obstacleAvoidance+0xac>
			proximityResultLinear[i] = 0;
    67f4:	10 92 c6 02 	sts	0x02C6, r1
    67f8:	10 92 c5 02 	sts	0x02C5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    67fc:	80 91 c7 02 	lds	r24, 0x02C7
    6800:	90 91 c8 02 	lds	r25, 0x02C8
    6804:	05 97       	sbiw	r24, 0x05	; 5
    6806:	24 f4       	brge	.+8      	; 0x6810 <obstacleAvoidance+0xc0>
			proximityResultLinear[i] = 0;
    6808:	10 92 c8 02 	sts	0x02C8, r1
    680c:	10 92 c7 02 	sts	0x02C7, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6810:	80 91 c9 02 	lds	r24, 0x02C9
    6814:	90 91 ca 02 	lds	r25, 0x02CA
    6818:	05 97       	sbiw	r24, 0x05	; 5
    681a:	24 f4       	brge	.+8      	; 0x6824 <obstacleAvoidance+0xd4>
			proximityResultLinear[i] = 0;
    681c:	10 92 ca 02 	sts	0x02CA, r1
    6820:	10 92 c9 02 	sts	0x02C9, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6824:	80 91 cb 02 	lds	r24, 0x02CB
    6828:	90 91 cc 02 	lds	r25, 0x02CC
    682c:	05 97       	sbiw	r24, 0x05	; 5
    682e:	24 f4       	brge	.+8      	; 0x6838 <obstacleAvoidance+0xe8>
			proximityResultLinear[i] = 0;
    6830:	10 92 cc 02 	sts	0x02CC, r1
    6834:	10 92 cb 02 	sts	0x02CB, r1
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    6838:	a0 90 bd 02 	lds	r10, 0x02BD
    683c:	b0 90 be 02 	lds	r11, 0x02BE
    6840:	b0 94       	com	r11
    6842:	a1 94       	neg	r10
    6844:	b1 08       	sbc	r11, r1
    6846:	b3 94       	inc	r11
    6848:	80 90 bf 02 	lds	r8, 0x02BF
    684c:	90 90 c0 02 	lds	r9, 0x02C0
    6850:	95 94       	asr	r9
    6852:	87 94       	ror	r8
    6854:	c0 90 c3 02 	lds	r12, 0x02C3
    6858:	d0 90 c4 02 	lds	r13, 0x02C4
    685c:	d5 94       	asr	r13
    685e:	c7 94       	ror	r12
    6860:	20 91 c5 02 	lds	r18, 0x02C5
    6864:	30 91 c6 02 	lds	r19, 0x02C6
    6868:	3e 83       	std	Y+6, r19	; 0x06
    686a:	2d 83       	std	Y+5, r18	; 0x05
    686c:	00 91 c7 02 	lds	r16, 0x02C7
    6870:	10 91 c8 02 	lds	r17, 0x02C8
    6874:	15 95       	asr	r17
    6876:	07 95       	ror	r16
    6878:	e0 90 cb 02 	lds	r14, 0x02CB
    687c:	f0 90 cc 02 	lds	r15, 0x02CC
    6880:	f5 94       	asr	r15
    6882:	e7 94       	ror	r14
    6884:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <rand>
    6888:	ed 81       	ldd	r30, Y+5	; 0x05
    688a:	fe 81       	ldd	r31, Y+6	; 0x06
    688c:	7e 97       	sbiw	r30, 0x1e	; 30
    688e:	ea 0d       	add	r30, r10
    6890:	fb 1d       	adc	r31, r11
    6892:	ec 0d       	add	r30, r12
    6894:	fd 1d       	adc	r31, r13
    6896:	e0 0f       	add	r30, r16
    6898:	f1 1f       	adc	r31, r17
    689a:	e8 19       	sub	r30, r8
    689c:	f9 09       	sbc	r31, r9
    689e:	ee 19       	sub	r30, r14
    68a0:	ff 09       	sbc	r31, r15
    68a2:	6c e3       	ldi	r22, 0x3C	; 60
    68a4:	70 e0       	ldi	r23, 0x00	; 0
    68a6:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__divmodhi4>
    68aa:	e8 0f       	add	r30, r24
    68ac:	f9 1f       	adc	r31, r25
    68ae:	fe 83       	std	Y+6, r31	; 0x06
    68b0:	ed 83       	std	Y+5, r30	; 0x05
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    68b2:	60 90 bf 02 	lds	r6, 0x02BF
    68b6:	70 90 c0 02 	lds	r7, 0x02C0
    68ba:	75 94       	asr	r7
    68bc:	67 94       	ror	r6
    68be:	c0 90 c1 02 	lds	r12, 0x02C1
    68c2:	d0 90 c2 02 	lds	r13, 0x02C2
    68c6:	d5 94       	asr	r13
    68c8:	c7 94       	ror	r12
    68ca:	d5 94       	asr	r13
    68cc:	c7 94       	ror	r12
    68ce:	a0 90 c3 02 	lds	r10, 0x02C3
    68d2:	b0 90 c4 02 	lds	r11, 0x02C4
    68d6:	b5 94       	asr	r11
    68d8:	a7 94       	ror	r10
    68da:	80 90 c7 02 	lds	r8, 0x02C7
    68de:	90 90 c8 02 	lds	r9, 0x02C8
    68e2:	95 94       	asr	r9
    68e4:	87 94       	ror	r8
    68e6:	00 91 c9 02 	lds	r16, 0x02C9
    68ea:	10 91 ca 02 	lds	r17, 0x02CA
    68ee:	15 95       	asr	r17
    68f0:	07 95       	ror	r16
    68f2:	15 95       	asr	r17
    68f4:	07 95       	ror	r16
    68f6:	e0 90 cb 02 	lds	r14, 0x02CB
    68fa:	f0 90 cc 02 	lds	r15, 0x02CC
    68fe:	f5 94       	asr	r15
    6900:	e7 94       	ror	r14
    6902:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <rand>
    6906:	93 01       	movw	r18, r6
    6908:	2c 0d       	add	r18, r12
    690a:	3d 1d       	adc	r19, r13
    690c:	2e 51       	subi	r18, 0x1E	; 30
    690e:	30 40       	sbci	r19, 0x00	; 0
    6910:	2a 0d       	add	r18, r10
    6912:	3b 1d       	adc	r19, r11
    6914:	20 1b       	sub	r18, r16
    6916:	31 0b       	sbc	r19, r17
    6918:	28 19       	sub	r18, r8
    691a:	39 09       	sbc	r19, r9
    691c:	2e 19       	sub	r18, r14
    691e:	3f 09       	sbc	r19, r15
    6920:	6c e3       	ldi	r22, 0x3C	; 60
    6922:	70 e0       	ldi	r23, 0x00	; 0
    6924:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__divmodhi4>
    6928:	28 0f       	add	r18, r24
    692a:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    692c:	8b 81       	ldd	r24, Y+3	; 0x03
    692e:	9c 81       	ldd	r25, Y+4	; 0x04
    6930:	97 fd       	sbrc	r25, 7
    6932:	db c0       	rjmp	.+438    	; 0x6aea <obstacleAvoidance+0x39a>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    6934:	7c 01       	movw	r14, r24
    6936:	00 27       	eor	r16, r16
    6938:	f7 fc       	sbrc	r15, 7
    693a:	00 95       	com	r16
    693c:	10 2f       	mov	r17, r16
    693e:	ed 81       	ldd	r30, Y+5	; 0x05
    6940:	fe 81       	ldd	r31, Y+6	; 0x06
    6942:	3f 01       	movw	r6, r30
    6944:	88 24       	eor	r8, r8
    6946:	77 fc       	sbrc	r7, 7
    6948:	80 94       	com	r8
    694a:	98 2c       	mov	r9, r8
    694c:	59 01       	movw	r10, r18
    694e:	cc 24       	eor	r12, r12
    6950:	b7 fc       	sbrc	r11, 7
    6952:	c0 94       	com	r12
    6954:	dc 2c       	mov	r13, r12
		*pwmLeft = (signed int)res;
    6956:	c4 01       	movw	r24, r8
    6958:	b3 01       	movw	r22, r6
    695a:	6a 19       	sub	r22, r10
    695c:	7b 09       	sbc	r23, r11
    695e:	8c 09       	sbc	r24, r12
    6960:	9d 09       	sbc	r25, r13
    6962:	a8 01       	movw	r20, r16
    6964:	97 01       	movw	r18, r14
    6966:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__mulsi3>
    696a:	56 e0       	ldi	r21, 0x06	; 6
    696c:	95 95       	asr	r25
    696e:	87 95       	ror	r24
    6970:	77 95       	ror	r23
    6972:	67 95       	ror	r22
    6974:	5a 95       	dec	r21
    6976:	d1 f7       	brne	.-12     	; 0x696c <obstacleAvoidance+0x21c>
    6978:	e6 0e       	add	r14, r22
    697a:	f7 1e       	adc	r15, r23
    697c:	08 1f       	adc	r16, r24
    697e:	19 1f       	adc	r17, r25
    6980:	f2 01       	movw	r30, r4
    6982:	f1 82       	std	Z+1, r15	; 0x01
    6984:	e0 82       	st	Z, r14
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    6986:	29 81       	ldd	r18, Y+1	; 0x01
    6988:	3a 81       	ldd	r19, Y+2	; 0x02
    698a:	37 fd       	sbrc	r19, 7
    698c:	8f c0       	rjmp	.+286    	; 0x6aac <obstacleAvoidance+0x35c>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    698e:	79 01       	movw	r14, r18
    6990:	00 27       	eor	r16, r16
    6992:	f7 fc       	sbrc	r15, 7
    6994:	00 95       	com	r16
    6996:	10 2f       	mov	r17, r16
		*pwmRight = (signed int)res;
    6998:	a6 0c       	add	r10, r6
    699a:	b7 1c       	adc	r11, r7
    699c:	c8 1c       	adc	r12, r8
    699e:	d9 1c       	adc	r13, r9
    69a0:	c6 01       	movw	r24, r12
    69a2:	b5 01       	movw	r22, r10
    69a4:	a8 01       	movw	r20, r16
    69a6:	97 01       	movw	r18, r14
    69a8:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__mulsi3>
    69ac:	36 e0       	ldi	r19, 0x06	; 6
    69ae:	95 95       	asr	r25
    69b0:	87 95       	ror	r24
    69b2:	77 95       	ror	r23
    69b4:	67 95       	ror	r22
    69b6:	3a 95       	dec	r19
    69b8:	d1 f7       	brne	.-12     	; 0x69ae <obstacleAvoidance+0x25e>
    69ba:	6e 0d       	add	r22, r14
    69bc:	7f 1d       	adc	r23, r15
    69be:	80 1f       	adc	r24, r16
    69c0:	91 1f       	adc	r25, r17
    69c2:	ab 01       	movw	r20, r22
    69c4:	f1 01       	movw	r30, r2
    69c6:	71 83       	std	Z+1, r23	; 0x01
    69c8:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    69ca:	80 91 50 04 	lds	r24, 0x0450
    69ce:	8a 30       	cpi	r24, 0x0A	; 10
    69d0:	09 f4       	brne	.+2      	; 0x69d4 <obstacleAvoidance+0x284>
    69d2:	48 c0       	rjmp	.+144    	; 0x6a64 <obstacleAvoidance+0x314>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    69d4:	f2 e0       	ldi	r31, 0x02	; 2
    69d6:	40 30       	cpi	r20, 0x00	; 0
    69d8:	5f 07       	cpc	r21, r31
    69da:	3c f0       	brlt	.+14     	; 0x69ea <obstacleAvoidance+0x29a>
    69dc:	8f ef       	ldi	r24, 0xFF	; 255
    69de:	91 e0       	ldi	r25, 0x01	; 1
    69e0:	f1 01       	movw	r30, r2
    69e2:	91 83       	std	Z+1, r25	; 0x01
    69e4:	80 83       	st	Z, r24
    69e6:	4f ef       	ldi	r20, 0xFF	; 255
    69e8:	51 e0       	ldi	r21, 0x01	; 1
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    69ea:	f2 01       	movw	r30, r4
    69ec:	20 81       	ld	r18, Z
    69ee:	31 81       	ldd	r19, Z+1	; 0x01
    69f0:	f2 e0       	ldi	r31, 0x02	; 2
    69f2:	20 30       	cpi	r18, 0x00	; 0
    69f4:	3f 07       	cpc	r19, r31
    69f6:	54 f0       	brlt	.+20     	; 0x6a0c <obstacleAvoidance+0x2bc>
    69f8:	8f ef       	ldi	r24, 0xFF	; 255
    69fa:	91 e0       	ldi	r25, 0x01	; 1
    69fc:	f2 01       	movw	r30, r4
    69fe:	91 83       	std	Z+1, r25	; 0x01
    6a00:	80 83       	st	Z, r24
    6a02:	f1 01       	movw	r30, r2
    6a04:	40 81       	ld	r20, Z
    6a06:	51 81       	ldd	r21, Z+1	; 0x01
    6a08:	2f ef       	ldi	r18, 0xFF	; 255
    6a0a:	31 e0       	ldi	r19, 0x01	; 1
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    6a0c:	41 50       	subi	r20, 0x01	; 1
    6a0e:	5e 4f       	sbci	r21, 0xFE	; 254
    6a10:	44 f4       	brge	.+16     	; 0x6a22 <obstacleAvoidance+0x2d2>
    6a12:	81 e0       	ldi	r24, 0x01	; 1
    6a14:	9e ef       	ldi	r25, 0xFE	; 254
    6a16:	f1 01       	movw	r30, r2
    6a18:	91 83       	std	Z+1, r25	; 0x01
    6a1a:	80 83       	st	Z, r24
    6a1c:	f2 01       	movw	r30, r4
    6a1e:	20 81       	ld	r18, Z
    6a20:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    6a22:	21 50       	subi	r18, 0x01	; 1
    6a24:	3e 4f       	sbci	r19, 0xFE	; 254
    6a26:	2c f4       	brge	.+10     	; 0x6a32 <obstacleAvoidance+0x2e2>
    6a28:	81 e0       	ldi	r24, 0x01	; 1
    6a2a:	9e ef       	ldi	r25, 0xFE	; 254
    6a2c:	f2 01       	movw	r30, r4
    6a2e:	91 83       	std	Z+1, r25	; 0x01
    6a30:	80 83       	st	Z, r24

}
    6a32:	26 96       	adiw	r28, 0x06	; 6
    6a34:	0f b6       	in	r0, 0x3f	; 63
    6a36:	f8 94       	cli
    6a38:	de bf       	out	0x3e, r29	; 62
    6a3a:	0f be       	out	0x3f, r0	; 63
    6a3c:	cd bf       	out	0x3d, r28	; 61
    6a3e:	cf 91       	pop	r28
    6a40:	df 91       	pop	r29
    6a42:	1f 91       	pop	r17
    6a44:	0f 91       	pop	r16
    6a46:	ff 90       	pop	r15
    6a48:	ef 90       	pop	r14
    6a4a:	df 90       	pop	r13
    6a4c:	cf 90       	pop	r12
    6a4e:	bf 90       	pop	r11
    6a50:	af 90       	pop	r10
    6a52:	9f 90       	pop	r9
    6a54:	8f 90       	pop	r8
    6a56:	7f 90       	pop	r7
    6a58:	6f 90       	pop	r6
    6a5a:	5f 90       	pop	r5
    6a5c:	4f 90       	pop	r4
    6a5e:	3f 90       	pop	r3
    6a60:	2f 90       	pop	r2
    6a62:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    6a64:	2b 81       	ldd	r18, Y+3	; 0x03
    6a66:	3c 81       	ldd	r19, Y+4	; 0x04
    6a68:	23 2b       	or	r18, r19
    6a6a:	e1 f0       	breq	.+56     	; 0x6aa4 <obstacleAvoidance+0x354>
    6a6c:	29 81       	ldd	r18, Y+1	; 0x01
    6a6e:	3a 81       	ldd	r19, Y+2	; 0x02
    6a70:	23 2b       	or	r18, r19
    6a72:	c1 f0       	breq	.+48     	; 0x6aa4 <obstacleAvoidance+0x354>
			if(currentAngle<270 && currentAngle>90) {
    6a74:	80 91 42 04 	lds	r24, 0x0442
    6a78:	90 91 43 04 	lds	r25, 0x0443
    6a7c:	8b 55       	subi	r24, 0x5B	; 91
    6a7e:	90 40       	sbci	r25, 0x00	; 0
    6a80:	83 3b       	cpi	r24, 0xB3	; 179
    6a82:	91 05       	cpc	r25, r1
    6a84:	08 f0       	brcs	.+2      	; 0x6a88 <obstacleAvoidance+0x338>
    6a86:	5b c0       	rjmp	.+182    	; 0x6b3e <obstacleAvoidance+0x3ee>
				*pwmLeft += 10;
    6a88:	f2 01       	movw	r30, r4
    6a8a:	80 81       	ld	r24, Z
    6a8c:	91 81       	ldd	r25, Z+1	; 0x01
    6a8e:	0a 96       	adiw	r24, 0x0a	; 10
    6a90:	91 83       	std	Z+1, r25	; 0x01
    6a92:	80 83       	st	Z, r24
				*pwmRight -= 10;
    6a94:	f1 01       	movw	r30, r2
    6a96:	40 81       	ld	r20, Z
    6a98:	51 81       	ldd	r21, Z+1	; 0x01
    6a9a:	4a 50       	subi	r20, 0x0A	; 10
    6a9c:	50 40       	sbci	r21, 0x00	; 0
    6a9e:	51 83       	std	Z+1, r21	; 0x01
    6aa0:	40 83       	st	Z, r20
    6aa2:	98 cf       	rjmp	.-208    	; 0x69d4 <obstacleAvoidance+0x284>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    6aa4:	f1 01       	movw	r30, r2
    6aa6:	40 81       	ld	r20, Z
    6aa8:	51 81       	ldd	r21, Z+1	; 0x01
    6aaa:	94 cf       	rjmp	.-216    	; 0x69d4 <obstacleAvoidance+0x284>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    6aac:	79 01       	movw	r14, r18
    6aae:	00 27       	eor	r16, r16
    6ab0:	f7 fc       	sbrc	r15, 7
    6ab2:	00 95       	com	r16
    6ab4:	10 2f       	mov	r17, r16
		*pwmRight = (signed int)res;
    6ab6:	6a 18       	sub	r6, r10
    6ab8:	7b 08       	sbc	r7, r11
    6aba:	8c 08       	sbc	r8, r12
    6abc:	9d 08       	sbc	r9, r13
    6abe:	c4 01       	movw	r24, r8
    6ac0:	b3 01       	movw	r22, r6
    6ac2:	a8 01       	movw	r20, r16
    6ac4:	97 01       	movw	r18, r14
    6ac6:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__mulsi3>
    6aca:	26 e0       	ldi	r18, 0x06	; 6
    6acc:	95 95       	asr	r25
    6ace:	87 95       	ror	r24
    6ad0:	77 95       	ror	r23
    6ad2:	67 95       	ror	r22
    6ad4:	2a 95       	dec	r18
    6ad6:	d1 f7       	brne	.-12     	; 0x6acc <obstacleAvoidance+0x37c>
    6ad8:	e6 1a       	sub	r14, r22
    6ada:	f7 0a       	sbc	r15, r23
    6adc:	08 0b       	sbc	r16, r24
    6ade:	19 0b       	sbc	r17, r25
    6ae0:	a7 01       	movw	r20, r14
    6ae2:	f1 01       	movw	r30, r2
    6ae4:	f1 82       	std	Z+1, r15	; 0x01
    6ae6:	e0 82       	st	Z, r14
    6ae8:	70 cf       	rjmp	.-288    	; 0x69ca <obstacleAvoidance+0x27a>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    6aea:	7c 01       	movw	r14, r24
    6aec:	00 27       	eor	r16, r16
    6aee:	f7 fc       	sbrc	r15, 7
    6af0:	00 95       	com	r16
    6af2:	10 2f       	mov	r17, r16
    6af4:	ed 81       	ldd	r30, Y+5	; 0x05
    6af6:	fe 81       	ldd	r31, Y+6	; 0x06
    6af8:	3f 01       	movw	r6, r30
    6afa:	88 24       	eor	r8, r8
    6afc:	77 fc       	sbrc	r7, 7
    6afe:	80 94       	com	r8
    6b00:	98 2c       	mov	r9, r8
    6b02:	59 01       	movw	r10, r18
    6b04:	cc 24       	eor	r12, r12
    6b06:	b7 fc       	sbrc	r11, 7
    6b08:	c0 94       	com	r12
    6b0a:	dc 2c       	mov	r13, r12
		*pwmLeft = (signed int)res;
    6b0c:	c6 01       	movw	r24, r12
    6b0e:	b5 01       	movw	r22, r10
    6b10:	66 0d       	add	r22, r6
    6b12:	77 1d       	adc	r23, r7
    6b14:	88 1d       	adc	r24, r8
    6b16:	99 1d       	adc	r25, r9
    6b18:	a8 01       	movw	r20, r16
    6b1a:	97 01       	movw	r18, r14
    6b1c:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__mulsi3>
    6b20:	46 e0       	ldi	r20, 0x06	; 6
    6b22:	95 95       	asr	r25
    6b24:	87 95       	ror	r24
    6b26:	77 95       	ror	r23
    6b28:	67 95       	ror	r22
    6b2a:	4a 95       	dec	r20
    6b2c:	d1 f7       	brne	.-12     	; 0x6b22 <obstacleAvoidance+0x3d2>
    6b2e:	e6 1a       	sub	r14, r22
    6b30:	f7 0a       	sbc	r15, r23
    6b32:	08 0b       	sbc	r16, r24
    6b34:	19 0b       	sbc	r17, r25
    6b36:	f2 01       	movw	r30, r4
    6b38:	f1 82       	std	Z+1, r15	; 0x01
    6b3a:	e0 82       	st	Z, r14
    6b3c:	24 cf       	rjmp	.-440    	; 0x6986 <obstacleAvoidance+0x236>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    6b3e:	f2 01       	movw	r30, r4
    6b40:	80 81       	ld	r24, Z
    6b42:	91 81       	ldd	r25, Z+1	; 0x01
    6b44:	0a 97       	sbiw	r24, 0x0a	; 10
    6b46:	91 83       	std	Z+1, r25	; 0x01
    6b48:	80 83       	st	Z, r24
				*pwmRight += 10;
    6b4a:	f1 01       	movw	r30, r2
    6b4c:	40 81       	ld	r20, Z
    6b4e:	51 81       	ldd	r21, Z+1	; 0x01
    6b50:	46 5f       	subi	r20, 0xF6	; 246
    6b52:	5f 4f       	sbci	r21, 0xFF	; 255
    6b54:	51 83       	std	Z+1, r21	; 0x01
    6b56:	40 83       	st	Z, r20
    6b58:	3d cf       	rjmp	.-390    	; 0x69d4 <obstacleAvoidance+0x284>

00006b5a <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    6b5a:	80 91 94 00 	lds	r24, 0x0094
    6b5e:	90 91 95 00 	lds	r25, 0x0095
    6b62:	0e 94 52 4f 	call	0x9ea4	; 0x9ea4 <srand>

}
    6b66:	08 95       	ret

00006b68 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    6b68:	e0 e8       	ldi	r30, 0x80	; 128
    6b6a:	f0 e0       	ldi	r31, 0x00	; 0
    6b6c:	10 82       	st	Z, r1
	TCCR1B = 0;
    6b6e:	a1 e8       	ldi	r26, 0x81	; 129
    6b70:	b0 e0       	ldi	r27, 0x00	; 0
    6b72:	1c 92       	st	X, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    6b74:	80 81       	ld	r24, Z
    6b76:	89 6a       	ori	r24, 0xA9	; 169
    6b78:	80 83       	st	Z, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    6b7a:	8c 91       	ld	r24, X
    6b7c:	89 60       	ori	r24, 0x09	; 9
    6b7e:	8c 93       	st	X, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    6b80:	80 91 08 02 	lds	r24, 0x0208
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	90 93 89 00 	sts	0x0089, r25
    6b8a:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    6b8e:	80 91 09 02 	lds	r24, 0x0209
    6b92:	90 e0       	ldi	r25, 0x00	; 0
    6b94:	90 93 8b 00 	sts	0x008B, r25
    6b98:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    6b9c:	80 91 0a 02 	lds	r24, 0x020A
    6ba0:	90 e0       	ldi	r25, 0x00	; 0
    6ba2:	90 93 8d 00 	sts	0x008D, r25
    6ba6:	80 93 8c 00 	sts	0x008C, r24

}
    6baa:	08 95       	ret

00006bac <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    6bac:	81 e0       	ldi	r24, 0x01	; 1
    6bae:	90 91 17 03 	lds	r25, 0x0317
    6bb2:	89 1b       	sub	r24, r25
    6bb4:	80 93 17 03 	sts	0x0317, r24

	if(blinkState) {
    6bb8:	88 23       	and	r24, r24
    6bba:	39 f4       	brne	.+14     	; 0x6bca <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    6bbc:	80 91 80 00 	lds	r24, 0x0080
    6bc0:	87 7f       	andi	r24, 0xF7	; 247
    6bc2:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    6bc6:	2f 98       	cbi	0x05, 7	; 5
    6bc8:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    6bca:	80 91 80 00 	lds	r24, 0x0080
    6bce:	88 60       	ori	r24, 0x08	; 8
    6bd0:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    6bd4:	8f ef       	ldi	r24, 0xFF	; 255
    6bd6:	90 e0       	ldi	r25, 0x00	; 0
    6bd8:	90 93 8d 00 	sts	0x008D, r25
    6bdc:	80 93 8c 00 	sts	0x008C, r24
    6be0:	08 95       	ret

00006be2 <updateRedLed>:
									// the pin is configured accordingly (low state).
	}

}

void updateRedLed(unsigned char value) {
    6be2:	98 2f       	mov	r25, r24

	if(value == 0) {
    6be4:	88 23       	and	r24, r24
    6be6:	61 f0       	breq	.+24     	; 0x6c00 <updateRedLed+0x1e>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    6be8:	80 91 80 00 	lds	r24, 0x0080
    6bec:	80 68       	ori	r24, 0x80	; 128
    6bee:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    6bf2:	89 2f       	mov	r24, r25
    6bf4:	90 e0       	ldi	r25, 0x00	; 0
    6bf6:	90 93 89 00 	sts	0x0089, r25
    6bfa:	80 93 88 00 	sts	0x0088, r24
    6bfe:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    6c00:	80 91 80 00 	lds	r24, 0x0080
    6c04:	8f 77       	andi	r24, 0x7F	; 127
    6c06:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    6c0a:	2d 98       	cbi	0x05, 5	; 5
    6c0c:	08 95       	ret

00006c0e <updateGreenLed>:
		OCR1A = value;
	}

}

void updateGreenLed(unsigned char value) {
    6c0e:	98 2f       	mov	r25, r24

	if(value == 0) {
    6c10:	88 23       	and	r24, r24
    6c12:	61 f0       	breq	.+24     	; 0x6c2c <updateGreenLed+0x1e>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    6c14:	80 91 80 00 	lds	r24, 0x0080
    6c18:	80 62       	ori	r24, 0x20	; 32
    6c1a:	80 93 80 00 	sts	0x0080, r24
		OCR1B = value;
    6c1e:	89 2f       	mov	r24, r25
    6c20:	90 e0       	ldi	r25, 0x00	; 0
    6c22:	90 93 8b 00 	sts	0x008B, r25
    6c26:	80 93 8a 00 	sts	0x008A, r24
    6c2a:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    6c2c:	80 91 80 00 	lds	r24, 0x0080
    6c30:	8f 7d       	andi	r24, 0xDF	; 223
    6c32:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    6c36:	2e 98       	cbi	0x05, 6	; 5
    6c38:	08 95       	ret

00006c3a <updateBlueLed>:
		OCR1B = value;
	}

}

void updateBlueLed(unsigned char value) {
    6c3a:	98 2f       	mov	r25, r24

	if(value == 0) {
    6c3c:	88 23       	and	r24, r24
    6c3e:	61 f0       	breq	.+24     	; 0x6c58 <updateBlueLed+0x1e>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    6c40:	80 91 80 00 	lds	r24, 0x0080
    6c44:	88 60       	ori	r24, 0x08	; 8
    6c46:	80 93 80 00 	sts	0x0080, r24
		OCR1C = value;
    6c4a:	89 2f       	mov	r24, r25
    6c4c:	90 e0       	ldi	r25, 0x00	; 0
    6c4e:	90 93 8d 00 	sts	0x008D, r25
    6c52:	80 93 8c 00 	sts	0x008C, r24
    6c56:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    6c58:	80 91 80 00 	lds	r24, 0x0080
    6c5c:	87 7f       	andi	r24, 0xF7	; 247
    6c5e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    6c62:	2f 98       	cbi	0x05, 7	; 5
    6c64:	08 95       	ret

00006c66 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6c66:	83 30       	cpi	r24, 0x03	; 3
    6c68:	09 f4       	brne	.+2      	; 0x6c6c <setGreenLed+0x6>
    6c6a:	5a c0       	rjmp	.+180    	; 0x6d20 <setGreenLed+0xba>
    6c6c:	84 30       	cpi	r24, 0x04	; 4
    6c6e:	80 f0       	brcs	.+32     	; 0x6c90 <setGreenLed+0x2a>
    6c70:	85 30       	cpi	r24, 0x05	; 5
    6c72:	09 f4       	brne	.+2      	; 0x6c76 <setGreenLed+0x10>
    6c74:	41 c0       	rjmp	.+130    	; 0x6cf8 <setGreenLed+0x92>
    6c76:	85 30       	cpi	r24, 0x05	; 5
    6c78:	d0 f4       	brcc	.+52     	; 0x6cae <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6c7a:	66 23       	and	r22, r22
    6c7c:	09 f4       	brne	.+2      	; 0x6c80 <setGreenLed+0x1a>
    6c7e:	68 c0       	rjmp	.+208    	; 0x6d50 <setGreenLed+0xea>
    6c80:	80 91 0b 01 	lds	r24, 0x010B
    6c84:	8f 7e       	andi	r24, 0xEF	; 239
    6c86:	80 93 0b 01 	sts	0x010B, r24
    6c8a:	80 91 0b 01 	lds	r24, 0x010B
    6c8e:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6c90:	81 30       	cpi	r24, 0x01	; 1
    6c92:	e1 f1       	breq	.+120    	; 0x6d0c <setGreenLed+0xa6>
    6c94:	82 30       	cpi	r24, 0x02	; 2
    6c96:	80 f0       	brcs	.+32     	; 0x6cb8 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6c98:	66 23       	and	r22, r22
    6c9a:	09 f4       	brne	.+2      	; 0x6c9e <setGreenLed+0x38>
    6c9c:	46 c0       	rjmp	.+140    	; 0x6d2a <setGreenLed+0xc4>
    6c9e:	80 91 0b 01 	lds	r24, 0x010B
    6ca2:	8b 7f       	andi	r24, 0xFB	; 251
    6ca4:	80 93 0b 01 	sts	0x010B, r24
    6ca8:	80 91 0b 01 	lds	r24, 0x010B
    6cac:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6cae:	86 30       	cpi	r24, 0x06	; 6
    6cb0:	c9 f0       	breq	.+50     	; 0x6ce4 <setGreenLed+0x7e>
    6cb2:	87 30       	cpi	r24, 0x07	; 7
    6cb4:	61 f0       	breq	.+24     	; 0x6cce <setGreenLed+0x68>
    6cb6:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6cb8:	66 23       	and	r22, r22
    6cba:	09 f4       	brne	.+2      	; 0x6cbe <setGreenLed+0x58>
    6cbc:	51 c0       	rjmp	.+162    	; 0x6d60 <setGreenLed+0xfa>
    6cbe:	80 91 0b 01 	lds	r24, 0x010B
    6cc2:	8e 7f       	andi	r24, 0xFE	; 254
    6cc4:	80 93 0b 01 	sts	0x010B, r24
    6cc8:	80 91 0b 01 	lds	r24, 0x010B
    6ccc:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6cce:	66 23       	and	r22, r22
    6cd0:	09 f0       	breq	.+2      	; 0x6cd4 <setGreenLed+0x6e>
    6cd2:	5e c0       	rjmp	.+188    	; 0x6d90 <setGreenLed+0x12a>
    6cd4:	80 91 0b 01 	lds	r24, 0x010B
    6cd8:	80 68       	ori	r24, 0x80	; 128
    6cda:	80 93 0b 01 	sts	0x010B, r24
    6cde:	80 91 0b 01 	lds	r24, 0x010B
    6ce2:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6ce4:	66 23       	and	r22, r22
    6ce6:	49 f1       	breq	.+82     	; 0x6d3a <setGreenLed+0xd4>
    6ce8:	80 91 0b 01 	lds	r24, 0x010B
    6cec:	8f 7b       	andi	r24, 0xBF	; 191
    6cee:	80 93 0b 01 	sts	0x010B, r24
    6cf2:	80 91 0b 01 	lds	r24, 0x010B
    6cf6:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6cf8:	66 23       	and	r22, r22
    6cfa:	d1 f1       	breq	.+116    	; 0x6d70 <setGreenLed+0x10a>
    6cfc:	80 91 0b 01 	lds	r24, 0x010B
    6d00:	8f 7d       	andi	r24, 0xDF	; 223
    6d02:	80 93 0b 01 	sts	0x010B, r24
    6d06:	80 91 0b 01 	lds	r24, 0x010B
    6d0a:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6d0c:	66 23       	and	r22, r22
    6d0e:	c1 f1       	breq	.+112    	; 0x6d80 <setGreenLed+0x11a>
    6d10:	80 91 0b 01 	lds	r24, 0x010B
    6d14:	8d 7f       	andi	r24, 0xFD	; 253
    6d16:	80 93 0b 01 	sts	0x010B, r24
    6d1a:	80 91 0b 01 	lds	r24, 0x010B
    6d1e:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6d20:	66 23       	and	r22, r22
    6d22:	99 f0       	breq	.+38     	; 0x6d4a <setGreenLed+0xe4>
    6d24:	a3 98       	cbi	0x14, 3	; 20
    6d26:	84 b3       	in	r24, 0x14	; 20
    6d28:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6d2a:	80 91 0b 01 	lds	r24, 0x010B
    6d2e:	84 60       	ori	r24, 0x04	; 4
    6d30:	80 93 0b 01 	sts	0x010B, r24
    6d34:	80 91 0b 01 	lds	r24, 0x010B
    6d38:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6d3a:	80 91 0b 01 	lds	r24, 0x010B
    6d3e:	80 64       	ori	r24, 0x40	; 64
    6d40:	80 93 0b 01 	sts	0x010B, r24
    6d44:	80 91 0b 01 	lds	r24, 0x010B
    6d48:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6d4a:	a3 9a       	sbi	0x14, 3	; 20
    6d4c:	84 b3       	in	r24, 0x14	; 20
    6d4e:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6d50:	80 91 0b 01 	lds	r24, 0x010B
    6d54:	80 61       	ori	r24, 0x10	; 16
    6d56:	80 93 0b 01 	sts	0x010B, r24
    6d5a:	80 91 0b 01 	lds	r24, 0x010B
    6d5e:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6d60:	80 91 0b 01 	lds	r24, 0x010B
    6d64:	81 60       	ori	r24, 0x01	; 1
    6d66:	80 93 0b 01 	sts	0x010B, r24
    6d6a:	80 91 0b 01 	lds	r24, 0x010B
    6d6e:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6d70:	80 91 0b 01 	lds	r24, 0x010B
    6d74:	80 62       	ori	r24, 0x20	; 32
    6d76:	80 93 0b 01 	sts	0x010B, r24
    6d7a:	80 91 0b 01 	lds	r24, 0x010B
    6d7e:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6d80:	80 91 0b 01 	lds	r24, 0x010B
    6d84:	82 60       	ori	r24, 0x02	; 2
    6d86:	80 93 0b 01 	sts	0x010B, r24
    6d8a:	80 91 0b 01 	lds	r24, 0x010B
    6d8e:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6d90:	80 91 0b 01 	lds	r24, 0x010B
    6d94:	8f 77       	andi	r24, 0x7F	; 127
    6d96:	80 93 0b 01 	sts	0x010B, r24
    6d9a:	80 91 0b 01 	lds	r24, 0x010B
    6d9e:	08 95       	ret

00006da0 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    6da0:	eb e0       	ldi	r30, 0x0B	; 11
    6da2:	f1 e0       	ldi	r31, 0x01	; 1
    6da4:	80 81       	ld	r24, Z
    6da6:	81 60       	ori	r24, 0x01	; 1
    6da8:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    6daa:	80 81       	ld	r24, Z
    6dac:	82 60       	ori	r24, 0x02	; 2
    6dae:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    6db0:	80 81       	ld	r24, Z
    6db2:	84 60       	ori	r24, 0x04	; 4
    6db4:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    6db6:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    6db8:	80 81       	ld	r24, Z
    6dba:	80 61       	ori	r24, 0x10	; 16
    6dbc:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    6dbe:	80 81       	ld	r24, Z
    6dc0:	80 62       	ori	r24, 0x20	; 32
    6dc2:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    6dc4:	80 81       	ld	r24, Z
    6dc6:	80 64       	ori	r24, 0x40	; 64
    6dc8:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    6dca:	80 81       	ld	r24, Z
    6dcc:	80 68       	ori	r24, 0x80	; 128
    6dce:	80 83       	st	Z, r24

}
    6dd0:	08 95       	ret

00006dd2 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    6dd2:	eb e0       	ldi	r30, 0x0B	; 11
    6dd4:	f1 e0       	ldi	r31, 0x01	; 1
    6dd6:	80 81       	ld	r24, Z
    6dd8:	8e 7f       	andi	r24, 0xFE	; 254
    6dda:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    6ddc:	80 81       	ld	r24, Z
    6dde:	8d 7f       	andi	r24, 0xFD	; 253
    6de0:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    6de2:	80 81       	ld	r24, Z
    6de4:	8b 7f       	andi	r24, 0xFB	; 251
    6de6:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    6de8:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    6dea:	80 81       	ld	r24, Z
    6dec:	8f 7e       	andi	r24, 0xEF	; 239
    6dee:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    6df0:	80 81       	ld	r24, Z
    6df2:	8f 7d       	andi	r24, 0xDF	; 223
    6df4:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    6df6:	80 81       	ld	r24, Z
    6df8:	8f 7b       	andi	r24, 0xBF	; 191
    6dfa:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    6dfc:	80 81       	ld	r24, Z
    6dfe:	8f 77       	andi	r24, 0x7F	; 127
    6e00:	80 83       	st	Z, r24

}
    6e02:	08 95       	ret

00006e04 <computeAngle>:

	}

}

void computeAngle() {
    6e04:	ef 92       	push	r14
    6e06:	ff 92       	push	r15
    6e08:	0f 93       	push	r16
    6e0a:	1f 93       	push	r17

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    6e0c:	80 91 30 04 	lds	r24, 0x0430
    6e10:	90 91 31 04 	lds	r25, 0x0431
    6e14:	97 fd       	sbrc	r25, 7
    6e16:	6c c0       	rjmp	.+216    	; 0x6ef0 <computeAngle+0xec>
    6e18:	8d 97       	sbiw	r24, 0x2d	; 45
    6e1a:	0c f4       	brge	.+2      	; 0x6e1e <computeAngle+0x1a>
    6e1c:	54 c0       	rjmp	.+168    	; 0x6ec6 <computeAngle+0xc2>
		currPosition = HORIZONTAL_POS;
    6e1e:	81 e0       	ldi	r24, 0x01	; 1
    6e20:	80 93 11 02 	sts	0x0211, r24
    6e24:	28 2f       	mov	r18, r24
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    6e26:	80 91 12 02 	lds	r24, 0x0212
    6e2a:	28 17       	cp	r18, r24
    6e2c:	09 f4       	brne	.+2      	; 0x6e30 <computeAngle+0x2c>
    6e2e:	54 c0       	rjmp	.+168    	; 0x6ed8 <computeAngle+0xd4>
		timesInSamePos++;
    6e30:	80 91 44 04 	lds	r24, 0x0444
    6e34:	90 91 45 04 	lds	r25, 0x0445
    6e38:	01 96       	adiw	r24, 0x01	; 1
    6e3a:	90 93 45 04 	sts	0x0445, r25
    6e3e:	80 93 44 04 	sts	0x0444, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    6e42:	88 3c       	cpi	r24, 0xC8	; 200
    6e44:	91 05       	cpc	r25, r1
    6e46:	08 f0       	brcs	.+2      	; 0x6e4a <computeAngle+0x46>
    6e48:	4c c0       	rjmp	.+152    	; 0x6ee2 <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    6e4a:	60 91 2c 04 	lds	r22, 0x042C
    6e4e:	70 91 2d 04 	lds	r23, 0x042D
    6e52:	88 27       	eor	r24, r24
    6e54:	77 fd       	sbrc	r23, 7
    6e56:	80 95       	com	r24
    6e58:	98 2f       	mov	r25, r24
    6e5a:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    6e5e:	7b 01       	movw	r14, r22
    6e60:	8c 01       	movw	r16, r24
    6e62:	60 91 2e 04 	lds	r22, 0x042E
    6e66:	70 91 2f 04 	lds	r23, 0x042F
    6e6a:	88 27       	eor	r24, r24
    6e6c:	77 fd       	sbrc	r23, 7
    6e6e:	80 95       	com	r24
    6e70:	98 2f       	mov	r25, r24
    6e72:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <__floatsisf>
    6e76:	9b 01       	movw	r18, r22
    6e78:	ac 01       	movw	r20, r24
    6e7a:	c8 01       	movw	r24, r16
    6e7c:	b7 01       	movw	r22, r14
    6e7e:	0e 94 02 4c 	call	0x9804	; 0x9804 <atan2>
    6e82:	60 93 ac 04 	sts	0x04AC, r22
    6e86:	70 93 ad 04 	sts	0x04AD, r23
    6e8a:	80 93 ae 04 	sts	0x04AE, r24
    6e8e:	90 93 af 04 	sts	0x04AF, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    6e92:	21 ee       	ldi	r18, 0xE1	; 225
    6e94:	3e e2       	ldi	r19, 0x2E	; 46
    6e96:	45 e6       	ldi	r20, 0x65	; 101
    6e98:	52 e4       	ldi	r21, 0x42	; 66
    6e9a:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <__mulsf3>
    6e9e:	0e 94 c0 4c 	call	0x9980	; 0x9980 <__fixsfsi>
    6ea2:	cb 01       	movw	r24, r22
    6ea4:	70 93 43 04 	sts	0x0443, r23
    6ea8:	60 93 42 04 	sts	0x0442, r22

	if(currentAngle < 0) {
    6eac:	77 ff       	sbrs	r23, 7
    6eae:	06 c0       	rjmp	.+12     	; 0x6ebc <computeAngle+0xb8>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    6eb0:	88 59       	subi	r24, 0x98	; 152
    6eb2:	9e 4f       	sbci	r25, 0xFE	; 254
    6eb4:	90 93 43 04 	sts	0x0443, r25
    6eb8:	80 93 42 04 	sts	0x0442, r24
	}

}
    6ebc:	1f 91       	pop	r17
    6ebe:	0f 91       	pop	r16
    6ec0:	ff 90       	pop	r15
    6ec2:	ef 90       	pop	r14
    6ec4:	08 95       	ret

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    6ec6:	10 92 11 02 	sts	0x0211, r1
    6eca:	20 91 11 02 	lds	r18, 0x0211
	}
	if(currPosition != robotPosition) {			
    6ece:	80 91 12 02 	lds	r24, 0x0212
    6ed2:	28 17       	cp	r18, r24
    6ed4:	09 f0       	breq	.+2      	; 0x6ed8 <computeAngle+0xd4>
    6ed6:	ac cf       	rjmp	.-168    	; 0x6e30 <computeAngle+0x2c>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    6ed8:	10 92 45 04 	sts	0x0445, r1
    6edc:	10 92 44 04 	sts	0x0444, r1
    6ee0:	b4 cf       	rjmp	.-152    	; 0x6e4a <computeAngle+0x46>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    6ee2:	10 92 45 04 	sts	0x0445, r1
    6ee6:	10 92 44 04 	sts	0x0444, r1
			robotPosition = currPosition;
    6eea:	20 93 12 02 	sts	0x0212, r18
    6eee:	ad cf       	rjmp	.-166    	; 0x6e4a <computeAngle+0x46>
}

void computeAngle() {

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    6ef0:	90 95       	com	r25
    6ef2:	81 95       	neg	r24
    6ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ef6:	90 cf       	rjmp	.-224    	; 0x6e18 <computeAngle+0x14>

00006ef8 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    6ef8:	80 91 2b 04 	lds	r24, 0x042B
    6efc:	88 23       	and	r24, r24
    6efe:	09 f0       	breq	.+2      	; 0x6f02 <readAccelXYZ_2+0xa>
    6f00:	5a c0       	rjmp	.+180    	; 0x6fb6 <readAccelXYZ_2+0xbe>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    6f02:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    6f06:	80 93 48 04 	sts	0x0448, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    6f0a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    6f0e:	80 93 49 04 	sts	0x0449, r24
    6f12:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    6f16:	80 93 4a 04 	sts	0x044A, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    6f1a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <i2c_readNak>
    6f1e:	80 93 4b 04 	sts	0x044B, r24
		i2c_stop();													// set stop conditon = release bus
    6f22:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    6f26:	80 91 7c 0b 	lds	r24, 0x0B7C
    6f2a:	88 23       	and	r24, r24
    6f2c:	09 f0       	breq	.+2      	; 0x6f30 <readAccelXYZ_2+0x38>
    6f2e:	53 c0       	rjmp	.+166    	; 0x6fd6 <readAccelXYZ_2+0xde>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    6f30:	20 91 47 04 	lds	r18, 0x0447
    6f34:	33 27       	eor	r19, r19
    6f36:	27 fd       	sbrc	r18, 7
    6f38:	30 95       	com	r19
    6f3a:	32 2f       	mov	r19, r18
    6f3c:	22 27       	eor	r18, r18
    6f3e:	80 91 46 04 	lds	r24, 0x0446
    6f42:	99 27       	eor	r25, r25
    6f44:	87 fd       	sbrc	r24, 7
    6f46:	90 95       	com	r25
    6f48:	28 2b       	or	r18, r24
    6f4a:	39 2b       	or	r19, r25
    6f4c:	80 91 32 04 	lds	r24, 0x0432
    6f50:	90 91 33 04 	lds	r25, 0x0433
    6f54:	28 1b       	sub	r18, r24
    6f56:	39 0b       	sbc	r19, r25
    6f58:	30 93 2d 04 	sts	0x042D, r19
    6f5c:	20 93 2c 04 	sts	0x042C, r18
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    6f60:	20 91 49 04 	lds	r18, 0x0449
    6f64:	33 27       	eor	r19, r19
    6f66:	27 fd       	sbrc	r18, 7
    6f68:	30 95       	com	r19
    6f6a:	32 2f       	mov	r19, r18
    6f6c:	22 27       	eor	r18, r18
    6f6e:	80 91 48 04 	lds	r24, 0x0448
    6f72:	99 27       	eor	r25, r25
    6f74:	87 fd       	sbrc	r24, 7
    6f76:	90 95       	com	r25
    6f78:	28 2b       	or	r18, r24
    6f7a:	39 2b       	or	r19, r25
    6f7c:	80 91 34 04 	lds	r24, 0x0434
    6f80:	90 91 35 04 	lds	r25, 0x0435
    6f84:	28 1b       	sub	r18, r24
    6f86:	39 0b       	sbc	r19, r25
    6f88:	30 93 2f 04 	sts	0x042F, r19
    6f8c:	20 93 2e 04 	sts	0x042E, r18
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
    6f90:	80 91 4b 04 	lds	r24, 0x044B
    6f94:	99 27       	eor	r25, r25
    6f96:	87 fd       	sbrc	r24, 7
    6f98:	90 95       	com	r25
    6f9a:	98 2f       	mov	r25, r24
    6f9c:	88 27       	eor	r24, r24
    6f9e:	20 91 4a 04 	lds	r18, 0x044A
    6fa2:	33 27       	eor	r19, r19
    6fa4:	27 fd       	sbrc	r18, 7
    6fa6:	30 95       	com	r19
    6fa8:	82 2b       	or	r24, r18
    6faa:	93 2b       	or	r25, r19
    6fac:	90 93 31 04 	sts	0x0431, r25
    6fb0:	80 93 30 04 	sts	0x0430, r24
    6fb4:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    6fb6:	81 30       	cpi	r24, 0x01	; 1
    6fb8:	09 f4       	brne	.+2      	; 0x6fbc <readAccelXYZ_2+0xc4>
    6fba:	a7 cf       	rjmp	.-178    	; 0x6f0a <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
		}

	} else {

		accX = 0;
    6fbc:	10 92 2d 04 	sts	0x042D, r1
    6fc0:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    6fc4:	10 92 2f 04 	sts	0x042F, r1
    6fc8:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    6fcc:	10 92 31 04 	sts	0x0431, r1
    6fd0:	10 92 30 04 	sts	0x0430, r1
    6fd4:	08 95       	ret
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
		i2c_stop();													// set stop conditon = release bus

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    6fd6:	80 91 47 04 	lds	r24, 0x0447
    6fda:	99 27       	eor	r25, r25
    6fdc:	87 fd       	sbrc	r24, 7
    6fde:	90 95       	com	r25
    6fe0:	98 2f       	mov	r25, r24
    6fe2:	88 27       	eor	r24, r24
    6fe4:	20 91 46 04 	lds	r18, 0x0446
    6fe8:	33 27       	eor	r19, r19
    6fea:	27 fd       	sbrc	r18, 7
    6fec:	30 95       	com	r19
    6fee:	82 2b       	or	r24, r18
    6ff0:	93 2b       	or	r25, r19
    6ff2:	90 93 2d 04 	sts	0x042D, r25
    6ff6:	80 93 2c 04 	sts	0x042C, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    6ffa:	80 91 49 04 	lds	r24, 0x0449
    6ffe:	99 27       	eor	r25, r25
    7000:	87 fd       	sbrc	r24, 7
    7002:	90 95       	com	r25
    7004:	98 2f       	mov	r25, r24
    7006:	88 27       	eor	r24, r24
    7008:	20 91 48 04 	lds	r18, 0x0448
    700c:	33 27       	eor	r19, r19
    700e:	27 fd       	sbrc	r18, 7
    7010:	30 95       	com	r19
    7012:	82 2b       	or	r24, r18
    7014:	93 2b       	or	r25, r19
    7016:	90 93 2f 04 	sts	0x042F, r25
    701a:	80 93 2e 04 	sts	0x042E, r24
    701e:	b8 cf       	rjmp	.-144    	; 0x6f90 <readAccelXYZ_2+0x98>

00007020 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7020:	80 91 10 02 	lds	r24, 0x0210
    7024:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7028:	88 23       	and	r24, r24
    702a:	31 f5       	brne	.+76     	; 0x7078 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    702c:	8d e2       	ldi	r24, 0x2D	; 45
    702e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_write(0x08);	// measurement mode
    7032:	88 e0       	ldi	r24, 0x08	; 8
    7034:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7038:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    703c:	80 91 10 02 	lds	r24, 0x0210
    7040:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7044:	88 23       	and	r24, r24
    7046:	c1 f4       	brne	.+48     	; 0x7078 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7048:	81 e3       	ldi	r24, 0x31	; 49
    704a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    704e:	80 e0       	ldi	r24, 0x00	; 0
    7050:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7054:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7058:	80 91 10 02 	lds	r24, 0x0210
    705c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7060:	88 23       	and	r24, r24
    7062:	51 f4       	brne	.+20     	; 0x7078 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7064:	8c e2       	ldi	r24, 0x2C	; 44
    7066:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    706a:	89 e0       	ldi	r24, 0x09	; 9
    706c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7070:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>
    7074:	80 e0       	ldi	r24, 0x00	; 0
    }

	return 0;

}
    7076:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7078:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>
    707c:	81 e0       	ldi	r24, 0x01	; 1
    707e:	08 95       	ret

00007080 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7080:	80 91 10 02 	lds	r24, 0x0210
    7084:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7088:	88 23       	and	r24, r24
    708a:	51 f4       	brne	.+20     	; 0x70a0 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    708c:	86 e1       	ldi	r24, 0x16	; 22
    708e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7092:	85 e4       	ldi	r24, 0x45	; 69
    7094:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7098:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>
    709c:	80 e0       	ldi	r24, 0x00	; 0
    }

	return 0;				// configuration ok

}
    709e:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    70a0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>
    70a4:	81 e0       	ldi	r24, 0x01	; 1
    70a6:	08 95       	ret

000070a8 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    70a8:	80 91 2b 04 	lds	r24, 0x042B
    70ac:	88 23       	and	r24, r24
    70ae:	79 f0       	breq	.+30     	; 0x70ce <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    70b0:	81 30       	cpi	r24, 0x01	; 1
    70b2:	11 f1       	breq	.+68     	; 0x70f8 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    70b4:	10 92 2d 04 	sts	0x042D, r1
    70b8:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    70bc:	10 92 2f 04 	sts	0x042F, r1
    70c0:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    70c4:	10 92 31 04 	sts	0x0431, r1
    70c8:	10 92 30 04 	sts	0x0430, r1
    70cc:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    70ce:	80 91 10 02 	lds	r24, 0x0210
    70d2:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    70d6:	80 e0       	ldi	r24, 0x00	; 0
    70d8:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    70dc:	80 91 10 02 	lds	r24, 0x0210
    70e0:	8f 5f       	subi	r24, 0xFF	; 255
    70e2:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    70e6:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    70ea:	80 93 46 04 	sts	0x0446, r24
    70ee:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    70f2:	80 93 47 04 	sts	0x0447, r24
    70f6:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    70f8:	80 91 10 02 	lds	r24, 0x0210
    70fc:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7100:	82 e3       	ldi	r24, 0x32	; 50
    7102:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7106:	80 91 10 02 	lds	r24, 0x0210
    710a:	8f 5f       	subi	r24, 0xFF	; 255
    710c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7110:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    7114:	80 93 46 04 	sts	0x0446, r24
    7118:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    711c:	80 93 47 04 	sts	0x0447, r24
    7120:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    7124:	80 93 48 04 	sts	0x0448, r24
    7128:	08 95       	ret

0000712a <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    712a:	1f 93       	push	r17
    712c:	df 93       	push	r29
    712e:	cf 93       	push	r28
    7130:	00 d0       	rcall	.+0      	; 0x7132 <readAccelXYZ+0x8>
    7132:	00 d0       	rcall	.+0      	; 0x7134 <readAccelXYZ+0xa>
    7134:	cd b7       	in	r28, 0x3d	; 61
    7136:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    7138:	80 91 2b 04 	lds	r24, 0x042B
    713c:	88 23       	and	r24, r24
    713e:	c9 f0       	breq	.+50     	; 0x7172 <readAccelXYZ+0x48>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    7140:	81 30       	cpi	r24, 0x01	; 1
    7142:	09 f4       	brne	.+2      	; 0x7146 <readAccelXYZ+0x1c>
    7144:	99 c0       	rjmp	.+306    	; 0x7278 <readAccelXYZ+0x14e>
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
		}

	} else {

		accX = 0;
    7146:	10 92 2d 04 	sts	0x042D, r1
    714a:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    714e:	10 92 2f 04 	sts	0x042F, r1
    7152:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    7156:	10 92 31 04 	sts	0x0431, r1
    715a:	10 92 30 04 	sts	0x0430, r1

	}

}
    715e:	26 96       	adiw	r28, 0x06	; 6
    7160:	0f b6       	in	r0, 0x3f	; 63
    7162:	f8 94       	cli
    7164:	de bf       	out	0x3e, r29	; 62
    7166:	0f be       	out	0x3f, r0	; 63
    7168:	cd bf       	out	0x3d, r28	; 61
    716a:	cf 91       	pop	r28
    716c:	df 91       	pop	r29
    716e:	1f 91       	pop	r17
    7170:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7172:	80 91 10 02 	lds	r24, 0x0210
    7176:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    717a:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    717c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7180:	80 91 10 02 	lds	r24, 0x0210
    7184:	8f 5f       	subi	r24, 0xFF	; 255
    7186:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    718a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    718e:	89 83       	std	Y+1, r24	; 0x01
    7190:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    7194:	8a 83       	std	Y+2, r24	; 0x02
    7196:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    719a:	8b 83       	std	Y+3, r24	; 0x03
    719c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    71a0:	8c 83       	std	Y+4, r24	; 0x04
    71a2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    71a6:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    71a8:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <i2c_readNak>
    71ac:	18 2f       	mov	r17, r24
    71ae:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    71b0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    71b4:	80 91 7c 0b 	lds	r24, 0x0B7C
    71b8:	88 23       	and	r24, r24
    71ba:	89 f1       	breq	.+98     	; 0x721e <readAccelXYZ+0xf4>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    71bc:	8a 81       	ldd	r24, Y+2	; 0x02
    71be:	99 27       	eor	r25, r25
    71c0:	87 fd       	sbrc	r24, 7
    71c2:	90 95       	com	r25
    71c4:	98 2f       	mov	r25, r24
    71c6:	88 27       	eor	r24, r24
    71c8:	29 81       	ldd	r18, Y+1	; 0x01
    71ca:	33 27       	eor	r19, r19
    71cc:	27 fd       	sbrc	r18, 7
    71ce:	30 95       	com	r19
    71d0:	82 2b       	or	r24, r18
    71d2:	93 2b       	or	r25, r19
    71d4:	90 93 2d 04 	sts	0x042D, r25
    71d8:	80 93 2c 04 	sts	0x042C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    71dc:	8c 81       	ldd	r24, Y+4	; 0x04
    71de:	99 27       	eor	r25, r25
    71e0:	87 fd       	sbrc	r24, 7
    71e2:	90 95       	com	r25
    71e4:	98 2f       	mov	r25, r24
    71e6:	88 27       	eor	r24, r24
    71e8:	2b 81       	ldd	r18, Y+3	; 0x03
    71ea:	33 27       	eor	r19, r19
    71ec:	27 fd       	sbrc	r18, 7
    71ee:	30 95       	com	r19
    71f0:	82 2b       	or	r24, r18
    71f2:	93 2b       	or	r25, r19
    71f4:	90 93 2f 04 	sts	0x042F, r25
    71f8:	80 93 2e 04 	sts	0x042E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
    71fc:	21 2f       	mov	r18, r17
    71fe:	33 27       	eor	r19, r19
    7200:	27 fd       	sbrc	r18, 7
    7202:	30 95       	com	r19
    7204:	32 2f       	mov	r19, r18
    7206:	22 27       	eor	r18, r18
    7208:	8d 81       	ldd	r24, Y+5	; 0x05
    720a:	99 27       	eor	r25, r25
    720c:	87 fd       	sbrc	r24, 7
    720e:	90 95       	com	r25
    7210:	28 2b       	or	r18, r24
    7212:	39 2b       	or	r19, r25
    7214:	30 93 31 04 	sts	0x0431, r19
    7218:	20 93 30 04 	sts	0x0430, r18
    721c:	a0 cf       	rjmp	.-192    	; 0x715e <readAccelXYZ+0x34>
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    721e:	2a 81       	ldd	r18, Y+2	; 0x02
    7220:	33 27       	eor	r19, r19
    7222:	27 fd       	sbrc	r18, 7
    7224:	30 95       	com	r19
    7226:	32 2f       	mov	r19, r18
    7228:	22 27       	eor	r18, r18
    722a:	89 81       	ldd	r24, Y+1	; 0x01
    722c:	99 27       	eor	r25, r25
    722e:	87 fd       	sbrc	r24, 7
    7230:	90 95       	com	r25
    7232:	28 2b       	or	r18, r24
    7234:	39 2b       	or	r19, r25
    7236:	80 91 32 04 	lds	r24, 0x0432
    723a:	90 91 33 04 	lds	r25, 0x0433
    723e:	28 1b       	sub	r18, r24
    7240:	39 0b       	sbc	r19, r25
    7242:	30 93 2d 04 	sts	0x042D, r19
    7246:	20 93 2c 04 	sts	0x042C, r18
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    724a:	2c 81       	ldd	r18, Y+4	; 0x04
    724c:	33 27       	eor	r19, r19
    724e:	27 fd       	sbrc	r18, 7
    7250:	30 95       	com	r19
    7252:	32 2f       	mov	r19, r18
    7254:	22 27       	eor	r18, r18
    7256:	8b 81       	ldd	r24, Y+3	; 0x03
    7258:	99 27       	eor	r25, r25
    725a:	87 fd       	sbrc	r24, 7
    725c:	90 95       	com	r25
    725e:	28 2b       	or	r18, r24
    7260:	39 2b       	or	r19, r25
    7262:	80 91 34 04 	lds	r24, 0x0434
    7266:	90 91 35 04 	lds	r25, 0x0435
    726a:	28 1b       	sub	r18, r24
    726c:	39 0b       	sbc	r19, r25
    726e:	30 93 2f 04 	sts	0x042F, r19
    7272:	20 93 2e 04 	sts	0x042E, r18
    7276:	c2 cf       	rjmp	.-124    	; 0x71fc <readAccelXYZ+0xd2>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    7278:	80 91 10 02 	lds	r24, 0x0210
    727c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7280:	82 e3       	ldi	r24, 0x32	; 50
    7282:	7c cf       	rjmp	.-264    	; 0x717c <readAccelXYZ+0x52>

00007284 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    7284:	ef 92       	push	r14
    7286:	ff 92       	push	r15
    7288:	0f 93       	push	r16
    728a:	1f 93       	push	r17

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    728c:	80 91 2b 04 	lds	r24, 0x042B
    7290:	88 23       	and	r24, r24
    7292:	81 f0       	breq	.+32     	; 0x72b4 <readAccelXY+0x30>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    7294:	81 30       	cpi	r24, 0x01	; 1
    7296:	09 f4       	brne	.+2      	; 0x729a <readAccelXY+0x16>
    7298:	81 c0       	rjmp	.+258    	; 0x739c <readAccelXY+0x118>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    729a:	10 92 2d 04 	sts	0x042D, r1
    729e:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    72a2:	10 92 2f 04 	sts	0x042F, r1
    72a6:	10 92 2e 04 	sts	0x042E, r1

	}

}
    72aa:	1f 91       	pop	r17
    72ac:	0f 91       	pop	r16
    72ae:	ff 90       	pop	r15
    72b0:	ef 90       	pop	r14
    72b2:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    72b4:	80 91 10 02 	lds	r24, 0x0210
    72b8:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    72bc:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    72be:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    72c2:	80 91 10 02 	lds	r24, 0x0210
    72c6:	8f 5f       	subi	r24, 0xFF	; 255
    72c8:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    72cc:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    72d0:	08 2f       	mov	r16, r24
    72d2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    72d6:	18 2f       	mov	r17, r24
    72d8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <i2c_readAck>
    72dc:	e8 2e       	mov	r14, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    72de:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <i2c_readNak>
    72e2:	f8 2e       	mov	r15, r24
		i2c_stop();													// set stop conditon = release bus
    72e4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    72e8:	80 91 7c 0b 	lds	r24, 0x0B7C
    72ec:	88 23       	and	r24, r24
    72ee:	29 f1       	breq	.+74     	; 0x733a <readAccelXY+0xb6>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    72f0:	81 2f       	mov	r24, r17
    72f2:	99 27       	eor	r25, r25
    72f4:	87 fd       	sbrc	r24, 7
    72f6:	90 95       	com	r25
    72f8:	98 2f       	mov	r25, r24
    72fa:	88 27       	eor	r24, r24
    72fc:	20 2f       	mov	r18, r16
    72fe:	33 27       	eor	r19, r19
    7300:	27 fd       	sbrc	r18, 7
    7302:	30 95       	com	r19
    7304:	82 2b       	or	r24, r18
    7306:	93 2b       	or	r25, r19
    7308:	90 93 2d 04 	sts	0x042D, r25
    730c:	80 93 2c 04 	sts	0x042C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    7310:	8f 2d       	mov	r24, r15
    7312:	99 27       	eor	r25, r25
    7314:	87 fd       	sbrc	r24, 7
    7316:	90 95       	com	r25
    7318:	98 2f       	mov	r25, r24
    731a:	88 27       	eor	r24, r24
    731c:	2e 2d       	mov	r18, r14
    731e:	33 27       	eor	r19, r19
    7320:	27 fd       	sbrc	r18, 7
    7322:	30 95       	com	r19
    7324:	82 2b       	or	r24, r18
    7326:	93 2b       	or	r25, r19
    7328:	90 93 2f 04 	sts	0x042F, r25
    732c:	80 93 2e 04 	sts	0x042E, r24
		accX = 0;
		accY = 0;

	}

}
    7330:	1f 91       	pop	r17
    7332:	0f 91       	pop	r16
    7334:	ff 90       	pop	r15
    7336:	ef 90       	pop	r14
    7338:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    733a:	81 2f       	mov	r24, r17
    733c:	99 27       	eor	r25, r25
    733e:	87 fd       	sbrc	r24, 7
    7340:	90 95       	com	r25
    7342:	98 2f       	mov	r25, r24
    7344:	88 27       	eor	r24, r24
    7346:	20 2f       	mov	r18, r16
    7348:	33 27       	eor	r19, r19
    734a:	27 fd       	sbrc	r18, 7
    734c:	30 95       	com	r19
    734e:	82 2b       	or	r24, r18
    7350:	93 2b       	or	r25, r19
    7352:	20 91 32 04 	lds	r18, 0x0432
    7356:	30 91 33 04 	lds	r19, 0x0433
    735a:	82 1b       	sub	r24, r18
    735c:	93 0b       	sbc	r25, r19
    735e:	90 93 2d 04 	sts	0x042D, r25
    7362:	80 93 2c 04 	sts	0x042C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7366:	8f 2d       	mov	r24, r15
    7368:	99 27       	eor	r25, r25
    736a:	87 fd       	sbrc	r24, 7
    736c:	90 95       	com	r25
    736e:	98 2f       	mov	r25, r24
    7370:	88 27       	eor	r24, r24
    7372:	2e 2d       	mov	r18, r14
    7374:	33 27       	eor	r19, r19
    7376:	27 fd       	sbrc	r18, 7
    7378:	30 95       	com	r19
    737a:	82 2b       	or	r24, r18
    737c:	93 2b       	or	r25, r19
    737e:	20 91 34 04 	lds	r18, 0x0434
    7382:	30 91 35 04 	lds	r19, 0x0435
    7386:	82 1b       	sub	r24, r18
    7388:	93 0b       	sbc	r25, r19
    738a:	90 93 2f 04 	sts	0x042F, r25
    738e:	80 93 2e 04 	sts	0x042E, r24
		accX = 0;
		accY = 0;

	}

}
    7392:	1f 91       	pop	r17
    7394:	0f 91       	pop	r16
    7396:	ff 90       	pop	r15
    7398:	ef 90       	pop	r14
    739a:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    739c:	80 91 10 02 	lds	r24, 0x0210
    73a0:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    73a4:	82 e3       	ldi	r24, 0x32	; 50
    73a6:	8b cf       	rjmp	.-234    	; 0x72be <readAccelXY+0x3a>

000073a8 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    73a8:	af 92       	push	r10
    73aa:	bf 92       	push	r11
    73ac:	cf 92       	push	r12
    73ae:	df 92       	push	r13
    73b0:	ef 92       	push	r14
    73b2:	ff 92       	push	r15
    73b4:	0f 93       	push	r16
    73b6:	1f 93       	push	r17
    73b8:	cf 93       	push	r28
    73ba:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    73bc:	10 92 08 02 	sts	0x0208, r1
	pwm_green = 0;
    73c0:	10 92 09 02 	sts	0x0209, r1
	pwm_blue = 0;
    73c4:	10 92 0a 02 	sts	0x020A, r1
	updateRedLed(pwm_red);
    73c8:	80 e0       	ldi	r24, 0x00	; 0
    73ca:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <updateRedLed>
	updateGreenLed(pwm_green);
    73ce:	80 91 09 02 	lds	r24, 0x0209
    73d2:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <updateGreenLed>
	updateBlueLed(pwm_blue);
    73d6:	80 91 0a 02 	lds	r24, 0x020A
    73da:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <updateBlueLed>

	calibrationCycle = 0;
    73de:	10 92 52 04 	sts	0x0452, r1
    73e2:	10 92 51 04 	sts	0x0451, r1
	startCalibration = 1;
    73e6:	81 e0       	ldi	r24, 0x01	; 1
    73e8:	80 93 7c 0b 	sts	0x0B7C, r24


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
    73ec:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    73f0:	60 93 70 04 	sts	0x0470, r22
    73f4:	70 93 71 04 	sts	0x0471, r23
    73f8:	80 93 72 04 	sts	0x0472, r24
    73fc:	90 93 73 04 	sts	0x0473, r25
    7400:	02 c0       	rjmp	.+4      	; 0x7406 <calibrateSensors+0x5e>
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
		readAccelXYZ();	// get a fresh value from the accelerometer
    7402:	0e 94 95 38 	call	0x712a	; 0x712a <readAccelXYZ>


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
    7406:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    740a:	20 91 70 04 	lds	r18, 0x0470
    740e:	30 91 71 04 	lds	r19, 0x0471
    7412:	40 91 72 04 	lds	r20, 0x0472
    7416:	50 91 73 04 	lds	r21, 0x0473
    741a:	62 1b       	sub	r22, r18
    741c:	73 0b       	sbc	r23, r19
    741e:	84 0b       	sbc	r24, r20
    7420:	95 0b       	sbc	r25, r21
    7422:	61 5c       	subi	r22, 0xC1	; 193
    7424:	73 40       	sbci	r23, 0x03	; 3
    7426:	80 40       	sbci	r24, 0x00	; 0
    7428:	90 40       	sbci	r25, 0x00	; 0
    742a:	58 f3       	brcs	.-42     	; 0x7402 <calibrateSensors+0x5a>
		readAccelXYZ();	// get a fresh value from the accelerometer
	}
	
	accXMax = -1023;
    742c:	21 e0       	ldi	r18, 0x01	; 1
    742e:	3c ef       	ldi	r19, 0xFC	; 252
    7430:	30 93 3b 04 	sts	0x043B, r19
    7434:	20 93 3a 04 	sts	0x043A, r18
	accXMin = 1023;
    7438:	8f ef       	ldi	r24, 0xFF	; 255
    743a:	93 e0       	ldi	r25, 0x03	; 3
    743c:	90 93 3d 04 	sts	0x043D, r25
    7440:	80 93 3c 04 	sts	0x043C, r24
	accYMax = -1023;
    7444:	30 93 3f 04 	sts	0x043F, r19
    7448:	20 93 3e 04 	sts	0x043E, r18
	accYMin = 1023;
    744c:	90 93 41 04 	sts	0x0441, r25
    7450:	80 93 40 04 	sts	0x0440, r24
	accOffsetXSum = 0;
    7454:	10 92 37 04 	sts	0x0437, r1
    7458:	10 92 36 04 	sts	0x0436, r1
	accOffsetYSum = 0;
    745c:	10 92 39 04 	sts	0x0439, r1
    7460:	10 92 38 04 	sts	0x0438, r1

	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    7464:	80 91 30 04 	lds	r24, 0x0430
    7468:	90 91 31 04 	lds	r25, 0x0431
    746c:	97 fd       	sbrc	r25, 7
    746e:	4c c4       	rjmp	.+2200   	; 0x7d08 <calibrateSensors+0x960>
    7470:	8d 97       	sbiw	r24, 0x2d	; 45
    7472:	0c f4       	brge	.+2      	; 0x7476 <calibrateSensors+0xce>
    7474:	ab c3       	rjmp	.+1878   	; 0x7bcc <calibrateSensors+0x824>

		pwm_red = 0;
    7476:	10 92 08 02 	sts	0x0208, r1
		pwm_green = 255;
    747a:	8f ef       	ldi	r24, 0xFF	; 255
    747c:	80 93 09 02 	sts	0x0209, r24
		pwm_blue = 255;
    7480:	80 93 0a 02 	sts	0x020A, r24
		updateRedLed(pwm_red);
    7484:	80 e0       	ldi	r24, 0x00	; 0
    7486:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <updateRedLed>
		updateGreenLed(pwm_green);
    748a:	80 91 09 02 	lds	r24, 0x0209
    748e:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <updateGreenLed>
		updateBlueLed(pwm_blue);
    7492:	80 91 0a 02 	lds	r24, 0x020A
    7496:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <updateBlueLed>

		setLeftSpeed(0);
    749a:	80 e0       	ldi	r24, 0x00	; 0
    749c:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <setLeftSpeed>
		setRightSpeed(0);
    74a0:	80 e0       	ldi	r24, 0x00	; 0
    74a2:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <setRightSpeed>
    74a6:	22 c0       	rjmp	.+68     	; 0x74ec <calibrateSensors+0x144>
			readAccelXYZ();

			handleMotorsWithNoController();

			if(calibrationCycle < CALIBRATION_CYCLES) {
				accOffsetXSum += accX;
    74a8:	80 91 36 04 	lds	r24, 0x0436
    74ac:	90 91 37 04 	lds	r25, 0x0437
    74b0:	20 91 2c 04 	lds	r18, 0x042C
    74b4:	30 91 2d 04 	lds	r19, 0x042D
    74b8:	82 0f       	add	r24, r18
    74ba:	93 1f       	adc	r25, r19
    74bc:	90 93 37 04 	sts	0x0437, r25
    74c0:	80 93 36 04 	sts	0x0436, r24
				accOffsetYSum += accY;
    74c4:	80 91 38 04 	lds	r24, 0x0438
    74c8:	90 91 39 04 	lds	r25, 0x0439
    74cc:	20 91 2e 04 	lds	r18, 0x042E
    74d0:	30 91 2f 04 	lds	r19, 0x042F
    74d4:	82 0f       	add	r24, r18
    74d6:	93 1f       	adc	r25, r19
    74d8:	90 93 39 04 	sts	0x0439, r25
    74dc:	80 93 38 04 	sts	0x0438, r24
				calibrationCycle++;
    74e0:	4f 5f       	subi	r20, 0xFF	; 255
    74e2:	5f 4f       	sbci	r21, 0xFF	; 255
    74e4:	50 93 52 04 	sts	0x0452, r21
    74e8:	40 93 51 04 	sts	0x0451, r20
		setLeftSpeed(0);
		setRightSpeed(0);

		while(1) {

			readAccelXYZ();
    74ec:	0e 94 95 38 	call	0x712a	; 0x712a <readAccelXYZ>

			handleMotorsWithNoController();
    74f0:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <handleMotorsWithNoController>

			if(calibrationCycle < CALIBRATION_CYCLES) {
    74f4:	40 91 51 04 	lds	r20, 0x0451
    74f8:	50 91 52 04 	lds	r21, 0x0452
    74fc:	40 31       	cpi	r20, 0x10	; 16
    74fe:	51 05       	cpc	r21, r1
    7500:	9c f2       	brlt	.-90     	; 0x74a8 <calibrateSensors+0x100>
				accOffsetXSum += accX;
				accOffsetYSum += accY;
				calibrationCycle++;
			} else {
				accOffsetX = accOffsetXSum>>4;
    7502:	80 91 36 04 	lds	r24, 0x0436
    7506:	90 91 37 04 	lds	r25, 0x0437
    750a:	95 95       	asr	r25
    750c:	87 95       	ror	r24
    750e:	95 95       	asr	r25
    7510:	87 95       	ror	r24
    7512:	95 95       	asr	r25
    7514:	87 95       	ror	r24
    7516:	95 95       	asr	r25
    7518:	87 95       	ror	r24
    751a:	90 93 33 04 	sts	0x0433, r25
    751e:	80 93 32 04 	sts	0x0432, r24
				accOffsetY = accOffsetYSum>>4;
    7522:	80 91 38 04 	lds	r24, 0x0438
    7526:	90 91 39 04 	lds	r25, 0x0439
    752a:	95 95       	asr	r25
    752c:	87 95       	ror	r24
    752e:	95 95       	asr	r25
    7530:	87 95       	ror	r24
    7532:	95 95       	asr	r25
    7534:	87 95       	ror	r24
    7536:	95 95       	asr	r25
    7538:	87 95       	ror	r24
    753a:	90 93 35 04 	sts	0x0435, r25
    753e:	80 93 34 04 	sts	0x0434, r24
		setLeftSpeed(0);
		setRightSpeed(0);

	}	

	startCalibration = 1;
    7542:	81 e0       	ldi	r24, 0x01	; 1
    7544:	80 93 7c 0b 	sts	0x0B7C, r24
	calibrationCycle = 0;
    7548:	10 92 52 04 	sts	0x0452, r1
    754c:	10 92 51 04 	sts	0x0451, r1

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    7550:	1f ef       	ldi	r17, 0xFF	; 255
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
						proximityOffset[i] = 0;
					}				
					
					calibrationCycle++;
    7552:	c1 e0       	ldi	r28, 0x01	; 1
    7554:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    7556:	80 91 51 04 	lds	r24, 0x0451
    755a:	90 91 52 04 	lds	r25, 0x0452
    755e:	41 97       	sbiw	r24, 0x11	; 17
    7560:	84 f4       	brge	.+32     	; 0x7582 <calibrateSensors+0x1da>

			if(proxUpdated) {
    7562:	80 91 bc 02 	lds	r24, 0x02BC
    7566:	88 23       	and	r24, r24
    7568:	09 f0       	breq	.+2      	; 0x756c <calibrateSensors+0x1c4>
    756a:	29 c1       	rjmp	.+594    	; 0x77be <calibrateSensors+0x416>

	startCalibration = 1;
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {
    756c:	80 91 7c 0b 	lds	r24, 0x0B7C
    7570:	88 23       	and	r24, r24
    7572:	09 f4       	brne	.+2      	; 0x7576 <calibrateSensors+0x1ce>
    7574:	08 c1       	rjmp	.+528    	; 0x7786 <calibrateSensors+0x3de>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    7576:	80 91 51 04 	lds	r24, 0x0451
    757a:	90 91 52 04 	lds	r25, 0x0452
    757e:	41 97       	sbiw	r24, 0x11	; 17
    7580:	84 f3       	brlt	.-32     	; 0x7562 <calibrateSensors+0x1ba>

			}

		} else {

			pwm_red = 0;
    7582:	10 92 08 02 	sts	0x0208, r1
			pwm_green = 0;
    7586:	10 92 09 02 	sts	0x0209, r1
			pwm_blue = 255;
    758a:	8f ef       	ldi	r24, 0xFF	; 255
    758c:	80 93 0a 02 	sts	0x020A, r24
			updateRedLed(pwm_red);
    7590:	80 e0       	ldi	r24, 0x00	; 0
    7592:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <updateRedLed>
			updateGreenLed(pwm_green);
    7596:	80 91 09 02 	lds	r24, 0x0209
    759a:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <updateGreenLed>
			updateBlueLed(pwm_blue);
    759e:	80 91 0a 02 	lds	r24, 0x020A
    75a2:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <updateBlueLed>

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    75a6:	80 91 85 02 	lds	r24, 0x0285
    75aa:	90 91 86 02 	lds	r25, 0x0286
    75ae:	a0 91 87 02 	lds	r26, 0x0287
    75b2:	b0 91 88 02 	lds	r27, 0x0288
    75b6:	e4 e0       	ldi	r30, 0x04	; 4
    75b8:	b6 95       	lsr	r27
    75ba:	a7 95       	ror	r26
    75bc:	97 95       	ror	r25
    75be:	87 95       	ror	r24
    75c0:	ea 95       	dec	r30
    75c2:	d1 f7       	brne	.-12     	; 0x75b8 <calibrateSensors+0x210>
    75c4:	90 93 6e 02 	sts	0x026E, r25
    75c8:	80 93 6d 02 	sts	0x026D, r24
    75cc:	80 91 89 02 	lds	r24, 0x0289
    75d0:	90 91 8a 02 	lds	r25, 0x028A
    75d4:	a0 91 8b 02 	lds	r26, 0x028B
    75d8:	b0 91 8c 02 	lds	r27, 0x028C
    75dc:	74 e0       	ldi	r23, 0x04	; 4
    75de:	b6 95       	lsr	r27
    75e0:	a7 95       	ror	r26
    75e2:	97 95       	ror	r25
    75e4:	87 95       	ror	r24
    75e6:	7a 95       	dec	r23
    75e8:	d1 f7       	brne	.-12     	; 0x75de <calibrateSensors+0x236>
    75ea:	90 93 70 02 	sts	0x0270, r25
    75ee:	80 93 6f 02 	sts	0x026F, r24
    75f2:	80 91 8d 02 	lds	r24, 0x028D
    75f6:	90 91 8e 02 	lds	r25, 0x028E
    75fa:	a0 91 8f 02 	lds	r26, 0x028F
    75fe:	b0 91 90 02 	lds	r27, 0x0290
    7602:	64 e0       	ldi	r22, 0x04	; 4
    7604:	b6 95       	lsr	r27
    7606:	a7 95       	ror	r26
    7608:	97 95       	ror	r25
    760a:	87 95       	ror	r24
    760c:	6a 95       	dec	r22
    760e:	d1 f7       	brne	.-12     	; 0x7604 <calibrateSensors+0x25c>
    7610:	90 93 72 02 	sts	0x0272, r25
    7614:	80 93 71 02 	sts	0x0271, r24
    7618:	80 91 91 02 	lds	r24, 0x0291
    761c:	90 91 92 02 	lds	r25, 0x0292
    7620:	a0 91 93 02 	lds	r26, 0x0293
    7624:	b0 91 94 02 	lds	r27, 0x0294
    7628:	54 e0       	ldi	r21, 0x04	; 4
    762a:	b6 95       	lsr	r27
    762c:	a7 95       	ror	r26
    762e:	97 95       	ror	r25
    7630:	87 95       	ror	r24
    7632:	5a 95       	dec	r21
    7634:	d1 f7       	brne	.-12     	; 0x762a <calibrateSensors+0x282>
    7636:	90 93 74 02 	sts	0x0274, r25
    763a:	80 93 73 02 	sts	0x0273, r24
    763e:	80 91 95 02 	lds	r24, 0x0295
    7642:	90 91 96 02 	lds	r25, 0x0296
    7646:	a0 91 97 02 	lds	r26, 0x0297
    764a:	b0 91 98 02 	lds	r27, 0x0298
    764e:	44 e0       	ldi	r20, 0x04	; 4
    7650:	b6 95       	lsr	r27
    7652:	a7 95       	ror	r26
    7654:	97 95       	ror	r25
    7656:	87 95       	ror	r24
    7658:	4a 95       	dec	r20
    765a:	d1 f7       	brne	.-12     	; 0x7650 <calibrateSensors+0x2a8>
    765c:	90 93 76 02 	sts	0x0276, r25
    7660:	80 93 75 02 	sts	0x0275, r24
    7664:	80 91 99 02 	lds	r24, 0x0299
    7668:	90 91 9a 02 	lds	r25, 0x029A
    766c:	a0 91 9b 02 	lds	r26, 0x029B
    7670:	b0 91 9c 02 	lds	r27, 0x029C
    7674:	34 e0       	ldi	r19, 0x04	; 4
    7676:	b6 95       	lsr	r27
    7678:	a7 95       	ror	r26
    767a:	97 95       	ror	r25
    767c:	87 95       	ror	r24
    767e:	3a 95       	dec	r19
    7680:	d1 f7       	brne	.-12     	; 0x7676 <calibrateSensors+0x2ce>
    7682:	90 93 78 02 	sts	0x0278, r25
    7686:	80 93 77 02 	sts	0x0277, r24
    768a:	80 91 9d 02 	lds	r24, 0x029D
    768e:	90 91 9e 02 	lds	r25, 0x029E
    7692:	a0 91 9f 02 	lds	r26, 0x029F
    7696:	b0 91 a0 02 	lds	r27, 0x02A0
    769a:	24 e0       	ldi	r18, 0x04	; 4
    769c:	b6 95       	lsr	r27
    769e:	a7 95       	ror	r26
    76a0:	97 95       	ror	r25
    76a2:	87 95       	ror	r24
    76a4:	2a 95       	dec	r18
    76a6:	d1 f7       	brne	.-12     	; 0x769c <calibrateSensors+0x2f4>
    76a8:	90 93 7a 02 	sts	0x027A, r25
    76ac:	80 93 79 02 	sts	0x0279, r24
    76b0:	80 91 a1 02 	lds	r24, 0x02A1
    76b4:	90 91 a2 02 	lds	r25, 0x02A2
    76b8:	a0 91 a3 02 	lds	r26, 0x02A3
    76bc:	b0 91 a4 02 	lds	r27, 0x02A4
    76c0:	04 e0       	ldi	r16, 0x04	; 4
    76c2:	b6 95       	lsr	r27
    76c4:	a7 95       	ror	r26
    76c6:	97 95       	ror	r25
    76c8:	87 95       	ror	r24
    76ca:	0a 95       	dec	r16
    76cc:	d1 f7       	brne	.-12     	; 0x76c2 <calibrateSensors+0x31a>
    76ce:	90 93 7c 02 	sts	0x027C, r25
    76d2:	80 93 7b 02 	sts	0x027B, r24
    76d6:	80 91 a5 02 	lds	r24, 0x02A5
    76da:	90 91 a6 02 	lds	r25, 0x02A6
    76de:	a0 91 a7 02 	lds	r26, 0x02A7
    76e2:	b0 91 a8 02 	lds	r27, 0x02A8
    76e6:	14 e0       	ldi	r17, 0x04	; 4
    76e8:	b6 95       	lsr	r27
    76ea:	a7 95       	ror	r26
    76ec:	97 95       	ror	r25
    76ee:	87 95       	ror	r24
    76f0:	1a 95       	dec	r17
    76f2:	d1 f7       	brne	.-12     	; 0x76e8 <calibrateSensors+0x340>
    76f4:	20 91 a9 02 	lds	r18, 0x02A9
    76f8:	30 91 aa 02 	lds	r19, 0x02AA
    76fc:	40 91 ab 02 	lds	r20, 0x02AB
    7700:	50 91 ac 02 	lds	r21, 0x02AC
    7704:	f4 e0       	ldi	r31, 0x04	; 4
    7706:	56 95       	lsr	r21
    7708:	47 95       	ror	r20
    770a:	37 95       	ror	r19
    770c:	27 95       	ror	r18
    770e:	fa 95       	dec	r31
    7710:	d1 f7       	brne	.-12     	; 0x7706 <calibrateSensors+0x35e>
    7712:	e0 90 ad 02 	lds	r14, 0x02AD
    7716:	f0 90 ae 02 	lds	r15, 0x02AE
    771a:	00 91 af 02 	lds	r16, 0x02AF
    771e:	10 91 b0 02 	lds	r17, 0x02B0
    7722:	e4 e0       	ldi	r30, 0x04	; 4
    7724:	16 95       	lsr	r17
    7726:	07 95       	ror	r16
    7728:	f7 94       	ror	r15
    772a:	e7 94       	ror	r14
    772c:	ea 95       	dec	r30
    772e:	d1 f7       	brne	.-12     	; 0x7724 <calibrateSensors+0x37c>
    7730:	a0 90 b1 02 	lds	r10, 0x02B1
    7734:	b0 90 b2 02 	lds	r11, 0x02B2
    7738:	c0 90 b3 02 	lds	r12, 0x02B3
    773c:	d0 90 b4 02 	lds	r13, 0x02B4
    7740:	74 e0       	ldi	r23, 0x04	; 4
    7742:	d6 94       	lsr	r13
    7744:	c7 94       	ror	r12
    7746:	b7 94       	ror	r11
    7748:	a7 94       	ror	r10
    774a:	7a 95       	dec	r23
    774c:	d1 f7       	brne	.-12     	; 0x7742 <calibrateSensors+0x39a>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    774e:	80 50       	subi	r24, 0x00	; 0
    7750:	92 40       	sbci	r25, 0x02	; 2
    7752:	90 93 7e 02 	sts	0x027E, r25
    7756:	80 93 7d 02 	sts	0x027D, r24
    775a:	20 50       	subi	r18, 0x00	; 0
    775c:	32 40       	sbci	r19, 0x02	; 2
    775e:	30 93 80 02 	sts	0x0280, r19
    7762:	20 93 7f 02 	sts	0x027F, r18
    7766:	80 e0       	ldi	r24, 0x00	; 0
    7768:	9e ef       	ldi	r25, 0xFE	; 254
    776a:	e8 0e       	add	r14, r24
    776c:	f9 1e       	adc	r15, r25
    776e:	f0 92 82 02 	sts	0x0282, r15
    7772:	e0 92 81 02 	sts	0x0281, r14
    7776:	a8 0e       	add	r10, r24
    7778:	b9 1e       	adc	r11, r25
    777a:	b0 92 84 02 	sts	0x0284, r11
    777e:	a0 92 83 02 	sts	0x0283, r10
			}

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    7782:	10 92 7c 0b 	sts	0x0B7C, r1

		}

	}

	pwm_red = 255;
    7786:	8f ef       	ldi	r24, 0xFF	; 255
    7788:	80 93 08 02 	sts	0x0208, r24
	pwm_green = 255;
    778c:	80 93 09 02 	sts	0x0209, r24
	pwm_blue = 255;
    7790:	80 93 0a 02 	sts	0x020A, r24
	updateRedLed(pwm_red);
    7794:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <updateRedLed>
	updateGreenLed(pwm_green);
    7798:	80 91 09 02 	lds	r24, 0x0209
    779c:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <updateGreenLed>
	updateBlueLed(pwm_blue);
    77a0:	80 91 0a 02 	lds	r24, 0x020A
    77a4:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <updateBlueLed>

}
    77a8:	df 91       	pop	r29
    77aa:	cf 91       	pop	r28
    77ac:	1f 91       	pop	r17
    77ae:	0f 91       	pop	r16
    77b0:	ff 90       	pop	r15
    77b2:	ef 90       	pop	r14
    77b4:	df 90       	pop	r13
    77b6:	cf 90       	pop	r12
    77b8:	bf 90       	pop	r11
    77ba:	af 90       	pop	r10
    77bc:	08 95       	ret

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    77be:	10 93 08 02 	sts	0x0208, r17
				pwm_green = 255;
    77c2:	10 93 09 02 	sts	0x0209, r17
				pwm_blue = 0;
    77c6:	10 92 0a 02 	sts	0x020A, r1
				updateRedLed(pwm_red);
    77ca:	8f ef       	ldi	r24, 0xFF	; 255
    77cc:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <updateRedLed>
				updateGreenLed(pwm_green);
    77d0:	80 91 09 02 	lds	r24, 0x0209
    77d4:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <updateGreenLed>
				updateBlueLed(pwm_blue);
    77d8:	80 91 0a 02 	lds	r24, 0x020A
    77dc:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <updateBlueLed>

				proxUpdated = 0;
    77e0:	10 92 bc 02 	sts	0x02BC, r1

				if(calibrationCycle==0) {		// reset all variables
    77e4:	60 91 51 04 	lds	r22, 0x0451
    77e8:	70 91 52 04 	lds	r23, 0x0452
    77ec:	61 15       	cp	r22, r1
    77ee:	71 05       	cpc	r23, r1
    77f0:	09 f0       	breq	.+2      	; 0x77f4 <calibrateSensors+0x44c>
    77f2:	95 c0       	rjmp	.+298    	; 0x791e <calibrateSensors+0x576>

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    77f4:	10 92 85 02 	sts	0x0285, r1
    77f8:	10 92 86 02 	sts	0x0286, r1
    77fc:	10 92 87 02 	sts	0x0287, r1
    7800:	10 92 88 02 	sts	0x0288, r1
						proximityOffset[i] = 0;
    7804:	10 92 6e 02 	sts	0x026E, r1
    7808:	10 92 6d 02 	sts	0x026D, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    780c:	10 92 89 02 	sts	0x0289, r1
    7810:	10 92 8a 02 	sts	0x028A, r1
    7814:	10 92 8b 02 	sts	0x028B, r1
    7818:	10 92 8c 02 	sts	0x028C, r1
						proximityOffset[i] = 0;
    781c:	10 92 70 02 	sts	0x0270, r1
    7820:	10 92 6f 02 	sts	0x026F, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7824:	10 92 8d 02 	sts	0x028D, r1
    7828:	10 92 8e 02 	sts	0x028E, r1
    782c:	10 92 8f 02 	sts	0x028F, r1
    7830:	10 92 90 02 	sts	0x0290, r1
						proximityOffset[i] = 0;
    7834:	10 92 72 02 	sts	0x0272, r1
    7838:	10 92 71 02 	sts	0x0271, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    783c:	10 92 91 02 	sts	0x0291, r1
    7840:	10 92 92 02 	sts	0x0292, r1
    7844:	10 92 93 02 	sts	0x0293, r1
    7848:	10 92 94 02 	sts	0x0294, r1
						proximityOffset[i] = 0;
    784c:	10 92 74 02 	sts	0x0274, r1
    7850:	10 92 73 02 	sts	0x0273, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7854:	10 92 95 02 	sts	0x0295, r1
    7858:	10 92 96 02 	sts	0x0296, r1
    785c:	10 92 97 02 	sts	0x0297, r1
    7860:	10 92 98 02 	sts	0x0298, r1
						proximityOffset[i] = 0;
    7864:	10 92 76 02 	sts	0x0276, r1
    7868:	10 92 75 02 	sts	0x0275, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    786c:	10 92 99 02 	sts	0x0299, r1
    7870:	10 92 9a 02 	sts	0x029A, r1
    7874:	10 92 9b 02 	sts	0x029B, r1
    7878:	10 92 9c 02 	sts	0x029C, r1
						proximityOffset[i] = 0;
    787c:	10 92 78 02 	sts	0x0278, r1
    7880:	10 92 77 02 	sts	0x0277, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7884:	10 92 9d 02 	sts	0x029D, r1
    7888:	10 92 9e 02 	sts	0x029E, r1
    788c:	10 92 9f 02 	sts	0x029F, r1
    7890:	10 92 a0 02 	sts	0x02A0, r1
						proximityOffset[i] = 0;
    7894:	10 92 7a 02 	sts	0x027A, r1
    7898:	10 92 79 02 	sts	0x0279, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    789c:	10 92 a1 02 	sts	0x02A1, r1
    78a0:	10 92 a2 02 	sts	0x02A2, r1
    78a4:	10 92 a3 02 	sts	0x02A3, r1
    78a8:	10 92 a4 02 	sts	0x02A4, r1
						proximityOffset[i] = 0;
    78ac:	10 92 7c 02 	sts	0x027C, r1
    78b0:	10 92 7b 02 	sts	0x027B, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    78b4:	10 92 a5 02 	sts	0x02A5, r1
    78b8:	10 92 a6 02 	sts	0x02A6, r1
    78bc:	10 92 a7 02 	sts	0x02A7, r1
    78c0:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    78c4:	10 92 7e 02 	sts	0x027E, r1
    78c8:	10 92 7d 02 	sts	0x027D, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    78cc:	10 92 a9 02 	sts	0x02A9, r1
    78d0:	10 92 aa 02 	sts	0x02AA, r1
    78d4:	10 92 ab 02 	sts	0x02AB, r1
    78d8:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    78dc:	10 92 80 02 	sts	0x0280, r1
    78e0:	10 92 7f 02 	sts	0x027F, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    78e4:	10 92 ad 02 	sts	0x02AD, r1
    78e8:	10 92 ae 02 	sts	0x02AE, r1
    78ec:	10 92 af 02 	sts	0x02AF, r1
    78f0:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    78f4:	10 92 82 02 	sts	0x0282, r1
    78f8:	10 92 81 02 	sts	0x0281, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    78fc:	10 92 b1 02 	sts	0x02B1, r1
    7900:	10 92 b2 02 	sts	0x02B2, r1
    7904:	10 92 b3 02 	sts	0x02B3, r1
    7908:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    790c:	10 92 84 02 	sts	0x0284, r1
    7910:	10 92 83 02 	sts	0x0283, r1
					}				
					
					calibrationCycle++;
    7914:	d0 93 52 04 	sts	0x0452, r29
    7918:	c0 93 51 04 	sts	0x0451, r28
    791c:	27 ce       	rjmp	.-946    	; 0x756c <calibrateSensors+0x1c4>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    791e:	80 91 55 02 	lds	r24, 0x0255
    7922:	90 91 56 02 	lds	r25, 0x0256
    7926:	aa 27       	eor	r26, r26
    7928:	97 fd       	sbrc	r25, 7
    792a:	a0 95       	com	r26
    792c:	ba 2f       	mov	r27, r26
    792e:	20 91 85 02 	lds	r18, 0x0285
    7932:	30 91 86 02 	lds	r19, 0x0286
    7936:	40 91 87 02 	lds	r20, 0x0287
    793a:	50 91 88 02 	lds	r21, 0x0288
    793e:	82 0f       	add	r24, r18
    7940:	93 1f       	adc	r25, r19
    7942:	a4 1f       	adc	r26, r20
    7944:	b5 1f       	adc	r27, r21
    7946:	80 93 85 02 	sts	0x0285, r24
    794a:	90 93 86 02 	sts	0x0286, r25
    794e:	a0 93 87 02 	sts	0x0287, r26
    7952:	b0 93 88 02 	sts	0x0288, r27
    7956:	80 91 57 02 	lds	r24, 0x0257
    795a:	90 91 58 02 	lds	r25, 0x0258
    795e:	aa 27       	eor	r26, r26
    7960:	97 fd       	sbrc	r25, 7
    7962:	a0 95       	com	r26
    7964:	ba 2f       	mov	r27, r26
    7966:	20 91 89 02 	lds	r18, 0x0289
    796a:	30 91 8a 02 	lds	r19, 0x028A
    796e:	40 91 8b 02 	lds	r20, 0x028B
    7972:	50 91 8c 02 	lds	r21, 0x028C
    7976:	82 0f       	add	r24, r18
    7978:	93 1f       	adc	r25, r19
    797a:	a4 1f       	adc	r26, r20
    797c:	b5 1f       	adc	r27, r21
    797e:	80 93 89 02 	sts	0x0289, r24
    7982:	90 93 8a 02 	sts	0x028A, r25
    7986:	a0 93 8b 02 	sts	0x028B, r26
    798a:	b0 93 8c 02 	sts	0x028C, r27
    798e:	80 91 59 02 	lds	r24, 0x0259
    7992:	90 91 5a 02 	lds	r25, 0x025A
    7996:	aa 27       	eor	r26, r26
    7998:	97 fd       	sbrc	r25, 7
    799a:	a0 95       	com	r26
    799c:	ba 2f       	mov	r27, r26
    799e:	20 91 8d 02 	lds	r18, 0x028D
    79a2:	30 91 8e 02 	lds	r19, 0x028E
    79a6:	40 91 8f 02 	lds	r20, 0x028F
    79aa:	50 91 90 02 	lds	r21, 0x0290
    79ae:	82 0f       	add	r24, r18
    79b0:	93 1f       	adc	r25, r19
    79b2:	a4 1f       	adc	r26, r20
    79b4:	b5 1f       	adc	r27, r21
    79b6:	80 93 8d 02 	sts	0x028D, r24
    79ba:	90 93 8e 02 	sts	0x028E, r25
    79be:	a0 93 8f 02 	sts	0x028F, r26
    79c2:	b0 93 90 02 	sts	0x0290, r27
    79c6:	80 91 5b 02 	lds	r24, 0x025B
    79ca:	90 91 5c 02 	lds	r25, 0x025C
    79ce:	aa 27       	eor	r26, r26
    79d0:	97 fd       	sbrc	r25, 7
    79d2:	a0 95       	com	r26
    79d4:	ba 2f       	mov	r27, r26
    79d6:	20 91 91 02 	lds	r18, 0x0291
    79da:	30 91 92 02 	lds	r19, 0x0292
    79de:	40 91 93 02 	lds	r20, 0x0293
    79e2:	50 91 94 02 	lds	r21, 0x0294
    79e6:	82 0f       	add	r24, r18
    79e8:	93 1f       	adc	r25, r19
    79ea:	a4 1f       	adc	r26, r20
    79ec:	b5 1f       	adc	r27, r21
    79ee:	80 93 91 02 	sts	0x0291, r24
    79f2:	90 93 92 02 	sts	0x0292, r25
    79f6:	a0 93 93 02 	sts	0x0293, r26
    79fa:	b0 93 94 02 	sts	0x0294, r27
    79fe:	80 91 5d 02 	lds	r24, 0x025D
    7a02:	90 91 5e 02 	lds	r25, 0x025E
    7a06:	aa 27       	eor	r26, r26
    7a08:	97 fd       	sbrc	r25, 7
    7a0a:	a0 95       	com	r26
    7a0c:	ba 2f       	mov	r27, r26
    7a0e:	20 91 95 02 	lds	r18, 0x0295
    7a12:	30 91 96 02 	lds	r19, 0x0296
    7a16:	40 91 97 02 	lds	r20, 0x0297
    7a1a:	50 91 98 02 	lds	r21, 0x0298
    7a1e:	82 0f       	add	r24, r18
    7a20:	93 1f       	adc	r25, r19
    7a22:	a4 1f       	adc	r26, r20
    7a24:	b5 1f       	adc	r27, r21
    7a26:	80 93 95 02 	sts	0x0295, r24
    7a2a:	90 93 96 02 	sts	0x0296, r25
    7a2e:	a0 93 97 02 	sts	0x0297, r26
    7a32:	b0 93 98 02 	sts	0x0298, r27
    7a36:	80 91 5f 02 	lds	r24, 0x025F
    7a3a:	90 91 60 02 	lds	r25, 0x0260
    7a3e:	aa 27       	eor	r26, r26
    7a40:	97 fd       	sbrc	r25, 7
    7a42:	a0 95       	com	r26
    7a44:	ba 2f       	mov	r27, r26
    7a46:	20 91 99 02 	lds	r18, 0x0299
    7a4a:	30 91 9a 02 	lds	r19, 0x029A
    7a4e:	40 91 9b 02 	lds	r20, 0x029B
    7a52:	50 91 9c 02 	lds	r21, 0x029C
    7a56:	82 0f       	add	r24, r18
    7a58:	93 1f       	adc	r25, r19
    7a5a:	a4 1f       	adc	r26, r20
    7a5c:	b5 1f       	adc	r27, r21
    7a5e:	80 93 99 02 	sts	0x0299, r24
    7a62:	90 93 9a 02 	sts	0x029A, r25
    7a66:	a0 93 9b 02 	sts	0x029B, r26
    7a6a:	b0 93 9c 02 	sts	0x029C, r27
    7a6e:	80 91 61 02 	lds	r24, 0x0261
    7a72:	90 91 62 02 	lds	r25, 0x0262
    7a76:	aa 27       	eor	r26, r26
    7a78:	97 fd       	sbrc	r25, 7
    7a7a:	a0 95       	com	r26
    7a7c:	ba 2f       	mov	r27, r26
    7a7e:	20 91 9d 02 	lds	r18, 0x029D
    7a82:	30 91 9e 02 	lds	r19, 0x029E
    7a86:	40 91 9f 02 	lds	r20, 0x029F
    7a8a:	50 91 a0 02 	lds	r21, 0x02A0
    7a8e:	82 0f       	add	r24, r18
    7a90:	93 1f       	adc	r25, r19
    7a92:	a4 1f       	adc	r26, r20
    7a94:	b5 1f       	adc	r27, r21
    7a96:	80 93 9d 02 	sts	0x029D, r24
    7a9a:	90 93 9e 02 	sts	0x029E, r25
    7a9e:	a0 93 9f 02 	sts	0x029F, r26
    7aa2:	b0 93 a0 02 	sts	0x02A0, r27
    7aa6:	80 91 63 02 	lds	r24, 0x0263
    7aaa:	90 91 64 02 	lds	r25, 0x0264
    7aae:	aa 27       	eor	r26, r26
    7ab0:	97 fd       	sbrc	r25, 7
    7ab2:	a0 95       	com	r26
    7ab4:	ba 2f       	mov	r27, r26
    7ab6:	20 91 a1 02 	lds	r18, 0x02A1
    7aba:	30 91 a2 02 	lds	r19, 0x02A2
    7abe:	40 91 a3 02 	lds	r20, 0x02A3
    7ac2:	50 91 a4 02 	lds	r21, 0x02A4
    7ac6:	82 0f       	add	r24, r18
    7ac8:	93 1f       	adc	r25, r19
    7aca:	a4 1f       	adc	r26, r20
    7acc:	b5 1f       	adc	r27, r21
    7ace:	80 93 a1 02 	sts	0x02A1, r24
    7ad2:	90 93 a2 02 	sts	0x02A2, r25
    7ad6:	a0 93 a3 02 	sts	0x02A3, r26
    7ada:	b0 93 a4 02 	sts	0x02A4, r27
    7ade:	80 91 65 02 	lds	r24, 0x0265
    7ae2:	90 91 66 02 	lds	r25, 0x0266
    7ae6:	aa 27       	eor	r26, r26
    7ae8:	97 fd       	sbrc	r25, 7
    7aea:	a0 95       	com	r26
    7aec:	ba 2f       	mov	r27, r26
    7aee:	20 91 a5 02 	lds	r18, 0x02A5
    7af2:	30 91 a6 02 	lds	r19, 0x02A6
    7af6:	40 91 a7 02 	lds	r20, 0x02A7
    7afa:	50 91 a8 02 	lds	r21, 0x02A8
    7afe:	82 0f       	add	r24, r18
    7b00:	93 1f       	adc	r25, r19
    7b02:	a4 1f       	adc	r26, r20
    7b04:	b5 1f       	adc	r27, r21
    7b06:	80 93 a5 02 	sts	0x02A5, r24
    7b0a:	90 93 a6 02 	sts	0x02A6, r25
    7b0e:	a0 93 a7 02 	sts	0x02A7, r26
    7b12:	b0 93 a8 02 	sts	0x02A8, r27
    7b16:	80 91 67 02 	lds	r24, 0x0267
    7b1a:	90 91 68 02 	lds	r25, 0x0268
    7b1e:	aa 27       	eor	r26, r26
    7b20:	97 fd       	sbrc	r25, 7
    7b22:	a0 95       	com	r26
    7b24:	ba 2f       	mov	r27, r26
    7b26:	20 91 a9 02 	lds	r18, 0x02A9
    7b2a:	30 91 aa 02 	lds	r19, 0x02AA
    7b2e:	40 91 ab 02 	lds	r20, 0x02AB
    7b32:	50 91 ac 02 	lds	r21, 0x02AC
    7b36:	82 0f       	add	r24, r18
    7b38:	93 1f       	adc	r25, r19
    7b3a:	a4 1f       	adc	r26, r20
    7b3c:	b5 1f       	adc	r27, r21
    7b3e:	80 93 a9 02 	sts	0x02A9, r24
    7b42:	90 93 aa 02 	sts	0x02AA, r25
    7b46:	a0 93 ab 02 	sts	0x02AB, r26
    7b4a:	b0 93 ac 02 	sts	0x02AC, r27
    7b4e:	80 91 69 02 	lds	r24, 0x0269
    7b52:	90 91 6a 02 	lds	r25, 0x026A
    7b56:	aa 27       	eor	r26, r26
    7b58:	97 fd       	sbrc	r25, 7
    7b5a:	a0 95       	com	r26
    7b5c:	ba 2f       	mov	r27, r26
    7b5e:	20 91 ad 02 	lds	r18, 0x02AD
    7b62:	30 91 ae 02 	lds	r19, 0x02AE
    7b66:	40 91 af 02 	lds	r20, 0x02AF
    7b6a:	50 91 b0 02 	lds	r21, 0x02B0
    7b6e:	82 0f       	add	r24, r18
    7b70:	93 1f       	adc	r25, r19
    7b72:	a4 1f       	adc	r26, r20
    7b74:	b5 1f       	adc	r27, r21
    7b76:	80 93 ad 02 	sts	0x02AD, r24
    7b7a:	90 93 ae 02 	sts	0x02AE, r25
    7b7e:	a0 93 af 02 	sts	0x02AF, r26
    7b82:	b0 93 b0 02 	sts	0x02B0, r27
    7b86:	80 91 6b 02 	lds	r24, 0x026B
    7b8a:	90 91 6c 02 	lds	r25, 0x026C
    7b8e:	aa 27       	eor	r26, r26
    7b90:	97 fd       	sbrc	r25, 7
    7b92:	a0 95       	com	r26
    7b94:	ba 2f       	mov	r27, r26
    7b96:	20 91 b1 02 	lds	r18, 0x02B1
    7b9a:	30 91 b2 02 	lds	r19, 0x02B2
    7b9e:	40 91 b3 02 	lds	r20, 0x02B3
    7ba2:	50 91 b4 02 	lds	r21, 0x02B4
    7ba6:	82 0f       	add	r24, r18
    7ba8:	93 1f       	adc	r25, r19
    7baa:	a4 1f       	adc	r26, r20
    7bac:	b5 1f       	adc	r27, r21
    7bae:	80 93 b1 02 	sts	0x02B1, r24
    7bb2:	90 93 b2 02 	sts	0x02B2, r25
    7bb6:	a0 93 b3 02 	sts	0x02B3, r26
    7bba:	b0 93 b4 02 	sts	0x02B4, r27
				}

				calibrationCycle++;
    7bbe:	6f 5f       	subi	r22, 0xFF	; 255
    7bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    7bc2:	70 93 52 04 	sts	0x0452, r23
    7bc6:	60 93 51 04 	sts	0x0451, r22
    7bca:	d0 cc       	rjmp	.-1632   	; 0x756c <calibrateSensors+0x1c4>

		}

	} else {

		pwm_red = 255;
    7bcc:	8f ef       	ldi	r24, 0xFF	; 255
    7bce:	80 93 08 02 	sts	0x0208, r24
		pwm_green = 0;
    7bd2:	10 92 09 02 	sts	0x0209, r1
		pwm_blue = 255;
    7bd6:	80 93 0a 02 	sts	0x020A, r24
		updateRedLed(pwm_red);
    7bda:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <updateRedLed>
		updateGreenLed(pwm_green);
    7bde:	80 91 09 02 	lds	r24, 0x0209
    7be2:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <updateGreenLed>
		updateBlueLed(pwm_blue);
    7be6:	80 91 0a 02 	lds	r24, 0x020A
    7bea:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <updateBlueLed>

		setLeftSpeed(-10);
    7bee:	86 ef       	ldi	r24, 0xF6	; 246
    7bf0:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <setLeftSpeed>
		setRightSpeed(10);
    7bf4:	8a e0       	ldi	r24, 0x0A	; 10
    7bf6:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <setRightSpeed>

		lastTick = getTime100MicroSec();
    7bfa:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    7bfe:	60 93 70 04 	sts	0x0470, r22
    7c02:	70 93 71 04 	sts	0x0471, r23
    7c06:	80 93 72 04 	sts	0x0472, r24
    7c0a:	90 93 73 04 	sts	0x0473, r25
    7c0e:	3d c0       	rjmp	.+122    	; 0x7c8a <calibrateSensors+0x8e2>
			readAccelXYZ();

			handleMotorsWithSpeedController();

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
				if(accXMax < accX) {
    7c10:	20 91 2c 04 	lds	r18, 0x042C
    7c14:	30 91 2d 04 	lds	r19, 0x042D
    7c18:	80 91 3a 04 	lds	r24, 0x043A
    7c1c:	90 91 3b 04 	lds	r25, 0x043B
    7c20:	82 17       	cp	r24, r18
    7c22:	93 07       	cpc	r25, r19
    7c24:	24 f4       	brge	.+8      	; 0x7c2e <calibrateSensors+0x886>
					accXMax = accX;
    7c26:	30 93 3b 04 	sts	0x043B, r19
    7c2a:	20 93 3a 04 	sts	0x043A, r18
				}
				if(accXMin > accX) {
    7c2e:	80 91 3c 04 	lds	r24, 0x043C
    7c32:	90 91 3d 04 	lds	r25, 0x043D
    7c36:	28 17       	cp	r18, r24
    7c38:	39 07       	cpc	r19, r25
    7c3a:	24 f4       	brge	.+8      	; 0x7c44 <calibrateSensors+0x89c>
					accXMin = accX;
    7c3c:	30 93 3d 04 	sts	0x043D, r19
    7c40:	20 93 3c 04 	sts	0x043C, r18
				}
				if(accYMax < accY) {
    7c44:	20 91 2e 04 	lds	r18, 0x042E
    7c48:	30 91 2f 04 	lds	r19, 0x042F
    7c4c:	80 91 3e 04 	lds	r24, 0x043E
    7c50:	90 91 3f 04 	lds	r25, 0x043F
    7c54:	82 17       	cp	r24, r18
    7c56:	93 07       	cpc	r25, r19
    7c58:	24 f4       	brge	.+8      	; 0x7c62 <calibrateSensors+0x8ba>
					accYMax = accY;
    7c5a:	30 93 3f 04 	sts	0x043F, r19
    7c5e:	20 93 3e 04 	sts	0x043E, r18
				}
				if(accYMin > accY) {
    7c62:	80 91 40 04 	lds	r24, 0x0440
    7c66:	90 91 41 04 	lds	r25, 0x0441
    7c6a:	28 17       	cp	r18, r24
    7c6c:	39 07       	cpc	r19, r25
    7c6e:	24 f4       	brge	.+8      	; 0x7c78 <calibrateSensors+0x8d0>
					accYMin = accY;
    7c70:	30 93 41 04 	sts	0x0441, r19
    7c74:	20 93 40 04 	sts	0x0440, r18
				}
				calibrationCycle++;
    7c78:	80 91 51 04 	lds	r24, 0x0451
    7c7c:	90 91 52 04 	lds	r25, 0x0452
    7c80:	01 96       	adiw	r24, 0x01	; 1
    7c82:	90 93 52 04 	sts	0x0452, r25
    7c86:	80 93 51 04 	sts	0x0451, r24

		lastTick = getTime100MicroSec();

		while(1) {

			readAccelXYZ();
    7c8a:	0e 94 95 38 	call	0x712a	; 0x712a <readAccelXYZ>

			handleMotorsWithSpeedController();
    7c8e:	0e 94 04 2a 	call	0x5408	; 0x5408 <handleMotorsWithSpeedController>

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
    7c92:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    7c96:	20 91 70 04 	lds	r18, 0x0470
    7c9a:	30 91 71 04 	lds	r19, 0x0471
    7c9e:	40 91 72 04 	lds	r20, 0x0472
    7ca2:	50 91 73 04 	lds	r21, 0x0473
    7ca6:	62 1b       	sub	r22, r18
    7ca8:	73 0b       	sbc	r23, r19
    7caa:	84 0b       	sbc	r24, r20
    7cac:	95 0b       	sbc	r25, r21
    7cae:	6e 53       	subi	r22, 0x3E	; 62
    7cb0:	76 49       	sbci	r23, 0x96	; 150
    7cb2:	80 40       	sbci	r24, 0x00	; 0
    7cb4:	90 40       	sbci	r25, 0x00	; 0
    7cb6:	08 f4       	brcc	.+2      	; 0x7cba <calibrateSensors+0x912>
    7cb8:	ab cf       	rjmp	.-170    	; 0x7c10 <calibrateSensors+0x868>
				if(accYMin > accY) {
					accYMin = accY;
				}
				calibrationCycle++;
			} else {
				accOffsetX = (accXMax + accXMin)>>1;
    7cba:	80 91 3c 04 	lds	r24, 0x043C
    7cbe:	90 91 3d 04 	lds	r25, 0x043D
    7cc2:	20 91 3a 04 	lds	r18, 0x043A
    7cc6:	30 91 3b 04 	lds	r19, 0x043B
    7cca:	82 0f       	add	r24, r18
    7ccc:	93 1f       	adc	r25, r19
    7cce:	95 95       	asr	r25
    7cd0:	87 95       	ror	r24
    7cd2:	90 93 33 04 	sts	0x0433, r25
    7cd6:	80 93 32 04 	sts	0x0432, r24
				accOffsetY = (accYMax + accYMin)>>1;
    7cda:	80 91 40 04 	lds	r24, 0x0440
    7cde:	90 91 41 04 	lds	r25, 0x0441
    7ce2:	20 91 3e 04 	lds	r18, 0x043E
    7ce6:	30 91 3f 04 	lds	r19, 0x043F
    7cea:	82 0f       	add	r24, r18
    7cec:	93 1f       	adc	r25, r19
    7cee:	95 95       	asr	r25
    7cf0:	87 95       	ror	r24
    7cf2:	90 93 35 04 	sts	0x0435, r25
    7cf6:	80 93 34 04 	sts	0x0434, r24
				break;
			}

		}

		setLeftSpeed(0);
    7cfa:	80 e0       	ldi	r24, 0x00	; 0
    7cfc:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <setLeftSpeed>
		setRightSpeed(0);
    7d00:	80 e0       	ldi	r24, 0x00	; 0
    7d02:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <setRightSpeed>
    7d06:	1d cc       	rjmp	.-1990   	; 0x7542 <calibrateSensors+0x19a>
	accYMax = -1023;
	accYMin = 1023;
	accOffsetXSum = 0;
	accOffsetYSum = 0;

	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    7d08:	90 95       	com	r25
    7d0a:	81 95       	neg	r24
    7d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d0e:	b0 cb       	rjmp	.-2208   	; 0x7470 <calibrateSensors+0xc8>

00007d10 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    7d10:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7d14:	80 91 10 02 	lds	r24, 0x0210
    7d18:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7d1c:	88 23       	and	r24, r24
    7d1e:	49 f4       	brne	.+18     	; 0x7d32 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7d20:	86 e1       	ldi	r24, 0x16	; 22
    7d22:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7d26:	85 e4       	ldi	r24, 0x45	; 69
    7d28:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7d2c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>
    7d30:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7d32:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    7d36:	86 ea       	ldi	r24, 0xA6	; 166
    7d38:	90 e0       	ldi	r25, 0x00	; 0
    7d3a:	90 93 11 02 	sts	0x0211, r25
    7d3e:	80 93 10 02 	sts	0x0210, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7d42:	86 ea       	ldi	r24, 0xA6	; 166
    7d44:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7d48:	88 23       	and	r24, r24
    7d4a:	41 f5       	brne	.+80     	; 0x7d9c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7d4c:	8d e2       	ldi	r24, 0x2D	; 45
    7d4e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_write(0x08);	// measurement mode
    7d52:	88 e0       	ldi	r24, 0x08	; 8
    7d54:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7d58:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7d5c:	80 91 10 02 	lds	r24, 0x0210
    7d60:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7d64:	88 23       	and	r24, r24
    7d66:	d1 f4       	brne	.+52     	; 0x7d9c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7d68:	81 e3       	ldi	r24, 0x31	; 49
    7d6a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7d6e:	80 e0       	ldi	r24, 0x00	; 0
    7d70:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7d74:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7d78:	80 91 10 02 	lds	r24, 0x0210
    7d7c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7d80:	88 23       	and	r24, r24
    7d82:	61 f4       	brne	.+24     	; 0x7d9c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    7d84:	8c e2       	ldi	r24, 0x2C	; 44
    7d86:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7d8a:	89 e0       	ldi	r24, 0x09	; 9
    7d8c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7d90:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    7d94:	81 e0       	ldi	r24, 0x01	; 1
    7d96:	80 93 2b 04 	sts	0x042B, r24
    7d9a:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7d9c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    7da0:	82 e0       	ldi	r24, 0x02	; 2
    7da2:	80 93 2b 04 	sts	0x042B, r24
    7da6:	08 95       	ret

00007da8 <readCalibrationFromFlash>:
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
}

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7da8:	84 ee       	ldi	r24, 0xE4	; 228
    7daa:	98 e0       	ldi	r25, 0x08	; 8
    7dac:	6c e6       	ldi	r22, 0x6C	; 108
    7dae:	7f e0       	ldi	r23, 0x0F	; 15
    7db0:	40 e9       	ldi	r20, 0x90	; 144
    7db2:	50 e0       	ldi	r21, 0x00	; 0
    7db4:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__eerd_block_m2560>
}
    7db8:	08 95       	ret

00007dba <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7dba:	84 ee       	ldi	r24, 0xE4	; 228
    7dbc:	98 e0       	ldi	r25, 0x08	; 8
    7dbe:	6c e6       	ldi	r22, 0x6C	; 108
    7dc0:	7f e0       	ldi	r23, 0x0F	; 15
    7dc2:	40 e9       	ldi	r20, 0x90	; 144
    7dc4:	50 e0       	ldi	r21, 0x00	; 0
    7dc6:	0e 94 82 4f 	call	0x9f04	; 0x9f04 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    7dca:	8a e6       	ldi	r24, 0x6A	; 106
    7dcc:	9f e0       	ldi	r25, 0x0F	; 15
    7dce:	65 e5       	ldi	r22, 0x55	; 85
    7dd0:	7a ea       	ldi	r23, 0xAA	; 170
    7dd2:	0e 94 a4 4f 	call	0x9f48	; 0x9f48 <__eeupd_word_m2560>
}
    7dd6:	08 95       	ret

00007dd8 <irCommInitTransmitter>:
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    7dd8:	82 e0       	ldi	r24, 0x02	; 2
    7dda:	80 93 d2 04 	sts	0x04D2, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    7dde:	81 e0       	ldi	r24, 0x01	; 1
    7de0:	80 93 d5 04 	sts	0x04D5, r24
}
    7de4:	08 95       	ret

00007de6 <irCommInitReceiver>:

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    7de6:	81 e0       	ldi	r24, 0x01	; 1
    7de8:	80 93 d2 04 	sts	0x04D2, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    7dec:	80 93 d5 04 	sts	0x04D5, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    7df0:	80 93 d3 04 	sts	0x04D3, r24
}
    7df4:	08 95       	ret

00007df6 <irCommDeinit>:
	irCommInitVars();
	irCommInitReceiver();
}

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
    7df6:	10 92 d2 04 	sts	0x04D2, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    7dfa:	10 92 d4 04 	sts	0x04D4, r1
}
    7dfe:	08 95       	ret

00007e00 <irCommSendData>:
//	irCommTxSensorMask = sensorMask;
//	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
//}

void irCommSendData(unsigned char value) {
	irCommTxByte = value;
    7e00:	80 93 25 05 	sts	0x0525, r24
	irCommTxByteEnqueued = 1;
    7e04:	81 e0       	ldi	r24, 0x01	; 1
    7e06:	80 93 26 05 	sts	0x0526, r24
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
    7e0a:	82 e0       	ldi	r24, 0x02	; 2
    7e0c:	80 93 d3 04 	sts	0x04D3, r24
}
    7e10:	08 95       	ret

00007e12 <irCommDataSent>:

unsigned char irCommDataSent() {
    7e12:	90 e0       	ldi	r25, 0x00	; 0
    7e14:	80 91 26 05 	lds	r24, 0x0526
    7e18:	81 30       	cpi	r24, 0x01	; 1
    7e1a:	09 f0       	breq	.+2      	; 0x7e1e <irCommDataSent+0xc>
    7e1c:	91 e0       	ldi	r25, 0x01	; 1
	if(irCommTxByteEnqueued==1) {
		return 0;
	} else {
		return 1;
	}
}
    7e1e:	89 2f       	mov	r24, r25
    7e20:	08 95       	ret

00007e22 <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    7e22:	80 91 1a 05 	lds	r24, 0x051A
    7e26:	08 95       	ret

00007e28 <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    7e28:	10 92 1a 05 	sts	0x051A, r1
	return irCommRxLastDataReceived;
}
    7e2c:	80 91 19 05 	lds	r24, 0x0519
    7e30:	08 95       	ret

00007e32 <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    7e32:	80 91 15 02 	lds	r24, 0x0215
    7e36:	08 95       	ret

00007e38 <getBearing>:

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    7e38:	83 30       	cpi	r24, 0x03	; 3
    7e3a:	71 f1       	breq	.+92     	; 0x7e98 <getBearing+0x60>
    7e3c:	84 30       	cpi	r24, 0x04	; 4
    7e3e:	60 f0       	brcs	.+24     	; 0x7e58 <getBearing+0x20>
    7e40:	85 30       	cpi	r24, 0x05	; 5
    7e42:	d1 f0       	breq	.+52     	; 0x7e78 <getBearing+0x40>
    7e44:	85 30       	cpi	r24, 0x05	; 5
    7e46:	80 f0       	brcs	.+32     	; 0x7e68 <getBearing+0x30>
    7e48:	86 30       	cpi	r24, 0x06	; 6
    7e4a:	f1 f0       	breq	.+60     	; 0x7e88 <getBearing+0x50>
    7e4c:	87 30       	cpi	r24, 0x07	; 7
    7e4e:	c1 f0       	breq	.+48     	; 0x7e80 <getBearing+0x48>
		case 5:
			return 135;
		case 6:
			return 90;
		case 7:
			return 45;
    7e50:	2f ef       	ldi	r18, 0xFF	; 255
    7e52:	3f ef       	ldi	r19, 0xFF	; 255
		default:
			return -1;
	}
}
    7e54:	c9 01       	movw	r24, r18
    7e56:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    7e58:	81 30       	cpi	r24, 0x01	; 1
    7e5a:	d1 f0       	breq	.+52     	; 0x7e90 <getBearing+0x58>
    7e5c:	82 30       	cpi	r24, 0x02	; 2
    7e5e:	40 f0       	brcs	.+16     	; 0x7e70 <getBearing+0x38>
    7e60:	26 ea       	ldi	r18, 0xA6	; 166
    7e62:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e64:	c9 01       	movw	r24, r18
    7e66:	08 95       	ret
		case 1:
			return -45;
		case 2:
			return -90;
		case 3:
			return -135;
    7e68:	24 eb       	ldi	r18, 0xB4	; 180
    7e6a:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e6c:	c9 01       	movw	r24, r18
    7e6e:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    7e70:	20 e0       	ldi	r18, 0x00	; 0
    7e72:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e74:	c9 01       	movw	r24, r18
    7e76:	08 95       	ret
		case 2:
			return -90;
		case 3:
			return -135;
		case 4:
			return 180;
    7e78:	27 e8       	ldi	r18, 0x87	; 135
    7e7a:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e7c:	c9 01       	movw	r24, r18
    7e7e:	08 95       	ret
		case 4:
			return 180;
		case 5:
			return 135;
		case 6:
			return 90;
    7e80:	2d e2       	ldi	r18, 0x2D	; 45
    7e82:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e84:	c9 01       	movw	r24, r18
    7e86:	08 95       	ret
		case 3:
			return -135;
		case 4:
			return 180;
		case 5:
			return 135;
    7e88:	2a e5       	ldi	r18, 0x5A	; 90
    7e8a:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e8c:	c9 01       	movw	r24, r18
    7e8e:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    7e90:	23 ed       	ldi	r18, 0xD3	; 211
    7e92:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e94:	c9 01       	movw	r24, r18
    7e96:	08 95       	ret
		case 0:
			return 0;
		case 1:
			return -45;
		case 2:
			return -90;
    7e98:	29 e7       	ldi	r18, 0x79	; 121
    7e9a:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    7e9c:	c9 01       	movw	r24, r18
    7e9e:	08 95       	ret

00007ea0 <resetDebugVariables>:
void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
}

void resetDebugVariables() {
    7ea0:	cf 92       	push	r12
    7ea2:	df 92       	push	r13
    7ea4:	ef 92       	push	r14
    7ea6:	ff 92       	push	r15
    7ea8:	0f 93       	push	r16
    7eaa:	1f 93       	push	r17
	irCommRxMaxSensorIndexTemp=0;
    7eac:	10 92 ef 04 	sts	0x04EF, r1
	irCommRxMaxDiffIndexTemp=0;
    7eb0:	10 92 f0 04 	sts	0x04F0, r1
	irCommMaxSensorValueCurrIndexTemp=0;
    7eb4:	10 92 f3 04 	sts	0x04F3, r1
	irCommMinSensorValueCurrIndexTemp=0;
    7eb8:	10 92 f4 04 	sts	0x04F4, r1
	memset(irCommRxMaxSensorTemp, 0xFF, 4);
    7ebc:	cc 24       	eor	r12, r12
    7ebe:	ca 94       	dec	r12
    7ec0:	dc 2c       	mov	r13, r12
    7ec2:	76 01       	movw	r14, r12
    7ec4:	c0 92 2b 0b 	sts	0x0B2B, r12
    7ec8:	d0 92 2c 0b 	sts	0x0B2C, r13
    7ecc:	e0 92 2d 0b 	sts	0x0B2D, r14
    7ed0:	f0 92 2e 0b 	sts	0x0B2E, r15
	memset(irCommRxMaxDiffTemp, 0xFF, 4);
    7ed4:	c0 92 64 0b 	sts	0x0B64, r12
    7ed8:	d0 92 65 0b 	sts	0x0B65, r13
    7edc:	e0 92 66 0b 	sts	0x0B66, r14
    7ee0:	f0 92 67 0b 	sts	0x0B67, r15
	memset(irCommMaxSensorValueCurrTemp, 0xFF, 4);
    7ee4:	c0 92 3a 05 	sts	0x053A, r12
    7ee8:	d0 92 3b 05 	sts	0x053B, r13
    7eec:	e0 92 3c 05 	sts	0x053C, r14
    7ef0:	f0 92 3d 05 	sts	0x053D, r15
	memset(irCommMinSensorValueCurrTemp, 0xFF, 4);
    7ef4:	c0 92 2f 0b 	sts	0x0B2F, r12
    7ef8:	d0 92 30 0b 	sts	0x0B30, r13
    7efc:	e0 92 31 0b 	sts	0x0B31, r14
    7f00:	f0 92 32 0b 	sts	0x0B32, r15

	irCommStateIndexTemp = 0;					
    7f04:	10 92 fc 04 	sts	0x04FC, r1
	memset(irCommStateTemp, 0xFF, 14);
    7f08:	8e e3       	ldi	r24, 0x3E	; 62
    7f0a:	95 e0       	ldi	r25, 0x05	; 5
    7f0c:	6f ef       	ldi	r22, 0xFF	; 255
    7f0e:	70 e0       	ldi	r23, 0x00	; 0
    7f10:	4e e0       	ldi	r20, 0x0E	; 14
    7f12:	50 e0       	ldi	r21, 0x00	; 0
    7f14:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <memset>

	irCommShiftCountFinalIndexTemp = 0;
    7f18:	10 92 f6 04 	sts	0x04F6, r1
	memset(irCommShiftCountFinalTemp, 0xFF, 2);
    7f1c:	0f ef       	ldi	r16, 0xFF	; 255
    7f1e:	1f ef       	ldi	r17, 0xFF	; 255
    7f20:	10 93 38 0b 	sts	0x0B38, r17
    7f24:	00 93 37 0b 	sts	0x0B37, r16
	irCommRxStartBitDetectedIndexTemp = 0;
    7f28:	10 92 fb 04 	sts	0x04FB, r1
	memset(irCommRxStartBitDetectedTemp, 0xFF, 2);
    7f2c:	10 93 78 05 	sts	0x0578, r17
    7f30:	00 93 77 05 	sts	0x0577, r16
	irCommSwitchCountIndexTemp = 0;
    7f34:	10 92 f2 04 	sts	0x04F2, r1
	memset(irCommSwitchCountTemp, 0xFF, 2);
    7f38:	10 93 54 05 	sts	0x0554, r17
    7f3c:	00 93 53 05 	sts	0x0553, r16
	irCommMaxSensorSignalFiltIndexTemp = 0;
    7f40:	10 92 ee 04 	sts	0x04EE, r1
	memset(irCommMaxSensorSignalFiltTemp, 0xFF, 80);
    7f44:	89 e7       	ldi	r24, 0x79	; 121
    7f46:	95 e0       	ldi	r25, 0x05	; 5
    7f48:	6f ef       	ldi	r22, 0xFF	; 255
    7f4a:	70 e0       	ldi	r23, 0x00	; 0
    7f4c:	40 e5       	ldi	r20, 0x50	; 80
    7f4e:	50 e0       	ldi	r21, 0x00	; 0
    7f50:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <memset>
	irCommMaxSensorSignalIndexTemp = 0;
    7f54:	10 92 ed 04 	sts	0x04ED, r1
	memset(irCommMaxSensorSignalTemp, 0xFF, 80);
    7f58:	8d e6       	ldi	r24, 0x6D	; 109
    7f5a:	98 e0       	ldi	r25, 0x08	; 8
    7f5c:	6f ef       	ldi	r22, 0xFF	; 255
    7f5e:	70 e0       	ldi	r23, 0x00	; 0
    7f60:	40 e5       	ldi	r20, 0x50	; 80
    7f62:	50 e0       	ldi	r21, 0x00	; 0
    7f64:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <memset>
	irCommProxMeanIndexTemp = 0;
    7f68:	10 92 f1 04 	sts	0x04F1, r1
	memset(irCommProxMeanTemp, 0xFF, 4);
    7f6c:	c0 92 71 05 	sts	0x0571, r12
    7f70:	d0 92 72 05 	sts	0x0572, r13
    7f74:	e0 92 73 05 	sts	0x0573, r14
    7f78:	f0 92 74 05 	sts	0x0574, r15
	irCommComputeShiftIndexTemp = 0;
    7f7c:	10 92 f8 04 	sts	0x04F8, r1
	memset(irCommComputeShiftTemp, 0xFF, 2);
    7f80:	10 93 6f 05 	sts	0x056F, r17
    7f84:	00 93 6e 05 	sts	0x056E, r16
	irCommShiftCountIndexTemp = 0;
    7f88:	10 92 f5 04 	sts	0x04F5, r1
	memset(irCommShiftCountTemp, 0xFF, 2);
    7f8c:	10 93 7e 0b 	sts	0x0B7E, r17
    7f90:	00 93 7d 0b 	sts	0x0B7D, r16
	irCommRxPeakHighToLowIndexTemp = 0;
    7f94:	10 92 f9 04 	sts	0x04F9, r1
	memset(irCommRxPeakHighToLowTemp, 0xFF, 2);
    7f98:	10 93 cc 05 	sts	0x05CC, r17
    7f9c:	00 93 cb 05 	sts	0x05CB, r16
	irCommRxStartPeakDurationIndexTemp = 0;
    7fa0:	10 92 fa 04 	sts	0x04FA, r1
	memset(irCommRxStartPeakDurationTemp, 0xFF, 2);
    7fa4:	10 93 0e 07 	sts	0x070E, r17
    7fa8:	00 93 0d 07 	sts	0x070D, r16
	irCommStartDiffIndexTemp = 0;
    7fac:	10 92 f7 04 	sts	0x04F7, r1
	memset(irCommSyncStateTemp, 0xFF, 2);
    7fb0:	10 93 6d 05 	sts	0x056D, r17
    7fb4:	00 93 6c 05 	sts	0x056C, r16
	irCommSyncStateIndexTemp = 0;
    7fb8:	10 92 fd 04 	sts	0x04FD, r1
	memset(irCommBitsSignalTemp, 0xFF, 400);
    7fbc:	89 e9       	ldi	r24, 0x99	; 153
    7fbe:	99 e0       	ldi	r25, 0x09	; 9
    7fc0:	6f ef       	ldi	r22, 0xFF	; 255
    7fc2:	70 e0       	ldi	r23, 0x00	; 0
    7fc4:	40 e9       	ldi	r20, 0x90	; 144
    7fc6:	51 e0       	ldi	r21, 0x01	; 1
    7fc8:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <memset>
	irCommBitsSignalIndexTemp = 0;
    7fcc:	10 92 fe 04 	sts	0x04FE, r1
	memset(irCommRxBitReceivedTemp, 0xFF, 10);
    7fd0:	81 e6       	ldi	r24, 0x61	; 97
    7fd2:	98 e0       	ldi	r25, 0x08	; 8
    7fd4:	6f ef       	ldi	r22, 0xFF	; 255
    7fd6:	70 e0       	ldi	r23, 0x00	; 0
    7fd8:	4a e0       	ldi	r20, 0x0A	; 10
    7fda:	50 e0       	ldi	r21, 0x00	; 0
    7fdc:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <memset>
	irCommRxBitReceivedIndexTemp = 0;
    7fe0:	10 92 ff 04 	sts	0x04FF, r1
	
	
}
    7fe4:	1f 91       	pop	r17
    7fe6:	0f 91       	pop	r16
    7fe8:	ff 90       	pop	r15
    7fea:	ef 90       	pop	r14
    7fec:	df 90       	pop	r13
    7fee:	cf 90       	pop	r12
    7ff0:	08 95       	ret

00007ff2 <irCommTasks>:

void irCommTasks() {
    7ff2:	2f 92       	push	r2
    7ff4:	3f 92       	push	r3
    7ff6:	4f 92       	push	r4
    7ff8:	5f 92       	push	r5
    7ffa:	6f 92       	push	r6
    7ffc:	7f 92       	push	r7
    7ffe:	8f 92       	push	r8
    8000:	9f 92       	push	r9
    8002:	af 92       	push	r10
    8004:	bf 92       	push	r11
    8006:	cf 92       	push	r12
    8008:	df 92       	push	r13
    800a:	ef 92       	push	r14
    800c:	ff 92       	push	r15
    800e:	0f 93       	push	r16
    8010:	1f 93       	push	r17
    8012:	cf 93       	push	r28
    8014:	df 93       	push	r29
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    8016:	00 91 d4 04 	lds	r16, 0x04D4
    801a:	01 30       	cpi	r16, 0x01	; 1
    801c:	09 f4       	brne	.+2      	; 0x8020 <irCommTasks+0x2e>
    801e:	d2 c0       	rjmp	.+420    	; 0x81c4 <irCommTasks+0x1d2>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    8020:	02 30       	cpi	r16, 0x02	; 2
    8022:	99 f0       	breq	.+38     	; 0x804a <irCommTasks+0x58>

		}

	}

}
    8024:	df 91       	pop	r29
    8026:	cf 91       	pop	r28
    8028:	1f 91       	pop	r17
    802a:	0f 91       	pop	r16
    802c:	ff 90       	pop	r15
    802e:	ef 90       	pop	r14
    8030:	df 90       	pop	r13
    8032:	cf 90       	pop	r12
    8034:	bf 90       	pop	r11
    8036:	af 90       	pop	r10
    8038:	9f 90       	pop	r9
    803a:	8f 90       	pop	r8
    803c:	7f 90       	pop	r7
    803e:	6f 90       	pop	r6
    8040:	5f 90       	pop	r5
    8042:	4f 90       	pop	r4
    8044:	3f 90       	pop	r3
    8046:	2f 90       	pop	r2
    8048:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    804a:	80 91 d5 04 	lds	r24, 0x04D5
    804e:	82 30       	cpi	r24, 0x02	; 2
    8050:	09 f4       	brne	.+2      	; 0x8054 <irCommTasks+0x62>
    8052:	68 c3       	rjmp	.+1744   	; 0x8724 <irCommTasks+0x732>
    8054:	85 30       	cpi	r24, 0x05	; 5
    8056:	31 f7       	brne	.-52     	; 0x8024 <irCommTasks+0x32>
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:				
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    8058:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    805c:	20 91 dd 04 	lds	r18, 0x04DD
    8060:	30 91 de 04 	lds	r19, 0x04DE
    8064:	40 91 df 04 	lds	r20, 0x04DF
    8068:	50 91 e0 04 	lds	r21, 0x04E0
    806c:	62 1b       	sub	r22, r18
    806e:	73 0b       	sbc	r23, r19
    8070:	84 0b       	sbc	r24, r20
    8072:	95 0b       	sbc	r25, r21
    8074:	60 93 d9 04 	sts	0x04D9, r22
    8078:	70 93 da 04 	sts	0x04DA, r23
    807c:	80 93 db 04 	sts	0x04DB, r24
    8080:	90 93 dc 04 	sts	0x04DC, r25
				irCommTickCounter2 = getTime100MicroSec();
    8084:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    8088:	60 93 dd 04 	sts	0x04DD, r22
    808c:	70 93 de 04 	sts	0x04DE, r23
    8090:	80 93 df 04 	sts	0x04DF, r24
    8094:	90 93 e0 04 	sts	0x04E0, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
    8098:	00 93 56 05 	sts	0x0556, r16
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
    809c:	83 e0       	ldi	r24, 0x03	; 3
    809e:	80 93 57 05 	sts	0x0557, r24
				irCommTxCrc = 0;
    80a2:	10 92 2b 05 	sts	0x052B, r1
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    80a6:	30 91 25 05 	lds	r19, 0x0525
    80aa:	83 2f       	mov	r24, r19
    80ac:	90 e0       	ldi	r25, 0x00	; 0
    80ae:	81 70       	andi	r24, 0x01	; 1
    80b0:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    80b2:	80 93 5f 05 	sts	0x055F, r24
					if(irCommTempValue==1) {
    80b6:	01 97       	sbiw	r24, 0x01	; 1
    80b8:	09 f4       	brne	.+2      	; 0x80bc <irCommTasks+0xca>
    80ba:	82 c7       	rjmp	.+3844   	; 0x8fc0 <irCommTasks+0xfce>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    80bc:	83 2f       	mov	r24, r19
    80be:	90 e0       	ldi	r25, 0x00	; 0
    80c0:	95 95       	asr	r25
    80c2:	87 95       	ror	r24
    80c4:	81 70       	andi	r24, 0x01	; 1
    80c6:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    80c8:	80 93 5e 05 	sts	0x055E, r24
					if(irCommTempValue==1) {
    80cc:	01 97       	sbiw	r24, 0x01	; 1
    80ce:	09 f4       	brne	.+2      	; 0x80d2 <irCommTasks+0xe0>
    80d0:	73 c7       	rjmp	.+3814   	; 0x8fb8 <irCommTasks+0xfc6>
    80d2:	20 91 2b 05 	lds	r18, 0x052B
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    80d6:	83 2f       	mov	r24, r19
    80d8:	90 e0       	ldi	r25, 0x00	; 0
    80da:	95 95       	asr	r25
    80dc:	87 95       	ror	r24
    80de:	95 95       	asr	r25
    80e0:	87 95       	ror	r24
    80e2:	81 70       	andi	r24, 0x01	; 1
    80e4:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    80e6:	80 93 5d 05 	sts	0x055D, r24
					if(irCommTempValue==1) {
    80ea:	01 97       	sbiw	r24, 0x01	; 1
    80ec:	09 f4       	brne	.+2      	; 0x80f0 <irCommTasks+0xfe>
    80ee:	62 c7       	rjmp	.+3780   	; 0x8fb4 <irCommTasks+0xfc2>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    80f0:	83 2f       	mov	r24, r19
    80f2:	90 e0       	ldi	r25, 0x00	; 0
    80f4:	95 95       	asr	r25
    80f6:	87 95       	ror	r24
    80f8:	95 95       	asr	r25
    80fa:	87 95       	ror	r24
    80fc:	95 95       	asr	r25
    80fe:	87 95       	ror	r24
    8100:	81 70       	andi	r24, 0x01	; 1
    8102:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8104:	80 93 5c 05 	sts	0x055C, r24
					if(irCommTempValue==1) {
    8108:	01 97       	sbiw	r24, 0x01	; 1
    810a:	09 f4       	brne	.+2      	; 0x810e <irCommTasks+0x11c>
    810c:	51 c7       	rjmp	.+3746   	; 0x8fb0 <irCommTasks+0xfbe>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    810e:	83 2f       	mov	r24, r19
    8110:	90 e0       	ldi	r25, 0x00	; 0
    8112:	95 95       	asr	r25
    8114:	87 95       	ror	r24
    8116:	95 95       	asr	r25
    8118:	87 95       	ror	r24
    811a:	95 95       	asr	r25
    811c:	87 95       	ror	r24
    811e:	95 95       	asr	r25
    8120:	87 95       	ror	r24
    8122:	81 70       	andi	r24, 0x01	; 1
    8124:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8126:	80 93 5b 05 	sts	0x055B, r24
					if(irCommTempValue==1) {
    812a:	01 97       	sbiw	r24, 0x01	; 1
    812c:	09 f4       	brne	.+2      	; 0x8130 <irCommTasks+0x13e>
    812e:	3e c7       	rjmp	.+3708   	; 0x8fac <irCommTasks+0xfba>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8130:	83 2f       	mov	r24, r19
    8132:	90 e0       	ldi	r25, 0x00	; 0
    8134:	95 95       	asr	r25
    8136:	87 95       	ror	r24
    8138:	95 95       	asr	r25
    813a:	87 95       	ror	r24
    813c:	95 95       	asr	r25
    813e:	87 95       	ror	r24
    8140:	95 95       	asr	r25
    8142:	87 95       	ror	r24
    8144:	95 95       	asr	r25
    8146:	87 95       	ror	r24
    8148:	81 70       	andi	r24, 0x01	; 1
    814a:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    814c:	80 93 5a 05 	sts	0x055A, r24
					if(irCommTempValue==1) {
    8150:	01 97       	sbiw	r24, 0x01	; 1
    8152:	09 f4       	brne	.+2      	; 0x8156 <irCommTasks+0x164>
    8154:	29 c7       	rjmp	.+3666   	; 0x8fa8 <irCommTasks+0xfb6>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8156:	83 2f       	mov	r24, r19
    8158:	90 e0       	ldi	r25, 0x00	; 0
    815a:	08 2e       	mov	r0, r24
    815c:	89 2f       	mov	r24, r25
    815e:	00 0c       	add	r0, r0
    8160:	88 1f       	adc	r24, r24
    8162:	99 0b       	sbc	r25, r25
    8164:	00 0c       	add	r0, r0
    8166:	88 1f       	adc	r24, r24
    8168:	99 1f       	adc	r25, r25
    816a:	81 70       	andi	r24, 0x01	; 1
    816c:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    816e:	80 93 59 05 	sts	0x0559, r24
					if(irCommTempValue==1) {
    8172:	01 97       	sbiw	r24, 0x01	; 1
    8174:	09 f4       	brne	.+2      	; 0x8178 <irCommTasks+0x186>
    8176:	16 c7       	rjmp	.+3628   	; 0x8fa4 <irCommTasks+0xfb2>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8178:	83 2f       	mov	r24, r19
    817a:	90 e0       	ldi	r25, 0x00	; 0
    817c:	88 0f       	add	r24, r24
    817e:	89 2f       	mov	r24, r25
    8180:	88 1f       	adc	r24, r24
    8182:	99 0b       	sbc	r25, r25
    8184:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8186:	80 93 58 05 	sts	0x0558, r24
					if(irCommTempValue==1) {
    818a:	81 30       	cpi	r24, 0x01	; 1
    818c:	91 05       	cpc	r25, r1
    818e:	09 f4       	brne	.+2      	; 0x8192 <irCommTasks+0x1a0>
    8190:	07 c7       	rjmp	.+3598   	; 0x8fa0 <irCommTasks+0xfae>
						irCommTxCrc++;
    8192:	90 93 d7 04 	sts	0x04D7, r25
    8196:	80 93 d6 04 	sts	0x04D6, r24
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
				irCommTxCrc = 4 - irCommTxCrc;
    819a:	23 70       	andi	r18, 0x03	; 3
    819c:	84 e0       	ldi	r24, 0x04	; 4
    819e:	82 1b       	sub	r24, r18
    81a0:	80 93 2b 05 	sts	0x052B, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    81a4:	98 2f       	mov	r25, r24
    81a6:	96 95       	lsr	r25
    81a8:	91 70       	andi	r25, 0x01	; 1
    81aa:	90 93 60 05 	sts	0x0560, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    81ae:	81 70       	andi	r24, 0x01	; 1
    81b0:	80 93 61 05 	sts	0x0561, r24
				irCommTxBitCount = 0;							
    81b4:	10 92 2c 05 	sts	0x052C, r1
				irCommTxPulseState = 0;	
    81b8:	10 92 2d 05 	sts	0x052D, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    81bc:	82 e0       	ldi	r24, 0x02	; 2
    81be:	80 93 d5 04 	sts	0x04D5, r24
    81c2:	30 cf       	rjmp	.-416    	; 0x8024 <irCommTasks+0x32>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    81c4:	10 91 d5 04 	lds	r17, 0x04D5
    81c8:	13 30       	cpi	r17, 0x03	; 3
    81ca:	09 f4       	brne	.+2      	; 0x81ce <irCommTasks+0x1dc>
    81cc:	ca c4       	rjmp	.+2452   	; 0x8b62 <irCommTasks+0xb70>
    81ce:	14 30       	cpi	r17, 0x04	; 4
    81d0:	08 f4       	brcc	.+2      	; 0x81d4 <irCommTasks+0x1e2>
    81d2:	af c0       	rjmp	.+350    	; 0x8332 <irCommTasks+0x340>
    81d4:	17 30       	cpi	r17, 0x07	; 7
    81d6:	09 f4       	brne	.+2      	; 0x81da <irCommTasks+0x1e8>
    81d8:	74 c4       	rjmp	.+2280   	; 0x8ac2 <irCommTasks+0xad0>
    81da:	18 30       	cpi	r17, 0x08	; 8
    81dc:	09 f4       	brne	.+2      	; 0x81e0 <irCommTasks+0x1ee>
    81de:	dc c2       	rjmp	.+1464   	; 0x8798 <irCommTasks+0x7a6>
    81e0:	16 30       	cpi	r17, 0x06	; 6
    81e2:	09 f0       	breq	.+2      	; 0x81e6 <irCommTasks+0x1f4>
    81e4:	1f cf       	rjmp	.-450    	; 0x8024 <irCommTasks+0x32>
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
    81e6:	80 e0       	ldi	r24, 0x00	; 0
    81e8:	94 e0       	ldi	r25, 0x04	; 4
    81ea:	90 93 0b 05 	sts	0x050B, r25
    81ee:	80 93 0a 05 	sts	0x050A, r24
				irCommTempMax = 0;
    81f2:	10 92 09 05 	sts	0x0509, r1
    81f6:	10 92 08 05 	sts	0x0508, r1
    81fa:	80 91 21 05 	lds	r24, 0x0521
    81fe:	90 91 22 05 	lds	r25, 0x0522
    8202:	88 0f       	add	r24, r24
    8204:	99 1f       	adc	r25, r25
    8206:	c0 91 4f 08 	lds	r28, 0x084F
    820a:	d0 91 50 08 	lds	r29, 0x0850
    820e:	c8 0f       	add	r28, r24
    8210:	d9 1f       	adc	r29, r25
    8212:	bb e3       	ldi	r27, 0x3B	; 59
    8214:	cb 2e       	mov	r12, r27
    8216:	bb e0       	ldi	r27, 0x0B	; 11
    8218:	db 2e       	mov	r13, r27
    821a:	f6 01       	movw	r30, r12
    821c:	ee 24       	eor	r14, r14
    821e:	ff 24       	eor	r15, r15
    8220:	87 01       	movw	r16, r14
    8222:	60 e0       	ldi	r22, 0x00	; 0
    8224:	74 e0       	ldi	r23, 0x04	; 4
    8226:	40 e0       	ldi	r20, 0x00	; 0
    8228:	50 e0       	ldi	r21, 0x00	; 0
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    822a:	28 81       	ld	r18, Y
    822c:	39 81       	ldd	r19, Y+1	; 0x01
    822e:	31 83       	std	Z+1, r19	; 0x01
    8230:	20 83       	st	Z, r18
					irCommProxSum += irCommMaxSensorSignal[i];
    8232:	c9 01       	movw	r24, r18
    8234:	aa 27       	eor	r26, r26
    8236:	97 fd       	sbrc	r25, 7
    8238:	a0 95       	com	r26
    823a:	ba 2f       	mov	r27, r26
    823c:	e8 0e       	add	r14, r24
    823e:	f9 1e       	adc	r15, r25
    8240:	0a 1f       	adc	r16, r26
    8242:	1b 1f       	adc	r17, r27
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8244:	26 17       	cp	r18, r22
    8246:	37 07       	cpc	r19, r23
    8248:	2c f4       	brge	.+10     	; 0x8254 <irCommTasks+0x262>
						irCommTempMin = irCommMaxSensorSignal[i];
    824a:	30 93 0b 05 	sts	0x050B, r19
    824e:	20 93 0a 05 	sts	0x050A, r18
    8252:	b9 01       	movw	r22, r18
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
    8254:	42 17       	cp	r20, r18
    8256:	53 07       	cpc	r21, r19
    8258:	2c f4       	brge	.+10     	; 0x8264 <irCommTasks+0x272>
						irCommTempMax = irCommMaxSensorSignal[i];
    825a:	30 93 09 05 	sts	0x0509, r19
    825e:	20 93 08 05 	sts	0x0508, r18
    8262:	a9 01       	movw	r20, r18
    8264:	60 96       	adiw	r28, 0x10	; 16
    8266:	32 96       	adiw	r30, 0x02	; 2
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8268:	9b e0       	ldi	r25, 0x0B	; 11
    826a:	e3 36       	cpi	r30, 0x63	; 99
    826c:	f9 07       	cpc	r31, r25
    826e:	e9 f6       	brne	.-70     	; 0x822a <irCommTasks+0x238>
    8270:	e0 92 04 05 	sts	0x0504, r14
    8274:	f0 92 05 05 	sts	0x0505, r15
    8278:	00 93 06 05 	sts	0x0506, r16
    827c:	10 93 07 05 	sts	0x0507, r17
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
    8280:	46 1b       	sub	r20, r22
    8282:	57 0b       	sbc	r21, r23
    8284:	40 35       	cpi	r20, 0x50	; 80
    8286:	51 05       	cpc	r21, r1
    8288:	0c f4       	brge	.+2      	; 0x828c <irCommTasks+0x29a>
    828a:	38 c6       	rjmp	.+3184   	; 0x8efc <irCommTasks+0xf0a>

					resetDebugVariables();
					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    828c:	b7 01       	movw	r22, r14
    828e:	c8 01       	movw	r24, r16
    8290:	24 e1       	ldi	r18, 0x14	; 20
    8292:	30 e0       	ldi	r19, 0x00	; 0
    8294:	40 e0       	ldi	r20, 0x00	; 0
    8296:	50 e0       	ldi	r21, 0x00	; 0
    8298:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <__divmodsi4>
    829c:	a9 01       	movw	r20, r18
    829e:	30 93 0f 05 	sts	0x050F, r19
    82a2:	20 93 0e 05 	sts	0x050E, r18
    82a6:	30 91 fe 04 	lds	r19, 0x04FE

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
    82aa:	67 ec       	ldi	r22, 0xC7	; 199
    82ac:	d6 01       	movw	r26, r12
    82ae:	8d 91       	ld	r24, X+
    82b0:	9c 91       	ld	r25, X
    82b2:	11 97       	sbiw	r26, 0x01	; 1
    82b4:	84 1b       	sub	r24, r20
    82b6:	95 0b       	sbc	r25, r21
    82b8:	8d 93       	st	X+, r24
    82ba:	9c 93       	st	X, r25
    82bc:	27 ec       	ldi	r18, 0xC7	; 199
    82be:	36 17       	cp	r19, r22
    82c0:	08 f4       	brcc	.+2      	; 0x82c4 <irCommTasks+0x2d2>
    82c2:	23 2f       	mov	r18, r19

					if(irCommBitsSignalIndexTemp>199) {
						irCommBitsSignalIndexTemp = 199;
						//updateRedLed(0);
					}
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
    82c4:	e2 2f       	mov	r30, r18
    82c6:	f0 e0       	ldi	r31, 0x00	; 0
    82c8:	ee 0f       	add	r30, r30
    82ca:	ff 1f       	adc	r31, r31
    82cc:	e7 56       	subi	r30, 0x67	; 103
    82ce:	f6 4f       	sbci	r31, 0xF6	; 246
    82d0:	91 83       	std	Z+1, r25	; 0x01
    82d2:	80 83       	st	Z, r24
					irCommBitsSignalIndexTemp++;
    82d4:	32 2f       	mov	r19, r18
    82d6:	3f 5f       	subi	r19, 0xFF	; 255
    82d8:	e2 e0       	ldi	r30, 0x02	; 2
    82da:	f0 e0       	ldi	r31, 0x00	; 0
    82dc:	ce 0e       	add	r12, r30
    82de:	df 1e       	adc	r13, r31
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    82e0:	f3 e6       	ldi	r31, 0x63	; 99
    82e2:	cf 16       	cp	r12, r31
    82e4:	fb e0       	ldi	r31, 0x0B	; 11
    82e6:	df 06       	cpc	r13, r31
    82e8:	09 f7       	brne	.-62     	; 0x82ac <irCommTasks+0x2ba>
    82ea:	30 93 fe 04 	sts	0x04FE, r19
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommBitsSignalIndexTemp++;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    82ee:	80 91 3b 0b 	lds	r24, 0x0B3B
    82f2:	90 91 3c 0b 	lds	r25, 0x0B3C
    82f6:	18 16       	cp	r1, r24
    82f8:	19 06       	cpc	r1, r25
    82fa:	0c f0       	brlt	.+2      	; 0x82fe <irCommTasks+0x30c>
    82fc:	07 c7       	rjmp	.+3598   	; 0x910c <irCommTasks+0x111a>
					irCommSignalState = 1;
    82fe:	81 e0       	ldi	r24, 0x01	; 1
    8300:	80 93 10 05 	sts	0x0510, r24
    8304:	28 2f       	mov	r18, r24
				} else {
					irCommSignalState = -1;
    8306:	ed e3       	ldi	r30, 0x3D	; 61
    8308:	fb e0       	ldi	r31, 0x0B	; 11
    830a:	30 e0       	ldi	r19, 0x00	; 0
    830c:	08 c0       	rjmp	.+16     	; 0x831e <irCommTasks+0x32c>
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    830e:	27 fd       	sbrc	r18, 7
    8310:	40 c2       	rjmp	.+1152   	; 0x8792 <irCommTasks+0x7a0>
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
							irCommSwitchCount++;
    8312:	32 96       	adiw	r30, 0x02	; 2
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8314:	8b e0       	ldi	r24, 0x0B	; 11
    8316:	e3 36       	cpi	r30, 0x63	; 99
    8318:	f8 07       	cpc	r31, r24
    831a:	09 f4       	brne	.+2      	; 0x831e <irCommTasks+0x32c>
    831c:	fe c5       	rjmp	.+3068   	; 0x8f1a <irCommTasks+0xf28>
					if(irCommMaxSensorSignal[i] > 0) {
    831e:	80 81       	ld	r24, Z
    8320:	91 81       	ldd	r25, Z+1	; 0x01
    8322:	18 16       	cp	r1, r24
    8324:	19 06       	cpc	r1, r25
    8326:	9c f3       	brlt	.-26     	; 0x830e <irCommTasks+0x31c>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    8328:	12 16       	cp	r1, r18
    832a:	9c f7       	brge	.-26     	; 0x8312 <irCommTasks+0x320>
							irCommSignalState = -1;
							irCommSwitchCount++;
    832c:	3f 5f       	subi	r19, 0xFF	; 255
    832e:	2f ef       	ldi	r18, 0xFF	; 255
    8330:	f0 cf       	rjmp	.-32     	; 0x8312 <irCommTasks+0x320>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    8332:	11 30       	cpi	r17, 0x01	; 1
    8334:	09 f4       	brne	.+2      	; 0x8338 <irCommTasks+0x346>
    8336:	ef c3       	rjmp	.+2014   	; 0x8b16 <irCommTasks+0xb24>
    8338:	12 30       	cpi	r17, 0x02	; 2
    833a:	09 f0       	breq	.+2      	; 0x833e <irCommTasks+0x34c>
    833c:	73 ce       	rjmp	.-794    	; 0x8024 <irCommTasks+0x32>
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    833e:	c0 91 4c 05 	lds	r28, 0x054C
    8342:	d0 91 4d 05 	lds	r29, 0x054D
    8346:	60 91 38 05 	lds	r22, 0x0538
    834a:	70 91 39 05 	lds	r23, 0x0539
    834e:	88 81       	ld	r24, Y
    8350:	99 81       	ldd	r25, Y+1	; 0x01
    8352:	db 01       	movw	r26, r22
    8354:	2d 91       	ld	r18, X+
    8356:	3c 91       	ld	r19, X
    8358:	82 1b       	sub	r24, r18
    835a:	93 0b       	sbc	r25, r19
    835c:	80 35       	cpi	r24, 0x50	; 80
    835e:	91 05       	cpc	r25, r1
    8360:	0c f0       	brlt	.+2      	; 0x8364 <irCommTasks+0x372>
    8362:	3c c6       	rjmp	.+3192   	; 0x8fdc <irCommTasks+0xfea>
    8364:	40 91 23 05 	lds	r20, 0x0523
    8368:	8a 81       	ldd	r24, Y+2	; 0x02
    836a:	9b 81       	ldd	r25, Y+3	; 0x03
    836c:	fb 01       	movw	r30, r22
    836e:	22 81       	ldd	r18, Z+2	; 0x02
    8370:	33 81       	ldd	r19, Z+3	; 0x03
    8372:	82 1b       	sub	r24, r18
    8374:	93 0b       	sbc	r25, r19
    8376:	80 35       	cpi	r24, 0x50	; 80
    8378:	91 05       	cpc	r25, r1
    837a:	1c f0       	brlt	.+6      	; 0x8382 <irCommTasks+0x390>
						irCommRxNumReceivingSensors++;
    837c:	4f 5f       	subi	r20, 0xFF	; 255
    837e:	40 93 23 05 	sts	0x0523, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8382:	8c 81       	ldd	r24, Y+4	; 0x04
    8384:	9d 81       	ldd	r25, Y+5	; 0x05
    8386:	db 01       	movw	r26, r22
    8388:	14 96       	adiw	r26, 0x04	; 4
    838a:	2d 91       	ld	r18, X+
    838c:	3c 91       	ld	r19, X
    838e:	15 97       	sbiw	r26, 0x05	; 5
    8390:	82 1b       	sub	r24, r18
    8392:	93 0b       	sbc	r25, r19
    8394:	80 35       	cpi	r24, 0x50	; 80
    8396:	91 05       	cpc	r25, r1
    8398:	1c f0       	brlt	.+6      	; 0x83a0 <irCommTasks+0x3ae>
						irCommRxNumReceivingSensors++;
    839a:	4f 5f       	subi	r20, 0xFF	; 255
    839c:	40 93 23 05 	sts	0x0523, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    83a0:	8e 81       	ldd	r24, Y+6	; 0x06
    83a2:	9f 81       	ldd	r25, Y+7	; 0x07
    83a4:	fb 01       	movw	r30, r22
    83a6:	26 81       	ldd	r18, Z+6	; 0x06
    83a8:	37 81       	ldd	r19, Z+7	; 0x07
    83aa:	82 1b       	sub	r24, r18
    83ac:	93 0b       	sbc	r25, r19
    83ae:	80 35       	cpi	r24, 0x50	; 80
    83b0:	91 05       	cpc	r25, r1
    83b2:	1c f0       	brlt	.+6      	; 0x83ba <irCommTasks+0x3c8>
						irCommRxNumReceivingSensors++;
    83b4:	4f 5f       	subi	r20, 0xFF	; 255
    83b6:	40 93 23 05 	sts	0x0523, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    83ba:	88 85       	ldd	r24, Y+8	; 0x08
    83bc:	99 85       	ldd	r25, Y+9	; 0x09
    83be:	db 01       	movw	r26, r22
    83c0:	18 96       	adiw	r26, 0x08	; 8
    83c2:	2d 91       	ld	r18, X+
    83c4:	3c 91       	ld	r19, X
    83c6:	19 97       	sbiw	r26, 0x09	; 9
    83c8:	82 1b       	sub	r24, r18
    83ca:	93 0b       	sbc	r25, r19
    83cc:	80 35       	cpi	r24, 0x50	; 80
    83ce:	91 05       	cpc	r25, r1
    83d0:	1c f0       	brlt	.+6      	; 0x83d8 <irCommTasks+0x3e6>
						irCommRxNumReceivingSensors++;
    83d2:	4f 5f       	subi	r20, 0xFF	; 255
    83d4:	40 93 23 05 	sts	0x0523, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    83d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    83da:	9b 85       	ldd	r25, Y+11	; 0x0b
    83dc:	fb 01       	movw	r30, r22
    83de:	22 85       	ldd	r18, Z+10	; 0x0a
    83e0:	33 85       	ldd	r19, Z+11	; 0x0b
    83e2:	82 1b       	sub	r24, r18
    83e4:	93 0b       	sbc	r25, r19
    83e6:	80 35       	cpi	r24, 0x50	; 80
    83e8:	91 05       	cpc	r25, r1
    83ea:	1c f0       	brlt	.+6      	; 0x83f2 <irCommTasks+0x400>
						irCommRxNumReceivingSensors++;
    83ec:	4f 5f       	subi	r20, 0xFF	; 255
    83ee:	40 93 23 05 	sts	0x0523, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    83f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    83f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    83f6:	db 01       	movw	r26, r22
    83f8:	1c 96       	adiw	r26, 0x0c	; 12
    83fa:	2d 91       	ld	r18, X+
    83fc:	3c 91       	ld	r19, X
    83fe:	1d 97       	sbiw	r26, 0x0d	; 13
    8400:	82 1b       	sub	r24, r18
    8402:	93 0b       	sbc	r25, r19
    8404:	80 35       	cpi	r24, 0x50	; 80
    8406:	91 05       	cpc	r25, r1
    8408:	1c f0       	brlt	.+6      	; 0x8410 <irCommTasks+0x41e>
						irCommRxNumReceivingSensors++;
    840a:	4f 5f       	subi	r20, 0xFF	; 255
    840c:	40 93 23 05 	sts	0x0523, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8410:	8e 85       	ldd	r24, Y+14	; 0x0e
    8412:	9f 85       	ldd	r25, Y+15	; 0x0f
    8414:	fb 01       	movw	r30, r22
    8416:	26 85       	ldd	r18, Z+14	; 0x0e
    8418:	37 85       	ldd	r19, Z+15	; 0x0f
    841a:	82 1b       	sub	r24, r18
    841c:	93 0b       	sbc	r25, r19
    841e:	80 35       	cpi	r24, 0x50	; 80
    8420:	91 05       	cpc	r25, r1
    8422:	1c f0       	brlt	.+6      	; 0x842a <irCommTasks+0x438>
						irCommRxNumReceivingSensors++;
    8424:	4f 5f       	subi	r20, 0xFF	; 255
    8426:	40 93 23 05 	sts	0x0523, r20
					}					
				}
				if(irCommRxNumReceivingSensors==0) {
    842a:	44 23       	and	r20, r20
    842c:	09 f4       	brne	.+2      	; 0x8430 <irCommTasks+0x43e>
    842e:	10 c6       	rjmp	.+3104   	; 0x9050 <irCommTasks+0x105e>
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
					}
				} else {
					if(irCommRxStartBitDetected==0) {
    8430:	80 91 1c 05 	lds	r24, 0x051C
    8434:	88 23       	and	r24, r24
    8436:	09 f0       	breq	.+2      	; 0x843a <irCommTasks+0x448>
    8438:	f4 c5       	rjmp	.+3048   	; 0x9022 <irCommTasks+0x1030>
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
    843a:	80 91 21 05 	lds	r24, 0x0521
    843e:	90 91 22 05 	lds	r25, 0x0522
    8442:	87 30       	cpi	r24, 0x07	; 7
    8444:	91 05       	cpc	r25, r1
    8446:	0c f0       	brlt	.+2      	; 0x844a <irCommTasks+0x458>
    8448:	9f c6       	rjmp	.+3390   	; 0x9188 <irCommTasks+0x1196>
							irCommRxMaxSensor++;
    844a:	01 96       	adiw	r24, 0x01	; 1
    844c:	90 93 22 05 	sts	0x0522, r25
    8450:	80 93 21 05 	sts	0x0521, r24
    8454:	ac 01       	movw	r20, r24
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8456:	fa 01       	movw	r30, r20
    8458:	ee 0f       	add	r30, r30
    845a:	ff 1f       	adc	r31, r31
    845c:	de 01       	movw	r26, r28
    845e:	ae 0f       	add	r26, r30
    8460:	bf 1f       	adc	r27, r31
    8462:	e6 0f       	add	r30, r22
    8464:	f7 1f       	adc	r31, r23
    8466:	0d 90       	ld	r0, X+
    8468:	bc 91       	ld	r27, X
    846a:	a0 2d       	mov	r26, r0
    846c:	80 81       	ld	r24, Z
    846e:	91 81       	ldd	r25, Z+1	; 0x01
    8470:	a8 1b       	sub	r26, r24
    8472:	b9 0b       	sbc	r27, r25
    8474:	a0 35       	cpi	r26, 0x50	; 80
    8476:	b1 05       	cpc	r27, r1
    8478:	0c f0       	brlt	.+2      	; 0x847c <irCommTasks+0x48a>
    847a:	6f c7       	rjmp	.+3806   	; 0x935a <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    847c:	47 30       	cpi	r20, 0x07	; 7
    847e:	51 05       	cpc	r21, r1
    8480:	0c f4       	brge	.+2      	; 0x8484 <irCommTasks+0x492>
    8482:	a1 c6       	rjmp	.+3394   	; 0x91c6 <irCommTasks+0x11d4>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    8484:	10 92 22 05 	sts	0x0522, r1
    8488:	10 92 21 05 	sts	0x0521, r1
    848c:	40 91 21 05 	lds	r20, 0x0521
    8490:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8494:	fa 01       	movw	r30, r20
    8496:	ee 0f       	add	r30, r30
    8498:	ff 1f       	adc	r31, r31
    849a:	de 01       	movw	r26, r28
    849c:	ae 0f       	add	r26, r30
    849e:	bf 1f       	adc	r27, r31
    84a0:	e6 0f       	add	r30, r22
    84a2:	f7 1f       	adc	r31, r23
    84a4:	0d 90       	ld	r0, X+
    84a6:	bc 91       	ld	r27, X
    84a8:	a0 2d       	mov	r26, r0
    84aa:	80 81       	ld	r24, Z
    84ac:	91 81       	ldd	r25, Z+1	; 0x01
    84ae:	a8 1b       	sub	r26, r24
    84b0:	b9 0b       	sbc	r27, r25
    84b2:	a0 35       	cpi	r26, 0x50	; 80
    84b4:	b1 05       	cpc	r27, r1
    84b6:	0c f0       	brlt	.+2      	; 0x84ba <irCommTasks+0x4c8>
    84b8:	50 c7       	rjmp	.+3744   	; 0x935a <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    84ba:	47 30       	cpi	r20, 0x07	; 7
    84bc:	51 05       	cpc	r21, r1
    84be:	0c f4       	brge	.+2      	; 0x84c2 <irCommTasks+0x4d0>
    84c0:	7b c6       	rjmp	.+3318   	; 0x91b8 <irCommTasks+0x11c6>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    84c2:	10 92 22 05 	sts	0x0522, r1
    84c6:	10 92 21 05 	sts	0x0521, r1
    84ca:	40 91 21 05 	lds	r20, 0x0521
    84ce:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    84d2:	fa 01       	movw	r30, r20
    84d4:	ee 0f       	add	r30, r30
    84d6:	ff 1f       	adc	r31, r31
    84d8:	de 01       	movw	r26, r28
    84da:	ae 0f       	add	r26, r30
    84dc:	bf 1f       	adc	r27, r31
    84de:	e6 0f       	add	r30, r22
    84e0:	f7 1f       	adc	r31, r23
    84e2:	0d 90       	ld	r0, X+
    84e4:	bc 91       	ld	r27, X
    84e6:	a0 2d       	mov	r26, r0
    84e8:	80 81       	ld	r24, Z
    84ea:	91 81       	ldd	r25, Z+1	; 0x01
    84ec:	a8 1b       	sub	r26, r24
    84ee:	b9 0b       	sbc	r27, r25
    84f0:	a0 35       	cpi	r26, 0x50	; 80
    84f2:	b1 05       	cpc	r27, r1
    84f4:	0c f0       	brlt	.+2      	; 0x84f8 <irCommTasks+0x506>
    84f6:	31 c7       	rjmp	.+3682   	; 0x935a <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    84f8:	47 30       	cpi	r20, 0x07	; 7
    84fa:	51 05       	cpc	r21, r1
    84fc:	0c f4       	brge	.+2      	; 0x8500 <irCommTasks+0x50e>
    84fe:	be c6       	rjmp	.+3452   	; 0x927c <irCommTasks+0x128a>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    8500:	10 92 22 05 	sts	0x0522, r1
    8504:	10 92 21 05 	sts	0x0521, r1
    8508:	40 91 21 05 	lds	r20, 0x0521
    850c:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8510:	fa 01       	movw	r30, r20
    8512:	ee 0f       	add	r30, r30
    8514:	ff 1f       	adc	r31, r31
    8516:	de 01       	movw	r26, r28
    8518:	ae 0f       	add	r26, r30
    851a:	bf 1f       	adc	r27, r31
    851c:	e6 0f       	add	r30, r22
    851e:	f7 1f       	adc	r31, r23
    8520:	0d 90       	ld	r0, X+
    8522:	bc 91       	ld	r27, X
    8524:	a0 2d       	mov	r26, r0
    8526:	80 81       	ld	r24, Z
    8528:	91 81       	ldd	r25, Z+1	; 0x01
    852a:	a8 1b       	sub	r26, r24
    852c:	b9 0b       	sbc	r27, r25
    852e:	a0 35       	cpi	r26, 0x50	; 80
    8530:	b1 05       	cpc	r27, r1
    8532:	0c f0       	brlt	.+2      	; 0x8536 <irCommTasks+0x544>
    8534:	12 c7       	rjmp	.+3620   	; 0x935a <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    8536:	47 30       	cpi	r20, 0x07	; 7
    8538:	51 05       	cpc	r21, r1
    853a:	0c f4       	brge	.+2      	; 0x853e <irCommTasks+0x54c>
    853c:	a6 c6       	rjmp	.+3404   	; 0x928a <irCommTasks+0x1298>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    853e:	10 92 22 05 	sts	0x0522, r1
    8542:	10 92 21 05 	sts	0x0521, r1
    8546:	40 91 21 05 	lds	r20, 0x0521
    854a:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    854e:	fa 01       	movw	r30, r20
    8550:	ee 0f       	add	r30, r30
    8552:	ff 1f       	adc	r31, r31
    8554:	de 01       	movw	r26, r28
    8556:	ae 0f       	add	r26, r30
    8558:	bf 1f       	adc	r27, r31
    855a:	e6 0f       	add	r30, r22
    855c:	f7 1f       	adc	r31, r23
    855e:	0d 90       	ld	r0, X+
    8560:	bc 91       	ld	r27, X
    8562:	a0 2d       	mov	r26, r0
    8564:	80 81       	ld	r24, Z
    8566:	91 81       	ldd	r25, Z+1	; 0x01
    8568:	a8 1b       	sub	r26, r24
    856a:	b9 0b       	sbc	r27, r25
    856c:	a0 35       	cpi	r26, 0x50	; 80
    856e:	b1 05       	cpc	r27, r1
    8570:	0c f0       	brlt	.+2      	; 0x8574 <irCommTasks+0x582>
    8572:	f3 c6       	rjmp	.+3558   	; 0x935a <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    8574:	47 30       	cpi	r20, 0x07	; 7
    8576:	51 05       	cpc	r21, r1
    8578:	0c f4       	brge	.+2      	; 0x857c <irCommTasks+0x58a>
    857a:	8e c6       	rjmp	.+3356   	; 0x9298 <irCommTasks+0x12a6>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    857c:	10 92 22 05 	sts	0x0522, r1
    8580:	10 92 21 05 	sts	0x0521, r1
    8584:	40 91 21 05 	lds	r20, 0x0521
    8588:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    858c:	fa 01       	movw	r30, r20
    858e:	ee 0f       	add	r30, r30
    8590:	ff 1f       	adc	r31, r31
    8592:	de 01       	movw	r26, r28
    8594:	ae 0f       	add	r26, r30
    8596:	bf 1f       	adc	r27, r31
    8598:	e6 0f       	add	r30, r22
    859a:	f7 1f       	adc	r31, r23
    859c:	0d 90       	ld	r0, X+
    859e:	bc 91       	ld	r27, X
    85a0:	a0 2d       	mov	r26, r0
    85a2:	80 81       	ld	r24, Z
    85a4:	91 81       	ldd	r25, Z+1	; 0x01
    85a6:	a8 1b       	sub	r26, r24
    85a8:	b9 0b       	sbc	r27, r25
    85aa:	a0 35       	cpi	r26, 0x50	; 80
    85ac:	b1 05       	cpc	r27, r1
    85ae:	0c f0       	brlt	.+2      	; 0x85b2 <irCommTasks+0x5c0>
    85b0:	d4 c6       	rjmp	.+3496   	; 0x935a <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    85b2:	47 30       	cpi	r20, 0x07	; 7
    85b4:	51 05       	cpc	r21, r1
    85b6:	0c f4       	brge	.+2      	; 0x85ba <irCommTasks+0x5c8>
    85b8:	76 c6       	rjmp	.+3308   	; 0x92a6 <irCommTasks+0x12b4>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    85ba:	10 92 22 05 	sts	0x0522, r1
    85be:	10 92 21 05 	sts	0x0521, r1
    85c2:	40 91 21 05 	lds	r20, 0x0521
    85c6:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    85ca:	fa 01       	movw	r30, r20
    85cc:	ee 0f       	add	r30, r30
    85ce:	ff 1f       	adc	r31, r31
    85d0:	de 01       	movw	r26, r28
    85d2:	ae 0f       	add	r26, r30
    85d4:	bf 1f       	adc	r27, r31
    85d6:	e6 0f       	add	r30, r22
    85d8:	f7 1f       	adc	r31, r23
    85da:	0d 90       	ld	r0, X+
    85dc:	bc 91       	ld	r27, X
    85de:	a0 2d       	mov	r26, r0
    85e0:	80 81       	ld	r24, Z
    85e2:	91 81       	ldd	r25, Z+1	; 0x01
    85e4:	a8 1b       	sub	r26, r24
    85e6:	b9 0b       	sbc	r27, r25
    85e8:	a0 35       	cpi	r26, 0x50	; 80
    85ea:	b1 05       	cpc	r27, r1
    85ec:	0c f0       	brlt	.+2      	; 0x85f0 <irCommTasks+0x5fe>
    85ee:	b5 c6       	rjmp	.+3434   	; 0x935a <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    85f0:	47 30       	cpi	r20, 0x07	; 7
    85f2:	51 05       	cpc	r21, r1
    85f4:	0c f4       	brge	.+2      	; 0x85f8 <irCommTasks+0x606>
    85f6:	65 c6       	rjmp	.+3274   	; 0x92c2 <irCommTasks+0x12d0>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    85f8:	10 92 22 05 	sts	0x0522, r1
    85fc:	10 92 21 05 	sts	0x0521, r1
    8600:	40 91 21 05 	lds	r20, 0x0521
    8604:	50 91 22 05 	lds	r21, 0x0522
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8608:	fa 01       	movw	r30, r20
    860a:	ee 0f       	add	r30, r30
    860c:	ff 1f       	adc	r31, r31
    860e:	de 01       	movw	r26, r28
    8610:	ae 0f       	add	r26, r30
    8612:	bf 1f       	adc	r27, r31
    8614:	e6 0f       	add	r30, r22
    8616:	f7 1f       	adc	r31, r23
    8618:	0d 90       	ld	r0, X+
    861a:	bc 91       	ld	r27, X
    861c:	a0 2d       	mov	r26, r0
    861e:	80 81       	ld	r24, Z
    8620:	91 81       	ldd	r25, Z+1	; 0x01
    8622:	a8 1b       	sub	r26, r24
    8624:	b9 0b       	sbc	r27, r25
    8626:	a0 35       	cpi	r26, 0x50	; 80
    8628:	b1 05       	cpc	r27, r1
    862a:	0c f0       	brlt	.+2      	; 0x862e <irCommTasks+0x63c>
    862c:	96 c6       	rjmp	.+3372   	; 0x935a <irCommTasks+0x1368>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    862e:	47 30       	cpi	r20, 0x07	; 7
    8630:	51 05       	cpc	r21, r1
    8632:	0c f0       	brlt	.+2      	; 0x8636 <irCommTasks+0x644>
    8634:	3f c6       	rjmp	.+3198   	; 0x92b4 <irCommTasks+0x12c2>
								irCommRxMaxSensor++;
    8636:	ca 01       	movw	r24, r20
    8638:	01 96       	adiw	r24, 0x01	; 1
    863a:	90 93 22 05 	sts	0x0522, r25
    863e:	80 93 21 05 	sts	0x0521, r24
    8642:	ac 01       	movw	r20, r24
					}
				}
				//turnOffGreenLeds();
				//setGreenLed(irCommRxMaxSensor, 1);			

				if(irCommRxMaxSensorIndexTemp>1) {
    8644:	80 91 ef 04 	lds	r24, 0x04EF
    8648:	82 30       	cpi	r24, 0x02	; 2
    864a:	08 f0       	brcs	.+2      	; 0x864e <irCommTasks+0x65c>
    864c:	81 e0       	ldi	r24, 0x01	; 1
					irCommRxMaxSensorIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
    864e:	e8 2f       	mov	r30, r24
    8650:	f0 e0       	ldi	r31, 0x00	; 0
    8652:	ee 0f       	add	r30, r30
    8654:	ff 1f       	adc	r31, r31
    8656:	e5 5d       	subi	r30, 0xD5	; 213
    8658:	f4 4f       	sbci	r31, 0xF4	; 244
    865a:	51 83       	std	Z+1, r21	; 0x01
    865c:	40 83       	st	Z, r20
				irCommRxMaxSensorIndexTemp++;
    865e:	8f 5f       	subi	r24, 0xFF	; 255
    8660:	80 93 ef 04 	sts	0x04EF, r24
					
				if(irCommRxMaxDiffIndexTemp>1) {
    8664:	80 91 f0 04 	lds	r24, 0x04F0
    8668:	82 30       	cpi	r24, 0x02	; 2
    866a:	08 f0       	brcs	.+2      	; 0x866e <irCommTasks+0x67c>
    866c:	81 e0       	ldi	r24, 0x01	; 1
					irCommRxMaxDiffIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
    866e:	e8 2f       	mov	r30, r24
    8670:	f0 e0       	ldi	r31, 0x00	; 0
    8672:	ee 0f       	add	r30, r30
    8674:	ff 1f       	adc	r31, r31
    8676:	ec 59       	subi	r30, 0x9C	; 156
    8678:	f4 4f       	sbci	r31, 0xF4	; 244
    867a:	00 91 1f 05 	lds	r16, 0x051F
    867e:	10 91 20 05 	lds	r17, 0x0520
    8682:	11 83       	std	Z+1, r17	; 0x01
    8684:	00 83       	st	Z, r16
				irCommRxMaxDiffIndexTemp++;
    8686:	8f 5f       	subi	r24, 0xFF	; 255
    8688:	80 93 f0 04 	sts	0x04F0, r24
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    868c:	20 91 f3 04 	lds	r18, 0x04F3
    8690:	22 30       	cpi	r18, 0x02	; 2
    8692:	20 f0       	brcs	.+8      	; 0x869c <irCommTasks+0x6aa>
					irCommMaxSensorValueCurrIndexTemp = 1;
    8694:	81 e0       	ldi	r24, 0x01	; 1
    8696:	80 93 f3 04 	sts	0x04F3, r24
    869a:	21 e0       	ldi	r18, 0x01	; 1
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    869c:	da 01       	movw	r26, r20
    869e:	aa 0f       	add	r26, r26
    86a0:	bb 1f       	adc	r27, r27
    86a2:	e2 2f       	mov	r30, r18
    86a4:	f0 e0       	ldi	r31, 0x00	; 0
    86a6:	ee 0f       	add	r30, r30
    86a8:	ff 1f       	adc	r31, r31
    86aa:	e6 5c       	subi	r30, 0xC6	; 198
    86ac:	fa 4f       	sbci	r31, 0xFA	; 250
    86ae:	ca 0f       	add	r28, r26
    86b0:	db 1f       	adc	r29, r27
    86b2:	88 81       	ld	r24, Y
    86b4:	99 81       	ldd	r25, Y+1	; 0x01
    86b6:	91 83       	std	Z+1, r25	; 0x01
    86b8:	80 83       	st	Z, r24
				irCommMaxSensorValueCurrIndexTemp++;
    86ba:	2f 5f       	subi	r18, 0xFF	; 255
    86bc:	20 93 f3 04 	sts	0x04F3, r18
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    86c0:	20 91 f4 04 	lds	r18, 0x04F4
    86c4:	22 30       	cpi	r18, 0x02	; 2
    86c6:	20 f0       	brcs	.+8      	; 0x86d0 <irCommTasks+0x6de>
					irCommMinSensorValueCurrIndexTemp = 1;
    86c8:	81 e0       	ldi	r24, 0x01	; 1
    86ca:	80 93 f4 04 	sts	0x04F4, r24
    86ce:	21 e0       	ldi	r18, 0x01	; 1
					//updateBlueLed(0);
				}
				irCommMinSensorValueCurrTemp[irCommMinSensorValueCurrIndexTemp] = irCommMinSensorValueCurr[irCommRxMaxSensor];
    86d0:	e2 2f       	mov	r30, r18
    86d2:	f0 e0       	ldi	r31, 0x00	; 0
    86d4:	ee 0f       	add	r30, r30
    86d6:	ff 1f       	adc	r31, r31
    86d8:	e1 5d       	subi	r30, 0xD1	; 209
    86da:	f4 4f       	sbci	r31, 0xF4	; 244
    86dc:	6a 0f       	add	r22, r26
    86de:	7b 1f       	adc	r23, r27
    86e0:	db 01       	movw	r26, r22
    86e2:	8d 91       	ld	r24, X+
    86e4:	9c 91       	ld	r25, X
    86e6:	91 83       	std	Z+1, r25	; 0x01
    86e8:	80 83       	st	Z, r24
				irCommMinSensorValueCurrIndexTemp++;			
    86ea:	2f 5f       	subi	r18, 0xFF	; 255
    86ec:	20 93 f4 04 	sts	0x04F4, r18


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    86f0:	00 35       	cpi	r16, 0x50	; 80
    86f2:	11 05       	cpc	r17, r1
    86f4:	0c f4       	brge	.+2      	; 0x86f8 <irCommTasks+0x706>
    86f6:	fb c3       	rjmp	.+2038   	; 0x8eee <irCommTasks+0xefc>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;	
    86f8:	83 e0       	ldi	r24, 0x03	; 3
    86fa:	80 93 d5 04 	sts	0x04D5, r24
					
					if(irCommStateIndexTemp>13) {
    86fe:	90 91 fc 04 	lds	r25, 0x04FC
    8702:	9e 30       	cpi	r25, 0x0E	; 14
    8704:	20 f0       	brcs	.+8      	; 0x870e <irCommTasks+0x71c>

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;

					if(irCommStateIndexTemp>13) {
						irCommStateIndexTemp = 13;
    8706:	8d e0       	ldi	r24, 0x0D	; 13
    8708:	80 93 fc 04 	sts	0x04FC, r24
    870c:	9d e0       	ldi	r25, 0x0D	; 13
						//updateRedLed(0);
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
    870e:	80 91 d5 04 	lds	r24, 0x04D5
    8712:	e9 2f       	mov	r30, r25
    8714:	f0 e0       	ldi	r31, 0x00	; 0
    8716:	e2 5c       	subi	r30, 0xC2	; 194
    8718:	fa 4f       	sbci	r31, 0xFA	; 250
    871a:	80 83       	st	Z, r24
					irCommStateIndexTemp++;
    871c:	9f 5f       	subi	r25, 0xFF	; 255
    871e:	90 93 fc 04 	sts	0x04FC, r25
    8722:	80 cc       	rjmp	.-1792   	; 0x8024 <irCommTasks+0x32>
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
    8724:	20 91 2c 05 	lds	r18, 0x052C
    8728:	e2 2f       	mov	r30, r18
    872a:	f0 e0       	ldi	r31, 0x00	; 0
    872c:	ea 5a       	subi	r30, 0xAA	; 170
    872e:	fa 4f       	sbci	r31, 0xFA	; 250
    8730:	e0 81       	ld	r30, Z
    8732:	e3 30       	cpi	r30, 0x03	; 3
    8734:	09 f4       	brne	.+2      	; 0x8738 <irCommTasks+0x746>
    8736:	48 c4       	rjmp	.+2192   	; 0x8fc8 <irCommTasks+0xfd6>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    8738:	e2 30       	cpi	r30, 0x02	; 2
    873a:	11 f1       	breq	.+68     	; 0x8780 <irCommTasks+0x78e>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    873c:	e1 30       	cpi	r30, 0x01	; 1
    873e:	09 f4       	brne	.+2      	; 0x8742 <irCommTasks+0x750>
    8740:	db c4       	rjmp	.+2486   	; 0x90f8 <irCommTasks+0x1106>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    8742:	8e e1       	ldi	r24, 0x1E	; 30
    8744:	90 e0       	ldi	r25, 0x00	; 0
    8746:	90 93 2f 05 	sts	0x052F, r25
    874a:	80 93 2e 05 	sts	0x052E, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    874e:	88 e0       	ldi	r24, 0x08	; 8
    8750:	80 93 30 05 	sts	0x0530, r24
				}
				if(irCommTxBitCount == 0) {
    8754:	22 23       	and	r18, r18
    8756:	51 f4       	brne	.+20     	; 0x876c <irCommTasks+0x77a>
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
    8758:	80 91 34 05 	lds	r24, 0x0534
    875c:	88 23       	and	r24, r24
    875e:	09 f0       	breq	.+2      	; 0x8762 <irCommTasks+0x770>
    8760:	43 c4       	rjmp	.+2182   	; 0x8fe8 <irCommTasks+0xff6>
						PORTA = 0xAA;
    8762:	8a ea       	ldi	r24, 0xAA	; 170
    8764:	82 b9       	out	0x02, r24	; 2
					} else {
						PORTA = 0x55;
					}					
					irCommTxPulseState = 1;
    8766:	81 e0       	ldi	r24, 0x01	; 1
    8768:	80 93 2d 05 	sts	0x052D, r24
				}
				irCommTxDurationCycle = 0;
    876c:	10 92 32 05 	sts	0x0532, r1
				irCommTxSwitchCounter = 0;						
    8770:	10 92 31 05 	sts	0x0531, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    8774:	83 e0       	ldi	r24, 0x03	; 3
    8776:	80 93 d5 04 	sts	0x04D5, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    877a:	80 93 24 05 	sts	0x0524, r24
    877e:	52 cc       	rjmp	.-1884   	; 0x8024 <irCommTasks+0x32>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
    8780:	88 e7       	ldi	r24, 0x78	; 120
    8782:	90 e0       	ldi	r25, 0x00	; 0
    8784:	90 93 2f 05 	sts	0x052F, r25
    8788:	80 93 2e 05 	sts	0x052E, r24
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
    878c:	e0 93 30 05 	sts	0x0530, r30
    8790:	e1 cf       	rjmp	.-62     	; 0x8754 <irCommTasks+0x762>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    8792:	3f 5f       	subi	r19, 0xFF	; 255
    8794:	21 e0       	ldi	r18, 0x01	; 1
    8796:	bd cd       	rjmp	.-1158   	; 0x8312 <irCommTasks+0x320>
				irCommState = IRCOMM_RX_IDLE_STATE;

				break;

			case IRCOMM_RX_DEBUG:								
				irCommSendValues = 0;						
    8798:	10 92 d8 04 	sts	0x04D8, r1
				while(irCommSendValues==0);	// wait for the start from the uart (computer)
    879c:	80 91 d8 04 	lds	r24, 0x04D8
    87a0:	88 23       	and	r24, r24
    87a2:	e1 f3       	breq	.-8      	; 0x879c <irCommTasks+0x7aa>
				usart0Transmit(0xFF, 1);
    87a4:	8f ef       	ldi	r24, 0xFF	; 255
    87a6:	61 e0       	ldi	r22, 0x01	; 1
    87a8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[0],1);
    87ac:	80 91 2b 0b 	lds	r24, 0x0B2B
    87b0:	61 e0       	ldi	r22, 0x01	; 1
    87b2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[1],1);
    87b6:	80 91 2d 0b 	lds	r24, 0x0B2D
    87ba:	61 e0       	ldi	r22, 0x01	; 1
    87bc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]&0xFF,1);
    87c0:	80 91 64 0b 	lds	r24, 0x0B64
    87c4:	61 e0       	ldi	r22, 0x01	; 1
    87c6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]>>8,1);
    87ca:	80 91 65 0b 	lds	r24, 0x0B65
    87ce:	61 e0       	ldi	r22, 0x01	; 1
    87d0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]&0xFF,1);
    87d4:	80 91 66 0b 	lds	r24, 0x0B66
    87d8:	61 e0       	ldi	r22, 0x01	; 1
    87da:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]>>8,1);
    87de:	80 91 67 0b 	lds	r24, 0x0B67
    87e2:	61 e0       	ldi	r22, 0x01	; 1
    87e4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]&0xFF,1);
    87e8:	80 91 71 05 	lds	r24, 0x0571
    87ec:	61 e0       	ldi	r22, 0x01	; 1
    87ee:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
    87f2:	80 91 72 05 	lds	r24, 0x0572
    87f6:	61 e0       	ldi	r22, 0x01	; 1
    87f8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
    87fc:	80 91 73 05 	lds	r24, 0x0573
    8800:	61 e0       	ldi	r22, 0x01	; 1
    8802:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
    8806:	80 91 74 05 	lds	r24, 0x0574
    880a:	61 e0       	ldi	r22, 0x01	; 1
    880c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[0],1);
    8810:	80 91 53 05 	lds	r24, 0x0553
    8814:	61 e0       	ldi	r22, 0x01	; 1
    8816:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[1],1);
    881a:	80 91 54 05 	lds	r24, 0x0554
    881e:	61 e0       	ldi	r22, 0x01	; 1
    8820:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8824:	c0 e0       	ldi	r28, 0x00	; 0
    8826:	d0 e0       	ldi	r29, 0x00	; 0
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
					irCommTempValue = irCommMaxSensorSignalTemp[i];
    8828:	fe 01       	movw	r30, r28
    882a:	e3 59       	subi	r30, 0x93	; 147
    882c:	f7 4f       	sbci	r31, 0xF7	; 247
    882e:	80 81       	ld	r24, Z
    8830:	91 81       	ldd	r25, Z+1	; 0x01
    8832:	80 93 d6 04 	sts	0x04D6, r24
    8836:	90 93 d7 04 	sts	0x04D7, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    883a:	61 e0       	ldi	r22, 0x01	; 1
    883c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    8840:	80 91 d7 04 	lds	r24, 0x04D7
    8844:	61 e0       	ldi	r22, 0x01	; 1
    8846:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
    884a:	fe 01       	movw	r30, r28
    884c:	e7 58       	subi	r30, 0x87	; 135
    884e:	fa 4f       	sbci	r31, 0xFA	; 250
    8850:	80 81       	ld	r24, Z
    8852:	91 81       	ldd	r25, Z+1	; 0x01
    8854:	80 93 d6 04 	sts	0x04D6, r24
    8858:	90 93 d7 04 	sts	0x04D7, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    885c:	61 e0       	ldi	r22, 0x01	; 1
    885e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    8862:	80 91 d7 04 	lds	r24, 0x04D7
    8866:	61 e0       	ldi	r22, 0x01	; 1
    8868:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    886c:	22 96       	adiw	r28, 0x02	; 2
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
				usart0Transmit(irCommSwitchCountTemp[0],1);
				usart0Transmit(irCommSwitchCountTemp[1],1);
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
    886e:	c0 35       	cpi	r28, 0x50	; 80
    8870:	d1 05       	cpc	r29, r1
    8872:	d1 f6       	brne	.-76     	; 0x8828 <irCommTasks+0x836>
					usart0Transmit(irCommTempValue>>8,1);
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]&0xFF,1);
    8874:	80 91 3a 05 	lds	r24, 0x053A
    8878:	61 e0       	ldi	r22, 0x01	; 1
    887a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]>>8,1);
    887e:	80 91 3b 05 	lds	r24, 0x053B
    8882:	61 e0       	ldi	r22, 0x01	; 1
    8884:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]&0xFF,1);
    8888:	80 91 3c 05 	lds	r24, 0x053C
    888c:	61 e0       	ldi	r22, 0x01	; 1
    888e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]>>8,1);
    8892:	80 91 3d 05 	lds	r24, 0x053D
    8896:	61 e0       	ldi	r22, 0x01	; 1
    8898:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]&0xFF,1);
    889c:	80 91 2f 0b 	lds	r24, 0x0B2F
    88a0:	61 e0       	ldi	r22, 0x01	; 1
    88a2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]>>8,1);
    88a6:	80 91 30 0b 	lds	r24, 0x0B30
    88aa:	61 e0       	ldi	r22, 0x01	; 1
    88ac:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]&0xFF,1);
    88b0:	80 91 31 0b 	lds	r24, 0x0B31
    88b4:	61 e0       	ldi	r22, 0x01	; 1
    88b6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]>>8,1);
    88ba:	80 91 32 0b 	lds	r24, 0x0B32
    88be:	61 e0       	ldi	r22, 0x01	; 1
    88c0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[0],1);
    88c4:	80 91 7d 0b 	lds	r24, 0x0B7D
    88c8:	61 e0       	ldi	r22, 0x01	; 1
    88ca:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[1],1);
    88ce:	80 91 7e 0b 	lds	r24, 0x0B7E
    88d2:	61 e0       	ldi	r22, 0x01	; 1
    88d4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[0],1);
    88d8:	80 91 37 0b 	lds	r24, 0x0B37
    88dc:	61 e0       	ldi	r22, 0x01	; 1
    88de:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[1],1);
    88e2:	80 91 38 0b 	lds	r24, 0x0B38
    88e6:	61 e0       	ldi	r22, 0x01	; 1
    88e8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]&0xFF,1);
    88ec:	80 91 be 08 	lds	r24, 0x08BE
    88f0:	61 e0       	ldi	r22, 0x01	; 1
    88f2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]>>8,1);
    88f6:	80 91 bf 08 	lds	r24, 0x08BF
    88fa:	61 e0       	ldi	r22, 0x01	; 1
    88fc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]&0xFF,1);
    8900:	80 91 c0 08 	lds	r24, 0x08C0
    8904:	61 e0       	ldi	r22, 0x01	; 1
    8906:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]>>8,1);
    890a:	80 91 c1 08 	lds	r24, 0x08C1
    890e:	61 e0       	ldi	r22, 0x01	; 1
    8910:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[0],1);
    8914:	80 91 6e 05 	lds	r24, 0x056E
    8918:	61 e0       	ldi	r22, 0x01	; 1
    891a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[1],1);
    891e:	80 91 6f 05 	lds	r24, 0x056F
    8922:	61 e0       	ldi	r22, 0x01	; 1
    8924:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[0],1);
    8928:	80 91 cb 05 	lds	r24, 0x05CB
    892c:	61 e0       	ldi	r22, 0x01	; 1
    892e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[1],1);
    8932:	80 91 cc 05 	lds	r24, 0x05CC
    8936:	61 e0       	ldi	r22, 0x01	; 1
    8938:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[0],1);
    893c:	80 91 0d 07 	lds	r24, 0x070D
    8940:	61 e0       	ldi	r22, 0x01	; 1
    8942:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[1],1);
    8946:	80 91 0e 07 	lds	r24, 0x070E
    894a:	61 e0       	ldi	r22, 0x01	; 1
    894c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[0],1);
    8950:	80 91 77 05 	lds	r24, 0x0577
    8954:	61 e0       	ldi	r22, 0x01	; 1
    8956:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[1],1);
    895a:	80 91 78 05 	lds	r24, 0x0578
    895e:	61 e0       	ldi	r22, 0x01	; 1
    8960:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
    8964:	80 91 6c 05 	lds	r24, 0x056C
    8968:	61 e0       	ldi	r22, 0x01	; 1
    896a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[1],1);
    896e:	80 91 6d 05 	lds	r24, 0x056D
    8972:	61 e0       	ldi	r22, 0x01	; 1
    8974:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
    8978:	80 91 3e 05 	lds	r24, 0x053E
    897c:	61 e0       	ldi	r22, 0x01	; 1
    897e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8982:	80 91 3f 05 	lds	r24, 0x053F
    8986:	61 e0       	ldi	r22, 0x01	; 1
    8988:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    898c:	80 91 40 05 	lds	r24, 0x0540
    8990:	61 e0       	ldi	r22, 0x01	; 1
    8992:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8996:	80 91 41 05 	lds	r24, 0x0541
    899a:	61 e0       	ldi	r22, 0x01	; 1
    899c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    89a0:	80 91 42 05 	lds	r24, 0x0542
    89a4:	61 e0       	ldi	r22, 0x01	; 1
    89a6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    89aa:	80 91 43 05 	lds	r24, 0x0543
    89ae:	61 e0       	ldi	r22, 0x01	; 1
    89b0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    89b4:	80 91 44 05 	lds	r24, 0x0544
    89b8:	61 e0       	ldi	r22, 0x01	; 1
    89ba:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    89be:	80 91 45 05 	lds	r24, 0x0545
    89c2:	61 e0       	ldi	r22, 0x01	; 1
    89c4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    89c8:	80 91 46 05 	lds	r24, 0x0546
    89cc:	61 e0       	ldi	r22, 0x01	; 1
    89ce:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    89d2:	80 91 47 05 	lds	r24, 0x0547
    89d6:	61 e0       	ldi	r22, 0x01	; 1
    89d8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    89dc:	80 91 48 05 	lds	r24, 0x0548
    89e0:	61 e0       	ldi	r22, 0x01	; 1
    89e2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    89e6:	80 91 49 05 	lds	r24, 0x0549
    89ea:	61 e0       	ldi	r22, 0x01	; 1
    89ec:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    89f0:	80 91 4a 05 	lds	r24, 0x054A
    89f4:	61 e0       	ldi	r22, 0x01	; 1
    89f6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    89fa:	80 91 4b 05 	lds	r24, 0x054B
    89fe:	61 e0       	ldi	r22, 0x01	; 1
    8a00:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8a04:	c9 e9       	ldi	r28, 0x99	; 153
    8a06:	d9 e0       	ldi	r29, 0x09	; 9
				}
				for(i=0; i<200; i++) {
					irCommTempValue = irCommBitsSignalTemp[i];
    8a08:	88 81       	ld	r24, Y
    8a0a:	99 81       	ldd	r25, Y+1	; 0x01
    8a0c:	80 93 d6 04 	sts	0x04D6, r24
    8a10:	90 93 d7 04 	sts	0x04D7, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    8a14:	61 e0       	ldi	r22, 0x01	; 1
    8a16:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    8a1a:	80 91 d7 04 	lds	r24, 0x04D7
    8a1e:	61 e0       	ldi	r22, 0x01	; 1
    8a20:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8a24:	22 96       	adiw	r28, 0x02	; 2
				usart0Transmit(irCommSyncStateTemp[0],1);
				usart0Transmit(irCommSyncStateTemp[1],1);
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
				}
				for(i=0; i<200; i++) {
    8a26:	9b e0       	ldi	r25, 0x0B	; 11
    8a28:	c9 32       	cpi	r28, 0x29	; 41
    8a2a:	d9 07       	cpc	r29, r25
    8a2c:	69 f7       	brne	.-38     	; 0x8a08 <irCommTasks+0xa16>
					irCommTempValue = irCommBitsSignalTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				for(i=0; i<10; i++) {
					usart0Transmit(irCommRxBitReceivedTemp[i],1);
    8a2e:	80 91 61 08 	lds	r24, 0x0861
    8a32:	61 e0       	ldi	r22, 0x01	; 1
    8a34:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8a38:	80 91 62 08 	lds	r24, 0x0862
    8a3c:	61 e0       	ldi	r22, 0x01	; 1
    8a3e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8a42:	80 91 63 08 	lds	r24, 0x0863
    8a46:	61 e0       	ldi	r22, 0x01	; 1
    8a48:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8a4c:	80 91 64 08 	lds	r24, 0x0864
    8a50:	61 e0       	ldi	r22, 0x01	; 1
    8a52:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8a56:	80 91 65 08 	lds	r24, 0x0865
    8a5a:	61 e0       	ldi	r22, 0x01	; 1
    8a5c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8a60:	80 91 66 08 	lds	r24, 0x0866
    8a64:	61 e0       	ldi	r22, 0x01	; 1
    8a66:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8a6a:	80 91 67 08 	lds	r24, 0x0867
    8a6e:	61 e0       	ldi	r22, 0x01	; 1
    8a70:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8a74:	80 91 68 08 	lds	r24, 0x0868
    8a78:	61 e0       	ldi	r22, 0x01	; 1
    8a7a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8a7e:	80 91 69 08 	lds	r24, 0x0869
    8a82:	61 e0       	ldi	r22, 0x01	; 1
    8a84:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
    8a88:	80 91 6a 08 	lds	r24, 0x086A
    8a8c:	61 e0       	ldi	r22, 0x01	; 1
    8a8e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				}
				usart0Transmit(irCommRxCrc,1);
    8a92:	80 91 03 05 	lds	r24, 0x0503
    8a96:	61 e0       	ldi	r22, 0x01	; 1
    8a98:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxCrcError,1);
    8a9c:	80 91 13 05 	lds	r24, 0x0513
    8aa0:	61 e0       	ldi	r22, 0x01	; 1
    8aa2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxByte,1);
    8aa6:	80 91 14 05 	lds	r24, 0x0514
    8aaa:	61 e0       	ldi	r22, 0x01	; 1
    8aac:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
				usart0Transmit(irCommRxByteExpected,1);				
    8ab0:	80 91 17 05 	lds	r24, 0x0517
    8ab4:	61 e0       	ldi	r22, 0x01	; 1
    8ab6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>

				irCommState = IRCOMM_RX_STOP;
    8aba:	89 e0       	ldi	r24, 0x09	; 9
    8abc:	80 93 d5 04 	sts	0x04D5, r24
    8ac0:	b1 ca       	rjmp	.-2718   	; 0x8024 <irCommTasks+0x32>

				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    8ac2:	80 91 6b 05 	lds	r24, 0x056B
    8ac6:	90 91 03 05 	lds	r25, 0x0503
    8aca:	89 0f       	add	r24, r25
    8acc:	90 91 6a 05 	lds	r25, 0x056A
    8ad0:	99 0f       	add	r25, r25
    8ad2:	89 0f       	add	r24, r25
    8ad4:	83 70       	andi	r24, 0x03	; 3
    8ad6:	80 93 13 05 	sts	0x0513, r24
				if(irCommRxCrcError==0) {
    8ada:	88 23       	and	r24, r24
    8adc:	69 f4       	brne	.+26     	; 0x8af8 <irCommTasks+0xb06>
					irCommRxLastDataReceived = irCommRxByte;
    8ade:	80 91 14 05 	lds	r24, 0x0514
    8ae2:	80 93 19 05 	sts	0x0519, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    8ae6:	90 91 21 05 	lds	r25, 0x0521
    8aea:	90 93 15 02 	sts	0x0215, r25
					irCommRxDataAvailable = 1;
    8aee:	00 93 1a 05 	sts	0x051A, r16
					//updateBlueLed(0);
					usart0Transmit(irCommRxByte,1);		
    8af2:	61 e0       	ldi	r22, 0x01	; 1
    8af4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart0Transmit>
					//updateBlueLed(255);			
				}
												
				currentProx = 0;
    8af8:	10 92 20 02 	sts	0x0220, r1
				adcSaveDataTo = SKIP_SAMPLE;
    8afc:	85 e0       	ldi	r24, 0x05	; 5
    8afe:	80 93 b5 02 	sts	0x02B5, r24
				adcSamplingState = 0;
    8b02:	10 92 b6 02 	sts	0x02B6, r1
				irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;				
    8b06:	10 92 d4 04 	sts	0x04D4, r1
				} else {
					irCommRxPrevDataReceived = irCommRxLastDataReceived;
				}
				*/

				resetDebugVariables();
    8b0a:	0e 94 50 3f 	call	0x7ea0	; 0x7ea0 <resetDebugVariables>

				irCommState = IRCOMM_RX_IDLE_STATE;
    8b0e:	81 e0       	ldi	r24, 0x01	; 1
    8b10:	80 93 d5 04 	sts	0x04D5, r24
    8b14:	87 ca       	rjmp	.-2802   	; 0x8024 <irCommTasks+0x32>

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				if((irCommRxStartBitDetected==0) && (irCommEnabled!=irCommEnabledNext)) {
    8b16:	80 91 1c 05 	lds	r24, 0x051C
    8b1a:	88 23       	and	r24, r24
    8b1c:	09 f0       	breq	.+2      	; 0x8b20 <irCommTasks+0xb2e>
    8b1e:	82 ca       	rjmp	.-2812   	; 0x8024 <irCommTasks+0x32>
    8b20:	90 91 d2 04 	lds	r25, 0x04D2
    8b24:	80 91 d3 04 	lds	r24, 0x04D3
    8b28:	98 17       	cp	r25, r24
    8b2a:	09 f4       	brne	.+2      	; 0x8b2e <irCommTasks+0xb3c>
    8b2c:	7b ca       	rjmp	.-2826   	; 0x8024 <irCommTasks+0x32>
					if((getTime100MicroSec() - irCommTxLastTransmissionTime) > PAUSE_200_MSEC) {
    8b2e:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getTime100MicroSec>
    8b32:	20 91 27 05 	lds	r18, 0x0527
    8b36:	30 91 28 05 	lds	r19, 0x0528
    8b3a:	40 91 29 05 	lds	r20, 0x0529
    8b3e:	50 91 2a 05 	lds	r21, 0x052A
    8b42:	62 1b       	sub	r22, r18
    8b44:	73 0b       	sbc	r23, r19
    8b46:	84 0b       	sbc	r24, r20
    8b48:	95 0b       	sbc	r25, r21
    8b4a:	64 58       	subi	r22, 0x84	; 132
    8b4c:	77 40       	sbci	r23, 0x07	; 7
    8b4e:	80 40       	sbci	r24, 0x00	; 0
    8b50:	90 40       	sbci	r25, 0x00	; 0
    8b52:	08 f4       	brcc	.+2      	; 0x8b56 <irCommTasks+0xb64>
    8b54:	67 ca       	rjmp	.-2866   	; 0x8024 <irCommTasks+0x32>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    8b56:	82 e0       	ldi	r24, 0x02	; 2
    8b58:	80 93 d2 04 	sts	0x04D2, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    8b5c:	10 93 d5 04 	sts	0x04D5, r17
    8b60:	61 ca       	rjmp	.-2878   	; 0x8024 <irCommTasks+0x32>
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
    8b62:	80 e0       	ldi	r24, 0x00	; 0
    8b64:	94 e0       	ldi	r25, 0x04	; 4
    8b66:	90 93 0b 05 	sts	0x050B, r25
    8b6a:	80 93 0a 05 	sts	0x050A, r24
				irCommTempMax = 0;
    8b6e:	10 92 09 05 	sts	0x0509, r1
    8b72:	10 92 08 05 	sts	0x0508, r1
				irCommShiftCount = 0;
    8b76:	10 92 0c 05 	sts	0x050C, r1
				irCommComputeShift = 1;												
    8b7a:	00 93 0d 05 	sts	0x050D, r16
    8b7e:	c0 90 21 05 	lds	r12, 0x0521
    8b82:	d0 90 22 05 	lds	r13, 0x0522
    8b86:	cc 0c       	add	r12, r12
    8b88:	dd 1c       	adc	r13, r13
    8b8a:	7b e3       	ldi	r23, 0x3B	; 59
    8b8c:	a7 2e       	mov	r10, r23
    8b8e:	7b e0       	ldi	r23, 0x0B	; 11
    8b90:	b7 2e       	mov	r11, r23
    8b92:	e5 01       	movw	r28, r10
    8b94:	ee 24       	eor	r14, r14
    8b96:	ff 24       	eor	r15, r15
    8b98:	87 01       	movw	r16, r14
    8b9a:	60 90 4f 08 	lds	r6, 0x084F
    8b9e:	70 90 50 08 	lds	r7, 0x0850
    8ba2:	90 90 ed 04 	lds	r9, 0x04ED
    8ba6:	88 24       	eor	r8, r8
    8ba8:	83 94       	inc	r8
    8baa:	55 24       	eor	r5, r5
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
    8bac:	62 e0       	ldi	r22, 0x02	; 2
    8bae:	36 2e       	mov	r3, r22
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    8bb0:	22 24       	eor	r2, r2
    8bb2:	23 94       	inc	r2
    8bb4:	0e c0       	rjmp	.+28     	; 0x8bd2 <irCommTasks+0xbe0>
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    8bb6:	f2 e0       	ldi	r31, 0x02	; 2
    8bb8:	8f 16       	cp	r8, r31
    8bba:	09 f4       	brne	.+2      	; 0x8bbe <irCommTasks+0xbcc>
    8bbc:	7f c0       	rjmp	.+254    	; 0x8cbc <irCommTasks+0xcca>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    8bbe:	80 e1       	ldi	r24, 0x10	; 16
    8bc0:	90 e0       	ldi	r25, 0x00	; 0
    8bc2:	c8 0e       	add	r12, r24
    8bc4:	d9 1e       	adc	r13, r25
    8bc6:	22 96       	adiw	r28, 0x02	; 2
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8bc8:	9b e0       	ldi	r25, 0x0B	; 11
    8bca:	c3 36       	cpi	r28, 0x63	; 99
    8bcc:	d9 07       	cpc	r29, r25
    8bce:	09 f4       	brne	.+2      	; 0x8bd2 <irCommTasks+0xbe0>
    8bd0:	aa c0       	rjmp	.+340    	; 0x8d26 <irCommTasks+0xd34>
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    8bd2:	f3 01       	movw	r30, r6
    8bd4:	ec 0d       	add	r30, r12
    8bd6:	fd 1d       	adc	r31, r13
    8bd8:	20 81       	ld	r18, Z
    8bda:	31 81       	ldd	r19, Z+1	; 0x01
    8bdc:	39 83       	std	Y+1, r19	; 0x01
    8bde:	28 83       	st	Y, r18

					if(irCommMaxSensorSignalIndexTemp>39) {
    8be0:	b7 e2       	ldi	r27, 0x27	; 39
    8be2:	b9 15       	cp	r27, r9
    8be4:	10 f4       	brcc	.+4      	; 0x8bea <irCommTasks+0xbf8>
    8be6:	57 e2       	ldi	r21, 0x27	; 39
    8be8:	95 2e       	mov	r9, r21
						irCommMaxSensorSignalIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
    8bea:	e9 2d       	mov	r30, r9
    8bec:	f0 e0       	ldi	r31, 0x00	; 0
    8bee:	ee 0f       	add	r30, r30
    8bf0:	ff 1f       	adc	r31, r31
    8bf2:	e3 59       	subi	r30, 0x93	; 147
    8bf4:	f7 4f       	sbci	r31, 0xF7	; 247
    8bf6:	31 83       	std	Z+1, r19	; 0x01
    8bf8:	20 83       	st	Z, r18
					irCommMaxSensorSignalIndexTemp++;					
    8bfa:	93 94       	inc	r9
    8bfc:	90 92 ed 04 	sts	0x04ED, r9

					irCommProxSum += irCommMaxSensorSignal[i];
    8c00:	c9 01       	movw	r24, r18
    8c02:	aa 27       	eor	r26, r26
    8c04:	97 fd       	sbrc	r25, 7
    8c06:	a0 95       	com	r26
    8c08:	ba 2f       	mov	r27, r26
    8c0a:	e8 0e       	add	r14, r24
    8c0c:	f9 1e       	adc	r15, r25
    8c0e:	0a 1f       	adc	r16, r26
    8c10:	1b 1f       	adc	r17, r27
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    8c12:	e1 e0       	ldi	r30, 0x01	; 1
    8c14:	8e 16       	cp	r8, r30
    8c16:	79 f6       	brne	.-98     	; 0x8bb6 <irCommTasks+0xbc4>
						irCommShiftCount++;								
    8c18:	45 2c       	mov	r4, r5
    8c1a:	53 94       	inc	r5
    8c1c:	50 92 0c 05 	sts	0x050C, r5
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8c20:	60 91 0a 05 	lds	r22, 0x050A
    8c24:	70 91 0b 05 	lds	r23, 0x050B
    8c28:	26 17       	cp	r18, r22
    8c2a:	37 07       	cpc	r19, r23
    8c2c:	2c f4       	brge	.+10     	; 0x8c38 <irCommTasks+0xc46>
							irCommTempMin = irCommMaxSensorSignal[i];
    8c2e:	30 93 0b 05 	sts	0x050B, r19
    8c32:	20 93 0a 05 	sts	0x050A, r18
    8c36:	b9 01       	movw	r22, r18
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    8c38:	40 91 08 05 	lds	r20, 0x0508
    8c3c:	50 91 09 05 	lds	r21, 0x0509
    8c40:	42 17       	cp	r20, r18
    8c42:	53 07       	cpc	r21, r19
    8c44:	2c f4       	brge	.+10     	; 0x8c50 <irCommTasks+0xc5e>
							irCommTempMax = irCommMaxSensorSignal[i];
    8c46:	30 93 09 05 	sts	0x0509, r19
    8c4a:	20 93 08 05 	sts	0x0508, r18
    8c4e:	a9 01       	movw	r20, r18
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
    8c50:	ca 01       	movw	r24, r20
    8c52:	86 1b       	sub	r24, r22
    8c54:	97 0b       	sbc	r25, r23
    8c56:	dc 01       	movw	r26, r24
    8c58:	80 93 d6 04 	sts	0x04D6, r24
    8c5c:	90 93 d7 04 	sts	0x04D7, r25
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8c60:	80 35       	cpi	r24, 0x50	; 80
    8c62:	91 05       	cpc	r25, r1
    8c64:	0c f4       	brge	.+2      	; 0x8c68 <irCommTasks+0xc76>
    8c66:	ab cf       	rjmp	.-170    	; 0x8bbe <irCommTasks+0xbcc>

							if(irCommStartDiffIndexTemp>1) {
    8c68:	80 91 f7 04 	lds	r24, 0x04F7
    8c6c:	82 30       	cpi	r24, 0x02	; 2
    8c6e:	08 f0       	brcs	.+2      	; 0x8c72 <irCommTasks+0xc80>
    8c70:	81 e0       	ldi	r24, 0x01	; 1
								irCommStartDiffIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
    8c72:	e8 2f       	mov	r30, r24
    8c74:	f0 e0       	ldi	r31, 0x00	; 0
    8c76:	ee 0f       	add	r30, r30
    8c78:	ff 1f       	adc	r31, r31
    8c7a:	e2 54       	subi	r30, 0x42	; 66
    8c7c:	f7 4f       	sbci	r31, 0xF7	; 247
    8c7e:	a0 83       	st	Z, r26
    8c80:	b1 83       	std	Z+1, r27	; 0x01
							irCommStartDiffIndexTemp++;
    8c82:	8f 5f       	subi	r24, 0xFF	; 255
    8c84:	80 93 f7 04 	sts	0x04F7, r24
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    8c88:	24 17       	cp	r18, r20
    8c8a:	35 07       	cpc	r19, r21
    8c8c:	09 f4       	brne	.+2      	; 0x8c90 <irCommTasks+0xc9e>
    8c8e:	2c c1       	rjmp	.+600    	; 0x8ee8 <irCommTasks+0xef6>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    8c90:	26 17       	cp	r18, r22
    8c92:	37 07       	cpc	r19, r23
    8c94:	09 f4       	brne	.+2      	; 0x8c98 <irCommTasks+0xca6>
    8c96:	81 c1       	rjmp	.+770    	; 0x8f9a <irCommTasks+0xfa8>
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
    8c98:	30 93 0b 05 	sts	0x050B, r19
    8c9c:	20 93 0a 05 	sts	0x050A, r18
							irCommTempMax = irCommMaxSensorSignal[i];
    8ca0:	30 93 09 05 	sts	0x0509, r19
    8ca4:	20 93 08 05 	sts	0x0508, r18
							irCommComputeShift = 2;
    8ca8:	30 92 0d 05 	sts	0x050D, r3
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    8cac:	40 92 0c 05 	sts	0x050C, r4
							irCommRxStartPeakDuration = 0;
    8cb0:	10 92 1e 05 	sts	0x051E, r1
    8cb4:	72 e0       	ldi	r23, 0x02	; 2
    8cb6:	87 2e       	mov	r8, r23
    8cb8:	54 2c       	mov	r5, r4
    8cba:	81 cf       	rjmp	.-254    	; 0x8bbe <irCommTasks+0xbcc>
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    8cbc:	80 91 1e 05 	lds	r24, 0x051E
    8cc0:	8f 5f       	subi	r24, 0xFF	; 255
    8cc2:	80 93 1e 05 	sts	0x051E, r24
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8cc6:	60 91 0a 05 	lds	r22, 0x050A
    8cca:	70 91 0b 05 	lds	r23, 0x050B
    8cce:	26 17       	cp	r18, r22
    8cd0:	37 07       	cpc	r19, r23
    8cd2:	2c f4       	brge	.+10     	; 0x8cde <irCommTasks+0xcec>
							irCommTempMin = irCommMaxSensorSignal[i];
    8cd4:	30 93 0b 05 	sts	0x050B, r19
    8cd8:	20 93 0a 05 	sts	0x050A, r18
    8cdc:	b9 01       	movw	r22, r18
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    8cde:	40 91 08 05 	lds	r20, 0x0508
    8ce2:	50 91 09 05 	lds	r21, 0x0509
    8ce6:	42 17       	cp	r20, r18
    8ce8:	53 07       	cpc	r21, r19
    8cea:	2c f4       	brge	.+10     	; 0x8cf6 <irCommTasks+0xd04>
							irCommTempMax = irCommMaxSensorSignal[i];
    8cec:	30 93 09 05 	sts	0x0509, r19
    8cf0:	20 93 08 05 	sts	0x0508, r18
    8cf4:	a9 01       	movw	r20, r18
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    8cf6:	ca 01       	movw	r24, r20
    8cf8:	86 1b       	sub	r24, r22
    8cfa:	97 0b       	sbc	r25, r23
    8cfc:	80 35       	cpi	r24, 0x50	; 80
    8cfe:	91 05       	cpc	r25, r1
    8d00:	0c f4       	brge	.+2      	; 0x8d04 <irCommTasks+0xd12>
    8d02:	5d cf       	rjmp	.-326    	; 0x8bbe <irCommTasks+0xbcc>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    8d04:	24 17       	cp	r18, r20
    8d06:	35 07       	cpc	r19, r21
    8d08:	09 f4       	brne	.+2      	; 0x8d0c <irCommTasks+0xd1a>
    8d0a:	41 c1       	rjmp	.+642    	; 0x8f8e <irCommTasks+0xf9c>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    8d0c:	26 17       	cp	r18, r22
    8d0e:	37 07       	cpc	r19, r23
    8d10:	09 f0       	breq	.+2      	; 0x8d14 <irCommTasks+0xd22>
    8d12:	55 cf       	rjmp	.-342    	; 0x8bbe <irCommTasks+0xbcc>
    8d14:	80 91 1d 05 	lds	r24, 0x051D
    8d18:	88 23       	and	r24, r24
    8d1a:	09 f0       	breq	.+2      	; 0x8d1e <irCommTasks+0xd2c>
    8d1c:	50 cf       	rjmp	.-352    	; 0x8bbe <irCommTasks+0xbcc>
								irCommComputeShift = 0;
    8d1e:	10 92 0d 05 	sts	0x050D, r1
    8d22:	88 24       	eor	r8, r8
    8d24:	4c cf       	rjmp	.-360    	; 0x8bbe <irCommTasks+0xbcc>
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8d26:	b7 01       	movw	r22, r14
    8d28:	c8 01       	movw	r24, r16
    8d2a:	e0 92 04 05 	sts	0x0504, r14
    8d2e:	f0 92 05 05 	sts	0x0505, r15
    8d32:	00 93 06 05 	sts	0x0506, r16
    8d36:	10 93 07 05 	sts	0x0507, r17
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    8d3a:	20 91 f8 04 	lds	r18, 0x04F8
    8d3e:	22 30       	cpi	r18, 0x02	; 2
    8d40:	08 f0       	brcs	.+2      	; 0x8d44 <irCommTasks+0xd52>
    8d42:	21 e0       	ldi	r18, 0x01	; 1
					irCommComputeShiftIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
    8d44:	e2 2f       	mov	r30, r18
    8d46:	f0 e0       	ldi	r31, 0x00	; 0
    8d48:	e2 59       	subi	r30, 0x92	; 146
    8d4a:	fa 4f       	sbci	r31, 0xFA	; 250
    8d4c:	80 82       	st	Z, r8
				irCommComputeShiftIndexTemp++;
    8d4e:	2f 5f       	subi	r18, 0xFF	; 255
    8d50:	20 93 f8 04 	sts	0x04F8, r18
				
				if(irCommShiftCountIndexTemp>1) {
    8d54:	20 91 f5 04 	lds	r18, 0x04F5
    8d58:	22 30       	cpi	r18, 0x02	; 2
    8d5a:	08 f0       	brcs	.+2      	; 0x8d5e <irCommTasks+0xd6c>
    8d5c:	21 e0       	ldi	r18, 0x01	; 1
					irCommShiftCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
    8d5e:	e2 2f       	mov	r30, r18
    8d60:	f0 e0       	ldi	r31, 0x00	; 0
    8d62:	e3 58       	subi	r30, 0x83	; 131
    8d64:	f4 4f       	sbci	r31, 0xF4	; 244
    8d66:	50 82       	st	Z, r5
				irCommShiftCountIndexTemp++;
    8d68:	2f 5f       	subi	r18, 0xFF	; 255
    8d6a:	20 93 f5 04 	sts	0x04F5, r18
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    8d6e:	20 91 f9 04 	lds	r18, 0x04F9
    8d72:	22 30       	cpi	r18, 0x02	; 2
    8d74:	08 f0       	brcs	.+2      	; 0x8d78 <irCommTasks+0xd86>
    8d76:	21 e0       	ldi	r18, 0x01	; 1
					irCommRxPeakHighToLowIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
    8d78:	e2 2f       	mov	r30, r18
    8d7a:	f0 e0       	ldi	r31, 0x00	; 0
    8d7c:	e5 53       	subi	r30, 0x35	; 53
    8d7e:	fa 4f       	sbci	r31, 0xFA	; 250
    8d80:	10 91 1d 05 	lds	r17, 0x051D
    8d84:	10 83       	st	Z, r17
				irCommRxPeakHighToLowIndexTemp++;
    8d86:	2f 5f       	subi	r18, 0xFF	; 255
    8d88:	20 93 f9 04 	sts	0x04F9, r18
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    8d8c:	20 91 fa 04 	lds	r18, 0x04FA
    8d90:	22 30       	cpi	r18, 0x02	; 2
    8d92:	08 f0       	brcs	.+2      	; 0x8d96 <irCommTasks+0xda4>
    8d94:	21 e0       	ldi	r18, 0x01	; 1
					irCommRxStartPeakDurationIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartPeakDurationTemp[irCommRxStartPeakDurationIndexTemp] = irCommRxStartPeakDuration;
    8d96:	e2 2f       	mov	r30, r18
    8d98:	f0 e0       	ldi	r31, 0x00	; 0
    8d9a:	e3 5f       	subi	r30, 0xF3	; 243
    8d9c:	f8 4f       	sbci	r31, 0xF8	; 248
    8d9e:	00 91 1e 05 	lds	r16, 0x051E
    8da2:	00 83       	st	Z, r16
				irCommRxStartPeakDurationIndexTemp++;
    8da4:	2f 5f       	subi	r18, 0xFF	; 255
    8da6:	20 93 fa 04 	sts	0x04FA, r18
					
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    8daa:	24 e1       	ldi	r18, 0x14	; 20
    8dac:	30 e0       	ldi	r19, 0x00	; 0
    8dae:	40 e0       	ldi	r20, 0x00	; 0
    8db0:	50 e0       	ldi	r21, 0x00	; 0
    8db2:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <__divmodsi4>
    8db6:	a9 01       	movw	r20, r18
    8db8:	30 93 0f 05 	sts	0x050F, r19
    8dbc:	20 93 0e 05 	sts	0x050E, r18

				if(irCommProxMeanIndexTemp>1) {
    8dc0:	80 91 f1 04 	lds	r24, 0x04F1
    8dc4:	82 30       	cpi	r24, 0x02	; 2
    8dc6:	08 f0       	brcs	.+2      	; 0x8dca <irCommTasks+0xdd8>
    8dc8:	81 e0       	ldi	r24, 0x01	; 1
					irCommProxMeanIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
    8dca:	e8 2f       	mov	r30, r24
    8dcc:	f0 e0       	ldi	r31, 0x00	; 0
    8dce:	ee 0f       	add	r30, r30
    8dd0:	ff 1f       	adc	r31, r31
    8dd2:	ef 58       	subi	r30, 0x8F	; 143
    8dd4:	fa 4f       	sbci	r31, 0xFA	; 250
    8dd6:	51 83       	std	Z+1, r21	; 0x01
    8dd8:	40 83       	st	Z, r20
				irCommProxMeanIndexTemp++;
    8dda:	8f 5f       	subi	r24, 0xFF	; 255
    8ddc:	80 93 f1 04 	sts	0x04F1, r24
    8de0:	30 91 ee 04 	lds	r19, 0x04EE
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
    8de4:	67 e2       	ldi	r22, 0x27	; 39
    8de6:	d5 01       	movw	r26, r10
    8de8:	8d 91       	ld	r24, X+
    8dea:	9c 91       	ld	r25, X
    8dec:	11 97       	sbiw	r26, 0x01	; 1
    8dee:	84 1b       	sub	r24, r20
    8df0:	95 0b       	sbc	r25, r21
    8df2:	8d 93       	st	X+, r24
    8df4:	9c 93       	st	X, r25
    8df6:	27 e2       	ldi	r18, 0x27	; 39
    8df8:	36 17       	cp	r19, r22
    8dfa:	08 f4       	brcc	.+2      	; 0x8dfe <irCommTasks+0xe0c>
    8dfc:	23 2f       	mov	r18, r19

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
						irCommMaxSensorSignalFiltIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalFiltTemp[irCommMaxSensorSignalFiltIndexTemp] = irCommMaxSensorSignal[i];
    8dfe:	e2 2f       	mov	r30, r18
    8e00:	f0 e0       	ldi	r31, 0x00	; 0
    8e02:	ee 0f       	add	r30, r30
    8e04:	ff 1f       	adc	r31, r31
    8e06:	e7 58       	subi	r30, 0x87	; 135
    8e08:	fa 4f       	sbci	r31, 0xFA	; 250
    8e0a:	91 83       	std	Z+1, r25	; 0x01
    8e0c:	80 83       	st	Z, r24
					irCommMaxSensorSignalFiltIndexTemp++;
    8e0e:	32 2f       	mov	r19, r18
    8e10:	3f 5f       	subi	r19, 0xFF	; 255
    8e12:	e2 e0       	ldi	r30, 0x02	; 2
    8e14:	f0 e0       	ldi	r31, 0x00	; 0
    8e16:	ae 0e       	add	r10, r30
    8e18:	bf 1e       	adc	r11, r31
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8e1a:	f3 e6       	ldi	r31, 0x63	; 99
    8e1c:	af 16       	cp	r10, r31
    8e1e:	fb e0       	ldi	r31, 0x0B	; 11
    8e20:	bf 06       	cpc	r11, r31
    8e22:	09 f7       	brne	.-62     	; 0x8de6 <irCommTasks+0xdf4>
    8e24:	30 93 ee 04 	sts	0x04EE, r19
					irCommMaxSensorSignalFiltIndexTemp++;
					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    8e28:	80 91 3b 0b 	lds	r24, 0x0B3B
    8e2c:	90 91 3c 0b 	lds	r25, 0x0B3C
    8e30:	18 16       	cp	r1, r24
    8e32:	19 06       	cpc	r1, r25
    8e34:	0c f0       	brlt	.+2      	; 0x8e38 <irCommTasks+0xe46>
    8e36:	5b c1       	rjmp	.+694    	; 0x90ee <irCommTasks+0x10fc>
					irCommSignalState = 1;
    8e38:	81 e0       	ldi	r24, 0x01	; 1
    8e3a:	80 93 10 05 	sts	0x0510, r24
    8e3e:	28 2f       	mov	r18, r24
				} else {
					irCommSignalState = -1;
    8e40:	ed e3       	ldi	r30, 0x3D	; 61
    8e42:	fb e0       	ldi	r31, 0x0B	; 11
    8e44:	30 e0       	ldi	r19, 0x00	; 0
    8e46:	07 c0       	rjmp	.+14     	; 0x8e56 <irCommTasks+0xe64>
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    8e48:	27 fd       	sbrc	r18, 7
    8e4a:	0f c0       	rjmp	.+30     	; 0x8e6a <irCommTasks+0xe78>
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
							irCommSwitchCount++;
    8e4c:	32 96       	adiw	r30, 0x02	; 2
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8e4e:	8b e0       	ldi	r24, 0x0B	; 11
    8e50:	e3 36       	cpi	r30, 0x63	; 99
    8e52:	f8 07       	cpc	r31, r24
    8e54:	69 f0       	breq	.+26     	; 0x8e70 <irCommTasks+0xe7e>
					if(irCommMaxSensorSignal[i] > 0) {
    8e56:	80 81       	ld	r24, Z
    8e58:	91 81       	ldd	r25, Z+1	; 0x01
    8e5a:	18 16       	cp	r1, r24
    8e5c:	19 06       	cpc	r1, r25
    8e5e:	a4 f3       	brlt	.-24     	; 0x8e48 <irCommTasks+0xe56>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    8e60:	12 16       	cp	r1, r18
    8e62:	a4 f7       	brge	.-24     	; 0x8e4c <irCommTasks+0xe5a>
							irCommSignalState = -1;
							irCommSwitchCount++;
    8e64:	3f 5f       	subi	r19, 0xFF	; 255
    8e66:	2f ef       	ldi	r18, 0xFF	; 255
    8e68:	f1 cf       	rjmp	.-30     	; 0x8e4c <irCommTasks+0xe5a>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    8e6a:	3f 5f       	subi	r19, 0xFF	; 255
    8e6c:	21 e0       	ldi	r18, 0x01	; 1
    8e6e:	ee cf       	rjmp	.-36     	; 0x8e4c <irCommTasks+0xe5a>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8e70:	30 93 11 05 	sts	0x0511, r19
    8e74:	20 93 10 05 	sts	0x0510, r18
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    8e78:	80 91 f2 04 	lds	r24, 0x04F2
    8e7c:	82 30       	cpi	r24, 0x02	; 2
    8e7e:	08 f0       	brcs	.+2      	; 0x8e82 <irCommTasks+0xe90>
    8e80:	81 e0       	ldi	r24, 0x01	; 1
					irCommSwitchCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommSwitchCountTemp[irCommSwitchCountIndexTemp] = irCommSwitchCount;
    8e82:	e8 2f       	mov	r30, r24
    8e84:	f0 e0       	ldi	r31, 0x00	; 0
    8e86:	ed 5a       	subi	r30, 0xAD	; 173
    8e88:	fa 4f       	sbci	r31, 0xFA	; 250
    8e8a:	30 83       	st	Z, r19
				irCommSwitchCountIndexTemp++;
    8e8c:	8f 5f       	subi	r24, 0xFF	; 255
    8e8e:	80 93 f2 04 	sts	0x04F2, r24
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
    8e92:	11 30       	cpi	r17, 0x01	; 1
    8e94:	09 f4       	brne	.+2      	; 0x8e98 <irCommTasks+0xea6>
    8e96:	03 c1       	rjmp	.+518    	; 0x909e <irCommTasks+0x10ac>
							resetDebugVariables();				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
    8e98:	90 91 1c 05 	lds	r25, 0x051C
    8e9c:	91 30       	cpi	r25, 0x01	; 1
    8e9e:	09 f4       	brne	.+2      	; 0x8ea2 <irCommTasks+0xeb0>
    8ea0:	3a c1       	rjmp	.+628    	; 0x9116 <irCommTasks+0x1124>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    8ea2:	32 30       	cpi	r19, 0x02	; 2
    8ea4:	09 f4       	brne	.+2      	; 0x8ea8 <irCommTasks+0xeb6>
    8ea6:	96 c1       	rjmp	.+812    	; 0x91d4 <irCommTasks+0x11e2>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    8ea8:	31 30       	cpi	r19, 0x01	; 1
    8eaa:	09 f4       	brne	.+2      	; 0x8eae <irCommTasks+0xebc>
    8eac:	36 c2       	rjmp	.+1132   	; 0x931a <irCommTasks+0x1328>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							currentProx = 0;
    8eae:	10 92 20 02 	sts	0x0220, r1
							adcSaveDataTo = SKIP_SAMPLE;
    8eb2:	85 e0       	ldi	r24, 0x05	; 5
    8eb4:	80 93 b5 02 	sts	0x02B5, r24
							adcSamplingState = 0;
    8eb8:	10 92 b6 02 	sts	0x02B6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    8ebc:	10 92 d4 04 	sts	0x04D4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;
    8ec0:	81 e0       	ldi	r24, 0x01	; 1
    8ec2:	80 93 d5 04 	sts	0x04D5, r24

							if(irCommSyncStateIndexTemp>1) {
    8ec6:	90 91 fd 04 	lds	r25, 0x04FD
    8eca:	92 30       	cpi	r25, 0x02	; 2
    8ecc:	08 f0       	brcs	.+2      	; 0x8ed0 <irCommTasks+0xede>
    8ece:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 15;
    8ed0:	e9 2f       	mov	r30, r25
    8ed2:	f0 e0       	ldi	r31, 0x00	; 0
    8ed4:	e4 59       	subi	r30, 0x94	; 148
    8ed6:	fa 4f       	sbci	r31, 0xFA	; 250
    8ed8:	8f e0       	ldi	r24, 0x0F	; 15
    8eda:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    8edc:	9f 5f       	subi	r25, 0xFF	; 255
    8ede:	90 93 fd 04 	sts	0x04FD, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    8ee2:	0e 94 50 3f 	call	0x7ea0	; 0x7ea0 <resetDebugVariables>
    8ee6:	9e c8       	rjmp	.-3780   	; 0x8024 <irCommTasks+0x32>
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
							irCommStartDiffIndexTemp++;
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    8ee8:	10 92 1d 05 	sts	0x051D, r1
    8eec:	d5 ce       	rjmp	.-598    	; 0x8c98 <irCommTasks+0xca6>
						}
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
    8eee:	80 91 1c 05 	lds	r24, 0x051C
    8ef2:	81 30       	cpi	r24, 0x01	; 1
    8ef4:	09 f4       	brne	.+2      	; 0x8ef8 <irCommTasks+0xf06>
    8ef6:	3d c1       	rjmp	.+634    	; 0x9172 <irCommTasks+0x1180>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    8ef8:	10 92 1c 05 	sts	0x051C, r1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					//updateRedLed(0);
					currentProx = 0;
    8efc:	10 92 20 02 	sts	0x0220, r1
					adcSaveDataTo = SKIP_SAMPLE;
    8f00:	85 e0       	ldi	r24, 0x05	; 5
    8f02:	80 93 b5 02 	sts	0x02B5, r24
					adcSamplingState = 0;
    8f06:	10 92 b6 02 	sts	0x02B6, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;					
    8f0a:	10 92 d4 04 	sts	0x04D4, r1
					irCommState = IRCOMM_RX_IDLE_STATE;
    8f0e:	81 e0       	ldi	r24, 0x01	; 1
    8f10:	80 93 d5 04 	sts	0x04D5, r24

					//irCommState = IRCOMM_RX_DEBUG;
					//irCommAdcRxState = 12;
					//break;

					resetDebugVariables();
    8f14:	0e 94 50 3f 	call	0x7ea0	; 0x7ea0 <resetDebugVariables>
    8f18:	85 c8       	rjmp	.-3830   	; 0x8024 <irCommTasks+0x32>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8f1a:	30 93 11 05 	sts	0x0511, r19
    8f1e:	20 93 10 05 	sts	0x0510, r18
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    8f22:	36 30       	cpi	r19, 0x06	; 6
    8f24:	08 f4       	brcc	.+2      	; 0x8f28 <irCommTasks+0xf36>
    8f26:	63 c0       	rjmp	.+198    	; 0x8fee <irCommTasks+0xffc>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    8f28:	20 91 12 05 	lds	r18, 0x0512
    8f2c:	e2 2f       	mov	r30, r18
    8f2e:	f0 e0       	ldi	r31, 0x00	; 0
    8f30:	ee 59       	subi	r30, 0x9E	; 158
    8f32:	fa 4f       	sbci	r31, 0xFA	; 250
    8f34:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    8f36:	28 30       	cpi	r18, 0x08	; 8
    8f38:	28 f4       	brcc	.+10     	; 0x8f44 <irCommTasks+0xf52>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    8f3a:	80 91 14 05 	lds	r24, 0x0514
    8f3e:	88 0f       	add	r24, r24
    8f40:	80 93 14 05 	sts	0x0514, r24
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    8f44:	90 91 ff 04 	lds	r25, 0x04FF
    8f48:	9a 30       	cpi	r25, 0x0A	; 10
    8f4a:	20 f0       	brcs	.+8      	; 0x8f54 <irCommTasks+0xf62>
					irCommRxBitReceivedIndexTemp = 9;
    8f4c:	89 e0       	ldi	r24, 0x09	; 9
    8f4e:	80 93 ff 04 	sts	0x04FF, r24
    8f52:	99 e0       	ldi	r25, 0x09	; 9
					//updateRedLed(0);
				}
				irCommRxBitReceivedTemp[irCommRxBitReceivedIndexTemp] = irCommRxBitReceived[irCommRxBitCount];
    8f54:	a9 2f       	mov	r26, r25
    8f56:	b0 e0       	ldi	r27, 0x00	; 0
    8f58:	af 59       	subi	r26, 0x9F	; 159
    8f5a:	b7 4f       	sbci	r27, 0xF7	; 247
    8f5c:	e2 2f       	mov	r30, r18
    8f5e:	f0 e0       	ldi	r31, 0x00	; 0
    8f60:	ee 59       	subi	r30, 0x9E	; 158
    8f62:	fa 4f       	sbci	r31, 0xFA	; 250
    8f64:	80 81       	ld	r24, Z
    8f66:	8c 93       	st	X, r24
				irCommRxBitReceivedIndexTemp++;
    8f68:	9f 5f       	subi	r25, 0xFF	; 255
    8f6a:	90 93 ff 04 	sts	0x04FF, r25

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
    8f6e:	82 2f       	mov	r24, r18
    8f70:	8f 5f       	subi	r24, 0xFF	; 255
    8f72:	80 93 12 05 	sts	0x0512, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    8f76:	8a 30       	cpi	r24, 0x0A	; 10
    8f78:	09 f4       	brne	.+2      	; 0x8f7c <irCommTasks+0xf8a>
    8f7a:	f2 c0       	rjmp	.+484    	; 0x9160 <irCommTasks+0x116e>
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    8f7c:	85 e0       	ldi	r24, 0x05	; 5
    8f7e:	80 93 d5 04 	sts	0x04D5, r24

					if(irCommStateIndexTemp>13) {
    8f82:	90 91 fc 04 	lds	r25, 0x04FC
    8f86:	9e 30       	cpi	r25, 0x0E	; 14
    8f88:	08 f0       	brcs	.+2      	; 0x8f8c <irCommTasks+0xf9a>
    8f8a:	bd cb       	rjmp	.-2182   	; 0x8706 <irCommTasks+0x714>
    8f8c:	c0 cb       	rjmp	.-2176   	; 0x870e <irCommTasks+0x71c>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    8f8e:	80 91 1d 05 	lds	r24, 0x051D
    8f92:	81 30       	cpi	r24, 0x01	; 1
    8f94:	09 f0       	breq	.+2      	; 0x8f98 <irCommTasks+0xfa6>
    8f96:	ba ce       	rjmp	.-652    	; 0x8d0c <irCommTasks+0xd1a>
    8f98:	c2 ce       	rjmp	.-636    	; 0x8d1e <irCommTasks+0xd2c>
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    8f9a:	20 92 1d 05 	sts	0x051D, r2
    8f9e:	7c ce       	rjmp	.-776    	; 0x8c98 <irCommTasks+0xca6>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    8fa0:	2f 5f       	subi	r18, 0xFF	; 255
    8fa2:	f7 c8       	rjmp	.-3602   	; 0x8192 <irCommTasks+0x1a0>
    8fa4:	2f 5f       	subi	r18, 0xFF	; 255
    8fa6:	e8 c8       	rjmp	.-3632   	; 0x8178 <irCommTasks+0x186>
    8fa8:	2f 5f       	subi	r18, 0xFF	; 255
    8faa:	d5 c8       	rjmp	.-3670   	; 0x8156 <irCommTasks+0x164>
    8fac:	2f 5f       	subi	r18, 0xFF	; 255
    8fae:	c0 c8       	rjmp	.-3712   	; 0x8130 <irCommTasks+0x13e>
    8fb0:	2f 5f       	subi	r18, 0xFF	; 255
    8fb2:	ad c8       	rjmp	.-3750   	; 0x810e <irCommTasks+0x11c>
    8fb4:	2f 5f       	subi	r18, 0xFF	; 255
    8fb6:	9c c8       	rjmp	.-3784   	; 0x80f0 <irCommTasks+0xfe>
    8fb8:	20 91 2b 05 	lds	r18, 0x052B
    8fbc:	2f 5f       	subi	r18, 0xFF	; 255
    8fbe:	8b c8       	rjmp	.-3818   	; 0x80d6 <irCommTasks+0xe4>
    8fc0:	81 e0       	ldi	r24, 0x01	; 1
    8fc2:	80 93 2b 05 	sts	0x052B, r24
    8fc6:	7a c8       	rjmp	.-3852   	; 0x80bc <irCommTasks+0xca>

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
    8fc8:	80 ef       	ldi	r24, 0xF0	; 240
    8fca:	90 e0       	ldi	r25, 0x00	; 0
    8fcc:	90 93 2f 05 	sts	0x052F, r25
    8fd0:	80 93 2e 05 	sts	0x052E, r24
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
    8fd4:	81 e0       	ldi	r24, 0x01	; 1
    8fd6:	80 93 30 05 	sts	0x0530, r24
    8fda:	bc cb       	rjmp	.-2184   	; 0x8754 <irCommTasks+0x762>

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
						irCommRxNumReceivingSensors++;
    8fdc:	40 91 23 05 	lds	r20, 0x0523
    8fe0:	4f 5f       	subi	r20, 0xFF	; 255
    8fe2:	40 93 23 05 	sts	0x0523, r20
    8fe6:	c0 c9       	rjmp	.-3200   	; 0x8368 <irCommTasks+0x376>
				if(irCommTxBitCount == 0) {
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
						PORTA = 0xAA;
					} else {
						PORTA = 0x55;
    8fe8:	85 e5       	ldi	r24, 0x55	; 85
    8fea:	82 b9       	out	0x02, r24	; 2
    8fec:	bc cb       	rjmp	.-2184   	; 0x8766 <irCommTasks+0x774>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    8fee:	33 30       	cpi	r19, 0x03	; 3
    8ff0:	08 f4       	brcc	.+2      	; 0x8ff4 <irCommTasks+0x1002>
    8ff2:	84 cf       	rjmp	.-248    	; 0x8efc <irCommTasks+0xf0a>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    8ff4:	20 91 12 05 	lds	r18, 0x0512
    8ff8:	e2 2f       	mov	r30, r18
    8ffa:	f0 e0       	ldi	r31, 0x00	; 0
    8ffc:	ee 59       	subi	r30, 0x9E	; 158
    8ffe:	fa 4f       	sbci	r31, 0xFA	; 250
    9000:	81 e0       	ldi	r24, 0x01	; 1
    9002:	80 83       	st	Z, r24
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    9004:	28 30       	cpi	r18, 0x08	; 8
    9006:	08 f0       	brcs	.+2      	; 0x900a <irCommTasks+0x1018>
    9008:	9d cf       	rjmp	.-198    	; 0x8f44 <irCommTasks+0xf52>
						irCommRxCrc++;
    900a:	80 91 03 05 	lds	r24, 0x0503
    900e:	8f 5f       	subi	r24, 0xFF	; 255
    9010:	80 93 03 05 	sts	0x0503, r24
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    9014:	80 91 14 05 	lds	r24, 0x0514
    9018:	88 0f       	add	r24, r24
						irCommRxByte += 1;
    901a:	8f 5f       	subi	r24, 0xFF	; 255
    901c:	80 93 14 05 	sts	0x0514, r24
    9020:	91 cf       	rjmp	.-222    	; 0x8f44 <irCommTasks+0xf52>
								irCommRxMaxSensor = 0;
							}
							i++;
						}
					} else {	// listen from the same sensor when a start bit is detected
						irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    9022:	40 91 21 05 	lds	r20, 0x0521
    9026:	50 91 22 05 	lds	r21, 0x0522
    902a:	fa 01       	movw	r30, r20
    902c:	ee 0f       	add	r30, r30
    902e:	ff 1f       	adc	r31, r31
    9030:	de 01       	movw	r26, r28
    9032:	ae 0f       	add	r26, r30
    9034:	bf 1f       	adc	r27, r31
    9036:	e6 0f       	add	r30, r22
    9038:	f7 1f       	adc	r31, r23
    903a:	8d 91       	ld	r24, X+
    903c:	9c 91       	ld	r25, X
    903e:	20 81       	ld	r18, Z
    9040:	31 81       	ldd	r19, Z+1	; 0x01
    9042:	82 1b       	sub	r24, r18
    9044:	93 0b       	sbc	r25, r19
    9046:	90 93 20 05 	sts	0x0520, r25
    904a:	80 93 1f 05 	sts	0x051F, r24
    904e:	fa ca       	rjmp	.-2572   	; 0x8644 <irCommTasks+0x652>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    9050:	10 92 1c 05 	sts	0x051C, r1
						currentProx = 0;
    9054:	10 92 20 02 	sts	0x0220, r1
						adcSaveDataTo = SKIP_SAMPLE;
    9058:	85 e0       	ldi	r24, 0x05	; 5
    905a:	80 93 b5 02 	sts	0x02B5, r24
						adcSamplingState = 0;
    905e:	10 92 b6 02 	sts	0x02B6, r1
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9062:	10 92 d4 04 	sts	0x04D4, r1
						irCommState = IRCOMM_RX_IDLE_STATE;
    9066:	81 e0       	ldi	r24, 0x01	; 1
    9068:	80 93 d5 04 	sts	0x04D5, r24
						resetDebugVariables();
    906c:	0e 94 50 3f 	call	0x7ea0	; 0x7ea0 <resetDebugVariables>
					//}			
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
    9070:	80 91 21 05 	lds	r24, 0x0521
    9074:	90 91 22 05 	lds	r25, 0x0522
    9078:	87 30       	cpi	r24, 0x07	; 7
    907a:	91 05       	cpc	r25, r1
    907c:	0c f0       	brlt	.+2      	; 0x9080 <irCommTasks+0x108e>
    907e:	8d c0       	rjmp	.+282    	; 0x919a <irCommTasks+0x11a8>
						irCommRxMaxSensor++;
    9080:	01 96       	adiw	r24, 0x01	; 1
    9082:	90 93 22 05 	sts	0x0522, r25
    9086:	80 93 21 05 	sts	0x0521, r24
    908a:	c0 91 4c 05 	lds	r28, 0x054C
    908e:	d0 91 4d 05 	lds	r29, 0x054D
    9092:	60 91 38 05 	lds	r22, 0x0538
    9096:	70 91 39 05 	lds	r23, 0x0539
    909a:	ac 01       	movw	r20, r24
    909c:	d3 ca       	rjmp	.-2650   	; 0x8644 <irCommTasks+0x652>
				irCommSwitchCountIndexTemp++;
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    909e:	80 91 1c 05 	lds	r24, 0x051C
    90a2:	81 30       	cpi	r24, 0x01	; 1
    90a4:	09 f4       	brne	.+2      	; 0x90a8 <irCommTasks+0x10b6>
    90a6:	14 c1       	rjmp	.+552    	; 0x92d0 <irCommTasks+0x12de>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    90a8:	32 30       	cpi	r19, 0x02	; 2
    90aa:	09 f4       	brne	.+2      	; 0x90ae <irCommTasks+0x10bc>
    90ac:	6b c1       	rjmp	.+726    	; 0x9384 <irCommTasks+0x1392>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
    90ae:	31 30       	cpi	r19, 0x01	; 1
    90b0:	09 f4       	brne	.+2      	; 0x90b4 <irCommTasks+0x10c2>
    90b2:	88 c1       	rjmp	.+784    	; 0x93c4 <irCommTasks+0x13d2>
								irCommState = IRCOMM_RX_IDLE_STATE;

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							currentProx = 0;
    90b4:	10 92 20 02 	sts	0x0220, r1
							adcSaveDataTo = SKIP_SAMPLE;
    90b8:	85 e0       	ldi	r24, 0x05	; 5
    90ba:	80 93 b5 02 	sts	0x02B5, r24
							adcSamplingState = 0;
    90be:	10 92 b6 02 	sts	0x02B6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    90c2:	10 92 d4 04 	sts	0x04D4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    90c6:	10 93 d5 04 	sts	0x04D5, r17

							if(irCommSyncStateIndexTemp>1) {
    90ca:	90 91 fd 04 	lds	r25, 0x04FD
    90ce:	92 30       	cpi	r25, 0x02	; 2
    90d0:	08 f0       	brcs	.+2      	; 0x90d4 <irCommTasks+0x10e2>
    90d2:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 11;
    90d4:	e9 2f       	mov	r30, r25
    90d6:	f0 e0       	ldi	r31, 0x00	; 0
    90d8:	e4 59       	subi	r30, 0x94	; 148
    90da:	fa 4f       	sbci	r31, 0xFA	; 250
    90dc:	8b e0       	ldi	r24, 0x0B	; 11
    90de:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    90e0:	9f 5f       	subi	r25, 0xFF	; 255
    90e2:	90 93 fd 04 	sts	0x04FD, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    90e6:	0e 94 50 3f 	call	0x7ea0	; 0x7ea0 <resetDebugVariables>
    90ea:	0c 94 12 40 	jmp	0x8024	; 0x8024 <irCommTasks+0x32>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    90ee:	8f ef       	ldi	r24, 0xFF	; 255
    90f0:	80 93 10 05 	sts	0x0510, r24
    90f4:	28 2f       	mov	r18, r24
    90f6:	a4 ce       	rjmp	.-696    	; 0x8e40 <irCommTasks+0xe4e>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    90f8:	8c e3       	ldi	r24, 0x3C	; 60
    90fa:	90 e0       	ldi	r25, 0x00	; 0
    90fc:	90 93 2f 05 	sts	0x052F, r25
    9100:	80 93 2e 05 	sts	0x052E, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    9104:	84 e0       	ldi	r24, 0x04	; 4
    9106:	80 93 30 05 	sts	0x0530, r24
    910a:	24 cb       	rjmp	.-2488   	; 0x8754 <irCommTasks+0x762>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    910c:	8f ef       	ldi	r24, 0xFF	; 255
    910e:	80 93 10 05 	sts	0x0510, r24
    9112:	28 2f       	mov	r18, r24
    9114:	f8 c8       	rjmp	.-3600   	; 0x8306 <irCommTasks+0x314>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    9116:	32 30       	cpi	r19, 0x02	; 2
    9118:	09 f4       	brne	.+2      	; 0x911c <irCommTasks+0x112a>
    911a:	29 c1       	rjmp	.+594    	; 0x936e <irCommTasks+0x137c>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    911c:	31 30       	cpi	r19, 0x01	; 1
    911e:	09 f4       	brne	.+2      	; 0x9122 <irCommTasks+0x1130>
    9120:	9a c1       	rjmp	.+820    	; 0x9456 <irCommTasks+0x1464>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    9122:	10 92 1c 05 	sts	0x051C, r1
							currentProx = 0;
    9126:	10 92 20 02 	sts	0x0220, r1
							adcSaveDataTo = SKIP_SAMPLE;
    912a:	85 e0       	ldi	r24, 0x05	; 5
    912c:	80 93 b5 02 	sts	0x02B5, r24
							adcSamplingState = 0;
    9130:	10 92 b6 02 	sts	0x02B6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9134:	10 92 d4 04 	sts	0x04D4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    9138:	90 93 d5 04 	sts	0x04D5, r25

							if(irCommSyncStateIndexTemp>1) {
    913c:	90 91 fd 04 	lds	r25, 0x04FD
    9140:	92 30       	cpi	r25, 0x02	; 2
    9142:	08 f0       	brcs	.+2      	; 0x9146 <irCommTasks+0x1154>
    9144:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 13;
    9146:	e9 2f       	mov	r30, r25
    9148:	f0 e0       	ldi	r31, 0x00	; 0
    914a:	e4 59       	subi	r30, 0x94	; 148
    914c:	fa 4f       	sbci	r31, 0xFA	; 250
    914e:	8d e0       	ldi	r24, 0x0D	; 13
    9150:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    9152:	9f 5f       	subi	r25, 0xFF	; 255
    9154:	90 93 fd 04 	sts	0x04FD, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9158:	0e 94 50 3f 	call	0x7ea0	; 0x7ea0 <resetDebugVariables>
    915c:	0c 94 12 40 	jmp	0x8024	; 0x8024 <irCommTasks+0x32>

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    9160:	87 e0       	ldi	r24, 0x07	; 7
    9162:	80 93 d5 04 	sts	0x04D5, r24

					if(irCommStateIndexTemp>13) {
    9166:	90 91 fc 04 	lds	r25, 0x04FC
    916a:	9e 30       	cpi	r25, 0x0E	; 14
    916c:	08 f0       	brcs	.+2      	; 0x9170 <irCommTasks+0x117e>
    916e:	cb ca       	rjmp	.-2666   	; 0x8706 <irCommTasks+0x714>
    9170:	ce ca       	rjmp	.-2660   	; 0x870e <irCommTasks+0x71c>
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
    9172:	47 30       	cpi	r20, 0x07	; 7
    9174:	51 05       	cpc	r21, r1
    9176:	0c f0       	brlt	.+2      	; 0x917a <irCommTasks+0x1188>
    9178:	f5 c0       	rjmp	.+490    	; 0x9364 <irCommTasks+0x1372>
							irCommRxMaxSensor++;
    917a:	4f 5f       	subi	r20, 0xFF	; 255
    917c:	5f 4f       	sbci	r21, 0xFF	; 255
    917e:	50 93 22 05 	sts	0x0522, r21
    9182:	40 93 21 05 	sts	0x0521, r20
    9186:	b8 ce       	rjmp	.-656    	; 0x8ef8 <irCommTasks+0xf06>
					if(irCommRxStartBitDetected==0) {
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    9188:	10 92 22 05 	sts	0x0522, r1
    918c:	10 92 21 05 	sts	0x0521, r1
    9190:	40 91 21 05 	lds	r20, 0x0521
    9194:	50 91 22 05 	lds	r21, 0x0522
    9198:	5e c9       	rjmp	.-3396   	; 0x8456 <irCommTasks+0x464>
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
    919a:	10 92 22 05 	sts	0x0522, r1
    919e:	10 92 21 05 	sts	0x0521, r1
    91a2:	c0 91 4c 05 	lds	r28, 0x054C
    91a6:	d0 91 4d 05 	lds	r29, 0x054D
    91aa:	60 91 38 05 	lds	r22, 0x0538
    91ae:	70 91 39 05 	lds	r23, 0x0539
    91b2:	40 e0       	ldi	r20, 0x00	; 0
    91b4:	50 e0       	ldi	r21, 0x00	; 0
    91b6:	46 ca       	rjmp	.-2932   	; 0x8644 <irCommTasks+0x652>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    91b8:	4f 5f       	subi	r20, 0xFF	; 255
    91ba:	5f 4f       	sbci	r21, 0xFF	; 255
    91bc:	50 93 22 05 	sts	0x0522, r21
    91c0:	40 93 21 05 	sts	0x0521, r20
    91c4:	86 c9       	rjmp	.-3316   	; 0x84d2 <irCommTasks+0x4e0>
    91c6:	4f 5f       	subi	r20, 0xFF	; 255
    91c8:	5f 4f       	sbci	r21, 0xFF	; 255
    91ca:	50 93 22 05 	sts	0x0522, r21
    91ce:	40 93 21 05 	sts	0x0521, r20
    91d2:	60 c9       	rjmp	.-3392   	; 0x8494 <irCommTasks+0x4a2>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    91d4:	90 91 fd 04 	lds	r25, 0x04FD
    91d8:	92 30       	cpi	r25, 0x02	; 2
    91da:	08 f0       	brcs	.+2      	; 0x91de <irCommTasks+0x11ec>
    91dc:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 1;
    91de:	e9 2f       	mov	r30, r25
    91e0:	f0 e0       	ldi	r31, 0x00	; 0
    91e2:	e4 59       	subi	r30, 0x94	; 148
    91e4:	fa 4f       	sbci	r31, 0xFA	; 250
    91e6:	81 e0       	ldi	r24, 0x01	; 1
    91e8:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    91ea:	9f 5f       	subi	r25, 0xFF	; 255
    91ec:	90 93 fd 04 	sts	0x04FD, r25

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    91f0:	95 2d       	mov	r25, r5
    91f2:	96 5f       	subi	r25, 0xF6	; 246
    91f4:	90 93 0c 05 	sts	0x050C, r25
							irCommRxPeakHighToLow = 0;
    91f8:	10 92 1d 05 	sts	0x051D, r1
							irCommRxStartBitDetected = 0;
    91fc:	10 92 1c 05 	sts	0x051C, r1
							irCommSecondBitSkipped = 0;
    9200:	10 92 15 05 	sts	0x0515, r1
							irCommShiftCounter = 0;
    9204:	10 92 16 05 	sts	0x0516, r1
							irCommRxBitCount = 0;	
    9208:	10 92 12 05 	sts	0x0512, r1
							irCommRxCrc = 0;	
    920c:	10 92 03 05 	sts	0x0503, r1
							irCommRxByte = 0;
    9210:	10 92 14 05 	sts	0x0514, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9214:	84 e0       	ldi	r24, 0x04	; 4
    9216:	80 93 d5 04 	sts	0x04D5, r24
    921a:	59 2e       	mov	r5, r25
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    921c:	90 91 fc 04 	lds	r25, 0x04FC
    9220:	9e 30       	cpi	r25, 0x0E	; 14
    9222:	20 f0       	brcs	.+8      	; 0x922c <irCommTasks+0x123a>
					irCommStateIndexTemp = 13;
    9224:	8d e0       	ldi	r24, 0x0D	; 13
    9226:	80 93 fc 04 	sts	0x04FC, r24
    922a:	9d e0       	ldi	r25, 0x0D	; 13
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
    922c:	80 91 d5 04 	lds	r24, 0x04D5
    9230:	e9 2f       	mov	r30, r25
    9232:	f0 e0       	ldi	r31, 0x00	; 0
    9234:	e2 5c       	subi	r30, 0xC2	; 194
    9236:	fa 4f       	sbci	r31, 0xFA	; 250
    9238:	80 83       	st	Z, r24
				irCommStateIndexTemp++;
    923a:	9f 5f       	subi	r25, 0xFF	; 255
    923c:	90 93 fc 04 	sts	0x04FC, r25
				
				if(irCommShiftCountFinalIndexTemp>1) {
    9240:	80 91 f6 04 	lds	r24, 0x04F6
    9244:	82 30       	cpi	r24, 0x02	; 2
    9246:	08 f0       	brcs	.+2      	; 0x924a <irCommTasks+0x1258>
    9248:	81 e0       	ldi	r24, 0x01	; 1
					irCommShiftCountFinalIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
    924a:	e8 2f       	mov	r30, r24
    924c:	f0 e0       	ldi	r31, 0x00	; 0
    924e:	e9 5c       	subi	r30, 0xC9	; 201
    9250:	f4 4f       	sbci	r31, 0xF4	; 244
    9252:	50 82       	st	Z, r5
				irCommShiftCountFinalIndexTemp++;
    9254:	8f 5f       	subi	r24, 0xFF	; 255
    9256:	80 93 f6 04 	sts	0x04F6, r24
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    925a:	90 91 fb 04 	lds	r25, 0x04FB
    925e:	92 30       	cpi	r25, 0x02	; 2
    9260:	08 f0       	brcs	.+2      	; 0x9264 <irCommTasks+0x1272>
    9262:	91 e0       	ldi	r25, 0x01	; 1
					irCommRxStartBitDetectedIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartBitDetectedTemp[irCommRxStartBitDetectedIndexTemp] = irCommRxStartBitDetected;
    9264:	e9 2f       	mov	r30, r25
    9266:	f0 e0       	ldi	r31, 0x00	; 0
    9268:	e9 58       	subi	r30, 0x89	; 137
    926a:	fa 4f       	sbci	r31, 0xFA	; 250
    926c:	80 91 1c 05 	lds	r24, 0x051C
    9270:	80 83       	st	Z, r24
				irCommRxStartBitDetectedIndexTemp++;			
    9272:	9f 5f       	subi	r25, 0xFF	; 255
    9274:	90 93 fb 04 	sts	0x04FB, r25
    9278:	0c 94 12 40 	jmp	0x8024	; 0x8024 <irCommTasks+0x32>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    927c:	4f 5f       	subi	r20, 0xFF	; 255
    927e:	5f 4f       	sbci	r21, 0xFF	; 255
    9280:	50 93 22 05 	sts	0x0522, r21
    9284:	40 93 21 05 	sts	0x0521, r20
    9288:	43 c9       	rjmp	.-3450   	; 0x8510 <irCommTasks+0x51e>
    928a:	4f 5f       	subi	r20, 0xFF	; 255
    928c:	5f 4f       	sbci	r21, 0xFF	; 255
    928e:	50 93 22 05 	sts	0x0522, r21
    9292:	40 93 21 05 	sts	0x0521, r20
    9296:	5b c9       	rjmp	.-3402   	; 0x854e <irCommTasks+0x55c>
    9298:	4f 5f       	subi	r20, 0xFF	; 255
    929a:	5f 4f       	sbci	r21, 0xFF	; 255
    929c:	50 93 22 05 	sts	0x0522, r21
    92a0:	40 93 21 05 	sts	0x0521, r20
    92a4:	73 c9       	rjmp	.-3354   	; 0x858c <irCommTasks+0x59a>
    92a6:	4f 5f       	subi	r20, 0xFF	; 255
    92a8:	5f 4f       	sbci	r21, 0xFF	; 255
    92aa:	50 93 22 05 	sts	0x0522, r21
    92ae:	40 93 21 05 	sts	0x0521, r20
    92b2:	8b c9       	rjmp	.-3306   	; 0x85ca <irCommTasks+0x5d8>
							} else {
								irCommRxMaxSensor = 0;
    92b4:	10 92 22 05 	sts	0x0522, r1
    92b8:	10 92 21 05 	sts	0x0521, r1
    92bc:	40 e0       	ldi	r20, 0x00	; 0
    92be:	50 e0       	ldi	r21, 0x00	; 0
    92c0:	c1 c9       	rjmp	.-3198   	; 0x8644 <irCommTasks+0x652>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    92c2:	4f 5f       	subi	r20, 0xFF	; 255
    92c4:	5f 4f       	sbci	r21, 0xFF	; 255
    92c6:	50 93 22 05 	sts	0x0522, r21
    92ca:	40 93 21 05 	sts	0x0521, r20
    92ce:	9c c9       	rjmp	.-3272   	; 0x8608 <irCommTasks+0x616>
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    92d0:	32 30       	cpi	r19, 0x02	; 2
    92d2:	09 f4       	brne	.+2      	; 0x92d6 <irCommTasks+0x12e4>
    92d4:	f4 c0       	rjmp	.+488    	; 0x94be <irCommTasks+0x14cc>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    92d6:	31 30       	cpi	r19, 0x01	; 1
    92d8:	09 f4       	brne	.+2      	; 0x92dc <irCommTasks+0x12ea>
    92da:	0d c1       	rjmp	.+538    	; 0x94f6 <irCommTasks+0x1504>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    92dc:	10 92 1c 05 	sts	0x051C, r1
							currentProx = 0;
    92e0:	10 92 20 02 	sts	0x0220, r1
							adcSaveDataTo = SKIP_SAMPLE;
    92e4:	85 e0       	ldi	r24, 0x05	; 5
    92e6:	80 93 b5 02 	sts	0x02B5, r24
							adcSamplingState = 0;
    92ea:	10 92 b6 02 	sts	0x02B6, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    92ee:	10 92 d4 04 	sts	0x04D4, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    92f2:	10 93 d5 04 	sts	0x04D5, r17

							if(irCommSyncStateIndexTemp>1) {
    92f6:	90 91 fd 04 	lds	r25, 0x04FD
    92fa:	92 30       	cpi	r25, 0x02	; 2
    92fc:	08 f0       	brcs	.+2      	; 0x9300 <irCommTasks+0x130e>
    92fe:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 12;
    9300:	e9 2f       	mov	r30, r25
    9302:	f0 e0       	ldi	r31, 0x00	; 0
    9304:	e4 59       	subi	r30, 0x94	; 148
    9306:	fa 4f       	sbci	r31, 0xFA	; 250
    9308:	8c e0       	ldi	r24, 0x0C	; 12
    930a:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    930c:	9f 5f       	subi	r25, 0xFF	; 255
    930e:	90 93 fd 04 	sts	0x04FD, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9312:	0e 94 50 3f 	call	0x7ea0	; 0x7ea0 <resetDebugVariables>
    9316:	0c 94 12 40 	jmp	0x8024	; 0x8024 <irCommTasks+0x32>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    931a:	0b 30       	cpi	r16, 0x0B	; 11
    931c:	08 f4       	brcc	.+2      	; 0x9320 <irCommTasks+0x132e>
    931e:	76 c0       	rjmp	.+236    	; 0x940c <irCommTasks+0x141a>
								currentProx = 0;
    9320:	10 92 20 02 	sts	0x0220, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9324:	85 e0       	ldi	r24, 0x05	; 5
    9326:	80 93 b5 02 	sts	0x02B5, r24
								adcSamplingState = 0;
    932a:	10 92 b6 02 	sts	0x02B6, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    932e:	10 92 d4 04 	sts	0x04D4, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    9332:	30 93 d5 04 	sts	0x04D5, r19

								if(irCommSyncStateIndexTemp>1) {
    9336:	90 91 fd 04 	lds	r25, 0x04FD
    933a:	92 30       	cpi	r25, 0x02	; 2
    933c:	08 f0       	brcs	.+2      	; 0x9340 <irCommTasks+0x134e>
    933e:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 14;
    9340:	e9 2f       	mov	r30, r25
    9342:	f0 e0       	ldi	r31, 0x00	; 0
    9344:	e4 59       	subi	r30, 0x94	; 148
    9346:	fa 4f       	sbci	r31, 0xFA	; 250
    9348:	8e e0       	ldi	r24, 0x0E	; 14
    934a:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    934c:	9f 5f       	subi	r25, 0xFF	; 255
    934e:	90 93 fd 04 	sts	0x04FD, r25
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateRedLed(0);
								//break;

								resetDebugVariables();				
    9352:	0e 94 50 3f 	call	0x7ea0	; 0x7ea0 <resetDebugVariables>
    9356:	0c 94 12 40 	jmp	0x8024	; 0x8024 <irCommTasks+0x32>
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    935a:	b0 93 20 05 	sts	0x0520, r27
    935e:	a0 93 1f 05 	sts	0x051F, r26
    9362:	70 c9       	rjmp	.-3360   	; 0x8644 <irCommTasks+0x652>
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    9364:	10 92 22 05 	sts	0x0522, r1
    9368:	10 92 21 05 	sts	0x0521, r1
    936c:	c5 cd       	rjmp	.-1142   	; 0x8ef8 <irCommTasks+0xf06>
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    936e:	90 91 fd 04 	lds	r25, 0x04FD
    9372:	92 30       	cpi	r25, 0x02	; 2
    9374:	08 f0       	brcs	.+2      	; 0x9378 <irCommTasks+0x1386>
    9376:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    9378:	e9 2f       	mov	r30, r25
    937a:	f0 e0       	ldi	r31, 0x00	; 0
    937c:	e4 59       	subi	r30, 0x94	; 148
    937e:	fa 4f       	sbci	r31, 0xFA	; 250
    9380:	85 e0       	ldi	r24, 0x05	; 5
    9382:	32 cf       	rjmp	.-412    	; 0x91e8 <irCommTasks+0x11f6>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommRxStartPeakDuration<=3) {	// peak due to sensors sampling detected
    9384:	04 30       	cpi	r16, 0x04	; 4
    9386:	08 f0       	brcs	.+2      	; 0x938a <irCommTasks+0x1398>
    9388:	89 c0       	rjmp	.+274    	; 0x949c <irCommTasks+0x14aa>
								currentProx = 0;
    938a:	10 92 20 02 	sts	0x0220, r1
								adcSaveDataTo = SKIP_SAMPLE;
    938e:	85 e0       	ldi	r24, 0x05	; 5
    9390:	80 93 b5 02 	sts	0x02B5, r24
								adcSamplingState = 0;
    9394:	10 92 b6 02 	sts	0x02B6, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    9398:	10 92 d4 04 	sts	0x04D4, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    939c:	10 93 d5 04 	sts	0x04D5, r17

								if(irCommSyncStateIndexTemp>1) {
    93a0:	90 91 fd 04 	lds	r25, 0x04FD
    93a4:	92 30       	cpi	r25, 0x02	; 2
    93a6:	08 f0       	brcs	.+2      	; 0x93aa <irCommTasks+0x13b8>
    93a8:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 16;
    93aa:	e9 2f       	mov	r30, r25
    93ac:	f0 e0       	ldi	r31, 0x00	; 0
    93ae:	e4 59       	subi	r30, 0x94	; 148
    93b0:	fa 4f       	sbci	r31, 0xFA	; 250
    93b2:	80 e1       	ldi	r24, 0x10	; 16
    93b4:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    93b6:	9f 5f       	subi	r25, 0xFF	; 255
    93b8:	90 93 fd 04 	sts	0x04FD, r25
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateGreenLed(0);
								//break;

								resetDebugVariables();
    93bc:	0e 94 50 3f 	call	0x7ea0	; 0x7ea0 <resetDebugVariables>
    93c0:	0c 94 12 40 	jmp	0x8024	; 0x8024 <irCommTasks+0x32>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    93c4:	30 93 1c 05 	sts	0x051C, r19
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    93c8:	0b 30       	cpi	r16, 0x0B	; 11
    93ca:	08 f4       	brcc	.+2      	; 0x93ce <irCommTasks+0x13dc>
    93cc:	83 c0       	rjmp	.+262    	; 0x94d4 <irCommTasks+0x14e2>
								if(irCommSyncStateIndexTemp>1) {
    93ce:	90 91 fd 04 	lds	r25, 0x04FD
    93d2:	92 30       	cpi	r25, 0x02	; 2
    93d4:	08 f0       	brcs	.+2      	; 0x93d8 <irCommTasks+0x13e6>
    93d6:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 4;
    93d8:	e9 2f       	mov	r30, r25
    93da:	f0 e0       	ldi	r31, 0x00	; 0
    93dc:	e4 59       	subi	r30, 0x94	; 148
    93de:	fa 4f       	sbci	r31, 0xFA	; 250
    93e0:	84 e0       	ldi	r24, 0x04	; 4
    93e2:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    93e4:	9f 5f       	subi	r25, 0xFF	; 255
    93e6:	90 93 fd 04 	sts	0x04FD, r25

								//irCommShiftCount = irCommShiftCount;
								irCommRxPeakHighToLow = 0;
    93ea:	10 92 1d 05 	sts	0x051D, r1
								irCommRxStartBitDetected = 0;
    93ee:	10 92 1c 05 	sts	0x051C, r1
								irCommSecondBitSkipped = 0;
    93f2:	10 92 15 05 	sts	0x0515, r1
								irCommShiftCounter = 0;
    93f6:	10 92 16 05 	sts	0x0516, r1
								irCommRxBitCount = 0;	
    93fa:	10 92 12 05 	sts	0x0512, r1
								irCommRxCrc = 0;	
    93fe:	10 92 03 05 	sts	0x0503, r1
								irCommRxByte = 0;
    9402:	10 92 14 05 	sts	0x0514, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9406:	80 93 d5 04 	sts	0x04D5, r24
    940a:	08 cf       	rjmp	.-496    	; 0x921c <irCommTasks+0x122a>
								//break;

								resetDebugVariables();				
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    940c:	90 91 fd 04 	lds	r25, 0x04FD
    9410:	92 30       	cpi	r25, 0x02	; 2
    9412:	08 f0       	brcs	.+2      	; 0x9416 <irCommTasks+0x1424>
    9414:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 7;
    9416:	e9 2f       	mov	r30, r25
    9418:	f0 e0       	ldi	r31, 0x00	; 0
    941a:	e4 59       	subi	r30, 0x94	; 148
    941c:	fa 4f       	sbci	r31, 0xFA	; 250
    941e:	87 e0       	ldi	r24, 0x07	; 7
    9420:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    9422:	9f 5f       	subi	r25, 0xFF	; 255
    9424:	90 93 fd 04 	sts	0x04FD, r25

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
    9428:	84 e1       	ldi	r24, 0x14	; 20
    942a:	80 93 0c 05 	sts	0x050C, r24
								irCommRxPeakHighToLow = 0;
    942e:	10 92 1d 05 	sts	0x051D, r1
								irCommRxStartBitDetected = 0;
    9432:	10 92 1c 05 	sts	0x051C, r1
								irCommSecondBitSkipped = 0;
    9436:	10 92 15 05 	sts	0x0515, r1
								irCommShiftCounter = 0;
    943a:	10 92 16 05 	sts	0x0516, r1
								irCommRxBitCount = 0;	
    943e:	10 92 12 05 	sts	0x0512, r1
								irCommRxCrc = 0;	
    9442:	10 92 03 05 	sts	0x0503, r1
								irCommRxByte = 0;
    9446:	10 92 14 05 	sts	0x0514, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    944a:	84 e0       	ldi	r24, 0x04	; 4
    944c:	80 93 d5 04 	sts	0x04D5, r24
    9450:	04 e1       	ldi	r16, 0x14	; 20
    9452:	50 2e       	mov	r5, r16
    9454:	e3 ce       	rjmp	.-570    	; 0x921c <irCommTasks+0x122a>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    9456:	90 91 fd 04 	lds	r25, 0x04FD
    945a:	92 30       	cpi	r25, 0x02	; 2
    945c:	08 f0       	brcs	.+2      	; 0x9460 <irCommTasks+0x146e>
    945e:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 8;
    9460:	e9 2f       	mov	r30, r25
    9462:	f0 e0       	ldi	r31, 0x00	; 0
    9464:	e4 59       	subi	r30, 0x94	; 148
    9466:	fa 4f       	sbci	r31, 0xFA	; 250
    9468:	88 e0       	ldi	r24, 0x08	; 8
    946a:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    946c:	9f 5f       	subi	r25, 0xFF	; 255
    946e:	90 93 fd 04 	sts	0x04FD, r25

							irCommShiftCount = 0;
    9472:	10 92 0c 05 	sts	0x050C, r1
							irCommRxPeakHighToLow = 0;
    9476:	10 92 1d 05 	sts	0x051D, r1
							irCommRxStartBitDetected = 0;
    947a:	10 92 1c 05 	sts	0x051C, r1
							irCommSecondBitSkipped = 0;
    947e:	10 92 15 05 	sts	0x0515, r1
							irCommShiftCounter = 0;
    9482:	10 92 16 05 	sts	0x0516, r1
							irCommRxBitCount = 0;	
    9486:	10 92 12 05 	sts	0x0512, r1
							irCommRxCrc = 0;	
    948a:	10 92 03 05 	sts	0x0503, r1
							irCommRxByte = 0;
    948e:	10 92 14 05 	sts	0x0514, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    9492:	85 e0       	ldi	r24, 0x05	; 5
    9494:	80 93 d5 04 	sts	0x04D5, r24
    9498:	55 24       	eor	r5, r5
    949a:	c0 ce       	rjmp	.-640    	; 0x921c <irCommTasks+0x122a>
								//break;

								resetDebugVariables();
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    949c:	90 91 fd 04 	lds	r25, 0x04FD
    94a0:	92 30       	cpi	r25, 0x02	; 2
    94a2:	08 f0       	brcs	.+2      	; 0x94a6 <irCommTasks+0x14b4>
    94a4:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 3;
    94a6:	e9 2f       	mov	r30, r25
    94a8:	f0 e0       	ldi	r31, 0x00	; 0
    94aa:	e4 59       	subi	r30, 0x94	; 148
    94ac:	fa 4f       	sbci	r31, 0xFA	; 250
    94ae:	83 e0       	ldi	r24, 0x03	; 3
    94b0:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    94b2:	9f 5f       	subi	r25, 0xFF	; 255
    94b4:	90 93 fd 04 	sts	0x04FD, r25

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    94b8:	95 2d       	mov	r25, r5
    94ba:	9c 5e       	subi	r25, 0xEC	; 236
    94bc:	9b ce       	rjmp	.-714    	; 0x91f4 <irCommTasks+0x1202>

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    94be:	90 91 fd 04 	lds	r25, 0x04FD
    94c2:	92 30       	cpi	r25, 0x02	; 2
    94c4:	08 f0       	brcs	.+2      	; 0x94c8 <irCommTasks+0x14d6>
    94c6:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 6;
    94c8:	e9 2f       	mov	r30, r25
    94ca:	f0 e0       	ldi	r31, 0x00	; 0
    94cc:	e4 59       	subi	r30, 0x94	; 148
    94ce:	fa 4f       	sbci	r31, 0xFA	; 250
    94d0:	86 e0       	ldi	r24, 0x06	; 6
    94d2:	cb cf       	rjmp	.-106    	; 0x946a <irCommTasks+0x1478>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							} else {
								currentProx = 0;
    94d4:	10 92 20 02 	sts	0x0220, r1
								adcSaveDataTo = SKIP_SAMPLE;
    94d8:	85 e0       	ldi	r24, 0x05	; 5
    94da:	80 93 b5 02 	sts	0x02B5, r24
								adcSamplingState = 0;
    94de:	10 92 b6 02 	sts	0x02B6, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    94e2:	10 92 d4 04 	sts	0x04D4, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    94e6:	30 93 d5 04 	sts	0x04D5, r19

								irCommSyncStateIndexTemp++;
    94ea:	80 91 fd 04 	lds	r24, 0x04FD
    94ee:	8f 5f       	subi	r24, 0xFF	; 255
    94f0:	80 93 fd 04 	sts	0x04FD, r24
    94f4:	93 ce       	rjmp	.-730    	; 0x921c <irCommTasks+0x122a>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    94f6:	90 91 fd 04 	lds	r25, 0x04FD
    94fa:	92 30       	cpi	r25, 0x02	; 2
    94fc:	08 f0       	brcs	.+2      	; 0x9500 <irCommTasks+0x150e>
    94fe:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 2;
    9500:	e9 2f       	mov	r30, r25
    9502:	f0 e0       	ldi	r31, 0x00	; 0
    9504:	e4 59       	subi	r30, 0x94	; 148
    9506:	fa 4f       	sbci	r31, 0xFA	; 250
    9508:	82 e0       	ldi	r24, 0x02	; 2
    950a:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    950c:	9f 5f       	subi	r25, 0xFF	; 255
    950e:	90 93 fd 04 	sts	0x04FD, r25

							//irCommShiftCount = irCommShiftCount;
							irCommRxPeakHighToLow = 0;
    9512:	10 92 1d 05 	sts	0x051D, r1
							irCommRxStartBitDetected = 0;
    9516:	10 92 1c 05 	sts	0x051C, r1
							irCommSecondBitSkipped = 0;
    951a:	10 92 15 05 	sts	0x0515, r1
							irCommShiftCounter = 0;
    951e:	10 92 16 05 	sts	0x0516, r1
							irCommRxBitCount = 0;	
    9522:	10 92 12 05 	sts	0x0512, r1
							irCommRxCrc = 0;	
    9526:	10 92 03 05 	sts	0x0503, r1
							irCommRxByte = 0;
    952a:	10 92 14 05 	sts	0x0514, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    952e:	84 e0       	ldi	r24, 0x04	; 4
    9530:	80 93 d5 04 	sts	0x04D5, r24
    9534:	73 ce       	rjmp	.-794    	; 0x921c <irCommTasks+0x122a>

00009536 <irCommInitVars>:
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    9536:	e0 91 39 0b 	lds	r30, 0x0B39
    953a:	f0 91 3a 0b 	lds	r31, 0x0B3A
    953e:	80 e1       	ldi	r24, 0x10	; 16
    9540:	df 01       	movw	r26, r30
    9542:	1d 92       	st	X+, r1
    9544:	8a 95       	dec	r24
    9546:	e9 f7       	brne	.-6      	; 0x9542 <irCommInitVars+0xc>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    9548:	80 91 c9 05 	lds	r24, 0x05C9
    954c:	90 91 ca 05 	lds	r25, 0x05CA
    9550:	6f ef       	ldi	r22, 0xFF	; 255
    9552:	70 e0       	ldi	r23, 0x00	; 0
    9554:	40 e1       	ldi	r20, 0x10	; 16
    9556:	50 e0       	ldi	r21, 0x00	; 0
    9558:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    955c:	10 92 d4 04 	sts	0x04D4, r1
}
    9560:	08 95       	ret

00009562 <irCommInit>:

void irCommInit() {
	irCommProxValuesAdc = irCommProxValuesBuff1;
    9562:	8d ec       	ldi	r24, 0xCD	; 205
    9564:	95 e0       	ldi	r25, 0x05	; 5
    9566:	90 93 6c 08 	sts	0x086C, r25
    956a:	80 93 6b 08 	sts	0x086B, r24
	irCommProxValuesCurr = irCommProxValuesBuff2;
    956e:	8f e0       	ldi	r24, 0x0F	; 15
    9570:	97 e0       	ldi	r25, 0x07	; 7
    9572:	90 93 50 08 	sts	0x0850, r25
    9576:	80 93 4f 08 	sts	0x084F, r24
	irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    957a:	ea e7       	ldi	r30, 0x7A	; 122
    957c:	f9 e0       	ldi	r31, 0x09	; 9
    957e:	f0 93 3a 0b 	sts	0x0B3A, r31
    9582:	e0 93 39 0b 	sts	0x0B39, r30
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    9586:	88 e6       	ldi	r24, 0x68	; 104
    9588:	9b e0       	ldi	r25, 0x0B	; 11
    958a:	90 93 4d 05 	sts	0x054D, r25
    958e:	80 93 4c 05 	sts	0x054C, r24
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    9592:	81 e5       	ldi	r24, 0x51	; 81
    9594:	98 e0       	ldi	r25, 0x08	; 8
    9596:	90 93 ca 05 	sts	0x05CA, r25
    959a:	80 93 c9 05 	sts	0x05C9, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    959e:	24 ed       	ldi	r18, 0xD4	; 212
    95a0:	38 e0       	ldi	r19, 0x08	; 8
    95a2:	30 93 39 05 	sts	0x0539, r19
    95a6:	20 93 38 05 	sts	0x0538, r18
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    95aa:	20 e1       	ldi	r18, 0x10	; 16
    95ac:	df 01       	movw	r26, r30
    95ae:	1d 92       	st	X+, r1
    95b0:	2a 95       	dec	r18
    95b2:	e9 f7       	brne	.-6      	; 0x95ae <irCommInit+0x4c>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    95b4:	6f ef       	ldi	r22, 0xFF	; 255
    95b6:	70 e0       	ldi	r23, 0x00	; 0
    95b8:	40 e1       	ldi	r20, 0x10	; 16
    95ba:	50 e0       	ldi	r21, 0x00	; 0
    95bc:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    95c0:	10 92 d4 04 	sts	0x04D4, r1
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    95c4:	81 e0       	ldi	r24, 0x01	; 1
    95c6:	80 93 d2 04 	sts	0x04D2, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    95ca:	80 93 d5 04 	sts	0x04D5, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    95ce:	80 93 d3 04 	sts	0x04D3, r24
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
	irCommInitVars();
	irCommInitReceiver();
}
    95d2:	08 95       	ret

000095d4 <gridEdgeDetected>:
*/

char gridEdgeDetected() {

	// tell whether a gridEdge is detected or not
	if(proximityResult[9] > 600  || proximityResult[10] > 600) {
    95d4:	80 91 67 02 	lds	r24, 0x0267
    95d8:	90 91 68 02 	lds	r25, 0x0268
    95dc:	89 55       	subi	r24, 0x59	; 89
    95de:	92 40       	sbci	r25, 0x02	; 2
    95e0:	54 f4       	brge	.+20     	; 0x95f6 <gridEdgeDetected+0x22>
    95e2:	20 e0       	ldi	r18, 0x00	; 0
    95e4:	80 91 69 02 	lds	r24, 0x0269
    95e8:	90 91 6a 02 	lds	r25, 0x026A
    95ec:	89 55       	subi	r24, 0x59	; 89
    95ee:	92 40       	sbci	r25, 0x02	; 2
    95f0:	14 f4       	brge	.+4      	; 0x95f6 <gridEdgeDetected+0x22>
		return 1; //it sees the white line
	} else {
		return 0;
	}
}
    95f2:	82 2f       	mov	r24, r18
    95f4:	08 95       	ret
*/

char gridEdgeDetected() {

	// tell whether a gridEdge is detected or not
	if(proximityResult[9] > 600  || proximityResult[10] > 600) {
    95f6:	21 e0       	ldi	r18, 0x01	; 1
		return 1; //it sees the white line
	} else {
		return 0;
	}
}
    95f8:	82 2f       	mov	r24, r18
    95fa:	08 95       	ret

000095fc <moveForwardOne>:


/*move forwared 1 grid step
*/
void moveForwardOne(){
    95fc:	cf 93       	push	r28
    95fe:	df 93       	push	r29
    9600:	c0 e0       	ldi	r28, 0x00	; 0
    9602:	d0 e0       	ldi	r29, 0x00	; 0

//	while(gridEdgeDetected()) {
	for (uint16_t gridMoveCounter = 0; gridMoveCounter < gridMoveCount; gridMoveCounter ++ ){
			setLeftSpeed(15);
    9604:	8f e0       	ldi	r24, 0x0F	; 15
    9606:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <setLeftSpeed>
			setRightSpeed(15);
    960a:	8f e0       	ldi	r24, 0x0F	; 15
    960c:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <setRightSpeed>
			handleMotorsWithSpeedController();
    9610:	0e 94 04 2a 	call	0x5408	; 0x5408 <handleMotorsWithSpeedController>
    9614:	21 96       	adiw	r28, 0x01	; 1
/*move forwared 1 grid step
*/
void moveForwardOne(){

//	while(gridEdgeDetected()) {
	for (uint16_t gridMoveCounter = 0; gridMoveCounter < gridMoveCount; gridMoveCounter ++ ){
    9616:	80 e8       	ldi	r24, 0x80	; 128
    9618:	c8 3e       	cpi	r28, 0xE8	; 232
    961a:	d8 07       	cpc	r29, r24
    961c:	99 f7       	brne	.-26     	; 0x9604 <moveForwardOne+0x8>
			handleMotorsWithSpeedController();
	}

//	stopWait(1);
	
}
    961e:	df 91       	pop	r29
    9620:	cf 91       	pop	r28
    9622:	08 95       	ret

00009624 <stopWait>:


/*stop where robot is and set motor speed to 0, wait if stop = 1
*/
void stopWait(char stop) {
	if(stop) {
    9624:	88 23       	and	r24, r24
    9626:	09 f4       	brne	.+2      	; 0x962a <stopWait+0x6>
    9628:	08 95       	ret
			setLeftSpeed(0);
    962a:	80 e0       	ldi	r24, 0x00	; 0
    962c:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <setLeftSpeed>
			setRightSpeed(0);
    9630:	80 e0       	ldi	r24, 0x00	; 0
    9632:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <setRightSpeed>
			handleMotorsWithSpeedController();
    9636:	0e 94 04 2a 	call	0x5408	; 0x5408 <handleMotorsWithSpeedController>
    963a:	08 95       	ret

0000963c <turn180>:
}

/*
turn 180 degrees and face the direction it came from
*/
void turn180() {
    963c:	cf 93       	push	r28
    963e:	df 93       	push	r29
    9640:	c0 e0       	ldi	r28, 0x00	; 0
    9642:	d0 e0       	ldi	r29, 0x00	; 0
		//stopWait(0); //run
		
		//spin for 90 degrees
		for (uint16_t turnCounter = 0; turnCounter < (turn90count*2); turnCounter ++ ){
			setLeftSpeed(10);
    9644:	8a e0       	ldi	r24, 0x0A	; 10
    9646:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <setLeftSpeed>
			setRightSpeed(-10);
    964a:	86 ef       	ldi	r24, 0xF6	; 246
    964c:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <setRightSpeed>
			handleMotorsWithSpeedController();  
    9650:	0e 94 04 2a 	call	0x5408	; 0x5408 <handleMotorsWithSpeedController>
    9654:	21 96       	adiw	r28, 0x01	; 1
*/
void turn180() {
		//stopWait(0); //run
		
		//spin for 90 degrees
		for (uint16_t turnCounter = 0; turnCounter < (turn90count*2); turnCounter ++ ){
    9656:	86 ed       	ldi	r24, 0xD6	; 214
    9658:	c8 3d       	cpi	r28, 0xD8	; 216
    965a:	d8 07       	cpc	r29, r24
    965c:	99 f7       	brne	.-26     	; 0x9644 <turn180+0x8>
			setRightSpeed(-10);
			handleMotorsWithSpeedController();  
		}
		

}
    965e:	df 91       	pop	r29
    9660:	cf 91       	pop	r28
    9662:	08 95       	ret

00009664 <turnRight>:

}

/*turns 90 degrees to the right
*/
void turnRight() {
    9664:	cf 93       	push	r28
    9666:	df 93       	push	r29
    9668:	c0 e0       	ldi	r28, 0x00	; 0
    966a:	d0 e0       	ldi	r29, 0x00	; 0

		//spin for 90 degrees
		for (uint16_t turnCounter = 0; turnCounter<turn90count; turnCounter ++ ){
			setLeftSpeed(10);
    966c:	8a e0       	ldi	r24, 0x0A	; 10
    966e:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <setLeftSpeed>
			setRightSpeed(-10);
    9672:	86 ef       	ldi	r24, 0xF6	; 246
    9674:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <setRightSpeed>
			handleMotorsWithSpeedController();  
    9678:	0e 94 04 2a 	call	0x5408	; 0x5408 <handleMotorsWithSpeedController>
    967c:	21 96       	adiw	r28, 0x01	; 1
/*turns 90 degrees to the right
*/
void turnRight() {

		//spin for 90 degrees
		for (uint16_t turnCounter = 0; turnCounter<turn90count; turnCounter ++ ){
    967e:	8b e6       	ldi	r24, 0x6B	; 107
    9680:	cc 36       	cpi	r28, 0x6C	; 108
    9682:	d8 07       	cpc	r29, r24
    9684:	99 f7       	brne	.-26     	; 0x966c <turnRight+0x8>
			setLeftSpeed(10);
			setRightSpeed(-10);
			handleMotorsWithSpeedController();  
		}

}
    9686:	df 91       	pop	r29
    9688:	cf 91       	pop	r28
    968a:	08 95       	ret

0000968c <turnLeft>:
static uint16_t gridMoveCount = 33000; 
volatile uint16_t turnCounter = 0;

/*turns 90 degrees to the left
*/
void turnLeft() {
    968c:	cf 93       	push	r28
    968e:	df 93       	push	r29
    9690:	c0 e0       	ldi	r28, 0x00	; 0
    9692:	d0 e0       	ldi	r29, 0x00	; 0
		
		//spin for 90 degrees
		for (uint16_t turnCounter = 0; turnCounter<turn90count; turnCounter ++ ){
			setLeftSpeed(-10);
    9694:	86 ef       	ldi	r24, 0xF6	; 246
    9696:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <setLeftSpeed>
			setRightSpeed(10);
    969a:	8a e0       	ldi	r24, 0x0A	; 10
    969c:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <setRightSpeed>
			handleMotorsWithSpeedController();  
    96a0:	0e 94 04 2a 	call	0x5408	; 0x5408 <handleMotorsWithSpeedController>
    96a4:	21 96       	adiw	r28, 0x01	; 1
/*turns 90 degrees to the left
*/
void turnLeft() {
		
		//spin for 90 degrees
		for (uint16_t turnCounter = 0; turnCounter<turn90count; turnCounter ++ ){
    96a6:	8b e6       	ldi	r24, 0x6B	; 107
    96a8:	cc 36       	cpi	r28, 0x6C	; 108
    96aa:	d8 07       	cpc	r29, r24
    96ac:	99 f7       	brne	.-26     	; 0x9694 <turnLeft+0x8>
			setLeftSpeed(-10);
			setRightSpeed(10);
			handleMotorsWithSpeedController();  
		}

}
    96ae:	df 91       	pop	r29
    96b0:	cf 91       	pop	r28
    96b2:	08 95       	ret

000096b4 <moveForward>:
}


/*move forwared x amount grid step
*/
void moveForward(int gridSteps) {
    96b4:	ef 92       	push	r14
    96b6:	ff 92       	push	r15
    96b8:	0f 93       	push	r16
    96ba:	1f 93       	push	r17
    96bc:	cf 93       	push	r28
    96be:	df 93       	push	r29
    96c0:	7c 01       	movw	r14, r24
	for (int gridStepCounter = 0; gridStepCounter < gridSteps; gridStepCounter ++) {
    96c2:	18 16       	cp	r1, r24
    96c4:	19 06       	cpc	r1, r25
    96c6:	b4 f4       	brge	.+44     	; 0x96f4 <moveForward+0x40>
    96c8:	00 e0       	ldi	r16, 0x00	; 0
    96ca:	10 e0       	ldi	r17, 0x00	; 0
    96cc:	c0 e0       	ldi	r28, 0x00	; 0
    96ce:	d0 e0       	ldi	r29, 0x00	; 0
*/
void moveForwardOne(){

//	while(gridEdgeDetected()) {
	for (uint16_t gridMoveCounter = 0; gridMoveCounter < gridMoveCount; gridMoveCounter ++ ){
			setLeftSpeed(15);
    96d0:	8f e0       	ldi	r24, 0x0F	; 15
    96d2:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <setLeftSpeed>
			setRightSpeed(15);
    96d6:	8f e0       	ldi	r24, 0x0F	; 15
    96d8:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <setRightSpeed>
			handleMotorsWithSpeedController();
    96dc:	0e 94 04 2a 	call	0x5408	; 0x5408 <handleMotorsWithSpeedController>
    96e0:	21 96       	adiw	r28, 0x01	; 1
/*move forwared 1 grid step
*/
void moveForwardOne(){

//	while(gridEdgeDetected()) {
	for (uint16_t gridMoveCounter = 0; gridMoveCounter < gridMoveCount; gridMoveCounter ++ ){
    96e2:	80 e8       	ldi	r24, 0x80	; 128
    96e4:	c8 3e       	cpi	r28, 0xE8	; 232
    96e6:	d8 07       	cpc	r29, r24
    96e8:	99 f7       	brne	.-26     	; 0x96d0 <moveForward+0x1c>


/*move forwared x amount grid step
*/
void moveForward(int gridSteps) {
	for (int gridStepCounter = 0; gridStepCounter < gridSteps; gridStepCounter ++) {
    96ea:	0f 5f       	subi	r16, 0xFF	; 255
    96ec:	1f 4f       	sbci	r17, 0xFF	; 255
    96ee:	0e 15       	cp	r16, r14
    96f0:	1f 05       	cpc	r17, r15
    96f2:	64 f3       	brlt	.-40     	; 0x96cc <moveForward+0x18>
		moveForwardOne();
	}
}
    96f4:	df 91       	pop	r29
    96f6:	cf 91       	pop	r28
    96f8:	1f 91       	pop	r17
    96fa:	0f 91       	pop	r16
    96fc:	ff 90       	pop	r15
    96fe:	ef 90       	pop	r14
    9700:	08 95       	ret

00009702 <main>:
#include "motors.h"
#include "movement.h"

int main(void) {
//	initAdc();
	initPeripherals();
    9702:	0e 94 21 10 	call	0x2042	; 0x2042 <initPeripherals>
	calibrateSensors();
    9706:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <calibrateSensors>

	initBehaviors();
    970a:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <initBehaviors>

	while(1) {
		//getMap();
		turnLeft();
    970e:	0e 94 46 4b 	call	0x968c	; 0x968c <turnLeft>
		moveForward(1); 
    9712:	81 e0       	ldi	r24, 0x01	; 1
    9714:	90 e0       	ldi	r25, 0x00	; 0
    9716:	0e 94 5a 4b 	call	0x96b4	; 0x96b4 <moveForward>
    971a:	f9 cf       	rjmp	.-14     	; 0x970e <main+0xc>

0000971c <__subsf3>:
    971c:	50 58       	subi	r21, 0x80	; 128

0000971e <__addsf3>:
    971e:	bb 27       	eor	r27, r27
    9720:	aa 27       	eor	r26, r26
    9722:	0e d0       	rcall	.+28     	; 0x9740 <__addsf3x>
    9724:	ff c1       	rjmp	.+1022   	; 0x9b24 <__fp_round>
    9726:	c8 d1       	rcall	.+912    	; 0x9ab8 <__fp_pscA>
    9728:	30 f0       	brcs	.+12     	; 0x9736 <__addsf3+0x18>
    972a:	cd d1       	rcall	.+922    	; 0x9ac6 <__fp_pscB>
    972c:	20 f0       	brcs	.+8      	; 0x9736 <__addsf3+0x18>
    972e:	31 f4       	brne	.+12     	; 0x973c <__addsf3+0x1e>
    9730:	9f 3f       	cpi	r25, 0xFF	; 255
    9732:	11 f4       	brne	.+4      	; 0x9738 <__addsf3+0x1a>
    9734:	1e f4       	brtc	.+6      	; 0x973c <__addsf3+0x1e>
    9736:	98 c1       	rjmp	.+816    	; 0x9a68 <__fp_nan>
    9738:	0e f4       	brtc	.+2      	; 0x973c <__addsf3+0x1e>
    973a:	e0 95       	com	r30
    973c:	e7 fb       	bst	r30, 7
    973e:	8e c1       	rjmp	.+796    	; 0x9a5c <__fp_inf>

00009740 <__addsf3x>:
    9740:	e9 2f       	mov	r30, r25
    9742:	12 d2       	rcall	.+1060   	; 0x9b68 <__fp_split3>
    9744:	80 f3       	brcs	.-32     	; 0x9726 <__addsf3+0x8>
    9746:	ba 17       	cp	r27, r26
    9748:	62 07       	cpc	r22, r18
    974a:	73 07       	cpc	r23, r19
    974c:	84 07       	cpc	r24, r20
    974e:	95 07       	cpc	r25, r21
    9750:	18 f0       	brcs	.+6      	; 0x9758 <__addsf3x+0x18>
    9752:	71 f4       	brne	.+28     	; 0x9770 <__addsf3x+0x30>
    9754:	9e f5       	brtc	.+102    	; 0x97bc <__addsf3x+0x7c>
    9756:	2a c2       	rjmp	.+1108   	; 0x9bac <__fp_zero>
    9758:	0e f4       	brtc	.+2      	; 0x975c <__addsf3x+0x1c>
    975a:	e0 95       	com	r30
    975c:	0b 2e       	mov	r0, r27
    975e:	ba 2f       	mov	r27, r26
    9760:	a0 2d       	mov	r26, r0
    9762:	0b 01       	movw	r0, r22
    9764:	b9 01       	movw	r22, r18
    9766:	90 01       	movw	r18, r0
    9768:	0c 01       	movw	r0, r24
    976a:	ca 01       	movw	r24, r20
    976c:	a0 01       	movw	r20, r0
    976e:	11 24       	eor	r1, r1
    9770:	ff 27       	eor	r31, r31
    9772:	59 1b       	sub	r21, r25
    9774:	99 f0       	breq	.+38     	; 0x979c <__addsf3x+0x5c>
    9776:	59 3f       	cpi	r21, 0xF9	; 249
    9778:	50 f4       	brcc	.+20     	; 0x978e <__addsf3x+0x4e>
    977a:	50 3e       	cpi	r21, 0xE0	; 224
    977c:	68 f1       	brcs	.+90     	; 0x97d8 <__addsf3x+0x98>
    977e:	1a 16       	cp	r1, r26
    9780:	f0 40       	sbci	r31, 0x00	; 0
    9782:	a2 2f       	mov	r26, r18
    9784:	23 2f       	mov	r18, r19
    9786:	34 2f       	mov	r19, r20
    9788:	44 27       	eor	r20, r20
    978a:	58 5f       	subi	r21, 0xF8	; 248
    978c:	f3 cf       	rjmp	.-26     	; 0x9774 <__addsf3x+0x34>
    978e:	46 95       	lsr	r20
    9790:	37 95       	ror	r19
    9792:	27 95       	ror	r18
    9794:	a7 95       	ror	r26
    9796:	f0 40       	sbci	r31, 0x00	; 0
    9798:	53 95       	inc	r21
    979a:	c9 f7       	brne	.-14     	; 0x978e <__addsf3x+0x4e>
    979c:	7e f4       	brtc	.+30     	; 0x97bc <__addsf3x+0x7c>
    979e:	1f 16       	cp	r1, r31
    97a0:	ba 0b       	sbc	r27, r26
    97a2:	62 0b       	sbc	r22, r18
    97a4:	73 0b       	sbc	r23, r19
    97a6:	84 0b       	sbc	r24, r20
    97a8:	ba f0       	brmi	.+46     	; 0x97d8 <__addsf3x+0x98>
    97aa:	91 50       	subi	r25, 0x01	; 1
    97ac:	a1 f0       	breq	.+40     	; 0x97d6 <__addsf3x+0x96>
    97ae:	ff 0f       	add	r31, r31
    97b0:	bb 1f       	adc	r27, r27
    97b2:	66 1f       	adc	r22, r22
    97b4:	77 1f       	adc	r23, r23
    97b6:	88 1f       	adc	r24, r24
    97b8:	c2 f7       	brpl	.-16     	; 0x97aa <__addsf3x+0x6a>
    97ba:	0e c0       	rjmp	.+28     	; 0x97d8 <__addsf3x+0x98>
    97bc:	ba 0f       	add	r27, r26
    97be:	62 1f       	adc	r22, r18
    97c0:	73 1f       	adc	r23, r19
    97c2:	84 1f       	adc	r24, r20
    97c4:	48 f4       	brcc	.+18     	; 0x97d8 <__addsf3x+0x98>
    97c6:	87 95       	ror	r24
    97c8:	77 95       	ror	r23
    97ca:	67 95       	ror	r22
    97cc:	b7 95       	ror	r27
    97ce:	f7 95       	ror	r31
    97d0:	9e 3f       	cpi	r25, 0xFE	; 254
    97d2:	08 f0       	brcs	.+2      	; 0x97d6 <__addsf3x+0x96>
    97d4:	b3 cf       	rjmp	.-154    	; 0x973c <__addsf3+0x1e>
    97d6:	93 95       	inc	r25
    97d8:	88 0f       	add	r24, r24
    97da:	08 f0       	brcs	.+2      	; 0x97de <__addsf3x+0x9e>
    97dc:	99 27       	eor	r25, r25
    97de:	ee 0f       	add	r30, r30
    97e0:	97 95       	ror	r25
    97e2:	87 95       	ror	r24
    97e4:	08 95       	ret
    97e6:	68 d1       	rcall	.+720    	; 0x9ab8 <__fp_pscA>
    97e8:	58 f0       	brcs	.+22     	; 0x9800 <__addsf3x+0xc0>
    97ea:	80 e8       	ldi	r24, 0x80	; 128
    97ec:	91 e0       	ldi	r25, 0x01	; 1
    97ee:	09 f4       	brne	.+2      	; 0x97f2 <__addsf3x+0xb2>
    97f0:	9e ef       	ldi	r25, 0xFE	; 254
    97f2:	69 d1       	rcall	.+722    	; 0x9ac6 <__fp_pscB>
    97f4:	28 f0       	brcs	.+10     	; 0x9800 <__addsf3x+0xc0>
    97f6:	40 e8       	ldi	r20, 0x80	; 128
    97f8:	51 e0       	ldi	r21, 0x01	; 1
    97fa:	59 f4       	brne	.+22     	; 0x9812 <atan2+0xe>
    97fc:	5e ef       	ldi	r21, 0xFE	; 254
    97fe:	09 c0       	rjmp	.+18     	; 0x9812 <atan2+0xe>
    9800:	33 c1       	rjmp	.+614    	; 0x9a68 <__fp_nan>
    9802:	d4 c1       	rjmp	.+936    	; 0x9bac <__fp_zero>

00009804 <atan2>:
    9804:	e9 2f       	mov	r30, r25
    9806:	e0 78       	andi	r30, 0x80	; 128
    9808:	af d1       	rcall	.+862    	; 0x9b68 <__fp_split3>
    980a:	68 f3       	brcs	.-38     	; 0x97e6 <__addsf3x+0xa6>
    980c:	09 2e       	mov	r0, r25
    980e:	05 2a       	or	r0, r21
    9810:	c1 f3       	breq	.-16     	; 0x9802 <__addsf3x+0xc2>
    9812:	26 17       	cp	r18, r22
    9814:	37 07       	cpc	r19, r23
    9816:	48 07       	cpc	r20, r24
    9818:	59 07       	cpc	r21, r25
    981a:	38 f0       	brcs	.+14     	; 0x982a <atan2+0x26>
    981c:	0e 2e       	mov	r0, r30
    981e:	07 f8       	bld	r0, 7
    9820:	e0 25       	eor	r30, r0
    9822:	69 f0       	breq	.+26     	; 0x983e <atan2+0x3a>
    9824:	e0 25       	eor	r30, r0
    9826:	e0 64       	ori	r30, 0x40	; 64
    9828:	0a c0       	rjmp	.+20     	; 0x983e <atan2+0x3a>
    982a:	ef 63       	ori	r30, 0x3F	; 63
    982c:	07 f8       	bld	r0, 7
    982e:	00 94       	com	r0
    9830:	07 fa       	bst	r0, 7
    9832:	db 01       	movw	r26, r22
    9834:	b9 01       	movw	r22, r18
    9836:	9d 01       	movw	r18, r26
    9838:	dc 01       	movw	r26, r24
    983a:	ca 01       	movw	r24, r20
    983c:	ad 01       	movw	r20, r26
    983e:	ef 93       	push	r30
    9840:	46 d0       	rcall	.+140    	; 0x98ce <__divsf3_pse>
    9842:	70 d1       	rcall	.+736    	; 0x9b24 <__fp_round>
    9844:	0a d0       	rcall	.+20     	; 0x985a <atan>
    9846:	5f 91       	pop	r21
    9848:	55 23       	and	r21, r21
    984a:	31 f0       	breq	.+12     	; 0x9858 <atan2+0x54>
    984c:	2b ed       	ldi	r18, 0xDB	; 219
    984e:	3f e0       	ldi	r19, 0x0F	; 15
    9850:	49 e4       	ldi	r20, 0x49	; 73
    9852:	50 fd       	sbrc	r21, 0
    9854:	49 ec       	ldi	r20, 0xC9	; 201
    9856:	63 cf       	rjmp	.-314    	; 0x971e <__addsf3>
    9858:	08 95       	ret

0000985a <atan>:
    985a:	df 93       	push	r29
    985c:	dd 27       	eor	r29, r29
    985e:	b9 2f       	mov	r27, r25
    9860:	bf 77       	andi	r27, 0x7F	; 127
    9862:	40 e8       	ldi	r20, 0x80	; 128
    9864:	5f e3       	ldi	r21, 0x3F	; 63
    9866:	16 16       	cp	r1, r22
    9868:	17 06       	cpc	r1, r23
    986a:	48 07       	cpc	r20, r24
    986c:	5b 07       	cpc	r21, r27
    986e:	10 f4       	brcc	.+4      	; 0x9874 <atan+0x1a>
    9870:	d9 2f       	mov	r29, r25
    9872:	a3 d1       	rcall	.+838    	; 0x9bba <inverse>
    9874:	9f 93       	push	r25
    9876:	8f 93       	push	r24
    9878:	7f 93       	push	r23
    987a:	6f 93       	push	r22
    987c:	0e d2       	rcall	.+1052   	; 0x9c9a <square>
    987e:	ee e4       	ldi	r30, 0x4E	; 78
    9880:	f1 e0       	ldi	r31, 0x01	; 1
    9882:	f5 d0       	rcall	.+490    	; 0x9a6e <__fp_powser>
    9884:	4f d1       	rcall	.+670    	; 0x9b24 <__fp_round>
    9886:	2f 91       	pop	r18
    9888:	3f 91       	pop	r19
    988a:	4f 91       	pop	r20
    988c:	5f 91       	pop	r21
    988e:	a8 d1       	rcall	.+848    	; 0x9be0 <__mulsf3x>
    9890:	dd 23       	and	r29, r29
    9892:	49 f0       	breq	.+18     	; 0x98a6 <atan+0x4c>
    9894:	90 58       	subi	r25, 0x80	; 128
    9896:	a2 ea       	ldi	r26, 0xA2	; 162
    9898:	2a ed       	ldi	r18, 0xDA	; 218
    989a:	3f e0       	ldi	r19, 0x0F	; 15
    989c:	49 ec       	ldi	r20, 0xC9	; 201
    989e:	5f e3       	ldi	r21, 0x3F	; 63
    98a0:	d0 78       	andi	r29, 0x80	; 128
    98a2:	5d 27       	eor	r21, r29
    98a4:	4d df       	rcall	.-358    	; 0x9740 <__addsf3x>
    98a6:	df 91       	pop	r29
    98a8:	3d c1       	rjmp	.+634    	; 0x9b24 <__fp_round>

000098aa <cos>:
    98aa:	15 d1       	rcall	.+554    	; 0x9ad6 <__fp_rempio2>
    98ac:	e3 95       	inc	r30
    98ae:	4b c1       	rjmp	.+662    	; 0x9b46 <__fp_sinus>

000098b0 <__divsf3>:
    98b0:	0c d0       	rcall	.+24     	; 0x98ca <__divsf3x>
    98b2:	38 c1       	rjmp	.+624    	; 0x9b24 <__fp_round>
    98b4:	08 d1       	rcall	.+528    	; 0x9ac6 <__fp_pscB>
    98b6:	40 f0       	brcs	.+16     	; 0x98c8 <__divsf3+0x18>
    98b8:	ff d0       	rcall	.+510    	; 0x9ab8 <__fp_pscA>
    98ba:	30 f0       	brcs	.+12     	; 0x98c8 <__divsf3+0x18>
    98bc:	21 f4       	brne	.+8      	; 0x98c6 <__divsf3+0x16>
    98be:	5f 3f       	cpi	r21, 0xFF	; 255
    98c0:	19 f0       	breq	.+6      	; 0x98c8 <__divsf3+0x18>
    98c2:	cc c0       	rjmp	.+408    	; 0x9a5c <__fp_inf>
    98c4:	51 11       	cpse	r21, r1
    98c6:	73 c1       	rjmp	.+742    	; 0x9bae <__fp_szero>
    98c8:	cf c0       	rjmp	.+414    	; 0x9a68 <__fp_nan>

000098ca <__divsf3x>:
    98ca:	4e d1       	rcall	.+668    	; 0x9b68 <__fp_split3>
    98cc:	98 f3       	brcs	.-26     	; 0x98b4 <__divsf3+0x4>

000098ce <__divsf3_pse>:
    98ce:	99 23       	and	r25, r25
    98d0:	c9 f3       	breq	.-14     	; 0x98c4 <__divsf3+0x14>
    98d2:	55 23       	and	r21, r21
    98d4:	b1 f3       	breq	.-20     	; 0x98c2 <__divsf3+0x12>
    98d6:	95 1b       	sub	r25, r21
    98d8:	55 0b       	sbc	r21, r21
    98da:	bb 27       	eor	r27, r27
    98dc:	aa 27       	eor	r26, r26
    98de:	62 17       	cp	r22, r18
    98e0:	73 07       	cpc	r23, r19
    98e2:	84 07       	cpc	r24, r20
    98e4:	38 f0       	brcs	.+14     	; 0x98f4 <__divsf3_pse+0x26>
    98e6:	9f 5f       	subi	r25, 0xFF	; 255
    98e8:	5f 4f       	sbci	r21, 0xFF	; 255
    98ea:	22 0f       	add	r18, r18
    98ec:	33 1f       	adc	r19, r19
    98ee:	44 1f       	adc	r20, r20
    98f0:	aa 1f       	adc	r26, r26
    98f2:	a9 f3       	breq	.-22     	; 0x98de <__divsf3_pse+0x10>
    98f4:	33 d0       	rcall	.+102    	; 0x995c <__divsf3_pse+0x8e>
    98f6:	0e 2e       	mov	r0, r30
    98f8:	3a f0       	brmi	.+14     	; 0x9908 <__divsf3_pse+0x3a>
    98fa:	e0 e8       	ldi	r30, 0x80	; 128
    98fc:	30 d0       	rcall	.+96     	; 0x995e <__divsf3_pse+0x90>
    98fe:	91 50       	subi	r25, 0x01	; 1
    9900:	50 40       	sbci	r21, 0x00	; 0
    9902:	e6 95       	lsr	r30
    9904:	00 1c       	adc	r0, r0
    9906:	ca f7       	brpl	.-14     	; 0x98fa <__divsf3_pse+0x2c>
    9908:	29 d0       	rcall	.+82     	; 0x995c <__divsf3_pse+0x8e>
    990a:	fe 2f       	mov	r31, r30
    990c:	27 d0       	rcall	.+78     	; 0x995c <__divsf3_pse+0x8e>
    990e:	66 0f       	add	r22, r22
    9910:	77 1f       	adc	r23, r23
    9912:	88 1f       	adc	r24, r24
    9914:	bb 1f       	adc	r27, r27
    9916:	26 17       	cp	r18, r22
    9918:	37 07       	cpc	r19, r23
    991a:	48 07       	cpc	r20, r24
    991c:	ab 07       	cpc	r26, r27
    991e:	b0 e8       	ldi	r27, 0x80	; 128
    9920:	09 f0       	breq	.+2      	; 0x9924 <__divsf3_pse+0x56>
    9922:	bb 0b       	sbc	r27, r27
    9924:	80 2d       	mov	r24, r0
    9926:	bf 01       	movw	r22, r30
    9928:	ff 27       	eor	r31, r31
    992a:	93 58       	subi	r25, 0x83	; 131
    992c:	5f 4f       	sbci	r21, 0xFF	; 255
    992e:	2a f0       	brmi	.+10     	; 0x993a <__divsf3_pse+0x6c>
    9930:	9e 3f       	cpi	r25, 0xFE	; 254
    9932:	51 05       	cpc	r21, r1
    9934:	68 f0       	brcs	.+26     	; 0x9950 <__divsf3_pse+0x82>
    9936:	92 c0       	rjmp	.+292    	; 0x9a5c <__fp_inf>
    9938:	3a c1       	rjmp	.+628    	; 0x9bae <__fp_szero>
    993a:	5f 3f       	cpi	r21, 0xFF	; 255
    993c:	ec f3       	brlt	.-6      	; 0x9938 <__divsf3_pse+0x6a>
    993e:	98 3e       	cpi	r25, 0xE8	; 232
    9940:	dc f3       	brlt	.-10     	; 0x9938 <__divsf3_pse+0x6a>
    9942:	86 95       	lsr	r24
    9944:	77 95       	ror	r23
    9946:	67 95       	ror	r22
    9948:	b7 95       	ror	r27
    994a:	f7 95       	ror	r31
    994c:	9f 5f       	subi	r25, 0xFF	; 255
    994e:	c9 f7       	brne	.-14     	; 0x9942 <__divsf3_pse+0x74>
    9950:	88 0f       	add	r24, r24
    9952:	91 1d       	adc	r25, r1
    9954:	96 95       	lsr	r25
    9956:	87 95       	ror	r24
    9958:	97 f9       	bld	r25, 7
    995a:	08 95       	ret
    995c:	e1 e0       	ldi	r30, 0x01	; 1
    995e:	66 0f       	add	r22, r22
    9960:	77 1f       	adc	r23, r23
    9962:	88 1f       	adc	r24, r24
    9964:	bb 1f       	adc	r27, r27
    9966:	62 17       	cp	r22, r18
    9968:	73 07       	cpc	r23, r19
    996a:	84 07       	cpc	r24, r20
    996c:	ba 07       	cpc	r27, r26
    996e:	20 f0       	brcs	.+8      	; 0x9978 <__divsf3_pse+0xaa>
    9970:	62 1b       	sub	r22, r18
    9972:	73 0b       	sbc	r23, r19
    9974:	84 0b       	sbc	r24, r20
    9976:	ba 0b       	sbc	r27, r26
    9978:	ee 1f       	adc	r30, r30
    997a:	88 f7       	brcc	.-30     	; 0x995e <__divsf3_pse+0x90>
    997c:	e0 95       	com	r30
    997e:	08 95       	ret

00009980 <__fixsfsi>:
    9980:	04 d0       	rcall	.+8      	; 0x998a <__fixunssfsi>
    9982:	68 94       	set
    9984:	b1 11       	cpse	r27, r1
    9986:	13 c1       	rjmp	.+550    	; 0x9bae <__fp_szero>
    9988:	08 95       	ret

0000998a <__fixunssfsi>:
    998a:	f6 d0       	rcall	.+492    	; 0x9b78 <__fp_splitA>
    998c:	88 f0       	brcs	.+34     	; 0x99b0 <__fixunssfsi+0x26>
    998e:	9f 57       	subi	r25, 0x7F	; 127
    9990:	90 f0       	brcs	.+36     	; 0x99b6 <__fixunssfsi+0x2c>
    9992:	b9 2f       	mov	r27, r25
    9994:	99 27       	eor	r25, r25
    9996:	b7 51       	subi	r27, 0x17	; 23
    9998:	a0 f0       	brcs	.+40     	; 0x99c2 <__fixunssfsi+0x38>
    999a:	d1 f0       	breq	.+52     	; 0x99d0 <__fixunssfsi+0x46>
    999c:	66 0f       	add	r22, r22
    999e:	77 1f       	adc	r23, r23
    99a0:	88 1f       	adc	r24, r24
    99a2:	99 1f       	adc	r25, r25
    99a4:	1a f0       	brmi	.+6      	; 0x99ac <__fixunssfsi+0x22>
    99a6:	ba 95       	dec	r27
    99a8:	c9 f7       	brne	.-14     	; 0x999c <__fixunssfsi+0x12>
    99aa:	12 c0       	rjmp	.+36     	; 0x99d0 <__fixunssfsi+0x46>
    99ac:	b1 30       	cpi	r27, 0x01	; 1
    99ae:	81 f0       	breq	.+32     	; 0x99d0 <__fixunssfsi+0x46>
    99b0:	fd d0       	rcall	.+506    	; 0x9bac <__fp_zero>
    99b2:	b1 e0       	ldi	r27, 0x01	; 1
    99b4:	08 95       	ret
    99b6:	fa c0       	rjmp	.+500    	; 0x9bac <__fp_zero>
    99b8:	67 2f       	mov	r22, r23
    99ba:	78 2f       	mov	r23, r24
    99bc:	88 27       	eor	r24, r24
    99be:	b8 5f       	subi	r27, 0xF8	; 248
    99c0:	39 f0       	breq	.+14     	; 0x99d0 <__fixunssfsi+0x46>
    99c2:	b9 3f       	cpi	r27, 0xF9	; 249
    99c4:	cc f3       	brlt	.-14     	; 0x99b8 <__fixunssfsi+0x2e>
    99c6:	86 95       	lsr	r24
    99c8:	77 95       	ror	r23
    99ca:	67 95       	ror	r22
    99cc:	b3 95       	inc	r27
    99ce:	d9 f7       	brne	.-10     	; 0x99c6 <__fixunssfsi+0x3c>
    99d0:	3e f4       	brtc	.+14     	; 0x99e0 <__fixunssfsi+0x56>
    99d2:	90 95       	com	r25
    99d4:	80 95       	com	r24
    99d6:	70 95       	com	r23
    99d8:	61 95       	neg	r22
    99da:	7f 4f       	sbci	r23, 0xFF	; 255
    99dc:	8f 4f       	sbci	r24, 0xFF	; 255
    99de:	9f 4f       	sbci	r25, 0xFF	; 255
    99e0:	08 95       	ret

000099e2 <__floatunsisf>:
    99e2:	e8 94       	clt
    99e4:	09 c0       	rjmp	.+18     	; 0x99f8 <__floatsisf+0x12>

000099e6 <__floatsisf>:
    99e6:	97 fb       	bst	r25, 7
    99e8:	3e f4       	brtc	.+14     	; 0x99f8 <__floatsisf+0x12>
    99ea:	90 95       	com	r25
    99ec:	80 95       	com	r24
    99ee:	70 95       	com	r23
    99f0:	61 95       	neg	r22
    99f2:	7f 4f       	sbci	r23, 0xFF	; 255
    99f4:	8f 4f       	sbci	r24, 0xFF	; 255
    99f6:	9f 4f       	sbci	r25, 0xFF	; 255
    99f8:	99 23       	and	r25, r25
    99fa:	a9 f0       	breq	.+42     	; 0x9a26 <__floatsisf+0x40>
    99fc:	f9 2f       	mov	r31, r25
    99fe:	96 e9       	ldi	r25, 0x96	; 150
    9a00:	bb 27       	eor	r27, r27
    9a02:	93 95       	inc	r25
    9a04:	f6 95       	lsr	r31
    9a06:	87 95       	ror	r24
    9a08:	77 95       	ror	r23
    9a0a:	67 95       	ror	r22
    9a0c:	b7 95       	ror	r27
    9a0e:	f1 11       	cpse	r31, r1
    9a10:	f8 cf       	rjmp	.-16     	; 0x9a02 <__floatsisf+0x1c>
    9a12:	fa f4       	brpl	.+62     	; 0x9a52 <__floatsisf+0x6c>
    9a14:	bb 0f       	add	r27, r27
    9a16:	11 f4       	brne	.+4      	; 0x9a1c <__floatsisf+0x36>
    9a18:	60 ff       	sbrs	r22, 0
    9a1a:	1b c0       	rjmp	.+54     	; 0x9a52 <__floatsisf+0x6c>
    9a1c:	6f 5f       	subi	r22, 0xFF	; 255
    9a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    9a20:	8f 4f       	sbci	r24, 0xFF	; 255
    9a22:	9f 4f       	sbci	r25, 0xFF	; 255
    9a24:	16 c0       	rjmp	.+44     	; 0x9a52 <__floatsisf+0x6c>
    9a26:	88 23       	and	r24, r24
    9a28:	11 f0       	breq	.+4      	; 0x9a2e <__floatsisf+0x48>
    9a2a:	96 e9       	ldi	r25, 0x96	; 150
    9a2c:	11 c0       	rjmp	.+34     	; 0x9a50 <__floatsisf+0x6a>
    9a2e:	77 23       	and	r23, r23
    9a30:	21 f0       	breq	.+8      	; 0x9a3a <__floatsisf+0x54>
    9a32:	9e e8       	ldi	r25, 0x8E	; 142
    9a34:	87 2f       	mov	r24, r23
    9a36:	76 2f       	mov	r23, r22
    9a38:	05 c0       	rjmp	.+10     	; 0x9a44 <__floatsisf+0x5e>
    9a3a:	66 23       	and	r22, r22
    9a3c:	71 f0       	breq	.+28     	; 0x9a5a <__floatsisf+0x74>
    9a3e:	96 e8       	ldi	r25, 0x86	; 134
    9a40:	86 2f       	mov	r24, r22
    9a42:	70 e0       	ldi	r23, 0x00	; 0
    9a44:	60 e0       	ldi	r22, 0x00	; 0
    9a46:	2a f0       	brmi	.+10     	; 0x9a52 <__floatsisf+0x6c>
    9a48:	9a 95       	dec	r25
    9a4a:	66 0f       	add	r22, r22
    9a4c:	77 1f       	adc	r23, r23
    9a4e:	88 1f       	adc	r24, r24
    9a50:	da f7       	brpl	.-10     	; 0x9a48 <__floatsisf+0x62>
    9a52:	88 0f       	add	r24, r24
    9a54:	96 95       	lsr	r25
    9a56:	87 95       	ror	r24
    9a58:	97 f9       	bld	r25, 7
    9a5a:	08 95       	ret

00009a5c <__fp_inf>:
    9a5c:	97 f9       	bld	r25, 7
    9a5e:	9f 67       	ori	r25, 0x7F	; 127
    9a60:	80 e8       	ldi	r24, 0x80	; 128
    9a62:	70 e0       	ldi	r23, 0x00	; 0
    9a64:	60 e0       	ldi	r22, 0x00	; 0
    9a66:	08 95       	ret

00009a68 <__fp_nan>:
    9a68:	9f ef       	ldi	r25, 0xFF	; 255
    9a6a:	80 ec       	ldi	r24, 0xC0	; 192
    9a6c:	08 95       	ret

00009a6e <__fp_powser>:
    9a6e:	df 93       	push	r29
    9a70:	cf 93       	push	r28
    9a72:	1f 93       	push	r17
    9a74:	0f 93       	push	r16
    9a76:	ff 92       	push	r15
    9a78:	ef 92       	push	r14
    9a7a:	df 92       	push	r13
    9a7c:	7b 01       	movw	r14, r22
    9a7e:	8c 01       	movw	r16, r24
    9a80:	68 94       	set
    9a82:	05 c0       	rjmp	.+10     	; 0x9a8e <__fp_powser+0x20>
    9a84:	da 2e       	mov	r13, r26
    9a86:	ef 01       	movw	r28, r30
    9a88:	ab d0       	rcall	.+342    	; 0x9be0 <__mulsf3x>
    9a8a:	fe 01       	movw	r30, r28
    9a8c:	e8 94       	clt
    9a8e:	a5 91       	lpm	r26, Z+
    9a90:	25 91       	lpm	r18, Z+
    9a92:	35 91       	lpm	r19, Z+
    9a94:	45 91       	lpm	r20, Z+
    9a96:	55 91       	lpm	r21, Z+
    9a98:	ae f3       	brts	.-22     	; 0x9a84 <__fp_powser+0x16>
    9a9a:	ef 01       	movw	r28, r30
    9a9c:	51 de       	rcall	.-862    	; 0x9740 <__addsf3x>
    9a9e:	fe 01       	movw	r30, r28
    9aa0:	97 01       	movw	r18, r14
    9aa2:	a8 01       	movw	r20, r16
    9aa4:	da 94       	dec	r13
    9aa6:	79 f7       	brne	.-34     	; 0x9a86 <__fp_powser+0x18>
    9aa8:	df 90       	pop	r13
    9aaa:	ef 90       	pop	r14
    9aac:	ff 90       	pop	r15
    9aae:	0f 91       	pop	r16
    9ab0:	1f 91       	pop	r17
    9ab2:	cf 91       	pop	r28
    9ab4:	df 91       	pop	r29
    9ab6:	08 95       	ret

00009ab8 <__fp_pscA>:
    9ab8:	00 24       	eor	r0, r0
    9aba:	0a 94       	dec	r0
    9abc:	16 16       	cp	r1, r22
    9abe:	17 06       	cpc	r1, r23
    9ac0:	18 06       	cpc	r1, r24
    9ac2:	09 06       	cpc	r0, r25
    9ac4:	08 95       	ret

00009ac6 <__fp_pscB>:
    9ac6:	00 24       	eor	r0, r0
    9ac8:	0a 94       	dec	r0
    9aca:	12 16       	cp	r1, r18
    9acc:	13 06       	cpc	r1, r19
    9ace:	14 06       	cpc	r1, r20
    9ad0:	05 06       	cpc	r0, r21
    9ad2:	08 95       	ret
    9ad4:	c9 cf       	rjmp	.-110    	; 0x9a68 <__fp_nan>

00009ad6 <__fp_rempio2>:
    9ad6:	50 d0       	rcall	.+160    	; 0x9b78 <__fp_splitA>
    9ad8:	e8 f3       	brcs	.-6      	; 0x9ad4 <__fp_pscB+0xe>
    9ada:	e8 94       	clt
    9adc:	e0 e0       	ldi	r30, 0x00	; 0
    9ade:	bb 27       	eor	r27, r27
    9ae0:	9f 57       	subi	r25, 0x7F	; 127
    9ae2:	f0 f0       	brcs	.+60     	; 0x9b20 <__fp_rempio2+0x4a>
    9ae4:	2a ed       	ldi	r18, 0xDA	; 218
    9ae6:	3f e0       	ldi	r19, 0x0F	; 15
    9ae8:	49 ec       	ldi	r20, 0xC9	; 201
    9aea:	06 c0       	rjmp	.+12     	; 0x9af8 <__fp_rempio2+0x22>
    9aec:	ee 0f       	add	r30, r30
    9aee:	bb 0f       	add	r27, r27
    9af0:	66 1f       	adc	r22, r22
    9af2:	77 1f       	adc	r23, r23
    9af4:	88 1f       	adc	r24, r24
    9af6:	28 f0       	brcs	.+10     	; 0x9b02 <__fp_rempio2+0x2c>
    9af8:	b2 3a       	cpi	r27, 0xA2	; 162
    9afa:	62 07       	cpc	r22, r18
    9afc:	73 07       	cpc	r23, r19
    9afe:	84 07       	cpc	r24, r20
    9b00:	28 f0       	brcs	.+10     	; 0x9b0c <__fp_rempio2+0x36>
    9b02:	b2 5a       	subi	r27, 0xA2	; 162
    9b04:	62 0b       	sbc	r22, r18
    9b06:	73 0b       	sbc	r23, r19
    9b08:	84 0b       	sbc	r24, r20
    9b0a:	e3 95       	inc	r30
    9b0c:	9a 95       	dec	r25
    9b0e:	72 f7       	brpl	.-36     	; 0x9aec <__fp_rempio2+0x16>
    9b10:	80 38       	cpi	r24, 0x80	; 128
    9b12:	30 f4       	brcc	.+12     	; 0x9b20 <__fp_rempio2+0x4a>
    9b14:	9a 95       	dec	r25
    9b16:	bb 0f       	add	r27, r27
    9b18:	66 1f       	adc	r22, r22
    9b1a:	77 1f       	adc	r23, r23
    9b1c:	88 1f       	adc	r24, r24
    9b1e:	d2 f7       	brpl	.-12     	; 0x9b14 <__fp_rempio2+0x3e>
    9b20:	90 48       	sbci	r25, 0x80	; 128
    9b22:	c0 c0       	rjmp	.+384    	; 0x9ca4 <__fp_mpack_finite>

00009b24 <__fp_round>:
    9b24:	09 2e       	mov	r0, r25
    9b26:	03 94       	inc	r0
    9b28:	00 0c       	add	r0, r0
    9b2a:	11 f4       	brne	.+4      	; 0x9b30 <__fp_round+0xc>
    9b2c:	88 23       	and	r24, r24
    9b2e:	52 f0       	brmi	.+20     	; 0x9b44 <__fp_round+0x20>
    9b30:	bb 0f       	add	r27, r27
    9b32:	40 f4       	brcc	.+16     	; 0x9b44 <__fp_round+0x20>
    9b34:	bf 2b       	or	r27, r31
    9b36:	11 f4       	brne	.+4      	; 0x9b3c <__fp_round+0x18>
    9b38:	60 ff       	sbrs	r22, 0
    9b3a:	04 c0       	rjmp	.+8      	; 0x9b44 <__fp_round+0x20>
    9b3c:	6f 5f       	subi	r22, 0xFF	; 255
    9b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    9b40:	8f 4f       	sbci	r24, 0xFF	; 255
    9b42:	9f 4f       	sbci	r25, 0xFF	; 255
    9b44:	08 95       	ret

00009b46 <__fp_sinus>:
    9b46:	ef 93       	push	r30
    9b48:	e0 ff       	sbrs	r30, 0
    9b4a:	06 c0       	rjmp	.+12     	; 0x9b58 <__fp_sinus+0x12>
    9b4c:	a2 ea       	ldi	r26, 0xA2	; 162
    9b4e:	2a ed       	ldi	r18, 0xDA	; 218
    9b50:	3f e0       	ldi	r19, 0x0F	; 15
    9b52:	49 ec       	ldi	r20, 0xC9	; 201
    9b54:	5f eb       	ldi	r21, 0xBF	; 191
    9b56:	f4 dd       	rcall	.-1048   	; 0x9740 <__addsf3x>
    9b58:	e5 df       	rcall	.-54     	; 0x9b24 <__fp_round>
    9b5a:	0f 90       	pop	r0
    9b5c:	03 94       	inc	r0
    9b5e:	01 fc       	sbrc	r0, 1
    9b60:	90 58       	subi	r25, 0x80	; 128
    9b62:	eb e7       	ldi	r30, 0x7B	; 123
    9b64:	f1 e0       	ldi	r31, 0x01	; 1
    9b66:	aa c0       	rjmp	.+340    	; 0x9cbc <__fp_powsodd>

00009b68 <__fp_split3>:
    9b68:	57 fd       	sbrc	r21, 7
    9b6a:	90 58       	subi	r25, 0x80	; 128
    9b6c:	44 0f       	add	r20, r20
    9b6e:	55 1f       	adc	r21, r21
    9b70:	59 f0       	breq	.+22     	; 0x9b88 <__fp_splitA+0x10>
    9b72:	5f 3f       	cpi	r21, 0xFF	; 255
    9b74:	71 f0       	breq	.+28     	; 0x9b92 <__fp_splitA+0x1a>
    9b76:	47 95       	ror	r20

00009b78 <__fp_splitA>:
    9b78:	88 0f       	add	r24, r24
    9b7a:	97 fb       	bst	r25, 7
    9b7c:	99 1f       	adc	r25, r25
    9b7e:	61 f0       	breq	.+24     	; 0x9b98 <__fp_splitA+0x20>
    9b80:	9f 3f       	cpi	r25, 0xFF	; 255
    9b82:	79 f0       	breq	.+30     	; 0x9ba2 <__fp_splitA+0x2a>
    9b84:	87 95       	ror	r24
    9b86:	08 95       	ret
    9b88:	12 16       	cp	r1, r18
    9b8a:	13 06       	cpc	r1, r19
    9b8c:	14 06       	cpc	r1, r20
    9b8e:	55 1f       	adc	r21, r21
    9b90:	f2 cf       	rjmp	.-28     	; 0x9b76 <__fp_split3+0xe>
    9b92:	46 95       	lsr	r20
    9b94:	f1 df       	rcall	.-30     	; 0x9b78 <__fp_splitA>
    9b96:	08 c0       	rjmp	.+16     	; 0x9ba8 <__fp_splitA+0x30>
    9b98:	16 16       	cp	r1, r22
    9b9a:	17 06       	cpc	r1, r23
    9b9c:	18 06       	cpc	r1, r24
    9b9e:	99 1f       	adc	r25, r25
    9ba0:	f1 cf       	rjmp	.-30     	; 0x9b84 <__fp_splitA+0xc>
    9ba2:	86 95       	lsr	r24
    9ba4:	71 05       	cpc	r23, r1
    9ba6:	61 05       	cpc	r22, r1
    9ba8:	08 94       	sec
    9baa:	08 95       	ret

00009bac <__fp_zero>:
    9bac:	e8 94       	clt

00009bae <__fp_szero>:
    9bae:	bb 27       	eor	r27, r27
    9bb0:	66 27       	eor	r22, r22
    9bb2:	77 27       	eor	r23, r23
    9bb4:	cb 01       	movw	r24, r22
    9bb6:	97 f9       	bld	r25, 7
    9bb8:	08 95       	ret

00009bba <inverse>:
    9bba:	9b 01       	movw	r18, r22
    9bbc:	ac 01       	movw	r20, r24
    9bbe:	60 e0       	ldi	r22, 0x00	; 0
    9bc0:	70 e0       	ldi	r23, 0x00	; 0
    9bc2:	80 e8       	ldi	r24, 0x80	; 128
    9bc4:	9f e3       	ldi	r25, 0x3F	; 63
    9bc6:	74 ce       	rjmp	.-792    	; 0x98b0 <__divsf3>

00009bc8 <__mulsf3>:
    9bc8:	0b d0       	rcall	.+22     	; 0x9be0 <__mulsf3x>
    9bca:	ac cf       	rjmp	.-168    	; 0x9b24 <__fp_round>
    9bcc:	75 df       	rcall	.-278    	; 0x9ab8 <__fp_pscA>
    9bce:	28 f0       	brcs	.+10     	; 0x9bda <__mulsf3+0x12>
    9bd0:	7a df       	rcall	.-268    	; 0x9ac6 <__fp_pscB>
    9bd2:	18 f0       	brcs	.+6      	; 0x9bda <__mulsf3+0x12>
    9bd4:	95 23       	and	r25, r21
    9bd6:	09 f0       	breq	.+2      	; 0x9bda <__mulsf3+0x12>
    9bd8:	41 cf       	rjmp	.-382    	; 0x9a5c <__fp_inf>
    9bda:	46 cf       	rjmp	.-372    	; 0x9a68 <__fp_nan>
    9bdc:	11 24       	eor	r1, r1
    9bde:	e7 cf       	rjmp	.-50     	; 0x9bae <__fp_szero>

00009be0 <__mulsf3x>:
    9be0:	c3 df       	rcall	.-122    	; 0x9b68 <__fp_split3>
    9be2:	a0 f3       	brcs	.-24     	; 0x9bcc <__mulsf3+0x4>

00009be4 <__mulsf3_pse>:
    9be4:	95 9f       	mul	r25, r21
    9be6:	d1 f3       	breq	.-12     	; 0x9bdc <__mulsf3+0x14>
    9be8:	95 0f       	add	r25, r21
    9bea:	50 e0       	ldi	r21, 0x00	; 0
    9bec:	55 1f       	adc	r21, r21
    9bee:	62 9f       	mul	r22, r18
    9bf0:	f0 01       	movw	r30, r0
    9bf2:	72 9f       	mul	r23, r18
    9bf4:	bb 27       	eor	r27, r27
    9bf6:	f0 0d       	add	r31, r0
    9bf8:	b1 1d       	adc	r27, r1
    9bfa:	63 9f       	mul	r22, r19
    9bfc:	aa 27       	eor	r26, r26
    9bfe:	f0 0d       	add	r31, r0
    9c00:	b1 1d       	adc	r27, r1
    9c02:	aa 1f       	adc	r26, r26
    9c04:	64 9f       	mul	r22, r20
    9c06:	66 27       	eor	r22, r22
    9c08:	b0 0d       	add	r27, r0
    9c0a:	a1 1d       	adc	r26, r1
    9c0c:	66 1f       	adc	r22, r22
    9c0e:	82 9f       	mul	r24, r18
    9c10:	22 27       	eor	r18, r18
    9c12:	b0 0d       	add	r27, r0
    9c14:	a1 1d       	adc	r26, r1
    9c16:	62 1f       	adc	r22, r18
    9c18:	73 9f       	mul	r23, r19
    9c1a:	b0 0d       	add	r27, r0
    9c1c:	a1 1d       	adc	r26, r1
    9c1e:	62 1f       	adc	r22, r18
    9c20:	83 9f       	mul	r24, r19
    9c22:	a0 0d       	add	r26, r0
    9c24:	61 1d       	adc	r22, r1
    9c26:	22 1f       	adc	r18, r18
    9c28:	74 9f       	mul	r23, r20
    9c2a:	33 27       	eor	r19, r19
    9c2c:	a0 0d       	add	r26, r0
    9c2e:	61 1d       	adc	r22, r1
    9c30:	23 1f       	adc	r18, r19
    9c32:	84 9f       	mul	r24, r20
    9c34:	60 0d       	add	r22, r0
    9c36:	21 1d       	adc	r18, r1
    9c38:	82 2f       	mov	r24, r18
    9c3a:	76 2f       	mov	r23, r22
    9c3c:	6a 2f       	mov	r22, r26
    9c3e:	11 24       	eor	r1, r1
    9c40:	9f 57       	subi	r25, 0x7F	; 127
    9c42:	50 40       	sbci	r21, 0x00	; 0
    9c44:	8a f0       	brmi	.+34     	; 0x9c68 <__mulsf3_pse+0x84>
    9c46:	e1 f0       	breq	.+56     	; 0x9c80 <__mulsf3_pse+0x9c>
    9c48:	88 23       	and	r24, r24
    9c4a:	4a f0       	brmi	.+18     	; 0x9c5e <__mulsf3_pse+0x7a>
    9c4c:	ee 0f       	add	r30, r30
    9c4e:	ff 1f       	adc	r31, r31
    9c50:	bb 1f       	adc	r27, r27
    9c52:	66 1f       	adc	r22, r22
    9c54:	77 1f       	adc	r23, r23
    9c56:	88 1f       	adc	r24, r24
    9c58:	91 50       	subi	r25, 0x01	; 1
    9c5a:	50 40       	sbci	r21, 0x00	; 0
    9c5c:	a9 f7       	brne	.-22     	; 0x9c48 <__mulsf3_pse+0x64>
    9c5e:	9e 3f       	cpi	r25, 0xFE	; 254
    9c60:	51 05       	cpc	r21, r1
    9c62:	70 f0       	brcs	.+28     	; 0x9c80 <__mulsf3_pse+0x9c>
    9c64:	fb ce       	rjmp	.-522    	; 0x9a5c <__fp_inf>
    9c66:	a3 cf       	rjmp	.-186    	; 0x9bae <__fp_szero>
    9c68:	5f 3f       	cpi	r21, 0xFF	; 255
    9c6a:	ec f3       	brlt	.-6      	; 0x9c66 <__mulsf3_pse+0x82>
    9c6c:	98 3e       	cpi	r25, 0xE8	; 232
    9c6e:	dc f3       	brlt	.-10     	; 0x9c66 <__mulsf3_pse+0x82>
    9c70:	86 95       	lsr	r24
    9c72:	77 95       	ror	r23
    9c74:	67 95       	ror	r22
    9c76:	b7 95       	ror	r27
    9c78:	f7 95       	ror	r31
    9c7a:	e7 95       	ror	r30
    9c7c:	9f 5f       	subi	r25, 0xFF	; 255
    9c7e:	c1 f7       	brne	.-16     	; 0x9c70 <__mulsf3_pse+0x8c>
    9c80:	fe 2b       	or	r31, r30
    9c82:	88 0f       	add	r24, r24
    9c84:	91 1d       	adc	r25, r1
    9c86:	96 95       	lsr	r25
    9c88:	87 95       	ror	r24
    9c8a:	97 f9       	bld	r25, 7
    9c8c:	08 95       	ret

00009c8e <sin>:
    9c8e:	9f 93       	push	r25
    9c90:	22 df       	rcall	.-444    	; 0x9ad6 <__fp_rempio2>
    9c92:	0f 90       	pop	r0
    9c94:	07 fc       	sbrc	r0, 7
    9c96:	ee 5f       	subi	r30, 0xFE	; 254
    9c98:	56 cf       	rjmp	.-340    	; 0x9b46 <__fp_sinus>

00009c9a <square>:
    9c9a:	9b 01       	movw	r18, r22
    9c9c:	ac 01       	movw	r20, r24
    9c9e:	94 cf       	rjmp	.-216    	; 0x9bc8 <__mulsf3>

00009ca0 <__fp_mpack>:
    9ca0:	9f 3f       	cpi	r25, 0xFF	; 255
    9ca2:	31 f0       	breq	.+12     	; 0x9cb0 <__fp_mpack_finite+0xc>

00009ca4 <__fp_mpack_finite>:
    9ca4:	91 50       	subi	r25, 0x01	; 1
    9ca6:	20 f4       	brcc	.+8      	; 0x9cb0 <__fp_mpack_finite+0xc>
    9ca8:	87 95       	ror	r24
    9caa:	77 95       	ror	r23
    9cac:	67 95       	ror	r22
    9cae:	b7 95       	ror	r27
    9cb0:	88 0f       	add	r24, r24
    9cb2:	91 1d       	adc	r25, r1
    9cb4:	96 95       	lsr	r25
    9cb6:	87 95       	ror	r24
    9cb8:	97 f9       	bld	r25, 7
    9cba:	08 95       	ret

00009cbc <__fp_powsodd>:
    9cbc:	9f 93       	push	r25
    9cbe:	8f 93       	push	r24
    9cc0:	7f 93       	push	r23
    9cc2:	6f 93       	push	r22
    9cc4:	ff 93       	push	r31
    9cc6:	ef 93       	push	r30
    9cc8:	9b 01       	movw	r18, r22
    9cca:	ac 01       	movw	r20, r24
    9ccc:	7d df       	rcall	.-262    	; 0x9bc8 <__mulsf3>
    9cce:	ef 91       	pop	r30
    9cd0:	ff 91       	pop	r31
    9cd2:	cd de       	rcall	.-614    	; 0x9a6e <__fp_powser>
    9cd4:	2f 91       	pop	r18
    9cd6:	3f 91       	pop	r19
    9cd8:	4f 91       	pop	r20
    9cda:	5f 91       	pop	r21
    9cdc:	75 cf       	rjmp	.-278    	; 0x9bc8 <__mulsf3>

00009cde <__mulsi3>:
    9cde:	62 9f       	mul	r22, r18
    9ce0:	d0 01       	movw	r26, r0
    9ce2:	73 9f       	mul	r23, r19
    9ce4:	f0 01       	movw	r30, r0
    9ce6:	82 9f       	mul	r24, r18
    9ce8:	e0 0d       	add	r30, r0
    9cea:	f1 1d       	adc	r31, r1
    9cec:	64 9f       	mul	r22, r20
    9cee:	e0 0d       	add	r30, r0
    9cf0:	f1 1d       	adc	r31, r1
    9cf2:	92 9f       	mul	r25, r18
    9cf4:	f0 0d       	add	r31, r0
    9cf6:	83 9f       	mul	r24, r19
    9cf8:	f0 0d       	add	r31, r0
    9cfa:	74 9f       	mul	r23, r20
    9cfc:	f0 0d       	add	r31, r0
    9cfe:	65 9f       	mul	r22, r21
    9d00:	f0 0d       	add	r31, r0
    9d02:	99 27       	eor	r25, r25
    9d04:	72 9f       	mul	r23, r18
    9d06:	b0 0d       	add	r27, r0
    9d08:	e1 1d       	adc	r30, r1
    9d0a:	f9 1f       	adc	r31, r25
    9d0c:	63 9f       	mul	r22, r19
    9d0e:	b0 0d       	add	r27, r0
    9d10:	e1 1d       	adc	r30, r1
    9d12:	f9 1f       	adc	r31, r25
    9d14:	bd 01       	movw	r22, r26
    9d16:	cf 01       	movw	r24, r30
    9d18:	11 24       	eor	r1, r1
    9d1a:	08 95       	ret

00009d1c <__udivmodhi4>:
    9d1c:	aa 1b       	sub	r26, r26
    9d1e:	bb 1b       	sub	r27, r27
    9d20:	51 e1       	ldi	r21, 0x11	; 17
    9d22:	07 c0       	rjmp	.+14     	; 0x9d32 <__udivmodhi4_ep>

00009d24 <__udivmodhi4_loop>:
    9d24:	aa 1f       	adc	r26, r26
    9d26:	bb 1f       	adc	r27, r27
    9d28:	a6 17       	cp	r26, r22
    9d2a:	b7 07       	cpc	r27, r23
    9d2c:	10 f0       	brcs	.+4      	; 0x9d32 <__udivmodhi4_ep>
    9d2e:	a6 1b       	sub	r26, r22
    9d30:	b7 0b       	sbc	r27, r23

00009d32 <__udivmodhi4_ep>:
    9d32:	88 1f       	adc	r24, r24
    9d34:	99 1f       	adc	r25, r25
    9d36:	5a 95       	dec	r21
    9d38:	a9 f7       	brne	.-22     	; 0x9d24 <__udivmodhi4_loop>
    9d3a:	80 95       	com	r24
    9d3c:	90 95       	com	r25
    9d3e:	bc 01       	movw	r22, r24
    9d40:	cd 01       	movw	r24, r26
    9d42:	08 95       	ret

00009d44 <__divmodhi4>:
    9d44:	97 fb       	bst	r25, 7
    9d46:	09 2e       	mov	r0, r25
    9d48:	07 26       	eor	r0, r23
    9d4a:	0a d0       	rcall	.+20     	; 0x9d60 <__divmodhi4_neg1>
    9d4c:	77 fd       	sbrc	r23, 7
    9d4e:	04 d0       	rcall	.+8      	; 0x9d58 <__divmodhi4_neg2>
    9d50:	e5 df       	rcall	.-54     	; 0x9d1c <__udivmodhi4>
    9d52:	06 d0       	rcall	.+12     	; 0x9d60 <__divmodhi4_neg1>
    9d54:	00 20       	and	r0, r0
    9d56:	1a f4       	brpl	.+6      	; 0x9d5e <__divmodhi4_exit>

00009d58 <__divmodhi4_neg2>:
    9d58:	70 95       	com	r23
    9d5a:	61 95       	neg	r22
    9d5c:	7f 4f       	sbci	r23, 0xFF	; 255

00009d5e <__divmodhi4_exit>:
    9d5e:	08 95       	ret

00009d60 <__divmodhi4_neg1>:
    9d60:	f6 f7       	brtc	.-4      	; 0x9d5e <__divmodhi4_exit>
    9d62:	90 95       	com	r25
    9d64:	81 95       	neg	r24
    9d66:	9f 4f       	sbci	r25, 0xFF	; 255
    9d68:	08 95       	ret

00009d6a <__divmodsi4>:
    9d6a:	97 fb       	bst	r25, 7
    9d6c:	09 2e       	mov	r0, r25
    9d6e:	05 26       	eor	r0, r21
    9d70:	0e d0       	rcall	.+28     	; 0x9d8e <__divmodsi4_neg1>
    9d72:	57 fd       	sbrc	r21, 7
    9d74:	04 d0       	rcall	.+8      	; 0x9d7e <__divmodsi4_neg2>
    9d76:	14 d0       	rcall	.+40     	; 0x9da0 <__udivmodsi4>
    9d78:	0a d0       	rcall	.+20     	; 0x9d8e <__divmodsi4_neg1>
    9d7a:	00 1c       	adc	r0, r0
    9d7c:	38 f4       	brcc	.+14     	; 0x9d8c <__divmodsi4_exit>

00009d7e <__divmodsi4_neg2>:
    9d7e:	50 95       	com	r21
    9d80:	40 95       	com	r20
    9d82:	30 95       	com	r19
    9d84:	21 95       	neg	r18
    9d86:	3f 4f       	sbci	r19, 0xFF	; 255
    9d88:	4f 4f       	sbci	r20, 0xFF	; 255
    9d8a:	5f 4f       	sbci	r21, 0xFF	; 255

00009d8c <__divmodsi4_exit>:
    9d8c:	08 95       	ret

00009d8e <__divmodsi4_neg1>:
    9d8e:	f6 f7       	brtc	.-4      	; 0x9d8c <__divmodsi4_exit>
    9d90:	90 95       	com	r25
    9d92:	80 95       	com	r24
    9d94:	70 95       	com	r23
    9d96:	61 95       	neg	r22
    9d98:	7f 4f       	sbci	r23, 0xFF	; 255
    9d9a:	8f 4f       	sbci	r24, 0xFF	; 255
    9d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    9d9e:	08 95       	ret

00009da0 <__udivmodsi4>:
    9da0:	a1 e2       	ldi	r26, 0x21	; 33
    9da2:	1a 2e       	mov	r1, r26
    9da4:	aa 1b       	sub	r26, r26
    9da6:	bb 1b       	sub	r27, r27
    9da8:	fd 01       	movw	r30, r26
    9daa:	0d c0       	rjmp	.+26     	; 0x9dc6 <__udivmodsi4_ep>

00009dac <__udivmodsi4_loop>:
    9dac:	aa 1f       	adc	r26, r26
    9dae:	bb 1f       	adc	r27, r27
    9db0:	ee 1f       	adc	r30, r30
    9db2:	ff 1f       	adc	r31, r31
    9db4:	a2 17       	cp	r26, r18
    9db6:	b3 07       	cpc	r27, r19
    9db8:	e4 07       	cpc	r30, r20
    9dba:	f5 07       	cpc	r31, r21
    9dbc:	20 f0       	brcs	.+8      	; 0x9dc6 <__udivmodsi4_ep>
    9dbe:	a2 1b       	sub	r26, r18
    9dc0:	b3 0b       	sbc	r27, r19
    9dc2:	e4 0b       	sbc	r30, r20
    9dc4:	f5 0b       	sbc	r31, r21

00009dc6 <__udivmodsi4_ep>:
    9dc6:	66 1f       	adc	r22, r22
    9dc8:	77 1f       	adc	r23, r23
    9dca:	88 1f       	adc	r24, r24
    9dcc:	99 1f       	adc	r25, r25
    9dce:	1a 94       	dec	r1
    9dd0:	69 f7       	brne	.-38     	; 0x9dac <__udivmodsi4_loop>
    9dd2:	60 95       	com	r22
    9dd4:	70 95       	com	r23
    9dd6:	80 95       	com	r24
    9dd8:	90 95       	com	r25
    9dda:	9b 01       	movw	r18, r22
    9ddc:	ac 01       	movw	r20, r24
    9dde:	bd 01       	movw	r22, r26
    9de0:	cf 01       	movw	r24, r30
    9de2:	08 95       	ret

00009de4 <do_rand>:
    9de4:	af 92       	push	r10
    9de6:	bf 92       	push	r11
    9de8:	cf 92       	push	r12
    9dea:	df 92       	push	r13
    9dec:	ef 92       	push	r14
    9dee:	ff 92       	push	r15
    9df0:	0f 93       	push	r16
    9df2:	1f 93       	push	r17
    9df4:	cf 93       	push	r28
    9df6:	df 93       	push	r29
    9df8:	ec 01       	movw	r28, r24
    9dfa:	a8 80       	ld	r10, Y
    9dfc:	b9 80       	ldd	r11, Y+1	; 0x01
    9dfe:	ca 80       	ldd	r12, Y+2	; 0x02
    9e00:	db 80       	ldd	r13, Y+3	; 0x03
    9e02:	a1 14       	cp	r10, r1
    9e04:	b1 04       	cpc	r11, r1
    9e06:	c1 04       	cpc	r12, r1
    9e08:	d1 04       	cpc	r13, r1
    9e0a:	41 f4       	brne	.+16     	; 0x9e1c <do_rand+0x38>
    9e0c:	84 e2       	ldi	r24, 0x24	; 36
    9e0e:	a8 2e       	mov	r10, r24
    9e10:	89 ed       	ldi	r24, 0xD9	; 217
    9e12:	b8 2e       	mov	r11, r24
    9e14:	8b e5       	ldi	r24, 0x5B	; 91
    9e16:	c8 2e       	mov	r12, r24
    9e18:	87 e0       	ldi	r24, 0x07	; 7
    9e1a:	d8 2e       	mov	r13, r24
    9e1c:	c6 01       	movw	r24, r12
    9e1e:	b5 01       	movw	r22, r10
    9e20:	2d e1       	ldi	r18, 0x1D	; 29
    9e22:	33 ef       	ldi	r19, 0xF3	; 243
    9e24:	41 e0       	ldi	r20, 0x01	; 1
    9e26:	50 e0       	ldi	r21, 0x00	; 0
    9e28:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <__divmodsi4>
    9e2c:	27 ea       	ldi	r18, 0xA7	; 167
    9e2e:	31 e4       	ldi	r19, 0x41	; 65
    9e30:	40 e0       	ldi	r20, 0x00	; 0
    9e32:	50 e0       	ldi	r21, 0x00	; 0
    9e34:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__mulsi3>
    9e38:	7b 01       	movw	r14, r22
    9e3a:	8c 01       	movw	r16, r24
    9e3c:	c6 01       	movw	r24, r12
    9e3e:	b5 01       	movw	r22, r10
    9e40:	2d e1       	ldi	r18, 0x1D	; 29
    9e42:	33 ef       	ldi	r19, 0xF3	; 243
    9e44:	41 e0       	ldi	r20, 0x01	; 1
    9e46:	50 e0       	ldi	r21, 0x00	; 0
    9e48:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <__divmodsi4>
    9e4c:	ca 01       	movw	r24, r20
    9e4e:	b9 01       	movw	r22, r18
    9e50:	2c ee       	ldi	r18, 0xEC	; 236
    9e52:	34 ef       	ldi	r19, 0xF4	; 244
    9e54:	4f ef       	ldi	r20, 0xFF	; 255
    9e56:	5f ef       	ldi	r21, 0xFF	; 255
    9e58:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__mulsi3>
    9e5c:	6e 0d       	add	r22, r14
    9e5e:	7f 1d       	adc	r23, r15
    9e60:	80 1f       	adc	r24, r16
    9e62:	91 1f       	adc	r25, r17
    9e64:	97 ff       	sbrs	r25, 7
    9e66:	04 c0       	rjmp	.+8      	; 0x9e70 <do_rand+0x8c>
    9e68:	61 50       	subi	r22, 0x01	; 1
    9e6a:	70 40       	sbci	r23, 0x00	; 0
    9e6c:	80 40       	sbci	r24, 0x00	; 0
    9e6e:	90 48       	sbci	r25, 0x80	; 128
    9e70:	68 83       	st	Y, r22
    9e72:	79 83       	std	Y+1, r23	; 0x01
    9e74:	8a 83       	std	Y+2, r24	; 0x02
    9e76:	9b 83       	std	Y+3, r25	; 0x03
    9e78:	9b 01       	movw	r18, r22
    9e7a:	3f 77       	andi	r19, 0x7F	; 127
    9e7c:	c9 01       	movw	r24, r18
    9e7e:	df 91       	pop	r29
    9e80:	cf 91       	pop	r28
    9e82:	1f 91       	pop	r17
    9e84:	0f 91       	pop	r16
    9e86:	ff 90       	pop	r15
    9e88:	ef 90       	pop	r14
    9e8a:	df 90       	pop	r13
    9e8c:	cf 90       	pop	r12
    9e8e:	bf 90       	pop	r11
    9e90:	af 90       	pop	r10
    9e92:	08 95       	ret

00009e94 <rand_r>:
    9e94:	0e 94 f2 4e 	call	0x9de4	; 0x9de4 <do_rand>
    9e98:	08 95       	ret

00009e9a <rand>:
    9e9a:	86 e1       	ldi	r24, 0x16	; 22
    9e9c:	92 e0       	ldi	r25, 0x02	; 2
    9e9e:	0e 94 f2 4e 	call	0x9de4	; 0x9de4 <do_rand>
    9ea2:	08 95       	ret

00009ea4 <srand>:
    9ea4:	a0 e0       	ldi	r26, 0x00	; 0
    9ea6:	b0 e0       	ldi	r27, 0x00	; 0
    9ea8:	80 93 16 02 	sts	0x0216, r24
    9eac:	90 93 17 02 	sts	0x0217, r25
    9eb0:	a0 93 18 02 	sts	0x0218, r26
    9eb4:	b0 93 19 02 	sts	0x0219, r27
    9eb8:	08 95       	ret

00009eba <memset>:
    9eba:	dc 01       	movw	r26, r24
    9ebc:	01 c0       	rjmp	.+2      	; 0x9ec0 <memset+0x6>
    9ebe:	6d 93       	st	X+, r22
    9ec0:	41 50       	subi	r20, 0x01	; 1
    9ec2:	50 40       	sbci	r21, 0x00	; 0
    9ec4:	e0 f7       	brcc	.-8      	; 0x9ebe <memset+0x4>
    9ec6:	08 95       	ret

00009ec8 <__eerd_block_m2560>:
    9ec8:	dc 01       	movw	r26, r24
    9eca:	cb 01       	movw	r24, r22

00009ecc <__eerd_blraw_m2560>:
    9ecc:	fc 01       	movw	r30, r24
    9ece:	f9 99       	sbic	0x1f, 1	; 31
    9ed0:	fe cf       	rjmp	.-4      	; 0x9ece <__eerd_blraw_m2560+0x2>
    9ed2:	06 c0       	rjmp	.+12     	; 0x9ee0 <__eerd_blraw_m2560+0x14>
    9ed4:	f2 bd       	out	0x22, r31	; 34
    9ed6:	e1 bd       	out	0x21, r30	; 33
    9ed8:	f8 9a       	sbi	0x1f, 0	; 31
    9eda:	31 96       	adiw	r30, 0x01	; 1
    9edc:	00 b4       	in	r0, 0x20	; 32
    9ede:	0d 92       	st	X+, r0
    9ee0:	41 50       	subi	r20, 0x01	; 1
    9ee2:	50 40       	sbci	r21, 0x00	; 0
    9ee4:	b8 f7       	brcc	.-18     	; 0x9ed4 <__eerd_blraw_m2560+0x8>
    9ee6:	08 95       	ret

00009ee8 <__eerd_byte_m2560>:
    9ee8:	f9 99       	sbic	0x1f, 1	; 31
    9eea:	fe cf       	rjmp	.-4      	; 0x9ee8 <__eerd_byte_m2560>
    9eec:	92 bd       	out	0x22, r25	; 34
    9eee:	81 bd       	out	0x21, r24	; 33
    9ef0:	f8 9a       	sbi	0x1f, 0	; 31
    9ef2:	99 27       	eor	r25, r25
    9ef4:	80 b5       	in	r24, 0x20	; 32
    9ef6:	08 95       	ret

00009ef8 <__eerd_word_m2560>:
    9ef8:	a8 e1       	ldi	r26, 0x18	; 24
    9efa:	b0 e0       	ldi	r27, 0x00	; 0
    9efc:	42 e0       	ldi	r20, 0x02	; 2
    9efe:	50 e0       	ldi	r21, 0x00	; 0
    9f00:	0c 94 66 4f 	jmp	0x9ecc	; 0x9ecc <__eerd_blraw_m2560>

00009f04 <__eeupd_block_m2560>:
    9f04:	dc 01       	movw	r26, r24
    9f06:	a4 0f       	add	r26, r20
    9f08:	b5 1f       	adc	r27, r21
    9f0a:	41 50       	subi	r20, 0x01	; 1
    9f0c:	50 40       	sbci	r21, 0x00	; 0
    9f0e:	48 f0       	brcs	.+18     	; 0x9f22 <__eeupd_block_m2560+0x1e>
    9f10:	cb 01       	movw	r24, r22
    9f12:	84 0f       	add	r24, r20
    9f14:	95 1f       	adc	r25, r21
    9f16:	2e 91       	ld	r18, -X
    9f18:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <__eeupd_r18_m2560>
    9f1c:	41 50       	subi	r20, 0x01	; 1
    9f1e:	50 40       	sbci	r21, 0x00	; 0
    9f20:	d0 f7       	brcc	.-12     	; 0x9f16 <__eeupd_block_m2560+0x12>
    9f22:	08 95       	ret

00009f24 <__eeupd_byte_m2560>:
    9f24:	26 2f       	mov	r18, r22

00009f26 <__eeupd_r18_m2560>:
    9f26:	f9 99       	sbic	0x1f, 1	; 31
    9f28:	fe cf       	rjmp	.-4      	; 0x9f26 <__eeupd_r18_m2560>
    9f2a:	92 bd       	out	0x22, r25	; 34
    9f2c:	81 bd       	out	0x21, r24	; 33
    9f2e:	f8 9a       	sbi	0x1f, 0	; 31
    9f30:	01 97       	sbiw	r24, 0x01	; 1
    9f32:	00 b4       	in	r0, 0x20	; 32
    9f34:	02 16       	cp	r0, r18
    9f36:	39 f0       	breq	.+14     	; 0x9f46 <__eeupd_r18_m2560+0x20>
    9f38:	1f ba       	out	0x1f, r1	; 31
    9f3a:	20 bd       	out	0x20, r18	; 32
    9f3c:	0f b6       	in	r0, 0x3f	; 63
    9f3e:	f8 94       	cli
    9f40:	fa 9a       	sbi	0x1f, 2	; 31
    9f42:	f9 9a       	sbi	0x1f, 1	; 31
    9f44:	0f be       	out	0x3f, r0	; 63
    9f46:	08 95       	ret

00009f48 <__eeupd_word_m2560>:
    9f48:	01 96       	adiw	r24, 0x01	; 1
    9f4a:	27 2f       	mov	r18, r23
    9f4c:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <__eeupd_r18_m2560>
    9f50:	0c 94 92 4f 	jmp	0x9f24	; 0x9f24 <__eeupd_byte_m2560>

00009f54 <__eewr_byte_m2560>:
    9f54:	26 2f       	mov	r18, r22

00009f56 <__eewr_r18_m2560>:
    9f56:	f9 99       	sbic	0x1f, 1	; 31
    9f58:	fe cf       	rjmp	.-4      	; 0x9f56 <__eewr_r18_m2560>
    9f5a:	1f ba       	out	0x1f, r1	; 31
    9f5c:	92 bd       	out	0x22, r25	; 34
    9f5e:	81 bd       	out	0x21, r24	; 33
    9f60:	20 bd       	out	0x20, r18	; 32
    9f62:	0f b6       	in	r0, 0x3f	; 63
    9f64:	f8 94       	cli
    9f66:	fa 9a       	sbi	0x1f, 2	; 31
    9f68:	f9 9a       	sbi	0x1f, 1	; 31
    9f6a:	0f be       	out	0x3f, r0	; 63
    9f6c:	01 96       	adiw	r24, 0x01	; 1
    9f6e:	08 95       	ret

00009f70 <_exit>:
    9f70:	f8 94       	cli

00009f72 <__stop_program>:
    9f72:	ff cf       	rjmp	.-2      	; 0x9f72 <__stop_program>
